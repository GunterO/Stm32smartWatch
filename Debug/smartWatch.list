
smartWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c680  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b6e4  0802c810  0802c810  0003c810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08047ef4  08047ef4  00062a2c  2**0
                  CONTENTS
  4 .ARM          00000008  08047ef4  08047ef4  00057ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08047efc  08047efc  00062a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08047efc  08047efc  00057efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08047f00  08047f00  00057f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a2c  20000000  08047f04  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019758  20002a30  0804a930  00062a30  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001c188  0804a930  0006c188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00062a2c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009bd2a  00000000  00000000  00062a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00010179  00000000  00000000  000fe786  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003b20  00000000  00000000  0010e900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000036e0  00000000  00000000  00112420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e9a  00000000  00000000  00115b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00073b2d  00000000  00000000  0013799a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e94b3  00000000  00000000  001ab4c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0029497a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f79c  00000000  00000000  002949f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002a30 	.word	0x20002a30
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802c7f8 	.word	0x0802c7f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002a34 	.word	0x20002a34
 80001cc:	0802c7f8 	.word	0x0802c7f8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fde6 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f840 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 fa82 	bl	80014bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb8:	f000 fa60 	bl	800147c <MX_DMA_Init>
  MX_RTC_Init();
 8000fbc:	f000 f8bc 	bl	8001138 <MX_RTC_Init>
  MX_SPI1_Init();
 8000fc0:	f000 f914 	bl	80011ec <MX_SPI1_Init>
  MX_TIM4_Init();
 8000fc4:	f000 f9e2 	bl	800138c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8000fc8:	f000 fa2e 	bl	8001428 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000fcc:	f000 f990 	bl	80012f0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000fd0:	f000 f942 	bl	8001258 <MX_TIM2_Init>

	//tos_RTC_init(&hrtc);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd4:	f004 f83e 	bl	8005054 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of guiTAsk */
  guiTAskHandle = osThreadNew(StartguiTAsk, NULL, &guiTAsk_attributes);
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <main+0x68>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <main+0x6c>)
 8000fde:	f004 f8a3 	bl	8005128 <osThreadNew>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <main+0x70>)
 8000fe6:	601a      	str	r2, [r3, #0]

  /* creation of controllerTask */
  controllerTaskHandle = osThreadNew(StartcontrollerTask, NULL, &controllerTask_attributes);
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <main+0x74>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <main+0x78>)
 8000fee:	f004 f89b 	bl	8005128 <osThreadNew>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <main+0x7c>)
 8000ff6:	601a      	str	r2, [r3, #0]

  /* creation of bluetoothTask */
  bluetoothTaskHandle = osThreadNew(StartbluetoothTask, NULL, &bluetoothTask_attributes);
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <main+0x80>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	480b      	ldr	r0, [pc, #44]	; (800102c <main+0x84>)
 8000ffe:	f004 f893 	bl	8005128 <osThreadNew>
 8001002:	4602      	mov	r2, r0
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <main+0x88>)
 8001006:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001008:	f004 f858 	bl	80050bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100c:	e7fe      	b.n	800100c <main+0x64>
 800100e:	bf00      	nop
 8001010:	0802d140 	.word	0x0802d140
 8001014:	080015b5 	.word	0x080015b5
 8001018:	2001b608 	.word	0x2001b608
 800101c:	0802d164 	.word	0x0802d164
 8001020:	080015f1 	.word	0x080015f1
 8001024:	2001b7a8 	.word	0x2001b7a8
 8001028:	0802d188 	.word	0x0802d188
 800102c:	08001611 	.word	0x08001611
 8001030:	2001b64c 	.word	0x2001b64c

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b098      	sub	sp, #96	; 0x60
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800103e:	2230      	movs	r2, #48	; 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f028 fec1 	bl	8029dca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b31      	ldr	r3, [pc, #196]	; (8001130 <SystemClock_Config+0xfc>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a30      	ldr	r2, [pc, #192]	; (8001130 <SystemClock_Config+0xfc>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <SystemClock_Config+0xfc>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <SystemClock_Config+0x100>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a2a      	ldr	r2, [pc, #168]	; (8001134 <SystemClock_Config+0x100>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemClock_Config+0x100>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800109e:	2309      	movs	r3, #9
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010ba:	23a8      	movs	r3, #168	; 0xa8
 80010bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fb50 	bl	8002770 <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fac7 	bl	8001668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2302      	movs	r3, #2
 80010e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2105      	movs	r1, #5
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fda9 	bl	8002c50 <HAL_RCC_ClockConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001104:	f000 fab0 	bl	8001668 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001108:	2302      	movs	r3, #2
 800110a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800110c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001110:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	4618      	mov	r0, r3
 8001118:	f001 ffbe 	bl	8003098 <HAL_RCCEx_PeriphCLKConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001122:	f000 faa1 	bl	8001668 <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3760      	adds	r7, #96	; 0x60
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800114c:	2300      	movs	r3, #0
 800114e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_RTC_Init+0xac>)
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <MX_RTC_Init+0xb0>)
 8001154:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <MX_RTC_Init+0xac>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_RTC_Init+0xac>)
 800115e:	227f      	movs	r2, #127	; 0x7f
 8001160:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_RTC_Init+0xac>)
 8001164:	22f9      	movs	r2, #249	; 0xf9
 8001166:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_RTC_Init+0xac>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_RTC_Init+0xac>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_RTC_Init+0xac>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800117a:	481a      	ldr	r0, [pc, #104]	; (80011e4 <MX_RTC_Init+0xac>)
 800117c:	f002 f86e 	bl	800325c <HAL_RTC_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001186:	f000 fa6f 	bl	8001668 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	4619      	mov	r1, r3
 80011a4:	480f      	ldr	r0, [pc, #60]	; (80011e4 <MX_RTC_Init+0xac>)
 80011a6:	f002 f8ea 	bl	800337e <HAL_RTC_SetTime>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80011b0:	f000 fa5a 	bl	8001668 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011b4:	2301      	movs	r3, #1
 80011b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80011b8:	2301      	movs	r3, #1
 80011ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_RTC_Init+0xac>)
 80011cc:	f002 f9f2 	bl	80035b4 <HAL_RTC_SetDate>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011d6:	f000 fa47 	bl	8001668 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2001b650 	.word	0x2001b650
 80011e8:	40002800 	.word	0x40002800

080011ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_SPI1_Init+0x64>)
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_SPI1_Init+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_SPI1_Init+0x64>)
 80011f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_SPI1_Init+0x64>)
 8001218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_SPI1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_SPI1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <MX_SPI1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_SPI1_Init+0x64>)
 8001238:	220a      	movs	r2, #10
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_SPI1_Init+0x64>)
 800123e:	f002 fb3f 	bl	80038c0 <HAL_SPI_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001248:	f000 fa0e 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2001b6b0 	.word	0x2001b6b0
 8001254:	40013000 	.word	0x40013000

08001258 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <MX_TIM2_Init+0x94>)
 8001276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_TIM2_Init+0x94>)
 800127e:	2254      	movs	r2, #84	; 0x54
 8001280:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_TIM2_Init+0x94>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_TIM2_Init+0x94>)
 800128a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800128e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_TIM2_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_TIM2_Init+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800129c:	4813      	ldr	r0, [pc, #76]	; (80012ec <MX_TIM2_Init+0x94>)
 800129e:	f002 fd53 	bl	8003d48 <HAL_TIM_Base_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012a8:	f000 f9de 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <MX_TIM2_Init+0x94>)
 80012ba:	f002 fec7 	bl	800404c <HAL_TIM_ConfigClockSource>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012c4:	f000 f9d0 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_TIM2_Init+0x94>)
 80012d6:	f003 f8d3 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012e0:	f000 f9c2 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2001b708 	.word	0x2001b708

080012f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_TIM3_Init+0x94>)
 800130e:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <MX_TIM3_Init+0x98>)
 8001310:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_TIM3_Init+0x94>)
 8001314:	2254      	movs	r2, #84	; 0x54
 8001316:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_TIM3_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_TIM3_Init+0x94>)
 8001320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001324:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_TIM3_Init+0x94>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_TIM3_Init+0x94>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001332:	4814      	ldr	r0, [pc, #80]	; (8001384 <MX_TIM3_Init+0x94>)
 8001334:	f002 fd08 	bl	8003d48 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800133e:	f000 f993 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_TIM3_Init+0x94>)
 8001350:	f002 fe7c 	bl	800404c <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800135a:	f000 f985 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_TIM3_Init+0x94>)
 800136c:	f003 f888 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001376:	f000 f977 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2001b60c 	.word	0x2001b60c
 8001388:	40000400 	.word	0x40000400

0800138c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_TIM4_Init+0x94>)
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <MX_TIM4_Init+0x98>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_TIM4_Init+0x94>)
 80013b0:	2254      	movs	r2, #84	; 0x54
 80013b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_TIM4_Init+0x94>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_TIM4_Init+0x94>)
 80013bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_TIM4_Init+0x94>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_TIM4_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013ce:	4814      	ldr	r0, [pc, #80]	; (8001420 <MX_TIM4_Init+0x94>)
 80013d0:	f002 fcba 	bl	8003d48 <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013da:	f000 f945 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_TIM4_Init+0x94>)
 80013ec:	f002 fe2e 	bl	800404c <HAL_TIM_ConfigClockSource>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013f6:	f000 f937 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_TIM4_Init+0x94>)
 8001408:	f003 f83a 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001412:	f000 f929 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2001b5c8 	.word	0x2001b5c8
 8001424:	40000800 	.word	0x40000800

08001428 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_USART6_UART_Init+0x4c>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <MX_USART6_UART_Init+0x50>)
 8001430:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <MX_USART6_UART_Init+0x4c>)
 8001434:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001438:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_USART6_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_USART6_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_USART6_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_USART6_UART_Init+0x4c>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_USART6_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_USART6_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_USART6_UART_Init+0x4c>)
 8001460:	f003 f89e 	bl	80045a0 <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800146a:	f000 f8fd 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  /* USER CODE END USART6_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2001b670 	.word	0x2001b670
 8001478:	40011400 	.word	0x40011400

0800147c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_DMA_Init+0x3c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <MX_DMA_Init+0x3c>)
 800148c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_DMA_Init+0x3c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2105      	movs	r1, #5
 80014a2:	203b      	movs	r0, #59	; 0x3b
 80014a4:	f000 fc86 	bl	8001db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80014a8:	203b      	movs	r0, #59	; 0x3b
 80014aa:	f000 fc9f 	bl	8001dec <HAL_NVIC_EnableIRQ>

}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <MX_GPIO_Init+0xe8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a32      	ldr	r2, [pc, #200]	; (80015a4 <MX_GPIO_Init+0xe8>)
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <MX_GPIO_Init+0xe8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <MX_GPIO_Init+0xe8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a2b      	ldr	r2, [pc, #172]	; (80015a4 <MX_GPIO_Init+0xe8>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <MX_GPIO_Init+0xe8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <MX_GPIO_Init+0xe8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <MX_GPIO_Init+0xe8>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_GPIO_Init+0xe8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_GPIO_Init+0xe8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <MX_GPIO_Init+0xe8>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_GPIO_Init+0xe8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_RST_Pin|ST7789_DC_Pin|ST7789_CS_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	210e      	movs	r1, #14
 8001546:	4818      	ldr	r0, [pc, #96]	; (80015a8 <MX_GPIO_Init+0xec>)
 8001548:	f001 f8f8 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Left_Btn_Pin Enter_Btn_Pin Right_Btn_Pin */
  GPIO_InitStruct.Pin = Left_Btn_Pin|Enter_Btn_Pin|Right_Btn_Pin;
 800154c:	2370      	movs	r3, #112	; 0x70
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001554:	2301      	movs	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4813      	ldr	r0, [pc, #76]	; (80015ac <MX_GPIO_Init+0xf0>)
 8001560:	f000 ff3a 	bl	80023d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_RST_Pin ST7789_DC_Pin ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin|ST7789_DC_Pin|ST7789_CS_Pin;
 8001564:	230e      	movs	r3, #14
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	480b      	ldr	r0, [pc, #44]	; (80015a8 <MX_GPIO_Init+0xec>)
 800157c:	f000 ff2c 	bl	80023d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothState_Pin */
  GPIO_InitStruct.Pin = BluetoothState_Pin;
 8001580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158a:	2301      	movs	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BluetoothState_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_GPIO_Init+0xf4>)
 8001596:	f000 ff1f 	bl	80023d8 <HAL_GPIO_Init>

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40020800 	.word	0x40020800

080015b4 <StartguiTAsk>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartguiTAsk */
void StartguiTAsk(void *argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  tos_Tft_init();
 80015bc:	f020 fcb2 	bl	8021f24 <tos_Tft_init>
	  tos_Get_Rtc(&hrtc);
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <StartguiTAsk+0x34>)
 80015c2:	f028 f92d 	bl	8029820 <tos_Get_Rtc>
	  tos_Screen_Init();
 80015c6:	f027 fff1 	bl	80295ac <tos_Screen_Init>
		ST7789_UnSelect();
 80015ca:	2201      	movs	r2, #1
 80015cc:	2108      	movs	r1, #8
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <StartguiTAsk+0x38>)
 80015d0:	f001 f8b4 	bl	800273c <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {lv_task_handler();
 80015d4:	f015 f894 	bl	8016700 <lv_task_handler>
  lv_tick_inc(1);
 80015d8:	2001      	movs	r0, #1
 80015da:	f013 fe81 	bl	80152e0 <lv_tick_inc>
    osDelay(1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f003 fe48 	bl	8005274 <osDelay>
  {lv_task_handler();
 80015e4:	e7f6      	b.n	80015d4 <StartguiTAsk+0x20>
 80015e6:	bf00      	nop
 80015e8:	2001b650 	.word	0x2001b650
 80015ec:	40020000 	.word	0x40020000

080015f0 <StartcontrollerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartcontrollerTask */
void StartcontrollerTask(void *argument)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartcontrollerTask */
  /* Infinite loop */
  for(;;)
  {tos_Screen_Variables_Getter(tos_Get_Current_Screen());
 80015f8:	f028 f922 	bl	8029840 <tos_Get_Current_Screen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4618      	mov	r0, r3
 8001600:	f028 f8f6 	bl	80297f0 <tos_Screen_Variables_Getter>
  tos_ScreenController();
 8001604:	f028 f844 	bl	8029690 <tos_ScreenController>
    osDelay(5);
 8001608:	2005      	movs	r0, #5
 800160a:	f003 fe33 	bl	8005274 <osDelay>
  {tos_Screen_Variables_Getter(tos_Get_Current_Screen());
 800160e:	e7f3      	b.n	80015f8 <StartcontrollerTask+0x8>

08001610 <StartbluetoothTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartbluetoothTask */
void StartbluetoothTask(void *argument)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartbluetoothTask */
	tos_Bluetooth_NotificationItemInit();
 8001618:	f027 fc60 	bl	8028edc <tos_Bluetooth_NotificationItemInit>
  /* Infinite loop */
  for(;;)
  {	  tos_BluetoothReceiverAndTransmitter(&hrtc);
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <StartbluetoothTask+0x30>)
 800161e:	f027 fc79 	bl	8028f14 <tos_BluetoothReceiverAndTransmitter>
  	  tos_BluetoothGetStatusVAl(tos_BluetoothGetEnableVal(),tos_Get_Current_Screen());
 8001622:	f027 fe31 	bl	8029288 <tos_BluetoothGetEnableVal>
 8001626:	4603      	mov	r3, r0
 8001628:	461c      	mov	r4, r3
 800162a:	f028 f909 	bl	8029840 <tos_Get_Current_Screen>
 800162e:	4603      	mov	r3, r0
 8001630:	4619      	mov	r1, r3
 8001632:	4620      	mov	r0, r4
 8001634:	f027 fdca 	bl	80291cc <tos_BluetoothGetStatusVAl>
    osDelay(1);
 8001638:	2001      	movs	r0, #1
 800163a:	f003 fe1b 	bl	8005274 <osDelay>
  {	  tos_BluetoothReceiverAndTransmitter(&hrtc);
 800163e:	e7ed      	b.n	800161c <StartbluetoothTask+0xc>
 8001640:	2001b650 	.word	0x2001b650

08001644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001656:	f000 fab3 	bl	8001bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40010000 	.word	0x40010000

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166e:	e7fe      	b.n	800166e <Error_Handler+0x6>

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_MspInit+0x54>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_MspInit+0x54>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_MspInit+0x54>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_MspInit+0x54>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_MspInit+0x54>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_MspInit+0x54>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	210f      	movs	r1, #15
 80016b2:	f06f 0001 	mvn.w	r0, #1
 80016b6:	f000 fb7d 	bl	8001db4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	; (80016ec <HAL_RTC_MspInit+0x24>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d102      	bne.n	80016e0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_RTC_MspInit+0x28>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40002800 	.word	0x40002800
 80016f0:	42470e3c 	.word	0x42470e3c

080016f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a30      	ldr	r2, [pc, #192]	; (80017d4 <HAL_SPI_MspInit+0xe0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d159      	bne.n	80017ca <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_SPI_MspInit+0xe4>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a2e      	ldr	r2, [pc, #184]	; (80017d8 <HAL_SPI_MspInit+0xe4>)
 8001720:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <HAL_SPI_MspInit+0xe4>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <HAL_SPI_MspInit+0xe4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <HAL_SPI_MspInit+0xe4>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <HAL_SPI_MspInit+0xe4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800174e:	23a0      	movs	r3, #160	; 0xa0
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800175e:	2305      	movs	r3, #5
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	481c      	ldr	r0, [pc, #112]	; (80017dc <HAL_SPI_MspInit+0xe8>)
 800176a:	f000 fe35 	bl	80023d8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 8001770:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <HAL_SPI_MspInit+0xf0>)
 8001772:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 8001776:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800177a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 800178a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017ae:	480c      	ldr	r0, [pc, #48]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 80017b0:	f000 fb2a 	bl	8001e08 <HAL_DMA_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80017ba:	f7ff ff55 	bl	8001668 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 80017c2:	649a      	str	r2, [r3, #72]	; 0x48
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <HAL_SPI_MspInit+0xec>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40013000 	.word	0x40013000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	2001b748 	.word	0x2001b748
 80017e4:	40026458 	.word	0x40026458

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d116      	bne.n	8001828 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_TIM_Base_MspInit+0xb8>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_TIM_Base_MspInit+0xb8>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_TIM_Base_MspInit+0xb8>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2105      	movs	r1, #5
 800181a:	201c      	movs	r0, #28
 800181c:	f000 faca 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001820:	201c      	movs	r0, #28
 8001822:	f000 fae3 	bl	8001dec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001826:	e036      	b.n	8001896 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <HAL_TIM_Base_MspInit+0xbc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d116      	bne.n	8001860 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_TIM_Base_MspInit+0xb8>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_TIM_Base_MspInit+0xb8>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_TIM_Base_MspInit+0xb8>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2105      	movs	r1, #5
 8001852:	201d      	movs	r0, #29
 8001854:	f000 faae 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001858:	201d      	movs	r0, #29
 800185a:	f000 fac7 	bl	8001dec <HAL_NVIC_EnableIRQ>
}
 800185e:	e01a      	b.n	8001896 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_TIM_Base_MspInit+0xc0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d115      	bne.n	8001896 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_TIM_Base_MspInit+0xb8>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <HAL_TIM_Base_MspInit+0xb8>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_TIM_Base_MspInit+0xb8>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	201e      	movs	r0, #30
 800188c:	f000 fa92 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001890:	201e      	movs	r0, #30
 8001892:	f000 faab 	bl	8001dec <HAL_NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40000400 	.word	0x40000400
 80018a8:	40000800 	.word	0x40000800

080018ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_UART_MspInit+0x84>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12b      	bne.n	8001926 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018d8:	f043 0320 	orr.w	r3, r3, #32
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f003 0320 	and.w	r3, r3, #32
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001906:	23c0      	movs	r3, #192	; 0xc0
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001916:	2308      	movs	r3, #8
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_UART_MspInit+0x8c>)
 8001922:	f000 fd59 	bl	80023d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40011400 	.word	0x40011400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020800 	.word	0x40020800

0800193c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800194c:	2200      	movs	r2, #0
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	2019      	movs	r0, #25
 8001952:	f000 fa2f 	bl	8001db4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001956:	2019      	movs	r0, #25
 8001958:	f000 fa48 	bl	8001dec <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_InitTick+0xa4>)
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <HAL_InitTick+0xa4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6453      	str	r3, [r2, #68]	; 0x44
 800196c:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_InitTick+0xa4>)
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001978:	f107 0210 	add.w	r2, r7, #16
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fb56 	bl	8003034 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001988:	f001 fb40 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 800198c:	4603      	mov	r3, r0
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <HAL_InitTick+0xa8>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0c9b      	lsrs	r3, r3, #18
 800199c:	3b01      	subs	r3, #1
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_InitTick+0xac>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_InitTick+0xb0>)
 80019a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_InitTick+0xac>)
 80019a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019ae:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <HAL_InitTick+0xac>)
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_InitTick+0xac>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_InitTick+0xac>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019c0:	4809      	ldr	r0, [pc, #36]	; (80019e8 <HAL_InitTick+0xac>)
 80019c2:	f002 f9c1 	bl	8003d48 <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d104      	bne.n	80019d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <HAL_InitTick+0xac>)
 80019ce:	f002 f9e6 	bl	8003d9e <HAL_TIM_Base_Start_IT>
 80019d2:	4603      	mov	r3, r0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3730      	adds	r7, #48	; 0x30
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	431bde83 	.word	0x431bde83
 80019e8:	2001b7ac 	.word	0x2001b7ac
 80019ec:	40010000 	.word	0x40010000

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <NMI_Handler+0x4>

080019f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler+0x4>

08001a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a22:	f002 fa0b 	bl	8003e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2001b7ac 	.word	0x2001b7ac

08001a30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
/*  */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <TIM2_IRQHandler+0x18>)
 8001a36:	f002 fa01 	bl	8003e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  StopWatch_Update_Time();
 8001a3a:	f027 f83d 	bl	8028ab8 <StopWatch_Update_Time>
  RunMode_Update_Time();
 8001a3e:	f024 fb1f 	bl	8026080 <RunMode_Update_Time>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2001b708 	.word	0x2001b708

08001a4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <TIM3_IRQHandler+0x18>)
 8001a52:	f002 f9f3 	bl	8003e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  MainScreen_Updater();
 8001a56:	f021 fdc5 	bl	80235e4 <MainScreen_Updater>
  tos_SleepScreen_Counter();
 8001a5a:	f027 ff11 	bl	8029880 <tos_SleepScreen_Counter>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2001b60c 	.word	0x2001b60c

08001a68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <TIM4_IRQHandler+0x18>)
 8001a6e:	f002 f9e5 	bl	8003e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  tos_ButtonCounterIncrease();
 8001a72:	f027 fca7 	bl	80293c4 <tos_ButtonCounterIncrease>
  tos_firstScreen_Update();
 8001a76:	f027 fdd3 	bl	8029620 <tos_firstScreen_Update>
  /* USER CODE END TIM4_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2001b5c8 	.word	0x2001b5c8

08001a84 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <DMA2_Stream3_IRQHandler+0x10>)
 8001a8a:	f000 fa6b 	bl	8001f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2001b748 	.word	0x2001b748

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d207      	bcs.n	8001ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac8:	f028 f93a 	bl	8029d40 <__errno>
 8001acc:	4602      	mov	r2, r0
 8001ace:	230c      	movs	r3, #12
 8001ad0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ad6:	e009      	b.n	8001aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <_sbrk+0x64>)
 8001ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20020000 	.word	0x20020000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	20002a4c 	.word	0x20002a4c
 8001b00:	2001c188 	.word	0x2001c188

08001b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <SystemInit+0x28>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <SystemInit+0x28>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SystemInit+0x28>)
 8001b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b32:	e003      	b.n	8001b3c <LoopCopyDataInit>

08001b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b3a:	3104      	adds	r1, #4

08001b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b3c:	480a      	ldr	r0, [pc, #40]	; (8001b68 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b44:	d3f6      	bcc.n	8001b34 <CopyDataInit>
  ldr  r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b48:	e002      	b.n	8001b50 <LoopFillZerobss>

08001b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b4c:	f842 3b04 	str.w	r3, [r2], #4

08001b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b54:	d3f9      	bcc.n	8001b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b56:	f7ff ffd5 	bl	8001b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f028 f8f7 	bl	8029d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5e:	f7ff fa23 	bl	8000fa8 <main>
  bx  lr    
 8001b62:	4770      	bx	lr
  ldr  r3, =_sidata
 8001b64:	08047f04 	.word	0x08047f04
  ldr  r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b6c:	20002a2c 	.word	0x20002a2c
  ldr  r2, =_sbss
 8001b70:	20002a30 	.word	0x20002a30
  ldr  r3, = _ebss
 8001b74:	2001c188 	.word	0x2001c188

08001b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_Init+0x40>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_Init+0x40>)
 8001b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_Init+0x40>)
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 f8fa 	bl	8001d9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff fec6 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb0:	f7ff fd5e 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008
 8001be4:	2001b7ec 	.word	0x2001b7ec

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	2001b7ec 	.word	0x2001b7ec

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff ffee 	bl	8001be8 <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_Delay+0x40>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000008 	.word	0x20000008

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <__NVIC_EnableIRQ+0x38>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ff4c 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc6:	f7ff ff61 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001dca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	6978      	ldr	r0, [r7, #20]
 8001dd2:	f7ff ffb1 	bl	8001d38 <NVIC_EncodePriority>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff80 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff54 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff fee8 	bl	8001be8 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e099      	b.n	8001f58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e44:	e00f      	b.n	8001e66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e46:	f7ff fecf 	bl	8001be8 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d908      	bls.n	8001e66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2220      	movs	r2, #32
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e078      	b.n	8001f58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e8      	bne.n	8001e46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <HAL_DMA_Init+0x158>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d107      	bne.n	8001ed0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f023 0307 	bic.w	r3, r3, #7
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d117      	bne.n	8001f2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00e      	beq.n	8001f2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f9e9 	bl	80022e4 <DMA_CheckFifoParam>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2240      	movs	r2, #64	; 0x40
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f26:	2301      	movs	r3, #1
 8001f28:	e016      	b.n	8001f58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f9a0 	bl	8002278 <DMA_CalcBaseAndBitshift>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	223f      	movs	r2, #63	; 0x3f
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	f010803f 	.word	0xf010803f

08001f64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f70:	4b92      	ldr	r3, [pc, #584]	; (80021bc <HAL_DMA_IRQHandler+0x258>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a92      	ldr	r2, [pc, #584]	; (80021c0 <HAL_DMA_IRQHandler+0x25c>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0a9b      	lsrs	r3, r3, #10
 8001f7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2208      	movs	r2, #8
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01a      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0204 	bic.w	r2, r2, #4
 8001fb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d012      	beq.n	8002006 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f043 0202 	orr.w	r2, r3, #2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	2204      	movs	r2, #4
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d012      	beq.n	800203c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00b      	beq.n	800203c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	2204      	movs	r2, #4
 800202a:	409a      	lsls	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f043 0204 	orr.w	r2, r3, #4
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2210      	movs	r2, #16
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d043      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d03c      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	2210      	movs	r2, #16
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d018      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d024      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
 8002092:	e01f      	b.n	80020d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
 80020a4:	e016      	b.n	80020d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0208 	bic.w	r2, r2, #8
 80020c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2220      	movs	r2, #32
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 808e 	beq.w	8002202 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8086 	beq.w	8002202 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2220      	movs	r2, #32
 80020fc:	409a      	lsls	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b05      	cmp	r3, #5
 800210c:	d136      	bne.n	800217c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0216 	bic.w	r2, r2, #22
 800211c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800212c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_DMA_IRQHandler+0x1da>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0208 	bic.w	r2, r2, #8
 800214c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	223f      	movs	r2, #63	; 0x3f
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216e:	2b00      	cmp	r3, #0
 8002170:	d07d      	beq.n	800226e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
        }
        return;
 800217a:	e078      	b.n	800226e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d01c      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d108      	bne.n	80021aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	2b00      	cmp	r3, #0
 800219e:	d030      	beq.n	8002202 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e02b      	b.n	8002202 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d027      	beq.n	8002202 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
 80021ba:	e022      	b.n	8002202 <HAL_DMA_IRQHandler+0x29e>
 80021bc:	20000000 	.word	0x20000000
 80021c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10f      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0210 	bic.w	r2, r2, #16
 80021e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	2b00      	cmp	r3, #0
 8002208:	d032      	beq.n	8002270 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d022      	beq.n	800225c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2205      	movs	r2, #5
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3301      	adds	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	429a      	cmp	r2, r3
 8002238:	d307      	bcc.n	800224a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f2      	bne.n	800222e <HAL_DMA_IRQHandler+0x2ca>
 8002248:	e000      	b.n	800224c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800224a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
 800226c:	e000      	b.n	8002270 <HAL_DMA_IRQHandler+0x30c>
        return;
 800226e:	bf00      	nop
    }
  }
}
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop

08002278 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	3b10      	subs	r3, #16
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <DMA_CalcBaseAndBitshift+0x64>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d909      	bls.n	80022ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ae:	f023 0303 	bic.w	r3, r3, #3
 80022b2:	1d1a      	adds	r2, r3, #4
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	659a      	str	r2, [r3, #88]	; 0x58
 80022b8:	e007      	b.n	80022ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022c2:	f023 0303 	bic.w	r3, r3, #3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	aaaaaaab 	.word	0xaaaaaaab
 80022e0:	0802d1c4 	.word	0x0802d1c4

080022e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d11f      	bne.n	800233e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d855      	bhi.n	80023b0 <DMA_CheckFifoParam+0xcc>
 8002304:	a201      	add	r2, pc, #4	; (adr r2, 800230c <DMA_CheckFifoParam+0x28>)
 8002306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230a:	bf00      	nop
 800230c:	0800231d 	.word	0x0800231d
 8002310:	0800232f 	.word	0x0800232f
 8002314:	0800231d 	.word	0x0800231d
 8002318:	080023b1 	.word	0x080023b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d045      	beq.n	80023b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800232c:	e042      	b.n	80023b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002336:	d13f      	bne.n	80023b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233c:	e03c      	b.n	80023b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002346:	d121      	bne.n	800238c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d836      	bhi.n	80023bc <DMA_CheckFifoParam+0xd8>
 800234e:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <DMA_CheckFifoParam+0x70>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	08002365 	.word	0x08002365
 8002358:	0800236b 	.word	0x0800236b
 800235c:	08002365 	.word	0x08002365
 8002360:	0800237d 	.word	0x0800237d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      break;
 8002368:	e02f      	b.n	80023ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d024      	beq.n	80023c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237a:	e021      	b.n	80023c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002384:	d11e      	bne.n	80023c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800238a:	e01b      	b.n	80023c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d902      	bls.n	8002398 <DMA_CheckFifoParam+0xb4>
 8002392:	2b03      	cmp	r3, #3
 8002394:	d003      	beq.n	800239e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002396:	e018      	b.n	80023ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
      break;
 800239c:	e015      	b.n	80023ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00e      	beq.n	80023c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      break;
 80023ae:	e00b      	b.n	80023c8 <DMA_CheckFifoParam+0xe4>
      break;
 80023b0:	bf00      	nop
 80023b2:	e00a      	b.n	80023ca <DMA_CheckFifoParam+0xe6>
      break;
 80023b4:	bf00      	nop
 80023b6:	e008      	b.n	80023ca <DMA_CheckFifoParam+0xe6>
      break;
 80023b8:	bf00      	nop
 80023ba:	e006      	b.n	80023ca <DMA_CheckFifoParam+0xe6>
      break;
 80023bc:	bf00      	nop
 80023be:	e004      	b.n	80023ca <DMA_CheckFifoParam+0xe6>
      break;
 80023c0:	bf00      	nop
 80023c2:	e002      	b.n	80023ca <DMA_CheckFifoParam+0xe6>
      break;   
 80023c4:	bf00      	nop
 80023c6:	e000      	b.n	80023ca <DMA_CheckFifoParam+0xe6>
      break;
 80023c8:	bf00      	nop
    }
  } 
  
  return status; 
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e16b      	b.n	80026cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	f040 815a 	bne.w	80026c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d00b      	beq.n	8002432 <HAL_GPIO_Init+0x5a>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002426:	2b11      	cmp	r3, #17
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b12      	cmp	r3, #18
 8002430:	d130      	bne.n	8002494 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 0201 	and.w	r2, r3, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0xfc>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b12      	cmp	r3, #18
 80024d2:	d123      	bne.n	800251c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80b4 	beq.w	80026c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_GPIO_Init+0x308>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a5e      	ldr	r2, [pc, #376]	; (80026e0 <HAL_GPIO_Init+0x308>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b5c      	ldr	r3, [pc, #368]	; (80026e0 <HAL_GPIO_Init+0x308>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257a:	4a5a      	ldr	r2, [pc, #360]	; (80026e4 <HAL_GPIO_Init+0x30c>)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a51      	ldr	r2, [pc, #324]	; (80026e8 <HAL_GPIO_Init+0x310>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d02b      	beq.n	80025fe <HAL_GPIO_Init+0x226>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a50      	ldr	r2, [pc, #320]	; (80026ec <HAL_GPIO_Init+0x314>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d025      	beq.n	80025fa <HAL_GPIO_Init+0x222>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4f      	ldr	r2, [pc, #316]	; (80026f0 <HAL_GPIO_Init+0x318>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01f      	beq.n	80025f6 <HAL_GPIO_Init+0x21e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4e      	ldr	r2, [pc, #312]	; (80026f4 <HAL_GPIO_Init+0x31c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d019      	beq.n	80025f2 <HAL_GPIO_Init+0x21a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4d      	ldr	r2, [pc, #308]	; (80026f8 <HAL_GPIO_Init+0x320>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_GPIO_Init+0x216>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4c      	ldr	r2, [pc, #304]	; (80026fc <HAL_GPIO_Init+0x324>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00d      	beq.n	80025ea <HAL_GPIO_Init+0x212>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4b      	ldr	r2, [pc, #300]	; (8002700 <HAL_GPIO_Init+0x328>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <HAL_GPIO_Init+0x20e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4a      	ldr	r2, [pc, #296]	; (8002704 <HAL_GPIO_Init+0x32c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d101      	bne.n	80025e2 <HAL_GPIO_Init+0x20a>
 80025de:	2307      	movs	r3, #7
 80025e0:	e00e      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025e2:	2308      	movs	r3, #8
 80025e4:	e00c      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025e6:	2306      	movs	r3, #6
 80025e8:	e00a      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e008      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025fe:	2300      	movs	r3, #0
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f002 0203 	and.w	r2, r2, #3
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	4093      	lsls	r3, r2
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002610:	4934      	ldr	r1, [pc, #208]	; (80026e4 <HAL_GPIO_Init+0x30c>)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800261e:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <HAL_GPIO_Init+0x330>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002642:	4a31      	ldr	r2, [pc, #196]	; (8002708 <HAL_GPIO_Init+0x330>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002648:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <HAL_GPIO_Init+0x330>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266c:	4a26      	ldr	r2, [pc, #152]	; (8002708 <HAL_GPIO_Init+0x330>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002672:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_GPIO_Init+0x330>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002696:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <HAL_GPIO_Init+0x330>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <HAL_GPIO_Init+0x330>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c0:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_GPIO_Init+0x330>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3301      	adds	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	f67f ae90 	bls.w	80023f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	3724      	adds	r7, #36	; 0x24
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40021c00 	.word	0x40021c00
 8002708:	40013c00 	.word	0x40013c00

0800270c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	e001      	b.n	800272e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e25b      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d075      	beq.n	800287a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278e:	4ba3      	ldr	r3, [pc, #652]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b04      	cmp	r3, #4
 8002798:	d00c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4ba0      	ldr	r3, [pc, #640]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d112      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a6:	4b9d      	ldr	r3, [pc, #628]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b2:	d10b      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	4b99      	ldr	r3, [pc, #612]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05b      	beq.n	8002878 <HAL_RCC_OscConfig+0x108>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d157      	bne.n	8002878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e236      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d4:	d106      	bne.n	80027e4 <HAL_RCC_OscConfig+0x74>
 80027d6:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a90      	ldr	r2, [pc, #576]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e01d      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x98>
 80027ee:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a8a      	ldr	r2, [pc, #552]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a87      	ldr	r2, [pc, #540]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 8002808:	4b84      	ldr	r3, [pc, #528]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a83      	ldr	r2, [pc, #524]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a80      	ldr	r2, [pc, #512]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff f9de 	bl	8001be8 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002830:	f7ff f9da 	bl	8001be8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1fb      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0xc0>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff f9ca 	bl	8001be8 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002858:	f7ff f9c6 	bl	8001be8 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1e7      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0xe8>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002886:	4b65      	ldr	r3, [pc, #404]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800289a:	2b08      	cmp	r3, #8
 800289c:	d11c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d116      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	4b5c      	ldr	r3, [pc, #368]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e1bb      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4952      	ldr	r1, [pc, #328]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	e03a      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b4f      	ldr	r3, [pc, #316]	; (8002a20 <HAL_RCC_OscConfig+0x2b0>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7ff f97f 	bl	8001be8 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ee:	f7ff f97b 	bl	8001be8 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e19c      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b43      	ldr	r3, [pc, #268]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4940      	ldr	r1, [pc, #256]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <HAL_RCC_OscConfig+0x2b0>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7ff f95e 	bl	8001be8 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002930:	f7ff f95a 	bl	8001be8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e17b      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d030      	beq.n	80029bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002962:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <HAL_RCC_OscConfig+0x2b4>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7ff f93e 	bl	8001be8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002970:	f7ff f93a 	bl	8001be8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e15b      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 8002984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x200>
 800298e:	e015      	b.n	80029bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_RCC_OscConfig+0x2b4>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7ff f927 	bl	8001be8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299e:	f7ff f923 	bl	8001be8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e144      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a0 	beq.w	8002b0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_OscConfig+0x2b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d121      	bne.n	8002a4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_RCC_OscConfig+0x2b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <HAL_RCC_OscConfig+0x2b8>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7ff f8e9 	bl	8001be8 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e011      	b.n	8002a3e <HAL_RCC_OscConfig+0x2ce>
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	42470000 	.word	0x42470000
 8002a24:	42470e80 	.word	0x42470e80
 8002a28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2c:	f7ff f8dc 	bl	8001be8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0fd      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_OscConfig+0x4d4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d106      	bne.n	8002a60 <HAL_RCC_OscConfig+0x2f0>
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a7c      	ldr	r2, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5e:	e01c      	b.n	8002a9a <HAL_RCC_OscConfig+0x32a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d10c      	bne.n	8002a82 <HAL_RCC_OscConfig+0x312>
 8002a68:	4b77      	ldr	r3, [pc, #476]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a76      	ldr	r2, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002a6e:	f043 0304 	orr.w	r3, r3, #4
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	4b74      	ldr	r3, [pc, #464]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a73      	ldr	r2, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	e00b      	b.n	8002a9a <HAL_RCC_OscConfig+0x32a>
 8002a82:	4b71      	ldr	r3, [pc, #452]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	4a70      	ldr	r2, [pc, #448]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8e:	4b6e      	ldr	r3, [pc, #440]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	4a6d      	ldr	r2, [pc, #436]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d015      	beq.n	8002ace <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7ff f8a1 	bl	8001be8 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7ff f89d 	bl	8001be8 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e0bc      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac0:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ee      	beq.n	8002aaa <HAL_RCC_OscConfig+0x33a>
 8002acc:	e014      	b.n	8002af8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7ff f88b 	bl	8001be8 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7ff f887 	bl	8001be8 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e0a6      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aec:	4b56      	ldr	r3, [pc, #344]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1ee      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d105      	bne.n	8002b0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afe:	4b52      	ldr	r3, [pc, #328]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a51      	ldr	r2, [pc, #324]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8092 	beq.w	8002c38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b14:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d05c      	beq.n	8002bda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d141      	bne.n	8002bac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b28:	4b48      	ldr	r3, [pc, #288]	; (8002c4c <HAL_RCC_OscConfig+0x4dc>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7ff f85b 	bl	8001be8 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b36:	f7ff f857 	bl	8001be8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e078      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	019b      	lsls	r3, r3, #6
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	061b      	lsls	r3, r3, #24
 8002b78:	4933      	ldr	r1, [pc, #204]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7e:	4b33      	ldr	r3, [pc, #204]	; (8002c4c <HAL_RCC_OscConfig+0x4dc>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7ff f830 	bl	8001be8 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7ff f82c 	bl	8001be8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e04d      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x41c>
 8002baa:	e045      	b.n	8002c38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <HAL_RCC_OscConfig+0x4dc>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7ff f819 	bl	8001be8 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bba:	f7ff f815 	bl	8001be8 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e036      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bcc:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x44a>
 8002bd8:	e02e      	b.n	8002c38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e029      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be6:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <HAL_RCC_OscConfig+0x4d8>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d11c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d115      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c0e:	4013      	ands	r3, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d106      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40007000 	.word	0x40007000
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	42470060 	.word	0x42470060

08002c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0cc      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d90c      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b65      	ldr	r3, [pc, #404]	; (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b8      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	494d      	ldr	r1, [pc, #308]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d044      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d119      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e07f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e06f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e067      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2e:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4934      	ldr	r1, [pc, #208]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d40:	f7fe ff52 	bl	8001be8 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fe ff4e 	bl	8001be8 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e04f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 020c 	and.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d20c      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e032      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4916      	ldr	r1, [pc, #88]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	490e      	ldr	r1, [pc, #56]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dd6:	f000 f821 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dda:	4601      	mov	r1, r0
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	5cd3      	ldrb	r3, [r2, r3]
 8002dea:	fa21 f303 	lsr.w	r3, r1, r3
 8002dee:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fda0 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023c00 	.word	0x40023c00
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	0802d1ac 	.word	0x0802d1ac
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000004 	.word	0x20000004

08002e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e32:	4b63      	ldr	r3, [pc, #396]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d007      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x32>
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d008      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x38>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f040 80b4 	bne.w	8002fb0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e48:	4b5e      	ldr	r3, [pc, #376]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e4a:	60bb      	str	r3, [r7, #8]
       break;
 8002e4c:	e0b3      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e4e:	4b5e      	ldr	r3, [pc, #376]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e50:	60bb      	str	r3, [r7, #8]
      break;
 8002e52:	e0b0      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e54:	4b5a      	ldr	r3, [pc, #360]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e5e:	4b58      	ldr	r3, [pc, #352]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d04a      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6a:	4b55      	ldr	r3, [pc, #340]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	099b      	lsrs	r3, r3, #6
 8002e70:	f04f 0400 	mov.w	r4, #0
 8002e74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	ea03 0501 	and.w	r5, r3, r1
 8002e80:	ea04 0602 	and.w	r6, r4, r2
 8002e84:	4629      	mov	r1, r5
 8002e86:	4632      	mov	r2, r6
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	f04f 0400 	mov.w	r4, #0
 8002e90:	0154      	lsls	r4, r2, #5
 8002e92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e96:	014b      	lsls	r3, r1, #5
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	1b49      	subs	r1, r1, r5
 8002e9e:	eb62 0206 	sbc.w	r2, r2, r6
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	f04f 0400 	mov.w	r4, #0
 8002eaa:	0194      	lsls	r4, r2, #6
 8002eac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002eb0:	018b      	lsls	r3, r1, #6
 8002eb2:	1a5b      	subs	r3, r3, r1
 8002eb4:	eb64 0402 	sbc.w	r4, r4, r2
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	00e2      	lsls	r2, r4, #3
 8002ec2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ec6:	00d9      	lsls	r1, r3, #3
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4614      	mov	r4, r2
 8002ecc:	195b      	adds	r3, r3, r5
 8002ece:	eb44 0406 	adc.w	r4, r4, r6
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	0262      	lsls	r2, r4, #9
 8002edc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ee0:	0259      	lsls	r1, r3, #9
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	4621      	mov	r1, r4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f04f 0400 	mov.w	r4, #0
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	f7fd fed8 	bl	8000ca8 <__aeabi_uldivmod>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e049      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f00:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	f04f 0400 	mov.w	r4, #0
 8002f0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	ea03 0501 	and.w	r5, r3, r1
 8002f16:	ea04 0602 	and.w	r6, r4, r2
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	4632      	mov	r2, r6
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	0154      	lsls	r4, r2, #5
 8002f28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f2c:	014b      	lsls	r3, r1, #5
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4622      	mov	r2, r4
 8002f32:	1b49      	subs	r1, r1, r5
 8002f34:	eb62 0206 	sbc.w	r2, r2, r6
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	f04f 0400 	mov.w	r4, #0
 8002f40:	0194      	lsls	r4, r2, #6
 8002f42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f46:	018b      	lsls	r3, r1, #6
 8002f48:	1a5b      	subs	r3, r3, r1
 8002f4a:	eb64 0402 	sbc.w	r4, r4, r2
 8002f4e:	f04f 0100 	mov.w	r1, #0
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	00e2      	lsls	r2, r4, #3
 8002f58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f5c:	00d9      	lsls	r1, r3, #3
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4614      	mov	r4, r2
 8002f62:	195b      	adds	r3, r3, r5
 8002f64:	eb44 0406 	adc.w	r4, r4, r6
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	02a2      	lsls	r2, r4, #10
 8002f72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f76:	0299      	lsls	r1, r3, #10
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4614      	mov	r4, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	4621      	mov	r1, r4
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	461a      	mov	r2, r3
 8002f88:	4623      	mov	r3, r4
 8002f8a:	f7fd fe8d 	bl	8000ca8 <__aeabi_uldivmod>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	460c      	mov	r4, r1
 8002f92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	0c1b      	lsrs	r3, r3, #16
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fac:	60bb      	str	r3, [r7, #8]
      break;
 8002fae:	e002      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fb2:	60bb      	str	r3, [r7, #8]
      break;
 8002fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	00f42400 	.word	0x00f42400
 8002fc8:	007a1200 	.word	0x007a1200

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000000 	.word	0x20000000

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fec:	4601      	mov	r1, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0a9b      	lsrs	r3, r3, #10
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4a03      	ldr	r2, [pc, #12]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	0802d1bc 	.word	0x0802d1bc

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003010:	f7ff ffdc 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003014:	4601      	mov	r1, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0b5b      	lsrs	r3, r3, #13
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4a03      	ldr	r2, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	0802d1bc 	.word	0x0802d1bc

08003034 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	220f      	movs	r2, #15
 8003042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	08db      	lsrs	r3, r3, #3
 800306e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_RCC_GetClockConfig+0x60>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	601a      	str	r2, [r3, #0]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40023c00 	.word	0x40023c00

08003098 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d035      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030c0:	4b62      	ldr	r3, [pc, #392]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030c6:	f7fe fd8f 	bl	8001be8 <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030ce:	f7fe fd8b 	bl	8001be8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0b0      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030e0:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	019a      	lsls	r2, r3, #6
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	071b      	lsls	r3, r3, #28
 80030f8:	4955      	ldr	r1, [pc, #340]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003100:	4b52      	ldr	r3, [pc, #328]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003106:	f7fe fd6f 	bl	8001be8 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800310e:	f7fe fd6b 	bl	8001be8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e090      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003120:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8083 	beq.w	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b44      	ldr	r3, [pc, #272]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	4a43      	ldr	r2, [pc, #268]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	6413      	str	r3, [r2, #64]	; 0x40
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a3e      	ldr	r2, [pc, #248]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003162:	f7fe fd41 	bl	8001be8 <HAL_GetTick>
 8003166:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fe fd3d 	bl	8001be8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e062      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800317c:	4b35      	ldr	r3, [pc, #212]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003190:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02f      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d028      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b6:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80031bc:	4a24      	ldr	r2, [pc, #144]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d114      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fe fd0b 	bl	8001be8 <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d4:	e00a      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fe fd07 	bl	8001be8 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e02a      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ee      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003204:	d10d      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321a:	490d      	ldr	r1, [pc, #52]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800321c:	4313      	orrs	r3, r2
 800321e:	608b      	str	r3, [r1, #8]
 8003220:	e005      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003228:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800322c:	6093      	str	r3, [r2, #8]
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323a:	4905      	ldr	r1, [pc, #20]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800323c:	4313      	orrs	r3, r2
 800323e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	42470068 	.word	0x42470068
 8003250:	40023800 	.word	0x40023800
 8003254:	40007000 	.word	0x40007000
 8003258:	42470e40 	.word	0x42470e40

0800325c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e083      	b.n	8003376 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7f5b      	ldrb	r3, [r3, #29]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fa22 	bl	80016c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	22ca      	movs	r2, #202	; 0xca
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2253      	movs	r2, #83	; 0x53
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 faa8 	bl	80037f0 <RTC_EnterInitMode>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	22ff      	movs	r2, #255	; 0xff
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2204      	movs	r2, #4
 80032b2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e05e      	b.n	8003376 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80032c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6899      	ldr	r1, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68d2      	ldr	r2, [r2, #12]
 80032f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6919      	ldr	r1, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	041a      	lsls	r2, r3, #16
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003316:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10e      	bne.n	8003344 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa3a 	bl	80037a0 <HAL_RTC_WaitForSynchro>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	22ff      	movs	r2, #255	; 0xff
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e018      	b.n	8003376 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	22ff      	movs	r2, #255	; 0xff
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003374:	2300      	movs	r3, #0
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800337e:	b590      	push	{r4, r7, lr}
 8003380:	b087      	sub	sp, #28
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	7f1b      	ldrb	r3, [r3, #28]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_RTC_SetTime+0x1c>
 8003396:	2302      	movs	r3, #2
 8003398:	e0aa      	b.n	80034f0 <HAL_RTC_SetTime+0x172>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2202      	movs	r2, #2
 80033a4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d126      	bne.n	80033fa <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fa3f 	bl	8003848 <RTC_ByteToBcd2>
 80033ca:	4603      	mov	r3, r0
 80033cc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	785b      	ldrb	r3, [r3, #1]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fa38 	bl	8003848 <RTC_ByteToBcd2>
 80033d8:	4603      	mov	r3, r0
 80033da:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80033dc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	789b      	ldrb	r3, [r3, #2]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fa30 	bl	8003848 <RTC_ByteToBcd2>
 80033e8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80033ea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	78db      	ldrb	r3, [r3, #3]
 80033f2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e018      	b.n	800342c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2200      	movs	r2, #0
 800340c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800341a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003420:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	78db      	ldrb	r3, [r3, #3]
 8003426:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	22ca      	movs	r2, #202	; 0xca
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2253      	movs	r2, #83	; 0x53
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f9d7 	bl	80037f0 <RTC_EnterInitMode>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	22ff      	movs	r2, #255	; 0xff
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2204      	movs	r2, #4
 8003454:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e047      	b.n	80034f0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800346a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800346e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800347e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6899      	ldr	r1, [r3, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	431a      	orrs	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d111      	bne.n	80034da <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f972 	bl	80037a0 <HAL_RTC_WaitForSynchro>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	22ff      	movs	r2, #255	; 0xff
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2204      	movs	r2, #4
 80034ce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00a      	b.n	80034f0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	22ff      	movs	r2, #255	; 0xff
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80034ee:	2300      	movs	r3, #0
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd90      	pop	{r4, r7, pc}

080034f8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800352a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800352e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353a:	b2da      	uxtb	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11a      	bne.n	80035aa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f000 f983 	bl	8003884 <RTC_Bcd2ToByte>
 800357e:	4603      	mov	r3, r0
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	785b      	ldrb	r3, [r3, #1]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f97a 	bl	8003884 <RTC_Bcd2ToByte>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	789b      	ldrb	r3, [r3, #2]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f971 	bl	8003884 <RTC_Bcd2ToByte>
 80035a2:	4603      	mov	r3, r0
 80035a4:	461a      	mov	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	7f1b      	ldrb	r3, [r3, #28]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_RTC_SetDate+0x1c>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e094      	b.n	80036fa <HAL_RTC_SetDate+0x146>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2202      	movs	r2, #2
 80035da:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10e      	bne.n	8003600 <HAL_RTC_SetDate+0x4c>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	785b      	ldrb	r3, [r3, #1]
 80035f2:	f023 0310 	bic.w	r3, r3, #16
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	330a      	adds	r3, #10
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11c      	bne.n	8003640 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	78db      	ldrb	r3, [r3, #3]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f91c 	bl	8003848 <RTC_ByteToBcd2>
 8003610:	4603      	mov	r3, r0
 8003612:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f915 	bl	8003848 <RTC_ByteToBcd2>
 800361e:	4603      	mov	r3, r0
 8003620:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003622:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	789b      	ldrb	r3, [r3, #2]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f90d 	bl	8003848 <RTC_ByteToBcd2>
 800362e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003630:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e00e      	b.n	800365e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	78db      	ldrb	r3, [r3, #3]
 8003644:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	785b      	ldrb	r3, [r3, #1]
 800364a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800364c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003652:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	22ca      	movs	r2, #202	; 0xca
 8003664:	625a      	str	r2, [r3, #36]	; 0x24
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2253      	movs	r2, #83	; 0x53
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f8be 	bl	80037f0 <RTC_EnterInitMode>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	22ff      	movs	r2, #255	; 0xff
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2204      	movs	r2, #4
 8003686:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e033      	b.n	80036fa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800369c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d111      	bne.n	80036e4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f86d 	bl	80037a0 <HAL_RTC_WaitForSynchro>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2204      	movs	r2, #4
 80036d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e00a      	b.n	80036fa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	22ff      	movs	r2, #255	; 0xff
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd90      	pop	{r4, r7, pc}

08003702 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800371c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003720:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	0b5b      	lsrs	r3, r3, #13
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11a      	bne.n	8003796 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	78db      	ldrb	r3, [r3, #3]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f88d 	bl	8003884 <RTC_Bcd2ToByte>
 800376a:	4603      	mov	r3, r0
 800376c:	461a      	mov	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	785b      	ldrb	r3, [r3, #1]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f884 	bl	8003884 <RTC_Bcd2ToByte>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	789b      	ldrb	r3, [r3, #2]
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f87b 	bl	8003884 <RTC_Bcd2ToByte>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037bc:	f7fe fa14 	bl	8001be8 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037c2:	e009      	b.n	80037d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037c4:	f7fe fa10 	bl	8001be8 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d2:	d901      	bls.n	80037d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e007      	b.n	80037e8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0ee      	beq.n	80037c4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d119      	bne.n	800383e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003812:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003814:	f7fe f9e8 	bl	8001be8 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800381a:	e009      	b.n	8003830 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800381c:	f7fe f9e4 	bl	8001be8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800382a:	d901      	bls.n	8003830 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e007      	b.n	8003840 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0ee      	beq.n	800381c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003856:	e005      	b.n	8003864 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3301      	adds	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	3b0a      	subs	r3, #10
 8003862:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	2b09      	cmp	r3, #9
 8003868:	d8f6      	bhi.n	8003858 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	b2da      	uxtb	r2, r3
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	4313      	orrs	r3, r2
 8003876:	b2db      	uxtb	r3, r3
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	b2db      	uxtb	r3, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e056      	b.n	8003980 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd ff01 	bl	80016f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003908:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	ea42 0103 	orr.w	r1, r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	0c1b      	lsrs	r3, r3, #16
 8003950:	f003 0104 	and.w	r1, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_SPI_Transmit+0x22>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e11e      	b.n	8003be8 <HAL_SPI_Transmit+0x260>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b2:	f7fe f919 	bl	8001be8 <HAL_GetTick>
 80039b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d002      	beq.n	80039ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
 80039ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039cc:	e103      	b.n	8003bd6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_SPI_Transmit+0x52>
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039de:	e0fa      	b.n	8003bd6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2203      	movs	r2, #3
 80039e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a26:	d107      	bne.n	8003a38 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d007      	beq.n	8003a56 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5e:	d14b      	bne.n	8003af8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_SPI_Transmit+0xe6>
 8003a68:	8afb      	ldrh	r3, [r7, #22]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d13e      	bne.n	8003aec <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	881a      	ldrh	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	1c9a      	adds	r2, r3, #2
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a92:	e02b      	b.n	8003aec <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d112      	bne.n	8003ac8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	1c9a      	adds	r2, r3, #2
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ac6:	e011      	b.n	8003aec <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac8:	f7fe f88e 	bl	8001be8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d803      	bhi.n	8003ae0 <HAL_SPI_Transmit+0x158>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ade:	d102      	bne.n	8003ae6 <HAL_SPI_Transmit+0x15e>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aea:	e074      	b.n	8003bd6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ce      	bne.n	8003a94 <HAL_SPI_Transmit+0x10c>
 8003af6:	e04c      	b.n	8003b92 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_Transmit+0x17e>
 8003b00:	8afb      	ldrh	r3, [r7, #22]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d140      	bne.n	8003b88 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	7812      	ldrb	r2, [r2, #0]
 8003b12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b2c:	e02c      	b.n	8003b88 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d113      	bne.n	8003b64 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	7812      	ldrb	r2, [r2, #0]
 8003b48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b62:	e011      	b.n	8003b88 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b64:	f7fe f840 	bl	8001be8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d803      	bhi.n	8003b7c <HAL_SPI_Transmit+0x1f4>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b7a:	d102      	bne.n	8003b82 <HAL_SPI_Transmit+0x1fa>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b86:	e026      	b.n	8003bd6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1cd      	bne.n	8003b2e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f894 	bl	8003cc4 <SPI_EndRxTxTransaction>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	77fb      	strb	r3, [r7, #31]
 8003bd2:	e000      	b.n	8003bd6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003bd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c00:	e04c      	b.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c08:	d048      	beq.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c0a:	f7fd ffed 	bl	8001be8 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d902      	bls.n	8003c20 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d13d      	bne.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c38:	d111      	bne.n	8003c5e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c42:	d004      	beq.n	8003c4e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4c:	d107      	bne.n	8003c5e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c66:	d10f      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e00f      	b.n	8003cbc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d1a3      	bne.n	8003c02 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <SPI_EndRxTxTransaction+0x7c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1b      	ldr	r2, [pc, #108]	; (8003d44 <SPI_EndRxTxTransaction+0x80>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0d5b      	lsrs	r3, r3, #21
 8003cdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cee:	d112      	bne.n	8003d16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2180      	movs	r1, #128	; 0x80
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff ff78 	bl	8003bf0 <SPI_WaitFlagStateUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	f043 0220 	orr.w	r2, r3, #32
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e00f      	b.n	8003d36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2c:	2b80      	cmp	r3, #128	; 0x80
 8003d2e:	d0f2      	beq.n	8003d16 <SPI_EndRxTxTransaction+0x52>
 8003d30:	e000      	b.n	8003d34 <SPI_EndRxTxTransaction+0x70>
        break;
 8003d32:	bf00      	nop
  }

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000000 	.word	0x20000000
 8003d44:	165e9f81 	.word	0x165e9f81

08003d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e01d      	b.n	8003d96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fd3a 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f000 fa40 	bl	800420c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b06      	cmp	r3, #6
 8003dc6:	d007      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_TIM_Base_Stop_IT+0x48>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	f240 4344 	movw	r3, #1092	; 0x444
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_TIM_Base_Stop_IT+0x48>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0202 	mvn.w	r2, #2
 8003e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f9a5 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f997 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f9a8 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d122      	bne.n	8003eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d11b      	bne.n	8003eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0204 	mvn.w	r2, #4
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f97b 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f96d 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f97e 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d122      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d11b      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0208 	mvn.w	r2, #8
 8003f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2204      	movs	r2, #4
 8003f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f951 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e005      	b.n	8003f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f943 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f954 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d122      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d11b      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0210 	mvn.w	r2, #16
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f927 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f919 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f92a 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0201 	mvn.w	r2, #1
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fb42 	bl	8001644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	2b80      	cmp	r3, #128	; 0x80
 8003fcc:	d10e      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d107      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fad0 	bl	800458c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b40      	cmp	r3, #64	; 0x40
 8003ff8:	d10e      	bne.n	8004018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d107      	bne.n	8004018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8ef 	bl	80041f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b20      	cmp	r3, #32
 8004024:	d10e      	bne.n	8004044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b20      	cmp	r3, #32
 8004032:	d107      	bne.n	8004044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0220 	mvn.w	r2, #32
 800403c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fa9a 	bl	8004578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIM_ConfigClockSource+0x18>
 8004060:	2302      	movs	r3, #2
 8004062:	e0a6      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x166>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004082:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b40      	cmp	r3, #64	; 0x40
 800409a:	d067      	beq.n	800416c <HAL_TIM_ConfigClockSource+0x120>
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d80b      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x6c>
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d073      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x140>
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d802      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x62>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d06f      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80040ac:	e078      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d06c      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x140>
 80040b2:	2b30      	cmp	r3, #48	; 0x30
 80040b4:	d06a      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040b6:	e073      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040b8:	2b70      	cmp	r3, #112	; 0x70
 80040ba:	d00d      	beq.n	80040d8 <HAL_TIM_ConfigClockSource+0x8c>
 80040bc:	2b70      	cmp	r3, #112	; 0x70
 80040be:	d804      	bhi.n	80040ca <HAL_TIM_ConfigClockSource+0x7e>
 80040c0:	2b50      	cmp	r3, #80	; 0x50
 80040c2:	d033      	beq.n	800412c <HAL_TIM_ConfigClockSource+0xe0>
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d041      	beq.n	800414c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040c8:	e06a      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ce:	d066      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x152>
 80040d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d4:	d017      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040d6:	e063      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6899      	ldr	r1, [r3, #8]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f000 f9aa 	bl	8004440 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]
      break;
 8004104:	e04c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6899      	ldr	r1, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f000 f993 	bl	8004440 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004128:	609a      	str	r2, [r3, #8]
      break;
 800412a:	e039      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	461a      	mov	r2, r3
 800413a:	f000 f907 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2150      	movs	r1, #80	; 0x50
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f960 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 800414a:	e029      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	461a      	mov	r2, r3
 800415a:	f000 f926 	bl	80043aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2160      	movs	r1, #96	; 0x60
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f950 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 800416a:	e019      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	461a      	mov	r2, r3
 800417a:	f000 f8e7 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2140      	movs	r1, #64	; 0x40
 8004184:	4618      	mov	r0, r3
 8004186:	f000 f940 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 800418a:	e009      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f000 f937 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 800419c:	e000      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800419e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a40      	ldr	r2, [pc, #256]	; (8004320 <TIM_Base_SetConfig+0x114>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422a:	d00f      	beq.n	800424c <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a3d      	ldr	r2, [pc, #244]	; (8004324 <TIM_Base_SetConfig+0x118>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00b      	beq.n	800424c <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a3c      	ldr	r2, [pc, #240]	; (8004328 <TIM_Base_SetConfig+0x11c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a3b      	ldr	r2, [pc, #236]	; (800432c <TIM_Base_SetConfig+0x120>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_Base_SetConfig+0x40>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a3a      	ldr	r2, [pc, #232]	; (8004330 <TIM_Base_SetConfig+0x124>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d108      	bne.n	800425e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2f      	ldr	r2, [pc, #188]	; (8004320 <TIM_Base_SetConfig+0x114>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d02b      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426c:	d027      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2c      	ldr	r2, [pc, #176]	; (8004324 <TIM_Base_SetConfig+0x118>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d023      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2b      	ldr	r2, [pc, #172]	; (8004328 <TIM_Base_SetConfig+0x11c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01f      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2a      	ldr	r2, [pc, #168]	; (800432c <TIM_Base_SetConfig+0x120>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01b      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a29      	ldr	r2, [pc, #164]	; (8004330 <TIM_Base_SetConfig+0x124>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d017      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a28      	ldr	r2, [pc, #160]	; (8004334 <TIM_Base_SetConfig+0x128>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a27      	ldr	r2, [pc, #156]	; (8004338 <TIM_Base_SetConfig+0x12c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00f      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a26      	ldr	r2, [pc, #152]	; (800433c <TIM_Base_SetConfig+0x130>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00b      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a25      	ldr	r2, [pc, #148]	; (8004340 <TIM_Base_SetConfig+0x134>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a24      	ldr	r2, [pc, #144]	; (8004344 <TIM_Base_SetConfig+0x138>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <TIM_Base_SetConfig+0xb2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a23      	ldr	r2, [pc, #140]	; (8004348 <TIM_Base_SetConfig+0x13c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <TIM_Base_SetConfig+0x114>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0xf8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <TIM_Base_SetConfig+0x124>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d103      	bne.n	800430c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	615a      	str	r2, [r3, #20]
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40010400 	.word	0x40010400
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800
 8004340:	40001800 	.word	0x40001800
 8004344:	40001c00 	.word	0x40001c00
 8004348:	40002000 	.word	0x40002000

0800434c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0201 	bic.w	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 030a 	bic.w	r3, r3, #10
 8004388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0210 	bic.w	r2, r3, #16
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	031b      	lsls	r3, r3, #12
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	f043 0307 	orr.w	r3, r3, #7
 800442c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	021a      	lsls	r2, r3, #8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	431a      	orrs	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	609a      	str	r2, [r3, #8]
}
 8004474:	bf00      	nop
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e05a      	b.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a21      	ldr	r2, [pc, #132]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d01d      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a17      	ldr	r2, [pc, #92]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10c      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	4313      	orrs	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40010000 	.word	0x40010000
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40010400 	.word	0x40010400
 8004570:	40014000 	.word	0x40014000
 8004574:	40001800 	.word	0x40001800

08004578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e03f      	b.n	8004632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd f970 	bl	80018ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	; 0x24
 80045d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f9b1 	bl	800494c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b088      	sub	sp, #32
 800463e:	af02      	add	r7, sp, #8
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b20      	cmp	r3, #32
 8004658:	f040 8083 	bne.w	8004762 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Transmit+0x2e>
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e07b      	b.n	8004764 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_UART_Transmit+0x40>
 8004676:	2302      	movs	r3, #2
 8004678:	e074      	b.n	8004764 <HAL_UART_Transmit+0x12a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2221      	movs	r2, #33	; 0x21
 800468c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004690:	f7fd faaa 	bl	8001be8 <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	88fa      	ldrh	r2, [r7, #6]
 800469a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80046aa:	e042      	b.n	8004732 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c2:	d122      	bne.n	800470a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2200      	movs	r2, #0
 80046cc:	2180      	movs	r1, #128	; 0x80
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f8f2 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e042      	b.n	8004764 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3302      	adds	r3, #2
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	e017      	b.n	8004732 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	3301      	adds	r3, #1
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	e013      	b.n	8004732 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	2180      	movs	r1, #128	; 0x80
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f8cf 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e01f      	b.n	8004764 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	60ba      	str	r2, [r7, #8]
 800472a:	781a      	ldrb	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1b7      	bne.n	80046ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2200      	movs	r2, #0
 8004744:	2140      	movs	r1, #64	; 0x40
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f8b6 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e006      	b.n	8004764 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e000      	b.n	8004764 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004762:	2302      	movs	r3, #2
  }
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b20      	cmp	r3, #32
 800478a:	f040 8090 	bne.w	80048ae <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_UART_Receive+0x2e>
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e088      	b.n	80048b0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_UART_Receive+0x40>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e081      	b.n	80048b0 <HAL_UART_Receive+0x144>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2222      	movs	r2, #34	; 0x22
 80047be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047c2:	f7fd fa11 	bl	8001be8 <HAL_GetTick>
 80047c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	88fa      	ldrh	r2, [r7, #6]
 80047d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80047dc:	e05c      	b.n	8004898 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d12b      	bne.n	800484e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2120      	movs	r1, #32
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f859 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e04f      	b.n	80048b0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10c      	bne.n	8004836 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b29b      	uxth	r3, r3
 8004824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004828:	b29a      	uxth	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	3302      	adds	r3, #2
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	e030      	b.n	8004898 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	b29b      	uxth	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	b29a      	uxth	r2, r3
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	3301      	adds	r3, #1
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	e024      	b.n	8004898 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2200      	movs	r2, #0
 8004856:	2120      	movs	r1, #32
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f82d 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e023      	b.n	80048b0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d108      	bne.n	8004882 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	60ba      	str	r2, [r7, #8]
 800487c:	b2ca      	uxtb	r2, r1
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	e00a      	b.n	8004898 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	b2da      	uxtb	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	1c59      	adds	r1, r3, #1
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d19d      	bne.n	80047de <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e000      	b.n	80048b0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80048ae:	2302      	movs	r3, #2
  }
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c8:	e02c      	b.n	8004924 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d0:	d028      	beq.n	8004924 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048d8:	f7fd f986 	bl	8001be8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d21d      	bcs.n	8004924 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e00f      	b.n	8004944 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4013      	ands	r3, r2
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	429a      	cmp	r2, r3
 8004940:	d0c3      	beq.n	80048ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800498e:	f023 030c 	bic.w	r3, r3, #12
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	68f9      	ldr	r1, [r7, #12]
 8004998:	430b      	orrs	r3, r1
 800499a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ba:	f040 818b 	bne.w	8004cd4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4ac1      	ldr	r2, [pc, #772]	; (8004cc8 <UART_SetConfig+0x37c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d005      	beq.n	80049d4 <UART_SetConfig+0x88>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4abf      	ldr	r2, [pc, #764]	; (8004ccc <UART_SetConfig+0x380>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	f040 80bd 	bne.w	8004b4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049d4:	f7fe fb1a 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 80049d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	461d      	mov	r5, r3
 80049de:	f04f 0600 	mov.w	r6, #0
 80049e2:	46a8      	mov	r8, r5
 80049e4:	46b1      	mov	r9, r6
 80049e6:	eb18 0308 	adds.w	r3, r8, r8
 80049ea:	eb49 0409 	adc.w	r4, r9, r9
 80049ee:	4698      	mov	r8, r3
 80049f0:	46a1      	mov	r9, r4
 80049f2:	eb18 0805 	adds.w	r8, r8, r5
 80049f6:	eb49 0906 	adc.w	r9, r9, r6
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a0e:	4688      	mov	r8, r1
 8004a10:	4691      	mov	r9, r2
 8004a12:	eb18 0005 	adds.w	r0, r8, r5
 8004a16:	eb49 0106 	adc.w	r1, r9, r6
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	461d      	mov	r5, r3
 8004a20:	f04f 0600 	mov.w	r6, #0
 8004a24:	196b      	adds	r3, r5, r5
 8004a26:	eb46 0406 	adc.w	r4, r6, r6
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	f7fc f93b 	bl	8000ca8 <__aeabi_uldivmod>
 8004a32:	4603      	mov	r3, r0
 8004a34:	460c      	mov	r4, r1
 8004a36:	461a      	mov	r2, r3
 8004a38:	4ba5      	ldr	r3, [pc, #660]	; (8004cd0 <UART_SetConfig+0x384>)
 8004a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	461d      	mov	r5, r3
 8004a48:	f04f 0600 	mov.w	r6, #0
 8004a4c:	46a9      	mov	r9, r5
 8004a4e:	46b2      	mov	sl, r6
 8004a50:	eb19 0309 	adds.w	r3, r9, r9
 8004a54:	eb4a 040a 	adc.w	r4, sl, sl
 8004a58:	4699      	mov	r9, r3
 8004a5a:	46a2      	mov	sl, r4
 8004a5c:	eb19 0905 	adds.w	r9, r9, r5
 8004a60:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a78:	4689      	mov	r9, r1
 8004a7a:	4692      	mov	sl, r2
 8004a7c:	eb19 0005 	adds.w	r0, r9, r5
 8004a80:	eb4a 0106 	adc.w	r1, sl, r6
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	461d      	mov	r5, r3
 8004a8a:	f04f 0600 	mov.w	r6, #0
 8004a8e:	196b      	adds	r3, r5, r5
 8004a90:	eb46 0406 	adc.w	r4, r6, r6
 8004a94:	461a      	mov	r2, r3
 8004a96:	4623      	mov	r3, r4
 8004a98:	f7fc f906 	bl	8000ca8 <__aeabi_uldivmod>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b8b      	ldr	r3, [pc, #556]	; (8004cd0 <UART_SetConfig+0x384>)
 8004aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	2164      	movs	r1, #100	; 0x64
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	3332      	adds	r3, #50	; 0x32
 8004ab6:	4a86      	ldr	r2, [pc, #536]	; (8004cd0 <UART_SetConfig+0x384>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac4:	4498      	add	r8, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	461d      	mov	r5, r3
 8004aca:	f04f 0600 	mov.w	r6, #0
 8004ace:	46a9      	mov	r9, r5
 8004ad0:	46b2      	mov	sl, r6
 8004ad2:	eb19 0309 	adds.w	r3, r9, r9
 8004ad6:	eb4a 040a 	adc.w	r4, sl, sl
 8004ada:	4699      	mov	r9, r3
 8004adc:	46a2      	mov	sl, r4
 8004ade:	eb19 0905 	adds.w	r9, r9, r5
 8004ae2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004af2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004af6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004afa:	4689      	mov	r9, r1
 8004afc:	4692      	mov	sl, r2
 8004afe:	eb19 0005 	adds.w	r0, r9, r5
 8004b02:	eb4a 0106 	adc.w	r1, sl, r6
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	461d      	mov	r5, r3
 8004b0c:	f04f 0600 	mov.w	r6, #0
 8004b10:	196b      	adds	r3, r5, r5
 8004b12:	eb46 0406 	adc.w	r4, r6, r6
 8004b16:	461a      	mov	r2, r3
 8004b18:	4623      	mov	r3, r4
 8004b1a:	f7fc f8c5 	bl	8000ca8 <__aeabi_uldivmod>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	460c      	mov	r4, r1
 8004b22:	461a      	mov	r2, r3
 8004b24:	4b6a      	ldr	r3, [pc, #424]	; (8004cd0 <UART_SetConfig+0x384>)
 8004b26:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	2164      	movs	r1, #100	; 0x64
 8004b2e:	fb01 f303 	mul.w	r3, r1, r3
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	3332      	adds	r3, #50	; 0x32
 8004b38:	4a65      	ldr	r2, [pc, #404]	; (8004cd0 <UART_SetConfig+0x384>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	f003 0207 	and.w	r2, r3, #7
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4442      	add	r2, r8
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	e26f      	b.n	800502e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b4e:	f7fe fa49 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004b52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	461d      	mov	r5, r3
 8004b58:	f04f 0600 	mov.w	r6, #0
 8004b5c:	46a8      	mov	r8, r5
 8004b5e:	46b1      	mov	r9, r6
 8004b60:	eb18 0308 	adds.w	r3, r8, r8
 8004b64:	eb49 0409 	adc.w	r4, r9, r9
 8004b68:	4698      	mov	r8, r3
 8004b6a:	46a1      	mov	r9, r4
 8004b6c:	eb18 0805 	adds.w	r8, r8, r5
 8004b70:	eb49 0906 	adc.w	r9, r9, r6
 8004b74:	f04f 0100 	mov.w	r1, #0
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b88:	4688      	mov	r8, r1
 8004b8a:	4691      	mov	r9, r2
 8004b8c:	eb18 0005 	adds.w	r0, r8, r5
 8004b90:	eb49 0106 	adc.w	r1, r9, r6
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	461d      	mov	r5, r3
 8004b9a:	f04f 0600 	mov.w	r6, #0
 8004b9e:	196b      	adds	r3, r5, r5
 8004ba0:	eb46 0406 	adc.w	r4, r6, r6
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	f7fc f87e 	bl	8000ca8 <__aeabi_uldivmod>
 8004bac:	4603      	mov	r3, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <UART_SetConfig+0x384>)
 8004bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	461d      	mov	r5, r3
 8004bc2:	f04f 0600 	mov.w	r6, #0
 8004bc6:	46a9      	mov	r9, r5
 8004bc8:	46b2      	mov	sl, r6
 8004bca:	eb19 0309 	adds.w	r3, r9, r9
 8004bce:	eb4a 040a 	adc.w	r4, sl, sl
 8004bd2:	4699      	mov	r9, r3
 8004bd4:	46a2      	mov	sl, r4
 8004bd6:	eb19 0905 	adds.w	r9, r9, r5
 8004bda:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bf2:	4689      	mov	r9, r1
 8004bf4:	4692      	mov	sl, r2
 8004bf6:	eb19 0005 	adds.w	r0, r9, r5
 8004bfa:	eb4a 0106 	adc.w	r1, sl, r6
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	461d      	mov	r5, r3
 8004c04:	f04f 0600 	mov.w	r6, #0
 8004c08:	196b      	adds	r3, r5, r5
 8004c0a:	eb46 0406 	adc.w	r4, r6, r6
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4623      	mov	r3, r4
 8004c12:	f7fc f849 	bl	8000ca8 <__aeabi_uldivmod>
 8004c16:	4603      	mov	r3, r0
 8004c18:	460c      	mov	r4, r1
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b2c      	ldr	r3, [pc, #176]	; (8004cd0 <UART_SetConfig+0x384>)
 8004c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2164      	movs	r1, #100	; 0x64
 8004c26:	fb01 f303 	mul.w	r3, r1, r3
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	3332      	adds	r3, #50	; 0x32
 8004c30:	4a27      	ldr	r2, [pc, #156]	; (8004cd0 <UART_SetConfig+0x384>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c3e:	4498      	add	r8, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	461d      	mov	r5, r3
 8004c44:	f04f 0600 	mov.w	r6, #0
 8004c48:	46a9      	mov	r9, r5
 8004c4a:	46b2      	mov	sl, r6
 8004c4c:	eb19 0309 	adds.w	r3, r9, r9
 8004c50:	eb4a 040a 	adc.w	r4, sl, sl
 8004c54:	4699      	mov	r9, r3
 8004c56:	46a2      	mov	sl, r4
 8004c58:	eb19 0905 	adds.w	r9, r9, r5
 8004c5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c60:	f04f 0100 	mov.w	r1, #0
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c74:	4689      	mov	r9, r1
 8004c76:	4692      	mov	sl, r2
 8004c78:	eb19 0005 	adds.w	r0, r9, r5
 8004c7c:	eb4a 0106 	adc.w	r1, sl, r6
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	461d      	mov	r5, r3
 8004c86:	f04f 0600 	mov.w	r6, #0
 8004c8a:	196b      	adds	r3, r5, r5
 8004c8c:	eb46 0406 	adc.w	r4, r6, r6
 8004c90:	461a      	mov	r2, r3
 8004c92:	4623      	mov	r3, r4
 8004c94:	f7fc f808 	bl	8000ca8 <__aeabi_uldivmod>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <UART_SetConfig+0x384>)
 8004ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	2164      	movs	r1, #100	; 0x64
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	3332      	adds	r3, #50	; 0x32
 8004cb2:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <UART_SetConfig+0x384>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	f003 0207 	and.w	r2, r3, #7
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4442      	add	r2, r8
 8004cc4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004cc6:	e1b2      	b.n	800502e <UART_SetConfig+0x6e2>
 8004cc8:	40011000 	.word	0x40011000
 8004ccc:	40011400 	.word	0x40011400
 8004cd0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4ad7      	ldr	r2, [pc, #860]	; (8005038 <UART_SetConfig+0x6ec>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d005      	beq.n	8004cea <UART_SetConfig+0x39e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4ad6      	ldr	r2, [pc, #856]	; (800503c <UART_SetConfig+0x6f0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	f040 80d1 	bne.w	8004e8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cea:	f7fe f98f 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8004cee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	469a      	mov	sl, r3
 8004cf4:	f04f 0b00 	mov.w	fp, #0
 8004cf8:	46d0      	mov	r8, sl
 8004cfa:	46d9      	mov	r9, fp
 8004cfc:	eb18 0308 	adds.w	r3, r8, r8
 8004d00:	eb49 0409 	adc.w	r4, r9, r9
 8004d04:	4698      	mov	r8, r3
 8004d06:	46a1      	mov	r9, r4
 8004d08:	eb18 080a 	adds.w	r8, r8, sl
 8004d0c:	eb49 090b 	adc.w	r9, r9, fp
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d24:	4688      	mov	r8, r1
 8004d26:	4691      	mov	r9, r2
 8004d28:	eb1a 0508 	adds.w	r5, sl, r8
 8004d2c:	eb4b 0609 	adc.w	r6, fp, r9
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4619      	mov	r1, r3
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	f04f 0400 	mov.w	r4, #0
 8004d42:	0094      	lsls	r4, r2, #2
 8004d44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d48:	008b      	lsls	r3, r1, #2
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	4623      	mov	r3, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	4631      	mov	r1, r6
 8004d52:	f7fb ffa9 	bl	8000ca8 <__aeabi_uldivmod>
 8004d56:	4603      	mov	r3, r0
 8004d58:	460c      	mov	r4, r1
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4bb8      	ldr	r3, [pc, #736]	; (8005040 <UART_SetConfig+0x6f4>)
 8004d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	469b      	mov	fp, r3
 8004d6c:	f04f 0c00 	mov.w	ip, #0
 8004d70:	46d9      	mov	r9, fp
 8004d72:	46e2      	mov	sl, ip
 8004d74:	eb19 0309 	adds.w	r3, r9, r9
 8004d78:	eb4a 040a 	adc.w	r4, sl, sl
 8004d7c:	4699      	mov	r9, r3
 8004d7e:	46a2      	mov	sl, r4
 8004d80:	eb19 090b 	adds.w	r9, r9, fp
 8004d84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d88:	f04f 0100 	mov.w	r1, #0
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d9c:	4689      	mov	r9, r1
 8004d9e:	4692      	mov	sl, r2
 8004da0:	eb1b 0509 	adds.w	r5, fp, r9
 8004da4:	eb4c 060a 	adc.w	r6, ip, sl
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4619      	mov	r1, r3
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	f04f 0400 	mov.w	r4, #0
 8004dba:	0094      	lsls	r4, r2, #2
 8004dbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dc0:	008b      	lsls	r3, r1, #2
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	4631      	mov	r1, r6
 8004dca:	f7fb ff6d 	bl	8000ca8 <__aeabi_uldivmod>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4b9a      	ldr	r3, [pc, #616]	; (8005040 <UART_SetConfig+0x6f4>)
 8004dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2164      	movs	r1, #100	; 0x64
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	3332      	adds	r3, #50	; 0x32
 8004de8:	4a95      	ldr	r2, [pc, #596]	; (8005040 <UART_SetConfig+0x6f4>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df4:	4498      	add	r8, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	469b      	mov	fp, r3
 8004dfa:	f04f 0c00 	mov.w	ip, #0
 8004dfe:	46d9      	mov	r9, fp
 8004e00:	46e2      	mov	sl, ip
 8004e02:	eb19 0309 	adds.w	r3, r9, r9
 8004e06:	eb4a 040a 	adc.w	r4, sl, sl
 8004e0a:	4699      	mov	r9, r3
 8004e0c:	46a2      	mov	sl, r4
 8004e0e:	eb19 090b 	adds.w	r9, r9, fp
 8004e12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e2a:	4689      	mov	r9, r1
 8004e2c:	4692      	mov	sl, r2
 8004e2e:	eb1b 0509 	adds.w	r5, fp, r9
 8004e32:	eb4c 060a 	adc.w	r6, ip, sl
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	f04f 0400 	mov.w	r4, #0
 8004e48:	0094      	lsls	r4, r2, #2
 8004e4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e4e:	008b      	lsls	r3, r1, #2
 8004e50:	461a      	mov	r2, r3
 8004e52:	4623      	mov	r3, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	4631      	mov	r1, r6
 8004e58:	f7fb ff26 	bl	8000ca8 <__aeabi_uldivmod>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	461a      	mov	r2, r3
 8004e62:	4b77      	ldr	r3, [pc, #476]	; (8005040 <UART_SetConfig+0x6f4>)
 8004e64:	fba3 1302 	umull	r1, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	2164      	movs	r1, #100	; 0x64
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	3332      	adds	r3, #50	; 0x32
 8004e76:	4a72      	ldr	r2, [pc, #456]	; (8005040 <UART_SetConfig+0x6f4>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	f003 020f 	and.w	r2, r3, #15
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4442      	add	r2, r8
 8004e88:	609a      	str	r2, [r3, #8]
 8004e8a:	e0d0      	b.n	800502e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e8c:	f7fe f8aa 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004e90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	469a      	mov	sl, r3
 8004e96:	f04f 0b00 	mov.w	fp, #0
 8004e9a:	46d0      	mov	r8, sl
 8004e9c:	46d9      	mov	r9, fp
 8004e9e:	eb18 0308 	adds.w	r3, r8, r8
 8004ea2:	eb49 0409 	adc.w	r4, r9, r9
 8004ea6:	4698      	mov	r8, r3
 8004ea8:	46a1      	mov	r9, r4
 8004eaa:	eb18 080a 	adds.w	r8, r8, sl
 8004eae:	eb49 090b 	adc.w	r9, r9, fp
 8004eb2:	f04f 0100 	mov.w	r1, #0
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ebe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ec2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ec6:	4688      	mov	r8, r1
 8004ec8:	4691      	mov	r9, r2
 8004eca:	eb1a 0508 	adds.w	r5, sl, r8
 8004ece:	eb4b 0609 	adc.w	r6, fp, r9
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	f04f 0400 	mov.w	r4, #0
 8004ee4:	0094      	lsls	r4, r2, #2
 8004ee6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004eea:	008b      	lsls	r3, r1, #2
 8004eec:	461a      	mov	r2, r3
 8004eee:	4623      	mov	r3, r4
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	f7fb fed8 	bl	8000ca8 <__aeabi_uldivmod>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	461a      	mov	r2, r3
 8004efe:	4b50      	ldr	r3, [pc, #320]	; (8005040 <UART_SetConfig+0x6f4>)
 8004f00:	fba3 2302 	umull	r2, r3, r3, r2
 8004f04:	095b      	lsrs	r3, r3, #5
 8004f06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	469b      	mov	fp, r3
 8004f0e:	f04f 0c00 	mov.w	ip, #0
 8004f12:	46d9      	mov	r9, fp
 8004f14:	46e2      	mov	sl, ip
 8004f16:	eb19 0309 	adds.w	r3, r9, r9
 8004f1a:	eb4a 040a 	adc.w	r4, sl, sl
 8004f1e:	4699      	mov	r9, r3
 8004f20:	46a2      	mov	sl, r4
 8004f22:	eb19 090b 	adds.w	r9, r9, fp
 8004f26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f3e:	4689      	mov	r9, r1
 8004f40:	4692      	mov	sl, r2
 8004f42:	eb1b 0509 	adds.w	r5, fp, r9
 8004f46:	eb4c 060a 	adc.w	r6, ip, sl
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	f04f 0400 	mov.w	r4, #0
 8004f5c:	0094      	lsls	r4, r2, #2
 8004f5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f62:	008b      	lsls	r3, r1, #2
 8004f64:	461a      	mov	r2, r3
 8004f66:	4623      	mov	r3, r4
 8004f68:	4628      	mov	r0, r5
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	f7fb fe9c 	bl	8000ca8 <__aeabi_uldivmod>
 8004f70:	4603      	mov	r3, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	461a      	mov	r2, r3
 8004f76:	4b32      	ldr	r3, [pc, #200]	; (8005040 <UART_SetConfig+0x6f4>)
 8004f78:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	2164      	movs	r1, #100	; 0x64
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	3332      	adds	r3, #50	; 0x32
 8004f8a:	4a2d      	ldr	r2, [pc, #180]	; (8005040 <UART_SetConfig+0x6f4>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f96:	4498      	add	r8, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	469b      	mov	fp, r3
 8004f9c:	f04f 0c00 	mov.w	ip, #0
 8004fa0:	46d9      	mov	r9, fp
 8004fa2:	46e2      	mov	sl, ip
 8004fa4:	eb19 0309 	adds.w	r3, r9, r9
 8004fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8004fac:	4699      	mov	r9, r3
 8004fae:	46a2      	mov	sl, r4
 8004fb0:	eb19 090b 	adds.w	r9, r9, fp
 8004fb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fcc:	4689      	mov	r9, r1
 8004fce:	4692      	mov	sl, r2
 8004fd0:	eb1b 0509 	adds.w	r5, fp, r9
 8004fd4:	eb4c 060a 	adc.w	r6, ip, sl
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	f04f 0400 	mov.w	r4, #0
 8004fea:	0094      	lsls	r4, r2, #2
 8004fec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ff0:	008b      	lsls	r3, r1, #2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	f7fb fe55 	bl	8000ca8 <__aeabi_uldivmod>
 8004ffe:	4603      	mov	r3, r0
 8005000:	460c      	mov	r4, r1
 8005002:	461a      	mov	r2, r3
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <UART_SetConfig+0x6f4>)
 8005006:	fba3 1302 	umull	r1, r3, r3, r2
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	2164      	movs	r1, #100	; 0x64
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	3332      	adds	r3, #50	; 0x32
 8005018:	4a09      	ldr	r2, [pc, #36]	; (8005040 <UART_SetConfig+0x6f4>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	f003 020f 	and.w	r2, r3, #15
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4442      	add	r2, r8
 800502a:	609a      	str	r2, [r3, #8]
}
 800502c:	e7ff      	b.n	800502e <UART_SetConfig+0x6e2>
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005038:	40011000 	.word	0x40011000
 800503c:	40011400 	.word	0x40011400
 8005040:	51eb851f 	.word	0x51eb851f

08005044 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800505a:	f3ef 8305 	mrs	r3, IPSR
 800505e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005060:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005066:	f3ef 8310 	mrs	r3, PRIMASK
 800506a:	607b      	str	r3, [r7, #4]
  return(result);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d105      	bne.n	800507e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005072:	f3ef 8311 	mrs	r3, BASEPRI
 8005076:	603b      	str	r3, [r7, #0]
  return(result);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <osKernelInitialize+0x3a>
 800507e:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <osKernelInitialize+0x64>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d103      	bne.n	800508e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005086:	f06f 0305 	mvn.w	r3, #5
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e00c      	b.n	80050a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <osKernelInitialize+0x64>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d105      	bne.n	80050a2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005096:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <osKernelInitialize+0x64>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e002      	b.n	80050a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80050a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80050a8:	68fb      	ldr	r3, [r7, #12]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20002a50 	.word	0x20002a50

080050bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c2:	f3ef 8305 	mrs	r3, IPSR
 80050c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80050c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10f      	bne.n	80050ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ce:	f3ef 8310 	mrs	r3, PRIMASK
 80050d2:	607b      	str	r3, [r7, #4]
  return(result);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050da:	f3ef 8311 	mrs	r3, BASEPRI
 80050de:	603b      	str	r3, [r7, #0]
  return(result);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <osKernelStart+0x3a>
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <osKernelStart+0x68>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d103      	bne.n	80050f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80050ee:	f06f 0305 	mvn.w	r3, #5
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e010      	b.n	8005118 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <osKernelStart+0x68>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d109      	bne.n	8005112 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80050fe:	f7ff ffa1 	bl	8005044 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005102:	4b08      	ldr	r3, [pc, #32]	; (8005124 <osKernelStart+0x68>)
 8005104:	2202      	movs	r2, #2
 8005106:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005108:	f001 f870 	bl	80061ec <vTaskStartScheduler>
      stat = osOK;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e002      	b.n	8005118 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005116:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005118:	68fb      	ldr	r3, [r7, #12]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20002a50 	.word	0x20002a50

08005128 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b090      	sub	sp, #64	; 0x40
 800512c:	af04      	add	r7, sp, #16
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005138:	f3ef 8305 	mrs	r3, IPSR
 800513c:	61fb      	str	r3, [r7, #28]
  return(result);
 800513e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005140:	2b00      	cmp	r3, #0
 8005142:	f040 808f 	bne.w	8005264 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005146:	f3ef 8310 	mrs	r3, PRIMASK
 800514a:	61bb      	str	r3, [r7, #24]
  return(result);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d105      	bne.n	800515e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005152:	f3ef 8311 	mrs	r3, BASEPRI
 8005156:	617b      	str	r3, [r7, #20]
  return(result);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <osThreadNew+0x3e>
 800515e:	4b44      	ldr	r3, [pc, #272]	; (8005270 <osThreadNew+0x148>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d07e      	beq.n	8005264 <osThreadNew+0x13c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d07b      	beq.n	8005264 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005170:	2318      	movs	r3, #24
 8005172:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005174:	2300      	movs	r3, #0
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800517c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d045      	beq.n	8005210 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <osThreadNew+0x6a>
        name = attr->name;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <osThreadNew+0x90>
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	2b38      	cmp	r3, #56	; 0x38
 80051aa:	d805      	bhi.n	80051b8 <osThreadNew+0x90>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <osThreadNew+0x94>
        return (NULL);
 80051b8:	2300      	movs	r3, #0
 80051ba:	e054      	b.n	8005266 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	089b      	lsrs	r3, r3, #2
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00e      	beq.n	80051f2 <osThreadNew+0xca>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	2b5b      	cmp	r3, #91	; 0x5b
 80051da:	d90a      	bls.n	80051f2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d006      	beq.n	80051f2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <osThreadNew+0xca>
        mem = 1;
 80051ec:	2301      	movs	r3, #1
 80051ee:	623b      	str	r3, [r7, #32]
 80051f0:	e010      	b.n	8005214 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10c      	bne.n	8005214 <osThreadNew+0xec>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d108      	bne.n	8005214 <osThreadNew+0xec>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <osThreadNew+0xec>
          mem = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	e001      	b.n	8005214 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d110      	bne.n	800523c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005222:	9202      	str	r2, [sp, #8]
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800522e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fe09 	bl	8005e48 <xTaskCreateStatic>
 8005236:	4603      	mov	r3, r0
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	e013      	b.n	8005264 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d110      	bne.n	8005264 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	b29a      	uxth	r2, r3
 8005246:	f107 0310 	add.w	r3, r7, #16
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fe51 	bl	8005efc <xTaskCreate>
 800525a:	4603      	mov	r3, r0
 800525c:	2b01      	cmp	r3, #1
 800525e:	d001      	beq.n	8005264 <osThreadNew+0x13c>
          hTask = NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005264:	693b      	ldr	r3, [r7, #16]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3730      	adds	r7, #48	; 0x30
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20002a50 	.word	0x20002a50

08005274 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800527c:	f3ef 8305 	mrs	r3, IPSR
 8005280:	613b      	str	r3, [r7, #16]
  return(result);
 8005282:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10f      	bne.n	80052a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005288:	f3ef 8310 	mrs	r3, PRIMASK
 800528c:	60fb      	str	r3, [r7, #12]
  return(result);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005294:	f3ef 8311 	mrs	r3, BASEPRI
 8005298:	60bb      	str	r3, [r7, #8]
  return(result);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d007      	beq.n	80052b0 <osDelay+0x3c>
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <osDelay+0x58>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d103      	bne.n	80052b0 <osDelay+0x3c>
    stat = osErrorISR;
 80052a8:	f06f 0305 	mvn.w	r3, #5
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	e007      	b.n	80052c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 ff62 	bl	8006184 <vTaskDelay>
    }
  }

  return (stat);
 80052c0:	697b      	ldr	r3, [r7, #20]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20002a50 	.word	0x20002a50

080052d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a07      	ldr	r2, [pc, #28]	; (80052fc <vApplicationGetIdleTaskMemory+0x2c>)
 80052e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4a06      	ldr	r2, [pc, #24]	; (8005300 <vApplicationGetIdleTaskMemory+0x30>)
 80052e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2280      	movs	r2, #128	; 0x80
 80052ec:	601a      	str	r2, [r3, #0]
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	20002a54 	.word	0x20002a54
 8005300:	20002ab0 	.word	0x20002ab0

08005304 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a07      	ldr	r2, [pc, #28]	; (8005330 <vApplicationGetTimerTaskMemory+0x2c>)
 8005314:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4a06      	ldr	r2, [pc, #24]	; (8005334 <vApplicationGetTimerTaskMemory+0x30>)
 800531a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20002cb0 	.word	0x20002cb0
 8005334:	20002d0c 	.word	0x20002d0c

08005338 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f103 0208 	add.w	r2, r3, #8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005350:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f103 0208 	add.w	r2, r3, #8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f103 0208 	add.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
}
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f0:	d103      	bne.n	80053fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	e00c      	b.n	8005414 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3308      	adds	r3, #8
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e002      	b.n	8005408 <vListInsert+0x2e>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	d2f6      	bcs.n	8005402 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	601a      	str	r2, [r3, #0]
}
 8005440:	bf00      	nop
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6892      	ldr	r2, [r2, #8]
 8005462:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6852      	ldr	r2, [r2, #4]
 800546c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	429a      	cmp	r2, r3
 8005476:	d103      	bne.n	8005480 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	1e5a      	subs	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d109      	bne.n	80054c8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	e7fe      	b.n	80054c6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80054c8:	f002 f810 	bl	80074ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d4:	68f9      	ldr	r1, [r7, #12]
 80054d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	3b01      	subs	r3, #1
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	441a      	add	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	22ff      	movs	r2, #255	; 0xff
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	22ff      	movs	r2, #255	; 0xff
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d114      	bne.n	8005548 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01a      	beq.n	800555c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3310      	adds	r3, #16
 800552a:	4618      	mov	r0, r3
 800552c:	f001 f8de 	bl	80066ec <xTaskRemoveFromEventList>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d012      	beq.n	800555c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <xQueueGenericReset+0xcc>)
 8005538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	e009      	b.n	800555c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3310      	adds	r3, #16
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fef3 	bl	8005338 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3324      	adds	r3, #36	; 0x24
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff feee 	bl	8005338 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800555c:	f001 fff4 	bl	8007548 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005560:	2301      	movs	r3, #1
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08e      	sub	sp, #56	; 0x38
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <xQueueGenericCreateStatic+0x28>
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
 8005596:	e7fe      	b.n	8005596 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <xQueueGenericCreateStatic+0x42>
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
 80055b0:	e7fe      	b.n	80055b0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <xQueueGenericCreateStatic+0x4e>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <xQueueGenericCreateStatic+0x52>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <xQueueGenericCreateStatic+0x54>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d109      	bne.n	80055dc <xQueueGenericCreateStatic+0x6c>
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	623b      	str	r3, [r7, #32]
 80055da:	e7fe      	b.n	80055da <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d102      	bne.n	80055e8 <xQueueGenericCreateStatic+0x78>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <xQueueGenericCreateStatic+0x7c>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <xQueueGenericCreateStatic+0x7e>
 80055ec:	2300      	movs	r3, #0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <xQueueGenericCreateStatic+0x96>
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	e7fe      	b.n	8005604 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005606:	2350      	movs	r3, #80	; 0x50
 8005608:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b50      	cmp	r3, #80	; 0x50
 800560e:	d009      	beq.n	8005624 <xQueueGenericCreateStatic+0xb4>
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	e7fe      	b.n	8005622 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005624:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00d      	beq.n	800564c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005638:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f805 	bl	8005656 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800564e:	4618      	mov	r0, r3
 8005650:	3730      	adds	r7, #48	; 0x30
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d103      	bne.n	8005672 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e002      	b.n	8005678 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005684:	2101      	movs	r1, #1
 8005686:	69b8      	ldr	r0, [r7, #24]
 8005688:	f7ff ff0a 	bl	80054a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08e      	sub	sp, #56	; 0x38
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056aa:	2300      	movs	r3, #0
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <xQueueGenericSend+0x30>
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ca:	e7fe      	b.n	80056ca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d103      	bne.n	80056da <xQueueGenericSend+0x3e>
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <xQueueGenericSend+0x42>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <xQueueGenericSend+0x44>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d109      	bne.n	80056f8 <xQueueGenericSend+0x5c>
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
 80056f6:	e7fe      	b.n	80056f6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d103      	bne.n	8005706 <xQueueGenericSend+0x6a>
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <xQueueGenericSend+0x6e>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <xQueueGenericSend+0x70>
 800570a:	2300      	movs	r3, #0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d109      	bne.n	8005724 <xQueueGenericSend+0x88>
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	e7fe      	b.n	8005722 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005724:	f001 f998 	bl	8006a58 <xTaskGetSchedulerState>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <xQueueGenericSend+0x98>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <xQueueGenericSend+0x9c>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <xQueueGenericSend+0x9e>
 8005738:	2300      	movs	r3, #0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <xQueueGenericSend+0xb6>
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	e7fe      	b.n	8005750 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005752:	f001 fecb 	bl	80074ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <xQueueGenericSend+0xcc>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d129      	bne.n	80057bc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800576e:	f000 f9ff 	bl	8005b70 <prvCopyDataToQueue>
 8005772:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	3324      	adds	r3, #36	; 0x24
 8005780:	4618      	mov	r0, r3
 8005782:	f000 ffb3 	bl	80066ec <xTaskRemoveFromEventList>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d013      	beq.n	80057b4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800578c:	4b3f      	ldr	r3, [pc, #252]	; (800588c <xQueueGenericSend+0x1f0>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	e00a      	b.n	80057b4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057a4:	4b39      	ldr	r3, [pc, #228]	; (800588c <xQueueGenericSend+0x1f0>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057b4:	f001 fec8 	bl	8007548 <vPortExitCritical>
				return pdPASS;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e063      	b.n	8005884 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057c2:	f001 fec1 	bl	8007548 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	e05c      	b.n	8005884 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d0:	f107 0314 	add.w	r3, r7, #20
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 ffeb 	bl	80067b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057da:	2301      	movs	r3, #1
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057de:	f001 feb3 	bl	8007548 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057e2:	f000 fd67 	bl	80062b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057e6:	f001 fe81 	bl	80074ec <vPortEnterCritical>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057f0:	b25b      	sxtb	r3, r3
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f6:	d103      	bne.n	8005800 <xQueueGenericSend+0x164>
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005806:	b25b      	sxtb	r3, r3
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800580c:	d103      	bne.n	8005816 <xQueueGenericSend+0x17a>
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005816:	f001 fe97 	bl	8007548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800581a:	1d3a      	adds	r2, r7, #4
 800581c:	f107 0314 	add.w	r3, r7, #20
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f000 ffda 	bl	80067dc <xTaskCheckForTimeOut>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d124      	bne.n	8005878 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800582e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005830:	f000 fa96 	bl	8005d60 <prvIsQueueFull>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d018      	beq.n	800586c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	3310      	adds	r3, #16
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f000 ff04 	bl	8006650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800584a:	f000 fa21 	bl	8005c90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800584e:	f000 fd3f 	bl	80062d0 <xTaskResumeAll>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	f47f af7c 	bne.w	8005752 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <xQueueGenericSend+0x1f0>)
 800585c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	e772      	b.n	8005752 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800586c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800586e:	f000 fa0f 	bl	8005c90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005872:	f000 fd2d 	bl	80062d0 <xTaskResumeAll>
 8005876:	e76c      	b.n	8005752 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800587a:	f000 fa09 	bl	8005c90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800587e:	f000 fd27 	bl	80062d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005882:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005884:	4618      	mov	r0, r3
 8005886:	3738      	adds	r7, #56	; 0x38
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	e000ed04 	.word	0xe000ed04

08005890 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08e      	sub	sp, #56	; 0x38
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <xQueueGenericSendFromISR+0x2c>
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	e7fe      	b.n	80058ba <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d103      	bne.n	80058ca <xQueueGenericSendFromISR+0x3a>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <xQueueGenericSendFromISR+0x3e>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <xQueueGenericSendFromISR+0x40>
 80058ce:	2300      	movs	r3, #0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <xQueueGenericSendFromISR+0x58>
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	623b      	str	r3, [r7, #32]
 80058e6:	e7fe      	b.n	80058e6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d103      	bne.n	80058f6 <xQueueGenericSendFromISR+0x66>
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <xQueueGenericSendFromISR+0x6a>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <xQueueGenericSendFromISR+0x6c>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d109      	bne.n	8005914 <xQueueGenericSendFromISR+0x84>
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	61fb      	str	r3, [r7, #28]
 8005912:	e7fe      	b.n	8005912 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005914:	f001 fec6 	bl	80076a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005918:	f3ef 8211 	mrs	r2, BASEPRI
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	61ba      	str	r2, [r7, #24]
 800592e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005930:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	429a      	cmp	r2, r3
 800593e:	d302      	bcc.n	8005946 <xQueueGenericSendFromISR+0xb6>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d12c      	bne.n	80059a0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800594c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005956:	f000 f90b 	bl	8005b70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800595a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005962:	d112      	bne.n	800598a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d016      	beq.n	800599a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	3324      	adds	r3, #36	; 0x24
 8005970:	4618      	mov	r0, r3
 8005972:	f000 febb 	bl	80066ec <xTaskRemoveFromEventList>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	e007      	b.n	800599a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800598a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800598e:	3301      	adds	r3, #1
 8005990:	b2db      	uxtb	r3, r3
 8005992:	b25a      	sxtb	r2, r3
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800599a:	2301      	movs	r3, #1
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800599e:	e001      	b.n	80059a4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	637b      	str	r3, [r7, #52]	; 0x34
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3738      	adds	r7, #56	; 0x38
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08c      	sub	sp, #48	; 0x30
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <xQueueReceive+0x2e>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	e7fe      	b.n	80059e4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <xQueueReceive+0x3c>
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <xQueueReceive+0x40>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <xQueueReceive+0x42>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <xQueueReceive+0x5a>
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	e7fe      	b.n	8005a10 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a12:	f001 f821 	bl	8006a58 <xTaskGetSchedulerState>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <xQueueReceive+0x6a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <xQueueReceive+0x6e>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueReceive+0x70>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <xQueueReceive+0x88>
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e7fe      	b.n	8005a3e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a40:	f001 fd54 	bl	80074ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01f      	beq.n	8005a90 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a54:	f000 f8f6 	bl	8005c44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	1e5a      	subs	r2, r3, #1
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00f      	beq.n	8005a88 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	3310      	adds	r3, #16
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fe3d 	bl	80066ec <xTaskRemoveFromEventList>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a78:	4b3c      	ldr	r3, [pc, #240]	; (8005b6c <xQueueReceive+0x1b4>)
 8005a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a88:	f001 fd5e 	bl	8007548 <vPortExitCritical>
				return pdPASS;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e069      	b.n	8005b64 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a96:	f001 fd57 	bl	8007548 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e062      	b.n	8005b64 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d106      	bne.n	8005ab2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aa4:	f107 0310 	add.w	r3, r7, #16
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fe81 	bl	80067b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ab2:	f001 fd49 	bl	8007548 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ab6:	f000 fbfd 	bl	80062b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aba:	f001 fd17 	bl	80074ec <vPortEnterCritical>
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aca:	d103      	bne.n	8005ad4 <xQueueReceive+0x11c>
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ada:	b25b      	sxtb	r3, r3
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae0:	d103      	bne.n	8005aea <xQueueReceive+0x132>
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aea:	f001 fd2d 	bl	8007548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aee:	1d3a      	adds	r2, r7, #4
 8005af0:	f107 0310 	add.w	r3, r7, #16
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fe70 	bl	80067dc <xTaskCheckForTimeOut>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d123      	bne.n	8005b4a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b04:	f000 f916 	bl	8005d34 <prvIsQueueEmpty>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d017      	beq.n	8005b3e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	3324      	adds	r3, #36	; 0x24
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	4611      	mov	r1, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fd9a 	bl	8006650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1e:	f000 f8b7 	bl	8005c90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b22:	f000 fbd5 	bl	80062d0 <xTaskResumeAll>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d189      	bne.n	8005a40 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <xQueueReceive+0x1b4>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	e780      	b.n	8005a40 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b40:	f000 f8a6 	bl	8005c90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b44:	f000 fbc4 	bl	80062d0 <xTaskResumeAll>
 8005b48:	e77a      	b.n	8005a40 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4c:	f000 f8a0 	bl	8005c90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b50:	f000 fbbe 	bl	80062d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b56:	f000 f8ed 	bl	8005d34 <prvIsQueueEmpty>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f43f af6f 	beq.w	8005a40 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3730      	adds	r7, #48	; 0x30
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10d      	bne.n	8005baa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d14d      	bne.n	8005c32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 ff7a 	bl	8006a94 <xTaskPriorityDisinherit>
 8005ba0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	e043      	b.n	8005c32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d119      	bne.n	8005be4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6858      	ldr	r0, [r3, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	461a      	mov	r2, r3
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	f024 f8fa 	bl	8029db4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	441a      	add	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d32b      	bcc.n	8005c32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	605a      	str	r2, [r3, #4]
 8005be2:	e026      	b.n	8005c32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68d8      	ldr	r0, [r3, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	461a      	mov	r2, r3
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	f024 f8e0 	bl	8029db4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	441a      	add	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d207      	bcs.n	8005c20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	425b      	negs	r3, r3
 8005c1a:	441a      	add	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d105      	bne.n	8005c32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c3a:	697b      	ldr	r3, [r7, #20]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	441a      	add	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d303      	bcc.n	8005c78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68d9      	ldr	r1, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	461a      	mov	r2, r3
 8005c82:	6838      	ldr	r0, [r7, #0]
 8005c84:	f024 f896 	bl	8029db4 <memcpy>
	}
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c98:	f001 fc28 	bl	80074ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ca4:	e011      	b.n	8005cca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d012      	beq.n	8005cd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3324      	adds	r3, #36	; 0x24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fd1a 	bl	80066ec <xTaskRemoveFromEventList>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cbe:	f000 fded 	bl	800689c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dce9      	bgt.n	8005ca6 <prvUnlockQueue+0x16>
 8005cd2:	e000      	b.n	8005cd6 <prvUnlockQueue+0x46>
					break;
 8005cd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	22ff      	movs	r2, #255	; 0xff
 8005cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cde:	f001 fc33 	bl	8007548 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ce2:	f001 fc03 	bl	80074ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cee:	e011      	b.n	8005d14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d012      	beq.n	8005d1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3310      	adds	r3, #16
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fcf5 	bl	80066ec <xTaskRemoveFromEventList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d08:	f000 fdc8 	bl	800689c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d0c:	7bbb      	ldrb	r3, [r7, #14]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dce9      	bgt.n	8005cf0 <prvUnlockQueue+0x60>
 8005d1c:	e000      	b.n	8005d20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	22ff      	movs	r2, #255	; 0xff
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d28:	f001 fc0e 	bl	8007548 <vPortExitCritical>
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d3c:	f001 fbd6 	bl	80074ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e001      	b.n	8005d52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d52:	f001 fbf9 	bl	8007548 <vPortExitCritical>

	return xReturn;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d68:	f001 fbc0 	bl	80074ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d102      	bne.n	8005d7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e001      	b.n	8005d82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d82:	f001 fbe1 	bl	8007548 <vPortExitCritical>

	return xReturn;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e014      	b.n	8005dca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005da0:	4a0e      	ldr	r2, [pc, #56]	; (8005ddc <vQueueAddToRegistry+0x4c>)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dac:	490b      	ldr	r1, [pc, #44]	; (8005ddc <vQueueAddToRegistry+0x4c>)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <vQueueAddToRegistry+0x4c>)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dc2:	e005      	b.n	8005dd0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b07      	cmp	r3, #7
 8005dce:	d9e7      	bls.n	8005da0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	2001b7f0 	.word	0x2001b7f0

08005de0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005df0:	f001 fb7c 	bl	80074ec <vPortEnterCritical>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e00:	d103      	bne.n	8005e0a <vQueueWaitForMessageRestricted+0x2a>
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e10:	b25b      	sxtb	r3, r3
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e16:	d103      	bne.n	8005e20 <vQueueWaitForMessageRestricted+0x40>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e20:	f001 fb92 	bl	8007548 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	3324      	adds	r3, #36	; 0x24
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fc2f 	bl	8006698 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e3a:	6978      	ldr	r0, [r7, #20]
 8005e3c:	f7ff ff28 	bl	8005c90 <prvUnlockQueue>
	}
 8005e40:	bf00      	nop
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08e      	sub	sp, #56	; 0x38
 8005e4c:	af04      	add	r7, sp, #16
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d109      	bne.n	8005e70 <xTaskCreateStatic+0x28>
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	623b      	str	r3, [r7, #32]
 8005e6e:	e7fe      	b.n	8005e6e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <xTaskCreateStatic+0x42>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	e7fe      	b.n	8005e88 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e8a:	235c      	movs	r3, #92	; 0x5c
 8005e8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b5c      	cmp	r3, #92	; 0x5c
 8005e92:	d009      	beq.n	8005ea8 <xTaskCreateStatic+0x60>
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	e7fe      	b.n	8005ea6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ea8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01e      	beq.n	8005eee <xTaskCreateStatic+0xa6>
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01b      	beq.n	8005eee <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ec8:	2300      	movs	r3, #0
 8005eca:	9303      	str	r3, [sp, #12]
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	9302      	str	r3, [sp, #8]
 8005ed0:	f107 0314 	add.w	r3, r7, #20
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f850 	bl	8005f86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ee6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ee8:	f000 f8dc 	bl	80060a4 <prvAddNewTaskToReadyList>
 8005eec:	e001      	b.n	8005ef2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ef2:	697b      	ldr	r3, [r7, #20]
	}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3728      	adds	r7, #40	; 0x28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08c      	sub	sp, #48	; 0x30
 8005f00:	af04      	add	r7, sp, #16
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 fc05 	bl	8007720 <pvPortMalloc>
 8005f16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00e      	beq.n	8005f3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f1e:	205c      	movs	r0, #92	; 0x5c
 8005f20:	f001 fbfe 	bl	8007720 <pvPortMalloc>
 8005f24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
 8005f32:	e005      	b.n	8005f40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f34:	6978      	ldr	r0, [r7, #20]
 8005f36:	f001 fcb5 	bl	80078a4 <vPortFree>
 8005f3a:	e001      	b.n	8005f40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d017      	beq.n	8005f76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f4e:	88fa      	ldrh	r2, [r7, #6]
 8005f50:	2300      	movs	r3, #0
 8005f52:	9303      	str	r3, [sp, #12]
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	9302      	str	r3, [sp, #8]
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f80e 	bl	8005f86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f6a:	69f8      	ldr	r0, [r7, #28]
 8005f6c:	f000 f89a 	bl	80060a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f70:	2301      	movs	r3, #1
 8005f72:	61bb      	str	r3, [r7, #24]
 8005f74:	e002      	b.n	8005f7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
	}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b088      	sub	sp, #32
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
 8005f92:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	21a5      	movs	r1, #165	; 0xa5
 8005fa0:	f023 ff13 	bl	8029dca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f023 0307 	bic.w	r3, r3, #7
 8005fbc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <prvInitialiseNewTask+0x56>
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	e7fe      	b.n	8005fda <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01f      	beq.n	8006022 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	e012      	b.n	800600e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	7819      	ldrb	r1, [r3, #0]
 8005ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	3334      	adds	r3, #52	; 0x34
 8005ff8:	460a      	mov	r2, r1
 8005ffa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2b0f      	cmp	r3, #15
 8006012:	d9e9      	bls.n	8005fe8 <prvInitialiseNewTask+0x62>
 8006014:	e000      	b.n	8006018 <prvInitialiseNewTask+0x92>
			{
				break;
 8006016:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006020:	e003      	b.n	800602a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	2b37      	cmp	r3, #55	; 0x37
 800602e:	d901      	bls.n	8006034 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006030:	2337      	movs	r3, #55	; 0x37
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006038:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800603e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	2200      	movs	r2, #0
 8006044:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	3304      	adds	r3, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff f994 	bl	8005378 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	3318      	adds	r3, #24
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff f98f 	bl	8005378 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	2200      	movs	r2, #0
 8006074:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	68f9      	ldr	r1, [r7, #12]
 8006082:	69b8      	ldr	r0, [r7, #24]
 8006084:	f001 f90c 	bl	80072a0 <pxPortInitialiseStack>
 8006088:	4602      	mov	r2, r0
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800609a:	bf00      	nop
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060ac:	f001 fa1e 	bl	80074ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060b0:	4b2d      	ldr	r3, [pc, #180]	; (8006168 <prvAddNewTaskToReadyList+0xc4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	4a2c      	ldr	r2, [pc, #176]	; (8006168 <prvAddNewTaskToReadyList+0xc4>)
 80060b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ba:	4b2c      	ldr	r3, [pc, #176]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060c2:	4a2a      	ldr	r2, [pc, #168]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060c8:	4b27      	ldr	r3, [pc, #156]	; (8006168 <prvAddNewTaskToReadyList+0xc4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d110      	bne.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060d0:	f000 fc08 	bl	80068e4 <prvInitialiseTaskLists>
 80060d4:	e00d      	b.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060d6:	4b26      	ldr	r3, [pc, #152]	; (8006170 <prvAddNewTaskToReadyList+0xcc>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060de:	4b23      	ldr	r3, [pc, #140]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d802      	bhi.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060ec:	4a1f      	ldr	r2, [pc, #124]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060f2:	4b20      	ldr	r3, [pc, #128]	; (8006174 <prvAddNewTaskToReadyList+0xd0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <prvAddNewTaskToReadyList+0xd0>)
 80060fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060fc:	4b1d      	ldr	r3, [pc, #116]	; (8006174 <prvAddNewTaskToReadyList+0xd0>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006108:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <prvAddNewTaskToReadyList+0xd4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d903      	bls.n	8006118 <prvAddNewTaskToReadyList+0x74>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	4a18      	ldr	r2, [pc, #96]	; (8006178 <prvAddNewTaskToReadyList+0xd4>)
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4a15      	ldr	r2, [pc, #84]	; (800617c <prvAddNewTaskToReadyList+0xd8>)
 8006126:	441a      	add	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3304      	adds	r3, #4
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f7ff f92f 	bl	8005392 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006134:	f001 fa08 	bl	8007548 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006138:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <prvAddNewTaskToReadyList+0xcc>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00e      	beq.n	800615e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	429a      	cmp	r2, r3
 800614c:	d207      	bcs.n	800615e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800614e:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <prvAddNewTaskToReadyList+0xdc>)
 8006150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	200035e0 	.word	0x200035e0
 800616c:	2000310c 	.word	0x2000310c
 8006170:	200035ec 	.word	0x200035ec
 8006174:	200035fc 	.word	0x200035fc
 8006178:	200035e8 	.word	0x200035e8
 800617c:	20003110 	.word	0x20003110
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d016      	beq.n	80061c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006196:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <vTaskDelay+0x60>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <vTaskDelay+0x2e>
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	e7fe      	b.n	80061b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80061b2:	f000 f87f 	bl	80062b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061b6:	2100      	movs	r1, #0
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fcd7 	bl	8006b6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061be:	f000 f887 	bl	80062d0 <xTaskResumeAll>
 80061c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d107      	bne.n	80061da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <vTaskDelay+0x64>)
 80061cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20003608 	.word	0x20003608
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061fa:	463a      	mov	r2, r7
 80061fc:	1d39      	adds	r1, r7, #4
 80061fe:	f107 0308 	add.w	r3, r7, #8
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f864 	bl	80052d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	9202      	str	r2, [sp, #8]
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	2300      	movs	r3, #0
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	2300      	movs	r3, #0
 8006218:	460a      	mov	r2, r1
 800621a:	4920      	ldr	r1, [pc, #128]	; (800629c <vTaskStartScheduler+0xb0>)
 800621c:	4820      	ldr	r0, [pc, #128]	; (80062a0 <vTaskStartScheduler+0xb4>)
 800621e:	f7ff fe13 	bl	8005e48 <xTaskCreateStatic>
 8006222:	4602      	mov	r2, r0
 8006224:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <vTaskStartScheduler+0xb8>)
 8006226:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006228:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <vTaskStartScheduler+0xb8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006230:	2301      	movs	r3, #1
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	e001      	b.n	800623a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d102      	bne.n	8006246 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006240:	f000 fce8 	bl	8006c14 <xTimerCreateTimerTask>
 8006244:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d115      	bne.n	8006278 <vTaskStartScheduler+0x8c>
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <vTaskStartScheduler+0xbc>)
 8006260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006264:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006266:	4b11      	ldr	r3, [pc, #68]	; (80062ac <vTaskStartScheduler+0xc0>)
 8006268:	2201      	movs	r2, #1
 800626a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800626c:	4b10      	ldr	r3, [pc, #64]	; (80062b0 <vTaskStartScheduler+0xc4>)
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006272:	f001 f89d 	bl	80073b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006276:	e00d      	b.n	8006294 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800627e:	d109      	bne.n	8006294 <vTaskStartScheduler+0xa8>
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e7fe      	b.n	8006292 <vTaskStartScheduler+0xa6>
}
 8006294:	bf00      	nop
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	0802c838 	.word	0x0802c838
 80062a0:	080068b5 	.word	0x080068b5
 80062a4:	20003604 	.word	0x20003604
 80062a8:	20003600 	.word	0x20003600
 80062ac:	200035ec 	.word	0x200035ec
 80062b0:	200035e4 	.word	0x200035e4

080062b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062b8:	4b04      	ldr	r3, [pc, #16]	; (80062cc <vTaskSuspendAll+0x18>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3301      	adds	r3, #1
 80062be:	4a03      	ldr	r2, [pc, #12]	; (80062cc <vTaskSuspendAll+0x18>)
 80062c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80062c2:	bf00      	nop
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	20003608 	.word	0x20003608

080062d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062da:	2300      	movs	r3, #0
 80062dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062de:	4b41      	ldr	r3, [pc, #260]	; (80063e4 <xTaskResumeAll+0x114>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <xTaskResumeAll+0x2a>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	e7fe      	b.n	80062f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062fa:	f001 f8f7 	bl	80074ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062fe:	4b39      	ldr	r3, [pc, #228]	; (80063e4 <xTaskResumeAll+0x114>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3b01      	subs	r3, #1
 8006304:	4a37      	ldr	r2, [pc, #220]	; (80063e4 <xTaskResumeAll+0x114>)
 8006306:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006308:	4b36      	ldr	r3, [pc, #216]	; (80063e4 <xTaskResumeAll+0x114>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d162      	bne.n	80063d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006310:	4b35      	ldr	r3, [pc, #212]	; (80063e8 <xTaskResumeAll+0x118>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d05e      	beq.n	80063d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006318:	e02f      	b.n	800637a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800631a:	4b34      	ldr	r3, [pc, #208]	; (80063ec <xTaskResumeAll+0x11c>)
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3318      	adds	r3, #24
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff f890 	bl	800544c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3304      	adds	r3, #4
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff f88b 	bl	800544c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633a:	4b2d      	ldr	r3, [pc, #180]	; (80063f0 <xTaskResumeAll+0x120>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d903      	bls.n	800634a <xTaskResumeAll+0x7a>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	4a2a      	ldr	r2, [pc, #168]	; (80063f0 <xTaskResumeAll+0x120>)
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4a27      	ldr	r2, [pc, #156]	; (80063f4 <xTaskResumeAll+0x124>)
 8006358:	441a      	add	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3304      	adds	r3, #4
 800635e:	4619      	mov	r1, r3
 8006360:	4610      	mov	r0, r2
 8006362:	f7ff f816 	bl	8005392 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636a:	4b23      	ldr	r3, [pc, #140]	; (80063f8 <xTaskResumeAll+0x128>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	429a      	cmp	r2, r3
 8006372:	d302      	bcc.n	800637a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006374:	4b21      	ldr	r3, [pc, #132]	; (80063fc <xTaskResumeAll+0x12c>)
 8006376:	2201      	movs	r2, #1
 8006378:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800637a:	4b1c      	ldr	r3, [pc, #112]	; (80063ec <xTaskResumeAll+0x11c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1cb      	bne.n	800631a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006388:	f000 fb46 	bl	8006a18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800638c:	4b1c      	ldr	r3, [pc, #112]	; (8006400 <xTaskResumeAll+0x130>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d010      	beq.n	80063ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006398:	f000 f846 	bl	8006428 <xTaskIncrementTick>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063a2:	4b16      	ldr	r3, [pc, #88]	; (80063fc <xTaskResumeAll+0x12c>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f1      	bne.n	8006398 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80063b4:	4b12      	ldr	r3, [pc, #72]	; (8006400 <xTaskResumeAll+0x130>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063ba:	4b10      	ldr	r3, [pc, #64]	; (80063fc <xTaskResumeAll+0x12c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063c2:	2301      	movs	r3, #1
 80063c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063c6:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <xTaskResumeAll+0x134>)
 80063c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063d6:	f001 f8b7 	bl	8007548 <vPortExitCritical>

	return xAlreadyYielded;
 80063da:	68bb      	ldr	r3, [r7, #8]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	20003608 	.word	0x20003608
 80063e8:	200035e0 	.word	0x200035e0
 80063ec:	200035a0 	.word	0x200035a0
 80063f0:	200035e8 	.word	0x200035e8
 80063f4:	20003110 	.word	0x20003110
 80063f8:	2000310c 	.word	0x2000310c
 80063fc:	200035f4 	.word	0x200035f4
 8006400:	200035f0 	.word	0x200035f0
 8006404:	e000ed04 	.word	0xe000ed04

08006408 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <xTaskGetTickCount+0x1c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006414:	687b      	ldr	r3, [r7, #4]
}
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	200035e4 	.word	0x200035e4

08006428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006432:	4b4e      	ldr	r3, [pc, #312]	; (800656c <xTaskIncrementTick+0x144>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 8088 	bne.w	800654c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800643c:	4b4c      	ldr	r3, [pc, #304]	; (8006570 <xTaskIncrementTick+0x148>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3301      	adds	r3, #1
 8006442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006444:	4a4a      	ldr	r2, [pc, #296]	; (8006570 <xTaskIncrementTick+0x148>)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d11f      	bne.n	8006490 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006450:	4b48      	ldr	r3, [pc, #288]	; (8006574 <xTaskIncrementTick+0x14c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d009      	beq.n	800646e <xTaskIncrementTick+0x46>
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	e7fe      	b.n	800646c <xTaskIncrementTick+0x44>
 800646e:	4b41      	ldr	r3, [pc, #260]	; (8006574 <xTaskIncrementTick+0x14c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	4b40      	ldr	r3, [pc, #256]	; (8006578 <xTaskIncrementTick+0x150>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a3e      	ldr	r2, [pc, #248]	; (8006574 <xTaskIncrementTick+0x14c>)
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	4a3e      	ldr	r2, [pc, #248]	; (8006578 <xTaskIncrementTick+0x150>)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	4b3e      	ldr	r3, [pc, #248]	; (800657c <xTaskIncrementTick+0x154>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3301      	adds	r3, #1
 8006488:	4a3c      	ldr	r2, [pc, #240]	; (800657c <xTaskIncrementTick+0x154>)
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	f000 fac4 	bl	8006a18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006490:	4b3b      	ldr	r3, [pc, #236]	; (8006580 <xTaskIncrementTick+0x158>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	429a      	cmp	r2, r3
 8006498:	d349      	bcc.n	800652e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800649a:	4b36      	ldr	r3, [pc, #216]	; (8006574 <xTaskIncrementTick+0x14c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a4:	4b36      	ldr	r3, [pc, #216]	; (8006580 <xTaskIncrementTick+0x158>)
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064aa:	601a      	str	r2, [r3, #0]
					break;
 80064ac:	e03f      	b.n	800652e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ae:	4b31      	ldr	r3, [pc, #196]	; (8006574 <xTaskIncrementTick+0x14c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d203      	bcs.n	80064ce <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064c6:	4a2e      	ldr	r2, [pc, #184]	; (8006580 <xTaskIncrementTick+0x158>)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064cc:	e02f      	b.n	800652e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	3304      	adds	r3, #4
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe ffba 	bl	800544c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	3318      	adds	r3, #24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fe ffb1 	bl	800544c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ee:	4b25      	ldr	r3, [pc, #148]	; (8006584 <xTaskIncrementTick+0x15c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d903      	bls.n	80064fe <xTaskIncrementTick+0xd6>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	4a22      	ldr	r2, [pc, #136]	; (8006584 <xTaskIncrementTick+0x15c>)
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4a1f      	ldr	r2, [pc, #124]	; (8006588 <xTaskIncrementTick+0x160>)
 800650c:	441a      	add	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7fe ff3c 	bl	8005392 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651e:	4b1b      	ldr	r3, [pc, #108]	; (800658c <xTaskIncrementTick+0x164>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	429a      	cmp	r2, r3
 8006526:	d3b8      	bcc.n	800649a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800652c:	e7b5      	b.n	800649a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800652e:	4b17      	ldr	r3, [pc, #92]	; (800658c <xTaskIncrementTick+0x164>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	4914      	ldr	r1, [pc, #80]	; (8006588 <xTaskIncrementTick+0x160>)
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d907      	bls.n	8006556 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006546:	2301      	movs	r3, #1
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	e004      	b.n	8006556 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800654c:	4b10      	ldr	r3, [pc, #64]	; (8006590 <xTaskIncrementTick+0x168>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3301      	adds	r3, #1
 8006552:	4a0f      	ldr	r2, [pc, #60]	; (8006590 <xTaskIncrementTick+0x168>)
 8006554:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <xTaskIncrementTick+0x16c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800655e:	2301      	movs	r3, #1
 8006560:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006562:	697b      	ldr	r3, [r7, #20]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20003608 	.word	0x20003608
 8006570:	200035e4 	.word	0x200035e4
 8006574:	20003598 	.word	0x20003598
 8006578:	2000359c 	.word	0x2000359c
 800657c:	200035f8 	.word	0x200035f8
 8006580:	20003600 	.word	0x20003600
 8006584:	200035e8 	.word	0x200035e8
 8006588:	20003110 	.word	0x20003110
 800658c:	2000310c 	.word	0x2000310c
 8006590:	200035f0 	.word	0x200035f0
 8006594:	200035f4 	.word	0x200035f4

08006598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800659e:	4b27      	ldr	r3, [pc, #156]	; (800663c <vTaskSwitchContext+0xa4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065a6:	4b26      	ldr	r3, [pc, #152]	; (8006640 <vTaskSwitchContext+0xa8>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065ac:	e040      	b.n	8006630 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80065ae:	4b24      	ldr	r3, [pc, #144]	; (8006640 <vTaskSwitchContext+0xa8>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b4:	4b23      	ldr	r3, [pc, #140]	; (8006644 <vTaskSwitchContext+0xac>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e00f      	b.n	80065dc <vTaskSwitchContext+0x44>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <vTaskSwitchContext+0x3e>
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	e7fe      	b.n	80065d4 <vTaskSwitchContext+0x3c>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3b01      	subs	r3, #1
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	491a      	ldr	r1, [pc, #104]	; (8006648 <vTaskSwitchContext+0xb0>)
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0e5      	beq.n	80065bc <vTaskSwitchContext+0x24>
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4a13      	ldr	r2, [pc, #76]	; (8006648 <vTaskSwitchContext+0xb0>)
 80065fc:	4413      	add	r3, r2
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	3308      	adds	r3, #8
 8006612:	429a      	cmp	r2, r3
 8006614:	d104      	bne.n	8006620 <vTaskSwitchContext+0x88>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	605a      	str	r2, [r3, #4]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	4a09      	ldr	r2, [pc, #36]	; (800664c <vTaskSwitchContext+0xb4>)
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	4a06      	ldr	r2, [pc, #24]	; (8006644 <vTaskSwitchContext+0xac>)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6013      	str	r3, [r2, #0]
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20003608 	.word	0x20003608
 8006640:	200035f4 	.word	0x200035f4
 8006644:	200035e8 	.word	0x200035e8
 8006648:	20003110 	.word	0x20003110
 800664c:	2000310c 	.word	0x2000310c

08006650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <vTaskPlaceOnEventList+0x24>
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e7fe      	b.n	8006672 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006674:	4b07      	ldr	r3, [pc, #28]	; (8006694 <vTaskPlaceOnEventList+0x44>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3318      	adds	r3, #24
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7fe feac 	bl	80053da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006682:	2101      	movs	r1, #1
 8006684:	6838      	ldr	r0, [r7, #0]
 8006686:	f000 fa71 	bl	8006b6c <prvAddCurrentTaskToDelayedList>
}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	2000310c 	.word	0x2000310c

08006698 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d109      	bne.n	80066be <vTaskPlaceOnEventListRestricted+0x26>
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e7fe      	b.n	80066bc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066be:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <vTaskPlaceOnEventListRestricted+0x50>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3318      	adds	r3, #24
 80066c4:	4619      	mov	r1, r3
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7fe fe63 	bl	8005392 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80066d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	68b8      	ldr	r0, [r7, #8]
 80066dc:	f000 fa46 	bl	8006b6c <prvAddCurrentTaskToDelayedList>
	}
 80066e0:	bf00      	nop
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	2000310c 	.word	0x2000310c

080066ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <xTaskRemoveFromEventList+0x2a>
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e7fe      	b.n	8006714 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	3318      	adds	r3, #24
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe fe96 	bl	800544c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006720:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <xTaskRemoveFromEventList+0xac>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d11d      	bne.n	8006764 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	3304      	adds	r3, #4
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe fe8d 	bl	800544c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006736:	4b19      	ldr	r3, [pc, #100]	; (800679c <xTaskRemoveFromEventList+0xb0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d903      	bls.n	8006746 <xTaskRemoveFromEventList+0x5a>
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	4a16      	ldr	r2, [pc, #88]	; (800679c <xTaskRemoveFromEventList+0xb0>)
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4a13      	ldr	r2, [pc, #76]	; (80067a0 <xTaskRemoveFromEventList+0xb4>)
 8006754:	441a      	add	r2, r3
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	3304      	adds	r3, #4
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f7fe fe18 	bl	8005392 <vListInsertEnd>
 8006762:	e005      	b.n	8006770 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	3318      	adds	r3, #24
 8006768:	4619      	mov	r1, r3
 800676a:	480e      	ldr	r0, [pc, #56]	; (80067a4 <xTaskRemoveFromEventList+0xb8>)
 800676c:	f7fe fe11 	bl	8005392 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <xTaskRemoveFromEventList+0xbc>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	429a      	cmp	r2, r3
 800677c:	d905      	bls.n	800678a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800677e:	2301      	movs	r3, #1
 8006780:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006782:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <xTaskRemoveFromEventList+0xc0>)
 8006784:	2201      	movs	r2, #1
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	e001      	b.n	800678e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800678e:	697b      	ldr	r3, [r7, #20]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20003608 	.word	0x20003608
 800679c:	200035e8 	.word	0x200035e8
 80067a0:	20003110 	.word	0x20003110
 80067a4:	200035a0 	.word	0x200035a0
 80067a8:	2000310c 	.word	0x2000310c
 80067ac:	200035f4 	.word	0x200035f4

080067b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <vTaskInternalSetTimeOutState+0x24>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <vTaskInternalSetTimeOutState+0x28>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	605a      	str	r2, [r3, #4]
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	200035f8 	.word	0x200035f8
 80067d8:	200035e4 	.word	0x200035e4

080067dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d109      	bne.n	8006800 <xTaskCheckForTimeOut+0x24>
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	e7fe      	b.n	80067fe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <xTaskCheckForTimeOut+0x3e>
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e7fe      	b.n	8006818 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800681a:	f000 fe67 	bl	80074ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800681e:	4b1d      	ldr	r3, [pc, #116]	; (8006894 <xTaskCheckForTimeOut+0xb8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006836:	d102      	bne.n	800683e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	e023      	b.n	8006886 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b15      	ldr	r3, [pc, #84]	; (8006898 <xTaskCheckForTimeOut+0xbc>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d007      	beq.n	800685a <xTaskCheckForTimeOut+0x7e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	429a      	cmp	r2, r3
 8006852:	d302      	bcc.n	800685a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006854:	2301      	movs	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e015      	b.n	8006886 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	429a      	cmp	r2, r3
 8006862:	d20b      	bcs.n	800687c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	1ad2      	subs	r2, r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff ff9d 	bl	80067b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	e004      	b.n	8006886 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006882:	2301      	movs	r3, #1
 8006884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006886:	f000 fe5f 	bl	8007548 <vPortExitCritical>

	return xReturn;
 800688a:	69fb      	ldr	r3, [r7, #28]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	200035e4 	.word	0x200035e4
 8006898:	200035f8 	.word	0x200035f8

0800689c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068a0:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <vTaskMissedYield+0x14>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
}
 80068a6:	bf00      	nop
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	200035f4 	.word	0x200035f4

080068b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068bc:	f000 f852 	bl	8006964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <prvIdleTask+0x28>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d9f9      	bls.n	80068bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80068c8:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <prvIdleTask+0x2c>)
 80068ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068d8:	e7f0      	b.n	80068bc <prvIdleTask+0x8>
 80068da:	bf00      	nop
 80068dc:	20003110 	.word	0x20003110
 80068e0:	e000ed04 	.word	0xe000ed04

080068e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068ea:	2300      	movs	r3, #0
 80068ec:	607b      	str	r3, [r7, #4]
 80068ee:	e00c      	b.n	800690a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4a12      	ldr	r2, [pc, #72]	; (8006944 <prvInitialiseTaskLists+0x60>)
 80068fc:	4413      	add	r3, r2
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe fd1a 	bl	8005338 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3301      	adds	r3, #1
 8006908:	607b      	str	r3, [r7, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b37      	cmp	r3, #55	; 0x37
 800690e:	d9ef      	bls.n	80068f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006910:	480d      	ldr	r0, [pc, #52]	; (8006948 <prvInitialiseTaskLists+0x64>)
 8006912:	f7fe fd11 	bl	8005338 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006916:	480d      	ldr	r0, [pc, #52]	; (800694c <prvInitialiseTaskLists+0x68>)
 8006918:	f7fe fd0e 	bl	8005338 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800691c:	480c      	ldr	r0, [pc, #48]	; (8006950 <prvInitialiseTaskLists+0x6c>)
 800691e:	f7fe fd0b 	bl	8005338 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006922:	480c      	ldr	r0, [pc, #48]	; (8006954 <prvInitialiseTaskLists+0x70>)
 8006924:	f7fe fd08 	bl	8005338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006928:	480b      	ldr	r0, [pc, #44]	; (8006958 <prvInitialiseTaskLists+0x74>)
 800692a:	f7fe fd05 	bl	8005338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800692e:	4b0b      	ldr	r3, [pc, #44]	; (800695c <prvInitialiseTaskLists+0x78>)
 8006930:	4a05      	ldr	r2, [pc, #20]	; (8006948 <prvInitialiseTaskLists+0x64>)
 8006932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <prvInitialiseTaskLists+0x7c>)
 8006936:	4a05      	ldr	r2, [pc, #20]	; (800694c <prvInitialiseTaskLists+0x68>)
 8006938:	601a      	str	r2, [r3, #0]
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20003110 	.word	0x20003110
 8006948:	20003570 	.word	0x20003570
 800694c:	20003584 	.word	0x20003584
 8006950:	200035a0 	.word	0x200035a0
 8006954:	200035b4 	.word	0x200035b4
 8006958:	200035cc 	.word	0x200035cc
 800695c:	20003598 	.word	0x20003598
 8006960:	2000359c 	.word	0x2000359c

08006964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800696a:	e019      	b.n	80069a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800696c:	f000 fdbe 	bl	80074ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006970:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <prvCheckTasksWaitingTermination+0x4c>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe fd65 	bl	800544c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006982:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <prvCheckTasksWaitingTermination+0x50>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3b01      	subs	r3, #1
 8006988:	4a0a      	ldr	r2, [pc, #40]	; (80069b4 <prvCheckTasksWaitingTermination+0x50>)
 800698a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <prvCheckTasksWaitingTermination+0x54>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3b01      	subs	r3, #1
 8006992:	4a09      	ldr	r2, [pc, #36]	; (80069b8 <prvCheckTasksWaitingTermination+0x54>)
 8006994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006996:	f000 fdd7 	bl	8007548 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f80e 	bl	80069bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <prvCheckTasksWaitingTermination+0x54>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e1      	bne.n	800696c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	200035b4 	.word	0x200035b4
 80069b4:	200035e0 	.word	0x200035e0
 80069b8:	200035c8 	.word	0x200035c8

080069bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d108      	bne.n	80069e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 ff66 	bl	80078a4 <vPortFree>
				vPortFree( pxTCB );
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 ff63 	bl	80078a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069de:	e017      	b.n	8006a10 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d103      	bne.n	80069f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 ff5a 	bl	80078a4 <vPortFree>
	}
 80069f0:	e00e      	b.n	8006a10 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d009      	beq.n	8006a10 <prvDeleteTCB+0x54>
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	e7fe      	b.n	8006a0e <prvDeleteTCB+0x52>
	}
 8006a10:	bf00      	nop
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a1e:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <prvResetNextTaskUnblockTime+0x38>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a28:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <prvResetNextTaskUnblockTime+0x3c>)
 8006a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a30:	e008      	b.n	8006a44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a32:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <prvResetNextTaskUnblockTime+0x38>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <prvResetNextTaskUnblockTime+0x3c>)
 8006a42:	6013      	str	r3, [r2, #0]
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	20003598 	.word	0x20003598
 8006a54:	20003600 	.word	0x20003600

08006a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <xTaskGetSchedulerState+0x34>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d102      	bne.n	8006a6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a66:	2301      	movs	r3, #1
 8006a68:	607b      	str	r3, [r7, #4]
 8006a6a:	e008      	b.n	8006a7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a6c:	4b08      	ldr	r3, [pc, #32]	; (8006a90 <xTaskGetSchedulerState+0x38>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a74:	2302      	movs	r3, #2
 8006a76:	607b      	str	r3, [r7, #4]
 8006a78:	e001      	b.n	8006a7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a7e:	687b      	ldr	r3, [r7, #4]
	}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	200035ec 	.word	0x200035ec
 8006a90:	20003608 	.word	0x20003608

08006a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d054      	beq.n	8006b54 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006aaa:	4b2d      	ldr	r3, [pc, #180]	; (8006b60 <xTaskPriorityDisinherit+0xcc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d009      	beq.n	8006ac8 <xTaskPriorityDisinherit+0x34>
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	e7fe      	b.n	8006ac6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d109      	bne.n	8006ae4 <xTaskPriorityDisinherit+0x50>
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	e7fe      	b.n	8006ae2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae8:	1e5a      	subs	r2, r3, #1
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d02c      	beq.n	8006b54 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d128      	bne.n	8006b54 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fca0 	bl	800544c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	4b0f      	ldr	r3, [pc, #60]	; (8006b64 <xTaskPriorityDisinherit+0xd0>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d903      	bls.n	8006b34 <xTaskPriorityDisinherit+0xa0>
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	4a0c      	ldr	r2, [pc, #48]	; (8006b64 <xTaskPriorityDisinherit+0xd0>)
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <xTaskPriorityDisinherit+0xd4>)
 8006b42:	441a      	add	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f7fe fc21 	bl	8005392 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b50:	2301      	movs	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b54:	697b      	ldr	r3, [r7, #20]
	}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	2000310c 	.word	0x2000310c
 8006b64:	200035e8 	.word	0x200035e8
 8006b68:	20003110 	.word	0x20003110

08006b6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b76:	4b21      	ldr	r3, [pc, #132]	; (8006bfc <prvAddCurrentTaskToDelayedList+0x90>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b7c:	4b20      	ldr	r3, [pc, #128]	; (8006c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fc62 	bl	800544c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b8e:	d10a      	bne.n	8006ba6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b96:	4b1a      	ldr	r3, [pc, #104]	; (8006c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4819      	ldr	r0, [pc, #100]	; (8006c04 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ba0:	f7fe fbf7 	bl	8005392 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ba4:	e026      	b.n	8006bf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4413      	add	r3, r2
 8006bac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bae:	4b14      	ldr	r3, [pc, #80]	; (8006c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d209      	bcs.n	8006bd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bbe:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b0f      	ldr	r3, [pc, #60]	; (8006c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f7fe fc05 	bl	80053da <vListInsert>
}
 8006bd0:	e010      	b.n	8006bf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bd2:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7fe fbfb 	bl	80053da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006be4:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d202      	bcs.n	8006bf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006bee:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	6013      	str	r3, [r2, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	200035e4 	.word	0x200035e4
 8006c00:	2000310c 	.word	0x2000310c
 8006c04:	200035cc 	.word	0x200035cc
 8006c08:	2000359c 	.word	0x2000359c
 8006c0c:	20003598 	.word	0x20003598
 8006c10:	20003600 	.word	0x20003600

08006c14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	; 0x28
 8006c18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c1e:	f000 faff 	bl	8007220 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c22:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <xTimerCreateTimerTask+0x80>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d021      	beq.n	8006c6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c32:	1d3a      	adds	r2, r7, #4
 8006c34:	f107 0108 	add.w	r1, r7, #8
 8006c38:	f107 030c 	add.w	r3, r7, #12
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fb61 	bl	8005304 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	9202      	str	r2, [sp, #8]
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	2300      	movs	r3, #0
 8006c52:	460a      	mov	r2, r1
 8006c54:	4910      	ldr	r1, [pc, #64]	; (8006c98 <xTimerCreateTimerTask+0x84>)
 8006c56:	4811      	ldr	r0, [pc, #68]	; (8006c9c <xTimerCreateTimerTask+0x88>)
 8006c58:	f7ff f8f6 	bl	8005e48 <xTaskCreateStatic>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <xTimerCreateTimerTask+0x8c>)
 8006c60:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c62:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <xTimerCreateTimerTask+0x8c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d109      	bne.n	8006c88 <xTimerCreateTimerTask+0x74>
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	e7fe      	b.n	8006c86 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006c88:	697b      	ldr	r3, [r7, #20]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	2000363c 	.word	0x2000363c
 8006c98:	0802c840 	.word	0x0802c840
 8006c9c:	08006dd5 	.word	0x08006dd5
 8006ca0:	20003640 	.word	0x20003640

08006ca4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	; 0x28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d109      	bne.n	8006cd0 <xTimerGenericCommand+0x2c>
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	623b      	str	r3, [r7, #32]
 8006cce:	e7fe      	b.n	8006cce <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cd0:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <xTimerGenericCommand+0x94>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d02a      	beq.n	8006d2e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b05      	cmp	r3, #5
 8006ce8:	dc18      	bgt.n	8006d1c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cea:	f7ff feb5 	bl	8006a58 <xTaskGetSchedulerState>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d109      	bne.n	8006d08 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cf4:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <xTimerGenericCommand+0x94>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	f107 0110 	add.w	r1, r7, #16
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d00:	f7fe fccc 	bl	800569c <xQueueGenericSend>
 8006d04:	6278      	str	r0, [r7, #36]	; 0x24
 8006d06:	e012      	b.n	8006d2e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <xTimerGenericCommand+0x94>)
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	f107 0110 	add.w	r1, r7, #16
 8006d10:	2300      	movs	r3, #0
 8006d12:	2200      	movs	r2, #0
 8006d14:	f7fe fcc2 	bl	800569c <xQueueGenericSend>
 8006d18:	6278      	str	r0, [r7, #36]	; 0x24
 8006d1a:	e008      	b.n	8006d2e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <xTimerGenericCommand+0x94>)
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	f107 0110 	add.w	r1, r7, #16
 8006d24:	2300      	movs	r3, #0
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	f7fe fdb2 	bl	8005890 <xQueueGenericSendFromISR>
 8006d2c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3728      	adds	r7, #40	; 0x28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	2000363c 	.word	0x2000363c

08006d3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d46:	4b22      	ldr	r3, [pc, #136]	; (8006dd0 <prvProcessExpiredTimer+0x94>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe fb79 	bl	800544c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d021      	beq.n	8006dac <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	18d1      	adds	r1, r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	6978      	ldr	r0, [r7, #20]
 8006d76:	f000 f8d1 	bl	8006f1c <prvInsertTimerInActiveList>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01e      	beq.n	8006dbe <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d80:	2300      	movs	r3, #0
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	6978      	ldr	r0, [r7, #20]
 8006d8c:	f7ff ff8a 	bl	8006ca4 <xTimerGenericCommand>
 8006d90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d112      	bne.n	8006dbe <prvProcessExpiredTimer+0x82>
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	e7fe      	b.n	8006daa <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	6978      	ldr	r0, [r7, #20]
 8006dc4:	4798      	blx	r3
}
 8006dc6:	bf00      	nop
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20003634 	.word	0x20003634

08006dd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ddc:	f107 0308 	add.w	r3, r7, #8
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 f857 	bl	8006e94 <prvGetNextExpireTime>
 8006de6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4619      	mov	r1, r3
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f803 	bl	8006df8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006df2:	f000 f8d5 	bl	8006fa0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006df6:	e7f1      	b.n	8006ddc <prvTimerTask+0x8>

08006df8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e02:	f7ff fa57 	bl	80062b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e06:	f107 0308 	add.w	r3, r7, #8
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 f866 	bl	8006edc <prvSampleTimeNow>
 8006e10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d130      	bne.n	8006e7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <prvProcessTimerOrBlockTask+0x3c>
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d806      	bhi.n	8006e34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e26:	f7ff fa53 	bl	80062d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff ff85 	bl	8006d3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e32:	e024      	b.n	8006e7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d008      	beq.n	8006e4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e3a:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <prvProcessTimerOrBlockTask+0x90>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <prvProcessTimerOrBlockTask+0x50>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <prvProcessTimerOrBlockTask+0x52>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e4c:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <prvProcessTimerOrBlockTask+0x94>)
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f7fe ffc1 	bl	8005de0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e5e:	f7ff fa37 	bl	80062d0 <xTaskResumeAll>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e68:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <prvProcessTimerOrBlockTask+0x98>)
 8006e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	f3bf 8f6f 	isb	sy
}
 8006e78:	e001      	b.n	8006e7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e7a:	f7ff fa29 	bl	80062d0 <xTaskResumeAll>
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20003638 	.word	0x20003638
 8006e8c:	2000363c 	.word	0x2000363c
 8006e90:	e000ed04 	.word	0xe000ed04

08006e94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <prvGetNextExpireTime+0x44>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <prvGetNextExpireTime+0x16>
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	e000      	b.n	8006eac <prvGetNextExpireTime+0x18>
 8006eaa:	2200      	movs	r2, #0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d105      	bne.n	8006ec4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006eb8:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <prvGetNextExpireTime+0x44>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	e001      	b.n	8006ec8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	20003634 	.word	0x20003634

08006edc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ee4:	f7ff fa90 	bl	8006408 <xTaskGetTickCount>
 8006ee8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <prvSampleTimeNow+0x3c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d205      	bcs.n	8006f00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ef4:	f000 f930 	bl	8007158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e002      	b.n	8006f06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f06:	4a04      	ldr	r2, [pc, #16]	; (8006f18 <prvSampleTimeNow+0x3c>)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20003644 	.word	0x20003644

08006f1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d812      	bhi.n	8006f68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d302      	bcc.n	8006f56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f50:	2301      	movs	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e01b      	b.n	8006f8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f56:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <prvInsertTimerInActiveList+0x7c>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7fe fa3a 	bl	80053da <vListInsert>
 8006f66:	e012      	b.n	8006f8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d206      	bcs.n	8006f7e <prvInsertTimerInActiveList+0x62>
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d302      	bcc.n	8006f7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e007      	b.n	8006f8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f7e:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <prvInsertTimerInActiveList+0x80>)
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f7fe fa26 	bl	80053da <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f8e:	697b      	ldr	r3, [r7, #20]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	20003638 	.word	0x20003638
 8006f9c:	20003634 	.word	0x20003634

08006fa0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08e      	sub	sp, #56	; 0x38
 8006fa4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fa6:	e0c6      	b.n	8007136 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	da17      	bge.n	8006fde <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fae:	1d3b      	adds	r3, r7, #4
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d109      	bne.n	8006fce <prvProcessReceivedCommands+0x2e>
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	e7fe      	b.n	8006fcc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd4:	6850      	ldr	r0, [r2, #4]
 8006fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd8:	6892      	ldr	r2, [r2, #8]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f2c0 80a7 	blt.w	8007134 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fa28 	bl	800544c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7ff ff6c 	bl	8006edc <prvSampleTimeNow>
 8007004:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b09      	cmp	r3, #9
 800700a:	f200 8094 	bhi.w	8007136 <prvProcessReceivedCommands+0x196>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <prvProcessReceivedCommands+0x74>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	0800703d 	.word	0x0800703d
 8007018:	0800703d 	.word	0x0800703d
 800701c:	0800703d 	.word	0x0800703d
 8007020:	080070af 	.word	0x080070af
 8007024:	080070c3 	.word	0x080070c3
 8007028:	0800710b 	.word	0x0800710b
 800702c:	0800703d 	.word	0x0800703d
 8007030:	0800703d 	.word	0x0800703d
 8007034:	080070af 	.word	0x080070af
 8007038:	080070c3 	.word	0x080070c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	18d1      	adds	r1, r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800705a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800705c:	f7ff ff5e 	bl	8006f1c <prvInsertTimerInActiveList>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d067      	beq.n	8007136 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d05c      	beq.n	8007136 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	441a      	add	r2, r3
 8007084:	2300      	movs	r3, #0
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	2300      	movs	r3, #0
 800708a:	2100      	movs	r1, #0
 800708c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800708e:	f7ff fe09 	bl	8006ca4 <xTimerGenericCommand>
 8007092:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d14d      	bne.n	8007136 <prvProcessReceivedCommands+0x196>
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	e7fe      	b.n	80070ac <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b4:	f023 0301 	bic.w	r3, r3, #1
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80070c0:	e039      	b.n	8007136 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <prvProcessReceivedCommands+0x156>
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	e7fe      	b.n	80070f4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	18d1      	adds	r1, r2, r3
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007104:	f7ff ff0a 	bl	8006f1c <prvInsertTimerInActiveList>
					break;
 8007108:	e015      	b.n	8007136 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711a:	f000 fbc3 	bl	80078a4 <vPortFree>
 800711e:	e00a      	b.n	8007136 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007126:	f023 0301 	bic.w	r3, r3, #1
 800712a:	b2da      	uxtb	r2, r3
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007132:	e000      	b.n	8007136 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007134:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <prvProcessReceivedCommands+0x1b4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	1d39      	adds	r1, r7, #4
 800713c:	2200      	movs	r2, #0
 800713e:	4618      	mov	r0, r3
 8007140:	f7fe fc3a 	bl	80059b8 <xQueueReceive>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	f47f af2e 	bne.w	8006fa8 <prvProcessReceivedCommands+0x8>
	}
}
 800714c:	bf00      	nop
 800714e:	3730      	adds	r7, #48	; 0x30
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	2000363c 	.word	0x2000363c

08007158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800715e:	e047      	b.n	80071f0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007160:	4b2d      	ldr	r3, [pc, #180]	; (8007218 <prvSwitchTimerLists+0xc0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716a:	4b2b      	ldr	r3, [pc, #172]	; (8007218 <prvSwitchTimerLists+0xc0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3304      	adds	r3, #4
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe f967 	bl	800544c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d02d      	beq.n	80071f0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4413      	add	r3, r2
 800719c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d90e      	bls.n	80071c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071b2:	4b19      	ldr	r3, [pc, #100]	; (8007218 <prvSwitchTimerLists+0xc0>)
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f7fe f90c 	bl	80053da <vListInsert>
 80071c2:	e015      	b.n	80071f0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071c4:	2300      	movs	r3, #0
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	2300      	movs	r3, #0
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	2100      	movs	r1, #0
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fd68 	bl	8006ca4 <xTimerGenericCommand>
 80071d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d109      	bne.n	80071f0 <prvSwitchTimerLists+0x98>
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	e7fe      	b.n	80071ee <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071f0:	4b09      	ldr	r3, [pc, #36]	; (8007218 <prvSwitchTimerLists+0xc0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1b2      	bne.n	8007160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071fa:	4b07      	ldr	r3, [pc, #28]	; (8007218 <prvSwitchTimerLists+0xc0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <prvSwitchTimerLists+0xc4>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a04      	ldr	r2, [pc, #16]	; (8007218 <prvSwitchTimerLists+0xc0>)
 8007206:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007208:	4a04      	ldr	r2, [pc, #16]	; (800721c <prvSwitchTimerLists+0xc4>)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	6013      	str	r3, [r2, #0]
}
 800720e:	bf00      	nop
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20003634 	.word	0x20003634
 800721c:	20003638 	.word	0x20003638

08007220 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007226:	f000 f961 	bl	80074ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800722a:	4b15      	ldr	r3, [pc, #84]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d120      	bne.n	8007274 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007232:	4814      	ldr	r0, [pc, #80]	; (8007284 <prvCheckForValidListAndQueue+0x64>)
 8007234:	f7fe f880 	bl	8005338 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007238:	4813      	ldr	r0, [pc, #76]	; (8007288 <prvCheckForValidListAndQueue+0x68>)
 800723a:	f7fe f87d 	bl	8005338 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <prvCheckForValidListAndQueue+0x6c>)
 8007240:	4a10      	ldr	r2, [pc, #64]	; (8007284 <prvCheckForValidListAndQueue+0x64>)
 8007242:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007244:	4b12      	ldr	r3, [pc, #72]	; (8007290 <prvCheckForValidListAndQueue+0x70>)
 8007246:	4a10      	ldr	r2, [pc, #64]	; (8007288 <prvCheckForValidListAndQueue+0x68>)
 8007248:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800724a:	2300      	movs	r3, #0
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <prvCheckForValidListAndQueue+0x74>)
 8007250:	4a11      	ldr	r2, [pc, #68]	; (8007298 <prvCheckForValidListAndQueue+0x78>)
 8007252:	2110      	movs	r1, #16
 8007254:	200a      	movs	r0, #10
 8007256:	f7fe f98b 	bl	8005570 <xQueueGenericCreateStatic>
 800725a:	4602      	mov	r2, r0
 800725c:	4b08      	ldr	r3, [pc, #32]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 800725e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	490b      	ldr	r1, [pc, #44]	; (800729c <prvCheckForValidListAndQueue+0x7c>)
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fd8e 	bl	8005d90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007274:	f000 f968 	bl	8007548 <vPortExitCritical>
}
 8007278:	bf00      	nop
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2000363c 	.word	0x2000363c
 8007284:	2000360c 	.word	0x2000360c
 8007288:	20003620 	.word	0x20003620
 800728c:	20003634 	.word	0x20003634
 8007290:	20003638 	.word	0x20003638
 8007294:	200036e8 	.word	0x200036e8
 8007298:	20003648 	.word	0x20003648
 800729c:	0802c848 	.word	0x0802c848

080072a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3b04      	subs	r3, #4
 80072b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3b04      	subs	r3, #4
 80072be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0201 	bic.w	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072d0:	4a0c      	ldr	r2, [pc, #48]	; (8007304 <pxPortInitialiseStack+0x64>)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3b14      	subs	r3, #20
 80072da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f06f 0202 	mvn.w	r2, #2
 80072ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3b20      	subs	r3, #32
 80072f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072f6:	68fb      	ldr	r3, [r7, #12]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	08007309 	.word	0x08007309

08007308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007312:	4b11      	ldr	r3, [pc, #68]	; (8007358 <prvTaskExitError+0x50>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800731a:	d009      	beq.n	8007330 <prvTaskExitError+0x28>
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	e7fe      	b.n	800732e <prvTaskExitError+0x26>
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007342:	bf00      	nop
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0fc      	beq.n	8007344 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	2000000c 	.word	0x2000000c
 800735c:	00000000 	.word	0x00000000

08007360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <pxCurrentTCBConst2>)
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	6808      	ldr	r0, [r1, #0]
 8007366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736a:	f380 8809 	msr	PSP, r0
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f380 8811 	msr	BASEPRI, r0
 800737a:	4770      	bx	lr
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst2>:
 8007380:	2000310c 	.word	0x2000310c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007388:	4808      	ldr	r0, [pc, #32]	; (80073ac <prvPortStartFirstTask+0x24>)
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	6800      	ldr	r0, [r0, #0]
 800738e:	f380 8808 	msr	MSP, r0
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8814 	msr	CONTROL, r0
 800739a:	b662      	cpsie	i
 800739c:	b661      	cpsie	f
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	df00      	svc	0
 80073a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073aa:	bf00      	nop
 80073ac:	e000ed08 	.word	0xe000ed08

080073b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073b6:	4b44      	ldr	r3, [pc, #272]	; (80074c8 <xPortStartScheduler+0x118>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a44      	ldr	r2, [pc, #272]	; (80074cc <xPortStartScheduler+0x11c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d109      	bne.n	80073d4 <xPortStartScheduler+0x24>
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	e7fe      	b.n	80073d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073d4:	4b3c      	ldr	r3, [pc, #240]	; (80074c8 <xPortStartScheduler+0x118>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a3d      	ldr	r2, [pc, #244]	; (80074d0 <xPortStartScheduler+0x120>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d109      	bne.n	80073f2 <xPortStartScheduler+0x42>
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e7fe      	b.n	80073f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073f2:	4b38      	ldr	r3, [pc, #224]	; (80074d4 <xPortStartScheduler+0x124>)
 80073f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	22ff      	movs	r2, #255	; 0xff
 8007402:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007414:	b2da      	uxtb	r2, r3
 8007416:	4b30      	ldr	r3, [pc, #192]	; (80074d8 <xPortStartScheduler+0x128>)
 8007418:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800741a:	4b30      	ldr	r3, [pc, #192]	; (80074dc <xPortStartScheduler+0x12c>)
 800741c:	2207      	movs	r2, #7
 800741e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007420:	e009      	b.n	8007436 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007422:	4b2e      	ldr	r3, [pc, #184]	; (80074dc <xPortStartScheduler+0x12c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3b01      	subs	r3, #1
 8007428:	4a2c      	ldr	r2, [pc, #176]	; (80074dc <xPortStartScheduler+0x12c>)
 800742a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	b2db      	uxtb	r3, r3
 8007434:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743e:	2b80      	cmp	r3, #128	; 0x80
 8007440:	d0ef      	beq.n	8007422 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007442:	4b26      	ldr	r3, [pc, #152]	; (80074dc <xPortStartScheduler+0x12c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f1c3 0307 	rsb	r3, r3, #7
 800744a:	2b04      	cmp	r3, #4
 800744c:	d009      	beq.n	8007462 <xPortStartScheduler+0xb2>
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	e7fe      	b.n	8007460 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007462:	4b1e      	ldr	r3, [pc, #120]	; (80074dc <xPortStartScheduler+0x12c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	4a1c      	ldr	r2, [pc, #112]	; (80074dc <xPortStartScheduler+0x12c>)
 800746a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800746c:	4b1b      	ldr	r3, [pc, #108]	; (80074dc <xPortStartScheduler+0x12c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007474:	4a19      	ldr	r2, [pc, #100]	; (80074dc <xPortStartScheduler+0x12c>)
 8007476:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	b2da      	uxtb	r2, r3
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007480:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <xPortStartScheduler+0x130>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <xPortStartScheduler+0x130>)
 8007486:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800748a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800748c:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <xPortStartScheduler+0x130>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <xPortStartScheduler+0x130>)
 8007492:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007496:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007498:	f000 f8d6 	bl	8007648 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800749c:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <xPortStartScheduler+0x134>)
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074a2:	f000 f8f5 	bl	8007690 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <xPortStartScheduler+0x138>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a0f      	ldr	r2, [pc, #60]	; (80074e8 <xPortStartScheduler+0x138>)
 80074ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074b2:	f7ff ff69 	bl	8007388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074b6:	f7ff f86f 	bl	8006598 <vTaskSwitchContext>
	prvTaskExitError();
 80074ba:	f7ff ff25 	bl	8007308 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	e000ed00 	.word	0xe000ed00
 80074cc:	410fc271 	.word	0x410fc271
 80074d0:	410fc270 	.word	0x410fc270
 80074d4:	e000e400 	.word	0xe000e400
 80074d8:	20003738 	.word	0x20003738
 80074dc:	2000373c 	.word	0x2000373c
 80074e0:	e000ed20 	.word	0xe000ed20
 80074e4:	2000000c 	.word	0x2000000c
 80074e8:	e000ef34 	.word	0xe000ef34

080074ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007504:	4b0e      	ldr	r3, [pc, #56]	; (8007540 <vPortEnterCritical+0x54>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	4a0d      	ldr	r2, [pc, #52]	; (8007540 <vPortEnterCritical+0x54>)
 800750c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <vPortEnterCritical+0x54>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d10e      	bne.n	8007534 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <vPortEnterCritical+0x58>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <vPortEnterCritical+0x48>
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	e7fe      	b.n	8007532 <vPortEnterCritical+0x46>
	}
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	2000000c 	.word	0x2000000c
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800754e:	4b11      	ldr	r3, [pc, #68]	; (8007594 <vPortExitCritical+0x4c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <vPortExitCritical+0x22>
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	607b      	str	r3, [r7, #4]
 8007568:	e7fe      	b.n	8007568 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800756a:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <vPortExitCritical+0x4c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3b01      	subs	r3, #1
 8007570:	4a08      	ldr	r2, [pc, #32]	; (8007594 <vPortExitCritical+0x4c>)
 8007572:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007574:	4b07      	ldr	r3, [pc, #28]	; (8007594 <vPortExitCritical+0x4c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d104      	bne.n	8007586 <vPortExitCritical+0x3e>
 800757c:	2300      	movs	r3, #0
 800757e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	2000000c 	.word	0x2000000c
	...

080075a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075a0:	f3ef 8009 	mrs	r0, PSP
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	4b15      	ldr	r3, [pc, #84]	; (8007600 <pxCurrentTCBConst>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	f01e 0f10 	tst.w	lr, #16
 80075b0:	bf08      	it	eq
 80075b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	6010      	str	r0, [r2, #0]
 80075bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075c4:	f380 8811 	msr	BASEPRI, r0
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f7fe ffe2 	bl	8006598 <vTaskSwitchContext>
 80075d4:	f04f 0000 	mov.w	r0, #0
 80075d8:	f380 8811 	msr	BASEPRI, r0
 80075dc:	bc09      	pop	{r0, r3}
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	6808      	ldr	r0, [r1, #0]
 80075e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e6:	f01e 0f10 	tst.w	lr, #16
 80075ea:	bf08      	it	eq
 80075ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075f0:	f380 8809 	msr	PSP, r0
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	f3af 8000 	nop.w

08007600 <pxCurrentTCBConst>:
 8007600:	2000310c 	.word	0x2000310c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop

08007608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007620:	f7fe ff02 	bl	8006428 <xTaskIncrementTick>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800762a:	4b06      	ldr	r3, [pc, #24]	; (8007644 <SysTick_Handler+0x3c>)
 800762c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	2300      	movs	r3, #0
 8007634:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <vPortSetupTimerInterrupt+0x34>)
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007652:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <vPortSetupTimerInterrupt+0x38>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <vPortSetupTimerInterrupt+0x3c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a0a      	ldr	r2, [pc, #40]	; (8007688 <vPortSetupTimerInterrupt+0x40>)
 800765e:	fba2 2303 	umull	r2, r3, r2, r3
 8007662:	099b      	lsrs	r3, r3, #6
 8007664:	4a09      	ldr	r2, [pc, #36]	; (800768c <vPortSetupTimerInterrupt+0x44>)
 8007666:	3b01      	subs	r3, #1
 8007668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800766a:	4b04      	ldr	r3, [pc, #16]	; (800767c <vPortSetupTimerInterrupt+0x34>)
 800766c:	2207      	movs	r2, #7
 800766e:	601a      	str	r2, [r3, #0]
}
 8007670:	bf00      	nop
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	e000e010 	.word	0xe000e010
 8007680:	e000e018 	.word	0xe000e018
 8007684:	20000000 	.word	0x20000000
 8007688:	10624dd3 	.word	0x10624dd3
 800768c:	e000e014 	.word	0xe000e014

08007690 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007690:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076a0 <vPortEnableVFP+0x10>
 8007694:	6801      	ldr	r1, [r0, #0]
 8007696:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800769a:	6001      	str	r1, [r0, #0]
 800769c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800769e:	bf00      	nop
 80076a0:	e000ed88 	.word	0xe000ed88

080076a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076aa:	f3ef 8305 	mrs	r3, IPSR
 80076ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b0f      	cmp	r3, #15
 80076b4:	d913      	bls.n	80076de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076b6:	4a16      	ldr	r2, [pc, #88]	; (8007710 <vPortValidateInterruptPriority+0x6c>)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076c0:	4b14      	ldr	r3, [pc, #80]	; (8007714 <vPortValidateInterruptPriority+0x70>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	7afa      	ldrb	r2, [r7, #11]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d209      	bcs.n	80076de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	e7fe      	b.n	80076dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076de:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <vPortValidateInterruptPriority+0x74>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <vPortValidateInterruptPriority+0x78>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d909      	bls.n	8007702 <vPortValidateInterruptPriority+0x5e>
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	e7fe      	b.n	8007700 <vPortValidateInterruptPriority+0x5c>
	}
 8007702:	bf00      	nop
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	e000e3f0 	.word	0xe000e3f0
 8007714:	20003738 	.word	0x20003738
 8007718:	e000ed0c 	.word	0xe000ed0c
 800771c:	2000373c 	.word	0x2000373c

08007720 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	; 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800772c:	f7fe fdc2 	bl	80062b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007730:	4b57      	ldr	r3, [pc, #348]	; (8007890 <pvPortMalloc+0x170>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007738:	f000 f90c 	bl	8007954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800773c:	4b55      	ldr	r3, [pc, #340]	; (8007894 <pvPortMalloc+0x174>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4013      	ands	r3, r2
 8007744:	2b00      	cmp	r3, #0
 8007746:	f040 808c 	bne.w	8007862 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01c      	beq.n	800778a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007750:	2208      	movs	r2, #8
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	2b00      	cmp	r3, #0
 8007760:	d013      	beq.n	800778a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f023 0307 	bic.w	r3, r3, #7
 8007768:	3308      	adds	r3, #8
 800776a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <pvPortMalloc+0x6a>
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e7fe      	b.n	8007788 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d068      	beq.n	8007862 <pvPortMalloc+0x142>
 8007790:	4b41      	ldr	r3, [pc, #260]	; (8007898 <pvPortMalloc+0x178>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	d863      	bhi.n	8007862 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800779a:	4b40      	ldr	r3, [pc, #256]	; (800789c <pvPortMalloc+0x17c>)
 800779c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800779e:	4b3f      	ldr	r3, [pc, #252]	; (800789c <pvPortMalloc+0x17c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077a4:	e004      	b.n	80077b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d903      	bls.n	80077c2 <pvPortMalloc+0xa2>
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f1      	bne.n	80077a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077c2:	4b33      	ldr	r3, [pc, #204]	; (8007890 <pvPortMalloc+0x170>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d04a      	beq.n	8007862 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2208      	movs	r2, #8
 80077d2:	4413      	add	r3, r2
 80077d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	1ad2      	subs	r2, r2, r3
 80077e6:	2308      	movs	r3, #8
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d91e      	bls.n	800782c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <pvPortMalloc+0xf4>
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	e7fe      	b.n	8007812 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	1ad2      	subs	r2, r2, r3
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007826:	69b8      	ldr	r0, [r7, #24]
 8007828:	f000 f8f6 	bl	8007a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800782c:	4b1a      	ldr	r3, [pc, #104]	; (8007898 <pvPortMalloc+0x178>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	4a18      	ldr	r2, [pc, #96]	; (8007898 <pvPortMalloc+0x178>)
 8007838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800783a:	4b17      	ldr	r3, [pc, #92]	; (8007898 <pvPortMalloc+0x178>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4b18      	ldr	r3, [pc, #96]	; (80078a0 <pvPortMalloc+0x180>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d203      	bcs.n	800784e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007846:	4b14      	ldr	r3, [pc, #80]	; (8007898 <pvPortMalloc+0x178>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <pvPortMalloc+0x180>)
 800784c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	4b10      	ldr	r3, [pc, #64]	; (8007894 <pvPortMalloc+0x174>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	431a      	orrs	r2, r3
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007862:	f7fe fd35 	bl	80062d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <pvPortMalloc+0x164>
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e7fe      	b.n	8007882 <pvPortMalloc+0x162>
	return pvReturn;
 8007884:	69fb      	ldr	r3, [r7, #28]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3728      	adds	r7, #40	; 0x28
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20017748 	.word	0x20017748
 8007894:	20017754 	.word	0x20017754
 8007898:	2001774c 	.word	0x2001774c
 800789c:	20017740 	.word	0x20017740
 80078a0:	20017750 	.word	0x20017750

080078a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d046      	beq.n	8007944 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078b6:	2308      	movs	r3, #8
 80078b8:	425b      	negs	r3, r3
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	4413      	add	r3, r2
 80078be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	4b20      	ldr	r3, [pc, #128]	; (800794c <vPortFree+0xa8>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4013      	ands	r3, r2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <vPortFree+0x42>
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e7fe      	b.n	80078e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <vPortFree+0x5e>
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	60bb      	str	r3, [r7, #8]
 8007900:	e7fe      	b.n	8007900 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	4b11      	ldr	r3, [pc, #68]	; (800794c <vPortFree+0xa8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4013      	ands	r3, r2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d019      	beq.n	8007944 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d115      	bne.n	8007944 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	4b0b      	ldr	r3, [pc, #44]	; (800794c <vPortFree+0xa8>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	43db      	mvns	r3, r3
 8007922:	401a      	ands	r2, r3
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007928:	f7fe fcc4 	bl	80062b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <vPortFree+0xac>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4413      	add	r3, r2
 8007936:	4a06      	ldr	r2, [pc, #24]	; (8007950 <vPortFree+0xac>)
 8007938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800793a:	6938      	ldr	r0, [r7, #16]
 800793c:	f000 f86c 	bl	8007a18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007940:	f7fe fcc6 	bl	80062d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007944:	bf00      	nop
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20017754 	.word	0x20017754
 8007950:	2001774c 	.word	0x2001774c

08007954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800795a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
 800795e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007960:	4b27      	ldr	r3, [pc, #156]	; (8007a00 <prvHeapInit+0xac>)
 8007962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00c      	beq.n	8007988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3307      	adds	r3, #7
 8007972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0307 	bic.w	r3, r3, #7
 800797a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	4a1f      	ldr	r2, [pc, #124]	; (8007a00 <prvHeapInit+0xac>)
 8007984:	4413      	add	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800798c:	4a1d      	ldr	r2, [pc, #116]	; (8007a04 <prvHeapInit+0xb0>)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007992:	4b1c      	ldr	r3, [pc, #112]	; (8007a04 <prvHeapInit+0xb0>)
 8007994:	2200      	movs	r2, #0
 8007996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079a0:	2208      	movs	r2, #8
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	1a9b      	subs	r3, r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0307 	bic.w	r3, r3, #7
 80079ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4a15      	ldr	r2, [pc, #84]	; (8007a08 <prvHeapInit+0xb4>)
 80079b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <prvHeapInit+0xb4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2200      	movs	r2, #0
 80079bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079be:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <prvHeapInit+0xb4>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079d4:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <prvHeapInit+0xb4>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	4a0a      	ldr	r2, [pc, #40]	; (8007a0c <prvHeapInit+0xb8>)
 80079e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <prvHeapInit+0xbc>)
 80079ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079ec:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <prvHeapInit+0xc0>)
 80079ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079f2:	601a      	str	r2, [r3, #0]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	20003740 	.word	0x20003740
 8007a04:	20017740 	.word	0x20017740
 8007a08:	20017748 	.word	0x20017748
 8007a0c:	20017750 	.word	0x20017750
 8007a10:	2001774c 	.word	0x2001774c
 8007a14:	20017754 	.word	0x20017754

08007a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a20:	4b28      	ldr	r3, [pc, #160]	; (8007ac4 <prvInsertBlockIntoFreeList+0xac>)
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e002      	b.n	8007a2c <prvInsertBlockIntoFreeList+0x14>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d8f7      	bhi.n	8007a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	4413      	add	r3, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d108      	bne.n	8007a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	441a      	add	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	441a      	add	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d118      	bne.n	8007aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d00d      	beq.n	8007a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	e008      	b.n	8007aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a96:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e003      	b.n	8007aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d002      	beq.n	8007ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	20017740 	.word	0x20017740
 8007ac8:	20017748 	.word	0x20017748

08007acc <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <lv_disp_get_scr_act+0x14>
 8007ada:	f00d fb2b 	bl	8015134 <lv_disp_get_default>
 8007ade:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e001      	b.n	8007aee <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <lv_disp_get_layer_top+0x14>
 8007b04:	f00d fb16 	bl	8015134 <lv_disp_get_default>
 8007b08:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	e001      	b.n	8007b18 <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <lv_disp_get_layer_sys+0x14>
 8007b2e:	f00d fb01 	bl	8015134 <lv_disp_get_default>
 8007b32:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e001      	b.n	8007b42 <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <lv_group_init>:

/**
 * Init. the group module
 */
void lv_group_init(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8007b50:	2160      	movs	r1, #96	; 0x60
 8007b52:	4802      	ldr	r0, [pc, #8]	; (8007b5c <lv_group_init+0x10>)
 8007b54:	f00e fa00 	bl	8015f58 <lv_ll_init>
}
 8007b58:	bf00      	nop
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	2001bb90 	.word	0x2001bb90

08007b60 <lv_group_add_obj>:
 * Add an object to a group
 * @param group pointer to a group
 * @param obj pointer to an object to add
 */
void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d040      	beq.n	8007bf2 <lv_group_add_obj+0x92>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    LV_LL_READ(group->obj_ll, obj_i)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f00e fb72 	bl	801625c <lv_ll_get_head>
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	e00a      	b.n	8007b92 <lv_group_add_obj+0x32>
    {
        if((*obj_i) == obj) {
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d037      	beq.n	8007bf6 <lv_group_add_obj+0x96>
    LV_LL_READ(group->obj_ll, obj_i)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68f9      	ldr	r1, [r7, #12]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f00e fb8c 	bl	80162a8 <lv_ll_get_next>
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1f1      	bne.n	8007b7c <lv_group_add_obj+0x1c>
            return;
        }
    }

    /*If the object is already in a group and focused then defocus it*/
    if(obj->group_p) {
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <lv_group_add_obj+0x56>
        if(lv_obj_is_focused(obj)) {
 8007ba0:	6838      	ldr	r0, [r7, #0]
 8007ba2:	f002 f952 	bl	8009e4a <lv_obj_is_focused>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d004      	beq.n	8007bb6 <lv_group_add_obj+0x56>
            lv_group_refocus(obj->group_p);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f953 	bl	8007e5c <lv_group_refocus>

            LV_LOG_INFO("lv_group_add_obj: assign object to an other group");
        }
    }

    obj->group_p     = group;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	62da      	str	r2, [r3, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f00e fa65 	bl	801608e <lv_ll_ins_tail>
 8007bc4:	60b8      	str	r0, [r7, #8]
    lv_mem_assert(next);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d100      	bne.n	8007bce <lv_group_add_obj+0x6e>
 8007bcc:	e7fe      	b.n	8007bcc <lv_group_add_obj+0x6c>
    if(next == NULL) return;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d012      	beq.n	8007bfa <lv_group_add_obj+0x9a>
    *next = obj;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	601a      	str	r2, [r3, #0]

    /* If the head and the tail is equal then there is only one object in the linked list.
     * In this case automatically activate it*/
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f00e fb3d 	bl	801625c <lv_ll_get_head>
 8007be2:	4602      	mov	r2, r0
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d108      	bne.n	8007bfc <lv_group_add_obj+0x9c>
        lv_group_refocus(group);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f936 	bl	8007e5c <lv_group_refocus>
 8007bf0:	e004      	b.n	8007bfc <lv_group_add_obj+0x9c>
    if(group == NULL) return;
 8007bf2:	bf00      	nop
 8007bf4:	e002      	b.n	8007bfc <lv_group_add_obj+0x9c>
            return;
 8007bf6:	bf00      	nop
 8007bf8:	e000      	b.n	8007bfc <lv_group_add_obj+0x9c>
    if(next == NULL) return;
 8007bfa:	bf00      	nop
    }
}
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <lv_group_remove_obj>:
/**
 * Remove an object from its group
 * @param obj pointer to an object to remove
 */
void lv_group_remove_obj(lv_obj_t * obj)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
    lv_group_t * g = obj->group_p;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	60bb      	str	r3, [r7, #8]
    if(g == NULL) return;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d053      	beq.n	8007cbe <lv_group_remove_obj+0xbc>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d051      	beq.n	8007cc2 <lv_group_remove_obj+0xc0>

    /*Focus on the next object*/
    if(*g->obj_focus == obj) {
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d11f      	bne.n	8007c6a <lv_group_remove_obj+0x68>
        /*If this is the only object in the group then focus to nothing.*/
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f00e fb15 	bl	801625c <lv_ll_get_head>
 8007c32:	4602      	mov	r2, r0
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d113      	bne.n	8007c64 <lv_group_remove_obj+0x62>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f00e fb1f 	bl	8016282 <lv_ll_get_tail>
 8007c44:	4602      	mov	r2, r0
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d10a      	bne.n	8007c64 <lv_group_remove_obj+0x62>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	68d2      	ldr	r2, [r2, #12]
 8007c5a:	6810      	ldr	r0, [r2, #0]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2110      	movs	r1, #16
 8007c60:	4798      	blx	r3
 8007c62:	e002      	b.n	8007c6a <lv_group_remove_obj+0x68>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 8007c64:	68b8      	ldr	r0, [r7, #8]
 8007c66:	f000 f8f9 	bl	8007e5c <lv_group_refocus>
    }

    /* If the focuses object is still the same then it was the only object in the group but it will
     * be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     * zero objects*/
    if(*g->obj_focus == obj) {
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d102      	bne.n	8007c7c <lv_group_remove_obj+0x7a>
        g->obj_focus = NULL;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group */
    lv_obj_t ** i;
    LV_LL_READ(g->obj_ll, i)
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f00e faec 	bl	801625c <lv_ll_get_head>
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	e016      	b.n	8007cb6 <lv_group_remove_obj+0xb4>
    {
        if(*i == obj) {
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d10b      	bne.n	8007caa <lv_group_remove_obj+0xa8>
            lv_ll_rem(&g->obj_ll, i);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	68f9      	ldr	r1, [r7, #12]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f00e fa32 	bl	8016100 <lv_ll_rem>
            lv_mem_free(i);
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f00e fc9d 	bl	80165dc <lv_mem_free>
            obj->group_p = NULL;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8007ca8:	e00c      	b.n	8007cc4 <lv_group_remove_obj+0xc2>
    LV_LL_READ(g->obj_ll, i)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	68f9      	ldr	r1, [r7, #12]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f00e fafa 	bl	80162a8 <lv_ll_get_next>
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <lv_group_remove_obj+0x86>
 8007cbc:	e002      	b.n	8007cc4 <lv_group_remove_obj+0xc2>
    if(g == NULL) return;
 8007cbe:	bf00      	nop
 8007cc0:	e000      	b.n	8007cc4 <lv_group_remove_obj+0xc2>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 8007cc2:	bf00      	nop
        }
    }
}
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <lv_group_focus_next>:
/**
 * Focus the next object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_next(lv_group_t * group)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
    focus_next_core(group, lv_ll_get_head, lv_ll_get_next);
 8007cd4:	4a04      	ldr	r2, [pc, #16]	; (8007ce8 <lv_group_focus_next+0x1c>)
 8007cd6:	4905      	ldr	r1, [pc, #20]	; (8007cec <lv_group_focus_next+0x20>)
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f8f7 	bl	8007ecc <focus_next_core>
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	080162a9 	.word	0x080162a9
 8007cec:	0801625d 	.word	0x0801625d

08007cf0 <lv_group_focus_prev>:
/**
 * Focus the previous object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_prev(lv_group_t * group)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
    focus_next_core(group, lv_ll_get_tail, lv_ll_get_prev);
 8007cf8:	4a04      	ldr	r2, [pc, #16]	; (8007d0c <lv_group_focus_prev+0x1c>)
 8007cfa:	4905      	ldr	r1, [pc, #20]	; (8007d10 <lv_group_focus_prev+0x20>)
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f8e5 	bl	8007ecc <focus_next_core>
}
 8007d02:	bf00      	nop
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	080162dd 	.word	0x080162dd
 8007d10:	08016283 	.word	0x08016283

08007d14 <lv_group_set_editing>:
 * Manually set the current mode (edit or navigate).
 * @param group pointer to group
 * @param edit: true: edit mode; false: navigate mode
 */
void lv_group_set_editing(lv_group_t * group, bool edit)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
    uint8_t en_val = edit ? 1 : 0;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	75fb      	strb	r3, [r7, #23]

    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	461a      	mov	r2, r3
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d028      	beq.n	8007d8a <lv_group_set_editing+0x76>

    group->editing     = en_val;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	b2d9      	uxtb	r1, r3
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8007d46:	f361 0341 	bfi	r3, r1, #1, #1
 8007d4a:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    lv_obj_t * focused = lv_group_get_focused(group);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f851 	bl	8007df6 <lv_group_get_focused>
 8007d54:	6138      	str	r0, [r7, #16]

    if(focused) {
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d012      	beq.n	8007d82 <lv_group_set_editing+0x6e>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	2200      	movs	r2, #0
 8007d62:	210f      	movs	r1, #15
 8007d64:	6938      	ldr	r0, [r7, #16]
 8007d66:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	210c      	movs	r1, #12
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 fdd7 	bl	8009926 <lv_event_send>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]
        if(res != LV_RES_OK) return;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d105      	bne.n	8007d8e <lv_group_set_editing+0x7a>
    }

    lv_obj_invalidate(focused);
 8007d82:	6938      	ldr	r0, [r7, #16]
 8007d84:	f000 fe1d 	bl	80089c2 <lv_obj_invalidate>
 8007d88:	e002      	b.n	8007d90 <lv_group_set_editing+0x7c>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8007d8a:	bf00      	nop
 8007d8c:	e000      	b.n	8007d90 <lv_group_set_editing+0x7c>
        if(res != LV_RES_OK) return;
 8007d8e:	bf00      	nop
}
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <lv_group_mod_style>:
 * @param group pointer to group
 * @param style pointer to a style to modify
 * @return a copy of the input style but modified with the 'style_mod' function
 */
lv_style_t * lv_group_mod_style(lv_group_t * group, const lv_style_t * style)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
    /*Load the current style. It will be modified by the callback*/
    lv_style_copy(&group->style_tmp, style);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	331c      	adds	r3, #28
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f003 faa6 	bl	800b2f8 <lv_style_copy>

    if(group->editing) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <lv_group_mod_style+0x3e>
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d012      	beq.n	8007dea <lv_group_mod_style+0x54>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	321c      	adds	r2, #28
 8007dcc:	4611      	mov	r1, r2
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
 8007dd2:	e00a      	b.n	8007dea <lv_group_mod_style+0x54>
    } else {
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d006      	beq.n	8007dea <lv_group_mod_style+0x54>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	321c      	adds	r2, #28
 8007de4:	4611      	mov	r1, r2
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	4798      	blx	r3
    }
    return &group->style_tmp;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	331c      	adds	r3, #28
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <lv_group_get_focused>:
 * Get the focused object or NULL if there isn't one
 * @param group pointer to a group
 * @return pointer to the focused object
 */
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
    if(!group) return NULL;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <lv_group_get_focused+0x12>
 8007e04:	2300      	movs	r3, #0
 8007e06:	e008      	b.n	8007e1a <lv_group_get_focused+0x24>
    if(group->obj_focus == NULL) return NULL;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <lv_group_get_focused+0x1e>
 8007e10:	2300      	movs	r3, #0
 8007e12:	e002      	b.n	8007e1a <lv_group_get_focused+0x24>

    return *group->obj_focus;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <lv_group_get_editing>:
 * Get the current mode (edit or navigate).
 * @param group pointer to group
 * @return true: edit mode; false: navigate mode
 */
bool lv_group_get_editing(const lv_group_t * group)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <lv_group_get_editing+0x12>
 8007e34:	2300      	movs	r3, #0
 8007e36:	e00b      	b.n	8007e50 <lv_group_get_editing+0x2a>
    return group->editing ? true : false;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bf14      	ite	ne
 8007e4a:	2301      	movne	r3, #1
 8007e4c:	2300      	moveq	r3, #0
 8007e4e:	b2db      	uxtb	r3, r3
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e6a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8007e78:	f043 0310 	orr.w	r3, r3, #16
 8007e7c:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e86:	f003 0308 	and.w	r3, r3, #8
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <lv_group_refocus+0x3c>
        lv_group_focus_next(g);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff ff1b 	bl	8007ccc <lv_group_focus_next>
 8007e96:	e00a      	b.n	8007eae <lv_group_refocus+0x52>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <lv_group_refocus+0x52>
        lv_group_focus_prev(g);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff ff21 	bl	8007cf0 <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	b2d9      	uxtb	r1, r3
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8007ebc:	f361 1304 	bfi	r3, r1, #4, #1
 8007ec0:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
}
 8007ec4:	bf00      	nop
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <focus_next_core>:
    }
}

static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
    if(group->frozen) return;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f040 80a6 	bne.w	8008036 <focus_next_core+0x16a>

    lv_obj_t ** obj_next     = group->obj_focus;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	61fb      	str	r3, [r7, #28]
    lv_obj_t ** obj_sentinel = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]
    bool can_move            = true;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	75fb      	strb	r3, [r7, #23]
    bool can_begin           = true;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	75bb      	strb	r3, [r7, #22]

    for(;;) {
        if(obj_next == NULL) {
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d11b      	bne.n	8007f3a <focus_next_core+0x6e>
            if(group->wrap || obj_sentinel == NULL) {
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <focus_next_core+0x4e>
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f040 8090 	bne.w	800803a <focus_next_core+0x16e>
                if(!can_begin) return;
 8007f1a:	7dbb      	ldrb	r3, [r7, #22]
 8007f1c:	f083 0301 	eor.w	r3, r3, #1
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f040 808b 	bne.w	800803e <focus_next_core+0x172>
                obj_next  = begin(&group->obj_ll);
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4798      	blx	r3
 8007f30:	61f8      	str	r0, [r7, #28]
                can_move  = false;
 8007f32:	2300      	movs	r3, #0
 8007f34:	75fb      	strb	r3, [r7, #23]
                can_begin = false;
 8007f36:	2300      	movs	r3, #0
 8007f38:	75bb      	strb	r3, [r7, #22]
                /*Currently focused object is the last/first in the group, keep it that way*/
                return;
            }
        }

        if(obj_sentinel == NULL) {
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <focus_next_core+0x7e>
            obj_sentinel = obj_next;
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	61bb      	str	r3, [r7, #24]
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d07b      	beq.n	8008042 <focus_next_core+0x176>
        }

        if(can_move) {
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d009      	beq.n	8007f64 <focus_next_core+0x98>
            obj_next = move(&group->obj_ll, obj_next);
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69f9      	ldr	r1, [r7, #28]
 8007f56:	4610      	mov	r0, r2
 8007f58:	4798      	blx	r3
 8007f5a:	61f8      	str	r0, [r7, #28]

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return;
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d070      	beq.n	8008046 <focus_next_core+0x17a>
        }

        can_move = true;
 8007f64:	2301      	movs	r3, #1
 8007f66:	75fb      	strb	r3, [r7, #23]

        if(obj_next == NULL) continue;
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00b      	beq.n	8007f86 <focus_next_core+0xba>

        /*Hidden objects don't receive focus*/
        if(!lv_obj_get_hidden(*obj_next)) break;
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f001 feee 	bl	8009d54 <lv_obj_get_hidden>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f083 0301 	eor.w	r3, r3, #1
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d102      	bne.n	8007f8a <focus_next_core+0xbe>
 8007f84:	e7ba      	b.n	8007efc <focus_next_core+0x30>
        if(obj_next == NULL) continue;
 8007f86:	bf00      	nop
        if(obj_next == NULL) {
 8007f88:	e7b8      	b.n	8007efc <focus_next_core+0x30>
        if(!lv_obj_get_hidden(*obj_next)) break;
 8007f8a:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d059      	beq.n	800804a <focus_next_core+0x17e>

    if(group->obj_focus) {
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01c      	beq.n	8007fd8 <focus_next_core+0x10c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	68d2      	ldr	r2, [r2, #12]
 8007faa:	6810      	ldr	r0, [r2, #0]
 8007fac:	2200      	movs	r2, #0
 8007fae:	2110      	movs	r1, #16
 8007fb0:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	210d      	movs	r1, #13
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 fcb2 	bl	8009926 <lv_event_send>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	757b      	strb	r3, [r7, #21]
        if(res != LV_RES_OK) return;
 8007fc6:	7d7b      	ldrb	r3, [r7, #21]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d140      	bne.n	800804e <focus_next_core+0x182>
        lv_obj_invalidate(*group->obj_focus);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fcf5 	bl	80089c2 <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	60da      	str	r2, [r3, #12]

    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	68d2      	ldr	r2, [r2, #12]
 8007fea:	6810      	ldr	r0, [r2, #0]
 8007fec:	2200      	movs	r2, #0
 8007fee:	210f      	movs	r1, #15
 8007ff0:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	210c      	movs	r1, #12
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 fc92 	bl	8009926 <lv_event_send>
 8008002:	4603      	mov	r3, r0
 8008004:	753b      	strb	r3, [r7, #20]
    if(res != LV_RES_OK) return;
 8008006:	7d3b      	ldrb	r3, [r7, #20]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d122      	bne.n	8008052 <focus_next_core+0x186>

    /*If the object or its parent has `top == true` bring it to the foregorund*/
    obj_to_foreground(*group->obj_focus);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f821 	bl	800805a <obj_to_foreground>

    lv_obj_invalidate(*group->obj_focus);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fccf 	bl	80089c2 <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d013      	beq.n	8008054 <focus_next_core+0x188>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	4798      	blx	r3
 8008034:	e00e      	b.n	8008054 <focus_next_core+0x188>
    if(group->frozen) return;
 8008036:	bf00      	nop
 8008038:	e00c      	b.n	8008054 <focus_next_core+0x188>
                return;
 800803a:	bf00      	nop
 800803c:	e00a      	b.n	8008054 <focus_next_core+0x188>
                if(!can_begin) return;
 800803e:	bf00      	nop
 8008040:	e008      	b.n	8008054 <focus_next_core+0x188>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8008042:	bf00      	nop
 8008044:	e006      	b.n	8008054 <focus_next_core+0x188>
            if(obj_next == obj_sentinel) return;
 8008046:	bf00      	nop
 8008048:	e004      	b.n	8008054 <focus_next_core+0x188>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800804a:	bf00      	nop
 800804c:	e002      	b.n	8008054 <focus_next_core+0x188>
        if(res != LV_RES_OK) return;
 800804e:	bf00      	nop
 8008050:	e000      	b.n	8008054 <focus_next_core+0x188>
    if(res != LV_RES_OK) return;
 8008052:	bf00      	nop
}
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <obj_to_foreground>:

static void obj_to_foreground(lv_obj_t * obj)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	60fb      	str	r3, [r7, #12]
    lv_obj_t * last_top = NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	60bb      	str	r3, [r7, #8]
    while(i != NULL) {
 800806a:	e00d      	b.n	8008088 <obj_to_foreground+0x2e>
        if(i->top != 0) last_top = i;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <obj_to_foreground+0x26>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	60bb      	str	r3, [r7, #8]
        i = lv_obj_get_parent(i);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f001 fd75 	bl	8009b70 <lv_obj_get_parent>
 8008086:	60f8      	str	r0, [r7, #12]
    while(i != NULL) {
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1ee      	bne.n	800806c <obj_to_foreground+0x12>
    }

    if(last_top != NULL) {
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <obj_to_foreground+0x40>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8008094:	68b8      	ldr	r0, [r7, #8]
 8008096:	f000 fd69 	bl	8008b6c <lv_obj_move_foreground>
    }
}
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <lv_indev_init>:

/**
 * Initialize the display input device subsystem
 */
void lv_indev_init(void)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	af00      	add	r7, sp, #0
    lv_indev_reset(NULL); /*Reset all input devices*/
 80080a6:	2000      	movs	r0, #0
 80080a8:	f000 f81f 	bl	80080ea <lv_indev_reset>
}
 80080ac:	bf00      	nop
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <lv_indev_get_act>:
 * Get the currently processed input device. Can be used in action functions too.
 * @return pointer to the currently processed input device or NULL if no input device processing
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
    return indev_act;
 80080b4:	4b03      	ldr	r3, [pc, #12]	; (80080c4 <lv_indev_get_act+0x14>)
 80080b6:	681b      	ldr	r3, [r3, #0]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20017758 	.word	0x20017758

080080c8 <lv_indev_get_type>:
 * Get the type of an input device
 * @param indev pointer to an input device
 * @return the type of the input device from `lv_hal_indev_type_t` (`LV_INDEV_TYPE_...`)
 */
lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <lv_indev_get_type+0x12>
 80080d6:	2300      	movs	r3, #0
 80080d8:	e001      	b.n	80080de <lv_indev_get_type+0x16>

    return indev->driver.type;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	781b      	ldrb	r3, [r3, #0]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <lv_indev_reset>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
    if(indev)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d007      	beq.n	8008108 <lv_indev_reset+0x1e>
        indev->proc.reset_query = 1;
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80080fe:	f043 0302 	orr.w	r3, r3, #2
 8008102:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
        }
    }
}
 8008106:	e012      	b.n	800812e <lv_indev_reset+0x44>
        lv_indev_t * i = lv_indev_get_next(NULL);
 8008108:	2000      	movs	r0, #0
 800810a:	f00d f8d1 	bl	80152b0 <lv_indev_get_next>
 800810e:	60f8      	str	r0, [r7, #12]
        while(i) {
 8008110:	e00a      	b.n	8008128 <lv_indev_reset+0x3e>
            i->proc.reset_query = 1;
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8008118:	f043 0302 	orr.w	r3, r3, #2
 800811c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i = lv_indev_get_next(i);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f00d f8c5 	bl	80152b0 <lv_indev_get_next>
 8008126:	60f8      	str	r0, [r7, #12]
        while(i) {
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1f1      	bne.n	8008112 <lv_indev_reset+0x28>
}
 800812e:	bf00      	nop
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <lv_indev_reset_long_press>:
/**
 * Reset the long press state of an input device
 * @param indev pointer to an input device
 */
void lv_indev_reset_long_press(lv_indev_t * indev)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
    indev->proc.long_pr_sent         = 0;
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8008144:	f36f 0300 	bfc	r3, #0, #1
 8008148:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 800814c:	f00d f8e0 	bl	8015310 <lv_tick_get>
 8008150:	4602      	mov	r2, r0
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	64da      	str	r2, [r3, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 8008156:	f00d f8db 	bl	8015310 <lv_tick_get>
 800815a:	4602      	mov	r2, r0
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <lv_indev_get_point>:
 * Get the last point of an input device (for LV_INDEV_TYPE_POINTER and LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @param point pointer to a point to store the result
 */
void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d00c      	beq.n	8008194 <lv_indev_get_point+0x2c>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b03      	cmp	r3, #3
 8008180:	d008      	beq.n	8008194 <lv_indev_get_point+0x2c>
        point->x = -1;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008188:	801a      	strh	r2, [r3, #0]
        point->y = -1;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008190:	805a      	strh	r2, [r3, #2]
 8008192:	e009      	b.n	80081a8 <lv_indev_get_point+0x40>
    } else {
        point->x = indev->proc.types.pointer.act_point.x;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	801a      	strh	r2, [r3, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	805a      	strh	r2, [r3, #2]
    }
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <lv_indev_is_dragging>:
 * LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @return true: drag is in progress
 */
bool lv_indev_is_dragging(const lv_indev_t * indev)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <lv_indev_is_dragging+0x12>
 80081c2:	2300      	movs	r3, #0
 80081c4:	e014      	b.n	80081f0 <lv_indev_is_dragging+0x3c>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d005      	beq.n	80081da <lv_indev_is_dragging+0x26>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d001      	beq.n	80081da <lv_indev_is_dragging+0x26>
 80081d6:	2300      	movs	r3, #0
 80081d8:	e00a      	b.n	80081f0 <lv_indev_is_dragging+0x3c>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bf14      	ite	ne
 80081ea:	2301      	movne	r3, #1
 80081ec:	2300      	moveq	r3, #0
 80081ee:	b2db      	uxtb	r3, r3
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <lv_indev_get_vect>:
 * LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @param point pointer to a point to store the types.pointer.vector
 */
void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
    if(indev == NULL) {
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <lv_indev_get_vect+0x1e>
        point->x = 0;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	801a      	strh	r2, [r3, #0]
        point->y = 0;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2200      	movs	r2, #0
 8008216:	805a      	strh	r2, [r3, #2]
        return;
 8008218:	e018      	b.n	800824c <lv_indev_get_vect+0x50>
    }

    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d00a      	beq.n	8008238 <lv_indev_get_vect+0x3c>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b03      	cmp	r3, #3
 8008228:	d006      	beq.n	8008238 <lv_indev_get_vect+0x3c>
        point->x = 0;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2200      	movs	r2, #0
 800822e:	801a      	strh	r2, [r3, #0]
        point->y = 0;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2200      	movs	r2, #0
 8008234:	805a      	strh	r2, [r3, #2]
 8008236:	e009      	b.n	800824c <lv_indev_get_vect+0x50>
    } else {
        point->x = indev->proc.types.pointer.vect.x;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	801a      	strh	r2, [r3, #0]
        point->y = indev->proc.types.pointer.vect.y;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	805a      	strh	r2, [r3, #2]
    }
}
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
	...

08008258 <lv_indev_get_obj_act>:
/**
 * Gets a pointer to the currently active object in the currently processed input device.
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
 8008258:	b480      	push	{r7}
 800825a:	af00      	add	r7, sp, #0
    return indev_obj_act;
 800825c:	4b03      	ldr	r3, [pc, #12]	; (800826c <lv_indev_get_obj_act+0x14>)
 800825e:	681b      	ldr	r3, [r3, #0]
}
 8008260:	4618      	mov	r0, r3
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	2001775c 	.word	0x2001775c

08008270 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 800827a:	2208      	movs	r2, #8
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f021 fd98 	bl	8029db4 <memcpy>
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800829a:	b29a      	uxth	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	3301      	adds	r3, #1
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	b21b      	sxth	r3, r3
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	3301      	adds	r3, #1
 80082d8:	b29b      	uxth	r3, r3
 80082da:	b21b      	sxth	r3, r3
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
    /* Do nothing if already initialized */
    if(lv_initialized) {
 80082ec:	4b13      	ldr	r3, [pc, #76]	; (800833c <lv_init+0x54>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d121      	bne.n	8008338 <lv_init+0x50>
    }

    LV_LOG_TRACE("lv_init started");

    /*Initialize the lv_misc modules*/
    lv_mem_init();
 80082f4:	f00e f92a 	bl	801654c <lv_mem_init>
    lv_task_core_init();
 80082f8:	f00e f9f4 	bl	80166e4 <lv_task_core_init>

#if LV_USE_FILESYSTEM
    lv_fs_init();
 80082fc:	f00d fca8 	bl	8015c50 <lv_fs_init>
#endif

#if LV_USE_ANIMATION
    lv_anim_core_init();
 8008300:	f00d f83c 	bl	801537c <lv_anim_core_init>
#endif

#if LV_USE_GROUP
    lv_group_init();
 8008304:	f7ff fc22 	bl	8007b4c <lv_group_init>
#endif

    /*Init. the sstyles*/
    lv_style_init();
 8008308:	f002 fdaa 	bl	800ae60 <lv_style_init>

    /*Initialize the screen refresh system*/
    lv_refr_init();
 800830c:	f001 ffd6 	bl	800a2bc <lv_refr_init>

    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8008310:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8008314:	480a      	ldr	r0, [pc, #40]	; (8008340 <lv_init+0x58>)
 8008316:	f00d fe1f 	bl	8015f58 <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 800831a:	2160      	movs	r1, #96	; 0x60
 800831c:	4809      	ldr	r0, [pc, #36]	; (8008344 <lv_init+0x5c>)
 800831e:	f00d fe1b 	bl	8015f58 <lv_ll_init>

    /*Init the input device handling*/
    lv_indev_init();
 8008322:	f7ff febe 	bl	80080a2 <lv_indev_init>

    lv_img_decoder_init();
 8008326:	f00b fb0b 	bl	8013940 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 800832a:	2001      	movs	r0, #1
 800832c:	f00b fa1e 	bl	801376c <lv_img_cache_set_size>

    lv_initialized = true;
 8008330:	4b02      	ldr	r3, [pc, #8]	; (800833c <lv_init+0x54>)
 8008332:	2201      	movs	r2, #1
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	e000      	b.n	800833a <lv_init+0x52>
        return;
 8008338:	bf00      	nop
    LV_LOG_INFO("lv_init ready");
}
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20017760 	.word	0x20017760
 8008340:	2001bb58 	.word	0x2001bb58
 8008344:	2001bb48 	.word	0x2001bb48

08008348 <lv_obj_create>:
 *                  If NULL then a screen will be created
 * @param copy pointer to a base object, if not NULL then the new object will be copied from it
 * @return pointer to the new object
 */
lv_obj_t * lv_obj_create(lv_obj_t * parent, const lv_obj_t * copy)
{
 8008348:	b590      	push	{r4, r7, lr}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]

    lv_obj_t * new_obj = NULL;
 8008352:	2300      	movs	r3, #0
 8008354:	617b      	str	r3, [r7, #20]
    /*Create a screen if the parent is NULL*/
    if(parent == NULL) {
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f040 80bf 	bne.w	80084dc <lv_obj_create+0x194>
        LV_LOG_TRACE("Screen create started");
        lv_disp_t * disp = lv_disp_get_default();
 800835e:	f00c fee9 	bl	8015134 <lv_disp_get_default>
 8008362:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <lv_obj_create+0x26>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
            return NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	e26a      	b.n	8008844 <lv_obj_create+0x4fc>
        }

        new_obj = lv_ll_ins_head(&disp->scr_ll);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3328      	adds	r3, #40	; 0x28
 8008372:	4618      	mov	r0, r3
 8008374:	f00d fe10 	bl	8015f98 <lv_ll_ins_head>
 8008378:	6178      	str	r0, [r7, #20]
        lv_mem_assert(new_obj);
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d100      	bne.n	8008382 <lv_obj_create+0x3a>
 8008380:	e7fe      	b.n	8008380 <lv_obj_create+0x38>
        if(new_obj == NULL) return NULL;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <lv_obj_create+0x44>
 8008388:	2300      	movs	r3, #0
 800838a:	e25b      	b.n	8008844 <lv_obj_create+0x4fc>

        new_obj->par = NULL; /*Screens has no a parent*/
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	3304      	adds	r3, #4
 8008396:	2148      	movs	r1, #72	; 0x48
 8008398:	4618      	mov	r0, r3
 800839a:	f00d fddd 	bl	8015f58 <lv_ll_init>

        /*Set coordinates to full screen size*/
        new_obj->coords.x1    = 0;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2200      	movs	r2, #0
 80083a2:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = 0;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2200      	movs	r2, #0
 80083a8:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 80083aa:	2000      	movs	r0, #0
 80083ac:	f00c fece 	bl	801514c <lv_disp_get_hor_res>
 80083b0:	4603      	mov	r3, r0
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	b21a      	sxth	r2, r3
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 80083be:	2000      	movs	r0, #0
 80083c0:	f00c fee5 	bl	801518e <lv_disp_get_ver_res>
 80083c4:	4603      	mov	r3, r0
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	b21a      	sxth	r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	82da      	strh	r2, [r3, #22]
        new_obj->ext_draw_pad = 0;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2200      	movs	r2, #0
 80083d6:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = LV_ALIGN_CENTER;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	2200      	movs	r2, #0
 80083e4:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2200      	movs	r2, #0
 80083ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2200      	movs	r2, #0
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 80083f8:	f36f 0300 	bfc	r3, #0, #1
 80083fc:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8008400:	f019 fb8e 	bl	8021b20 <lv_theme_get_current>
 8008404:	60b8      	str	r0, [r7, #8]
        if(th) {
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d004      	beq.n	8008416 <lv_obj_create+0xce>
            new_obj->style_p = th->style.scr;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	629a      	str	r2, [r3, #40]	; 0x28
 8008414:	e002      	b.n	800841c <lv_obj_create+0xd4>
        } else {
            new_obj->style_p = &lv_style_scr;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	4a5b      	ldr	r2, [pc, #364]	; (8008588 <lv_obj_create+0x240>)
 800841a:	629a      	str	r2, [r3, #40]	; 0x28
        }
        /*Set the callbacks*/
        lv_obj_set_signal_cb(new_obj, lv_obj_signal);
 800841c:	495b      	ldr	r1, [pc, #364]	; (800858c <lv_obj_create+0x244>)
 800841e:	6978      	ldr	r0, [r7, #20]
 8008420:	f001 fb12 	bl	8009a48 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_obj, lv_obj_design);
 8008424:	495a      	ldr	r1, [pc, #360]	; (8008590 <lv_obj_create+0x248>)
 8008426:	6978      	ldr	r0, [r7, #20]
 8008428:	f001 fb1c 	bl	8009a64 <lv_obj_set_design_cb>
        new_obj->event_cb = NULL;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2200      	movs	r2, #0
 8008430:	619a      	str	r2, [r3, #24]

        /*Init. user date*/
#if LV_USE_USER_DATA
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	3344      	adds	r3, #68	; 0x44
 8008436:	2204      	movs	r2, #4
 8008438:	2100      	movs	r1, #0
 800843a:	4618      	mov	r0, r3
 800843c:	f021 fcc5 	bl	8029dca <memset>
#endif

#if LV_USE_GROUP
        new_obj->group_p = NULL;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2200      	movs	r2, #0
 8008444:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
        /*Set attributes*/
        new_obj->click        = 0;
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800844c:	f36f 0300 	bfc	r3, #0, #1
 8008450:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = 0;
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800845a:	f36f 0341 	bfc	r3, #1, #1
 800845e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_throw   = 0;
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008468:	f36f 0382 	bfc	r3, #2, #1
 800846c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = 0;
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008476:	f36f 03c3 	bfc	r3, #3, #1
 800847a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = 0;
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008484:	f36f 1304 	bfc	r3, #4, #1
 8008488:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = 0;
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008492:	f36f 1345 	bfc	r3, #5, #1
 8008496:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = LV_PROTECT_NONE;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale_en = 0;
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80084a8:	f36f 1386 	bfc	r3, #6, #1
 80084ac:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->opa_scale    = LV_OPA_COVER;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	22ff      	movs	r2, #255	; 0xff
 80084b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        new_obj->parent_event = 0;
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80084be:	f36f 13c7 	bfc	r3, #7, #1
 80084c2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->reserved     = 0;
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80084cc:	f36f 0387 	bfc	r3, #2, #6
 80084d0:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        new_obj->ext_attr = NULL;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	2200      	movs	r2, #0
 80084d8:	625a      	str	r2, [r3, #36]	; 0x24
 80084da:	e0bd      	b.n	8008658 <lv_obj_create+0x310>
    }
    /*parent != NULL create normal obj. on a parent*/
    else {
        LV_LOG_TRACE("Object create started");

        new_obj = lv_ll_ins_head(&parent->child_ll);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3304      	adds	r3, #4
 80084e0:	4618      	mov	r0, r3
 80084e2:	f00d fd59 	bl	8015f98 <lv_ll_ins_head>
 80084e6:	6178      	str	r0, [r7, #20]
        lv_mem_assert(new_obj);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d100      	bne.n	80084f0 <lv_obj_create+0x1a8>
 80084ee:	e7fe      	b.n	80084ee <lv_obj_create+0x1a6>
        if(new_obj == NULL) return NULL;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <lv_obj_create+0x1b2>
 80084f6:	2300      	movs	r3, #0
 80084f8:	e1a4      	b.n	8008844 <lv_obj_create+0x4fc>

        new_obj->par = parent; /*Set the parent*/
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	601a      	str	r2, [r3, #0]
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	3304      	adds	r3, #4
 8008504:	2148      	movs	r1, #72	; 0x48
 8008506:	4618      	mov	r0, r3
 8008508:	f00d fd26 	bl	8015f58 <lv_ll_init>

        /*Set coordinates left top corner of parent*/
        new_obj->coords.x1    = parent->coords.x1;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = parent->coords.y1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008526:	b29b      	uxth	r3, r3
 8008528:	3364      	adds	r3, #100	; 0x64
 800852a:	b29b      	uxth	r3, r3
 800852c:	b21a      	sxth	r2, r3
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008538:	b29b      	uxth	r3, r3
 800853a:	3342      	adds	r3, #66	; 0x42
 800853c:	b29b      	uxth	r3, r3
 800853e:	b21a      	sxth	r2, r3
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	82da      	strh	r2, [r3, #22]
        new_obj->ext_draw_pad = 0;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2200      	movs	r2, #0
 8008548:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2200      	movs	r2, #0
 8008556:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2200      	movs	r2, #0
 800855c:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2200      	movs	r2, #0
 8008562:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800856a:	f36f 0300 	bfc	r3, #0, #1
 800856e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
        /*Set appearance*/
        lv_theme_t * th = lv_theme_get_current();
 8008572:	f019 fad5 	bl	8021b20 <lv_theme_get_current>
 8008576:	6138      	str	r0, [r7, #16]
        if(th) {
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <lv_obj_create+0x24c>
            new_obj->style_p = th->style.panel;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	689a      	ldr	r2, [r3, #8]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	629a      	str	r2, [r3, #40]	; 0x28
 8008586:	e008      	b.n	800859a <lv_obj_create+0x252>
 8008588:	2001ba88 	.word	0x2001ba88
 800858c:	08009f95 	.word	0x08009f95
 8008590:	08009e7b 	.word	0x08009e7b
        } else {
            new_obj->style_p = &lv_style_plain_color;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	4aad      	ldr	r2, [pc, #692]	; (800884c <lv_obj_create+0x504>)
 8008598:	629a      	str	r2, [r3, #40]	; 0x28
        }

        /*Set the callbacks*/
        lv_obj_set_signal_cb(new_obj, lv_obj_signal);
 800859a:	49ad      	ldr	r1, [pc, #692]	; (8008850 <lv_obj_create+0x508>)
 800859c:	6978      	ldr	r0, [r7, #20]
 800859e:	f001 fa53 	bl	8009a48 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_obj, lv_obj_design);
 80085a2:	49ac      	ldr	r1, [pc, #688]	; (8008854 <lv_obj_create+0x50c>)
 80085a4:	6978      	ldr	r0, [r7, #20]
 80085a6:	f001 fa5d 	bl	8009a64 <lv_obj_set_design_cb>
        new_obj->event_cb = NULL;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2200      	movs	r2, #0
 80085ae:	619a      	str	r2, [r3, #24]
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init. user date*/
#if LV_USE_USER_DATA
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	3344      	adds	r3, #68	; 0x44
 80085b4:	2204      	movs	r2, #4
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f021 fc06 	bl	8029dca <memset>
#endif

#if LV_USE_GROUP
        new_obj->group_p = NULL;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2200      	movs	r2, #0
 80085c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

        /*Set attributes*/
        new_obj->click        = 1;
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80085ca:	f043 0301 	orr.w	r3, r3, #1
 80085ce:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = 0;
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80085d8:	f36f 0341 	bfc	r3, #1, #1
 80085dc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80085e6:	f043 0303 	orr.w	r3, r3, #3
 80085ea:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        new_obj->drag_throw   = 0;
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80085f4:	f36f 0382 	bfc	r3, #2, #1
 80085f8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = 0;
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008602:	f36f 03c3 	bfc	r3, #3, #1
 8008606:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = 0;
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008610:	f36f 1304 	bfc	r3, #4, #1
 8008614:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = 0;
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800861e:	f36f 1345 	bfc	r3, #5, #1
 8008622:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = LV_PROTECT_NONE;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	22ff      	movs	r2, #255	; 0xff
 8008632:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        new_obj->opa_scale_en = 0;
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800863c:	f36f 1386 	bfc	r3, #6, #1
 8008640:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->parent_event = 0;
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800864a:	f36f 13c7 	bfc	r3, #7, #1
 800864e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        new_obj->ext_attr = NULL;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2200      	movs	r2, #0
 8008656:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Copy the attributes if required*/
    if(copy != NULL) {
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 80e5 	beq.w	800882a <lv_obj_create+0x4e2>
        lv_area_copy(&new_obj->coords, &copy->coords);
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f103 0210 	add.w	r2, r3, #16
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	3310      	adds	r3, #16
 800866a:	4619      	mov	r1, r3
 800866c:	4610      	mov	r0, r2
 800866e:	f7ff fdff 	bl	8008270 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
#endif

        /*Set free data*/
#if LV_USE_USER_DATA
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	3344      	adds	r3, #68	; 0x44
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	3244      	adds	r2, #68	; 0x44
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	601a      	str	r2, [r3, #0]
#endif
        /*Copy realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = copy->realign.align;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80086ba:	b2d9      	uxtb	r1, r3
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 80086c2:	f361 0300 	bfi	r3, r1, #0, #1
 80086c6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif

        /*Only copy the `event_cb`. `signal_cb` and `design_cb` will be copied the the derived
         * object type (e.g. `lv_btn`)*/
        new_obj->event_cb = copy->event_cb;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	699a      	ldr	r2, [r3, #24]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	619a      	str	r2, [r3, #24]

        /*Copy attributes*/
        new_obj->click        = copy->click;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80086dc:	b2d9      	uxtb	r1, r3
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80086e4:	f361 0300 	bfi	r3, r1, #0, #1
 80086e8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = copy->drag;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80086f6:	b2d9      	uxtb	r1, r3
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80086fe:	f361 0341 	bfi	r3, r1, #1, #1
 8008702:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800870c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008710:	b2d9      	uxtb	r1, r3
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8008718:	f361 0301 	bfi	r3, r1, #0, #2
 800871c:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008726:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800872a:	b2d9      	uxtb	r1, r3
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008732:	f361 0382 	bfi	r3, r1, #2, #1
 8008736:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008740:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008744:	b2d9      	uxtb	r1, r3
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800874c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008750:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800875a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800875e:	b2d9      	uxtb	r1, r3
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008766:	f361 1304 	bfi	r3, r1, #4, #1
 800876a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = copy->top;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008774:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008778:	b2d9      	uxtb	r1, r3
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008780:	f361 1345 	bfi	r3, r1, #5, #1
 8008784:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800878e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008792:	b2d9      	uxtb	r1, r3
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800879a:	f361 13c7 	bfi	r3, r1, #7, #1
 800879e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        new_obj->opa_scale_en = copy->opa_scale_en;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80087ac:	b2d9      	uxtb	r1, r3
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80087b4:	f361 1386 	bfi	r3, r1, #6, #1
 80087b8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = copy->protect;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        new_obj->style_p = copy->style_p;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	629a      	str	r2, [r3, #40]	; 0x28

#if LV_USE_GROUP
        /*Add to the same group*/
        if(copy->group_p != NULL) {
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <lv_obj_create+0x4a8>
            lv_group_add_obj(copy->group_p, new_obj);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	6979      	ldr	r1, [r7, #20]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7ff f9b8 	bl	8007b60 <lv_group_add_obj>
        }
#endif

        /*Set the same coordinates for non screen objects*/
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 80087f0:	6838      	ldr	r0, [r7, #0]
 80087f2:	f001 f9bd 	bl	8009b70 <lv_obj_get_parent>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d011      	beq.n	8008820 <lv_obj_create+0x4d8>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00e      	beq.n	8008820 <lv_obj_create+0x4d8>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8008802:	6838      	ldr	r0, [r7, #0]
 8008804:	f001 f9ec 	bl	8009be0 <lv_obj_get_x>
 8008808:	4603      	mov	r3, r0
 800880a:	461c      	mov	r4, r3
 800880c:	6838      	ldr	r0, [r7, #0]
 800880e:	f001 fa00 	bl	8009c12 <lv_obj_get_y>
 8008812:	4603      	mov	r3, r0
 8008814:	461a      	mov	r2, r3
 8008816:	4621      	mov	r1, r4
 8008818:	6978      	ldr	r0, [r7, #20]
 800881a:	f000 f9d1 	bl	8008bc0 <lv_obj_set_pos>
 800881e:	e004      	b.n	800882a <lv_obj_create+0x4e2>
        } else {
            lv_obj_set_pos(new_obj, 0, 0);
 8008820:	2200      	movs	r2, #0
 8008822:	2100      	movs	r1, #0
 8008824:	6978      	ldr	r0, [r7, #20]
 8008826:	f000 f9cb 	bl	8008bc0 <lv_obj_set_pos>

        LV_LOG_INFO("Object create ready");
    }

    /*Send a signal to the parent to notify it about the new child*/
    if(parent != NULL) {
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <lv_obj_create+0x4fa>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	2101      	movs	r1, #1
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(new_obj);
 800883c:	6978      	ldr	r0, [r7, #20]
 800883e:	f000 f8c0 	bl	80089c2 <lv_obj_invalidate>
    }

    return new_obj;
 8008842:	697b      	ldr	r3, [r7, #20]
}
 8008844:	4618      	mov	r0, r3
 8008846:	371c      	adds	r7, #28
 8008848:	46bd      	mov	sp, r7
 800884a:	bd90      	pop	{r4, r7, pc}
 800884c:	2001bb00 	.word	0x2001bb00
 8008850:	08009f95 	.word	0x08009f95
 8008854:	08009e7b 	.word	0x08009e7b

08008858 <lv_obj_del>:
 * Delete 'obj' and all of its children
 * @param obj pointer to an object to delete
 * @return LV_RES_INV because the object is deleted
 */
lv_res_t lv_obj_del(lv_obj_t * obj)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
    lv_obj_invalidate(obj);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f8ae 	bl	80089c2 <lv_obj_invalidate>

    /*Delete from the group*/
#if LV_USE_GROUP
    lv_group_t * group = lv_obj_get_group(obj);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f001 fae3 	bl	8009e32 <lv_obj_get_group>
 800886c:	6178      	str	r0, [r7, #20]
    if(group) lv_group_remove_obj(obj);
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <lv_obj_del+0x22>
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff f9c4 	bl	8007c02 <lv_group_remove_obj>
#endif

        /*Remove the animations from this object*/
#if LV_USE_ANIMATION
    lv_anim_del(obj, NULL);
 800887a:	2100      	movs	r1, #0
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f00c fdd7 	bl	8015430 <lv_anim_del>
#endif

    /*Recursively delete the children*/
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3304      	adds	r3, #4
 8008886:	4618      	mov	r0, r3
 8008888:	f00d fce8 	bl	801625c <lv_ll_get_head>
 800888c:	61f8      	str	r0, [r7, #28]
    while(i != NULL) {
 800888e:	e00b      	b.n	80088a8 <lv_obj_del+0x50>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3304      	adds	r3, #4
 8008894:	69f9      	ldr	r1, [r7, #28]
 8008896:	4618      	mov	r0, r3
 8008898:	f00d fd06 	bl	80162a8 <lv_ll_get_next>
 800889c:	60b8      	str	r0, [r7, #8]

        /*Call the recursive del to the child too*/
        delete_children(i);
 800889e:	69f8      	ldr	r0, [r7, #28]
 80088a0:	f001 fc33 	bl	800a10a <delete_children>

        /*Set i to the next node*/
        i = i_next;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	61fb      	str	r3, [r7, #28]
    while(i != NULL) {
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1f0      	bne.n	8008890 <lv_obj_del+0x38>
    }

    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 80088ae:	2200      	movs	r2, #0
 80088b0:	2113      	movs	r1, #19
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 f837 	bl	8009926 <lv_event_send>

    lv_event_mark_deleted(obj);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 fca5 	bl	800a208 <lv_event_mark_deleted>

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 f956 	bl	8009b70 <lv_obj_get_parent>
 80088c4:	6138      	str	r0, [r7, #16]
    if(par == NULL) { /*It is a screen*/
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <lv_obj_del+0x8a>
        lv_disp_t * d = lv_obj_get_disp(obj);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 f915 	bl	8009afc <lv_obj_get_disp>
 80088d2:	60f8      	str	r0, [r7, #12]
        lv_ll_rem(&d->scr_ll, obj);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3328      	adds	r3, #40	; 0x28
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	4618      	mov	r0, r3
 80088dc:	f00d fc10 	bl	8016100 <lv_ll_rem>
 80088e0:	e005      	b.n	80088ee <lv_obj_del+0x96>
    } else {
        lv_ll_rem(&(par->child_ll), obj);
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	3304      	adds	r3, #4
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f00d fc09 	bl	8016100 <lv_ll_rem>
    }

    /* Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80088ee:	2000      	movs	r0, #0
 80088f0:	f00c fcde 	bl	80152b0 <lv_indev_get_next>
 80088f4:	61b8      	str	r0, [r7, #24]
    while(indev) {
 80088f6:	e026      	b.n	8008946 <lv_obj_del+0xee>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d004      	beq.n	800890c <lv_obj_del+0xb4>
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	429a      	cmp	r2, r3
 800890a:	d102      	bne.n	8008912 <lv_obj_del+0xba>
            lv_indev_reset(indev);
 800890c:	69b8      	ldr	r0, [r7, #24]
 800890e:	f7ff fbec 	bl	80080ea <lv_indev_reset>
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	d102      	bne.n	8008922 <lv_obj_del+0xca>
            indev->proc.types.pointer.last_pressed = NULL;
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2200      	movs	r2, #0
 8008920:	641a      	str	r2, [r3, #64]	; 0x40
        }

#if LV_USE_GROUP
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	429a      	cmp	r2, r3
 800892a:	d108      	bne.n	800893e <lv_obj_del+0xe6>
 800892c:	f7ff fc94 	bl	8008258 <lv_indev_get_obj_act>
 8008930:	4602      	mov	r2, r0
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4293      	cmp	r3, r2
 8008936:	d102      	bne.n	800893e <lv_obj_del+0xe6>
            lv_indev_reset(indev);
 8008938:	69b8      	ldr	r0, [r7, #24]
 800893a:	f7ff fbd6 	bl	80080ea <lv_indev_reset>
        }
#endif
        indev = lv_indev_get_next(indev);
 800893e:	69b8      	ldr	r0, [r7, #24]
 8008940:	f00c fcb6 	bl	80152b0 <lv_indev_get_next>
 8008944:	61b8      	str	r0, [r7, #24]
    while(indev) {
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1d5      	bne.n	80088f8 <lv_obj_del+0xa0>
    }

    /* All children deleted.
     * Now clean up the object specific data*/
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	2200      	movs	r2, #0
 8008952:	2100      	movs	r1, #0
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d004      	beq.n	800896a <lv_obj_del+0x112>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	4618      	mov	r0, r3
 8008966:	f00d fe39 	bl	80165dc <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f00d fe36 	bl	80165dc <lv_mem_free>

    /*Send a signal to the parent to notify it about the child delete*/
    if(par != NULL) {
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d005      	beq.n	8008982 <lv_obj_del+0x12a>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	2200      	movs	r2, #0
 800897c:	2101      	movs	r1, #1
 800897e:	6938      	ldr	r0, [r7, #16]
 8008980:	4798      	blx	r3
    }

    return LV_RES_INV;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <lv_obj_clean>:
/**
 * Delete all children of an object
 * @param obj pointer to an object
 */
void lv_obj_clean(lv_obj_t * obj)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8008994:	2100      	movs	r1, #0
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 f8f6 	bl	8009b88 <lv_obj_get_child>
 800899c:	60f8      	str	r0, [r7, #12]
    lv_obj_t * child_next;
    while(child) {
 800899e:	e009      	b.n	80089b4 <lv_obj_clean+0x28>
        /* Read the next child before deleting the current
         * because the next couldn't be read from a deleted (invalid) node*/
        child_next = lv_obj_get_child(obj, child);
 80089a0:	68f9      	ldr	r1, [r7, #12]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 f8f0 	bl	8009b88 <lv_obj_get_child>
 80089a8:	60b8      	str	r0, [r7, #8]
        lv_obj_del(child);
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f7ff ff54 	bl	8008858 <lv_obj_del>
        child = child_next;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	60fb      	str	r3, [r7, #12]
    while(child) {
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1f2      	bne.n	80089a0 <lv_obj_clean+0x14>
    }
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <lv_obj_invalidate>:
/**
 * Mark the object as invalid therefore its current position will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 */
void lv_obj_invalidate(const lv_obj_t * obj)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b08a      	sub	sp, #40	; 0x28
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_hidden(obj)) return;
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 f9c2 	bl	8009d54 <lv_obj_get_hidden>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d17e      	bne.n	8008ad4 <lv_obj_invalidate+0x112>

    /*Invalidate the object only if it belongs to the 'LV_GC_ROOT(_lv_act_scr)'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f001 f87c 	bl	8009ad4 <lv_obj_get_screen>
 80089dc:	61f8      	str	r0, [r7, #28]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 80089de:	69f8      	ldr	r0, [r7, #28]
 80089e0:	f001 f88c 	bl	8009afc <lv_obj_get_disp>
 80089e4:	61b8      	str	r0, [r7, #24]
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 80089e6:	69b8      	ldr	r0, [r7, #24]
 80089e8:	f7ff f870 	bl	8007acc <lv_disp_get_scr_act>
 80089ec:	4602      	mov	r2, r0
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d00d      	beq.n	8008a10 <lv_obj_invalidate+0x4e>
 80089f4:	69b8      	ldr	r0, [r7, #24]
 80089f6:	f7ff f87e 	bl	8007af6 <lv_disp_get_layer_top>
 80089fa:	4602      	mov	r2, r0
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d006      	beq.n	8008a10 <lv_obj_invalidate+0x4e>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8008a02:	69b8      	ldr	r0, [r7, #24]
 8008a04:	f7ff f88c 	bl	8007b20 <lv_disp_get_layer_sys>
 8008a08:	4602      	mov	r2, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d164      	bne.n	8008ada <lv_obj_invalidate+0x118>
        /*Truncate recursively to the parents*/
        lv_area_t area_trunc;
        lv_obj_t * par = lv_obj_get_parent(obj);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 f8ad 	bl	8009b70 <lv_obj_get_parent>
 8008a16:	6278      	str	r0, [r7, #36]	; 0x24
        bool union_ok  = true;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        /*Start with the original coordinates*/
        lv_coord_t ext_size = obj->ext_draw_pad;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008a22:	82fb      	strh	r3, [r7, #22]
        lv_area_copy(&area_trunc, &obj->coords);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f103 0210 	add.w	r2, r3, #16
 8008a2a:	f107 030c 	add.w	r3, r7, #12
 8008a2e:	4611      	mov	r1, r2
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff fc1d 	bl	8008270 <lv_area_copy>
        area_trunc.x1 -= ext_size;
 8008a36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	8afb      	ldrh	r3, [r7, #22]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	b21b      	sxth	r3, r3
 8008a44:	81bb      	strh	r3, [r7, #12]
        area_trunc.y1 -= ext_size;
 8008a46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	8afb      	ldrh	r3, [r7, #22]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	b21b      	sxth	r3, r3
 8008a54:	81fb      	strh	r3, [r7, #14]
        area_trunc.x2 += ext_size;
 8008a56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	8afb      	ldrh	r3, [r7, #22]
 8008a5e:	4413      	add	r3, r2
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	b21b      	sxth	r3, r3
 8008a64:	823b      	strh	r3, [r7, #16]
        area_trunc.y2 += ext_size;
 8008a66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	8afb      	ldrh	r3, [r7, #22]
 8008a6e:	4413      	add	r3, r2
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	b21b      	sxth	r3, r3
 8008a74:	827b      	strh	r3, [r7, #18]

        /*Check through all parents*/
        while(par != NULL) {
 8008a76:	e01d      	b.n	8008ab4 <lv_obj_invalidate+0xf2>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	f103 0210 	add.w	r2, r3, #16
 8008a7e:	f107 010c 	add.w	r1, r7, #12
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	4618      	mov	r0, r3
 8008a88:	f00c ff4e 	bl	8015928 <lv_area_intersect>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8008a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a96:	f083 0301 	eor.w	r3, r3, #1
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10d      	bne.n	8008abc <lv_obj_invalidate+0xfa>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8008aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aa2:	f001 f957 	bl	8009d54 <lv_obj_get_hidden>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d115      	bne.n	8008ad8 <lv_obj_invalidate+0x116>

            par = lv_obj_get_parent(par);
 8008aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aae:	f001 f85f 	bl	8009b70 <lv_obj_get_parent>
 8008ab2:	6278      	str	r0, [r7, #36]	; 0x24
        while(par != NULL) {
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1de      	bne.n	8008a78 <lv_obj_invalidate+0xb6>
 8008aba:	e000      	b.n	8008abe <lv_obj_invalidate+0xfc>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8008abc:	bf00      	nop
        }

        if(union_ok) lv_inv_area(disp, &area_trunc);
 8008abe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d009      	beq.n	8008ada <lv_obj_invalidate+0x118>
 8008ac6:	f107 030c 	add.w	r3, r7, #12
 8008aca:	4619      	mov	r1, r3
 8008acc:	69b8      	ldr	r0, [r7, #24]
 8008ace:	f001 fbfd 	bl	800a2cc <lv_inv_area>
 8008ad2:	e002      	b.n	8008ada <lv_obj_invalidate+0x118>
    if(lv_obj_get_hidden(obj)) return;
 8008ad4:	bf00      	nop
 8008ad6:	e000      	b.n	8008ada <lv_obj_invalidate+0x118>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8008ad8:	bf00      	nop
    }
}
 8008ada:	3728      	adds	r7, #40	; 0x28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <lv_obj_set_parent>:
 * Set a new parent for an object. Its relative position will be the same.
 * @param obj pointer to an object. Can't be a screen.
 * @param parent pointer to the new parent object. (Can't be NULL)
 */
void lv_obj_set_parent(lv_obj_t * obj, lv_obj_t * parent)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
    if(obj->par == NULL) {
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d036      	beq.n	8008b60 <lv_obj_set_parent+0x80>
        LV_LOG_WARN("Can't set the parent of a screen");
        return;
    }

    if(parent == NULL) {
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d035      	beq.n	8008b64 <lv_obj_set_parent+0x84>
        LV_LOG_WARN("Can't set parent == NULL to an object");
        return;
    }

    lv_obj_invalidate(obj);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff ff62 	bl	80089c2 <lv_obj_invalidate>

    lv_point_t old_pos;
    old_pos.x = lv_obj_get_x(obj);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 f86e 	bl	8009be0 <lv_obj_get_x>
 8008b04:	4603      	mov	r3, r0
 8008b06:	813b      	strh	r3, [r7, #8]
    old_pos.y = lv_obj_get_y(obj);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 f882 	bl	8009c12 <lv_obj_get_y>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	817b      	strh	r3, [r7, #10]

    lv_obj_t * old_par = obj->par;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	60fb      	str	r3, [r7, #12]

    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	1d18      	adds	r0, r3, #4
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	1d19      	adds	r1, r3, #4
 8008b22:	2301      	movs	r3, #1
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	f00d fb44 	bl	80161b2 <lv_ll_chg_list>
    obj->par = parent;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	601a      	str	r2, [r3, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 8008b30:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008b34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f840 	bl	8008bc0 <lv_obj_set_pos>

    /*Notify the original parent because one of its children is lost*/
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	2200      	movs	r2, #0
 8008b46:	2101      	movs	r1, #1
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	4798      	blx	r3

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	2101      	movs	r1, #1
 8008b54:	6838      	ldr	r0, [r7, #0]
 8008b56:	4798      	blx	r3

    lv_obj_invalidate(obj);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff ff32 	bl	80089c2 <lv_obj_invalidate>
 8008b5e:	e002      	b.n	8008b66 <lv_obj_set_parent+0x86>
        return;
 8008b60:	bf00      	nop
 8008b62:	e000      	b.n	8008b66 <lv_obj_set_parent+0x86>
        return;
 8008b64:	bf00      	nop
}
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <lv_obj_move_foreground>:
/**
 * Move and object to the foreground
 * @param obj pointer to an object
 */
void lv_obj_move_foreground(lv_obj_t * obj)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fffb 	bl	8009b70 <lv_obj_get_parent>
 8008b7a:	60f8      	str	r0, [r7, #12]

    /*Do nothing of already in the foreground*/
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f00d fb6b 	bl	801625c <lv_ll_get_head>
 8008b86:	4602      	mov	r2, r0
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d014      	beq.n	8008bb8 <lv_obj_move_foreground+0x4c>

    lv_obj_invalidate(parent);
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f7ff ff17 	bl	80089c2 <lv_obj_invalidate>

    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	1d18      	adds	r0, r3, #4
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	1d19      	adds	r1, r3, #4
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	f00d fb07 	bl	80161b2 <lv_ll_chg_list>

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	2101      	movs	r1, #1
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	4798      	blx	r3

    lv_obj_invalidate(parent);
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7ff ff06 	bl	80089c2 <lv_obj_invalidate>
 8008bb6:	e000      	b.n	8008bba <lv_obj_move_foreground+0x4e>
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8008bb8:	bf00      	nop
}
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <lv_obj_set_pos>:
 * @param obj pointer to an object
 * @param x new distance from the left side of the parent
 * @param y new distance from the top of the parent
 */
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	807b      	strh	r3, [r7, #2]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * par = obj->par;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	617b      	str	r3, [r7, #20]

    x = x + par->coords.x1;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	887b      	ldrh	r3, [r7, #2]
 8008be0:	4413      	add	r3, r2
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	807b      	strh	r3, [r7, #2]
    y = y + par->coords.y1;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	883b      	ldrh	r3, [r7, #0]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	803b      	strh	r3, [r7, #0]

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 8008bf6:	887a      	ldrh	r2, [r7, #2]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	b21b      	sxth	r3, r3
 8008c06:	823b      	strh	r3, [r7, #16]
    diff.y = y - obj->coords.y1;
 8008c08:	883a      	ldrh	r2, [r7, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	b21b      	sxth	r3, r3
 8008c18:	827b      	strh	r3, [r7, #18]

    /* Do nothing if the position is not changed */
    /* It is very important else recursive positioning can
     * occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 8008c1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d103      	bne.n	8008c2a <lv_obj_set_pos+0x6a>
 8008c22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d051      	beq.n	8008cce <lv_obj_set_pos+0x10e>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fec9 	bl	80089c2 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8008c30:	f107 0308 	add.w	r3, r7, #8
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 ffc3 	bl	8009bc2 <lv_obj_get_coords>

    obj->coords.x1 += diff.x;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	b21a      	sxth	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	821a      	strh	r2, [r3, #16]
    obj->coords.y1 += diff.y;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	4413      	add	r3, r2
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	b21a      	sxth	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	825a      	strh	r2, [r3, #18]
    obj->coords.x2 += diff.x;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	4413      	add	r3, r2
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	b21a      	sxth	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 += diff.y;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	4413      	add	r3, r2
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	b21a      	sxth	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	82da      	strh	r2, [r3, #22]

    refresh_children_position(obj, diff.x, diff.y);
 8008c9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008ca0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 f9b6 	bl	800a018 <refresh_children_position>

    /*Inform the object about its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f107 0208 	add.w	r2, r7, #8
 8008cb4:	2102      	movs	r1, #2
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	4798      	blx	r3

    /*Send a signal to the parent too*/
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	6978      	ldr	r0, [r7, #20]
 8008cc4:	4798      	blx	r3

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff fe7b 	bl	80089c2 <lv_obj_invalidate>
 8008ccc:	e000      	b.n	8008cd0 <lv_obj_set_pos+0x110>
    if(diff.x == 0 && diff.y == 0) return;
 8008cce:	bf00      	nop
}
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <lv_obj_set_x>:
 * Set the x coordinate of a object
 * @param obj pointer to an object
 * @param x new distance from the left side from the parent
 */
void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b082      	sub	sp, #8
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	807b      	strh	r3, [r7, #2]
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 ff95 	bl	8009c12 <lv_obj_get_y>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	461a      	mov	r2, r3
 8008cec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7ff ff64 	bl	8008bc0 <lv_obj_set_pos>
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <lv_obj_set_y>:
 * Set the y coordinate of a object
 * @param obj pointer to an object
 * @param y new distance from the top of the parent
 */
void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	807b      	strh	r3, [r7, #2]
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 ff67 	bl	8009be0 <lv_obj_get_x>
 8008d12:	4603      	mov	r3, r0
 8008d14:	4619      	mov	r1, r3
 8008d16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff ff4f 	bl	8008bc0 <lv_obj_set_pos>
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <lv_obj_set_size>:
 * @param obj pointer to an object
 * @param w new width
 * @param h new height
 */
void lv_obj_set_size(lv_obj_t * obj, lv_coord_t w, lv_coord_t h)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b086      	sub	sp, #24
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	460b      	mov	r3, r1
 8008d34:	807b      	strh	r3, [r7, #2]
 8008d36:	4613      	mov	r3, r2
 8008d38:	803b      	strh	r3, [r7, #0]

    /* Do nothing if the size is not changed */
    /* It is very important else recursive resizing can
     * occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 ff82 	bl	8009c44 <lv_obj_get_width>
 8008d40:	4603      	mov	r3, r0
 8008d42:	461a      	mov	r2, r3
 8008d44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d108      	bne.n	8008d5e <lv_obj_set_size+0x34>
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 ff87 	bl	8009c60 <lv_obj_get_height>
 8008d52:	4603      	mov	r3, r0
 8008d54:	461a      	mov	r2, r3
 8008d56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d05a      	beq.n	8008e14 <lv_obj_set_size+0xea>
        return;
    }

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff fe2f 	bl	80089c2 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8008d64:	f107 0308 	add.w	r3, r7, #8
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 ff29 	bl	8009bc2 <lv_obj_get_coords>

    /*Set the length and height*/
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	887b      	ldrh	r3, [r7, #2]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	b21a      	sxth	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	883b      	ldrh	r3, [r7, #0]
 8008d92:	4413      	add	r3, r2
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	b21a      	sxth	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	82da      	strh	r2, [r3, #22]

    /*Send a signal to the object with its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	f107 0208 	add.w	r2, r7, #8
 8008da8:	2102      	movs	r1, #2
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	4798      	blx	r3

    /*Send a signal to the parent too*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fede 	bl	8009b70 <lv_obj_get_parent>
 8008db4:	6138      	str	r0, [r7, #16]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <lv_obj_set_size+0x9e>
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	69db      	ldr	r3, [r3, #28]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	6938      	ldr	r0, [r7, #16]
 8008dc6:	4798      	blx	r3

    /*Tell the children the parent's size has changed*/
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f00d fa45 	bl	801625c <lv_ll_get_head>
 8008dd2:	6178      	str	r0, [r7, #20]
 8008dd4:	e00c      	b.n	8008df0 <lv_obj_set_size+0xc6>
    {
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2103      	movs	r1, #3
 8008dde:	6978      	ldr	r0, [r7, #20]
 8008de0:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3304      	adds	r3, #4
 8008de6:	6979      	ldr	r1, [r7, #20]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f00d fa5d 	bl	80162a8 <lv_ll_get_next>
 8008dee:	6178      	str	r0, [r7, #20]
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1ef      	bne.n	8008dd6 <lv_obj_set_size+0xac>
    }

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff fde3 	bl	80089c2 <lv_obj_invalidate>

    /*Automatically realign the object if required*/
#if LV_USE_OBJ_REALIGN
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <lv_obj_set_size+0xec>
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fca3 	bl	8009758 <lv_obj_realign>
 8008e12:	e000      	b.n	8008e16 <lv_obj_set_size+0xec>
        return;
 8008e14:	bf00      	nop
#endif
}
 8008e16:	3718      	adds	r7, #24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <lv_obj_set_width>:
 * Set the width of an object
 * @param obj pointer to an object
 * @param w new width
 */
void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	807b      	strh	r3, [r7, #2]
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 ff19 	bl	8009c60 <lv_obj_get_height>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	461a      	mov	r2, r3
 8008e32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff ff76 	bl	8008d2a <lv_obj_set_size>
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <lv_obj_set_height>:
 * Set the height of an object
 * @param obj pointer to an object
 * @param h new height
 */
void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	807b      	strh	r3, [r7, #2]
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fef6 	bl	8009c44 <lv_obj_get_width>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e60:	461a      	mov	r2, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff ff61 	bl	8008d2a <lv_obj_set_size>
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <lv_obj_align>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_mod x coordinate shift after alignment
 * @param y_mod y coordinate shift after alignment
 */
void lv_obj_align(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod)
{
 8008e70:	b590      	push	{r4, r7, lr}
 8008e72:	b089      	sub	sp, #36	; 0x24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	460b      	mov	r3, r1
 8008e80:	71fb      	strb	r3, [r7, #7]
 8008e82:	4613      	mov	r3, r2
 8008e84:	80bb      	strh	r3, [r7, #4]
    lv_coord_t new_x = lv_obj_get_x(obj);
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 feaa 	bl	8009be0 <lv_obj_get_x>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	83fb      	strh	r3, [r7, #30]
    lv_coord_t new_y = lv_obj_get_y(obj);
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f000 febe 	bl	8009c12 <lv_obj_get_y>
 8008e96:	4603      	mov	r3, r0
 8008e98:	83bb      	strh	r3, [r7, #28]

    if(base == NULL) {
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d103      	bne.n	8008ea8 <lv_obj_align+0x38>
        base = lv_obj_get_parent(obj);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f000 fe65 	bl	8009b70 <lv_obj_get_parent>
 8008ea6:	60b8      	str	r0, [r7, #8]
    }

    switch(align) {
 8008ea8:	79fb      	ldrb	r3, [r7, #7]
 8008eaa:	2b14      	cmp	r3, #20
 8008eac:	f200 81f9 	bhi.w	80092a2 <lv_obj_align+0x432>
 8008eb0:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <lv_obj_align+0x48>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008f0d 	.word	0x08008f0d
 8008ebc:	08008f63 	.word	0x08008f63
 8008ec0:	08008f6d 	.word	0x08008f6d
 8008ec4:	08008f9d 	.word	0x08008f9d
 8008ec8:	08008fbd 	.word	0x08008fbd
 8008ecc:	08008fdd 	.word	0x08008fdd
 8008ed0:	08009023 	.word	0x08009023
 8008ed4:	08009059 	.word	0x08009059
 8008ed8:	08009089 	.word	0x08009089
 8008edc:	080090cf 	.word	0x080090cf
 8008ee0:	080090e5 	.word	0x080090e5
 8008ee4:	08009121 	.word	0x08009121
 8008ee8:	0800914d 	.word	0x0800914d
 8008eec:	0800915d 	.word	0x0800915d
 8008ef0:	08009193 	.word	0x08009193
 8008ef4:	080091b9 	.word	0x080091b9
 8008ef8:	080091cf 	.word	0x080091cf
 8008efc:	0800920b 	.word	0x0800920b
 8008f00:	08009237 	.word	0x08009237
 8008f04:	08009247 	.word	0x08009247
 8008f08:	0800927d 	.word	0x0800927d
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008f0c:	68b8      	ldr	r0, [r7, #8]
 8008f0e:	f000 fe99 	bl	8009c44 <lv_obj_get_width>
 8008f12:	4603      	mov	r3, r0
 8008f14:	0fda      	lsrs	r2, r3, #31
 8008f16:	4413      	add	r3, r2
 8008f18:	105b      	asrs	r3, r3, #1
 8008f1a:	b21b      	sxth	r3, r3
 8008f1c:	b29c      	uxth	r4, r3
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 fe90 	bl	8009c44 <lv_obj_get_width>
 8008f24:	4603      	mov	r3, r0
 8008f26:	0fda      	lsrs	r2, r3, #31
 8008f28:	4413      	add	r3, r2
 8008f2a:	105b      	asrs	r3, r3, #1
 8008f2c:	b21b      	sxth	r3, r3
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	1ae3      	subs	r3, r4, r3
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8008f36:	68b8      	ldr	r0, [r7, #8]
 8008f38:	f000 fe92 	bl	8009c60 <lv_obj_get_height>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	0fda      	lsrs	r2, r3, #31
 8008f40:	4413      	add	r3, r2
 8008f42:	105b      	asrs	r3, r3, #1
 8008f44:	b21b      	sxth	r3, r3
 8008f46:	b29c      	uxth	r4, r3
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fe89 	bl	8009c60 <lv_obj_get_height>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	0fda      	lsrs	r2, r3, #31
 8008f52:	4413      	add	r3, r2
 8008f54:	105b      	asrs	r3, r3, #1
 8008f56:	b21b      	sxth	r3, r3
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	1ae3      	subs	r3, r4, r3
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	83bb      	strh	r3, [r7, #28]
            break;
 8008f60:	e19f      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	83bb      	strh	r3, [r7, #28]
            break;
 8008f6a:	e19a      	b.n	80092a2 <lv_obj_align+0x432>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008f6c:	68b8      	ldr	r0, [r7, #8]
 8008f6e:	f000 fe69 	bl	8009c44 <lv_obj_get_width>
 8008f72:	4603      	mov	r3, r0
 8008f74:	0fda      	lsrs	r2, r3, #31
 8008f76:	4413      	add	r3, r2
 8008f78:	105b      	asrs	r3, r3, #1
 8008f7a:	b21b      	sxth	r3, r3
 8008f7c:	b29c      	uxth	r4, r3
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 fe60 	bl	8009c44 <lv_obj_get_width>
 8008f84:	4603      	mov	r3, r0
 8008f86:	0fda      	lsrs	r2, r3, #31
 8008f88:	4413      	add	r3, r2
 8008f8a:	105b      	asrs	r3, r3, #1
 8008f8c:	b21b      	sxth	r3, r3
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	1ae3      	subs	r3, r4, r3
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	83bb      	strh	r3, [r7, #28]
            break;
 8008f9a:	e182      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008f9c:	68b8      	ldr	r0, [r7, #8]
 8008f9e:	f000 fe51 	bl	8009c44 <lv_obj_get_width>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	b29c      	uxth	r4, r3
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 fe4c 	bl	8009c44 <lv_obj_get_width>
 8008fac:	4603      	mov	r3, r0
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	1ae3      	subs	r3, r4, r3
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	83bb      	strh	r3, [r7, #28]
            break;
 8008fba:	e172      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8008fc0:	68b8      	ldr	r0, [r7, #8]
 8008fc2:	f000 fe4d 	bl	8009c60 <lv_obj_get_height>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	b29c      	uxth	r4, r3
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 fe48 	bl	8009c60 <lv_obj_get_height>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	1ae3      	subs	r3, r4, r3
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	83bb      	strh	r3, [r7, #28]
            break;
 8008fda:	e162      	b.n	80092a2 <lv_obj_align+0x432>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008fdc:	68b8      	ldr	r0, [r7, #8]
 8008fde:	f000 fe31 	bl	8009c44 <lv_obj_get_width>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	0fda      	lsrs	r2, r3, #31
 8008fe6:	4413      	add	r3, r2
 8008fe8:	105b      	asrs	r3, r3, #1
 8008fea:	b21b      	sxth	r3, r3
 8008fec:	b29c      	uxth	r4, r3
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 fe28 	bl	8009c44 <lv_obj_get_width>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	0fda      	lsrs	r2, r3, #31
 8008ff8:	4413      	add	r3, r2
 8008ffa:	105b      	asrs	r3, r3, #1
 8008ffc:	b21b      	sxth	r3, r3
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	1ae3      	subs	r3, r4, r3
 8009002:	b29b      	uxth	r3, r3
 8009004:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009006:	68b8      	ldr	r0, [r7, #8]
 8009008:	f000 fe2a 	bl	8009c60 <lv_obj_get_height>
 800900c:	4603      	mov	r3, r0
 800900e:	b29c      	uxth	r4, r3
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 fe25 	bl	8009c60 <lv_obj_get_height>
 8009016:	4603      	mov	r3, r0
 8009018:	b29b      	uxth	r3, r3
 800901a:	1ae3      	subs	r3, r4, r3
 800901c:	b29b      	uxth	r3, r3
 800901e:	83bb      	strh	r3, [r7, #28]
            break;
 8009020:	e13f      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009022:	68b8      	ldr	r0, [r7, #8]
 8009024:	f000 fe0e 	bl	8009c44 <lv_obj_get_width>
 8009028:	4603      	mov	r3, r0
 800902a:	b29c      	uxth	r4, r3
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 fe09 	bl	8009c44 <lv_obj_get_width>
 8009032:	4603      	mov	r3, r0
 8009034:	b29b      	uxth	r3, r3
 8009036:	1ae3      	subs	r3, r4, r3
 8009038:	b29b      	uxth	r3, r3
 800903a:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800903c:	68b8      	ldr	r0, [r7, #8]
 800903e:	f000 fe0f 	bl	8009c60 <lv_obj_get_height>
 8009042:	4603      	mov	r3, r0
 8009044:	b29c      	uxth	r4, r3
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 fe0a 	bl	8009c60 <lv_obj_get_height>
 800904c:	4603      	mov	r3, r0
 800904e:	b29b      	uxth	r3, r3
 8009050:	1ae3      	subs	r3, r4, r3
 8009052:	b29b      	uxth	r3, r3
 8009054:	83bb      	strh	r3, [r7, #28]
            break;
 8009056:	e124      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = 0;
 8009058:	2300      	movs	r3, #0
 800905a:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800905c:	68b8      	ldr	r0, [r7, #8]
 800905e:	f000 fdff 	bl	8009c60 <lv_obj_get_height>
 8009062:	4603      	mov	r3, r0
 8009064:	0fda      	lsrs	r2, r3, #31
 8009066:	4413      	add	r3, r2
 8009068:	105b      	asrs	r3, r3, #1
 800906a:	b21b      	sxth	r3, r3
 800906c:	b29c      	uxth	r4, r3
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 fdf6 	bl	8009c60 <lv_obj_get_height>
 8009074:	4603      	mov	r3, r0
 8009076:	0fda      	lsrs	r2, r3, #31
 8009078:	4413      	add	r3, r2
 800907a:	105b      	asrs	r3, r3, #1
 800907c:	b21b      	sxth	r3, r3
 800907e:	b29b      	uxth	r3, r3
 8009080:	1ae3      	subs	r3, r4, r3
 8009082:	b29b      	uxth	r3, r3
 8009084:	83bb      	strh	r3, [r7, #28]
            break;
 8009086:	e10c      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009088:	68b8      	ldr	r0, [r7, #8]
 800908a:	f000 fddb 	bl	8009c44 <lv_obj_get_width>
 800908e:	4603      	mov	r3, r0
 8009090:	b29c      	uxth	r4, r3
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fdd6 	bl	8009c44 <lv_obj_get_width>
 8009098:	4603      	mov	r3, r0
 800909a:	b29b      	uxth	r3, r3
 800909c:	1ae3      	subs	r3, r4, r3
 800909e:	b29b      	uxth	r3, r3
 80090a0:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80090a2:	68b8      	ldr	r0, [r7, #8]
 80090a4:	f000 fddc 	bl	8009c60 <lv_obj_get_height>
 80090a8:	4603      	mov	r3, r0
 80090aa:	0fda      	lsrs	r2, r3, #31
 80090ac:	4413      	add	r3, r2
 80090ae:	105b      	asrs	r3, r3, #1
 80090b0:	b21b      	sxth	r3, r3
 80090b2:	b29c      	uxth	r4, r3
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 fdd3 	bl	8009c60 <lv_obj_get_height>
 80090ba:	4603      	mov	r3, r0
 80090bc:	0fda      	lsrs	r2, r3, #31
 80090be:	4413      	add	r3, r2
 80090c0:	105b      	asrs	r3, r3, #1
 80090c2:	b21b      	sxth	r3, r3
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	1ae3      	subs	r3, r4, r3
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	83bb      	strh	r3, [r7, #28]
            break;
 80090cc:	e0e9      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fdc4 	bl	8009c60 <lv_obj_get_height>
 80090d8:	4603      	mov	r3, r0
 80090da:	b29b      	uxth	r3, r3
 80090dc:	425b      	negs	r3, r3
 80090de:	b29b      	uxth	r3, r3
 80090e0:	83bb      	strh	r3, [r7, #28]
            break;
 80090e2:	e0de      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80090e4:	68b8      	ldr	r0, [r7, #8]
 80090e6:	f000 fdad 	bl	8009c44 <lv_obj_get_width>
 80090ea:	4603      	mov	r3, r0
 80090ec:	0fda      	lsrs	r2, r3, #31
 80090ee:	4413      	add	r3, r2
 80090f0:	105b      	asrs	r3, r3, #1
 80090f2:	b21b      	sxth	r3, r3
 80090f4:	b29c      	uxth	r4, r3
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 fda4 	bl	8009c44 <lv_obj_get_width>
 80090fc:	4603      	mov	r3, r0
 80090fe:	0fda      	lsrs	r2, r3, #31
 8009100:	4413      	add	r3, r2
 8009102:	105b      	asrs	r3, r3, #1
 8009104:	b21b      	sxth	r3, r3
 8009106:	b29b      	uxth	r3, r3
 8009108:	1ae3      	subs	r3, r4, r3
 800910a:	b29b      	uxth	r3, r3
 800910c:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 fda6 	bl	8009c60 <lv_obj_get_height>
 8009114:	4603      	mov	r3, r0
 8009116:	b29b      	uxth	r3, r3
 8009118:	425b      	negs	r3, r3
 800911a:	b29b      	uxth	r3, r3
 800911c:	83bb      	strh	r3, [r7, #28]
            break;
 800911e:	e0c0      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009120:	68b8      	ldr	r0, [r7, #8]
 8009122:	f000 fd8f 	bl	8009c44 <lv_obj_get_width>
 8009126:	4603      	mov	r3, r0
 8009128:	b29c      	uxth	r4, r3
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fd8a 	bl	8009c44 <lv_obj_get_width>
 8009130:	4603      	mov	r3, r0
 8009132:	b29b      	uxth	r3, r3
 8009134:	1ae3      	subs	r3, r4, r3
 8009136:	b29b      	uxth	r3, r3
 8009138:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 fd90 	bl	8009c60 <lv_obj_get_height>
 8009140:	4603      	mov	r3, r0
 8009142:	b29b      	uxth	r3, r3
 8009144:	425b      	negs	r3, r3
 8009146:	b29b      	uxth	r3, r3
 8009148:	83bb      	strh	r3, [r7, #28]
            break;
 800914a:	e0aa      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 8009150:	68b8      	ldr	r0, [r7, #8]
 8009152:	f000 fd85 	bl	8009c60 <lv_obj_get_height>
 8009156:	4603      	mov	r3, r0
 8009158:	83bb      	strh	r3, [r7, #28]
            break;
 800915a:	e0a2      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800915c:	68b8      	ldr	r0, [r7, #8]
 800915e:	f000 fd71 	bl	8009c44 <lv_obj_get_width>
 8009162:	4603      	mov	r3, r0
 8009164:	0fda      	lsrs	r2, r3, #31
 8009166:	4413      	add	r3, r2
 8009168:	105b      	asrs	r3, r3, #1
 800916a:	b21b      	sxth	r3, r3
 800916c:	b29c      	uxth	r4, r3
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 fd68 	bl	8009c44 <lv_obj_get_width>
 8009174:	4603      	mov	r3, r0
 8009176:	0fda      	lsrs	r2, r3, #31
 8009178:	4413      	add	r3, r2
 800917a:	105b      	asrs	r3, r3, #1
 800917c:	b21b      	sxth	r3, r3
 800917e:	b29b      	uxth	r3, r3
 8009180:	1ae3      	subs	r3, r4, r3
 8009182:	b29b      	uxth	r3, r3
 8009184:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 8009186:	68b8      	ldr	r0, [r7, #8]
 8009188:	f000 fd6a 	bl	8009c60 <lv_obj_get_height>
 800918c:	4603      	mov	r3, r0
 800918e:	83bb      	strh	r3, [r7, #28]
            break;
 8009190:	e087      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009192:	68b8      	ldr	r0, [r7, #8]
 8009194:	f000 fd56 	bl	8009c44 <lv_obj_get_width>
 8009198:	4603      	mov	r3, r0
 800919a:	b29c      	uxth	r4, r3
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fd51 	bl	8009c44 <lv_obj_get_width>
 80091a2:	4603      	mov	r3, r0
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	1ae3      	subs	r3, r4, r3
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 80091ac:	68b8      	ldr	r0, [r7, #8]
 80091ae:	f000 fd57 	bl	8009c60 <lv_obj_get_height>
 80091b2:	4603      	mov	r3, r0
 80091b4:	83bb      	strh	r3, [r7, #28]
            break;
 80091b6:	e074      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -lv_obj_get_width(obj);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fd43 	bl	8009c44 <lv_obj_get_width>
 80091be:	4603      	mov	r3, r0
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	425b      	negs	r3, r3
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	83bb      	strh	r3, [r7, #28]
            break;
 80091cc:	e069      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -lv_obj_get_width(obj);
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 fd38 	bl	8009c44 <lv_obj_get_width>
 80091d4:	4603      	mov	r3, r0
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	425b      	negs	r3, r3
 80091da:	b29b      	uxth	r3, r3
 80091dc:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80091de:	68b8      	ldr	r0, [r7, #8]
 80091e0:	f000 fd3e 	bl	8009c60 <lv_obj_get_height>
 80091e4:	4603      	mov	r3, r0
 80091e6:	0fda      	lsrs	r2, r3, #31
 80091e8:	4413      	add	r3, r2
 80091ea:	105b      	asrs	r3, r3, #1
 80091ec:	b21b      	sxth	r3, r3
 80091ee:	b29c      	uxth	r4, r3
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 fd35 	bl	8009c60 <lv_obj_get_height>
 80091f6:	4603      	mov	r3, r0
 80091f8:	0fda      	lsrs	r2, r3, #31
 80091fa:	4413      	add	r3, r2
 80091fc:	105b      	asrs	r3, r3, #1
 80091fe:	b21b      	sxth	r3, r3
 8009200:	b29b      	uxth	r3, r3
 8009202:	1ae3      	subs	r3, r4, r3
 8009204:	b29b      	uxth	r3, r3
 8009206:	83bb      	strh	r3, [r7, #28]
            break;
 8009208:	e04b      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -lv_obj_get_width(obj);
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fd1a 	bl	8009c44 <lv_obj_get_width>
 8009210:	4603      	mov	r3, r0
 8009212:	b29b      	uxth	r3, r3
 8009214:	425b      	negs	r3, r3
 8009216:	b29b      	uxth	r3, r3
 8009218:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800921a:	68b8      	ldr	r0, [r7, #8]
 800921c:	f000 fd20 	bl	8009c60 <lv_obj_get_height>
 8009220:	4603      	mov	r3, r0
 8009222:	b29c      	uxth	r4, r3
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 fd1b 	bl	8009c60 <lv_obj_get_height>
 800922a:	4603      	mov	r3, r0
 800922c:	b29b      	uxth	r3, r3
 800922e:	1ae3      	subs	r3, r4, r3
 8009230:	b29b      	uxth	r3, r3
 8009232:	83bb      	strh	r3, [r7, #28]
            break;
 8009234:	e035      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base);
 8009236:	68b8      	ldr	r0, [r7, #8]
 8009238:	f000 fd04 	bl	8009c44 <lv_obj_get_width>
 800923c:	4603      	mov	r3, r0
 800923e:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	83bb      	strh	r3, [r7, #28]
            break;
 8009244:	e02d      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base);
 8009246:	68b8      	ldr	r0, [r7, #8]
 8009248:	f000 fcfc 	bl	8009c44 <lv_obj_get_width>
 800924c:	4603      	mov	r3, r0
 800924e:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8009250:	68b8      	ldr	r0, [r7, #8]
 8009252:	f000 fd05 	bl	8009c60 <lv_obj_get_height>
 8009256:	4603      	mov	r3, r0
 8009258:	0fda      	lsrs	r2, r3, #31
 800925a:	4413      	add	r3, r2
 800925c:	105b      	asrs	r3, r3, #1
 800925e:	b21b      	sxth	r3, r3
 8009260:	b29c      	uxth	r4, r3
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 fcfc 	bl	8009c60 <lv_obj_get_height>
 8009268:	4603      	mov	r3, r0
 800926a:	0fda      	lsrs	r2, r3, #31
 800926c:	4413      	add	r3, r2
 800926e:	105b      	asrs	r3, r3, #1
 8009270:	b21b      	sxth	r3, r3
 8009272:	b29b      	uxth	r3, r3
 8009274:	1ae3      	subs	r3, r4, r3
 8009276:	b29b      	uxth	r3, r3
 8009278:	83bb      	strh	r3, [r7, #28]
            break;
 800927a:	e012      	b.n	80092a2 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base);
 800927c:	68b8      	ldr	r0, [r7, #8]
 800927e:	f000 fce1 	bl	8009c44 <lv_obj_get_width>
 8009282:	4603      	mov	r3, r0
 8009284:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009286:	68b8      	ldr	r0, [r7, #8]
 8009288:	f000 fcea 	bl	8009c60 <lv_obj_get_height>
 800928c:	4603      	mov	r3, r0
 800928e:	b29c      	uxth	r4, r3
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 fce5 	bl	8009c60 <lv_obj_get_height>
 8009296:	4603      	mov	r3, r0
 8009298:	b29b      	uxth	r3, r3
 800929a:	1ae3      	subs	r3, r4, r3
 800929c:	b29b      	uxth	r3, r3
 800929e:	83bb      	strh	r3, [r7, #28]
            break;
 80092a0:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fc64 	bl	8009b70 <lv_obj_get_parent>
 80092a8:	61b8      	str	r0, [r7, #24]
    lv_coord_t base_abs_x = base->coords.x1;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	8a1b      	ldrh	r3, [r3, #16]
 80092ae:	82fb      	strh	r3, [r7, #22]
    lv_coord_t base_abs_y = base->coords.y1;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	8a5b      	ldrh	r3, [r3, #18]
 80092b4:	82bb      	strh	r3, [r7, #20]
    lv_coord_t par_abs_x  = par->coords.x1;
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	8a1b      	ldrh	r3, [r3, #16]
 80092ba:	827b      	strh	r3, [r7, #18]
    lv_coord_t par_abs_y  = par->coords.y1;
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	8a5b      	ldrh	r3, [r3, #18]
 80092c0:	823b      	strh	r3, [r7, #16]
    new_x += x_mod + base_abs_x;
 80092c2:	88ba      	ldrh	r2, [r7, #4]
 80092c4:	8afb      	ldrh	r3, [r7, #22]
 80092c6:	4413      	add	r3, r2
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	8bfb      	ldrh	r3, [r7, #30]
 80092cc:	4413      	add	r3, r2
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	83fb      	strh	r3, [r7, #30]
    new_y += y_mod + base_abs_y;
 80092d2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80092d4:	8abb      	ldrh	r3, [r7, #20]
 80092d6:	4413      	add	r3, r2
 80092d8:	b29a      	uxth	r2, r3
 80092da:	8bbb      	ldrh	r3, [r7, #28]
 80092dc:	4413      	add	r3, r2
 80092de:	b29b      	uxth	r3, r3
 80092e0:	83bb      	strh	r3, [r7, #28]
    new_x -= par_abs_x;
 80092e2:	8bfa      	ldrh	r2, [r7, #30]
 80092e4:	8a7b      	ldrh	r3, [r7, #18]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	83fb      	strh	r3, [r7, #30]
    new_y -= par_abs_y;
 80092ec:	8bba      	ldrh	r2, [r7, #28]
 80092ee:	8a3b      	ldrh	r3, [r7, #16]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	83bb      	strh	r3, [r7, #28]

    lv_obj_set_pos(obj, new_x, new_y);
 80092f6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80092fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80092fe:	4619      	mov	r1, r3
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f7ff fc5d 	bl	8008bc0 <lv_obj_set_pos>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	79fa      	ldrb	r2, [r7, #7]
 800930a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    obj->realign.xofs        = x_mod;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	88ba      	ldrh	r2, [r7, #4]
 8009312:	879a      	strh	r2, [r3, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009318:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.base        = base;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	639a      	str	r2, [r3, #56]	; 0x38
    obj->realign.origo_align = 0;
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8009326:	f36f 0341 	bfc	r3, #1, #1
 800932a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
}
 800932e:	bf00      	nop
 8009330:	3724      	adds	r7, #36	; 0x24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd90      	pop	{r4, r7, pc}
 8009336:	bf00      	nop

08009338 <lv_obj_align_origo>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_mod x coordinate shift after alignment
 * @param y_mod y coordinate shift after alignment
 */
void lv_obj_align_origo(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	4611      	mov	r1, r2
 8009344:	461a      	mov	r2, r3
 8009346:	460b      	mov	r3, r1
 8009348:	71fb      	strb	r3, [r7, #7]
 800934a:	4613      	mov	r3, r2
 800934c:	80bb      	strh	r3, [r7, #4]
    lv_coord_t new_x = lv_obj_get_x(obj);
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f000 fc46 	bl	8009be0 <lv_obj_get_x>
 8009354:	4603      	mov	r3, r0
 8009356:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t new_y = lv_obj_get_y(obj);
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 fc5a 	bl	8009c12 <lv_obj_get_y>
 800935e:	4603      	mov	r3, r0
 8009360:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 fc6e 	bl	8009c44 <lv_obj_get_width>
 8009368:	4603      	mov	r3, r0
 800936a:	0fda      	lsrs	r2, r3, #31
 800936c:	4413      	add	r3, r2
 800936e:	105b      	asrs	r3, r3, #1
 8009370:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 fc74 	bl	8009c60 <lv_obj_get_height>
 8009378:	4603      	mov	r3, r0
 800937a:	0fda      	lsrs	r2, r3, #31
 800937c:	4413      	add	r3, r2
 800937e:	105b      	asrs	r3, r3, #1
 8009380:	843b      	strh	r3, [r7, #32]

    if(base == NULL) {
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d103      	bne.n	8009390 <lv_obj_align_origo+0x58>
        base = lv_obj_get_parent(obj);
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 fbf1 	bl	8009b70 <lv_obj_get_parent>
 800938e:	60b8      	str	r0, [r7, #8]
    }

    switch(align) {
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	2b14      	cmp	r3, #20
 8009394:	f200 8195 	bhi.w	80096c2 <lv_obj_align_origo+0x38a>
 8009398:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <lv_obj_align_origo+0x68>)
 800939a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939e:	bf00      	nop
 80093a0:	080093f5 	.word	0x080093f5
 80093a4:	0800942b 	.word	0x0800942b
 80093a8:	0800943d 	.word	0x0800943d
 80093ac:	08009461 	.word	0x08009461
 80093b0:	0800947d 	.word	0x0800947d
 80093b4:	08009499 	.word	0x08009499
 80093b8:	080094c7 	.word	0x080094c7
 80093bc:	080094ed 	.word	0x080094ed
 80093c0:	08009511 	.word	0x08009511
 80093c4:	0800953f 	.word	0x0800953f
 80093c8:	08009551 	.word	0x08009551
 80093cc:	08009575 	.word	0x08009575
 80093d0:	08009591 	.word	0x08009591
 80093d4:	080095ad 	.word	0x080095ad
 80093d8:	080095db 	.word	0x080095db
 80093dc:	08009601 	.word	0x08009601
 80093e0:	08009613 	.word	0x08009613
 80093e4:	08009637 	.word	0x08009637
 80093e8:	08009653 	.word	0x08009653
 80093ec:	0800966f 	.word	0x0800966f
 80093f0:	0800969d 	.word	0x0800969d
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80093f4:	68b8      	ldr	r0, [r7, #8]
 80093f6:	f000 fc25 	bl	8009c44 <lv_obj_get_width>
 80093fa:	4603      	mov	r3, r0
 80093fc:	0fda      	lsrs	r2, r3, #31
 80093fe:	4413      	add	r3, r2
 8009400:	105b      	asrs	r3, r3, #1
 8009402:	b21b      	sxth	r3, r3
 8009404:	b29a      	uxth	r2, r3
 8009406:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	b29b      	uxth	r3, r3
 800940c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800940e:	68b8      	ldr	r0, [r7, #8]
 8009410:	f000 fc26 	bl	8009c60 <lv_obj_get_height>
 8009414:	4603      	mov	r3, r0
 8009416:	0fda      	lsrs	r2, r3, #31
 8009418:	4413      	add	r3, r2
 800941a:	105b      	asrs	r3, r3, #1
 800941c:	b21b      	sxth	r3, r3
 800941e:	b29a      	uxth	r2, r3
 8009420:	8c3b      	ldrh	r3, [r7, #32]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	b29b      	uxth	r3, r3
 8009426:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009428:	e14b      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = -obj_w_half;
 800942a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800942c:	425b      	negs	r3, r3
 800942e:	b29b      	uxth	r3, r3
 8009430:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009432:	8c3b      	ldrh	r3, [r7, #32]
 8009434:	425b      	negs	r3, r3
 8009436:	b29b      	uxth	r3, r3
 8009438:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800943a:	e142      	b.n	80096c2 <lv_obj_align_origo+0x38a>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800943c:	68b8      	ldr	r0, [r7, #8]
 800943e:	f000 fc01 	bl	8009c44 <lv_obj_get_width>
 8009442:	4603      	mov	r3, r0
 8009444:	0fda      	lsrs	r2, r3, #31
 8009446:	4413      	add	r3, r2
 8009448:	105b      	asrs	r3, r3, #1
 800944a:	b21b      	sxth	r3, r3
 800944c:	b29a      	uxth	r2, r3
 800944e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	b29b      	uxth	r3, r3
 8009454:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009456:	8c3b      	ldrh	r3, [r7, #32]
 8009458:	425b      	negs	r3, r3
 800945a:	b29b      	uxth	r3, r3
 800945c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800945e:	e130      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8009460:	68b8      	ldr	r0, [r7, #8]
 8009462:	f000 fbef 	bl	8009c44 <lv_obj_get_width>
 8009466:	4603      	mov	r3, r0
 8009468:	b29a      	uxth	r2, r3
 800946a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	b29b      	uxth	r3, r3
 8009470:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009472:	8c3b      	ldrh	r3, [r7, #32]
 8009474:	425b      	negs	r3, r3
 8009476:	b29b      	uxth	r3, r3
 8009478:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800947a:	e122      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = -obj_w_half;
 800947c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800947e:	425b      	negs	r3, r3
 8009480:	b29b      	uxth	r3, r3
 8009482:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8009484:	68b8      	ldr	r0, [r7, #8]
 8009486:	f000 fbeb 	bl	8009c60 <lv_obj_get_height>
 800948a:	4603      	mov	r3, r0
 800948c:	b29a      	uxth	r2, r3
 800948e:	8c3b      	ldrh	r3, [r7, #32]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	b29b      	uxth	r3, r3
 8009494:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009496:	e114      	b.n	80096c2 <lv_obj_align_origo+0x38a>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8009498:	68b8      	ldr	r0, [r7, #8]
 800949a:	f000 fbd3 	bl	8009c44 <lv_obj_get_width>
 800949e:	4603      	mov	r3, r0
 80094a0:	0fda      	lsrs	r2, r3, #31
 80094a2:	4413      	add	r3, r2
 80094a4:	105b      	asrs	r3, r3, #1
 80094a6:	b21b      	sxth	r3, r3
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 80094b2:	68b8      	ldr	r0, [r7, #8]
 80094b4:	f000 fbd4 	bl	8009c60 <lv_obj_get_height>
 80094b8:	4603      	mov	r3, r0
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	8c3b      	ldrh	r3, [r7, #32]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80094c4:	e0fd      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 80094c6:	68b8      	ldr	r0, [r7, #8]
 80094c8:	f000 fbbc 	bl	8009c44 <lv_obj_get_width>
 80094cc:	4603      	mov	r3, r0
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 80094d8:	68b8      	ldr	r0, [r7, #8]
 80094da:	f000 fbc1 	bl	8009c60 <lv_obj_get_height>
 80094de:	4603      	mov	r3, r0
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	8c3b      	ldrh	r3, [r7, #32]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80094ea:	e0ea      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = -obj_w_half;
 80094ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094ee:	425b      	negs	r3, r3
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80094f4:	68b8      	ldr	r0, [r7, #8]
 80094f6:	f000 fbb3 	bl	8009c60 <lv_obj_get_height>
 80094fa:	4603      	mov	r3, r0
 80094fc:	0fda      	lsrs	r2, r3, #31
 80094fe:	4413      	add	r3, r2
 8009500:	105b      	asrs	r3, r3, #1
 8009502:	b21b      	sxth	r3, r3
 8009504:	b29a      	uxth	r2, r3
 8009506:	8c3b      	ldrh	r3, [r7, #32]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	b29b      	uxth	r3, r3
 800950c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800950e:	e0d8      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8009510:	68b8      	ldr	r0, [r7, #8]
 8009512:	f000 fb97 	bl	8009c44 <lv_obj_get_width>
 8009516:	4603      	mov	r3, r0
 8009518:	b29a      	uxth	r2, r3
 800951a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	b29b      	uxth	r3, r3
 8009520:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8009522:	68b8      	ldr	r0, [r7, #8]
 8009524:	f000 fb9c 	bl	8009c60 <lv_obj_get_height>
 8009528:	4603      	mov	r3, r0
 800952a:	0fda      	lsrs	r2, r3, #31
 800952c:	4413      	add	r3, r2
 800952e:	105b      	asrs	r3, r3, #1
 8009530:	b21b      	sxth	r3, r3
 8009532:	b29a      	uxth	r2, r3
 8009534:	8c3b      	ldrh	r3, [r7, #32]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	b29b      	uxth	r3, r3
 800953a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800953c:	e0c1      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = -obj_w_half;
 800953e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009540:	425b      	negs	r3, r3
 8009542:	b29b      	uxth	r3, r3
 8009544:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009546:	8c3b      	ldrh	r3, [r7, #32]
 8009548:	425b      	negs	r3, r3
 800954a:	b29b      	uxth	r3, r3
 800954c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800954e:	e0b8      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f000 fb77 	bl	8009c44 <lv_obj_get_width>
 8009556:	4603      	mov	r3, r0
 8009558:	0fda      	lsrs	r2, r3, #31
 800955a:	4413      	add	r3, r2
 800955c:	105b      	asrs	r3, r3, #1
 800955e:	b21b      	sxth	r3, r3
 8009560:	b29a      	uxth	r2, r3
 8009562:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	b29b      	uxth	r3, r3
 8009568:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 800956a:	8c3b      	ldrh	r3, [r7, #32]
 800956c:	425b      	negs	r3, r3
 800956e:	b29b      	uxth	r3, r3
 8009570:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009572:	e0a6      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8009574:	68b8      	ldr	r0, [r7, #8]
 8009576:	f000 fb65 	bl	8009c44 <lv_obj_get_width>
 800957a:	4603      	mov	r3, r0
 800957c:	b29a      	uxth	r2, r3
 800957e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	b29b      	uxth	r3, r3
 8009584:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009586:	8c3b      	ldrh	r3, [r7, #32]
 8009588:	425b      	negs	r3, r3
 800958a:	b29b      	uxth	r3, r3
 800958c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800958e:	e098      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = -obj_w_half;
 8009590:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009592:	425b      	negs	r3, r3
 8009594:	b29b      	uxth	r3, r3
 8009596:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8009598:	68b8      	ldr	r0, [r7, #8]
 800959a:	f000 fb61 	bl	8009c60 <lv_obj_get_height>
 800959e:	4603      	mov	r3, r0
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	8c3b      	ldrh	r3, [r7, #32]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80095aa:	e08a      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80095ac:	68b8      	ldr	r0, [r7, #8]
 80095ae:	f000 fb49 	bl	8009c44 <lv_obj_get_width>
 80095b2:	4603      	mov	r3, r0
 80095b4:	0fda      	lsrs	r2, r3, #31
 80095b6:	4413      	add	r3, r2
 80095b8:	105b      	asrs	r3, r3, #1
 80095ba:	b21b      	sxth	r3, r3
 80095bc:	b29a      	uxth	r2, r3
 80095be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 80095c6:	68b8      	ldr	r0, [r7, #8]
 80095c8:	f000 fb4a 	bl	8009c60 <lv_obj_get_height>
 80095cc:	4603      	mov	r3, r0
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	8c3b      	ldrh	r3, [r7, #32]
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80095d8:	e073      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 80095da:	68b8      	ldr	r0, [r7, #8]
 80095dc:	f000 fb32 	bl	8009c44 <lv_obj_get_width>
 80095e0:	4603      	mov	r3, r0
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 80095ec:	68b8      	ldr	r0, [r7, #8]
 80095ee:	f000 fb37 	bl	8009c60 <lv_obj_get_height>
 80095f2:	4603      	mov	r3, r0
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	8c3b      	ldrh	r3, [r7, #32]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80095fe:	e060      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -obj_w_half;
 8009600:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009602:	425b      	negs	r3, r3
 8009604:	b29b      	uxth	r3, r3
 8009606:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009608:	8c3b      	ldrh	r3, [r7, #32]
 800960a:	425b      	negs	r3, r3
 800960c:	b29b      	uxth	r3, r3
 800960e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009610:	e057      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -obj_w_half;
 8009612:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009614:	425b      	negs	r3, r3
 8009616:	b29b      	uxth	r3, r3
 8009618:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800961a:	68b8      	ldr	r0, [r7, #8]
 800961c:	f000 fb20 	bl	8009c60 <lv_obj_get_height>
 8009620:	4603      	mov	r3, r0
 8009622:	0fda      	lsrs	r2, r3, #31
 8009624:	4413      	add	r3, r2
 8009626:	105b      	asrs	r3, r3, #1
 8009628:	b21b      	sxth	r3, r3
 800962a:	b29a      	uxth	r2, r3
 800962c:	8c3b      	ldrh	r3, [r7, #32]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	b29b      	uxth	r3, r3
 8009632:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009634:	e045      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -obj_w_half;
 8009636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009638:	425b      	negs	r3, r3
 800963a:	b29b      	uxth	r3, r3
 800963c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 800963e:	68b8      	ldr	r0, [r7, #8]
 8009640:	f000 fb0e 	bl	8009c60 <lv_obj_get_height>
 8009644:	4603      	mov	r3, r0
 8009646:	b29a      	uxth	r2, r3
 8009648:	8c3b      	ldrh	r3, [r7, #32]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	b29b      	uxth	r3, r3
 800964e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8009650:	e037      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8009652:	68b8      	ldr	r0, [r7, #8]
 8009654:	f000 faf6 	bl	8009c44 <lv_obj_get_width>
 8009658:	4603      	mov	r3, r0
 800965a:	b29a      	uxth	r2, r3
 800965c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	b29b      	uxth	r3, r3
 8009662:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8009664:	8c3b      	ldrh	r3, [r7, #32]
 8009666:	425b      	negs	r3, r3
 8009668:	b29b      	uxth	r3, r3
 800966a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800966c:	e029      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800966e:	68b8      	ldr	r0, [r7, #8]
 8009670:	f000 fae8 	bl	8009c44 <lv_obj_get_width>
 8009674:	4603      	mov	r3, r0
 8009676:	b29a      	uxth	r2, r3
 8009678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	b29b      	uxth	r3, r3
 800967e:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8009680:	68b8      	ldr	r0, [r7, #8]
 8009682:	f000 faed 	bl	8009c60 <lv_obj_get_height>
 8009686:	4603      	mov	r3, r0
 8009688:	0fda      	lsrs	r2, r3, #31
 800968a:	4413      	add	r3, r2
 800968c:	105b      	asrs	r3, r3, #1
 800968e:	b21b      	sxth	r3, r3
 8009690:	b29a      	uxth	r2, r3
 8009692:	8c3b      	ldrh	r3, [r7, #32]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	b29b      	uxth	r3, r3
 8009698:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800969a:	e012      	b.n	80096c2 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800969c:	68b8      	ldr	r0, [r7, #8]
 800969e:	f000 fad1 	bl	8009c44 <lv_obj_get_width>
 80096a2:	4603      	mov	r3, r0
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 80096ae:	68b8      	ldr	r0, [r7, #8]
 80096b0:	f000 fad6 	bl	8009c60 <lv_obj_get_height>
 80096b4:	4603      	mov	r3, r0
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	8c3b      	ldrh	r3, [r7, #32]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	b29b      	uxth	r3, r3
 80096be:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80096c0:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 fa54 	bl	8009b70 <lv_obj_get_parent>
 80096c8:	61f8      	str	r0, [r7, #28]
    lv_coord_t base_abs_x = base->coords.x1;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	8a1b      	ldrh	r3, [r3, #16]
 80096ce:	837b      	strh	r3, [r7, #26]
    lv_coord_t base_abs_y = base->coords.y1;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	8a5b      	ldrh	r3, [r3, #18]
 80096d4:	833b      	strh	r3, [r7, #24]
    lv_coord_t par_abs_x  = par->coords.x1;
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	8a1b      	ldrh	r3, [r3, #16]
 80096da:	82fb      	strh	r3, [r7, #22]
    lv_coord_t par_abs_y  = par->coords.y1;
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	8a5b      	ldrh	r3, [r3, #18]
 80096e0:	82bb      	strh	r3, [r7, #20]
    new_x += x_mod + base_abs_x;
 80096e2:	88ba      	ldrh	r2, [r7, #4]
 80096e4:	8b7b      	ldrh	r3, [r7, #26]
 80096e6:	4413      	add	r3, r2
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096ec:	4413      	add	r3, r2
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y += y_mod + base_abs_y;
 80096f2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80096f4:	8b3b      	ldrh	r3, [r7, #24]
 80096f6:	4413      	add	r3, r2
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096fc:	4413      	add	r3, r2
 80096fe:	b29b      	uxth	r3, r3
 8009700:	84bb      	strh	r3, [r7, #36]	; 0x24
    new_x -= par_abs_x;
 8009702:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009704:	8afb      	ldrh	r3, [r7, #22]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	b29b      	uxth	r3, r3
 800970a:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y -= par_abs_y;
 800970c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800970e:	8abb      	ldrh	r3, [r7, #20]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	b29b      	uxth	r3, r3
 8009714:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_obj_set_pos(obj, new_x, new_y);
 8009716:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800971a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800971e:	4619      	mov	r1, r3
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f7ff fa4d 	bl	8008bc0 <lv_obj_set_pos>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	79fa      	ldrb	r2, [r7, #7]
 800972a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    obj->realign.xofs        = x_mod;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	88ba      	ldrh	r2, [r7, #4]
 8009732:	879a      	strh	r2, [r3, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009738:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.base        = base;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	639a      	str	r2, [r3, #56]	; 0x38
    obj->realign.origo_align = 1;
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8009746:	f043 0302 	orr.w	r3, r3, #2
 800974a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
}
 800974e:	bf00      	nop
 8009750:	3728      	adds	r7, #40	; 0x28
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop

08009758 <lv_obj_realign>:
/**
 * Realign the object based on the last `lv_obj_align` parameters.
 * @param obj pointer to an object
 */
void lv_obj_realign(lv_obj_t * obj)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af02      	add	r7, sp, #8
 800975e:	6078      	str	r0, [r7, #4]
#if LV_USE_OBJ_REALIGN
    if(obj->realign.origo_align)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d010      	beq.n	8009792 <lv_obj_realign+0x3a>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f9b3 003c 	ldrsh.w	r0, [r3, #60]	; 0x3c
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	4603      	mov	r3, r0
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7ff fdd4 	bl	8009338 <lv_obj_align_origo>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
#else
    (void)obj;
    LV_LOG_WARN("lv_obj_realaign: no effect because LV_USE_OBJ_REALIGN = 0");
#endif
}
 8009790:	e00f      	b.n	80097b2 <lv_obj_realign+0x5a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f9b3 003c 	ldrsh.w	r0, [r3, #60]	; 0x3c
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	4603      	mov	r3, r0
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7ff fb5f 	bl	8008e70 <lv_obj_align>
}
 80097b2:	bf00      	nop
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <lv_obj_set_style>:
 * Set a new style for an object
 * @param obj pointer to an object
 * @param style_p pointer to the new style
 */
void lv_obj_set_style(lv_obj_t * obj, const lv_style_t * style)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
    obj->style_p = style;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	683a      	ldr	r2, [r7, #0]
 80097c8:	629a      	str	r2, [r3, #40]	; 0x28

    /*Send a signal about style change to every children with NULL style*/
    refresh_children_style(obj);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fc71 	bl	800a0b2 <refresh_children_style>

    /*Notify the object about the style change too*/
    lv_obj_refresh_style(obj);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f804 	bl	80097de <lv_obj_refresh_style>
}
 80097d6:	bf00      	nop
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <lv_obj_refresh_style>:
/**
 * Notify an object about its style is modified
 * @param obj pointer to an object
 */
void lv_obj_refresh_style(lv_obj_t * obj)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
    lv_obj_invalidate(obj);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff f8eb 	bl	80089c2 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	2200      	movs	r2, #0
 80097f2:	2104      	movs	r1, #4
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff f8e2 	bl	80089c2 <lv_obj_invalidate>
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <lv_obj_set_click>:
 * Enable or disable the clicking of an object
 * @param obj pointer to an object
 * @param en true: make the object clickable
 */
void lv_obj_set_click(lv_obj_t * obj, bool en)
{
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	70fb      	strb	r3, [r7, #3]
    obj->click = (en == true ? 1 : 0);
 8009812:	78f9      	ldrb	r1, [r7, #3]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800981a:	f361 0300 	bfi	r3, r1, #0, #1
 800981e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8009822:	bf00      	nop
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <lv_obj_set_drag>:
 * Enable the dragging of an object
 * @param obj pointer to an object
 * @param en true: make the object dragable
 */
void lv_obj_set_drag(lv_obj_t * obj, bool en)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b082      	sub	sp, #8
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	460b      	mov	r3, r1
 8009838:	70fb      	strb	r3, [r7, #3]
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <lv_obj_set_drag+0x1a>
 8009840:	2101      	movs	r1, #1
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff ffdf 	bl	8009806 <lv_obj_set_click>
    obj->drag = (en == true ? 1 : 0);
 8009848:	78f9      	ldrb	r1, [r7, #3]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8009850:	f361 0341 	bfi	r3, r1, #1, #1
 8009854:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <lv_obj_set_drag_throw>:
 * Enable the throwing of an object after is is dragged
 * @param obj pointer to an object
 * @param en true: enable the drag throw
 */
void lv_obj_set_drag_throw(lv_obj_t * obj, bool en)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
    obj->drag_throw = (en == true ? 1 : 0);
 800986c:	78f9      	ldrb	r1, [r7, #3]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8009874:	f361 0382 	bfi	r3, r1, #2, #1
 8009878:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <lv_obj_set_parent_event>:
 * Propagate the events to the parent too
 * @param obj pointer to an object
 * @param en true: enable the event propagation
 */
void lv_obj_set_parent_event(lv_obj_t * obj, bool en)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
    obj->parent_event = (en == true ? 1 : 0);
 8009894:	78f9      	ldrb	r1, [r7, #3]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800989c:	f361 13c7 	bfi	r3, r1, #7, #1
 80098a0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <lv_obj_set_protect>:
 * Set a bit or bits in the protect filed
 * @param obj pointer to an object
 * @param prot 'OR'-ed values from `lv_protect_t`
 */
void lv_obj_set_protect(lv_obj_t * obj, uint8_t prot)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	70fb      	strb	r3, [r7, #3]
    obj->protect |= prot;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80098c2:	78fb      	ldrb	r3, [r7, #3]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80098ce:	bf00      	nop
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <lv_obj_clear_protect>:
 * Clear a bit or bits in the protect filed
 * @param obj pointer to an object
 * @param prot 'OR'-ed values from `lv_protect_t`
 */
void lv_obj_clear_protect(lv_obj_t * obj, uint8_t prot)
{
 80098da:	b480      	push	{r7}
 80098dc:	b083      	sub	sp, #12
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
    prot = (~prot) & 0xFF;
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	43db      	mvns	r3, r3
 80098ea:	70fb      	strb	r3, [r7, #3]
    obj->protect &= prot;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	4013      	ands	r3, r2
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80098fe:	bf00      	nop
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <lv_obj_set_event_cb>:
 * Used by the user to react on event which happens with the object.
 * @param obj pointer to an object
 * @param event_cb the new event function
 */
void lv_obj_set_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb)
{
 800990a:	b480      	push	{r7}
 800990c:	b083      	sub	sp, #12
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
    obj->event_cb = event_cb;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	619a      	str	r2, [r3, #24]
}
 800991a:	bf00      	nop
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <lv_event_send>:
 * @param event the type of the event from `lv_event_t`
 * @param data arbitrary data depending on the object type and the event. (Usually `NULL`)
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send(lv_obj_t * obj, lv_event_t event, const void * data)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b086      	sub	sp, #24
 800992a:	af00      	add	r7, sp, #0
 800992c:	60f8      	str	r0, [r7, #12]
 800992e:	460b      	mov	r3, r1
 8009930:	607a      	str	r2, [r7, #4]
 8009932:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <lv_event_send+0x18>
 800993a:	2301      	movs	r3, #1
 800993c:	e009      	b.n	8009952 <lv_event_send+0x2c>

    lv_res_t res;
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6998      	ldr	r0, [r3, #24]
 8009942:	7afa      	ldrb	r2, [r7, #11]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68f9      	ldr	r1, [r7, #12]
 8009948:	f000 f808 	bl	800995c <lv_event_send_func>
 800994c:	4603      	mov	r3, r0
 800994e:	75fb      	strb	r3, [r7, #23]
    return res;
 8009950:	7dfb      	ldrb	r3, [r7, #23]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <lv_event_send_func>:
 * @param event an event
 * @param data pointer to a custom data
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send_func(lv_event_cb_t event_xcb, lv_obj_t * obj, lv_event_t event, const void * data)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08a      	sub	sp, #40	; 0x28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	603b      	str	r3, [r7, #0]
 8009968:	4613      	mov	r3, r2
 800996a:	71fb      	strb	r3, [r7, #7]
    /* Build a simple linked list from the objects used in the events
     * It's important to know if an this object was deleted by a nested event
     * called from this `even_cb`. */
    lv_event_temp_data_t event_temp_data;
    event_temp_data.obj     = obj;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	613b      	str	r3, [r7, #16]
    event_temp_data.deleted = false;
 8009970:	2300      	movs	r3, #0
 8009972:	753b      	strb	r3, [r7, #20]
    event_temp_data.prev    = NULL;
 8009974:	2300      	movs	r3, #0
 8009976:	61bb      	str	r3, [r7, #24]

    if(event_temp_data_head) {
 8009978:	4b2b      	ldr	r3, [pc, #172]	; (8009a28 <lv_event_send_func+0xcc>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <lv_event_send_func+0x2a>
        event_temp_data.prev = event_temp_data_head;
 8009980:	4b29      	ldr	r3, [pc, #164]	; (8009a28 <lv_event_send_func+0xcc>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	61bb      	str	r3, [r7, #24]
    }
    event_temp_data_head = &event_temp_data;
 8009986:	4a28      	ldr	r2, [pc, #160]	; (8009a28 <lv_event_send_func+0xcc>)
 8009988:	f107 0310 	add.w	r3, r7, #16
 800998c:	6013      	str	r3, [r2, #0]

    const void * event_act_data_save = event_act_data;
 800998e:	4b27      	ldr	r3, [pc, #156]	; (8009a2c <lv_event_send_func+0xd0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	627b      	str	r3, [r7, #36]	; 0x24
    event_act_data                   = data;
 8009994:	4a25      	ldr	r2, [pc, #148]	; (8009a2c <lv_event_send_func+0xd0>)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	6013      	str	r3, [r2, #0]

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 800999a:	f7fe fb89 	bl	80080b0 <lv_indev_get_act>
 800999e:	6238      	str	r0, [r7, #32]
    if(indev_act) {
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d009      	beq.n	80099ba <lv_event_send_func+0x5e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d005      	beq.n	80099ba <lv_event_send_func+0x5e>
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	6a3a      	ldr	r2, [r7, #32]
 80099b4:	79f9      	ldrb	r1, [r7, #7]
 80099b6:	4610      	mov	r0, r2
 80099b8:	4798      	blx	r3
    }

    /*Call the event callback itself*/
    if(event_xcb) event_xcb(obj, event);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d004      	beq.n	80099ca <lv_event_send_func+0x6e>
 80099c0:	79fa      	ldrb	r2, [r7, #7]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4611      	mov	r1, r2
 80099c6:	68b8      	ldr	r0, [r7, #8]
 80099c8:	4798      	blx	r3

    /*Restore the event data*/
    event_act_data = event_act_data_save;
 80099ca:	4a18      	ldr	r2, [pc, #96]	; (8009a2c <lv_event_send_func+0xd0>)
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	6013      	str	r3, [r2, #0]

    /*Remove this element from the list*/
    event_temp_data_head = event_temp_data_head->prev;
 80099d0:	4b15      	ldr	r3, [pc, #84]	; (8009a28 <lv_event_send_func+0xcc>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	4a14      	ldr	r2, [pc, #80]	; (8009a28 <lv_event_send_func+0xcc>)
 80099d8:	6013      	str	r3, [r2, #0]

    if(event_temp_data.deleted) {
 80099da:	7d3b      	ldrb	r3, [r7, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <lv_event_send_func+0x88>
        return LV_RES_INV;
 80099e0:	2300      	movs	r3, #0
 80099e2:	e01d      	b.n	8009a20 <lv_event_send_func+0xc4>
    }

    if(obj) {
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d019      	beq.n	8009a1e <lv_event_send_func+0xc2>
        if(obj->parent_event && obj->par) {
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80099f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d011      	beq.n	8009a1e <lv_event_send_func+0xc2>
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00d      	beq.n	8009a1e <lv_event_send_func+0xc2>
            lv_res_t res = lv_event_send(obj->par, event, data);
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	79f9      	ldrb	r1, [r7, #7]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff ff8b 	bl	8009926 <lv_event_send>
 8009a10:	4603      	mov	r3, r0
 8009a12:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) {
 8009a14:	7ffb      	ldrb	r3, [r7, #31]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d001      	beq.n	8009a1e <lv_event_send_func+0xc2>
                return LV_RES_INV;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	e000      	b.n	8009a20 <lv_event_send_func+0xc4>
            }
        }
    }

    return LV_RES_OK;
 8009a1e:	2301      	movs	r3, #1
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3728      	adds	r7, #40	; 0x28
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20017764 	.word	0x20017764
 8009a2c:	20017768 	.word	0x20017768

08009a30 <lv_event_get_data>:
/**
 * Get the `data` parameter of the current event
 * @return the `data` parameter
 */
const void * lv_event_get_data(void)
{
 8009a30:	b480      	push	{r7}
 8009a32:	af00      	add	r7, sp, #0
    return event_act_data;
 8009a34:	4b03      	ldr	r3, [pc, #12]	; (8009a44 <lv_event_get_data+0x14>)
 8009a36:	681b      	ldr	r3, [r3, #0]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	20017768 	.word	0x20017768

08009a48 <lv_obj_set_signal_cb>:
 * Always call the previous signal function in the new.
 * @param obj pointer to an object
 * @param cb the new signal function
 */
void lv_obj_set_signal_cb(lv_obj_t * obj, lv_signal_cb_t signal_cb)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
    obj->signal_cb = signal_cb;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	61da      	str	r2, [r3, #28]
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <lv_obj_set_design_cb>:
 * Set a new design function for an object
 * @param obj pointer to an object
 * @param design_cb the new design function
 */
void lv_obj_set_design_cb(lv_obj_t * obj, lv_design_cb_t design_cb)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
    obj->design_cb = design_cb;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	621a      	str	r2, [r3, #32]
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <lv_obj_allocate_ext_attr>:
 * @param obj pointer to an object
 * @param ext_size the size of the new ext. data
 * @return Normal pointer to the allocated ext
 */
void * lv_obj_allocate_ext_attr(lv_obj_t * obj, uint16_t ext_size)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	807b      	strh	r3, [r7, #2]
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	887a      	ldrh	r2, [r7, #2]
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f00c fdc9 	bl	801662c <lv_mem_realloc>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	625a      	str	r2, [r3, #36]	; 0x24

    return (void *)obj->ext_attr;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <lv_obj_refresh_ext_draw_pad>:
/**
 * Send a 'LV_SIGNAL_REFR_EXT_SIZE' signal to the object
 * @param obj pointer to an object
 */
void lv_obj_refresh_ext_draw_pad(lv_obj_t * obj)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
    obj->ext_draw_pad = 0;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	869a      	strh	r2, [r3, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2105      	movs	r1, #5
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	4798      	blx	r3

    lv_obj_invalidate(obj);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7fe ff7b 	bl	80089c2 <lv_obj_invalidate>
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <lv_obj_get_screen>:
 * Return with the screen of an object
 * @param obj pointer to an object
 * @return pointer to a screen
 */
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
    const lv_obj_t * par = obj;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_p;

    do {
        act_p = par;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	60bb      	str	r3, [r7, #8]
        par   = lv_obj_get_parent(act_p);
 8009ae4:	68b8      	ldr	r0, [r7, #8]
 8009ae6:	f000 f843 	bl	8009b70 <lv_obj_get_parent>
 8009aea:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1f6      	bne.n	8009ae0 <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_p;
 8009af2:	68bb      	ldr	r3, [r7, #8]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <lv_obj_get_disp>:
 * Get the display of an object
 * @param scr pointer to an object
 * @return pointer the object's display
 */
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
    const lv_obj_t * scr;

    if(obj->par == NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d102      	bne.n	8009b12 <lv_obj_get_disp+0x16>
        scr = obj; /*`obj` is a screen*/
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	e003      	b.n	8009b1a <lv_obj_get_disp+0x1e>
    else
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff ffde 	bl	8009ad4 <lv_obj_get_screen>
 8009b18:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8009b1a:	4814      	ldr	r0, [pc, #80]	; (8009b6c <lv_obj_get_disp+0x70>)
 8009b1c:	f00c fb9e 	bl	801625c <lv_ll_get_head>
 8009b20:	6138      	str	r0, [r7, #16]
 8009b22:	e01b      	b.n	8009b5c <lv_obj_get_disp+0x60>
    {
        lv_obj_t * s;
        LV_LL_READ(d->scr_ll, s)
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	3328      	adds	r3, #40	; 0x28
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f00c fb97 	bl	801625c <lv_ll_get_head>
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	e00c      	b.n	8009b4c <lv_obj_get_disp+0x50>
        {
            if(s == scr) return d;
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d101      	bne.n	8009b3e <lv_obj_get_disp+0x42>
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	e012      	b.n	8009b64 <lv_obj_get_disp+0x68>
        LV_LL_READ(d->scr_ll, s)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	3328      	adds	r3, #40	; 0x28
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f00c fbaf 	bl	80162a8 <lv_ll_get_next>
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1ef      	bne.n	8009b32 <lv_obj_get_disp+0x36>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8009b52:	6939      	ldr	r1, [r7, #16]
 8009b54:	4805      	ldr	r0, [pc, #20]	; (8009b6c <lv_obj_get_disp+0x70>)
 8009b56:	f00c fba7 	bl	80162a8 <lv_ll_get_next>
 8009b5a:	6138      	str	r0, [r7, #16]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e0      	bne.n	8009b24 <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    return NULL;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	2001bb58 	.word	0x2001bb58

08009b70 <lv_obj_get_parent>:
 * Returns with the parent of an object
 * @param obj pointer to an object
 * @return pointer to the parent of  'obj'
 */
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
    return obj->par;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <lv_obj_get_child>:
 * @param child NULL at first call to get the next children
 *                  and the previous return value later
 * @return the child after 'act_child' or NULL if no more child
 */
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, const lv_obj_t * child)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
    lv_obj_t * result = NULL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]

    if(child == NULL) {
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d106      	bne.n	8009baa <lv_obj_get_child+0x22>
        result = lv_ll_get_head(&obj->child_ll);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f00c fb5b 	bl	801625c <lv_ll_get_head>
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	e006      	b.n	8009bb8 <lv_obj_get_child+0x30>
    } else {
        result = lv_ll_get_next(&obj->child_ll, child);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3304      	adds	r3, #4
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f00c fb79 	bl	80162a8 <lv_ll_get_next>
 8009bb6:	60f8      	str	r0, [r7, #12]
    }

    return result;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <lv_obj_get_coords>:
 * Copy the coordinates of an object to an area
 * @param obj pointer to an object
 * @param cords_p pointer to an area to store the coordinates
 */
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * cords_p)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
    lv_area_copy(cords_p, &obj->coords);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3310      	adds	r3, #16
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6838      	ldr	r0, [r7, #0]
 8009bd4:	f7fe fb4c 	bl	8008270 <lv_area_copy>
}
 8009bd8:	bf00      	nop
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <lv_obj_get_x>:
 * Get the x coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the left side of its parent
 */
lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff ffc1 	bl	8009b70 <lv_obj_get_parent>
 8009bee:	60f8      	str	r0, [r7, #12]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	817b      	strh	r3, [r7, #10]

    return rel_x;
 8009c06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <lv_obj_get_y>:
 * Get the y coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the top of its parent
 */
lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b084      	sub	sp, #16
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7ff ffa8 	bl	8009b70 <lv_obj_get_parent>
 8009c20:	60f8      	str	r0, [r7, #12]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	817b      	strh	r3, [r7, #10]

    return rel_y;
 8009c38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <lv_obj_get_width>:
 * Get the width of an object
 * @param obj pointer to an object
 * @return the width
 */
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
    return lv_area_get_width(&obj->coords);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3310      	adds	r3, #16
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fb1b 	bl	800828c <lv_area_get_width>
 8009c56:	4603      	mov	r3, r0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <lv_obj_get_height>:
 * Get the height of an object
 * @param obj pointer to an object
 * @return the height
 */
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
    return lv_area_get_height(&obj->coords);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3310      	adds	r3, #16
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fe fb24 	bl	80082ba <lv_area_get_height>
 8009c72:	4603      	mov	r3, r0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <lv_obj_get_auto_realign>:
 * Get the automatic realign property of the object.
 * @param obj pointer to an object
 * @return  true: auto realign is enabled; false: auto realign is disabled
 */
bool lv_obj_get_auto_realign(lv_obj_t * obj)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
#if LV_USE_OBJ_REALIGN
    return obj->realign.auto_realign ? true : false;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bf14      	ite	ne
 8009c92:	2301      	movne	r3, #1
 8009c94:	2300      	moveq	r3, #0
 8009c96:	b2db      	uxtb	r3, r3
#else
    (void)obj;
    return false;
#endif
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <lv_obj_get_style>:
 * Get the style pointer of an object (if NULL get style of the parent)
 * @param obj pointer to an object
 * @return pointer to a style
 */
const lv_style_t * lv_obj_get_style(const lv_obj_t * obj)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
    const lv_style_t * style_act = obj->style_p;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb0:	617b      	str	r3, [r7, #20]
    if(style_act == NULL) {
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d12c      	bne.n	8009d12 <lv_obj_get_style+0x6e>
        lv_obj_t * par = obj->par;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	613b      	str	r3, [r7, #16]

        while(par) {
 8009cbe:	e025      	b.n	8009d0c <lv_obj_get_style+0x68>
            if(par->style_p) {
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01e      	beq.n	8009d06 <lv_obj_get_style+0x62>
                if(par->style_p->glass == 0) {
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d116      	bne.n	8009d06 <lv_obj_get_style+0x62>
#if LV_USE_GROUP == 0
                    style_act = par->style_p;
#else
                    /*If a parent is focused then use then focused style*/
                    lv_group_t * g = lv_obj_get_group(par);
 8009cd8:	6938      	ldr	r0, [r7, #16]
 8009cda:	f000 f8aa 	bl	8009e32 <lv_obj_get_group>
 8009cde:	60f8      	str	r0, [r7, #12]
                    if(lv_group_get_focused(g) == par) {
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7fe f888 	bl	8007df6 <lv_group_get_focused>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d107      	bne.n	8009cfe <lv_obj_get_style+0x5a>
                        style_act = lv_group_mod_style(g, par->style_p);
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f7fe f84e 	bl	8007d96 <lv_group_mod_style>
 8009cfa:	6178      	str	r0, [r7, #20]
                    } else {
                        style_act = par->style_p;
                    }
#endif
                    break;
 8009cfc:	e009      	b.n	8009d12 <lv_obj_get_style+0x6e>
                        style_act = par->style_p;
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d02:	617b      	str	r3, [r7, #20]
                    break;
 8009d04:	e005      	b.n	8009d12 <lv_obj_get_style+0x6e>
                }
            }
            par = par->par;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	613b      	str	r3, [r7, #16]
        while(par) {
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1d6      	bne.n	8009cc0 <lv_obj_get_style+0x1c>
        }
    }
#if LV_USE_GROUP
    if(obj->group_p) {
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00f      	beq.n	8009d3a <lv_obj_get_style+0x96>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe f869 	bl	8007df6 <lv_group_get_focused>
 8009d24:	4602      	mov	r2, r0
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d106      	bne.n	8009d3a <lv_obj_get_style+0x96>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d30:	6979      	ldr	r1, [r7, #20]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe f82f 	bl	8007d96 <lv_group_mod_style>
 8009d38:	6178      	str	r0, [r7, #20]
        }
    }
#endif

    if(style_act == NULL) style_act = &lv_style_plain;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <lv_obj_get_style+0xa0>
 8009d40:	4b03      	ldr	r3, [pc, #12]	; (8009d50 <lv_obj_get_style+0xac>)
 8009d42:	617b      	str	r3, [r7, #20]

    return style_act;
 8009d44:	697b      	ldr	r3, [r7, #20]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	2001ba10 	.word	0x2001ba10

08009d54 <lv_obj_get_hidden>:
 * Get the hidden attribute of an object
 * @param obj pointer to an object
 * @return true: the object is hidden
 */
bool lv_obj_get_hidden(const lv_obj_t * obj)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
    return obj->hidden == 0 ? false : true;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d62:	f003 0310 	and.w	r3, r3, #16
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bf14      	ite	ne
 8009d6c:	2301      	movne	r3, #1
 8009d6e:	2300      	moveq	r3, #0
 8009d70:	b2db      	uxtb	r3, r3
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <lv_obj_get_opa_scale>:
 * Get the opa scale parameter of an object
 * @param obj pointer to an object
 * @return opa scale [0..255]
 */
lv_opa_t lv_obj_get_opa_scale(const lv_obj_t * obj)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
    const lv_obj_t * parent = obj;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	60fb      	str	r3, [r7, #12]

    while(parent) {
 8009d8a:	e00f      	b.n	8009dac <lv_obj_get_opa_scale+0x2e>
        if(parent->opa_scale_en) return parent->opa_scale;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <lv_obj_get_opa_scale+0x26>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009da2:	e007      	b.n	8009db4 <lv_obj_get_opa_scale+0x36>
        parent = lv_obj_get_parent(parent);
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f7ff fee3 	bl	8009b70 <lv_obj_get_parent>
 8009daa:	60f8      	str	r0, [r7, #12]
    while(parent) {
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1ec      	bne.n	8009d8c <lv_obj_get_opa_scale+0xe>
    }

    return LV_OPA_COVER;
 8009db2:	23ff      	movs	r3, #255	; 0xff
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <lv_obj_is_protected>:
 * @param obj pointer to an object
 * @param prot protect bits to test ('OR'ed values of `lv_protect_t`)
 * @return false: none of the given bits are set, true: at least one bit is set
 */
bool lv_obj_is_protected(const lv_obj_t * obj, uint8_t prot)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
    return (obj->protect & prot) == 0 ? false : true;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8009dce:	78fb      	ldrb	r3, [r7, #3]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bf14      	ite	ne
 8009dd8:	2301      	movne	r3, #1
 8009dda:	2300      	moveq	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <lv_obj_get_signal_cb>:
 * Get the signal function of an object
 * @param obj pointer to an object
 * @return the signal function
 */
lv_signal_cb_t lv_obj_get_signal_cb(const lv_obj_t * obj)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
    return obj->signal_cb;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	69db      	ldr	r3, [r3, #28]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <lv_obj_get_design_cb>:
 * Get the design function of an object
 * @param obj pointer to an object
 * @return the design function
 */
lv_design_cb_t lv_obj_get_design_cb(const lv_obj_t * obj)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
    return obj->design_cb;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	370c      	adds	r7, #12
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <lv_obj_get_ext_attr>:
 * @param obj pointer to an object
 * @return the ext pointer but not the dynamic version
 *         Use it as ext->data1, and NOT da(ext)->data1
 */
void * lv_obj_get_ext_attr(const lv_obj_t * obj)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
    return obj->ext_attr;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <lv_obj_get_group>:
 * Get the group of the object
 * @param obj pointer to an object
 * @return the pointer to group of the object
 */
void * lv_obj_get_group(const lv_obj_t * obj)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
    return obj->group_p;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <lv_obj_is_focused>:
 * Tell whether the object is the focused object of a group or not.
 * @param obj pointer to an object
 * @return true: the object is focused, false: the object is not focused or not in a group
 */
bool lv_obj_is_focused(const lv_obj_t * obj)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
    if(obj->group_p) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00a      	beq.n	8009e70 <lv_obj_is_focused+0x26>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fd ffc9 	bl	8007df6 <lv_group_get_focused>
 8009e64:	4602      	mov	r2, r0
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d101      	bne.n	8009e70 <lv_obj_is_focused+0x26>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e000      	b.n	8009e72 <lv_obj_is_focused+0x28>
    }

    return false;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <lv_obj_design>:
 *                                  (return 'true' if yes)
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 * @param return true/false, depends on 'mode'
 */
static bool lv_obj_design(lv_obj_t * obj, const lv_area_t * mask_p, lv_design_mode_t mode)
{
 8009e7a:	b590      	push	{r4, r7, lr}
 8009e7c:	b08b      	sub	sp, #44	; 0x2c
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	4613      	mov	r3, r2
 8009e86:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8009e88:	79fb      	ldrb	r3, [r7, #7]
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d16a      	bne.n	8009f64 <lv_obj_design+0xea>

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3310      	adds	r3, #16
 8009e92:	4619      	mov	r1, r3
 8009e94:	68b8      	ldr	r0, [r7, #8]
 8009e96:	f00b fe32 	bl	8015afe <lv_area_is_in>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f083 0301 	eor.w	r3, r3, #1
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <lv_obj_design+0x30>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	e070      	b.n	8009f8c <lv_obj_design+0x112>

        /*Can cover the area only if fully solid (no opacity)*/
        const lv_style_t * style = lv_obj_get_style(obj);
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f7ff fefa 	bl	8009ca4 <lv_obj_get_style>
 8009eb0:	6238      	str	r0, [r7, #32]
        if(style->body.opa < LV_OPA_MAX) return false;
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	7a1b      	ldrb	r3, [r3, #8]
 8009eb6:	2bfa      	cmp	r3, #250	; 0xfa
 8009eb8:	d801      	bhi.n	8009ebe <lv_obj_design+0x44>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e066      	b.n	8009f8c <lv_obj_design+0x112>

        /* Because of the radius it is not sure the area is covered
         * Check the areas where there is no radius*/
        lv_coord_t r = style->body.radius;
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	88db      	ldrh	r3, [r3, #6]
 8009ec2:	83fb      	strh	r3, [r7, #30]

        if(r == LV_RADIUS_CIRCLE) return false;
 8009ec4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009ec8:	f647 4218 	movw	r2, #31768	; 0x7c18
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d101      	bne.n	8009ed4 <lv_obj_design+0x5a>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	e05b      	b.n	8009f8c <lv_obj_design+0x112>

        lv_area_t area_tmp;

        /*Check horizontally without radius*/
        lv_obj_get_coords(obj, &area_tmp);
 8009ed4:	f107 0314 	add.w	r3, r7, #20
 8009ed8:	4619      	mov	r1, r3
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f7ff fe71 	bl	8009bc2 <lv_obj_get_coords>
        area_tmp.x1 += r;
 8009ee0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	8bfb      	ldrh	r3, [r7, #30]
 8009ee8:	4413      	add	r3, r2
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	b21b      	sxth	r3, r3
 8009eee:	82bb      	strh	r3, [r7, #20]
        area_tmp.x2 -= r;
 8009ef0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	8bfb      	ldrh	r3, [r7, #30]
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	b21b      	sxth	r3, r3
 8009efe:	833b      	strh	r3, [r7, #24]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009f00:	f107 0314 	add.w	r3, r7, #20
 8009f04:	4619      	mov	r1, r3
 8009f06:	68b8      	ldr	r0, [r7, #8]
 8009f08:	f00b fdf9 	bl	8015afe <lv_area_is_in>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	f083 0301 	eor.w	r3, r3, #1
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <lv_obj_design+0xa2>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	e037      	b.n	8009f8c <lv_obj_design+0x112>

        /*Check vertically without radius*/
        lv_obj_get_coords(obj, &area_tmp);
 8009f1c:	f107 0314 	add.w	r3, r7, #20
 8009f20:	4619      	mov	r1, r3
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f7ff fe4d 	bl	8009bc2 <lv_obj_get_coords>
        area_tmp.y1 += r;
 8009f28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	8bfb      	ldrh	r3, [r7, #30]
 8009f30:	4413      	add	r3, r2
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	b21b      	sxth	r3, r3
 8009f36:	82fb      	strh	r3, [r7, #22]
        area_tmp.y2 -= r;
 8009f38:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	8bfb      	ldrh	r3, [r7, #30]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	b21b      	sxth	r3, r3
 8009f46:	837b      	strh	r3, [r7, #26]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009f48:	f107 0314 	add.w	r3, r7, #20
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	68b8      	ldr	r0, [r7, #8]
 8009f50:	f00b fdd5 	bl	8015afe <lv_area_is_in>
 8009f54:	4603      	mov	r3, r0
 8009f56:	f083 0301 	eor.w	r3, r3, #1
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d014      	beq.n	8009f8a <lv_obj_design+0x110>
 8009f60:	2300      	movs	r3, #0
 8009f62:	e013      	b.n	8009f8c <lv_obj_design+0x112>

    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8009f64:	79fb      	ldrb	r3, [r7, #7]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10f      	bne.n	8009f8a <lv_obj_design+0x110>
        const lv_style_t * style = lv_obj_get_style(obj);
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f7ff fe9a 	bl	8009ca4 <lv_obj_get_style>
 8009f70:	6278      	str	r0, [r7, #36]	; 0x24
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f103 0410 	add.w	r4, r3, #16
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7ff ff00 	bl	8009d7e <lv_obj_get_opa_scale>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f82:	68b9      	ldr	r1, [r7, #8]
 8009f84:	4620      	mov	r0, r4
 8009f86:	f005 fbfc 	bl	800f782 <lv_draw_rect>
    }

    return true;
 8009f8a:	2301      	movs	r3, #1
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	372c      	adds	r7, #44	; 0x2c
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd90      	pop	{r4, r7, pc}

08009f94 <lv_obj_signal>:
 * @param sign signal type
 * @param param parameter for the signal (depends on signal type)
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	607a      	str	r2, [r7, #4]
 8009fa0:	72fb      	strb	r3, [r7, #11]
    (void)param;

    lv_res_t res = LV_RES_OK;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	77fb      	strb	r3, [r7, #31]

    const lv_style_t * style = lv_obj_get_style(obj);
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f7ff fe7c 	bl	8009ca4 <lv_obj_get_style>
 8009fac:	61b8      	str	r0, [r7, #24]

    if(sign == LV_SIGNAL_CHILD_CHG) {
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d109      	bne.n	8009fc8 <lv_obj_signal+0x34>
        /*Return 'invalid' if the child change signal is not enabled*/
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff ff00 	bl	8009dbc <lv_obj_is_protected>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d022      	beq.n	800a008 <lv_obj_signal+0x74>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	77fb      	strb	r3, [r7, #31]
 8009fc6:	e01f      	b.n	800a008 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	2b05      	cmp	r3, #5
 8009fcc:	d10d      	bne.n	8009fea <lv_obj_signal+0x56>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	dd14      	ble.n	800a008 <lv_obj_signal+0x74>
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	869a      	strh	r2, [r3, #52]	; 0x34
 8009fe8:	e00e      	b.n	800a008 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8009fea:	7afb      	ldrb	r3, [r7, #11]
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	d103      	bne.n	8009ff8 <lv_obj_signal+0x64>
        lv_obj_refresh_ext_draw_pad(obj);
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f7ff fd5b 	bl	8009aac <lv_obj_refresh_ext_draw_pad>
 8009ff6:	e007      	b.n	800a008 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8009ff8:	7afb      	ldrb	r3, [r7, #11]
 8009ffa:	2b06      	cmp	r3, #6
 8009ffc:	d104      	bne.n	800a008 <lv_obj_signal+0x74>
        lv_obj_type_t * buf = param;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	617b      	str	r3, [r7, #20]
        buf->type[0]        = "lv_obj";
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	4a03      	ldr	r2, [pc, #12]	; (800a014 <lv_obj_signal+0x80>)
 800a006:	601a      	str	r2, [r3, #0]
    }

    return res;
 800a008:	7ffb      	ldrb	r3, [r7, #31]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	0802c850 	.word	0x0802c850

0800a018 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	807b      	strh	r3, [r7, #2]
 800a024:	4613      	mov	r3, r2
 800a026:	803b      	strh	r3, [r7, #0]
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3304      	adds	r3, #4
 800a02c:	4618      	mov	r0, r3
 800a02e:	f00c f915 	bl	801625c <lv_ll_get_head>
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	e036      	b.n	800a0a4 <refresh_children_position+0x8c>
    {
        i->coords.x1 += x_diff;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	887b      	ldrh	r3, [r7, #2]
 800a040:	4413      	add	r3, r2
 800a042:	b29b      	uxth	r3, r3
 800a044:	b21a      	sxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	821a      	strh	r2, [r3, #16]
        i->coords.y1 += y_diff;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a050:	b29a      	uxth	r2, r3
 800a052:	883b      	ldrh	r3, [r7, #0]
 800a054:	4413      	add	r3, r2
 800a056:	b29b      	uxth	r3, r3
 800a058:	b21a      	sxth	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	825a      	strh	r2, [r3, #18]
        i->coords.x2 += x_diff;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a064:	b29a      	uxth	r2, r3
 800a066:	887b      	ldrh	r3, [r7, #2]
 800a068:	4413      	add	r3, r2
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	b21a      	sxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	829a      	strh	r2, [r3, #20]
        i->coords.y2 += y_diff;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a078:	b29a      	uxth	r2, r3
 800a07a:	883b      	ldrh	r3, [r7, #0]
 800a07c:	4413      	add	r3, r2
 800a07e:	b29b      	uxth	r3, r3
 800a080:	b21a      	sxth	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	82da      	strh	r2, [r3, #22]

        refresh_children_position(i, x_diff, y_diff);
 800a086:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a08a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a08e:	4619      	mov	r1, r3
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7ff ffc1 	bl	800a018 <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3304      	adds	r3, #4
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f00c f903 	bl	80162a8 <lv_ll_get_next>
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1c5      	bne.n	800a036 <refresh_children_position+0x1e>
    }
}
 800a0aa:	bf00      	nop
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7ff fd63 	bl	8009b88 <lv_obj_get_child>
 800a0c2:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 800a0c4:	e01a      	b.n	800a0fc <refresh_children_style+0x4a>
        if(child->style_p == NULL) {
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d106      	bne.n	800a0dc <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f7ff ffef 	bl	800a0b2 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f7ff fb82 	bl	80097de <lv_obj_refresh_style>
 800a0da:	e00a      	b.n	800a0f2 <refresh_children_style+0x40>
        } else if(child->style_p->glass) {
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <refresh_children_style+0x40>
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7ff ffe0 	bl	800a0b2 <refresh_children_style>
        }
        child = lv_obj_get_child(obj, child);
 800a0f2:	68f9      	ldr	r1, [r7, #12]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff fd47 	bl	8009b88 <lv_obj_get_child>
 800a0fa:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1e1      	bne.n	800a0c6 <refresh_children_style+0x14>
    }
}
 800a102:	bf00      	nop
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <delete_children>:
/**
 * Called by 'lv_obj_del' to delete the children objects
 * @param obj pointer to an object (all of its children will be deleted)
 */
static void delete_children(lv_obj_t * obj)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b088      	sub	sp, #32
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	3304      	adds	r3, #4
 800a116:	4618      	mov	r0, r3
 800a118:	f00c f8a0 	bl	801625c <lv_ll_get_head>
 800a11c:	61f8      	str	r0, [r7, #28]

    /*Remove from the group; remove before transversing children so that
     * the object still has access to all children during the
     * LV_SIGNAL_DEFOCUS call*/
#if LV_USE_GROUP
    lv_group_t * group = lv_obj_get_group(obj);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7ff fe87 	bl	8009e32 <lv_obj_get_group>
 800a124:	6178      	str	r0, [r7, #20]
    if(group) lv_group_remove_obj(obj);
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00f      	beq.n	800a14c <delete_children+0x42>
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7fd fd68 	bl	8007c02 <lv_group_remove_obj>
#endif

    while(i != NULL) {
 800a132:	e00b      	b.n	800a14c <delete_children+0x42>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3304      	adds	r3, #4
 800a138:	69f9      	ldr	r1, [r7, #28]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f00c f8b4 	bl	80162a8 <lv_ll_get_next>
 800a140:	60f8      	str	r0, [r7, #12]

        /*Call the recursive del to the child too*/
        delete_children(i);
 800a142:	69f8      	ldr	r0, [r7, #28]
 800a144:	f7ff ffe1 	bl	800a10a <delete_children>

        /*Set i to the next node*/
        i = i_next;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	61fb      	str	r3, [r7, #28]
    while(i != NULL) {
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1f0      	bne.n	800a134 <delete_children+0x2a>
    }

    /*Let the suer free the resources used in `LV_EVENT_DELETE`*/
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800a152:	2200      	movs	r2, #0
 800a154:	2113      	movs	r1, #19
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7ff fbe5 	bl	8009926 <lv_event_send>

    lv_event_mark_deleted(obj);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f853 	bl	800a208 <lv_event_mark_deleted>

    /*Remove the animations from this object*/
#if LV_USE_ANIMATION
    lv_anim_del(obj, NULL);
 800a162:	2100      	movs	r1, #0
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f00b f963 	bl	8015430 <lv_anim_del>
#endif

    /* Reset the input devices if
     * the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800a16a:	2000      	movs	r0, #0
 800a16c:	f00b f8a0 	bl	80152b0 <lv_indev_get_next>
 800a170:	61b8      	str	r0, [r7, #24]
    while(indev) {
 800a172:	e026      	b.n	800a1c2 <delete_children+0xb8>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d004      	beq.n	800a188 <delete_children+0x7e>
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	d102      	bne.n	800a18e <delete_children+0x84>
            lv_indev_reset(indev);
 800a188:	69b8      	ldr	r0, [r7, #24]
 800a18a:	f7fd ffae 	bl	80080ea <lv_indev_reset>
        }

        if(indev->proc.types.pointer.last_pressed == obj) {
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	429a      	cmp	r2, r3
 800a196:	d102      	bne.n	800a19e <delete_children+0x94>
            indev->proc.types.pointer.last_pressed = NULL;
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	2200      	movs	r2, #0
 800a19c:	641a      	str	r2, [r3, #64]	; 0x40
        }
#if LV_USE_GROUP
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d108      	bne.n	800a1ba <delete_children+0xb0>
 800a1a8:	f7fe f856 	bl	8008258 <lv_indev_get_obj_act>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d102      	bne.n	800a1ba <delete_children+0xb0>
            lv_indev_reset(indev);
 800a1b4:	69b8      	ldr	r0, [r7, #24]
 800a1b6:	f7fd ff98 	bl	80080ea <lv_indev_reset>
        }
#endif
        indev = lv_indev_get_next(indev);
 800a1ba:	69b8      	ldr	r0, [r7, #24]
 800a1bc:	f00b f878 	bl	80152b0 <lv_indev_get_next>
 800a1c0:	61b8      	str	r0, [r7, #24]
    while(indev) {
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1d5      	bne.n	800a174 <delete_children+0x6a>
    }

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff fcd1 	bl	8009b70 <lv_obj_get_parent>
 800a1ce:	6138      	str	r0, [r7, #16]
    lv_ll_rem(&(par->child_ll), obj);
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f00b ff92 	bl	8016100 <lv_ll_rem>

    /* Clean up the object specific data*/
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d004      	beq.n	800a1fa <delete_children+0xf0>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f00c f9f1 	bl	80165dc <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f00c f9ee 	bl	80165dc <lv_mem_free>
}
 800a200:	bf00      	nop
 800a202:	3720      	adds	r7, #32
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <lv_event_mark_deleted>:

static void lv_event_mark_deleted(lv_obj_t * obj)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
    lv_event_temp_data_t * t = event_temp_data_head;
 800a210:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <lv_event_mark_deleted+0x38>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	60fb      	str	r3, [r7, #12]

    while(t) {
 800a216:	e00a      	b.n	800a22e <lv_event_mark_deleted+0x26>
        if(t->obj == obj) t->deleted = true;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d102      	bne.n	800a228 <lv_event_mark_deleted+0x20>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2201      	movs	r2, #1
 800a226:	711a      	strb	r2, [r3, #4]
        t = t->prev;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	60fb      	str	r3, [r7, #12]
    while(t) {
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1f1      	bne.n	800a218 <lv_event_mark_deleted+0x10>
    }
}
 800a234:	bf00      	nop
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	20017764 	.word	0x20017764

0800a244 <lv_area_copy>:
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 800a24e:	2208      	movs	r2, #8
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f01f fdae 	bl	8029db4 <memcpy>
}
 800a258:	bf00      	nop
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <lv_area_get_width>:
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a26e:	b29a      	uxth	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a276:	b29b      	uxth	r3, r3
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	3301      	adds	r3, #1
 800a27e:	b29b      	uxth	r3, r3
 800a280:	b21b      	sxth	r3, r3
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <lv_area_get_height>:
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	b21b      	sxth	r3, r3
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void lv_refr_init(void)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
    /*Nothing to do*/
}
 800a2c0:	bf00      	nop
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
	...

0800a2cc <lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d102      	bne.n	800a2e2 <lv_inv_area+0x16>
 800a2dc:	f00a ff2a 	bl	8015134 <lv_disp_get_default>
 800a2e0:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 809b 	beq.w	800a420 <lv_inv_area+0x154>

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d107      	bne.n	800a300 <lv_inv_area+0x34>
        disp->inv_p = 0;
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 800a2f6:	f36f 0309 	bfc	r3, #0, #10
 800a2fa:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
        return;
 800a2fe:	e092      	b.n	800a426 <lv_inv_area+0x15a>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 800a300:	2300      	movs	r3, #0
 800a302:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f00a ff1f 	bl	801514c <lv_disp_get_hor_res>
 800a30e:	4603      	mov	r3, r0
 800a310:	b29b      	uxth	r3, r3
 800a312:	3b01      	subs	r3, #1
 800a314:	b29b      	uxth	r3, r3
 800a316:	b21b      	sxth	r3, r3
 800a318:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f00a ff37 	bl	801518e <lv_disp_get_ver_res>
 800a320:	4603      	mov	r3, r0
 800a322:	b29b      	uxth	r3, r3
 800a324:	3b01      	subs	r3, #1
 800a326:	b29b      	uxth	r3, r3
 800a328:	b21b      	sxth	r3, r3
 800a32a:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 800a32c:	f107 0214 	add.w	r2, r7, #20
 800a330:	f107 030c 	add.w	r3, r7, #12
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	4618      	mov	r0, r3
 800a338:	f00b faf6 	bl	8015928 <lv_area_intersect>
 800a33c:	4603      	mov	r3, r0
 800a33e:	777b      	strb	r3, [r7, #29]

    /*The area is truncated to the screen*/
    if(suc != false) {
 800a340:	7f7b      	ldrb	r3, [r7, #29]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d06f      	beq.n	800a426 <lv_inv_area+0x15a>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp_refr->driver, &com_area);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d008      	beq.n	800a360 <lv_inv_area+0x94>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	4a36      	ldr	r2, [pc, #216]	; (800a42c <lv_inv_area+0x160>)
 800a354:	6812      	ldr	r2, [r2, #0]
 800a356:	4610      	mov	r0, r2
 800a358:	f107 020c 	add.w	r2, r7, #12
 800a35c:	4611      	mov	r1, r2
 800a35e:	4798      	blx	r3

        /*Save only if this area is not in one of the saved areas*/
        uint16_t i;
        for(i = 0; i < disp->inv_p; i++) {
 800a360:	2300      	movs	r3, #0
 800a362:	83fb      	strh	r3, [r7, #30]
 800a364:	e010      	b.n	800a388 <lv_inv_area+0xbc>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 800a366:	8bfb      	ldrh	r3, [r7, #30]
 800a368:	3308      	adds	r3, #8
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	441a      	add	r2, r3
 800a370:	f107 030c 	add.w	r3, r7, #12
 800a374:	4611      	mov	r1, r2
 800a376:	4618      	mov	r0, r3
 800a378:	f00b fbc1 	bl	8015afe <lv_area_is_in>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d150      	bne.n	800a424 <lv_inv_area+0x158>
        for(i = 0; i < disp->inv_p; i++) {
 800a382:	8bfb      	ldrh	r3, [r7, #30]
 800a384:	3301      	adds	r3, #1
 800a386:	83fb      	strh	r3, [r7, #30]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a38e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a392:	b29b      	uxth	r3, r3
 800a394:	461a      	mov	r2, r3
 800a396:	8bfb      	ldrh	r3, [r7, #30]
 800a398:	4293      	cmp	r3, r2
 800a39a:	d3e4      	bcc.n	800a366 <lv_inv_area+0x9a>
        }

        /*Save the area*/
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a3a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	2b1f      	cmp	r3, #31
 800a3aa:	d810      	bhi.n	800a3ce <lv_inv_area+0x102>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a3b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	00db      	lsls	r3, r3, #3
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	4413      	add	r3, r2
 800a3c0:	f107 020c 	add.w	r2, r7, #12
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7ff ff3c 	bl	800a244 <lv_area_copy>
 800a3cc:	e016      	b.n	800a3fc <lv_inv_area+0x130>
        } else { /*If no place for the area add the screen*/
            disp->inv_p = 0;
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 800a3d4:	f36f 0309 	bfc	r3, #0, #10
 800a3d8:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a3e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	00db      	lsls	r3, r3, #3
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f107 0214 	add.w	r2, r7, #20
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff ff24 	bl	800a244 <lv_area_copy>
        }
        disp->inv_p++;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a406:	b29b      	uxth	r3, r3
 800a408:	3301      	adds	r3, #1
 800a40a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a40e:	b299      	uxth	r1, r3
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 800a416:	f361 0309 	bfi	r3, r1, #0, #10
 800a41a:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
 800a41e:	e002      	b.n	800a426 <lv_inv_area+0x15a>
    if(!disp) return;
 800a420:	bf00      	nop
 800a422:	e000      	b.n	800a426 <lv_inv_area+0x15a>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 800a424:	bf00      	nop
    }
}
 800a426:	3720      	adds	r7, #32
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20017770 	.word	0x20017770

0800a430 <lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * lv_refr_get_disp_refreshing(void)
{
 800a430:	b480      	push	{r7}
 800a432:	af00      	add	r7, sp, #0
    return disp_refr;
 800a434:	4b03      	ldr	r3, [pc, #12]	; (800a444 <lv_refr_get_disp_refreshing+0x14>)
 800a436:	681b      	ldr	r3, [r3, #0]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	20017770 	.word	0x20017770

0800a448 <lv_disp_refr_task>:
/**
 * Called periodically to handle the refreshing
 * @param task pointer to the task itself
 */
void lv_disp_refr_task(lv_task_t * task)
{
 800a448:	b5b0      	push	{r4, r5, r7, lr}
 800a44a:	b08a      	sub	sp, #40	; 0x28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("lv_refr_task: started");

    uint32_t start = lv_tick_get();
 800a450:	f00a ff5e 	bl	8015310 <lv_tick_get>
 800a454:	61f8      	str	r0, [r7, #28]

    disp_refr = task->user_data;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	4a6c      	ldr	r2, [pc, #432]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a45c:	6013      	str	r3, [r2, #0]

    lv_refr_join_area();
 800a45e:	f000 f8d9 	bl	800a614 <lv_refr_join_area>

    lv_refr_areas();
 800a462:	f000 f973 	bl	800a74c <lv_refr_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 800a466:	4b69      	ldr	r3, [pc, #420]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a46e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a472:	b29b      	uxth	r3, r3
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 80c2 	beq.w	800a5fe <lv_disp_refr_task+0x1b6>
        /*In true double buffered mode copy the refreshed areas to the new VDB to keep it up to
         * date*/
        if(lv_disp_is_true_double_buf(disp_refr)) {
 800a47a:	4b64      	ldr	r3, [pc, #400]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4618      	mov	r0, r3
 800a480:	f00a fef5 	bl	801526e <lv_disp_is_true_double_buf>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	f000 808b 	beq.w	800a5a2 <lv_disp_refr_task+0x15a>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a48c:	4b5f      	ldr	r3, [pc, #380]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4618      	mov	r0, r3
 800a492:	f00a fec9 	bl	8015228 <lv_disp_get_buf>
 800a496:	61b8      	str	r0, [r7, #24]

            /*Flush the content of the VDB*/
            lv_refr_vdb_flush();
 800a498:	f000 fc5e 	bl	800ad58 <lv_refr_vdb_flush>

            /* With true double buffering the flushing should be only the address change of the
             * current frame buffer. Wait until the address change is ready and copy the changed
             * content to the other frame buffer (new active VDB) to keep the buffers synchronized*/
            while(vdb->flushing)
 800a49c:	bf00      	nop
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1f8      	bne.n	800a49e <lv_disp_refr_task+0x56>
                ;

            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	617b      	str	r3, [r7, #20]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	689a      	ldr	r2, [r3, #8]
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d102      	bne.n	800a4c4 <lv_disp_refr_task+0x7c>
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	e001      	b.n	800a4c8 <lv_disp_refr_task+0x80>
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	613b      	str	r3, [r7, #16]

            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800a4ca:	4b50      	ldr	r3, [pc, #320]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f00a fe3c 	bl	801514c <lv_disp_get_hor_res>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	81fb      	strh	r3, [r7, #14]
            uint16_t a;
            for(a = 0; a < disp_refr->inv_p; a++) {
 800a4d8:	2300      	movs	r3, #0
 800a4da:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a4dc:	e056      	b.n	800a58c <lv_disp_refr_task+0x144>
                if(disp_refr->inv_area_joined[a] == 0) {
 800a4de:	4b4b      	ldr	r3, [pc, #300]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d14b      	bne.n	800a586 <lv_disp_refr_task+0x13e>
                    lv_coord_t y;
                    uint32_t start_offs =
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800a4ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a4f2:	4b46      	ldr	r3, [pc, #280]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a4f4:	6819      	ldr	r1, [r3, #0]
 800a4f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	440b      	add	r3, r1
 800a4fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a502:	fb03 f302 	mul.w	r3, r3, r2
 800a506:	4a41      	ldr	r2, [pc, #260]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a508:	6812      	ldr	r2, [r2, #0]
 800a50a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800a50c:	3108      	adds	r1, #8
 800a50e:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
 800a512:	4413      	add	r3, r2
                    uint32_t start_offs =
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	623b      	str	r3, [r7, #32]
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800a518:	4b3c      	ldr	r3, [pc, #240]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a51e:	3308      	adds	r3, #8
 800a520:	00db      	lsls	r3, r3, #3
 800a522:	4413      	add	r3, r2
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fe9b 	bl	800a260 <lv_area_get_width>
 800a52a:	4603      	mov	r3, r0
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	60bb      	str	r3, [r7, #8]

                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800a530:	4b36      	ldr	r3, [pc, #216]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a536:	3308      	adds	r3, #8
 800a538:	00db      	lsls	r3, r3, #3
 800a53a:	4413      	add	r3, r2
 800a53c:	885b      	ldrh	r3, [r3, #2]
 800a53e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a540:	e015      	b.n	800a56e <lv_disp_refr_task+0x126>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	18d0      	adds	r0, r2, r3
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	6a3b      	ldr	r3, [r7, #32]
 800a54c:	4413      	add	r3, r2
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	4619      	mov	r1, r3
 800a552:	f01f fc2f 	bl	8029db4 <memcpy>
                        start_offs += hres * sizeof(lv_color_t);
 800a556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	6a3a      	ldr	r2, [r7, #32]
 800a55e:	4413      	add	r3, r2
 800a560:	623b      	str	r3, [r7, #32]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800a562:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a566:	b29b      	uxth	r3, r3
 800a568:	3301      	adds	r3, #1
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a56e:	4b27      	ldr	r3, [pc, #156]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a574:	3308      	adds	r3, #8
 800a576:	00db      	lsls	r3, r3, #3
 800a578:	4413      	add	r3, r2
 800a57a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a57e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a582:	429a      	cmp	r2, r3
 800a584:	dddd      	ble.n	800a542 <lv_disp_refr_task+0xfa>
            for(a = 0; a < disp_refr->inv_p; a++) {
 800a586:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a588:	3301      	adds	r3, #1
 800a58a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a58c:	4b1f      	ldr	r3, [pc, #124]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a598:	b29b      	uxth	r3, r3
 800a59a:	461a      	mov	r2, r3
 800a59c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d39d      	bcc.n	800a4de <lv_disp_refr_task+0x96>
                }
            }
        } /*End of true double buffer handling*/

        /*Clean up*/
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 800a5a2:	4b1a      	ldr	r3, [pc, #104]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3340      	adds	r3, #64	; 0x40
 800a5a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f01f fc0b 	bl	8029dca <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 800a5b4:	4b15      	ldr	r3, [pc, #84]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a5bc:	2220      	movs	r2, #32
 800a5be:	2100      	movs	r1, #0
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f01f fc02 	bl	8029dca <memset>
        disp_refr->inv_p = 0;
 800a5c6:	4b11      	ldr	r3, [pc, #68]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 800a5ce:	f36f 0309 	bfc	r3, #0, #10
 800a5d2:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160

        /*Call monitor cb if present*/
        if(disp_refr->driver.monitor_cb) {
 800a5d6:	4b0d      	ldr	r3, [pc, #52]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00e      	beq.n	800a5fe <lv_disp_refr_task+0x1b6>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	699c      	ldr	r4, [r3, #24]
 800a5e6:	4b09      	ldr	r3, [pc, #36]	; (800a60c <lv_disp_refr_task+0x1c4>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	461d      	mov	r5, r3
 800a5ec:	69f8      	ldr	r0, [r7, #28]
 800a5ee:	f00a fea9 	bl	8015344 <lv_tick_elaps>
 800a5f2:	4601      	mov	r1, r0
 800a5f4:	4b06      	ldr	r3, [pc, #24]	; (800a610 <lv_disp_refr_task+0x1c8>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	47a0      	blx	r4
        }
    }

    lv_draw_free_buf();
 800a5fe:	f000 fec3 	bl	800b388 <lv_draw_free_buf>

    LV_LOG_TRACE("lv_refr_task: ready");
}
 800a602:	bf00      	nop
 800a604:	3728      	adds	r7, #40	; 0x28
 800a606:	46bd      	mov	sp, r7
 800a608:	bdb0      	pop	{r4, r5, r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20017770 	.word	0x20017770
 800a610:	2001776c 	.word	0x2001776c

0800a614 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 800a614:	b5b0      	push	{r4, r5, r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800a61a:	2300      	movs	r3, #0
 800a61c:	60bb      	str	r3, [r7, #8]
 800a61e:	e083      	b.n	800a728 <lv_refr_join_area+0x114>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800a620:	4b49      	ldr	r3, [pc, #292]	; (800a748 <lv_refr_join_area+0x134>)
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	4413      	add	r3, r2
 800a628:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d176      	bne.n	800a720 <lv_refr_join_area+0x10c>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800a632:	2300      	movs	r3, #0
 800a634:	60fb      	str	r3, [r7, #12]
 800a636:	e067      	b.n	800a708 <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800a638:	4b43      	ldr	r3, [pc, #268]	; (800a748 <lv_refr_join_area+0x134>)
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d158      	bne.n	800a6fc <lv_refr_join_area+0xe8>
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d054      	beq.n	800a6fc <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800a652:	4b3d      	ldr	r3, [pc, #244]	; (800a748 <lv_refr_join_area+0x134>)
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	3308      	adds	r3, #8
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	18d0      	adds	r0, r2, r3
 800a65e:	4b3a      	ldr	r3, [pc, #232]	; (800a748 <lv_refr_join_area+0x134>)
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3308      	adds	r3, #8
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	4413      	add	r3, r2
 800a66a:	4619      	mov	r1, r3
 800a66c:	f00b fa19 	bl	8015aa2 <lv_area_is_on>
 800a670:	4603      	mov	r3, r0
 800a672:	f083 0301 	eor.w	r3, r3, #1
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d141      	bne.n	800a700 <lv_refr_join_area+0xec>
                continue;
            }

            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800a67c:	4b32      	ldr	r3, [pc, #200]	; (800a748 <lv_refr_join_area+0x134>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	3308      	adds	r3, #8
 800a684:	00db      	lsls	r3, r3, #3
 800a686:	18d1      	adds	r1, r2, r3
 800a688:	4b2f      	ldr	r3, [pc, #188]	; (800a748 <lv_refr_join_area+0x134>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	3308      	adds	r3, #8
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	441a      	add	r2, r3
 800a694:	463b      	mov	r3, r7
 800a696:	4618      	mov	r0, r3
 800a698:	f00b f997 	bl	80159ca <lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800a69c:	463b      	mov	r3, r7
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f00b f921 	bl	80158e6 <lv_area_get_size>
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	4b28      	ldr	r3, [pc, #160]	; (800a748 <lv_refr_join_area+0x134>)
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	00db      	lsls	r3, r3, #3
 800a6b0:	4413      	add	r3, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f00b f917 	bl	80158e6 <lv_area_get_size>
 800a6b8:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800a6ba:	4b23      	ldr	r3, [pc, #140]	; (800a748 <lv_refr_join_area+0x134>)
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	00db      	lsls	r3, r3, #3
 800a6c4:	4413      	add	r3, r2
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f00b f90d 	bl	80158e6 <lv_area_get_size>
 800a6cc:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800a6ce:	442b      	add	r3, r5
 800a6d0:	429c      	cmp	r4, r3
 800a6d2:	d216      	bcs.n	800a702 <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800a6d4:	4b1c      	ldr	r3, [pc, #112]	; (800a748 <lv_refr_join_area+0x134>)
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	3308      	adds	r3, #8
 800a6dc:	00db      	lsls	r3, r3, #3
 800a6de:	4413      	add	r3, r2
 800a6e0:	463a      	mov	r2, r7
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7ff fdad 	bl	800a244 <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 800a6ea:	4b17      	ldr	r3, [pc, #92]	; (800a748 <lv_refr_join_area+0x134>)
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	701a      	strb	r2, [r3, #0]
 800a6fa:	e002      	b.n	800a702 <lv_refr_join_area+0xee>
                continue;
 800a6fc:	bf00      	nop
 800a6fe:	e000      	b.n	800a702 <lv_refr_join_area+0xee>
                continue;
 800a700:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3301      	adds	r3, #1
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <lv_refr_join_area+0x134>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a714:	b29b      	uxth	r3, r3
 800a716:	461a      	mov	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d38c      	bcc.n	800a638 <lv_refr_join_area+0x24>
 800a71e:	e000      	b.n	800a722 <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800a720:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	3301      	adds	r3, #1
 800a726:	60bb      	str	r3, [r7, #8]
 800a728:	4b07      	ldr	r3, [pc, #28]	; (800a748 <lv_refr_join_area+0x134>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a734:	b29b      	uxth	r3, r3
 800a736:	461a      	mov	r2, r3
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	4293      	cmp	r3, r2
 800a73c:	f4ff af70 	bcc.w	800a620 <lv_refr_join_area+0xc>
            }
        }
    }
}
 800a740:	bf00      	nop
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bdb0      	pop	{r4, r5, r7, pc}
 800a748:	20017770 	.word	0x20017770

0800a74c <lv_refr_areas>:

/**
 * Refresh the joined areas
 */
static void lv_refr_areas(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
    px_num = 0;
 800a752:	4b1f      	ldr	r3, [pc, #124]	; (800a7d0 <lv_refr_areas+0x84>)
 800a754:	2200      	movs	r2, #0
 800a756:	601a      	str	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < disp_refr->inv_p; i++) {
 800a758:	2300      	movs	r3, #0
 800a75a:	607b      	str	r3, [r7, #4]
 800a75c:	e028      	b.n	800a7b0 <lv_refr_areas+0x64>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 800a75e:	4b1d      	ldr	r3, [pc, #116]	; (800a7d4 <lv_refr_areas+0x88>)
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4413      	add	r3, r2
 800a766:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d11c      	bne.n	800a7aa <lv_refr_areas+0x5e>

            lv_refr_area(&disp_refr->inv_areas[i]);
 800a770:	4b18      	ldr	r3, [pc, #96]	; (800a7d4 <lv_refr_areas+0x88>)
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3308      	adds	r3, #8
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	4413      	add	r3, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 f82b 	bl	800a7d8 <lv_refr_area>

            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800a782:	4b14      	ldr	r3, [pc, #80]	; (800a7d4 <lv_refr_areas+0x88>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00e      	beq.n	800a7aa <lv_refr_areas+0x5e>
 800a78c:	4b11      	ldr	r3, [pc, #68]	; (800a7d4 <lv_refr_areas+0x88>)
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3308      	adds	r3, #8
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	4413      	add	r3, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f00b f8a4 	bl	80158e6 <lv_area_get_size>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	4b0b      	ldr	r3, [pc, #44]	; (800a7d0 <lv_refr_areas+0x84>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	4a0a      	ldr	r2, [pc, #40]	; (800a7d0 <lv_refr_areas+0x84>)
 800a7a8:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	607b      	str	r3, [r7, #4]
 800a7b0:	4b08      	ldr	r3, [pc, #32]	; (800a7d4 <lv_refr_areas+0x88>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a7b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d3cb      	bcc.n	800a75e <lv_refr_areas+0x12>
        }
    }
}
 800a7c6:	bf00      	nop
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	2001776c 	.word	0x2001776c
 800a7d4:	20017770 	.word	0x20017770

0800a7d8 <lv_refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void lv_refr_area(const lv_area_t * area_p)
{
 800a7d8:	b590      	push	{r4, r7, lr}
 800a7da:	b08d      	sub	sp, #52	; 0x34
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
    /*True double buffering: there are two screen sized buffers. Just redraw directly into a
     * buffer*/
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800a7e0:	4b7f      	ldr	r3, [pc, #508]	; (800a9e0 <lv_refr_area+0x208>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f00a fd42 	bl	801526e <lv_disp_is_true_double_buf>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d027      	beq.n	800a840 <lv_refr_area+0x68>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a7f0:	4b7b      	ldr	r3, [pc, #492]	; (800a9e0 <lv_refr_area+0x208>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f00a fd17 	bl	8015228 <lv_disp_get_buf>
 800a7fa:	6178      	str	r0, [r7, #20]
        vdb->area.x1        = 0;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	2200      	movs	r2, #0
 800a800:	821a      	strh	r2, [r3, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800a802:	4b77      	ldr	r3, [pc, #476]	; (800a9e0 <lv_refr_area+0x208>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4618      	mov	r0, r3
 800a808:	f00a fca0 	bl	801514c <lv_disp_get_hor_res>
 800a80c:	4603      	mov	r3, r0
 800a80e:	b29b      	uxth	r3, r3
 800a810:	3b01      	subs	r3, #1
 800a812:	b29b      	uxth	r3, r3
 800a814:	b21a      	sxth	r2, r3
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	829a      	strh	r2, [r3, #20]
        vdb->area.y1        = 0;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	2200      	movs	r2, #0
 800a81e:	825a      	strh	r2, [r3, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800a820:	4b6f      	ldr	r3, [pc, #444]	; (800a9e0 <lv_refr_area+0x208>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f00a fcb2 	bl	801518e <lv_disp_get_ver_res>
 800a82a:	4603      	mov	r3, r0
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	3b01      	subs	r3, #1
 800a830:	b29b      	uxth	r3, r3
 800a832:	b21a      	sxth	r2, r3
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	82da      	strh	r2, [r3, #22]
        lv_refr_area_part(area_p);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f8d3 	bl	800a9e4 <lv_refr_area_part>
 800a83e:	e0cb      	b.n	800a9d8 <lv_refr_area+0x200>
    }
    /*The buffer is smaller: refresh the area in parts*/
    else {
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a840:	4b67      	ldr	r3, [pc, #412]	; (800a9e0 <lv_refr_area+0x208>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4618      	mov	r0, r3
 800a846:	f00a fcef 	bl	8015228 <lv_disp_get_buf>
 800a84a:	6238      	str	r0, [r7, #32]
        /*Calculate the max row num*/
        lv_coord_t w = lv_area_get_width(area_p);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff fd07 	bl	800a260 <lv_area_get_width>
 800a852:	4603      	mov	r3, r0
 800a854:	83fb      	strh	r3, [r7, #30]
        lv_coord_t h = lv_area_get_height(area_p);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7ff fd19 	bl	800a28e <lv_area_get_height>
 800a85c:	4603      	mov	r3, r0
 800a85e:	83bb      	strh	r3, [r7, #28]
        lv_coord_t y2 =
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800a866:	4b5e      	ldr	r3, [pc, #376]	; (800a9e0 <lv_refr_area+0x208>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f00a fc8f 	bl	801518e <lv_disp_get_ver_res>
 800a870:	4603      	mov	r3, r0
        lv_coord_t y2 =
 800a872:	429c      	cmp	r4, r3
 800a874:	db0c      	blt.n	800a890 <lv_refr_area+0xb8>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800a876:	4b5a      	ldr	r3, [pc, #360]	; (800a9e0 <lv_refr_area+0x208>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f00a fc87 	bl	801518e <lv_disp_get_ver_res>
 800a880:	4603      	mov	r3, r0
 800a882:	b29b      	uxth	r3, r3
 800a884:	3b01      	subs	r3, #1
 800a886:	b29b      	uxth	r3, r3
 800a888:	837b      	strh	r3, [r7, #26]
        lv_coord_t y2 =
 800a88a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a88e:	e002      	b.n	800a896 <lv_refr_area+0xbe>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a896:	837b      	strh	r3, [r7, #26]

        int32_t max_row = (uint32_t)vdb->size / w;
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	68da      	ldr	r2, [r3, #12]
 800a89c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a8a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if(max_row > h) max_row = h;
 800a8a6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a8aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	dd02      	ble.n	800a8b6 <lv_refr_area+0xde>
 800a8b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a8b4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*Round down the lines of VDB if rounding is added*/
        if(disp_refr->driver.rounder_cb) {
 800a8b6:	4b4a      	ldr	r3, [pc, #296]	; (800a9e0 <lv_refr_area+0x208>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d034      	beq.n	800a92a <lv_refr_area+0x152>
            lv_area_t tmp;
            tmp.x1 = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	81bb      	strh	r3, [r7, #12]
            tmp.x2 = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	823b      	strh	r3, [r7, #16]
            tmp.y1 = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	81fb      	strh	r3, [r7, #14]

            lv_coord_t y_tmp = max_row - 1;
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	857b      	strh	r3, [r7, #42]	; 0x2a
            do {
                tmp.y2 = y_tmp;
 800a8d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a8d8:	827b      	strh	r3, [r7, #18]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800a8da:	4b41      	ldr	r3, [pc, #260]	; (800a9e0 <lv_refr_area+0x208>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	4a3f      	ldr	r2, [pc, #252]	; (800a9e0 <lv_refr_area+0x208>)
 800a8e2:	6812      	ldr	r2, [r2, #0]
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f107 020c 	add.w	r2, r7, #12
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	4798      	blx	r3

                /*If this height fits into `max_row` then fine*/
                if(lv_area_get_height(&tmp) <= max_row) break;
 800a8ee:	f107 030c 	add.w	r3, r7, #12
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff fccb 	bl	800a28e <lv_area_get_height>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fe:	4293      	cmp	r3, r2
 800a900:	da0a      	bge.n	800a918 <lv_refr_area+0x140>

                /*Decrement the height of the area until it fits into `max_row` after rounding*/
                y_tmp--;
 800a902:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a906:	b29b      	uxth	r3, r3
 800a908:	3b01      	subs	r3, #1
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	857b      	strh	r3, [r7, #42]	; 0x2a
            } while(y_tmp != 0);
 800a90e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1df      	bne.n	800a8d6 <lv_refr_area+0xfe>
 800a916:	e000      	b.n	800a91a <lv_refr_area+0x142>
                if(lv_area_get_height(&tmp) <= max_row) break;
 800a918:	bf00      	nop

            if(y_tmp == 0) {
 800a91a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d059      	beq.n	800a9d6 <lv_refr_area+0x1fe>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
                            "small VDB)");
                return;
            } else {
                max_row = tmp.y2 + 1;
 800a922:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a926:	3301      	adds	r3, #1
 800a928:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        /*Always use the full row*/
        lv_coord_t row;
        lv_coord_t row_last = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	885b      	ldrh	r3, [r3, #2]
 800a932:	853b      	strh	r3, [r7, #40]	; 0x28
 800a934:	e02c      	b.n	800a990 <lv_refr_area+0x1b8>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a94e:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = row + max_row - 1;
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	b29a      	uxth	r2, r3
 800a954:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a956:	4413      	add	r3, r2
 800a958:	b29b      	uxth	r3, r3
 800a95a:	3b01      	subs	r3, #1
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	b21a      	sxth	r2, r3
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	82da      	strh	r2, [r3, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a96a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a96e:	429a      	cmp	r2, r3
 800a970:	da02      	bge.n	800a978 <lv_refr_area+0x1a0>
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	8b7a      	ldrh	r2, [r7, #26]
 800a976:	82da      	strh	r2, [r3, #22]
            row_last = vdb->area.y2;
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	8adb      	ldrh	r3, [r3, #22]
 800a97c:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_refr_area_part(area_p);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f830 	bl	800a9e4 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800a984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a986:	b29a      	uxth	r2, r3
 800a988:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a98a:	4413      	add	r3, r2
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	853b      	strh	r3, [r7, #40]	; 0x28
 800a990:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800a994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a996:	4413      	add	r3, r2
 800a998:	1e5a      	subs	r2, r3, #1
 800a99a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	ddc9      	ble.n	800a936 <lv_refr_area+0x15e>
        }

        /*If the last y coordinates are not handled yet ...*/
        if(y2 != row_last) {
 800a9a2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a9a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d014      	beq.n	800a9d8 <lv_refr_area+0x200>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 800a9c2:	6a3b      	ldr	r3, [r7, #32]
 800a9c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a9c6:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = y2;
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	8b7a      	ldrh	r2, [r7, #26]
 800a9cc:	82da      	strh	r2, [r3, #22]

            /*Refresh this part too*/
            lv_refr_area_part(area_p);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f808 	bl	800a9e4 <lv_refr_area_part>
 800a9d4:	e000      	b.n	800a9d8 <lv_refr_area+0x200>
                return;
 800a9d6:	bf00      	nop
        }
    }
}
 800a9d8:	3734      	adds	r7, #52	; 0x34
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd90      	pop	{r4, r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	20017770 	.word	0x20017770

0800a9e4 <lv_refr_area_part>:
/**
 * Refresh a part of an area which is on the actual Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area_part(const lv_area_t * area_p)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]

    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a9ec:	4b2e      	ldr	r3, [pc, #184]	; (800aaa8 <lv_refr_area_part+0xc4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f00a fc19 	bl	8015228 <lv_disp_get_buf>
 800a9f6:	6178      	str	r0, [r7, #20]

    /*In non double buffered mode, before rendering the next part wait until the previous image is
     * flushed*/
    if(lv_disp_is_double_buf(disp_refr) == false) {
 800a9f8:	4b2b      	ldr	r3, [pc, #172]	; (800aaa8 <lv_refr_area_part+0xc4>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f00a fc1f 	bl	8015240 <lv_disp_is_double_buf>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f083 0301 	eor.w	r3, r3, #1
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d007      	beq.n	800aa1e <lv_refr_area_part+0x3a>
        while(vdb->flushing)
 800aa0e:	bf00      	nop
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1f8      	bne.n	800aa10 <lv_refr_area_part+0x2c>
    lv_obj_t * top_p;

    /*Get the new mask from the original area and the act. VDB
     It will be a part of 'area_p'*/
    lv_area_t start_mask;
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f103 0210 	add.w	r2, r3, #16
 800aa24:	f107 0308 	add.w	r3, r7, #8
 800aa28:	6879      	ldr	r1, [r7, #4]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f00a ff7c 	bl	8015928 <lv_area_intersect>

    /*Get the most top object which is not covered by others*/
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800aa30:	4b1d      	ldr	r3, [pc, #116]	; (800aaa8 <lv_refr_area_part+0xc4>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fd f849 	bl	8007acc <lv_disp_get_scr_act>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	f107 0308 	add.w	r3, r7, #8
 800aa40:	4611      	mov	r1, r2
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 f832 	bl	800aaac <lv_refr_get_top_obj>
 800aa48:	6138      	str	r0, [r7, #16]

    /*Do the refreshing from the top object*/
    lv_refr_obj_and_children(top_p, &start_mask);
 800aa4a:	f107 0308 	add.w	r3, r7, #8
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6938      	ldr	r0, [r7, #16]
 800aa52:	f000 f87f 	bl	800ab54 <lv_refr_obj_and_children>

    /*Also refresh top and sys layer unconditionally*/
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 800aa56:	4b14      	ldr	r3, [pc, #80]	; (800aaa8 <lv_refr_area_part+0xc4>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fd f84b 	bl	8007af6 <lv_disp_get_layer_top>
 800aa60:	4602      	mov	r2, r0
 800aa62:	f107 0308 	add.w	r3, r7, #8
 800aa66:	4619      	mov	r1, r3
 800aa68:	4610      	mov	r0, r2
 800aa6a:	f000 f873 	bl	800ab54 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 800aa6e:	4b0e      	ldr	r3, [pc, #56]	; (800aaa8 <lv_refr_area_part+0xc4>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fd f854 	bl	8007b20 <lv_disp_get_layer_sys>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	f107 0308 	add.w	r3, r7, #8
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4610      	mov	r0, r2
 800aa82:	f000 f867 	bl	800ab54 <lv_refr_obj_and_children>

    /* In true double buffered mode flush only once when all areas were rendered.
     * In normal mode flush after every area */
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 800aa86:	4b08      	ldr	r3, [pc, #32]	; (800aaa8 <lv_refr_area_part+0xc4>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f00a fbef 	bl	801526e <lv_disp_is_true_double_buf>
 800aa90:	4603      	mov	r3, r0
 800aa92:	f083 0301 	eor.w	r3, r3, #1
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <lv_refr_area_part+0xbc>
        lv_refr_vdb_flush();
 800aa9c:	f000 f95c 	bl	800ad58 <lv_refr_vdb_flush>
    }
}
 800aaa0:	bf00      	nop
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	20017770 	.word	0x20017770

0800aaac <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	617b      	str	r3, [r7, #20]

    /*If this object is fully cover the draw area check the children too */
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	3310      	adds	r3, #16
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f00b f81c 	bl	8015afe <lv_area_is_in>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d03e      	beq.n	800ab4a <lv_refr_get_top_obj+0x9e>
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aad2:	f003 0310 	and.w	r3, r3, #16
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d136      	bne.n	800ab4a <lv_refr_get_top_obj+0x9e>
        lv_obj_t * i;
        LV_LL_READ(obj->child_ll, i)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	3304      	adds	r3, #4
 800aae0:	4618      	mov	r0, r3
 800aae2:	f00b fbbb 	bl	801625c <lv_ll_get_head>
 800aae6:	6138      	str	r0, [r7, #16]
 800aae8:	e00e      	b.n	800ab08 <lv_refr_get_top_obj+0x5c>
        {
            found_p = lv_refr_get_top_obj(area_p, i);
 800aaea:	6939      	ldr	r1, [r7, #16]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff ffdd 	bl	800aaac <lv_refr_get_top_obj>
 800aaf2:	6178      	str	r0, [r7, #20]

            /*If a children is ok then break*/
            if(found_p != NULL) {
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10a      	bne.n	800ab10 <lv_refr_get_top_obj+0x64>
        LV_LL_READ(obj->child_ll, i)
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	3304      	adds	r3, #4
 800aafe:	6939      	ldr	r1, [r7, #16]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f00b fbd1 	bl	80162a8 <lv_ll_get_next>
 800ab06:	6138      	str	r0, [r7, #16]
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1ed      	bne.n	800aaea <lv_refr_get_top_obj+0x3e>
 800ab0e:	e000      	b.n	800ab12 <lv_refr_get_top_obj+0x66>
                break;
 800ab10:	bf00      	nop
            }
        }

        /*If no better children check this object*/
        if(found_p == NULL) {
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d118      	bne.n	800ab4a <lv_refr_get_top_obj+0x9e>
            const lv_style_t * style = lv_obj_get_style(obj);
 800ab18:	6838      	ldr	r0, [r7, #0]
 800ab1a:	f7ff f8c3 	bl	8009ca4 <lv_obj_get_style>
 800ab1e:	60f8      	str	r0, [r7, #12]
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	7a1b      	ldrb	r3, [r3, #8]
 800ab24:	2bff      	cmp	r3, #255	; 0xff
 800ab26:	d110      	bne.n	800ab4a <lv_refr_get_top_obj+0x9e>
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	6838      	ldr	r0, [r7, #0]
 800ab32:	4798      	blx	r3
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d007      	beq.n	800ab4a <lv_refr_get_top_obj+0x9e>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 800ab3a:	6838      	ldr	r0, [r7, #0]
 800ab3c:	f7ff f91f 	bl	8009d7e <lv_obj_get_opa_scale>
 800ab40:	4603      	mov	r3, r0
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800ab42:	2bff      	cmp	r3, #255	; 0xff
 800ab44:	d101      	bne.n	800ab4a <lv_refr_get_top_obj+0x9e>
                found_p = obj;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 800ab4a:	697b      	ldr	r3, [r7, #20]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3718      	adds	r7, #24
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <lv_refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj_and_children(lv_obj_t * top_p, const lv_area_t * mask_p)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
    /* Normally always will be a top_obj (at least the screen)
     * but in special cases (e.g. if the screen has alpha) it won't.
     * In this case use the screen directly */
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d105      	bne.n	800ab70 <lv_refr_obj_and_children+0x1c>
 800ab64:	4b1c      	ldr	r3, [pc, #112]	; (800abd8 <lv_refr_obj_and_children+0x84>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fc ffaf 	bl	8007acc <lv_disp_get_scr_act>
 800ab6e:	6078      	str	r0, [r7, #4]

    /*Refresh the top object and its children*/
    lv_refr_obj(top_p, mask_p);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f832 	bl	800abdc <lv_refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj */
    lv_obj_t * par;
    lv_obj_t * border_p = top_p;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	613b      	str	r3, [r7, #16]

    par = lv_obj_get_parent(top_p);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f7fe fff7 	bl	8009b70 <lv_obj_get_parent>
 800ab82:	6178      	str	r0, [r7, #20]

    /*Do until not reach the screen*/
    while(par != NULL) {
 800ab84:	e021      	b.n	800abca <lv_refr_obj_and_children+0x76>
        /*object before border_p has to be redrawn*/
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	3304      	adds	r3, #4
 800ab8a:	6939      	ldr	r1, [r7, #16]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f00b fba5 	bl	80162dc <lv_ll_get_prev>
 800ab92:	60f8      	str	r0, [r7, #12]

        while(i != NULL) {
 800ab94:	e00a      	b.n	800abac <lv_refr_obj_and_children+0x58>
            /*Refresh the objects*/
            lv_refr_obj(i, mask_p);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f000 f81f 	bl	800abdc <lv_refr_obj>
            i = lv_ll_get_prev(&(par->child_ll), i);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	3304      	adds	r3, #4
 800aba2:	68f9      	ldr	r1, [r7, #12]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f00b fb99 	bl	80162dc <lv_ll_get_prev>
 800abaa:	60f8      	str	r0, [r7, #12]
        while(i != NULL) {
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f1      	bne.n	800ab96 <lv_refr_obj_and_children+0x42>
        }

        /*Call the post draw design function of the parents of the to object*/
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	2201      	movs	r2, #1
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6978      	ldr	r0, [r7, #20]
 800abbc:	4798      	blx	r3

        /*The new border will be there last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = par;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	613b      	str	r3, [r7, #16]
        /*Go a level deeper*/
        par = lv_obj_get_parent(par);
 800abc2:	6978      	ldr	r0, [r7, #20]
 800abc4:	f7fe ffd4 	bl	8009b70 <lv_obj_get_parent>
 800abc8:	6178      	str	r0, [r7, #20]
    while(par != NULL) {
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1da      	bne.n	800ab86 <lv_refr_obj_and_children+0x32>
    }
}
 800abd0:	bf00      	nop
 800abd2:	3718      	adds	r7, #24
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	20017770 	.word	0x20017770

0800abdc <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08e      	sub	sp, #56	; 0x38
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800abec:	f003 0310 	and.w	r3, r3, #16
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f040 80ac 	bne.w	800ad50 <lv_refr_obj+0x174>
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800abfc:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
 800abfe:	f107 0318 	add.w	r3, r7, #24
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7fe ffdc 	bl	8009bc2 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800ac0a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	b21b      	sxth	r3, r3
 800ac18:	833b      	strh	r3, [r7, #24]
    obj_area.y1 -= ext_size;
 800ac1a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	b21b      	sxth	r3, r3
 800ac28:	837b      	strh	r3, [r7, #26]
    obj_area.x2 += ext_size;
 800ac2a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ac32:	4413      	add	r3, r2
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	b21b      	sxth	r3, r3
 800ac38:	83bb      	strh	r3, [r7, #28]
    obj_area.y2 += ext_size;
 800ac3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ac42:	4413      	add	r3, r2
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	b21b      	sxth	r3, r3
 800ac48:	83fb      	strh	r3, [r7, #30]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800ac4a:	f107 0218 	add.w	r2, r7, #24
 800ac4e:	f107 0320 	add.w	r3, r7, #32
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f00a fe67 	bl	8015928 <lv_area_intersect>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 800ac60:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d074      	beq.n	800ad52 <lv_refr_obj+0x176>

        /* Redraw the object */
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	f107 0120 	add.w	r1, r7, #32
 800ac70:	2200      	movs	r2, #0
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	4798      	blx	r3
        lv_draw_fill(&obj_ext_mask, &obj_ext_mask, debug_color, LV_OPA_50);
        debug_color.full *= 17;
        debug_color.full += 0xA1;
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 800ac76:	f107 0318 	add.w	r3, r7, #24
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7fe ffa0 	bl	8009bc2 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800ac82:	f107 0218 	add.w	r2, r7, #24
 800ac86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f00a fe4b 	bl	8015928 <lv_area_intersect>
 800ac92:	4603      	mov	r3, r0
 800ac94:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if(union_ok != false) {
 800ac98:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d04f      	beq.n	800ad40 <lv_refr_obj+0x164>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3304      	adds	r3, #4
 800aca4:	4618      	mov	r0, r3
 800aca6:	f00b faec 	bl	8016282 <lv_ll_get_tail>
 800acaa:	6378      	str	r0, [r7, #52]	; 0x34
 800acac:	e045      	b.n	800ad3a <lv_refr_obj+0x15e>
            {
                lv_obj_get_coords(child_p, &child_area);
 800acae:	f107 0308 	add.w	r3, r7, #8
 800acb2:	4619      	mov	r1, r3
 800acb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800acb6:	f7fe ff84 	bl	8009bc2 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
 800acba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800acbe:	867b      	strh	r3, [r7, #50]	; 0x32
                child_area.x1 -= ext_size;
 800acc0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	b29b      	uxth	r3, r3
 800accc:	b21b      	sxth	r3, r3
 800acce:	813b      	strh	r3, [r7, #8]
                child_area.y1 -= ext_size;
 800acd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	b29b      	uxth	r3, r3
 800acdc:	b21b      	sxth	r3, r3
 800acde:	817b      	strh	r3, [r7, #10]
                child_area.x2 += ext_size;
 800ace0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ace8:	4413      	add	r3, r2
 800acea:	b29b      	uxth	r3, r3
 800acec:	b21b      	sxth	r3, r3
 800acee:	81bb      	strh	r3, [r7, #12]
                child_area.y2 += ext_size;
 800acf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800acf8:	4413      	add	r3, r2
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	b21b      	sxth	r3, r3
 800acfe:	81fb      	strh	r3, [r7, #14]
                /* Get the union (common parts) of original mask (from obj)
                 * and its child */
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800ad00:	f107 0208 	add.w	r2, r7, #8
 800ad04:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ad08:	f107 0310 	add.w	r3, r7, #16
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f00a fe0b 	bl	8015928 <lv_area_intersect>
 800ad12:	4603      	mov	r3, r0
 800ad14:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                /*If the parent and the child has common area then refresh the child */
                if(union_ok) {
 800ad18:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d005      	beq.n	800ad2c <lv_refr_obj+0x150>
                    /*Refresh the next children*/
                    lv_refr_obj(child_p, &mask_child);
 800ad20:	f107 0310 	add.w	r3, r7, #16
 800ad24:	4619      	mov	r1, r3
 800ad26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad28:	f7ff ff58 	bl	800abdc <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad32:	4618      	mov	r0, r3
 800ad34:	f00b fad2 	bl	80162dc <lv_ll_get_prev>
 800ad38:	6378      	str	r0, [r7, #52]	; 0x34
 800ad3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1b6      	bne.n	800acae <lv_refr_obj+0xd2>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	f107 0120 	add.w	r1, r7, #32
 800ad48:	2201      	movs	r2, #1
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	4798      	blx	r3
 800ad4e:	e000      	b.n	800ad52 <lv_refr_obj+0x176>
    if(obj->hidden != 0) return;
 800ad50:	bf00      	nop
    }
}
 800ad52:	3738      	adds	r7, #56	; 0x38
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800ad5e:	4b23      	ldr	r3, [pc, #140]	; (800adec <lv_refr_vdb_flush+0x94>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f00a fa60 	bl	8015228 <lv_disp_get_buf>
 800ad68:	6078      	str	r0, [r7, #4]

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 800ad6a:	4b20      	ldr	r3, [pc, #128]	; (800adec <lv_refr_vdb_flush+0x94>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f00a fa66 	bl	8015240 <lv_disp_is_double_buf>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d007      	beq.n	800ad8a <lv_refr_vdb_flush+0x32>
        while(vdb->flushing)
 800ad7a:	bf00      	nop
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1f8      	bne.n	800ad7c <lv_refr_vdb_flush+0x24>
            ;
    }

    vdb->flushing = 1;
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	7e13      	ldrb	r3, [r2, #24]
 800ad8e:	f043 0301 	orr.w	r3, r3, #1
 800ad92:	7613      	strb	r3, [r2, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 800ad94:	f7ff fb4c 	bl	800a430 <lv_refr_get_disp_refreshing>
 800ad98:	6038      	str	r0, [r7, #0]
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d008      	beq.n	800adb4 <lv_refr_vdb_flush+0x5c>
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	6838      	ldr	r0, [r7, #0]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	f102 0110 	add.w	r1, r2, #16
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	6892      	ldr	r2, [r2, #8]
 800adb2:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d012      	beq.n	800ade2 <lv_refr_vdb_flush+0x8a>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00e      	beq.n	800ade2 <lv_refr_vdb_flush+0x8a>
        if(vdb->buf_act == vdb->buf1)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689a      	ldr	r2, [r3, #8]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d104      	bne.n	800adda <lv_refr_vdb_flush+0x82>
            vdb->buf_act = vdb->buf2;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	609a      	str	r2, [r3, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 800add8:	e003      	b.n	800ade2 <lv_refr_vdb_flush+0x8a>
            vdb->buf_act = vdb->buf1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	609a      	str	r2, [r3, #8]
}
 800ade2:	bf00      	nop
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20017770 	.word	0x20017770

0800adf0 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	4603      	mov	r3, r0
 800adf8:	71fb      	strb	r3, [r7, #7]
 800adfa:	460b      	mov	r3, r1
 800adfc:	71bb      	strb	r3, [r7, #6]
 800adfe:	4613      	mov	r3, r2
 800ae00:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 800ae02:	79bb      	ldrb	r3, [r7, #6]
 800ae04:	095b      	lsrs	r3, r3, #5
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	f003 0307 	and.w	r3, r3, #7
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	7b3b      	ldrb	r3, [r7, #12]
 800ae10:	f362 0302 	bfi	r3, r2, #0, #3
 800ae14:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	08db      	lsrs	r3, r3, #3
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	f003 031f 	and.w	r3, r3, #31
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	7b3b      	ldrb	r3, [r7, #12]
 800ae24:	f362 03c7 	bfi	r3, r2, #3, #5
 800ae28:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 800ae2a:	797b      	ldrb	r3, [r7, #5]
 800ae2c:	08db      	lsrs	r3, r3, #3
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f003 031f 	and.w	r3, r3, #31
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	7b7b      	ldrb	r3, [r7, #13]
 800ae38:	f362 0304 	bfi	r3, r2, #0, #5
 800ae3c:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 800ae3e:	79bb      	ldrb	r3, [r7, #6]
 800ae40:	089b      	lsrs	r3, r3, #2
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	f003 0307 	and.w	r3, r3, #7
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	7b7b      	ldrb	r3, [r7, #13]
 800ae4c:	f362 1347 	bfi	r3, r2, #5, #3
 800ae50:	737b      	strb	r3, [r7, #13]
    return color;
 800ae52:	89bb      	ldrh	r3, [r7, #12]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <lv_style_init>:

/**
 *  Init the basic styles
 */
void lv_style_init(void)
{
 800ae60:	b598      	push	{r3, r4, r7, lr}
 800ae62:	af00      	add	r7, sp, #0
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass               = 0;
 800ae64:	4aad      	ldr	r2, [pc, #692]	; (800b11c <lv_style_init+0x2bc>)
 800ae66:	7813      	ldrb	r3, [r2, #0]
 800ae68:	f36f 0300 	bfc	r3, #0, #1
 800ae6c:	7013      	strb	r3, [r2, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 800ae6e:	4bab      	ldr	r3, [pc, #684]	; (800b11c <lv_style_init+0x2bc>)
 800ae70:	22ff      	movs	r2, #255	; 0xff
 800ae72:	721a      	strb	r2, [r3, #8]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 800ae74:	4aa9      	ldr	r2, [pc, #676]	; (800b11c <lv_style_init+0x2bc>)
 800ae76:	4baa      	ldr	r3, [pc, #680]	; (800b120 <lv_style_init+0x2c0>)
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	8053      	strh	r3, [r2, #2]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 800ae7c:	4aa7      	ldr	r2, [pc, #668]	; (800b11c <lv_style_init+0x2bc>)
 800ae7e:	4ba8      	ldr	r3, [pc, #672]	; (800b120 <lv_style_init+0x2c0>)
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	8093      	strh	r3, [r2, #4]
    lv_style_scr.body.radius         = 0;
 800ae84:	4ba5      	ldr	r3, [pc, #660]	; (800b11c <lv_style_init+0x2bc>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	80da      	strh	r2, [r3, #6]
    lv_style_scr.body.padding.left   = 0;
 800ae8a:	4ba4      	ldr	r3, [pc, #656]	; (800b11c <lv_style_init+0x2bc>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	835a      	strh	r2, [r3, #26]
    lv_style_scr.body.padding.right  = 0;
 800ae90:	4ba2      	ldr	r3, [pc, #648]	; (800b11c <lv_style_init+0x2bc>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	839a      	strh	r2, [r3, #28]
    lv_style_scr.body.padding.top    = 0;
 800ae96:	4ba1      	ldr	r3, [pc, #644]	; (800b11c <lv_style_init+0x2bc>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	82da      	strh	r2, [r3, #22]
    lv_style_scr.body.padding.bottom = 0;
 800ae9c:	4b9f      	ldr	r3, [pc, #636]	; (800b11c <lv_style_init+0x2bc>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	831a      	strh	r2, [r3, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 800aea2:	4b9e      	ldr	r3, [pc, #632]	; (800b11c <lv_style_init+0x2bc>)
 800aea4:	2205      	movs	r2, #5
 800aea6:	83da      	strh	r2, [r3, #30]

    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800aea8:	4b9c      	ldr	r3, [pc, #624]	; (800b11c <lv_style_init+0x2bc>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	815a      	strh	r2, [r3, #10]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 800aeae:	4b9b      	ldr	r3, [pc, #620]	; (800b11c <lv_style_init+0x2bc>)
 800aeb0:	22ff      	movs	r2, #255	; 0xff
 800aeb2:	73da      	strb	r2, [r3, #15]
    lv_style_scr.body.border.width = 0;
 800aeb4:	4b99      	ldr	r3, [pc, #612]	; (800b11c <lv_style_init+0x2bc>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	819a      	strh	r2, [r3, #12]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 800aeba:	4b98      	ldr	r3, [pc, #608]	; (800b11c <lv_style_init+0x2bc>)
 800aebc:	220f      	movs	r2, #15
 800aebe:	739a      	strb	r2, [r3, #14]

    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800aec0:	4a96      	ldr	r2, [pc, #600]	; (800b11c <lv_style_init+0x2bc>)
 800aec2:	4b98      	ldr	r3, [pc, #608]	; (800b124 <lv_style_init+0x2c4>)
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	8213      	strh	r3, [r2, #16]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 800aec8:	4b94      	ldr	r3, [pc, #592]	; (800b11c <lv_style_init+0x2bc>)
 800aeca:	2201      	movs	r2, #1
 800aecc:	751a      	strb	r2, [r3, #20]
    lv_style_scr.body.shadow.width = 0;
 800aece:	4b93      	ldr	r3, [pc, #588]	; (800b11c <lv_style_init+0x2bc>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	825a      	strh	r2, [r3, #18]

    lv_style_scr.text.opa          = LV_OPA_COVER;
 800aed4:	4b91      	ldr	r3, [pc, #580]	; (800b11c <lv_style_init+0x2bc>)
 800aed6:	22ff      	movs	r2, #255	; 0xff
 800aed8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800aedc:	4c8f      	ldr	r4, [pc, #572]	; (800b11c <lv_style_init+0x2bc>)
 800aede:	2230      	movs	r2, #48	; 0x30
 800aee0:	2130      	movs	r1, #48	; 0x30
 800aee2:	2030      	movs	r0, #48	; 0x30
 800aee4:	f7ff ff84 	bl	800adf0 <lv_color_make>
 800aee8:	8420      	strh	r0, [r4, #32]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800aeea:	4c8c      	ldr	r4, [pc, #560]	; (800b11c <lv_style_init+0x2bc>)
 800aeec:	22d8      	movs	r2, #216	; 0xd8
 800aeee:	2196      	movs	r1, #150	; 0x96
 800aef0:	2055      	movs	r0, #85	; 0x55
 800aef2:	f7ff ff7d 	bl	800adf0 <lv_color_make>
 800aef6:	8460      	strh	r0, [r4, #34]	; 0x22
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 800aef8:	4b88      	ldr	r3, [pc, #544]	; (800b11c <lv_style_init+0x2bc>)
 800aefa:	4a8b      	ldr	r2, [pc, #556]	; (800b128 <lv_style_init+0x2c8>)
 800aefc:	625a      	str	r2, [r3, #36]	; 0x24
    lv_style_scr.text.letter_space = 0;
 800aefe:	4b87      	ldr	r3, [pc, #540]	; (800b11c <lv_style_init+0x2bc>)
 800af00:	2200      	movs	r2, #0
 800af02:	851a      	strh	r2, [r3, #40]	; 0x28
    lv_style_scr.text.line_space   = 2;
 800af04:	4b85      	ldr	r3, [pc, #532]	; (800b11c <lv_style_init+0x2bc>)
 800af06:	2202      	movs	r2, #2
 800af08:	855a      	strh	r2, [r3, #42]	; 0x2a

    lv_style_scr.image.opa     = LV_OPA_COVER;
 800af0a:	4b84      	ldr	r3, [pc, #528]	; (800b11c <lv_style_init+0x2bc>)
 800af0c:	22ff      	movs	r2, #255	; 0xff
 800af0e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800af12:	4c82      	ldr	r4, [pc, #520]	; (800b11c <lv_style_init+0x2bc>)
 800af14:	2220      	movs	r2, #32
 800af16:	2120      	movs	r1, #32
 800af18:	2020      	movs	r0, #32
 800af1a:	f7ff ff69 	bl	800adf0 <lv_color_make>
 800af1e:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 800af20:	4b7e      	ldr	r3, [pc, #504]	; (800b11c <lv_style_init+0x2bc>)
 800af22:	2200      	movs	r2, #0
 800af24:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    lv_style_scr.line.opa     = LV_OPA_COVER;
 800af28:	4b7c      	ldr	r3, [pc, #496]	; (800b11c <lv_style_init+0x2bc>)
 800af2a:	22ff      	movs	r2, #255	; 0xff
 800af2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 800af30:	4c7a      	ldr	r4, [pc, #488]	; (800b11c <lv_style_init+0x2bc>)
 800af32:	2220      	movs	r2, #32
 800af34:	2120      	movs	r1, #32
 800af36:	2020      	movs	r0, #32
 800af38:	f7ff ff5a 	bl	800adf0 <lv_color_make>
 800af3c:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_scr.line.width   = 2;
 800af3e:	4b77      	ldr	r3, [pc, #476]	; (800b11c <lv_style_init+0x2bc>)
 800af40:	2202      	movs	r2, #2
 800af42:	86da      	strh	r2, [r3, #54]	; 0x36
    lv_style_scr.line.rounded = 0;
 800af44:	4a75      	ldr	r2, [pc, #468]	; (800b11c <lv_style_init+0x2bc>)
 800af46:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 800af4a:	f36f 0300 	bfc	r3, #0, #1
 800af4e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39

    /*Plain style (by default near the same as the screen style)*/
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800af52:	4972      	ldr	r1, [pc, #456]	; (800b11c <lv_style_init+0x2bc>)
 800af54:	4875      	ldr	r0, [pc, #468]	; (800b12c <lv_style_init+0x2cc>)
 800af56:	f000 f9cf 	bl	800b2f8 <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 800af5a:	4b74      	ldr	r3, [pc, #464]	; (800b12c <lv_style_init+0x2cc>)
 800af5c:	2205      	movs	r2, #5
 800af5e:	835a      	strh	r2, [r3, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 800af60:	4b72      	ldr	r3, [pc, #456]	; (800b12c <lv_style_init+0x2cc>)
 800af62:	2205      	movs	r2, #5
 800af64:	839a      	strh	r2, [r3, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 800af66:	4b71      	ldr	r3, [pc, #452]	; (800b12c <lv_style_init+0x2cc>)
 800af68:	2205      	movs	r2, #5
 800af6a:	82da      	strh	r2, [r3, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 800af6c:	4b6f      	ldr	r3, [pc, #444]	; (800b12c <lv_style_init+0x2cc>)
 800af6e:	2205      	movs	r2, #5
 800af70:	831a      	strh	r2, [r3, #24]

    /*Plain color style*/
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800af72:	496e      	ldr	r1, [pc, #440]	; (800b12c <lv_style_init+0x2cc>)
 800af74:	486e      	ldr	r0, [pc, #440]	; (800b130 <lv_style_init+0x2d0>)
 800af76:	f000 f9bf 	bl	800b2f8 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800af7a:	4c6d      	ldr	r4, [pc, #436]	; (800b130 <lv_style_init+0x2d0>)
 800af7c:	22f0      	movs	r2, #240	; 0xf0
 800af7e:	21f0      	movs	r1, #240	; 0xf0
 800af80:	20f0      	movs	r0, #240	; 0xf0
 800af82:	f7ff ff35 	bl	800adf0 <lv_color_make>
 800af86:	8420      	strh	r0, [r4, #32]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 800af88:	4c69      	ldr	r4, [pc, #420]	; (800b130 <lv_style_init+0x2d0>)
 800af8a:	22f0      	movs	r2, #240	; 0xf0
 800af8c:	21f0      	movs	r1, #240	; 0xf0
 800af8e:	20f0      	movs	r0, #240	; 0xf0
 800af90:	f7ff ff2e 	bl	800adf0 <lv_color_make>
 800af94:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800af96:	4c66      	ldr	r4, [pc, #408]	; (800b130 <lv_style_init+0x2d0>)
 800af98:	22f0      	movs	r2, #240	; 0xf0
 800af9a:	21f0      	movs	r1, #240	; 0xf0
 800af9c:	20f0      	movs	r0, #240	; 0xf0
 800af9e:	f7ff ff27 	bl	800adf0 <lv_color_make>
 800afa2:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 800afa4:	4c62      	ldr	r4, [pc, #392]	; (800b130 <lv_style_init+0x2d0>)
 800afa6:	22d8      	movs	r2, #216	; 0xd8
 800afa8:	2196      	movs	r1, #150	; 0x96
 800afaa:	2055      	movs	r0, #85	; 0x55
 800afac:	f7ff ff20 	bl	800adf0 <lv_color_make>
 800afb0:	8060      	strh	r0, [r4, #2]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800afb2:	4a5f      	ldr	r2, [pc, #380]	; (800b130 <lv_style_init+0x2d0>)
 800afb4:	4b5e      	ldr	r3, [pc, #376]	; (800b130 <lv_style_init+0x2d0>)
 800afb6:	885b      	ldrh	r3, [r3, #2]
 800afb8:	8093      	strh	r3, [r2, #4]

    /*Pretty style */
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 800afba:	495c      	ldr	r1, [pc, #368]	; (800b12c <lv_style_init+0x2cc>)
 800afbc:	485d      	ldr	r0, [pc, #372]	; (800b134 <lv_style_init+0x2d4>)
 800afbe:	f000 f99b 	bl	800b2f8 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800afc2:	4c5c      	ldr	r4, [pc, #368]	; (800b134 <lv_style_init+0x2d4>)
 800afc4:	2220      	movs	r2, #32
 800afc6:	2120      	movs	r1, #32
 800afc8:	2020      	movs	r0, #32
 800afca:	f7ff ff11 	bl	800adf0 <lv_color_make>
 800afce:	8420      	strh	r0, [r4, #32]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 800afd0:	4c58      	ldr	r4, [pc, #352]	; (800b134 <lv_style_init+0x2d4>)
 800afd2:	2220      	movs	r2, #32
 800afd4:	2120      	movs	r1, #32
 800afd6:	2020      	movs	r0, #32
 800afd8:	f7ff ff0a 	bl	800adf0 <lv_color_make>
 800afdc:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 800afde:	4c55      	ldr	r4, [pc, #340]	; (800b134 <lv_style_init+0x2d4>)
 800afe0:	2220      	movs	r2, #32
 800afe2:	2120      	movs	r1, #32
 800afe4:	2020      	movs	r0, #32
 800afe6:	f7ff ff03 	bl	800adf0 <lv_color_make>
 800afea:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 800afec:	4a51      	ldr	r2, [pc, #324]	; (800b134 <lv_style_init+0x2d4>)
 800afee:	4b4c      	ldr	r3, [pc, #304]	; (800b120 <lv_style_init+0x2c0>)
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	8053      	strh	r3, [r2, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 800aff4:	4a4f      	ldr	r2, [pc, #316]	; (800b134 <lv_style_init+0x2d4>)
 800aff6:	4b50      	ldr	r3, [pc, #320]	; (800b138 <lv_style_init+0x2d8>)
 800aff8:	881b      	ldrh	r3, [r3, #0]
 800affa:	8093      	strh	r3, [r2, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 800affc:	4b4d      	ldr	r3, [pc, #308]	; (800b134 <lv_style_init+0x2d4>)
 800affe:	2206      	movs	r2, #6
 800b000:	80da      	strh	r2, [r3, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 800b002:	4c4c      	ldr	r4, [pc, #304]	; (800b134 <lv_style_init+0x2d4>)
 800b004:	2240      	movs	r2, #64	; 0x40
 800b006:	2140      	movs	r1, #64	; 0x40
 800b008:	2040      	movs	r0, #64	; 0x40
 800b00a:	f7ff fef1 	bl	800adf0 <lv_color_make>
 800b00e:	8160      	strh	r0, [r4, #10]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800b010:	4b48      	ldr	r3, [pc, #288]	; (800b134 <lv_style_init+0x2d4>)
 800b012:	2202      	movs	r2, #2
 800b014:	819a      	strh	r2, [r3, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 800b016:	4b47      	ldr	r3, [pc, #284]	; (800b134 <lv_style_init+0x2d4>)
 800b018:	224c      	movs	r2, #76	; 0x4c
 800b01a:	73da      	strb	r2, [r3, #15]

    /*Pretty color style*/
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800b01c:	4945      	ldr	r1, [pc, #276]	; (800b134 <lv_style_init+0x2d4>)
 800b01e:	4847      	ldr	r0, [pc, #284]	; (800b13c <lv_style_init+0x2dc>)
 800b020:	f000 f96a 	bl	800b2f8 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 800b024:	4c45      	ldr	r4, [pc, #276]	; (800b13c <lv_style_init+0x2dc>)
 800b026:	22e0      	movs	r2, #224	; 0xe0
 800b028:	21e0      	movs	r1, #224	; 0xe0
 800b02a:	20e0      	movs	r0, #224	; 0xe0
 800b02c:	f7ff fee0 	bl	800adf0 <lv_color_make>
 800b030:	8420      	strh	r0, [r4, #32]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 800b032:	4c42      	ldr	r4, [pc, #264]	; (800b13c <lv_style_init+0x2dc>)
 800b034:	22e0      	movs	r2, #224	; 0xe0
 800b036:	21e0      	movs	r1, #224	; 0xe0
 800b038:	20e0      	movs	r0, #224	; 0xe0
 800b03a:	f7ff fed9 	bl	800adf0 <lv_color_make>
 800b03e:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 800b040:	4c3e      	ldr	r4, [pc, #248]	; (800b13c <lv_style_init+0x2dc>)
 800b042:	22c0      	movs	r2, #192	; 0xc0
 800b044:	21c0      	movs	r1, #192	; 0xc0
 800b046:	20c0      	movs	r0, #192	; 0xc0
 800b048:	f7ff fed2 	bl	800adf0 <lv_color_make>
 800b04c:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 800b04e:	4c3b      	ldr	r4, [pc, #236]	; (800b13c <lv_style_init+0x2dc>)
 800b050:	22c7      	movs	r2, #199	; 0xc7
 800b052:	219a      	movs	r1, #154	; 0x9a
 800b054:	206b      	movs	r0, #107	; 0x6b
 800b056:	f7ff fecb 	bl	800adf0 <lv_color_make>
 800b05a:	8060      	strh	r0, [r4, #2]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 800b05c:	4c37      	ldr	r4, [pc, #220]	; (800b13c <lv_style_init+0x2dc>)
 800b05e:	228b      	movs	r2, #139	; 0x8b
 800b060:	2159      	movs	r1, #89	; 0x59
 800b062:	202b      	movs	r0, #43	; 0x2b
 800b064:	f7ff fec4 	bl	800adf0 <lv_color_make>
 800b068:	80a0      	strh	r0, [r4, #4]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800b06a:	4c34      	ldr	r4, [pc, #208]	; (800b13c <lv_style_init+0x2dc>)
 800b06c:	2242      	movs	r2, #66	; 0x42
 800b06e:	212c      	movs	r1, #44	; 0x2c
 800b070:	2015      	movs	r0, #21
 800b072:	f7ff febd 	bl	800adf0 <lv_color_make>
 800b076:	8160      	strh	r0, [r4, #10]

    /*Transparent style*/
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 800b078:	492c      	ldr	r1, [pc, #176]	; (800b12c <lv_style_init+0x2cc>)
 800b07a:	4831      	ldr	r0, [pc, #196]	; (800b140 <lv_style_init+0x2e0>)
 800b07c:	f000 f93c 	bl	800b2f8 <lv_style_copy>
    lv_style_transp.glass             = 1;
 800b080:	4a2f      	ldr	r2, [pc, #188]	; (800b140 <lv_style_init+0x2e0>)
 800b082:	7813      	ldrb	r3, [r2, #0]
 800b084:	f043 0301 	orr.w	r3, r3, #1
 800b088:	7013      	strb	r3, [r2, #0]
    lv_style_transp.body.border.width = 0;
 800b08a:	4b2d      	ldr	r3, [pc, #180]	; (800b140 <lv_style_init+0x2e0>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	819a      	strh	r2, [r3, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 800b090:	4b2b      	ldr	r3, [pc, #172]	; (800b140 <lv_style_init+0x2e0>)
 800b092:	2200      	movs	r2, #0
 800b094:	721a      	strb	r2, [r3, #8]

    /*Transparent fitting size*/
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800b096:	492a      	ldr	r1, [pc, #168]	; (800b140 <lv_style_init+0x2e0>)
 800b098:	482a      	ldr	r0, [pc, #168]	; (800b144 <lv_style_init+0x2e4>)
 800b09a:	f000 f92d 	bl	800b2f8 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 800b09e:	4b29      	ldr	r3, [pc, #164]	; (800b144 <lv_style_init+0x2e4>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	835a      	strh	r2, [r3, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 800b0a4:	4b27      	ldr	r3, [pc, #156]	; (800b144 <lv_style_init+0x2e4>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	839a      	strh	r2, [r3, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 800b0aa:	4b26      	ldr	r3, [pc, #152]	; (800b144 <lv_style_init+0x2e4>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	82da      	strh	r2, [r3, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 800b0b0:	4b24      	ldr	r3, [pc, #144]	; (800b144 <lv_style_init+0x2e4>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	831a      	strh	r2, [r3, #24]

    /*Transparent tight style*/
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800b0b6:	4923      	ldr	r1, [pc, #140]	; (800b144 <lv_style_init+0x2e4>)
 800b0b8:	4823      	ldr	r0, [pc, #140]	; (800b148 <lv_style_init+0x2e8>)
 800b0ba:	f000 f91d 	bl	800b2f8 <lv_style_copy>
    lv_style_transp_tight.body.padding.inner = 0;
 800b0be:	4b22      	ldr	r3, [pc, #136]	; (800b148 <lv_style_init+0x2e8>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	83da      	strh	r2, [r3, #30]

    /*Button released style*/
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 800b0c4:	4919      	ldr	r1, [pc, #100]	; (800b12c <lv_style_init+0x2cc>)
 800b0c6:	4821      	ldr	r0, [pc, #132]	; (800b14c <lv_style_init+0x2ec>)
 800b0c8:	f000 f916 	bl	800b2f8 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800b0cc:	4c1f      	ldr	r4, [pc, #124]	; (800b14c <lv_style_init+0x2ec>)
 800b0ce:	22d0      	movs	r2, #208	; 0xd0
 800b0d0:	21a2      	movs	r1, #162	; 0xa2
 800b0d2:	2076      	movs	r0, #118	; 0x76
 800b0d4:	f7ff fe8c 	bl	800adf0 <lv_color_make>
 800b0d8:	8060      	strh	r0, [r4, #2]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800b0da:	4c1c      	ldr	r4, [pc, #112]	; (800b14c <lv_style_init+0x2ec>)
 800b0dc:	225d      	movs	r2, #93	; 0x5d
 800b0de:	213a      	movs	r1, #58	; 0x3a
 800b0e0:	2019      	movs	r0, #25
 800b0e2:	f7ff fe85 	bl	800adf0 <lv_color_make>
 800b0e6:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 800b0e8:	4b18      	ldr	r3, [pc, #96]	; (800b14c <lv_style_init+0x2ec>)
 800b0ea:	2206      	movs	r2, #6
 800b0ec:	80da      	strh	r2, [r3, #6]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 800b0ee:	4b17      	ldr	r3, [pc, #92]	; (800b14c <lv_style_init+0x2ec>)
 800b0f0:	2219      	movs	r2, #25
 800b0f2:	835a      	strh	r2, [r3, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 800b0f4:	4b15      	ldr	r3, [pc, #84]	; (800b14c <lv_style_init+0x2ec>)
 800b0f6:	2219      	movs	r2, #25
 800b0f8:	839a      	strh	r2, [r3, #28]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 800b0fa:	4b14      	ldr	r3, [pc, #80]	; (800b14c <lv_style_init+0x2ec>)
 800b0fc:	2210      	movs	r2, #16
 800b0fe:	82da      	strh	r2, [r3, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 800b100:	4b12      	ldr	r3, [pc, #72]	; (800b14c <lv_style_init+0x2ec>)
 800b102:	2210      	movs	r2, #16
 800b104:	831a      	strh	r2, [r3, #24]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 800b106:	4b11      	ldr	r3, [pc, #68]	; (800b14c <lv_style_init+0x2ec>)
 800b108:	220a      	movs	r2, #10
 800b10a:	83da      	strh	r2, [r3, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 800b10c:	4c0f      	ldr	r4, [pc, #60]	; (800b14c <lv_style_init+0x2ec>)
 800b10e:	2228      	movs	r2, #40	; 0x28
 800b110:	2119      	movs	r1, #25
 800b112:	200b      	movs	r0, #11
 800b114:	f7ff fe6c 	bl	800adf0 <lv_color_make>
 800b118:	8160      	strh	r0, [r4, #10]
 800b11a:	e019      	b.n	800b150 <lv_style_init+0x2f0>
 800b11c:	2001ba88 	.word	0x2001ba88
 800b120:	0802c858 	.word	0x0802c858
 800b124:	0802c85c 	.word	0x0802c85c
 800b128:	20000bf0 	.word	0x20000bf0
 800b12c:	2001ba10 	.word	0x2001ba10
 800b130:	2001bb00 	.word	0x2001bb00
 800b134:	2001b920 	.word	0x2001b920
 800b138:	0802c860 	.word	0x0802c860
 800b13c:	2001b830 	.word	0x2001b830
 800b140:	2001b86c 	.word	0x2001b86c
 800b144:	2001b9d4 	.word	0x2001b9d4
 800b148:	2001b95c 	.word	0x2001b95c
 800b14c:	2001b8a8 	.word	0x2001b8a8
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800b150:	4b63      	ldr	r3, [pc, #396]	; (800b2e0 <lv_style_init+0x480>)
 800b152:	2202      	movs	r2, #2
 800b154:	819a      	strh	r2, [r3, #12]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 800b156:	4b62      	ldr	r3, [pc, #392]	; (800b2e0 <lv_style_init+0x480>)
 800b158:	22b2      	movs	r2, #178	; 0xb2
 800b15a:	73da      	strb	r2, [r3, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 800b15c:	4a60      	ldr	r2, [pc, #384]	; (800b2e0 <lv_style_init+0x480>)
 800b15e:	4b61      	ldr	r3, [pc, #388]	; (800b2e4 <lv_style_init+0x484>)
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	8213      	strh	r3, [r2, #16]
    lv_style_btn_rel.body.shadow.width   = 0;
 800b164:	4b5e      	ldr	r3, [pc, #376]	; (800b2e0 <lv_style_init+0x480>)
 800b166:	2200      	movs	r2, #0
 800b168:	825a      	strh	r2, [r3, #18]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 800b16a:	4c5d      	ldr	r4, [pc, #372]	; (800b2e0 <lv_style_init+0x480>)
 800b16c:	22ff      	movs	r2, #255	; 0xff
 800b16e:	21ff      	movs	r1, #255	; 0xff
 800b170:	20ff      	movs	r0, #255	; 0xff
 800b172:	f7ff fe3d 	bl	800adf0 <lv_color_make>
 800b176:	8420      	strh	r0, [r4, #32]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 800b178:	4c59      	ldr	r4, [pc, #356]	; (800b2e0 <lv_style_init+0x480>)
 800b17a:	22ff      	movs	r2, #255	; 0xff
 800b17c:	21ff      	movs	r1, #255	; 0xff
 800b17e:	20ff      	movs	r0, #255	; 0xff
 800b180:	f7ff fe36 	bl	800adf0 <lv_color_make>
 800b184:	8620      	strh	r0, [r4, #48]	; 0x30

    /*Button pressed style*/
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 800b186:	4956      	ldr	r1, [pc, #344]	; (800b2e0 <lv_style_init+0x480>)
 800b188:	4857      	ldr	r0, [pc, #348]	; (800b2e8 <lv_style_init+0x488>)
 800b18a:	f000 f8b5 	bl	800b2f8 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 800b18e:	4c56      	ldr	r4, [pc, #344]	; (800b2e8 <lv_style_init+0x488>)
 800b190:	2294      	movs	r2, #148	; 0x94
 800b192:	2162      	movs	r1, #98	; 0x62
 800b194:	2033      	movs	r0, #51	; 0x33
 800b196:	f7ff fe2b 	bl	800adf0 <lv_color_make>
 800b19a:	8060      	strh	r0, [r4, #2]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 800b19c:	4c52      	ldr	r4, [pc, #328]	; (800b2e8 <lv_style_init+0x488>)
 800b19e:	223c      	movs	r2, #60	; 0x3c
 800b1a0:	2126      	movs	r1, #38	; 0x26
 800b1a2:	2010      	movs	r0, #16
 800b1a4:	f7ff fe24 	bl	800adf0 <lv_color_make>
 800b1a8:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800b1aa:	4c4f      	ldr	r4, [pc, #316]	; (800b2e8 <lv_style_init+0x488>)
 800b1ac:	22c6      	movs	r2, #198	; 0xc6
 800b1ae:	21b5      	movs	r1, #181	; 0xb5
 800b1b0:	20a4      	movs	r0, #164	; 0xa4
 800b1b2:	f7ff fe1d 	bl	800adf0 <lv_color_make>
 800b1b6:	8420      	strh	r0, [r4, #32]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 800b1b8:	4c4b      	ldr	r4, [pc, #300]	; (800b2e8 <lv_style_init+0x488>)
 800b1ba:	22c6      	movs	r2, #198	; 0xc6
 800b1bc:	21b5      	movs	r1, #181	; 0xb5
 800b1be:	20a4      	movs	r0, #164	; 0xa4
 800b1c0:	f7ff fe16 	bl	800adf0 <lv_color_make>
 800b1c4:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800b1c6:	4c48      	ldr	r4, [pc, #288]	; (800b2e8 <lv_style_init+0x488>)
 800b1c8:	22c6      	movs	r2, #198	; 0xc6
 800b1ca:	21b5      	movs	r1, #181	; 0xb5
 800b1cc:	20a4      	movs	r0, #164	; 0xa4
 800b1ce:	f7ff fe0f 	bl	800adf0 <lv_color_make>
 800b1d2:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button toggle released style*/
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 800b1d4:	4942      	ldr	r1, [pc, #264]	; (800b2e0 <lv_style_init+0x480>)
 800b1d6:	4845      	ldr	r0, [pc, #276]	; (800b2ec <lv_style_init+0x48c>)
 800b1d8:	f000 f88e 	bl	800b2f8 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 800b1dc:	4c43      	ldr	r4, [pc, #268]	; (800b2ec <lv_style_init+0x48c>)
 800b1de:	2222      	movs	r2, #34	; 0x22
 800b1e0:	2111      	movs	r1, #17
 800b1e2:	200a      	movs	r0, #10
 800b1e4:	f7ff fe04 	bl	800adf0 <lv_color_make>
 800b1e8:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 800b1ea:	4c40      	ldr	r4, [pc, #256]	; (800b2ec <lv_style_init+0x48c>)
 800b1ec:	2290      	movs	r2, #144	; 0x90
 800b1ee:	2162      	movs	r1, #98	; 0x62
 800b1f0:	2037      	movs	r0, #55	; 0x37
 800b1f2:	f7ff fdfd 	bl	800adf0 <lv_color_make>
 800b1f6:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800b1f8:	4c3c      	ldr	r4, [pc, #240]	; (800b2ec <lv_style_init+0x48c>)
 800b1fa:	220d      	movs	r2, #13
 800b1fc:	2107      	movs	r1, #7
 800b1fe:	2001      	movs	r0, #1
 800b200:	f7ff fdf6 	bl	800adf0 <lv_color_make>
 800b204:	8160      	strh	r0, [r4, #10]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800b206:	4c39      	ldr	r4, [pc, #228]	; (800b2ec <lv_style_init+0x48c>)
 800b208:	22f4      	movs	r2, #244	; 0xf4
 800b20a:	21dd      	movs	r1, #221	; 0xdd
 800b20c:	20c8      	movs	r0, #200	; 0xc8
 800b20e:	f7ff fdef 	bl	800adf0 <lv_color_make>
 800b212:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 800b214:	4c35      	ldr	r4, [pc, #212]	; (800b2ec <lv_style_init+0x48c>)
 800b216:	22f4      	movs	r2, #244	; 0xf4
 800b218:	21dd      	movs	r1, #221	; 0xdd
 800b21a:	20c8      	movs	r0, #200	; 0xc8
 800b21c:	f7ff fde8 	bl	800adf0 <lv_color_make>
 800b220:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800b222:	4c32      	ldr	r4, [pc, #200]	; (800b2ec <lv_style_init+0x48c>)
 800b224:	22f4      	movs	r2, #244	; 0xf4
 800b226:	21dd      	movs	r1, #221	; 0xdd
 800b228:	20c8      	movs	r0, #200	; 0xc8
 800b22a:	f7ff fde1 	bl	800adf0 <lv_color_make>
 800b22e:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button toggle pressed style*/
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 800b230:	492e      	ldr	r1, [pc, #184]	; (800b2ec <lv_style_init+0x48c>)
 800b232:	482f      	ldr	r0, [pc, #188]	; (800b2f0 <lv_style_init+0x490>)
 800b234:	f000 f860 	bl	800b2f8 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 800b238:	4c2d      	ldr	r4, [pc, #180]	; (800b2f0 <lv_style_init+0x490>)
 800b23a:	2227      	movs	r2, #39	; 0x27
 800b23c:	2114      	movs	r1, #20
 800b23e:	2002      	movs	r0, #2
 800b240:	f7ff fdd6 	bl	800adf0 <lv_color_make>
 800b244:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 800b246:	4c2a      	ldr	r4, [pc, #168]	; (800b2f0 <lv_style_init+0x490>)
 800b248:	2270      	movs	r2, #112	; 0x70
 800b24a:	214c      	movs	r1, #76	; 0x4c
 800b24c:	202b      	movs	r0, #43	; 0x2b
 800b24e:	f7ff fdcf 	bl	800adf0 <lv_color_make>
 800b252:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800b254:	4c26      	ldr	r4, [pc, #152]	; (800b2f0 <lv_style_init+0x490>)
 800b256:	22c6      	movs	r2, #198	; 0xc6
 800b258:	21b5      	movs	r1, #181	; 0xb5
 800b25a:	20a4      	movs	r0, #164	; 0xa4
 800b25c:	f7ff fdc8 	bl	800adf0 <lv_color_make>
 800b260:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 800b262:	4c23      	ldr	r4, [pc, #140]	; (800b2f0 <lv_style_init+0x490>)
 800b264:	22c6      	movs	r2, #198	; 0xc6
 800b266:	21b5      	movs	r1, #181	; 0xb5
 800b268:	20a4      	movs	r0, #164	; 0xa4
 800b26a:	f7ff fdc1 	bl	800adf0 <lv_color_make>
 800b26e:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800b270:	4c1f      	ldr	r4, [pc, #124]	; (800b2f0 <lv_style_init+0x490>)
 800b272:	22c6      	movs	r2, #198	; 0xc6
 800b274:	21b5      	movs	r1, #181	; 0xb5
 800b276:	20a4      	movs	r0, #164	; 0xa4
 800b278:	f7ff fdba 	bl	800adf0 <lv_color_make>
 800b27c:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button inactive style*/
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 800b27e:	4918      	ldr	r1, [pc, #96]	; (800b2e0 <lv_style_init+0x480>)
 800b280:	481c      	ldr	r0, [pc, #112]	; (800b2f4 <lv_style_init+0x494>)
 800b282:	f000 f839 	bl	800b2f8 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 800b286:	4c1b      	ldr	r4, [pc, #108]	; (800b2f4 <lv_style_init+0x494>)
 800b288:	22d8      	movs	r2, #216	; 0xd8
 800b28a:	21d8      	movs	r1, #216	; 0xd8
 800b28c:	20d8      	movs	r0, #216	; 0xd8
 800b28e:	f7ff fdaf 	bl	800adf0 <lv_color_make>
 800b292:	8060      	strh	r0, [r4, #2]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 800b294:	4c17      	ldr	r4, [pc, #92]	; (800b2f4 <lv_style_init+0x494>)
 800b296:	22d8      	movs	r2, #216	; 0xd8
 800b298:	21d8      	movs	r1, #216	; 0xd8
 800b29a:	20d8      	movs	r0, #216	; 0xd8
 800b29c:	f7ff fda8 	bl	800adf0 <lv_color_make>
 800b2a0:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 800b2a2:	4c14      	ldr	r4, [pc, #80]	; (800b2f4 <lv_style_init+0x494>)
 800b2a4:	2290      	movs	r2, #144	; 0x90
 800b2a6:	2190      	movs	r1, #144	; 0x90
 800b2a8:	2090      	movs	r0, #144	; 0x90
 800b2aa:	f7ff fda1 	bl	800adf0 <lv_color_make>
 800b2ae:	8160      	strh	r0, [r4, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 800b2b0:	4c10      	ldr	r4, [pc, #64]	; (800b2f4 <lv_style_init+0x494>)
 800b2b2:	2270      	movs	r2, #112	; 0x70
 800b2b4:	2170      	movs	r1, #112	; 0x70
 800b2b6:	2070      	movs	r0, #112	; 0x70
 800b2b8:	f7ff fd9a 	bl	800adf0 <lv_color_make>
 800b2bc:	8420      	strh	r0, [r4, #32]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 800b2be:	4c0d      	ldr	r4, [pc, #52]	; (800b2f4 <lv_style_init+0x494>)
 800b2c0:	2270      	movs	r2, #112	; 0x70
 800b2c2:	2170      	movs	r1, #112	; 0x70
 800b2c4:	2070      	movs	r0, #112	; 0x70
 800b2c6:	f7ff fd93 	bl	800adf0 <lv_color_make>
 800b2ca:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 800b2cc:	4c09      	ldr	r4, [pc, #36]	; (800b2f4 <lv_style_init+0x494>)
 800b2ce:	2270      	movs	r2, #112	; 0x70
 800b2d0:	2170      	movs	r1, #112	; 0x70
 800b2d2:	2070      	movs	r0, #112	; 0x70
 800b2d4:	f7ff fd8c 	bl	800adf0 <lv_color_make>
 800b2d8:	86a0      	strh	r0, [r4, #52]	; 0x34
}
 800b2da:	bf00      	nop
 800b2dc:	bd98      	pop	{r3, r4, r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	2001b8a8 	.word	0x2001b8a8
 800b2e4:	0802c85c 	.word	0x0802c85c
 800b2e8:	2001b8e4 	.word	0x2001b8e4
 800b2ec:	2001ba4c 	.word	0x2001ba4c
 800b2f0:	2001bac4 	.word	0x2001bac4
 800b2f4:	2001b998 	.word	0x2001b998

0800b2f8 <lv_style_copy>:
 * Copy a style to an other
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_style_t));
 800b302:	223c      	movs	r2, #60	; 0x3c
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f01e fd54 	bl	8029db4 <memcpy>
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <lv_draw_get_buf>:
 * Give a buffer with the given to use during drawing.
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 800b31c:	4b18      	ldr	r3, [pc, #96]	; (800b380 <lv_draw_get_buf+0x6c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	429a      	cmp	r2, r3
 800b324:	d802      	bhi.n	800b32c <lv_draw_get_buf+0x18>
 800b326:	4b17      	ldr	r3, [pc, #92]	; (800b384 <lv_draw_get_buf+0x70>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	e024      	b.n	800b376 <lv_draw_get_buf+0x62>

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 800b32c:	4a14      	ldr	r2, [pc, #80]	; (800b380 <lv_draw_get_buf+0x6c>)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6013      	str	r3, [r2, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 800b332:	4b14      	ldr	r3, [pc, #80]	; (800b384 <lv_draw_get_buf+0x70>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10d      	bne.n	800b356 <lv_draw_get_buf+0x42>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f00b f90e 	bl	801655c <lv_mem_alloc>
 800b340:	4602      	mov	r2, r0
 800b342:	4b10      	ldr	r3, [pc, #64]	; (800b384 <lv_draw_get_buf+0x70>)
 800b344:	601a      	str	r2, [r3, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 800b346:	4b0f      	ldr	r3, [pc, #60]	; (800b384 <lv_draw_get_buf+0x70>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d100      	bne.n	800b350 <lv_draw_get_buf+0x3c>
 800b34e:	e7fe      	b.n	800b34e <lv_draw_get_buf+0x3a>
        return LV_GC_ROOT(_lv_draw_buf);
 800b350:	4b0c      	ldr	r3, [pc, #48]	; (800b384 <lv_draw_get_buf+0x70>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	e00f      	b.n	800b376 <lv_draw_get_buf+0x62>
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 800b356:	4b0b      	ldr	r3, [pc, #44]	; (800b384 <lv_draw_get_buf+0x70>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f00b f965 	bl	801662c <lv_mem_realloc>
 800b362:	4602      	mov	r2, r0
 800b364:	4b07      	ldr	r3, [pc, #28]	; (800b384 <lv_draw_get_buf+0x70>)
 800b366:	601a      	str	r2, [r3, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 800b368:	4b06      	ldr	r3, [pc, #24]	; (800b384 <lv_draw_get_buf+0x70>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d100      	bne.n	800b372 <lv_draw_get_buf+0x5e>
 800b370:	e7fe      	b.n	800b370 <lv_draw_get_buf+0x5c>
    return LV_GC_ROOT(_lv_draw_buf);
 800b372:	4b04      	ldr	r3, [pc, #16]	; (800b384 <lv_draw_get_buf+0x70>)
 800b374:	681b      	ldr	r3, [r3, #0]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	20017774 	.word	0x20017774
 800b384:	2001bb54 	.word	0x2001bb54

0800b388 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_draw_buf)) {
 800b38c:	4b08      	ldr	r3, [pc, #32]	; (800b3b0 <lv_draw_free_buf+0x28>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00a      	beq.n	800b3aa <lv_draw_free_buf+0x22>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 800b394:	4b06      	ldr	r3, [pc, #24]	; (800b3b0 <lv_draw_free_buf+0x28>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4618      	mov	r0, r3
 800b39a:	f00b f91f 	bl	80165dc <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 800b39e:	4b04      	ldr	r3, [pc, #16]	; (800b3b0 <lv_draw_free_buf+0x28>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	601a      	str	r2, [r3, #0]
        draw_buf_size = 0;
 800b3a4:	4b03      	ldr	r3, [pc, #12]	; (800b3b4 <lv_draw_free_buf+0x2c>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	601a      	str	r2, [r3, #0]
    }
}
 800b3aa:	bf00      	nop
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	2001bb54 	.word	0x2001bb54
 800b3b4:	20017774 	.word	0x20017774

0800b3b8 <lv_draw_aa_get_opa>:
 * @param px_id position of  of a pixel which opacity should be get [0..seg-1]
 * @param base_opa the base opacity
 * @return the opacity of the given pixel
 */
lv_opa_t lv_draw_aa_get_opa(lv_coord_t seg, lv_coord_t px_id, lv_opa_t base_opa)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	4603      	mov	r3, r0
 800b3c0:	80fb      	strh	r3, [r7, #6]
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	80bb      	strh	r3, [r7, #4]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	70fb      	strb	r3, [r7, #3]
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 800b3ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <lv_draw_aa_get_opa+0x1e>
        return LV_OPA_TRANSP;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e021      	b.n	800b41a <lv_draw_aa_get_opa+0x62>
    else if(seg < 8)
 800b3d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3da:	2b07      	cmp	r3, #7
 800b3dc:	dc10      	bgt.n	800b400 <lv_draw_aa_get_opa+0x48>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800b3de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	4a10      	ldr	r2, [pc, #64]	; (800b428 <lv_draw_aa_get_opa+0x70>)
 800b3e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b3ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	78fb      	ldrb	r3, [r7, #3]
 800b3f6:	fb03 f302 	mul.w	r3, r3, r2
 800b3fa:	0a1b      	lsrs	r3, r3, #8
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	e00c      	b.n	800b41a <lv_draw_aa_get_opa+0x62>
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800b400:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b404:	005b      	lsls	r3, r3, #1
 800b406:	3301      	adds	r3, #1
 800b408:	78fa      	ldrb	r2, [r7, #3]
 800b40a:	fb02 f203 	mul.w	r2, r2, r3
 800b40e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	fb92 f3f3 	sdiv	r3, r2, r3
 800b418:	b2db      	uxtb	r3, r3
    }
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	20000010 	.word	0x20000010

0800b42c <lv_draw_aa_ver_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_ver_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af02      	add	r7, sp, #8
 800b432:	607b      	str	r3, [r7, #4]
 800b434:	4603      	mov	r3, r0
 800b436:	81fb      	strh	r3, [r7, #14]
 800b438:	460b      	mov	r3, r1
 800b43a:	81bb      	strh	r3, [r7, #12]
 800b43c:	4613      	mov	r3, r2
 800b43e:	817b      	strh	r3, [r7, #10]
    bool aa_inv = false;
 800b440:	2300      	movs	r3, #0
 800b442:	75fb      	strb	r3, [r7, #23]
    if(length < 0) {
 800b444:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	da05      	bge.n	800b458 <lv_draw_aa_ver_seg+0x2c>
        aa_inv = true;
 800b44c:	2301      	movs	r3, #1
 800b44e:	75fb      	strb	r3, [r7, #23]
        length = -length;
 800b450:	897b      	ldrh	r3, [r7, #10]
 800b452:	425b      	negs	r3, r3
 800b454:	b29b      	uxth	r3, r3
 800b456:	817b      	strh	r3, [r7, #10]
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 800b458:	2300      	movs	r3, #0
 800b45a:	82bb      	strh	r3, [r7, #20]
 800b45c:	e025      	b.n	800b4aa <lv_draw_aa_ver_seg+0x7e>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 800b45e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800b462:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800b466:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7ff ffa4 	bl	800b3b8 <lv_draw_aa_get_opa>
 800b470:	4603      	mov	r3, r0
 800b472:	74fb      	strb	r3, [r7, #19]
        if(aa_inv) px_opa = opa - px_opa;
 800b474:	7dfb      	ldrb	r3, [r7, #23]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d004      	beq.n	800b484 <lv_draw_aa_ver_seg+0x58>
 800b47a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800b47e:	7cfb      	ldrb	r3, [r7, #19]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	74fb      	strb	r3, [r7, #19]
        lv_draw_px(x, y + i, mask, color, px_opa);
 800b484:	89ba      	ldrh	r2, [r7, #12]
 800b486:	8abb      	ldrh	r3, [r7, #20]
 800b488:	4413      	add	r3, r2
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	b219      	sxth	r1, r3
 800b48e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800b492:	7cfb      	ldrb	r3, [r7, #19]
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	8c3b      	ldrh	r3, [r7, #32]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	f000 fcb4 	bl	800be06 <lv_draw_px>
    for(i = 0; i < length; i++) {
 800b49e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	82bb      	strh	r3, [r7, #20]
 800b4aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800b4ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	dbd3      	blt.n	800b45e <lv_draw_aa_ver_seg+0x32>
    }
}
 800b4b6:	bf00      	nop
 800b4b8:	3718      	adds	r7, #24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <lv_draw_aa_hor_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_hor_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b088      	sub	sp, #32
 800b4c2:	af02      	add	r7, sp, #8
 800b4c4:	607b      	str	r3, [r7, #4]
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	81fb      	strh	r3, [r7, #14]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	81bb      	strh	r3, [r7, #12]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	817b      	strh	r3, [r7, #10]
    bool aa_inv = false;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	75fb      	strb	r3, [r7, #23]
    if(length < 0) {
 800b4d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	da05      	bge.n	800b4ea <lv_draw_aa_hor_seg+0x2c>
        aa_inv = true;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	75fb      	strb	r3, [r7, #23]
        length = -length;
 800b4e2:	897b      	ldrh	r3, [r7, #10]
 800b4e4:	425b      	negs	r3, r3
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	817b      	strh	r3, [r7, #10]
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	82bb      	strh	r3, [r7, #20]
 800b4ee:	e025      	b.n	800b53c <lv_draw_aa_hor_seg+0x7e>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 800b4f0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800b4f4:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800b4f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7ff ff5b 	bl	800b3b8 <lv_draw_aa_get_opa>
 800b502:	4603      	mov	r3, r0
 800b504:	74fb      	strb	r3, [r7, #19]
        if(aa_inv) px_opa = opa - px_opa;
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d004      	beq.n	800b516 <lv_draw_aa_hor_seg+0x58>
 800b50c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800b510:	7cfb      	ldrb	r3, [r7, #19]
 800b512:	1ad3      	subs	r3, r2, r3
 800b514:	74fb      	strb	r3, [r7, #19]
        lv_draw_px(x + i, y, mask, color, px_opa);
 800b516:	89fa      	ldrh	r2, [r7, #14]
 800b518:	8abb      	ldrh	r3, [r7, #20]
 800b51a:	4413      	add	r3, r2
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	b218      	sxth	r0, r3
 800b520:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800b524:	7cfb      	ldrb	r3, [r7, #19]
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	8c3b      	ldrh	r3, [r7, #32]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	f000 fc6b 	bl	800be06 <lv_draw_px>
    for(i = 0; i < length; i++) {
 800b530:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b534:	b29b      	uxth	r3, r3
 800b536:	3301      	adds	r3, #1
 800b538:	b29b      	uxth	r3, r3
 800b53a:	82bb      	strh	r3, [r7, #20]
 800b53c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800b540:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b544:	429a      	cmp	r2, r3
 800b546:	dbd3      	blt.n	800b4f0 <lv_draw_aa_hor_seg+0x32>
    }
}
 800b548:	bf00      	nop
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <lv_draw_arc>:
 * @param style style of the arc (`body.thickness`, `body.main_color`, `body.opa` is used)
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_arc(lv_coord_t center_x, lv_coord_t center_y, uint16_t radius, const lv_area_t * mask,
                 uint16_t start_angle, uint16_t end_angle, const lv_style_t * style, lv_opa_t opa_scale)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b094      	sub	sp, #80	; 0x50
 800b554:	af02      	add	r7, sp, #8
 800b556:	607b      	str	r3, [r7, #4]
 800b558:	4603      	mov	r3, r0
 800b55a:	81fb      	strh	r3, [r7, #14]
 800b55c:	460b      	mov	r3, r1
 800b55e:	81bb      	strh	r3, [r7, #12]
 800b560:	4613      	mov	r3, r2
 800b562:	817b      	strh	r3, [r7, #10]
    lv_coord_t thickness = style->line.width;
 800b564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b568:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    if(thickness > radius) thickness = radius;
 800b56c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800b570:	897b      	ldrh	r3, [r7, #10]
 800b572:	429a      	cmp	r2, r3
 800b574:	dd02      	ble.n	800b57c <lv_draw_arc+0x2c>
 800b576:	897b      	ldrh	r3, [r7, #10]
 800b578:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_coord_t r_out = radius;
 800b57c:	897b      	ldrh	r3, [r7, #10]
 800b57e:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t r_in  = r_out - thickness;
 800b580:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b582:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b586:	1ad3      	subs	r3, r2, r3
 800b588:	b29b      	uxth	r3, r3
 800b58a:	873b      	strh	r3, [r7, #56]	; 0x38
    int16_t deg_base;
    int16_t deg;
    lv_coord_t x_start[4];
    lv_coord_t x_end[4];

    lv_color_t color = style->line.color;
 800b58c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b58e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b590:	823b      	strh	r3, [r7, #16]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800b592:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b596:	2bff      	cmp	r3, #255	; 0xff
 800b598:	d102      	bne.n	800b5a0 <lv_draw_arc+0x50>
 800b59a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b59c:	7a1b      	ldrb	r3, [r3, #8]
 800b59e:	e00b      	b.n	800b5b8 <lv_draw_arc+0x68>
 800b5a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5a2:	7a1b      	ldrb	r3, [r3, #8]
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	fb12 f303 	smulbb	r3, r2, r3
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	0a1b      	lsrs	r3, r3, #8
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    bool (*deg_test)(uint16_t, uint16_t, uint16_t);
    if(start_angle <= end_angle)
 800b5bc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b5c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d802      	bhi.n	800b5ce <lv_draw_arc+0x7e>
        deg_test = deg_test_norm;
 800b5c8:	4bae      	ldr	r3, [pc, #696]	; (800b884 <lv_draw_arc+0x334>)
 800b5ca:	643b      	str	r3, [r7, #64]	; 0x40
 800b5cc:	e001      	b.n	800b5d2 <lv_draw_arc+0x82>
    else
        deg_test = deg_test_inv;
 800b5ce:	4bae      	ldr	r3, [pc, #696]	; (800b888 <lv_draw_arc+0x338>)
 800b5d0:	643b      	str	r3, [r7, #64]	; 0x40

    if(deg_test(270, start_angle, end_angle))
 800b5d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b5d6:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800b5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5dc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800b5e0:	4798      	blx	r3
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d017      	beq.n	800b618 <lv_draw_arc+0xc8>
        hor_line(center_x - r_out + 1, center_y, mask, thickness - 1, color, opa); // Left Middle
 800b5e8:	89fa      	ldrh	r2, [r7, #14]
 800b5ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	b218      	sxth	r0, r3
 800b5f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	b21a      	sxth	r2, r3
 800b600:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800b604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	8a3b      	ldrh	r3, [r7, #16]
 800b60c:	f8ad 3000 	strh.w	r3, [sp]
 800b610:	4613      	mov	r3, r2
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	f000 faf4 	bl	800bc00 <hor_line>
    if(deg_test(90, start_angle, end_angle))
 800b618:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b61c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800b620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b622:	205a      	movs	r0, #90	; 0x5a
 800b624:	4798      	blx	r3
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d015      	beq.n	800b658 <lv_draw_arc+0x108>
        hor_line(center_x + r_in, center_y, mask, thickness - 1, color, opa); // Right Middle
 800b62c:	89fa      	ldrh	r2, [r7, #14]
 800b62e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b630:	4413      	add	r3, r2
 800b632:	b29b      	uxth	r3, r3
 800b634:	b218      	sxth	r0, r3
 800b636:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b63a:	3b01      	subs	r3, #1
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	b21a      	sxth	r2, r3
 800b640:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800b644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	8a3b      	ldrh	r3, [r7, #16]
 800b64c:	f8ad 3000 	strh.w	r3, [sp]
 800b650:	4613      	mov	r3, r2
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	f000 fad4 	bl	800bc00 <hor_line>
    if(deg_test(180, start_angle, end_angle))
 800b658:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b65c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800b660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b662:	20b4      	movs	r0, #180	; 0xb4
 800b664:	4798      	blx	r3
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d017      	beq.n	800b69c <lv_draw_arc+0x14c>
        ver_line(center_x, center_y - r_out + 1, mask, thickness - 1, color, opa); // Top Middle
 800b66c:	89ba      	ldrh	r2, [r7, #12]
 800b66e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	b29b      	uxth	r3, r3
 800b674:	3301      	adds	r3, #1
 800b676:	b29b      	uxth	r3, r3
 800b678:	b219      	sxth	r1, r3
 800b67a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b67e:	3b01      	subs	r3, #1
 800b680:	b29b      	uxth	r3, r3
 800b682:	b21a      	sxth	r2, r3
 800b684:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800b688:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	8a3b      	ldrh	r3, [r7, #16]
 800b690:	f8ad 3000 	strh.w	r3, [sp]
 800b694:	4613      	mov	r3, r2
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	f000 fa8a 	bl	800bbb0 <ver_line>
    if(deg_test(0, start_angle, end_angle))
 800b69c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b6a0:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800b6a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	4798      	blx	r3
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d015      	beq.n	800b6dc <lv_draw_arc+0x18c>
        ver_line(center_x, center_y + r_in, mask, thickness - 1, color, opa); // Bottom middle
 800b6b0:	89ba      	ldrh	r2, [r7, #12]
 800b6b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b6b4:	4413      	add	r3, r2
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	b219      	sxth	r1, r3
 800b6ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	b21a      	sxth	r2, r3
 800b6c4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800b6c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6cc:	9301      	str	r3, [sp, #4]
 800b6ce:	8a3b      	ldrh	r3, [r7, #16]
 800b6d0:	f8ad 3000 	strh.w	r3, [sp]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	f000 fa6a 	bl	800bbb0 <ver_line>

    uint32_t r_out_sqr = r_out * r_out;
 800b6dc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800b6e0:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800b6e4:	fb02 f303 	mul.w	r3, r2, r3
 800b6e8:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t r_in_sqr  = r_in * r_in;
 800b6ea:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800b6ee:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800b6f2:	fb02 f303 	mul.w	r3, r2, r3
 800b6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t xi;
    int16_t yi;
    for(yi = -r_out; yi < 0; yi++) {
 800b6f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b6fa:	425b      	negs	r3, r3
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b700:	e1a8      	b.n	800ba54 <lv_draw_arc+0x504>
        x_start[0] = LV_COORD_MIN;
 800b702:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800b706:	83bb      	strh	r3, [r7, #28]
        x_start[1] = LV_COORD_MIN;
 800b708:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800b70c:	83fb      	strh	r3, [r7, #30]
        x_start[2] = LV_COORD_MIN;
 800b70e:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800b712:	843b      	strh	r3, [r7, #32]
        x_start[3] = LV_COORD_MIN;
 800b714:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800b718:	847b      	strh	r3, [r7, #34]	; 0x22
        x_end[0]   = LV_COORD_MIN;
 800b71a:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800b71e:	82bb      	strh	r3, [r7, #20]
        x_end[1]   = LV_COORD_MIN;
 800b720:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800b724:	82fb      	strh	r3, [r7, #22]
        x_end[2]   = LV_COORD_MIN;
 800b726:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800b72a:	833b      	strh	r3, [r7, #24]
        x_end[3]   = LV_COORD_MIN;
 800b72c:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800b730:	837b      	strh	r3, [r7, #26]
        for(xi = -r_out; xi < 0; xi++) {
 800b732:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b734:	425b      	negs	r3, r3
 800b736:	b29b      	uxth	r3, r3
 800b738:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b73a:	e0c4      	b.n	800b8c6 <lv_draw_arc+0x376>

            uint32_t r_act_sqr = xi * xi + yi * yi;
 800b73c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800b740:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800b744:	fb02 f203 	mul.w	r2, r2, r3
 800b748:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800b74c:	f9b7 103c 	ldrsh.w	r1, [r7, #60]	; 0x3c
 800b750:	fb01 f303 	mul.w	r3, r1, r3
 800b754:	4413      	add	r3, r2
 800b756:	62bb      	str	r3, [r7, #40]	; 0x28
            if(r_act_sqr > r_out_sqr) continue;
 800b758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	429a      	cmp	r2, r3
 800b75e:	f200 80ab 	bhi.w	800b8b8 <lv_draw_arc+0x368>

            deg_base = fast_atan2(xi, yi) - 180;
 800b762:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800b766:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800b76a:	4611      	mov	r1, r2
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 f97d 	bl	800ba6c <fast_atan2>
 800b772:	4603      	mov	r3, r0
 800b774:	3bb4      	subs	r3, #180	; 0xb4
 800b776:	b29b      	uxth	r3, r3
 800b778:	84fb      	strh	r3, [r7, #38]	; 0x26

            deg = 180 + deg_base;
 800b77a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b77c:	33b4      	adds	r3, #180	; 0xb4
 800b77e:	b29b      	uxth	r3, r3
 800b780:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 800b782:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800b784:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b788:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800b78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b78e:	4798      	blx	r3
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d007      	beq.n	800b7a6 <lv_draw_arc+0x256>
                if(x_start[0] == LV_COORD_MIN) x_start[0] = xi;
 800b796:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b79a:	4a3c      	ldr	r2, [pc, #240]	; (800b88c <lv_draw_arc+0x33c>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d111      	bne.n	800b7c4 <lv_draw_arc+0x274>
 800b7a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7a2:	83bb      	strh	r3, [r7, #28]
 800b7a4:	e00e      	b.n	800b7c4 <lv_draw_arc+0x274>
            } else if(x_start[0] != LV_COORD_MIN && x_end[0] == LV_COORD_MIN) {
 800b7a6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b7aa:	4a38      	ldr	r2, [pc, #224]	; (800b88c <lv_draw_arc+0x33c>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d009      	beq.n	800b7c4 <lv_draw_arc+0x274>
 800b7b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b7b4:	4a35      	ldr	r2, [pc, #212]	; (800b88c <lv_draw_arc+0x33c>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d104      	bne.n	800b7c4 <lv_draw_arc+0x274>
                x_end[0] = xi - 1;
 800b7ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	b21b      	sxth	r3, r3
 800b7c2:	82bb      	strh	r3, [r7, #20]
            }

            deg = 360 - deg_base;
 800b7c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7c6:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 800b7ce:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800b7d0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b7d4:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800b7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7da:	4798      	blx	r3
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d007      	beq.n	800b7f2 <lv_draw_arc+0x2a2>
                if(x_start[1] == LV_COORD_MIN) x_start[1] = xi;
 800b7e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b7e6:	4a29      	ldr	r2, [pc, #164]	; (800b88c <lv_draw_arc+0x33c>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d111      	bne.n	800b810 <lv_draw_arc+0x2c0>
 800b7ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7ee:	83fb      	strh	r3, [r7, #30]
 800b7f0:	e00e      	b.n	800b810 <lv_draw_arc+0x2c0>
            } else if(x_start[1] != LV_COORD_MIN && x_end[1] == LV_COORD_MIN) {
 800b7f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b7f6:	4a25      	ldr	r2, [pc, #148]	; (800b88c <lv_draw_arc+0x33c>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d009      	beq.n	800b810 <lv_draw_arc+0x2c0>
 800b7fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b800:	4a22      	ldr	r2, [pc, #136]	; (800b88c <lv_draw_arc+0x33c>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d104      	bne.n	800b810 <lv_draw_arc+0x2c0>
                x_end[1] = xi - 1;
 800b806:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b808:	3b01      	subs	r3, #1
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	b21b      	sxth	r3, r3
 800b80e:	82fb      	strh	r3, [r7, #22]
            }

            deg = 180 - deg_base;
 800b810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b812:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800b816:	b29b      	uxth	r3, r3
 800b818:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 800b81a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800b81c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b820:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800b824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b826:	4798      	blx	r3
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d007      	beq.n	800b83e <lv_draw_arc+0x2ee>
                if(x_start[2] == LV_COORD_MIN) x_start[2] = xi;
 800b82e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b832:	4a16      	ldr	r2, [pc, #88]	; (800b88c <lv_draw_arc+0x33c>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d111      	bne.n	800b85c <lv_draw_arc+0x30c>
 800b838:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b83a:	843b      	strh	r3, [r7, #32]
 800b83c:	e00e      	b.n	800b85c <lv_draw_arc+0x30c>
            } else if(x_start[2] != LV_COORD_MIN && x_end[2] == LV_COORD_MIN) {
 800b83e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b842:	4a12      	ldr	r2, [pc, #72]	; (800b88c <lv_draw_arc+0x33c>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d009      	beq.n	800b85c <lv_draw_arc+0x30c>
 800b848:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b84c:	4a0f      	ldr	r2, [pc, #60]	; (800b88c <lv_draw_arc+0x33c>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d104      	bne.n	800b85c <lv_draw_arc+0x30c>
                x_end[2] = xi - 1;
 800b852:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b854:	3b01      	subs	r3, #1
 800b856:	b29b      	uxth	r3, r3
 800b858:	b21b      	sxth	r3, r3
 800b85a:	833b      	strh	r3, [r7, #24]
            }

            deg = deg_base;
 800b85c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b85e:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 800b860:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800b862:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b866:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800b86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b86c:	4798      	blx	r3
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00d      	beq.n	800b890 <lv_draw_arc+0x340>
                if(x_start[3] == LV_COORD_MIN) x_start[3] = xi;
 800b874:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b878:	4a04      	ldr	r2, [pc, #16]	; (800b88c <lv_draw_arc+0x33c>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d117      	bne.n	800b8ae <lv_draw_arc+0x35e>
 800b87e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b880:	847b      	strh	r3, [r7, #34]	; 0x22
 800b882:	e014      	b.n	800b8ae <lv_draw_arc+0x35e>
 800b884:	0800bc51 	.word	0x0800bc51
 800b888:	0800bc85 	.word	0x0800bc85
 800b88c:	ffff83e8 	.word	0xffff83e8
            } else if(x_start[3] != LV_COORD_MIN && x_end[3] == LV_COORD_MIN) {
 800b890:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b894:	4a74      	ldr	r2, [pc, #464]	; (800ba68 <lv_draw_arc+0x518>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d009      	beq.n	800b8ae <lv_draw_arc+0x35e>
 800b89a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b89e:	4a72      	ldr	r2, [pc, #456]	; (800ba68 <lv_draw_arc+0x518>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d104      	bne.n	800b8ae <lv_draw_arc+0x35e>
                x_end[3] = xi - 1;
 800b8a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	b21b      	sxth	r3, r3
 800b8ac:	837b      	strh	r3, [r7, #26]
            }

            if(r_act_sqr < r_in_sqr)
 800b8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d30d      	bcc.n	800b8d2 <lv_draw_arc+0x382>
 800b8b6:	e000      	b.n	800b8ba <lv_draw_arc+0x36a>
            if(r_act_sqr > r_out_sqr) continue;
 800b8b8:	bf00      	nop
        for(xi = -r_out; xi < 0; xi++) {
 800b8ba:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b8c6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f6ff af36 	blt.w	800b73c <lv_draw_arc+0x1ec>
 800b8d0:	e000      	b.n	800b8d4 <lv_draw_arc+0x384>
                break; /*No need to continue the iteration in x once we found the inner edge of the
 800b8d2:	bf00      	nop
                          arc*/
        }

        if(x_start[0] != LV_COORD_MIN) {
 800b8d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b8d8:	4a63      	ldr	r2, [pc, #396]	; (800ba68 <lv_draw_arc+0x518>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d028      	beq.n	800b930 <lv_draw_arc+0x3e0>
            if(x_end[0] == LV_COORD_MIN) x_end[0] = xi - 1;
 800b8de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b8e2:	4a61      	ldr	r2, [pc, #388]	; (800ba68 <lv_draw_arc+0x518>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d104      	bne.n	800b8f2 <lv_draw_arc+0x3a2>
 800b8e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	b21b      	sxth	r3, r3
 800b8f0:	82bb      	strh	r3, [r7, #20]
            hor_line(center_x + x_start[0], center_y + yi, mask, x_end[0] - x_start[0], color, opa);
 800b8f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	89fb      	ldrh	r3, [r7, #14]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	b218      	sxth	r0, r3
 800b900:	89ba      	ldrh	r2, [r7, #12]
 800b902:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b904:	4413      	add	r3, r2
 800b906:	b29b      	uxth	r3, r3
 800b908:	b219      	sxth	r1, r3
 800b90a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b90e:	b29a      	uxth	r2, r3
 800b910:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b914:	b29b      	uxth	r3, r3
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	b29b      	uxth	r3, r3
 800b91a:	b21a      	sxth	r2, r3
 800b91c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	8a3b      	ldrh	r3, [r7, #16]
 800b924:	f8ad 3000 	strh.w	r3, [sp]
 800b928:	4613      	mov	r3, r2
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	f000 f968 	bl	800bc00 <hor_line>
        }

        if(x_start[1] != LV_COORD_MIN) {
 800b930:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b934:	4a4c      	ldr	r2, [pc, #304]	; (800ba68 <lv_draw_arc+0x518>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d028      	beq.n	800b98c <lv_draw_arc+0x43c>
            if(x_end[1] == LV_COORD_MIN) x_end[1] = xi - 1;
 800b93a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b93e:	4a4a      	ldr	r2, [pc, #296]	; (800ba68 <lv_draw_arc+0x518>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d104      	bne.n	800b94e <lv_draw_arc+0x3fe>
 800b944:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b946:	3b01      	subs	r3, #1
 800b948:	b29b      	uxth	r3, r3
 800b94a:	b21b      	sxth	r3, r3
 800b94c:	82fb      	strh	r3, [r7, #22]
            hor_line(center_x + x_start[1], center_y - yi, mask, x_end[1] - x_start[1], color, opa);
 800b94e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b952:	b29a      	uxth	r2, r3
 800b954:	89fb      	ldrh	r3, [r7, #14]
 800b956:	4413      	add	r3, r2
 800b958:	b29b      	uxth	r3, r3
 800b95a:	b218      	sxth	r0, r3
 800b95c:	89ba      	ldrh	r2, [r7, #12]
 800b95e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	b29b      	uxth	r3, r3
 800b964:	b219      	sxth	r1, r3
 800b966:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b970:	b29b      	uxth	r3, r3
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	b29b      	uxth	r3, r3
 800b976:	b21a      	sxth	r2, r3
 800b978:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b97c:	9301      	str	r3, [sp, #4]
 800b97e:	8a3b      	ldrh	r3, [r7, #16]
 800b980:	f8ad 3000 	strh.w	r3, [sp]
 800b984:	4613      	mov	r3, r2
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	f000 f93a 	bl	800bc00 <hor_line>
        }

        if(x_start[2] != LV_COORD_MIN) {
 800b98c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b990:	4a35      	ldr	r2, [pc, #212]	; (800ba68 <lv_draw_arc+0x518>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d029      	beq.n	800b9ea <lv_draw_arc+0x49a>
            if(x_end[2] == LV_COORD_MIN) x_end[2] = xi - 1;
 800b996:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b99a:	4a33      	ldr	r2, [pc, #204]	; (800ba68 <lv_draw_arc+0x518>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d104      	bne.n	800b9aa <lv_draw_arc+0x45a>
 800b9a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	b21b      	sxth	r3, r3
 800b9a8:	833b      	strh	r3, [r7, #24]
            hor_line(center_x - x_end[2], center_y + yi, mask, LV_MATH_ABS(x_end[2] - x_start[2]), color, opa);
 800b9aa:	89fa      	ldrh	r2, [r7, #14]
 800b9ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	b218      	sxth	r0, r3
 800b9b8:	89ba      	ldrh	r2, [r7, #12]
 800b9ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b9bc:	4413      	add	r3, r2
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	b219      	sxth	r1, r3
 800b9c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	bfb8      	it	lt
 800b9d2:	425b      	neglt	r3, r3
 800b9d4:	b21a      	sxth	r2, r3
 800b9d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9da:	9301      	str	r3, [sp, #4]
 800b9dc:	8a3b      	ldrh	r3, [r7, #16]
 800b9de:	f8ad 3000 	strh.w	r3, [sp]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	f000 f90b 	bl	800bc00 <hor_line>
        }

        if(x_start[3] != LV_COORD_MIN) {
 800b9ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b9ee:	4a1e      	ldr	r2, [pc, #120]	; (800ba68 <lv_draw_arc+0x518>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d029      	beq.n	800ba48 <lv_draw_arc+0x4f8>
            if(x_end[3] == LV_COORD_MIN) x_end[3] = xi - 1;
 800b9f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b9f8:	4a1b      	ldr	r2, [pc, #108]	; (800ba68 <lv_draw_arc+0x518>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d104      	bne.n	800ba08 <lv_draw_arc+0x4b8>
 800b9fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba00:	3b01      	subs	r3, #1
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	b21b      	sxth	r3, r3
 800ba06:	837b      	strh	r3, [r7, #26]
            hor_line(center_x - x_end[3], center_y - yi, mask, LV_MATH_ABS(x_end[3] - x_start[3]), color, opa);
 800ba08:	89fa      	ldrh	r2, [r7, #14]
 800ba0a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	b218      	sxth	r0, r3
 800ba16:	89ba      	ldrh	r2, [r7, #12]
 800ba18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	b219      	sxth	r1, r3
 800ba20:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ba24:	461a      	mov	r2, r3
 800ba26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	bfb8      	it	lt
 800ba30:	425b      	neglt	r3, r3
 800ba32:	b21a      	sxth	r2, r3
 800ba34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba38:	9301      	str	r3, [sp, #4]
 800ba3a:	8a3b      	ldrh	r3, [r7, #16]
 800ba3c:	f8ad 3000 	strh.w	r3, [sp]
 800ba40:	4613      	mov	r3, r2
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	f000 f8dc 	bl	800bc00 <hor_line>
    for(yi = -r_out; yi < 0; yi++) {
 800ba48:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	3301      	adds	r3, #1
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ba54:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f6ff ae52 	blt.w	800b702 <lv_draw_arc+0x1b2>
#if LV_ANTIALIAS
        /*TODO*/

#endif
    }
}
 800ba5e:	bf00      	nop
 800ba60:	3748      	adds	r7, #72	; 0x48
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	ffff83e8 	.word	0xffff83e8

0800ba6c <fast_atan2>:

static uint16_t fast_atan2(int x, int y)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b089      	sub	sp, #36	; 0x24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
    // signed int y;            // (and they will be destroyed)
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	77fb      	strb	r3, [r7, #31]
    if(x < 0) {
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	da05      	bge.n	800ba8c <fast_atan2+0x20>
        negflag += 0x01; // x flag bit
 800ba80:	7ffb      	ldrb	r3, [r7, #31]
 800ba82:	3301      	adds	r3, #1
 800ba84:	77fb      	strb	r3, [r7, #31]
        x = (0 - x);     // is now +
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	425b      	negs	r3, r3
 800ba8a:	607b      	str	r3, [r7, #4]
    }
    ux = x; // copy to unsigned var before multiply
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	617b      	str	r3, [r7, #20]
    if(y < 0) {
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	da05      	bge.n	800baa2 <fast_atan2+0x36>
        negflag += 0x02; // y flag bit
 800ba96:	7ffb      	ldrb	r3, [r7, #31]
 800ba98:	3302      	adds	r3, #2
 800ba9a:	77fb      	strb	r3, [r7, #31]
        y = (0 - y);     // is now +
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	425b      	negs	r3, r3
 800baa0:	603b      	str	r3, [r7, #0]
    }
    uy = y; // copy to unsigned var before multiply
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	613b      	str	r3, [r7, #16]

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d90d      	bls.n	800baca <fast_atan2+0x5e>
        degree = (uy * 45) / ux; // degree result will be 0-45 range
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	4613      	mov	r3, r2
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	4413      	add	r3, r2
 800bab6:	011a      	lsls	r2, r3, #4
 800bab8:	1ad2      	subs	r2, r2, r3
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac0:	61bb      	str	r3, [r7, #24]
        negflag += 0x10;         // octant flag bit
 800bac2:	7ffb      	ldrb	r3, [r7, #31]
 800bac4:	3310      	adds	r3, #16
 800bac6:	77fb      	strb	r3, [r7, #31]
 800bac8:	e009      	b.n	800bade <fast_atan2+0x72>
    } else {
        degree = (ux * 45) / uy; // degree result will be 0-45 range
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	4613      	mov	r3, r2
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	4413      	add	r3, r2
 800bad2:	011a      	lsls	r2, r3, #4
 800bad4:	1ad2      	subs	r2, r2, r3
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	fbb2 f3f3 	udiv	r3, r2, r3
 800badc:	61bb      	str	r3, [r7, #24]
    }

    // 2. Compensate for the 4 degree error curve
    comp       = 0;
 800bade:	2300      	movs	r3, #0
 800bae0:	77bb      	strb	r3, [r7, #30]
    tempdegree = degree;  // use an unsigned char for speed!
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	73fb      	strb	r3, [r7, #15]
    if(tempdegree > 22) { // if top half of range
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
 800bae8:	2b16      	cmp	r3, #22
 800baea:	d918      	bls.n	800bb1e <fast_atan2+0xb2>
        if(tempdegree <= 44) comp++;
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	2b2c      	cmp	r3, #44	; 0x2c
 800baf0:	d802      	bhi.n	800baf8 <fast_atan2+0x8c>
 800baf2:	7fbb      	ldrb	r3, [r7, #30]
 800baf4:	3301      	adds	r3, #1
 800baf6:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 41) comp++;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	2b29      	cmp	r3, #41	; 0x29
 800bafc:	d802      	bhi.n	800bb04 <fast_atan2+0x98>
 800bafe:	7fbb      	ldrb	r3, [r7, #30]
 800bb00:	3301      	adds	r3, #1
 800bb02:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 37) comp++;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	2b25      	cmp	r3, #37	; 0x25
 800bb08:	d802      	bhi.n	800bb10 <fast_atan2+0xa4>
 800bb0a:	7fbb      	ldrb	r3, [r7, #30]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 32) comp++; // max is 4 degrees compensated
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	2b20      	cmp	r3, #32
 800bb14:	d81b      	bhi.n	800bb4e <fast_atan2+0xe2>
 800bb16:	7fbb      	ldrb	r3, [r7, #30]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	77bb      	strb	r3, [r7, #30]
 800bb1c:	e017      	b.n	800bb4e <fast_atan2+0xe2>
    } else {                         // else is lower half of range
        if(tempdegree >= 2) comp++;
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d902      	bls.n	800bb2a <fast_atan2+0xbe>
 800bb24:	7fbb      	ldrb	r3, [r7, #30]
 800bb26:	3301      	adds	r3, #1
 800bb28:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 6) comp++;
 800bb2a:	7bfb      	ldrb	r3, [r7, #15]
 800bb2c:	2b05      	cmp	r3, #5
 800bb2e:	d902      	bls.n	800bb36 <fast_atan2+0xca>
 800bb30:	7fbb      	ldrb	r3, [r7, #30]
 800bb32:	3301      	adds	r3, #1
 800bb34:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 10) comp++;
 800bb36:	7bfb      	ldrb	r3, [r7, #15]
 800bb38:	2b09      	cmp	r3, #9
 800bb3a:	d902      	bls.n	800bb42 <fast_atan2+0xd6>
 800bb3c:	7fbb      	ldrb	r3, [r7, #30]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 15) comp++; // max is 4 degrees compensated
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
 800bb44:	2b0e      	cmp	r3, #14
 800bb46:	d902      	bls.n	800bb4e <fast_atan2+0xe2>
 800bb48:	7fbb      	ldrb	r3, [r7, #30]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	77bb      	strb	r3, [r7, #30]
    }
    degree += comp; // degree is now accurate to +/- 1 degree!
 800bb4e:	7fbb      	ldrb	r3, [r7, #30]
 800bb50:	69ba      	ldr	r2, [r7, #24]
 800bb52:	4413      	add	r3, r2
 800bb54:	61bb      	str	r3, [r7, #24]

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 800bb56:	7ffb      	ldrb	r3, [r7, #31]
 800bb58:	f003 0310 	and.w	r3, r3, #16
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d003      	beq.n	800bb68 <fast_atan2+0xfc>
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800bb66:	61bb      	str	r3, [r7, #24]

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) {   // if -Y
 800bb68:	7ffb      	ldrb	r3, [r7, #31]
 800bb6a:	f003 0302 	and.w	r3, r3, #2
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00d      	beq.n	800bb8e <fast_atan2+0x122>
        if(negflag & 0x01) // if -Y -X
 800bb72:	7ffb      	ldrb	r3, [r7, #31]
 800bb74:	f003 0301 	and.w	r3, r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <fast_atan2+0x118>
            degree = (180 + degree);
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	33b4      	adds	r3, #180	; 0xb4
 800bb80:	61bb      	str	r3, [r7, #24]
 800bb82:	e00d      	b.n	800bba0 <fast_atan2+0x134>
        else // else is -Y +X
            degree = (180 - degree);
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800bb8a:	61bb      	str	r3, [r7, #24]
 800bb8c:	e008      	b.n	800bba0 <fast_atan2+0x134>
    } else {               // else is +Y
        if(negflag & 0x01) // if +Y -X
 800bb8e:	7ffb      	ldrb	r3, [r7, #31]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d003      	beq.n	800bba0 <fast_atan2+0x134>
            degree = (360 - degree);
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800bb9e:	61bb      	str	r3, [r7, #24]
    }
    return degree;
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	b29b      	uxth	r3, r3
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3724      	adds	r7, #36	; 0x24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <ver_line>:

/**********************
 *   STATIC FUNCTIONS
 **********************/
static void ver_line(lv_coord_t x, lv_coord_t y, const lv_area_t * mask, lv_coord_t len, lv_color_t color, lv_opa_t opa)
{
 800bbb0:	b590      	push	{r4, r7, lr}
 800bbb2:	b089      	sub	sp, #36	; 0x24
 800bbb4:	af02      	add	r7, sp, #8
 800bbb6:	60ba      	str	r2, [r7, #8]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	4603      	mov	r3, r0
 800bbbc:	81fb      	strh	r3, [r7, #14]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	81bb      	strh	r3, [r7, #12]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	80fb      	strh	r3, [r7, #6]
    lv_area_t area;
    lv_area_set(&area, x, y, x, y + len);
 800bbc6:	89ba      	ldrh	r2, [r7, #12]
 800bbc8:	88fb      	ldrh	r3, [r7, #6]
 800bbca:	4413      	add	r3, r2
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	b21b      	sxth	r3, r3
 800bbd0:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800bbd4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800bbd8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800bbdc:	f107 0010 	add.w	r0, r7, #16
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	4623      	mov	r3, r4
 800bbe4:	f009 fe08 	bl	80157f8 <lv_area_set>

    lv_draw_fill(&area, mask, color, opa);
 800bbe8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bbec:	f107 0010 	add.w	r0, r7, #16
 800bbf0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bbf2:	68b9      	ldr	r1, [r7, #8]
 800bbf4:	f000 f99f 	bl	800bf36 <lv_draw_fill>
}
 800bbf8:	bf00      	nop
 800bbfa:	371c      	adds	r7, #28
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd90      	pop	{r4, r7, pc}

0800bc00 <hor_line>:

static void hor_line(lv_coord_t x, lv_coord_t y, const lv_area_t * mask, lv_coord_t len, lv_color_t color, lv_opa_t opa)
{
 800bc00:	b590      	push	{r4, r7, lr}
 800bc02:	b089      	sub	sp, #36	; 0x24
 800bc04:	af02      	add	r7, sp, #8
 800bc06:	60ba      	str	r2, [r7, #8]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	81fb      	strh	r3, [r7, #14]
 800bc0e:	460b      	mov	r3, r1
 800bc10:	81bb      	strh	r3, [r7, #12]
 800bc12:	4613      	mov	r3, r2
 800bc14:	80fb      	strh	r3, [r7, #6]
    lv_area_t area;
    lv_area_set(&area, x, y, x + len, y);
 800bc16:	89fa      	ldrh	r2, [r7, #14]
 800bc18:	88fb      	ldrh	r3, [r7, #6]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	b21c      	sxth	r4, r3
 800bc20:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800bc24:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800bc28:	f107 0010 	add.w	r0, r7, #16
 800bc2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	4623      	mov	r3, r4
 800bc34:	f009 fde0 	bl	80157f8 <lv_area_set>

    lv_draw_fill(&area, mask, color, opa);
 800bc38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bc3c:	f107 0010 	add.w	r0, r7, #16
 800bc40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bc42:	68b9      	ldr	r1, [r7, #8]
 800bc44:	f000 f977 	bl	800bf36 <lv_draw_fill>
}
 800bc48:	bf00      	nop
 800bc4a:	371c      	adds	r7, #28
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd90      	pop	{r4, r7, pc}

0800bc50 <deg_test_norm>:

static bool deg_test_norm(uint16_t deg, uint16_t start, uint16_t end)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	4603      	mov	r3, r0
 800bc58:	80fb      	strh	r3, [r7, #6]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	80bb      	strh	r3, [r7, #4]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	807b      	strh	r3, [r7, #2]
    if(deg >= start && deg <= end)
 800bc62:	88fa      	ldrh	r2, [r7, #6]
 800bc64:	88bb      	ldrh	r3, [r7, #4]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d305      	bcc.n	800bc76 <deg_test_norm+0x26>
 800bc6a:	88fa      	ldrh	r2, [r7, #6]
 800bc6c:	887b      	ldrh	r3, [r7, #2]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d801      	bhi.n	800bc76 <deg_test_norm+0x26>
        return true;
 800bc72:	2301      	movs	r3, #1
 800bc74:	e000      	b.n	800bc78 <deg_test_norm+0x28>
    else
        return false;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <deg_test_inv>:

static bool deg_test_inv(uint16_t deg, uint16_t start, uint16_t end)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	80fb      	strh	r3, [r7, #6]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	80bb      	strh	r3, [r7, #4]
 800bc92:	4613      	mov	r3, r2
 800bc94:	807b      	strh	r3, [r7, #2]
    if(deg >= start || deg <= end) {
 800bc96:	88fa      	ldrh	r2, [r7, #6]
 800bc98:	88bb      	ldrh	r3, [r7, #4]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d203      	bcs.n	800bca6 <deg_test_inv+0x22>
 800bc9e:	88fa      	ldrh	r2, [r7, #6]
 800bca0:	887b      	ldrh	r3, [r7, #2]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d801      	bhi.n	800bcaa <deg_test_inv+0x26>
        return true;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e000      	b.n	800bcac <deg_test_inv+0x28>
    } else
        return false;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	80b8      	strh	r0, [r7, #4]
 800bcc0:	8039      	strh	r1, [r7, #0]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	70fb      	strb	r3, [r7, #3]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800bcc6:	793b      	ldrb	r3, [r7, #4]
 800bcc8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	fb12 f303 	smulbb	r3, r2, r3
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	783b      	ldrb	r3, [r7, #0]
 800bcdc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	b299      	uxth	r1, r3
 800bce4:	78fb      	ldrb	r3, [r7, #3]
 800bce6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	fb11 f303 	smulbb	r3, r1, r3
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	4413      	add	r3, r2
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	0a1b      	lsrs	r3, r3, #8
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	f003 031f 	and.w	r3, r3, #31
 800bcfe:	b2da      	uxtb	r2, r3
 800bd00:	7a3b      	ldrb	r3, [r7, #8]
 800bd02:	f362 03c7 	bfi	r3, r2, #3, #5
 800bd06:	723b      	strb	r3, [r7, #8]
#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP
    /*If swapped Green is in 2 parts*/
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 800bd08:	793b      	ldrb	r3, [r7, #4]
 800bd0a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	00db      	lsls	r3, r3, #3
 800bd14:	b29a      	uxth	r2, r3
 800bd16:	797b      	ldrb	r3, [r7, #5]
 800bd18:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	4413      	add	r3, r2
 800bd22:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 800bd24:	783b      	ldrb	r3, [r7, #0]
 800bd26:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	787b      	ldrb	r3, [r7, #1]
 800bd34:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	4413      	add	r3, r2
 800bd3e:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	89fa      	ldrh	r2, [r7, #14]
 800bd46:	fb12 f303 	smulbb	r3, r2, r3
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	78fb      	ldrb	r3, [r7, #3]
 800bd4e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	89b9      	ldrh	r1, [r7, #12]
 800bd56:	fb11 f303 	smulbb	r3, r1, r3
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	4413      	add	r3, r2
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	0a1b      	lsrs	r3, r3, #8
 800bd62:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 800bd64:	897b      	ldrh	r3, [r7, #10]
 800bd66:	08db      	lsrs	r3, r3, #3
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	f003 0307 	and.w	r3, r3, #7
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	7a3b      	ldrb	r3, [r7, #8]
 800bd72:	f362 0302 	bfi	r3, r2, #0, #3
 800bd76:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 800bd78:	897b      	ldrh	r3, [r7, #10]
 800bd7a:	f003 0307 	and.w	r3, r3, #7
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	7a7b      	ldrb	r3, [r7, #9]
 800bd82:	f362 1347 	bfi	r3, r2, #5, #3
 800bd86:	727b      	strb	r3, [r7, #9]
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800bd88:	797b      	ldrb	r3, [r7, #5]
 800bd8a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	78fb      	ldrb	r3, [r7, #3]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	fb12 f303 	smulbb	r3, r2, r3
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	787b      	ldrb	r3, [r7, #1]
 800bd9e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	b299      	uxth	r1, r3
 800bda6:	78fb      	ldrb	r3, [r7, #3]
 800bda8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	fb11 f303 	smulbb	r3, r1, r3
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	4413      	add	r3, r2
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	0a1b      	lsrs	r3, r3, #8
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	f003 031f 	and.w	r3, r3, #31
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	7a7b      	ldrb	r3, [r7, #9]
 800bdc4:	f362 0304 	bfi	r3, r2, #0, #5
 800bdc8:	727b      	strb	r3, [r7, #9]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800bdca:	893b      	ldrh	r3, [r7, #8]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3714      	adds	r7, #20
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bde6:	b29a      	uxth	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	b21b      	sxth	r3, r3
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	370c      	adds	r7, #12
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <lv_draw_px>:
 * @param mask_p fill only on this mask (truncated to VDB area)
 * @param color pixel color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_px(lv_coord_t x, lv_coord_t y, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 800be06:	b5b0      	push	{r4, r5, r7, lr}
 800be08:	b08e      	sub	sp, #56	; 0x38
 800be0a:	af04      	add	r7, sp, #16
 800be0c:	60ba      	str	r2, [r7, #8]
 800be0e:	80bb      	strh	r3, [r7, #4]
 800be10:	4603      	mov	r3, r0
 800be12:	81fb      	strh	r3, [r7, #14]
 800be14:	460b      	mov	r3, r1
 800be16:	81bb      	strh	r3, [r7, #12]

    if(opa < LV_OPA_MIN) return;
 800be18:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800be1c:	2b0f      	cmp	r3, #15
 800be1e:	f240 8084 	bls.w	800bf2a <lv_draw_px+0x124>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800be22:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800be26:	2bfb      	cmp	r3, #251	; 0xfb
 800be28:	d902      	bls.n	800be30 <lv_draw_px+0x2a>
 800be2a:	23ff      	movs	r3, #255	; 0xff
 800be2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

    /*Pixel out of the mask*/
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be36:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	db77      	blt.n	800bf2e <lv_draw_px+0x128>
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800be48:	429a      	cmp	r2, r3
 800be4a:	dc70      	bgt.n	800bf2e <lv_draw_px+0x128>
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800be56:	429a      	cmp	r2, r3
 800be58:	db69      	blt.n	800bf2e <lv_draw_px+0x128>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be60:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800be64:	429a      	cmp	r2, r3
 800be66:	dc62      	bgt.n	800bf2e <lv_draw_px+0x128>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800be68:	f7fe fae2 	bl	800a430 <lv_refr_get_disp_refreshing>
 800be6c:	6278      	str	r0, [r7, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800be6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be70:	f009 f9da 	bl	8015228 <lv_disp_get_buf>
 800be74:	6238      	str	r0, [r7, #32]
    uint32_t vdb_width  = lv_area_get_width(&vdb->area);
 800be76:	6a3b      	ldr	r3, [r7, #32]
 800be78:	3310      	adds	r3, #16
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff ffac 	bl	800bdd8 <lv_area_get_width>
 800be80:	4603      	mov	r3, r0
 800be82:	61fb      	str	r3, [r7, #28]

    /*Make the coordinates relative to VDB*/
    x -= vdb->area.x1;
 800be84:	89fa      	ldrh	r2, [r7, #14]
 800be86:	6a3b      	ldr	r3, [r7, #32]
 800be88:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	b29b      	uxth	r3, r3
 800be92:	81fb      	strh	r3, [r7, #14]
    y -= vdb->area.y1;
 800be94:	89ba      	ldrh	r2, [r7, #12]
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	81bb      	strh	r3, [r7, #12]

    if(disp->driver.set_px_cb) {
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	695b      	ldr	r3, [r3, #20]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d014      	beq.n	800bed6 <lv_draw_px+0xd0>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	695c      	ldr	r4, [r3, #20]
 800beb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	6899      	ldr	r1, [r3, #8]
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	b21a      	sxth	r2, r3
 800beba:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 800bebe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800bec2:	9302      	str	r3, [sp, #8]
 800bec4:	88bb      	ldrh	r3, [r7, #4]
 800bec6:	f8ad 3004 	strh.w	r3, [sp, #4]
 800beca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	462b      	mov	r3, r5
 800bed2:	47a0      	blx	r4
 800bed4:	e02c      	b.n	800bf30 <lv_draw_px+0x12a>
    } else {
        bool scr_transp = false;
 800bed6:	2300      	movs	r3, #0
 800bed8:	76fb      	strb	r3, [r7, #27]
#if LV_COLOR_SCREEN_TRANSP
        scr_transp = disp->driver.screen_transp;
#endif

        lv_color_t * vdb_px_p = vdb->buf_act;
 800beda:	6a3b      	ldr	r3, [r7, #32]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	617b      	str	r3, [r7, #20]
        vdb_px_p += y * vdb_width + x;
 800bee0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bee4:	69fa      	ldr	r2, [r7, #28]
 800bee6:	fb02 f203 	mul.w	r2, r2, r3
 800beea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800beee:	4413      	add	r3, r2
 800bef0:	005b      	lsls	r3, r3, #1
 800bef2:	697a      	ldr	r2, [r7, #20]
 800bef4:	4413      	add	r3, r2
 800bef6:	617b      	str	r3, [r7, #20]

        if(scr_transp == false) {
 800bef8:	7efb      	ldrb	r3, [r7, #27]
 800befa:	f083 0301 	eor.w	r3, r3, #1
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d015      	beq.n	800bf30 <lv_draw_px+0x12a>
            if(opa == LV_OPA_COVER) {
 800bf04:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800bf08:	2bff      	cmp	r3, #255	; 0xff
 800bf0a:	d103      	bne.n	800bf14 <lv_draw_px+0x10e>
                *vdb_px_p = color;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	88ba      	ldrh	r2, [r7, #4]
 800bf10:	801a      	strh	r2, [r3, #0]
 800bf12:	e00d      	b.n	800bf30 <lv_draw_px+0x12a>
            } else {
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 800bf14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	8819      	ldrh	r1, [r3, #0]
 800bf1c:	88b8      	ldrh	r0, [r7, #4]
 800bf1e:	f7ff fecb 	bl	800bcb8 <lv_color_mix>
 800bf22:	4602      	mov	r2, r0
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	801a      	strh	r2, [r3, #0]
 800bf28:	e002      	b.n	800bf30 <lv_draw_px+0x12a>
    if(opa < LV_OPA_MIN) return;
 800bf2a:	bf00      	nop
 800bf2c:	e000      	b.n	800bf30 <lv_draw_px+0x12a>
        return;
 800bf2e:	bf00      	nop
#if LV_COLOR_DEPTH == 32
            *vdb_px_p = color_mix_2_alpha(*vdb_px_p, (*vdb_px_p).ch.alpha, color, opa);
#endif
        }
    }
}
 800bf30:	3728      	adds	r7, #40	; 0x28
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bdb0      	pop	{r4, r5, r7, pc}

0800bf36 <lv_draw_fill>:
 * @param mask_p fill only o this mask  (truncated to VDB area)
 * @param color fill color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_fill(const lv_area_t * cords_p, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b090      	sub	sp, #64	; 0x40
 800bf3a:	af02      	add	r7, sp, #8
 800bf3c:	60f8      	str	r0, [r7, #12]
 800bf3e:	60b9      	str	r1, [r7, #8]
 800bf40:	80ba      	strh	r2, [r7, #4]
 800bf42:	71fb      	strb	r3, [r7, #7]
    if(opa < LV_OPA_MIN) return;
 800bf44:	79fb      	ldrb	r3, [r7, #7]
 800bf46:	2b0f      	cmp	r3, #15
 800bf48:	d968      	bls.n	800c01c <lv_draw_fill+0xe6>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800bf4a:	79fb      	ldrb	r3, [r7, #7]
 800bf4c:	2bfb      	cmp	r3, #251	; 0xfb
 800bf4e:	d901      	bls.n	800bf54 <lv_draw_fill+0x1e>
 800bf50:	23ff      	movs	r3, #255	; 0xff
 800bf52:	71fb      	strb	r3, [r7, #7]
    bool union_ok;

    /*Get the union of cord and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 800bf54:	f107 031c 	add.w	r3, r7, #28
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	68f9      	ldr	r1, [r7, #12]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f009 fce3 	bl	8015928 <lv_area_intersect>
 800bf62:	4603      	mov	r3, r0
 800bf64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) {
 800bf68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf6c:	f083 0301 	eor.w	r3, r3, #1
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d154      	bne.n	800c020 <lv_draw_fill+0xea>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800bf76:	f7fe fa5b 	bl	800a430 <lv_refr_get_disp_refreshing>
 800bf7a:	6338      	str	r0, [r7, #48]	; 0x30
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800bf7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf7e:	f009 f953 	bl	8015228 <lv_disp_get_buf>
 800bf82:	62f8      	str	r0, [r7, #44]	; 0x2c

    lv_area_t vdb_rel_a; /*Stores relative coordinates on vdb*/
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 800bf84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	b21b      	sxth	r3, r3
 800bf98:	82bb      	strh	r3, [r7, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 800bf9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	b21b      	sxth	r3, r3
 800bfae:	82fb      	strh	r3, [r7, #22]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 800bfb0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	b21b      	sxth	r3, r3
 800bfc4:	833b      	strh	r3, [r7, #24]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 800bfc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	b21b      	sxth	r3, r3
 800bfda:	837b      	strh	r3, [r7, #26]

    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800bfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t vdb_width       = lv_area_get_width(&vdb->area);
 800bfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe4:	3310      	adds	r3, #16
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7ff fef6 	bl	800bdd8 <lv_area_get_width>
 800bfec:	4603      	mov	r3, r0
 800bfee:	627b      	str	r3, [r7, #36]	; 0x24
    /*Move the vdb_tmp to the first row*/
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 800bff0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bff4:	461a      	mov	r2, r3
 800bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff8:	fb03 f302 	mul.w	r3, r3, r2
 800bffc:	005b      	lsls	r3, r3, #1
 800bffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c000:	4413      	add	r3, r2
 800c002:	62bb      	str	r3, [r7, #40]	; 0x28
        else {
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
        }
    }
#else
    sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 800c004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c006:	6898      	ldr	r0, [r3, #8]
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	b219      	sxth	r1, r3
 800c00c:	f107 0214 	add.w	r2, r7, #20
 800c010:	79fb      	ldrb	r3, [r7, #7]
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	88bb      	ldrh	r3, [r7, #4]
 800c016:	f000 fd4f 	bl	800cab8 <sw_color_fill>
 800c01a:	e002      	b.n	800c022 <lv_draw_fill+0xec>
    if(opa < LV_OPA_MIN) return;
 800c01c:	bf00      	nop
 800c01e:	e000      	b.n	800c022 <lv_draw_fill+0xec>
        return;
 800c020:	bf00      	nop
#endif
}
 800c022:	3738      	adds	r7, #56	; 0x38
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <lv_draw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * mask_p, const lv_font_t * font_p, uint32_t letter,
                    lv_color_t color, lv_opa_t opa)
{
 800c028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c02a:	b0a1      	sub	sp, #132	; 0x84
 800c02c:	af04      	add	r7, sp, #16
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
 800c034:	603b      	str	r3, [r7, #0]
    /*clang-format off*/
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800c036:	2300      	movs	r3, #0
 800c038:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800c03c:	23ff      	movs	r3, #255	; 0xff
 800c03e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800c042:	4bbe      	ldr	r3, [pc, #760]	; (800c33c <lv_draw_letter+0x314>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800c048:	4bbd      	ldr	r3, [pc, #756]	; (800c340 <lv_draw_letter+0x318>)
 800c04a:	f107 041c 	add.w	r4, r7, #28
 800c04e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};
    /*clang-format on*/

    if(opa < LV_OPA_MIN) return;
 800c054:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800c058:	2b0f      	cmp	r3, #15
 800c05a:	f240 827e 	bls.w	800c55a <lv_draw_letter+0x532>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c05e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800c062:	2bfb      	cmp	r3, #251	; 0xfb
 800c064:	d902      	bls.n	800c06c <lv_draw_letter+0x44>
 800c066:	23ff      	movs	r3, #255	; 0xff
 800c068:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

    if(font_p == NULL) {
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 8275 	beq.w	800c55e <lv_draw_letter+0x536>
        LV_LOG_WARN("Font: character's bitmap not found");
        return;
    }

    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800c074:	f107 0114 	add.w	r1, r7, #20
 800c078:	2300      	movs	r3, #0
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f008 fc72 	bl	8014966 <lv_font_get_glyph_dsc>
 800c082:	4603      	mov	r3, r0
 800c084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if(g_ret == false) return;
 800c088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c08c:	f083 0301 	eor.w	r3, r3, #1
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b00      	cmp	r3, #0
 800c094:	f040 8265 	bne.w	800c562 <lv_draw_letter+0x53a>

    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	4413      	add	r3, r2
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	7a1b      	ldrb	r3, [r3, #8]
 800c0ba:	b299      	uxth	r1, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7a5b      	ldrb	r3, [r3, #9]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	1acb      	subs	r3, r1, r3
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	4413      	add	r3, r2
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    const uint8_t * bpp_opa_table;
    uint8_t bitmask_init;
    uint8_t bitmask;

    switch(g.bpp) {
 800c0e0:	7ebb      	ldrb	r3, [r7, #26]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	2b07      	cmp	r3, #7
 800c0e6:	f200 823e 	bhi.w	800c566 <lv_draw_letter+0x53e>
 800c0ea:	a201      	add	r2, pc, #4	; (adr r2, 800c0f0 <lv_draw_letter+0xc8>)
 800c0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f0:	0800c111 	.word	0x0800c111
 800c0f4:	0800c11f 	.word	0x0800c11f
 800c0f8:	0800c567 	.word	0x0800c567
 800c0fc:	0800c12d 	.word	0x0800c12d
 800c100:	0800c567 	.word	0x0800c567
 800c104:	0800c567 	.word	0x0800c567
 800c108:	0800c567 	.word	0x0800c567
 800c10c:	0800c13b 	.word	0x0800c13b
        case 1:
            bpp_opa_table = bpp1_opa_table;
 800c110:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c114:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0x80;
 800c116:	2380      	movs	r3, #128	; 0x80
 800c118:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 800c11c:	e013      	b.n	800c146 <lv_draw_letter+0x11e>
        case 2:
            bpp_opa_table = bpp2_opa_table;
 800c11e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c122:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xC0;
 800c124:	23c0      	movs	r3, #192	; 0xc0
 800c126:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 800c12a:	e00c      	b.n	800c146 <lv_draw_letter+0x11e>
        case 4:
            bpp_opa_table = bpp4_opa_table;
 800c12c:	f107 031c 	add.w	r3, r7, #28
 800c130:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xF0;
 800c132:	23f0      	movs	r3, #240	; 0xf0
 800c134:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 800c138:	e005      	b.n	800c146 <lv_draw_letter+0x11e>
        case 8:
            bpp_opa_table = NULL;
 800c13a:	2300      	movs	r3, #0
 800c13c:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xFF;
 800c13e:	23ff      	movs	r3, #255	; 0xff
 800c140:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;       /*No opa table, pixel value will be used directly*/
 800c144:	bf00      	nop
        default: return; /*Invalid bpp. Can't render the letter*/
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f008 fbfd 	bl	8014948 <lv_font_get_glyph_bitmap>
 800c14e:	6678      	str	r0, [r7, #100]	; 0x64

    if(map_p == NULL) return;
 800c150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 8209 	beq.w	800c56a <lv_draw_letter+0x542>

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800c158:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800c15c:	7dba      	ldrb	r2, [r7, #22]
 800c15e:	4413      	add	r3, r2
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	f9b2 2000 	ldrsh.w	r2, [r2]
 800c166:	4293      	cmp	r3, r2
 800c168:	f2c0 8201 	blt.w	800c56e <lv_draw_letter+0x546>
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c172:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800c176:	429a      	cmp	r2, r3
 800c178:	f300 81f9 	bgt.w	800c56e <lv_draw_letter+0x546>
 800c17c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800c180:	7dfa      	ldrb	r2, [r7, #23]
 800c182:	4413      	add	r3, r2
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800c18a:	4293      	cmp	r3, r2
 800c18c:	f2c0 81ef 	blt.w	800c56e <lv_draw_letter+0x546>
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c196:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800c19a:	429a      	cmp	r2, r3
 800c19c:	f300 81e7 	bgt.w	800c56e <lv_draw_letter+0x546>

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800c1a0:	f7fe f946 	bl	800a430 <lv_refr_get_disp_refreshing>
 800c1a4:	64f8      	str	r0, [r7, #76]	; 0x4c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c1a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c1a8:	f009 f83e 	bl	8015228 <lv_disp_get_buf>
 800c1ac:	64b8      	str	r0, [r7, #72]	; 0x48

    lv_coord_t vdb_width     = lv_area_get_width(&vdb->area);
 800c1ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1b0:	3310      	adds	r3, #16
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7ff fe10 	bl	800bdd8 <lv_area_get_width>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800c1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	663b      	str	r3, [r7, #96]	; 0x60
    lv_coord_t col, row;

    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 800c1c4:	7dbb      	ldrb	r3, [r7, #22]
 800c1c6:	08db      	lsrs	r3, r3, #3
 800c1c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    if(g.box_w & 0x7) width_byte_scr++;
 800c1cc:	7dbb      	ldrb	r3, [r7, #22]
 800c1ce:	f003 0307 	and.w	r3, r3, #7
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d004      	beq.n	800c1e0 <lv_draw_letter+0x1b8>
 800c1d6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800c1da:	3301      	adds	r3, #1
 800c1dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 800c1e0:	7dbb      	ldrb	r3, [r7, #22]
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	7ebb      	ldrb	r3, [r7, #26]
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	fb12 f303 	smulbb	r3, r2, r3
 800c1ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    /* Calculate the col/row start/end on the map*/
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1f6:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	da09      	bge.n	800c212 <lv_draw_letter+0x1ea>
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c204:	b29a      	uxth	r2, r3
 800c206:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	b21b      	sxth	r3, r3
 800c210:	e000      	b.n	800c214 <lv_draw_letter+0x1ec>
 800c212:	2300      	movs	r3, #0
 800c214:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800c218:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800c21c:	7dba      	ldrb	r2, [r7, #22]
 800c21e:	4413      	add	r3, r2
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c226:	4293      	cmp	r3, r2
 800c228:	dc02      	bgt.n	800c230 <lv_draw_letter+0x208>
 800c22a:	7dbb      	ldrb	r3, [r7, #22]
 800c22c:	b21b      	sxth	r3, r3
 800c22e:	e00a      	b.n	800c246 <lv_draw_letter+0x21e>
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c236:	b29a      	uxth	r2, r3
 800c238:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	b29b      	uxth	r3, r3
 800c240:	3301      	adds	r3, #1
 800c242:	b29b      	uxth	r3, r3
 800c244:	b21b      	sxth	r3, r3
 800c246:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c24e:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800c252:	429a      	cmp	r2, r3
 800c254:	da09      	bge.n	800c26a <lv_draw_letter+0x242>
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	b29b      	uxth	r3, r3
 800c266:	b21b      	sxth	r3, r3
 800c268:	e000      	b.n	800c26c <lv_draw_letter+0x244>
 800c26a:	2300      	movs	r3, #0
 800c26c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 800c26e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800c272:	7dfa      	ldrb	r2, [r7, #23]
 800c274:	4413      	add	r3, r2
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c27c:	4293      	cmp	r3, r2
 800c27e:	dc02      	bgt.n	800c286 <lv_draw_letter+0x25e>
 800c280:	7dfb      	ldrb	r3, [r7, #23]
 800c282:	b21b      	sxth	r3, r3
 800c284:	e00a      	b.n	800c29c <lv_draw_letter+0x274>
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	b29b      	uxth	r3, r3
 800c296:	3301      	adds	r3, #1
 800c298:	b29b      	uxth	r3, r3
 800c29a:	b21b      	sxth	r3, r3
 800c29c:	877b      	strh	r3, [r7, #58]	; 0x3a

    /*Set a pointer on VDB to the first pixel of the letter*/
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800c29e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800c2a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2a4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800c2a8:	1a9b      	subs	r3, r3, r2
 800c2aa:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800c2ae:	fb02 f203 	mul.w	r2, r2, r3
 800c2b2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800c2b6:	4413      	add	r3, r2
 800c2b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2ba:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800c2be:	1a9b      	subs	r3, r3, r2
 800c2c0:	005b      	lsls	r3, r3, #1
 800c2c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2c4:	4413      	add	r3, r2
 800c2c6:	663b      	str	r3, [r7, #96]	; 0x60

    /*If the letter is partially out of mask the move there on VDB*/
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800c2c8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800c2cc:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800c2d0:	fb02 f203 	mul.w	r2, r2, r3
 800c2d4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c2d8:	4413      	add	r3, r2
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2de:	4413      	add	r3, r2
 800c2e0:	663b      	str	r3, [r7, #96]	; 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 800c2e2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800c2e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c2ea:	fb02 f203 	mul.w	r2, r2, r3
 800c2ee:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c2f2:	7eb9      	ldrb	r1, [r7, #26]
 800c2f4:	fb01 f303 	mul.w	r3, r1, r3
 800c2f8:	4413      	add	r3, r2
 800c2fa:	637b      	str	r3, [r7, #52]	; 0x34
    map_p += bit_ofs >> 3;
 800c2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fe:	08db      	lsrs	r3, r3, #3
 800c300:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c302:	4413      	add	r3, r2
 800c304:	667b      	str	r3, [r7, #100]	; 0x64

    uint8_t letter_px;
    lv_opa_t px_opa;
    uint16_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800c306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c308:	b29b      	uxth	r3, r3
 800c30a:	f003 0307 	and.w	r3, r3, #7
 800c30e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

    bool scr_transp = false;
 800c312:	2300      	movs	r3, #0
 800c314:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#if LV_COLOR_SCREEN_TRANSP
    scr_transp = disp->driver.screen_transp;
#endif

    for(row = row_start; row < row_end; row++) {
 800c318:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c31a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800c31e:	e114      	b.n	800c54a <lv_draw_letter+0x522>
        bitmask = bitmask_init >> col_bit;
 800c320:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800c324:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c328:	fa42 f303 	asr.w	r3, r2, r3
 800c32c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
        for(col = col_start; col < col_end; col++) {
 800c330:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c334:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800c338:	e0cc      	b.n	800c4d4 <lv_draw_letter+0x4ac>
 800c33a:	bf00      	nop
 800c33c:	0802c864 	.word	0x0802c864
 800c340:	0802c868 	.word	0x0802c868
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 800c344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c346:	781a      	ldrb	r2, [r3, #0]
 800c348:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800c34c:	4013      	ands	r3, r2
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	461a      	mov	r2, r3
 800c352:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c356:	f1c3 0308 	rsb	r3, r3, #8
 800c35a:	7eb9      	ldrb	r1, [r7, #26]
 800c35c:	1a5b      	subs	r3, r3, r1
 800c35e:	fa42 f303 	asr.w	r3, r2, r3
 800c362:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            if(letter_px != 0) {
 800c366:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 8089 	beq.w	800c482 <lv_draw_letter+0x45a>
                if(opa == LV_OPA_COVER) {
 800c370:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800c374:	2bff      	cmp	r3, #255	; 0xff
 800c376:	d10d      	bne.n	800c394 <lv_draw_letter+0x36c>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 800c378:	7ebb      	ldrb	r3, [r7, #26]
 800c37a:	2b08      	cmp	r3, #8
 800c37c:	d005      	beq.n	800c38a <lv_draw_letter+0x362>
 800c37e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c382:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c384:	4413      	add	r3, r2
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	e001      	b.n	800c38e <lv_draw_letter+0x366>
 800c38a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c38e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800c392:	e020      	b.n	800c3d6 <lv_draw_letter+0x3ae>
                } else {
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 800c394:	7ebb      	ldrb	r3, [r7, #26]
 800c396:	2b08      	cmp	r3, #8
 800c398:	d10c      	bne.n	800c3b4 <lv_draw_letter+0x38c>
 800c39a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	fb12 f303 	smulbb	r3, r2, r3
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	0a1b      	lsrs	r3, r3, #8
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	e00e      	b.n	800c3d2 <lv_draw_letter+0x3aa>
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 800c3b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c3b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c3ba:	4413      	add	r3, r2
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	fb12 f303 	smulbb	r3, r2, r3
 800c3ca:	b29b      	uxth	r3, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 800c3cc:	0a1b      	lsrs	r3, r3, #8
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
                }

                if(disp->driver.set_px_cb) {
 800c3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d02c      	beq.n	800c438 <lv_draw_letter+0x410>
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800c3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e0:	695c      	ldr	r4, [r3, #20]
 800c3e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c3e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3e6:	6899      	ldr	r1, [r3, #8]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800c3e8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800c3ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c3f0:	4413      	add	r3, r2
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3f6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	b29b      	uxth	r3, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800c400:	b21e      	sxth	r6, r3
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800c402:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800c406:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c40a:	4413      	add	r3, r2
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c410:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c414:	b29b      	uxth	r3, r3
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	b29b      	uxth	r3, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800c41a:	b21b      	sxth	r3, r3
 800c41c:	f9b7 5046 	ldrsh.w	r5, [r7, #70]	; 0x46
 800c420:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800c424:	9202      	str	r2, [sp, #8]
 800c426:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800c42a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	4633      	mov	r3, r6
 800c432:	462a      	mov	r2, r5
 800c434:	47a0      	blx	r4
 800c436:	e024      	b.n	800c482 <lv_draw_letter+0x45a>
                } else if(vdb_buf_tmp->full != color.full) {
 800c438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c43a:	881a      	ldrh	r2, [r3, #0]
 800c43c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800c440:	429a      	cmp	r2, r3
 800c442:	d01e      	beq.n	800c482 <lv_draw_letter+0x45a>
                    if(px_opa > LV_OPA_MAX)
 800c444:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c448:	2bfb      	cmp	r3, #251	; 0xfb
 800c44a:	d904      	bls.n	800c456 <lv_draw_letter+0x42e>
                        *vdb_buf_tmp = color;
 800c44c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c44e:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800c452:	801a      	strh	r2, [r3, #0]
 800c454:	e015      	b.n	800c482 <lv_draw_letter+0x45a>
                    else if(px_opa > LV_OPA_MIN) {
 800c456:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c45a:	2b10      	cmp	r3, #16
 800c45c:	d911      	bls.n	800c482 <lv_draw_letter+0x45a>
                        if(scr_transp == false) {
 800c45e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c462:	f083 0301 	eor.w	r3, r3, #1
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00a      	beq.n	800c482 <lv_draw_letter+0x45a>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 800c46c:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800c470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c472:	8819      	ldrh	r1, [r3, #0]
 800c474:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 800c478:	f7ff fc1e 	bl	800bcb8 <lv_color_mix>
 800c47c:	4602      	mov	r2, r0
 800c47e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c480:	801a      	strh	r2, [r3, #0]
                        }
                    }
                }
            }

            vdb_buf_tmp++;
 800c482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c484:	3302      	adds	r3, #2
 800c486:	663b      	str	r3, [r7, #96]	; 0x60

            if(col_bit < 8 - g.bpp) {
 800c488:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800c48c:	7ebb      	ldrb	r3, [r7, #26]
 800c48e:	f1c3 0308 	rsb	r3, r3, #8
 800c492:	429a      	cmp	r2, r3
 800c494:	da0d      	bge.n	800c4b2 <lv_draw_letter+0x48a>
                col_bit += g.bpp;
 800c496:	7ebb      	ldrb	r3, [r7, #26]
 800c498:	b29a      	uxth	r2, r3
 800c49a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c49e:	4413      	add	r3, r2
 800c4a0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                bitmask = bitmask >> g.bpp;
 800c4a4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800c4a8:	7eba      	ldrb	r2, [r7, #26]
 800c4aa:	4113      	asrs	r3, r2
 800c4ac:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800c4b0:	e009      	b.n	800c4c6 <lv_draw_letter+0x49e>
            } else {
                col_bit = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                bitmask = bitmask_init;
 800c4b8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800c4bc:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
                map_p++;
 800c4c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	667b      	str	r3, [r7, #100]	; 0x64
        for(col = col_start; col < col_end; col++) {
 800c4c6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800c4d4:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800c4d8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	f6ff af31 	blt.w	800c344 <lv_draw_letter+0x31c>
            }
        }
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 800c4e2:	7dbb      	ldrb	r3, [r7, #22]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800c4ea:	1ad2      	subs	r2, r2, r3
 800c4ec:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c4f0:	4413      	add	r3, r2
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	7ebb      	ldrb	r3, [r7, #26]
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	fb12 f303 	smulbb	r3, r2, r3
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c502:	4413      	add	r3, r2
 800c504:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        map_p += (col_bit >> 3);
 800c508:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c50c:	08db      	lsrs	r3, r3, #3
 800c50e:	b29b      	uxth	r3, r3
 800c510:	461a      	mov	r2, r3
 800c512:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c514:	4413      	add	r3, r2
 800c516:	667b      	str	r3, [r7, #100]	; 0x64
        col_bit = col_bit & 0x7;
 800c518:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c51c:	f003 0307 	and.w	r3, r3, #7
 800c520:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 800c524:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800c528:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 800c52c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c530:	1acb      	subs	r3, r1, r3
 800c532:	1ad3      	subs	r3, r2, r3
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c538:	4413      	add	r3, r2
 800c53a:	663b      	str	r3, [r7, #96]	; 0x60
    for(row = row_start; row < row_end; row++) {
 800c53c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800c540:	b29b      	uxth	r3, r3
 800c542:	3301      	adds	r3, #1
 800c544:	b29b      	uxth	r3, r3
 800c546:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800c54a:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800c54e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800c552:	429a      	cmp	r2, r3
 800c554:	f6ff aee4 	blt.w	800c320 <lv_draw_letter+0x2f8>
 800c558:	e00a      	b.n	800c570 <lv_draw_letter+0x548>
    if(opa < LV_OPA_MIN) return;
 800c55a:	bf00      	nop
 800c55c:	e008      	b.n	800c570 <lv_draw_letter+0x548>
        return;
 800c55e:	bf00      	nop
 800c560:	e006      	b.n	800c570 <lv_draw_letter+0x548>
    if(g_ret == false) return;
 800c562:	bf00      	nop
 800c564:	e004      	b.n	800c570 <lv_draw_letter+0x548>
        default: return; /*Invalid bpp. Can't render the letter*/
 800c566:	bf00      	nop
 800c568:	e002      	b.n	800c570 <lv_draw_letter+0x548>
    if(map_p == NULL) return;
 800c56a:	bf00      	nop
 800c56c:	e000      	b.n	800c570 <lv_draw_letter+0x548>
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800c56e:	bf00      	nop
    }
}
 800c570:	3774      	adds	r7, #116	; 0x74
 800c572:	46bd      	mov	sp, r7
 800c574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c576:	bf00      	nop

0800c578 <lv_draw_map>:
 * @param recolor mix the pixels with this color
 * @param recolor_opa the intense of recoloring
 */
void lv_draw_map(const lv_area_t * cords_p, const lv_area_t * mask_p, const uint8_t * map_p, lv_opa_t opa,
                 bool chroma_key, bool alpha_byte, lv_color_t recolor, lv_opa_t recolor_opa)
{
 800c578:	b5b0      	push	{r4, r5, r7, lr}
 800c57a:	b098      	sub	sp, #96	; 0x60
 800c57c:	af04      	add	r7, sp, #16
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	70fb      	strb	r3, [r7, #3]

    if(opa < LV_OPA_MIN) return;
 800c586:	78fb      	ldrb	r3, [r7, #3]
 800c588:	2b0f      	cmp	r3, #15
 800c58a:	f240 825c 	bls.w	800ca46 <lv_draw_map+0x4ce>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c58e:	78fb      	ldrb	r3, [r7, #3]
 800c590:	2bfb      	cmp	r3, #251	; 0xfb
 800c592:	d901      	bls.n	800c598 <lv_draw_map+0x20>
 800c594:	23ff      	movs	r3, #255	; 0xff
 800c596:	70fb      	strb	r3, [r7, #3]
    bool union_ok;

    /*Get the union of map size and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 800c598:	f107 0320 	add.w	r3, r7, #32
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	68f9      	ldr	r1, [r7, #12]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f009 f9c1 	bl	8015928 <lv_area_intersect>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) return;
 800c5ac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c5b0:	f083 0301 	eor.w	r3, r3, #1
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f040 8247 	bne.w	800ca4a <lv_draw_map+0x4d2>

    /*The pixel size in byte is different if an alpha byte is added too*/
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800c5bc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <lv_draw_map+0x50>
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	e000      	b.n	800c5ca <lv_draw_map+0x52>
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    /*If the map starts OUT of the masked area then calc. the first pixel*/
    lv_coord_t map_width = lv_area_get_width(cords_p);
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f7ff fc02 	bl	800bdd8 <lv_area_get_width>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if(cords_p->y1 < masked_a.y1) {
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c5e0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	da11      	bge.n	800c60c <lv_draw_map+0x94>
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 800c5e8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c5ec:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800c5f8:	1a8a      	subs	r2, r1, r2
 800c5fa:	fb02 f303 	mul.w	r3, r2, r3
 800c5fe:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800c602:	fb02 f303 	mul.w	r3, r2, r3
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	4413      	add	r3, r2
 800c60a:	607b      	str	r3, [r7, #4]
    }
    if(cords_p->x1 < masked_a.x1) {
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c612:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c616:	429a      	cmp	r2, r3
 800c618:	da0e      	bge.n	800c638 <lv_draw_map+0xc0>
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 800c61a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c61e:	461a      	mov	r2, r3
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800c62c:	fb02 f303 	mul.w	r3, r2, r3
 800c630:	461a      	mov	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4413      	add	r3, r2
 800c636:	607b      	str	r3, [r7, #4]
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800c638:	f7fd fefa 	bl	800a430 <lv_refr_get_disp_refreshing>
 800c63c:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c63e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c640:	f008 fdf2 	bl	8015228 <lv_disp_get_buf>
 800c644:	63b8      	str	r0, [r7, #56]	; 0x38

    /*Stores coordinates relative to the current VDB*/
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 800c646:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c652:	b29b      	uxth	r3, r3
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	b29b      	uxth	r3, r3
 800c658:	b21b      	sxth	r3, r3
 800c65a:	843b      	strh	r3, [r7, #32]
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 800c65c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c660:	b29a      	uxth	r2, r3
 800c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c664:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c668:	b29b      	uxth	r3, r3
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	b21b      	sxth	r3, r3
 800c670:	847b      	strh	r3, [r7, #34]	; 0x22
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 800c672:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c676:	b29a      	uxth	r2, r3
 800c678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c67e:	b29b      	uxth	r3, r3
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	b29b      	uxth	r3, r3
 800c684:	b21b      	sxth	r3, r3
 800c686:	84bb      	strh	r3, [r7, #36]	; 0x24
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 800c688:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c690:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c694:	b29b      	uxth	r3, r3
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	b29b      	uxth	r3, r3
 800c69a:	b21b      	sxth	r3, r3
 800c69c:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t vdb_width     = lv_area_get_width(&vdb->area);
 800c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a0:	3310      	adds	r3, #16
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7ff fb98 	bl	800bdd8 <lv_area_get_width>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	86fb      	strh	r3, [r7, #54]	; 0x36
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    vdb_buf_tmp += (uint32_t)vdb_width * masked_a.y1; /*Move to the first row*/
 800c6b2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c6b6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800c6ba:	fb02 f303 	mul.w	r3, r2, r3
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6c2:	4413      	add	r3, r2
 800c6c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 800c6c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6ce:	4413      	add	r3, r2
 800c6d0:	64fb      	str	r3, [r7, #76]	; 0x4c

    lv_coord_t row;
    lv_coord_t map_useful_w = lv_area_get_width(&masked_a);
 800c6d2:	f107 0320 	add.w	r3, r7, #32
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7ff fb7e 	bl	800bdd8 <lv_area_get_width>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	86bb      	strh	r3, [r7, #52]	; 0x34

    bool scr_transp = false;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#if LV_COLOR_SCREEN_TRANSP
    scr_transp = disp->driver.screen_transp;
#endif

    /*The simplest case just copy the pixels into the VDB*/
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 800c6e6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800c6ea:	f083 0301 	eor.w	r3, r3, #1
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 808d 	beq.w	800c810 <lv_draw_map+0x298>
 800c6f6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c6fa:	f083 0301 	eor.w	r3, r3, #1
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 8085 	beq.w	800c810 <lv_draw_map+0x298>
 800c706:	78fb      	ldrb	r3, [r7, #3]
 800c708:	2bff      	cmp	r3, #255	; 0xff
 800c70a:	f040 8081 	bne.w	800c810 <lv_draw_map+0x298>
 800c70e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800c712:	2b00      	cmp	r3, #0
 800c714:	d17c      	bne.n	800c810 <lv_draw_map+0x298>

        /*Use the custom VDB write function is exists*/
        if(disp->driver.set_px_cb) {
 800c716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c718:	695b      	ldr	r3, [r3, #20]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d04f      	beq.n	800c7be <lv_draw_map+0x246>
            lv_coord_t col;
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800c71e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c720:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c724:	e044      	b.n	800c7b0 <lv_draw_map+0x238>
                for(col = 0; col < map_useful_w; col++) {
 800c726:	2300      	movs	r3, #0
 800c728:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c72c:	e029      	b.n	800c782 <lv_draw_map+0x20a>
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 800c72e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800c732:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800c736:	fb02 f303 	mul.w	r3, r2, r3
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	4413      	add	r3, r2
 800c73e:	881b      	ldrh	r3, [r3, #0]
 800c740:	83bb      	strh	r3, [r7, #28]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 800c742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c744:	695c      	ldr	r4, [r3, #20]
 800c746:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	6899      	ldr	r1, [r3, #8]
 800c74c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c750:	b29a      	uxth	r2, r3
 800c752:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c756:	4413      	add	r3, r2
 800c758:	b29b      	uxth	r3, r3
 800c75a:	b21d      	sxth	r5, r3
 800c75c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800c760:	78fb      	ldrb	r3, [r7, #3]
 800c762:	9302      	str	r3, [sp, #8]
 800c764:	8bbb      	ldrh	r3, [r7, #28]
 800c766:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c76a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	462b      	mov	r3, r5
 800c772:	47a0      	blx	r4
                for(col = 0; col < map_useful_w; col++) {
 800c774:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800c778:	b29b      	uxth	r3, r3
 800c77a:	3301      	adds	r3, #1
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c782:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800c786:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c78a:	429a      	cmp	r2, r3
 800c78c:	dbcf      	blt.n	800c72e <lv_draw_map+0x1b6>
                                           px_color, opa);
                }
                map_p += map_width * px_size_byte; /*Next row on the map*/
 800c78e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c792:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800c796:	fb02 f303 	mul.w	r3, r2, r3
 800c79a:	461a      	mov	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4413      	add	r3, r2
 800c7a0:	607b      	str	r3, [r7, #4]
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800c7a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c7b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c7b4:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	ddb4      	ble.n	800c726 <lv_draw_map+0x1ae>
        if(disp->driver.set_px_cb) {
 800c7bc:	e146      	b.n	800ca4c <lv_draw_map+0x4d4>
            }
        }
        /*Normal native VDB*/
        else {
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800c7be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c7c4:	e01d      	b.n	800c802 <lv_draw_map+0x28a>
                    sw_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
                } else {
                    disp->driver.gpu_blend_cb(&disp->driver, vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
                }
#else
                sw_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 800c7c6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800c7ca:	78fb      	ldrb	r3, [r7, #3]
 800c7cc:	6879      	ldr	r1, [r7, #4]
 800c7ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c7d0:	f000 f93f 	bl	800ca52 <sw_mem_blend>
#endif
                map_p += map_width * px_size_byte; /*Next row on the map*/
 800c7d4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c7d8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800c7dc:	fb02 f303 	mul.w	r3, r2, r3
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	607b      	str	r3, [r7, #4]
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 800c7e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7f0:	4413      	add	r3, r2
 800c7f2:	64fb      	str	r3, [r7, #76]	; 0x4c
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800c7f4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c802:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c806:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800c80a:	429a      	cmp	r2, r3
 800c80c:	dddb      	ble.n	800c7c6 <lv_draw_map+0x24e>
        if(disp->driver.set_px_cb) {
 800c80e:	e11d      	b.n	800ca4c <lv_draw_map+0x4d4>

    /*In the other cases every pixel need to be checked one-by-one*/
    else {

        lv_coord_t col;
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 800c810:	2300      	movs	r3, #0
 800c812:	833b      	strh	r3, [r7, #24]
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 800c814:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800c818:	461a      	mov	r2, r3
 800c81a:	8b39      	ldrh	r1, [r7, #24]
 800c81c:	f8b7 0068 	ldrh.w	r0, [r7, #104]	; 0x68
 800c820:	f7ff fa4a 	bl	800bcb8 <lv_color_mix>
 800c824:	4603      	mov	r3, r0
 800c826:	82bb      	strh	r3, [r7, #20]
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800c828:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c82a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c82e:	e102      	b.n	800ca36 <lv_draw_map+0x4be>
            for(col = 0; col < map_useful_w; col++) {
 800c830:	2300      	movs	r3, #0
 800c832:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c836:	e0e0      	b.n	800c9fa <lv_draw_map+0x482>
                lv_opa_t opa_result  = opa;
 800c838:	78fb      	ldrb	r3, [r7, #3]
 800c83a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                uint8_t * px_color_p = (uint8_t *)&map_p[(uint32_t)col * px_size_byte];
 800c83e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800c842:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800c846:	fb02 f303 	mul.w	r3, r2, r3
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	4413      	add	r3, r2
 800c84e:	62fb      	str	r3, [r7, #44]	; 0x2c
                lv_color_t px_color;

                /*Calculate with the pixel level alpha*/
                if(alpha_byte) {
 800c850:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c854:	2b00      	cmp	r3, #0
 800c856:	d022      	beq.n	800c89e <lv_draw_map+0x326>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                    px_color.full = px_color_p[0];
#elif LV_COLOR_DEPTH == 16
                    /*Because of Alpha byte 16 bit color can start on odd address which can cause
                     * crash*/
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c860:	3301      	adds	r3, #1
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	b29b      	uxth	r3, r3
 800c866:	021b      	lsls	r3, r3, #8
 800c868:	b29b      	uxth	r3, r3
 800c86a:	4413      	add	r3, r2
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	823b      	strh	r3, [r7, #16]
#elif LV_COLOR_DEPTH == 32
                    px_color = *((lv_color_t *)px_color_p);
#endif
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	789b      	ldrb	r3, [r3, #2]
 800c874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(px_opa == LV_OPA_TRANSP)
 800c878:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f000 80b2 	beq.w	800c9e6 <lv_draw_map+0x46e>
                        continue;
                    else if(px_opa != LV_OPA_COVER)
 800c882:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c886:	2bff      	cmp	r3, #255	; 0xff
 800c888:	d00c      	beq.n	800c8a4 <lv_draw_map+0x32c>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 800c88a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c88e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800c892:	fb02 f303 	mul.w	r3, r2, r3
 800c896:	0a1b      	lsrs	r3, r3, #8
 800c898:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800c89c:	e002      	b.n	800c8a4 <lv_draw_map+0x32c>
                } else {
                    px_color = *((lv_color_t *)px_color_p);
 800c89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	823b      	strh	r3, [r7, #16]
                }

                /*Handle chroma key*/
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 800c8a4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d005      	beq.n	800c8b8 <lv_draw_map+0x340>
 800c8ac:	8a3a      	ldrh	r2, [r7, #16]
 800c8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8b0:	8b9b      	ldrh	r3, [r3, #28]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	f000 8099 	beq.w	800c9ea <lv_draw_map+0x472>

                /*Re-color the pixel if required*/
                if(recolor_opa != LV_OPA_TRANSP) {
 800c8b8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d04d      	beq.n	800c95c <lv_draw_map+0x3e4>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 800c8c0:	8b3a      	ldrh	r2, [r7, #24]
 800c8c2:	8a3b      	ldrh	r3, [r7, #16]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d00b      	beq.n	800c8e0 <lv_draw_map+0x368>
                                                               new colors (save the last)*/
                        last_img_px  = px_color;
 800c8c8:	8a3b      	ldrh	r3, [r7, #16]
 800c8ca:	833b      	strh	r3, [r7, #24]
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 800c8cc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	8b39      	ldrh	r1, [r7, #24]
 800c8d4:	f8b7 0068 	ldrh.w	r0, [r7, #104]	; 0x68
 800c8d8:	f7ff f9ee 	bl	800bcb8 <lv_color_mix>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	82bb      	strh	r3, [r7, #20]
                    }
                    /*Handle custom VDB write is present*/
                    if(disp->driver.set_px_cb) {
 800c8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d01a      	beq.n	800c91e <lv_draw_map+0x3a6>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 800c8e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ea:	695c      	ldr	r4, [r3, #20]
 800c8ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f0:	6899      	ldr	r1, [r3, #8]
 800c8f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c8fc:	4413      	add	r3, r2
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	b21d      	sxth	r5, r3
 800c902:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800c906:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800c90a:	9302      	str	r3, [sp, #8]
 800c90c:	8abb      	ldrh	r3, [r7, #20]
 800c90e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c912:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	462b      	mov	r3, r5
 800c91a:	47a0      	blx	r4
 800c91c:	e066      	b.n	800c9ec <lv_draw_map+0x474>
                                               row, recolored_px, opa_result);
                    }
                    /*Normal native VDB write*/
                    else {
                        if(opa_result == LV_OPA_COVER)
 800c91e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800c922:	2bff      	cmp	r3, #255	; 0xff
 800c924:	d107      	bne.n	800c936 <lv_draw_map+0x3be>
                            vdb_buf_tmp[col].full = recolored_px.full;
 800c926:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800c92a:	005b      	lsls	r3, r3, #1
 800c92c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c92e:	4413      	add	r3, r2
 800c930:	8aba      	ldrh	r2, [r7, #20]
 800c932:	801a      	strh	r2, [r3, #0]
 800c934:	e05a      	b.n	800c9ec <lv_draw_map+0x474>
                        else
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 800c936:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c93e:	4413      	add	r3, r2
 800c940:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800c944:	0052      	lsls	r2, r2, #1
 800c946:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c948:	188c      	adds	r4, r1, r2
 800c94a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800c94e:	8819      	ldrh	r1, [r3, #0]
 800c950:	8ab8      	ldrh	r0, [r7, #20]
 800c952:	f7ff f9b1 	bl	800bcb8 <lv_color_mix>
 800c956:	4603      	mov	r3, r0
 800c958:	8023      	strh	r3, [r4, #0]
 800c95a:	e047      	b.n	800c9ec <lv_draw_map+0x474>
                    }
                } else {
                    /*Handle custom VDB write is present*/
                    if(disp->driver.set_px_cb) {
 800c95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c95e:	695b      	ldr	r3, [r3, #20]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d01a      	beq.n	800c99a <lv_draw_map+0x422>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 800c964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c966:	695c      	ldr	r4, [r3, #20]
 800c968:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	6899      	ldr	r1, [r3, #8]
 800c96e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c972:	b29a      	uxth	r2, r3
 800c974:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c978:	4413      	add	r3, r2
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	b21d      	sxth	r5, r3
 800c97e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800c982:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800c986:	9302      	str	r3, [sp, #8]
 800c988:	8a3b      	ldrh	r3, [r7, #16]
 800c98a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c98e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	462b      	mov	r3, r5
 800c996:	47a0      	blx	r4
 800c998:	e028      	b.n	800c9ec <lv_draw_map+0x474>
                                               row, px_color, opa_result);
                    }
                    /*Normal native VDB write*/
                    else {

                        if(opa_result == LV_OPA_COVER)
 800c99a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800c99e:	2bff      	cmp	r3, #255	; 0xff
 800c9a0:	d107      	bne.n	800c9b2 <lv_draw_map+0x43a>
                            vdb_buf_tmp[col] = px_color;
 800c9a2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800c9a6:	005b      	lsls	r3, r3, #1
 800c9a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9aa:	4413      	add	r3, r2
 800c9ac:	8a3a      	ldrh	r2, [r7, #16]
 800c9ae:	801a      	strh	r2, [r3, #0]
 800c9b0:	e01c      	b.n	800c9ec <lv_draw_map+0x474>
                        else {
                            if(scr_transp == false) {
 800c9b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c9b6:	f083 0301 	eor.w	r3, r3, #1
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d015      	beq.n	800c9ec <lv_draw_map+0x474>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 800c9c0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800c9c4:	005b      	lsls	r3, r3, #1
 800c9c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9c8:	4413      	add	r3, r2
 800c9ca:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800c9ce:	0052      	lsls	r2, r2, #1
 800c9d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c9d2:	188c      	adds	r4, r1, r2
 800c9d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800c9d8:	8819      	ldrh	r1, [r3, #0]
 800c9da:	8a38      	ldrh	r0, [r7, #16]
 800c9dc:	f7ff f96c 	bl	800bcb8 <lv_color_mix>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	8023      	strh	r3, [r4, #0]
 800c9e4:	e002      	b.n	800c9ec <lv_draw_map+0x474>
                        continue;
 800c9e6:	bf00      	nop
 800c9e8:	e000      	b.n	800c9ec <lv_draw_map+0x474>
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 800c9ea:	bf00      	nop
            for(col = 0; col < map_useful_w; col++) {
 800c9ec:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c9fa:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800c9fe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ca02:	429a      	cmp	r2, r3
 800ca04:	f6ff af18 	blt.w	800c838 <lv_draw_map+0x2c0>
                        }
                    }
                }
            }

            map_p += map_width * px_size_byte; /*Next row on the map*/
 800ca08:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800ca0c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800ca10:	fb02 f303 	mul.w	r3, r2, r3
 800ca14:	461a      	mov	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4413      	add	r3, r2
 800ca1a:	607b      	str	r3, [r7, #4]
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 800ca1c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ca20:	005b      	lsls	r3, r3, #1
 800ca22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca24:	4413      	add	r3, r2
 800ca26:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800ca28:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	3301      	adds	r3, #1
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ca36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ca3a:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	f77f aef6 	ble.w	800c830 <lv_draw_map+0x2b8>
 800ca44:	e002      	b.n	800ca4c <lv_draw_map+0x4d4>
    if(opa < LV_OPA_MIN) return;
 800ca46:	bf00      	nop
 800ca48:	e000      	b.n	800ca4c <lv_draw_map+0x4d4>
    if(union_ok == false) return;
 800ca4a:	bf00      	nop
        }
    }
}
 800ca4c:	3750      	adds	r7, #80	; 0x50
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bdb0      	pop	{r4, r5, r7, pc}

0800ca52 <sw_mem_blend>:
 * @param src pointer to pixel map. Copy it to 'dest'.
 * @param length number of pixels in 'src'
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_mem_blend(lv_color_t * dest, const lv_color_t * src, uint32_t length, lv_opa_t opa)
{
 800ca52:	b590      	push	{r4, r7, lr}
 800ca54:	b087      	sub	sp, #28
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	60f8      	str	r0, [r7, #12]
 800ca5a:	60b9      	str	r1, [r7, #8]
 800ca5c:	607a      	str	r2, [r7, #4]
 800ca5e:	70fb      	strb	r3, [r7, #3]
    if(opa == LV_OPA_COVER) {
 800ca60:	78fb      	ldrb	r3, [r7, #3]
 800ca62:	2bff      	cmp	r3, #255	; 0xff
 800ca64:	d107      	bne.n	800ca76 <sw_mem_blend+0x24>
        memcpy(dest, src, length * sizeof(lv_color_t));
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	68b9      	ldr	r1, [r7, #8]
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f01d f9a0 	bl	8029db4 <memcpy>
        uint32_t col;
        for(col = 0; col < length; col++) {
            dest[col] = lv_color_mix(src[col], dest[col], opa);
        }
    }
}
 800ca74:	e01c      	b.n	800cab0 <sw_mem_blend+0x5e>
        for(col = 0; col < length; col++) {
 800ca76:	2300      	movs	r3, #0
 800ca78:	617b      	str	r3, [r7, #20]
 800ca7a:	e015      	b.n	800caa8 <sw_mem_blend+0x56>
            dest[col] = lv_color_mix(src[col], dest[col], opa);
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	005b      	lsls	r3, r3, #1
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	4413      	add	r3, r2
 800ca84:	697a      	ldr	r2, [r7, #20]
 800ca86:	0052      	lsls	r2, r2, #1
 800ca88:	68f9      	ldr	r1, [r7, #12]
 800ca8a:	4411      	add	r1, r2
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	0052      	lsls	r2, r2, #1
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	1884      	adds	r4, r0, r2
 800ca94:	78fa      	ldrb	r2, [r7, #3]
 800ca96:	8809      	ldrh	r1, [r1, #0]
 800ca98:	8818      	ldrh	r0, [r3, #0]
 800ca9a:	f7ff f90d 	bl	800bcb8 <lv_color_mix>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	8023      	strh	r3, [r4, #0]
        for(col = 0; col < length; col++) {
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	3301      	adds	r3, #1
 800caa6:	617b      	str	r3, [r7, #20]
 800caa8:	697a      	ldr	r2, [r7, #20]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	429a      	cmp	r2, r3
 800caae:	d3e5      	bcc.n	800ca7c <sw_mem_blend+0x2a>
}
 800cab0:	bf00      	nop
 800cab2:	371c      	adds	r7, #28
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd90      	pop	{r4, r7, pc}

0800cab8 <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 800cab8:	b590      	push	{r4, r7, lr}
 800caba:	b08f      	sub	sp, #60	; 0x3c
 800cabc:	af04      	add	r7, sp, #16
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	607a      	str	r2, [r7, #4]
 800cac2:	813b      	strh	r3, [r7, #8]
 800cac4:	460b      	mov	r3, r1
 800cac6:	817b      	strh	r3, [r7, #10]
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 800cac8:	f7fd fcb2 	bl	800a430 <lv_refr_get_disp_refreshing>
 800cacc:	6238      	str	r0, [r7, #32]
    if(disp->driver.set_px_cb) {
 800cace:	6a3b      	ldr	r3, [r7, #32]
 800cad0:	695b      	ldr	r3, [r3, #20]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d035      	beq.n	800cb42 <sw_color_fill+0x8a>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cadc:	e029      	b.n	800cb32 <sw_color_fill+0x7a>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	885b      	ldrh	r3, [r3, #2]
 800cae2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cae4:	e018      	b.n	800cb18 <sw_color_fill+0x60>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	695c      	ldr	r4, [r3, #20]
 800caea:	6a38      	ldr	r0, [r7, #32]
 800caec:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 800caf0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800caf4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800caf8:	9302      	str	r3, [sp, #8]
 800cafa:	893b      	ldrh	r3, [r7, #8]
 800cafc:	f8ad 3004 	strh.w	r3, [sp, #4]
 800cb00:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	460b      	mov	r3, r1
 800cb08:	68f9      	ldr	r1, [r7, #12]
 800cb0a:	47a0      	blx	r4
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800cb0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	3301      	adds	r3, #1
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cb1e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cb22:	429a      	cmp	r2, r3
 800cb24:	dddf      	ble.n	800cae6 <sw_color_fill+0x2e>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800cb26:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb38:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	ddce      	ble.n	800cade <sw_color_fill+0x26>
                }
                mem += mem_width;
            }
        }
    }
}
 800cb40:	e0c4      	b.n	800cccc <sw_color_fill+0x214>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cb4e:	fb03 f302 	mul.w	r3, r3, r2
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4413      	add	r3, r2
 800cb58:	60fb      	str	r3, [r7, #12]
        if(opa == LV_OPA_COVER) {
 800cb5a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cb5e:	2bff      	cmp	r3, #255	; 0xff
 800cb60:	d159      	bne.n	800cc16 <sw_color_fill+0x15e>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cb68:	e00c      	b.n	800cb84 <sw_color_fill+0xcc>
                mem[col] = color;
 800cb6a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	4413      	add	r3, r2
 800cb74:	893a      	ldrh	r2, [r7, #8]
 800cb76:	801a      	strh	r2, [r3, #0]
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800cb78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	3301      	adds	r3, #1
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb8a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	ddeb      	ble.n	800cb6a <sw_color_fill+0xb2>
            lv_color_t * mem_first = &mem[fill_area->x1];
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	61bb      	str	r3, [r7, #24]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cba6:	461a      	mov	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	005b      	lsls	r3, r3, #1
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	82fb      	strh	r3, [r7, #22]
            mem += mem_width;
 800cbba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	3301      	adds	r3, #1
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cbd4:	e017      	b.n	800cc06 <sw_color_fill+0x14e>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbdc:	005b      	lsls	r3, r3, #1
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cbe6:	69b9      	ldr	r1, [r7, #24]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f01d f8e3 	bl	8029db4 <memcpy>
                mem += mem_width;
 800cbee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800cbfa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	3301      	adds	r3, #1
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc0c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cc10:	429a      	cmp	r2, r3
 800cc12:	dde0      	ble.n	800cbd6 <sw_color_fill+0x11e>
}
 800cc14:	e05a      	b.n	800cccc <sw_color_fill+0x214>
            bool scr_transp = false;
 800cc16:	2300      	movs	r3, #0
 800cc18:	77fb      	strb	r3, [r7, #31]
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	82bb      	strh	r3, [r7, #20]
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800cc1e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cc22:	461a      	mov	r2, r3
 800cc24:	8ab9      	ldrh	r1, [r7, #20]
 800cc26:	8938      	ldrh	r0, [r7, #8]
 800cc28:	f7ff f846 	bl	800bcb8 <lv_color_mix>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	823b      	strh	r3, [r7, #16]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	885b      	ldrh	r3, [r3, #2]
 800cc34:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cc36:	e042      	b.n	800ccbe <sw_color_fill+0x206>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	881b      	ldrh	r3, [r3, #0]
 800cc3c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cc3e:	e02b      	b.n	800cc98 <sw_color_fill+0x1e0>
                    if(scr_transp == false) {
 800cc40:	7ffb      	ldrb	r3, [r7, #31]
 800cc42:	f083 0301 	eor.w	r3, r3, #1
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d01f      	beq.n	800cc8c <sw_color_fill+0x1d4>
                        if(mem[col].full != bg_tmp.full) {
 800cc4c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cc50:	005b      	lsls	r3, r3, #1
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	4413      	add	r3, r2
 800cc56:	881a      	ldrh	r2, [r3, #0]
 800cc58:	8abb      	ldrh	r3, [r7, #20]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d00f      	beq.n	800cc7e <sw_color_fill+0x1c6>
                            bg_tmp  = mem[col];
 800cc5e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	4413      	add	r3, r2
 800cc68:	881b      	ldrh	r3, [r3, #0]
 800cc6a:	82bb      	strh	r3, [r7, #20]
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800cc6c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cc70:	461a      	mov	r2, r3
 800cc72:	8ab9      	ldrh	r1, [r7, #20]
 800cc74:	8938      	ldrh	r0, [r7, #8]
 800cc76:	f7ff f81f 	bl	800bcb8 <lv_color_mix>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	823b      	strh	r3, [r7, #16]
                        mem[col] = opa_tmp;
 800cc7e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cc82:	005b      	lsls	r3, r3, #1
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	4413      	add	r3, r2
 800cc88:	8a3a      	ldrh	r2, [r7, #16]
 800cc8a:	801a      	strh	r2, [r3, #0]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800cc8c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	3301      	adds	r3, #1
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cc9e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cca2:	429a      	cmp	r2, r3
 800cca4:	ddcc      	ble.n	800cc40 <sw_color_fill+0x188>
                mem += mem_width;
 800cca6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ccaa:	005b      	lsls	r3, r3, #1
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	4413      	add	r3, r2
 800ccb0:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800ccb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	3301      	adds	r3, #1
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ccc4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	ddb5      	ble.n	800cc38 <sw_color_fill+0x180>
}
 800cccc:	bf00      	nop
 800ccce:	372c      	adds	r7, #44	; 0x2c
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd90      	pop	{r4, r7, pc}

0800ccd4 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 800ccde:	2208      	movs	r2, #8
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f01d f866 	bl	8029db4 <memcpy>
}
 800cce8:	bf00      	nop
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	b21b      	sxth	r3, r3
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	370c      	adds	r7, #12
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr
	...

0800cd20 <lv_draw_img>:
 * @param style style of the image
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_img(const lv_area_t * coords, const lv_area_t * mask, const void * src, const lv_style_t * style,
                 lv_opa_t opa_scale)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b08c      	sub	sp, #48	; 0x30
 800cd24:	af06      	add	r7, sp, #24
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d11a      	bne.n	800cd6a <lv_draw_img+0x4a>
        LV_LOG_WARN("Image draw: src is NULL");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800cd34:	23ff      	movs	r3, #255	; 0xff
 800cd36:	4a23      	ldr	r2, [pc, #140]	; (800cdc4 <lv_draw_img+0xa4>)
 800cd38:	68b9      	ldr	r1, [r7, #8]
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f002 fd21 	bl	800f782 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800cd40:	2300      	movs	r3, #0
 800cd42:	9305      	str	r3, [sp, #20]
 800cd44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd4e:	9303      	str	r3, [sp, #12]
 800cd50:	2300      	movs	r3, #0
 800cd52:	9302      	str	r3, [sp, #8]
 800cd54:	2300      	movs	r3, #0
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	4b1b      	ldr	r3, [pc, #108]	; (800cdc8 <lv_draw_img+0xa8>)
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	23ff      	movs	r3, #255	; 0xff
 800cd5e:	4a19      	ldr	r2, [pc, #100]	; (800cdc4 <lv_draw_img+0xa4>)
 800cd60:	68b9      	ldr	r1, [r7, #8]
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f000 fa74 	bl	800d250 <lv_draw_label>
        return;
 800cd68:	e028      	b.n	800cdbc <lv_draw_img+0x9c>
    }

    lv_res_t res;
    res = lv_img_draw_core(coords, mask, src, style, opa_scale);
 800cd6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	68b9      	ldr	r1, [r7, #8]
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f000 f8f0 	bl	800cf5c <lv_img_draw_core>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	75fb      	strb	r3, [r7, #23]

    if(res == LV_RES_INV) {
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d11a      	bne.n	800cdbc <lv_draw_img+0x9c>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800cd86:	23ff      	movs	r3, #255	; 0xff
 800cd88:	4a0e      	ldr	r2, [pc, #56]	; (800cdc4 <lv_draw_img+0xa4>)
 800cd8a:	68b9      	ldr	r1, [r7, #8]
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f002 fcf8 	bl	800f782 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800cd92:	2300      	movs	r3, #0
 800cd94:	9305      	str	r3, [sp, #20]
 800cd96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd9a:	9304      	str	r3, [sp, #16]
 800cd9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cda0:	9303      	str	r3, [sp, #12]
 800cda2:	2300      	movs	r3, #0
 800cda4:	9302      	str	r3, [sp, #8]
 800cda6:	2300      	movs	r3, #0
 800cda8:	9301      	str	r3, [sp, #4]
 800cdaa:	4b07      	ldr	r3, [pc, #28]	; (800cdc8 <lv_draw_img+0xa8>)
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	23ff      	movs	r3, #255	; 0xff
 800cdb0:	4a04      	ldr	r2, [pc, #16]	; (800cdc4 <lv_draw_img+0xa4>)
 800cdb2:	68b9      	ldr	r1, [r7, #8]
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f000 fa4b 	bl	800d250 <lv_draw_label>
        return;
 800cdba:	bf00      	nop
    }
}
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	2001ba10 	.word	0x2001ba10
 800cdc8:	0802c878 	.word	0x0802c878

0800cdcc <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800cdda:	79fb      	ldrb	r3, [r7, #7]
 800cddc:	2b0e      	cmp	r3, #14
 800cdde:	d836      	bhi.n	800ce4e <lv_img_color_format_get_px_size+0x82>
 800cde0:	a201      	add	r2, pc, #4	; (adr r2, 800cde8 <lv_img_color_format_get_px_size+0x1c>)
 800cde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde6:	bf00      	nop
 800cde8:	0800ce25 	.word	0x0800ce25
 800cdec:	0800ce25 	.word	0x0800ce25
 800cdf0:	0800ce4f 	.word	0x0800ce4f
 800cdf4:	0800ce4f 	.word	0x0800ce4f
 800cdf8:	0800ce2b 	.word	0x0800ce2b
 800cdfc:	0800ce31 	.word	0x0800ce31
 800ce00:	0800ce2b 	.word	0x0800ce2b
 800ce04:	0800ce37 	.word	0x0800ce37
 800ce08:	0800ce3d 	.word	0x0800ce3d
 800ce0c:	0800ce43 	.word	0x0800ce43
 800ce10:	0800ce49 	.word	0x0800ce49
 800ce14:	0800ce37 	.word	0x0800ce37
 800ce18:	0800ce3d 	.word	0x0800ce3d
 800ce1c:	0800ce43 	.word	0x0800ce43
 800ce20:	0800ce49 	.word	0x0800ce49
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW: px_size = 0; break;
 800ce24:	2300      	movs	r3, #0
 800ce26:	73fb      	strb	r3, [r7, #15]
 800ce28:	e014      	b.n	800ce54 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED: px_size = LV_COLOR_SIZE; break;
 800ce2a:	2310      	movs	r3, #16
 800ce2c:	73fb      	strb	r3, [r7, #15]
 800ce2e:	e011      	b.n	800ce54 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA: px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3; break;
 800ce30:	2318      	movs	r3, #24
 800ce32:	73fb      	strb	r3, [r7, #15]
 800ce34:	e00e      	b.n	800ce54 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT: px_size = 1; break;
 800ce36:	2301      	movs	r3, #1
 800ce38:	73fb      	strb	r3, [r7, #15]
 800ce3a:	e00b      	b.n	800ce54 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT: px_size = 2; break;
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	73fb      	strb	r3, [r7, #15]
 800ce40:	e008      	b.n	800ce54 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT: px_size = 4; break;
 800ce42:	2304      	movs	r3, #4
 800ce44:	73fb      	strb	r3, [r7, #15]
 800ce46:	e005      	b.n	800ce54 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
 800ce48:	2308      	movs	r3, #8
 800ce4a:	73fb      	strb	r3, [r7, #15]
 800ce4c:	e002      	b.n	800ce54 <lv_img_color_format_get_px_size+0x88>
        default: px_size = 0; break;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	73fb      	strb	r3, [r7, #15]
 800ce52:	bf00      	nop
    }

    return px_size;
 800ce54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop

0800ce64 <lv_img_color_format_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800ce72:	79fb      	ldrb	r3, [r7, #7]
 800ce74:	2b03      	cmp	r3, #3
 800ce76:	d004      	beq.n	800ce82 <lv_img_color_format_is_chroma_keyed+0x1e>
 800ce78:	2b03      	cmp	r3, #3
 800ce7a:	db05      	blt.n	800ce88 <lv_img_color_format_is_chroma_keyed+0x24>
 800ce7c:	3b06      	subs	r3, #6
 800ce7e:	2b04      	cmp	r3, #4
 800ce80:	d802      	bhi.n	800ce88 <lv_img_color_format_is_chroma_keyed+0x24>
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT: is_chroma_keyed = true; break;
 800ce82:	2301      	movs	r3, #1
 800ce84:	73fb      	strb	r3, [r7, #15]
 800ce86:	e002      	b.n	800ce8e <lv_img_color_format_is_chroma_keyed+0x2a>
        default: is_chroma_keyed = false; break;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	73fb      	strb	r3, [r7, #15]
 800ce8c:	bf00      	nop
    }

    return is_chroma_keyed;
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <lv_img_color_format_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_color_format_has_alpha(lv_img_cf_t cf)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	4603      	mov	r3, r0
 800cea4:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 800cea6:	2300      	movs	r3, #0
 800cea8:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800ceaa:	79fb      	ldrb	r3, [r7, #7]
 800ceac:	3b02      	subs	r3, #2
 800ceae:	2b0c      	cmp	r3, #12
 800ceb0:	d81f      	bhi.n	800cef2 <lv_img_color_format_has_alpha+0x56>
 800ceb2:	a201      	add	r2, pc, #4	; (adr r2, 800ceb8 <lv_img_color_format_has_alpha+0x1c>)
 800ceb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb8:	0800ceed 	.word	0x0800ceed
 800cebc:	0800cef3 	.word	0x0800cef3
 800cec0:	0800cef3 	.word	0x0800cef3
 800cec4:	0800ceed 	.word	0x0800ceed
 800cec8:	0800cef3 	.word	0x0800cef3
 800cecc:	0800cef3 	.word	0x0800cef3
 800ced0:	0800cef3 	.word	0x0800cef3
 800ced4:	0800cef3 	.word	0x0800cef3
 800ced8:	0800cef3 	.word	0x0800cef3
 800cedc:	0800ceed 	.word	0x0800ceed
 800cee0:	0800ceed 	.word	0x0800ceed
 800cee4:	0800ceed 	.word	0x0800ceed
 800cee8:	0800ceed 	.word	0x0800ceed
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
        case LV_IMG_CF_RAW_ALPHA:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT: has_alpha = true; break;
 800ceec:	2301      	movs	r3, #1
 800ceee:	73fb      	strb	r3, [r7, #15]
 800cef0:	e002      	b.n	800cef8 <lv_img_color_format_has_alpha+0x5c>
        default: has_alpha = false; break;
 800cef2:	2300      	movs	r3, #0
 800cef4:	73fb      	strb	r3, [r7, #15]
 800cef6:	bf00      	nop
    }

    return has_alpha;
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop

0800cf08 <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 800cf10:	2303      	movs	r3, #3
 800cf12:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <lv_img_src_get_type+0x16>
 800cf1a:	7bfb      	ldrb	r3, [r7, #15]
 800cf1c:	e018      	b.n	800cf50 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2b1f      	cmp	r3, #31
 800cf28:	d907      	bls.n	800cf3a <lv_img_src_get_type+0x32>
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	b25b      	sxtb	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	db02      	blt.n	800cf3a <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800cf34:	2301      	movs	r3, #1
 800cf36:	73fb      	strb	r3, [r7, #15]
 800cf38:	e009      	b.n	800cf4e <lv_img_src_get_type+0x46>
    } else if(u8_p[0] >= 0x80) {
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	b25b      	sxtb	r3, r3
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	da02      	bge.n	800cf4a <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 800cf44:	2302      	movs	r3, #2
 800cf46:	73fb      	strb	r3, [r7, #15]
 800cf48:	e001      	b.n	800cf4e <lv_img_src_get_type+0x46>
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 800cf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3714      	adds	r7, #20
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <lv_img_draw_core>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_draw_core(const lv_area_t * coords, const lv_area_t * mask, const void * src,
                                 const lv_style_t * style, lv_opa_t opa_scale)
{
 800cf5c:	b590      	push	{r4, r7, lr}
 800cf5e:	b095      	sub	sp, #84	; 0x54
 800cf60:	af06      	add	r7, sp, #24
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]

    lv_area_t mask_com; /*Common area of mask and coords*/
    bool union_ok;
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 800cf6a:	f107 0318 	add.w	r3, r7, #24
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	68b9      	ldr	r1, [r7, #8]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f008 fcd8 	bl	8015928 <lv_area_intersect>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(union_ok == false) {
 800cf7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf82:	f083 0301 	eor.w	r3, r3, #1
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <lv_img_draw_core+0x34>
        return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e0fd      	b.n	800d18c <lv_img_draw_core+0x230>
                             successfully.*/
    }

    lv_opa_t opa =
 800cf90:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cf94:	2bff      	cmp	r3, #255	; 0xff
 800cf96:	d103      	bne.n	800cfa0 <lv_img_draw_core+0x44>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cf9e:	e00c      	b.n	800cfba <lv_img_draw_core+0x5e>
        opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t)style->image.opa * opa_scale) >> 8;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	fb12 f303 	smulbb	r3, r2, r3
 800cfb2:	b29b      	uxth	r3, r3
    lv_opa_t opa =
 800cfb4:	0a1b      	lsrs	r3, r3, #8
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f006 faf1 	bl	80135a8 <lv_img_cache_open>
 800cfc6:	62f8      	str	r0, [r7, #44]	; 0x2c

    if(cdsc == NULL) return LV_RES_INV;
 800cfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <lv_img_draw_core+0x76>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e0dc      	b.n	800d18c <lv_img_draw_core+0x230>

    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	7c1b      	ldrb	r3, [r3, #16]
 800cfd6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff ff41 	bl	800ce64 <lv_img_color_format_is_chroma_keyed>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	7c1b      	ldrb	r3, [r3, #16]
 800cfec:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7ff ff52 	bl	800ce9c <lv_img_color_format_has_alpha>
 800cff8:	4603      	mov	r3, r0
 800cffa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

    if(cdsc->dec_dsc.error_msg != NULL) {
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	69db      	ldr	r3, [r3, #28]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d01b      	beq.n	800d03e <lv_img_draw_core+0xe2>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800d006:	23ff      	movs	r3, #255	; 0xff
 800d008:	4a62      	ldr	r2, [pc, #392]	; (800d194 <lv_img_draw_core+0x238>)
 800d00a:	68b9      	ldr	r1, [r7, #8]
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	f002 fbb8 	bl	800f782 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	69db      	ldr	r3, [r3, #28]
 800d016:	2200      	movs	r2, #0
 800d018:	9205      	str	r2, [sp, #20]
 800d01a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d01e:	9204      	str	r2, [sp, #16]
 800d020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d024:	9203      	str	r2, [sp, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	9202      	str	r2, [sp, #8]
 800d02a:	2200      	movs	r2, #0
 800d02c:	9201      	str	r2, [sp, #4]
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	23ff      	movs	r3, #255	; 0xff
 800d032:	4a58      	ldr	r2, [pc, #352]	; (800d194 <lv_img_draw_core+0x238>)
 800d034:	68b9      	ldr	r1, [r7, #8]
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f000 f90a 	bl	800d250 <lv_draw_label>
 800d03c:	e0a5      	b.n	800d18a <lv_img_draw_core+0x22e>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	695b      	ldr	r3, [r3, #20]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d017      	beq.n	800d076 <lv_img_draw_core+0x11a>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 800d046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d048:	695a      	ldr	r2, [r3, #20]
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d050:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 800d054:	9303      	str	r3, [sp, #12]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d05a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d05e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	460b      	mov	r3, r1
 800d06c:	68b9      	ldr	r1, [r7, #8]
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f7ff fa82 	bl	800c578 <lv_draw_map>
 800d074:	e089      	b.n	800d18a <lv_img_draw_core+0x22e>
                    style->image.intense);
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);
 800d076:	f107 0318 	add.w	r3, r7, #24
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7ff fe38 	bl	800ccf0 <lv_area_get_width>
 800d080:	4603      	mov	r3, r0
 800d082:	853b      	strh	r3, [r7, #40]	; 0x28

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 800d084:	f107 0318 	add.w	r3, r7, #24
 800d088:	4618      	mov	r0, r3
 800d08a:	f7ff fe31 	bl	800ccf0 <lv_area_get_width>
 800d08e:	4603      	mov	r3, r0
 800d090:	461a      	mov	r2, r3
 800d092:	4613      	mov	r3, r2
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	4413      	add	r3, r2
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fe f93b 	bl	800b314 <lv_draw_get_buf>
 800d09e:	6278      	str	r0, [r7, #36]	; 0x24

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 800d0a0:	f107 0218 	add.w	r2, r7, #24
 800d0a4:	f107 0310 	add.w	r3, r7, #16
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff fe12 	bl	800ccd4 <lv_area_copy>
        lv_area_set_height(&line, 1);
 800d0b0:	f107 0310 	add.w	r3, r7, #16
 800d0b4:	2101      	movs	r1, #1
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f008 fbd5 	bl	8015866 <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 800d0bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	1ad3      	subs	r3, r2, r3
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_coord_t y = mask_com.y1 - coords->y1;
 800d0d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d0e4:	8b7b      	ldrh	r3, [r7, #26]
 800d0e6:	86bb      	strh	r3, [r7, #52]	; 0x34
 800d0e8:	e049      	b.n	800d17e <lv_img_draw_core+0x222>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800d0ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0ec:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800d0f0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800d0f4:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	4623      	mov	r3, r4
 800d0fe:	f006 fce5 	bl	8013acc <lv_img_decoder_read_line>
 800d102:	4603      	mov	r3, r0
 800d104:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            if(read_res != LV_RES_OK) {
 800d108:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d005      	beq.n	800d11c <lv_img_draw_core+0x1c0>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	4618      	mov	r0, r3
 800d114:	f006 fd06 	bl	8013b24 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                return LV_RES_INV;
 800d118:	2300      	movs	r3, #0
 800d11a:	e037      	b.n	800d18c <lv_img_draw_core+0x230>
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d122:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800d126:	f107 0010 	add.w	r0, r7, #16
 800d12a:	9303      	str	r3, [sp, #12]
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d130:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d134:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d138:	9301      	str	r3, [sp, #4]
 800d13a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	4613      	mov	r3, r2
 800d142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d144:	68b9      	ldr	r1, [r7, #8]
 800d146:	f7ff fa17 	bl	800c578 <lv_draw_map>
            line.y1++;
 800d14a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d14e:	b29b      	uxth	r3, r3
 800d150:	3301      	adds	r3, #1
 800d152:	b29b      	uxth	r3, r3
 800d154:	b21b      	sxth	r3, r3
 800d156:	827b      	strh	r3, [r7, #18]
            line.y2++;
 800d158:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	3301      	adds	r3, #1
 800d160:	b29b      	uxth	r3, r3
 800d162:	b21b      	sxth	r3, r3
 800d164:	82fb      	strh	r3, [r7, #22]
            y++;
 800d166:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	3301      	adds	r3, #1
 800d16e:	b29b      	uxth	r3, r3
 800d170:	86fb      	strh	r3, [r7, #54]	; 0x36
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d172:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800d176:	b29b      	uxth	r3, r3
 800d178:	3301      	adds	r3, #1
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800d17e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d182:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800d186:	429a      	cmp	r2, r3
 800d188:	ddaf      	ble.n	800d0ea <lv_img_draw_core+0x18e>
        }
    }

    return LV_RES_OK;
 800d18a:	2301      	movs	r3, #1
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	373c      	adds	r7, #60	; 0x3c
 800d190:	46bd      	mov	sp, r7
 800d192:	bd90      	pop	{r4, r7, pc}
 800d194:	2001ba10 	.word	0x2001ba10

0800d198 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	7a1b      	ldrb	r3, [r3, #8]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	71fb      	strb	r3, [r7, #7]
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	71bb      	strb	r3, [r7, #6]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 800d1c2:	79bb      	ldrb	r3, [r7, #6]
 800d1c4:	095b      	lsrs	r3, r3, #5
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	f003 0307 	and.w	r3, r3, #7
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	7b3b      	ldrb	r3, [r7, #12]
 800d1d0:	f362 0302 	bfi	r3, r2, #0, #3
 800d1d4:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 800d1d6:	79fb      	ldrb	r3, [r7, #7]
 800d1d8:	08db      	lsrs	r3, r3, #3
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	f003 031f 	and.w	r3, r3, #31
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	7b3b      	ldrb	r3, [r7, #12]
 800d1e4:	f362 03c7 	bfi	r3, r2, #3, #5
 800d1e8:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 800d1ea:	797b      	ldrb	r3, [r7, #5]
 800d1ec:	08db      	lsrs	r3, r3, #3
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	f003 031f 	and.w	r3, r3, #31
 800d1f4:	b2da      	uxtb	r2, r3
 800d1f6:	7b7b      	ldrb	r3, [r7, #13]
 800d1f8:	f362 0304 	bfi	r3, r2, #0, #5
 800d1fc:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 800d1fe:	79bb      	ldrb	r3, [r7, #6]
 800d200:	089b      	lsrs	r3, r3, #2
 800d202:	b2db      	uxtb	r3, r3
 800d204:	f003 0307 	and.w	r3, r3, #7
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	7b7b      	ldrb	r3, [r7, #13]
 800d20c:	f362 1347 	bfi	r3, r2, #5, #3
 800d210:	737b      	strb	r3, [r7, #13]
    return color;
 800d212:	89bb      	ldrh	r3, [r7, #12]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <lv_area_get_width>:
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d22e:	b29a      	uxth	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d236:	b29b      	uxth	r3, r3
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	3301      	adds	r3, #1
 800d23e:	b29b      	uxth	r3, r3
 800d240:	b21b      	sxth	r3, r3
}
 800d242:	4618      	mov	r0, r3
 800d244:	370c      	adds	r7, #12
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
	...

0800d250 <lv_draw_label>:
 * @param sel_end end index of selected area (`LV_LABEL_TXT_SEL_OFF` if none)
 */
void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale,
                   const char * txt, lv_txt_flag_t flag, lv_point_t * offset, uint16_t sel_start, uint16_t sel_end,
                   lv_draw_label_hint_t * hint)
{
 800d250:	b590      	push	{r4, r7, lr}
 800d252:	b0b1      	sub	sp, #196	; 0xc4
 800d254:	af04      	add	r7, sp, #16
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	607a      	str	r2, [r7, #4]
 800d25c:	70fb      	strb	r3, [r7, #3]
    const lv_font_t * font = style->text.font;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d262:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    lv_coord_t w;
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800d266:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d26a:	f003 0302 	and.w	r3, r3, #2
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d106      	bne.n	800d280 <lv_draw_label+0x30>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f7ff ffd4 	bl	800d220 <lv_area_get_width>
 800d278:	4603      	mov	r3, r0
 800d27a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800d27e:	e019      	b.n	800d2b4 <lv_draw_label+0x64>
    } else {
        /*If EXAPND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800d290:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d294:	f897 20c4 	ldrb.w	r2, [r7, #196]	; 0xc4
 800d298:	9202      	str	r2, [sp, #8]
 800d29a:	f647 4218 	movw	r2, #31768	; 0x7c18
 800d29e:	9201      	str	r2, [sp, #4]
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	4623      	mov	r3, r4
 800d2a4:	460a      	mov	r2, r1
 800d2a6:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800d2aa:	f009 fca3 	bl	8016bf4 <lv_txt_get_size>
                        flag);
        w = p.x;
 800d2ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2b0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    }

    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800d2b4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d2b8:	f7ff ff6e 	bl	800d198 <lv_font_get_line_height>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	4413      	add	r3, r2
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

    /*Init variables for the first line*/
    lv_coord_t line_width = 0;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    lv_point_t pos;
    pos.x = coords->x1;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    pos.y = coords->y1;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d2e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    lv_coord_t x_ofs = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    lv_coord_t y_ofs = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    if(offset != NULL) {
 800d2f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d013      	beq.n	800d326 <lv_draw_label+0xd6>
        x_ofs = offset->x;
 800d2fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d302:	881b      	ldrh	r3, [r3, #0]
 800d304:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        y_ofs = offset->y;
 800d308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d30c:	885b      	ldrh	r3, [r3, #2]
 800d30e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        pos.y += y_ofs;
 800d312:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800d316:	b29a      	uxth	r2, r3
 800d318:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d31c:	4413      	add	r3, r2
 800d31e:	b29b      	uxth	r3, r3
 800d320:	b21b      	sxth	r3, r3
 800d322:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    }

    uint32_t line_start     = 0;
 800d326:	2300      	movs	r3, #0
 800d328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    int32_t last_line_start = -1;
 800d32c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d330:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0) {
 800d334:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d01f      	beq.n	800d37c <lv_draw_label+0x12c>
 800d33c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 800d340:	2b00      	cmp	r3, #0
 800d342:	d11b      	bne.n	800d37c <lv_draw_label+0x12c>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800d344:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800d350:	1a9b      	subs	r3, r3, r2
 800d352:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800d356:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800d35a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800d35e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d362:	005b      	lsls	r3, r3, #1
 800d364:	429a      	cmp	r2, r3
 800d366:	dd04      	ble.n	800d372 <lv_draw_label+0x122>
            hint->line_start = -1;
 800d368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d36c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d370:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 800d372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 800d37c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d380:	2b00      	cmp	r3, #0
 800d382:	d013      	beq.n	800d3ac <lv_draw_label+0x15c>
 800d384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	db0f      	blt.n	800d3ac <lv_draw_label+0x15c>
        line_start = last_line_start;
 800d38c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        pos.y += hint->y;
 800d394:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800d398:	b29a      	uxth	r2, r3
 800d39a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	4413      	add	r3, r2
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	b21b      	sxth	r3, r3
 800d3a8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    }

    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800d3ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d3b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3b4:	18d0      	adds	r0, r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800d3bc:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800d3c0:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d3cc:	f009 fcc4 	bl	8016d58 <lv_txt_get_next_line>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3d8:	4413      	add	r3, r2
 800d3da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*Go the first visible line*/
    while(pos.y + line_height < mask->y1) {
 800d3de:	e053      	b.n	800d488 <lv_draw_label+0x238>
        /*Go to next line*/
        line_start = line_end;
 800d3e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d3e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800d3e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d3ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3f0:	18d0      	adds	r0, r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800d3f8:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800d3fc:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	460b      	mov	r3, r1
 800d404:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d408:	f009 fca6 	bl	8016d58 <lv_txt_get_next_line>
 800d40c:	4603      	mov	r3, r0
 800d40e:	461a      	mov	r2, r3
 800d410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d414:	4413      	add	r3, r2
 800d416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        pos.y += line_height;
 800d41a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800d41e:	b29a      	uxth	r2, r3
 800d420:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d424:	4413      	add	r3, r2
 800d426:	b29b      	uxth	r3, r3
 800d428:	b21b      	sxth	r3, r3
 800d42a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800d42e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d432:	2b00      	cmp	r3, #0
 800d434:	d01f      	beq.n	800d476 <lv_draw_label+0x226>
 800d436:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800d43a:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800d43e:	db1a      	blt.n	800d476 <lv_draw_label+0x226>
 800d440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	da15      	bge.n	800d476 <lv_draw_label+0x226>
            hint->line_start = line_start;
 800d44a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d44e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d452:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 800d454:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800d458:	461a      	mov	r2, r3
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d460:	1ad2      	subs	r2, r2, r3
 800d462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d466:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d46e:	461a      	mov	r2, r3
 800d470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d474:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 800d476:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d47a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d47e:	4413      	add	r3, r2
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	f000 827d 	beq.w	800d982 <lv_draw_label+0x732>
    while(pos.y + line_height < mask->y1) {
 800d488:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800d48c:	461a      	mov	r2, r3
 800d48e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800d492:	4413      	add	r3, r2
 800d494:	68ba      	ldr	r2, [r7, #8]
 800d496:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800d49a:	4293      	cmp	r3, r2
 800d49c:	dba0      	blt.n	800d3e0 <lv_draw_label+0x190>
    }

    /*Align to middle*/
    if(flag & LV_TXT_FLAG_CENTER) {
 800d49e:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d4a2:	f003 0304 	and.w	r3, r3, #4
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d030      	beq.n	800d50c <lv_draw_label+0x2bc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800d4aa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d4ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d4b2:	18d0      	adds	r0, r2, r3
 800d4b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	b299      	uxth	r1, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800d4ca:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d4d6:	f009 fcf1 	bl	8016ebc <lv_txt_get_width>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f7ff fe9d 	bl	800d220 <lv_area_get_width>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	0fda      	lsrs	r2, r3, #31
 800d4f2:	4413      	add	r3, r2
 800d4f4:	105b      	asrs	r3, r3, #1
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	b28b      	uxth	r3, r1
 800d500:	4413      	add	r3, r2
 800d502:	b29b      	uxth	r3, r3
 800d504:	b21b      	sxth	r3, r3
 800d506:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800d50a:	e031      	b.n	800d570 <lv_draw_label+0x320>

    }
    /*Align to the right*/
    else if(flag & LV_TXT_FLAG_RIGHT) {
 800d50c:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d510:	f003 0308 	and.w	r3, r3, #8
 800d514:	2b00      	cmp	r3, #0
 800d516:	d02b      	beq.n	800d570 <lv_draw_label+0x320>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800d518:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d51c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d520:	18d0      	adds	r0, r2, r3
 800d522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d526:	b29a      	uxth	r2, r3
 800d528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	1ad3      	subs	r3, r2, r3
 800d530:	b299      	uxth	r1, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800d538:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d53c:	9300      	str	r3, [sp, #0]
 800d53e:	4613      	mov	r3, r2
 800d540:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d544:	f009 fcba 	bl	8016ebc <lv_txt_get_width>
 800d548:	4603      	mov	r3, r0
 800d54a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        pos.x += lv_area_get_width(coords) - line_width;
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f7ff fe66 	bl	800d220 <lv_area_get_width>
 800d554:	4603      	mov	r3, r0
 800d556:	461a      	mov	r2, r3
 800d558:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800d562:	b292      	uxth	r2, r2
 800d564:	b29b      	uxth	r3, r3
 800d566:	4413      	add	r3, r2
 800d568:	b29b      	uxth	r3, r3
 800d56a:	b21b      	sxth	r3, r3
 800d56c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    }

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	2bff      	cmp	r3, #255	; 0xff
 800d574:	d103      	bne.n	800d57e <lv_draw_label+0x32e>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d57c:	e00b      	b.n	800d596 <lv_draw_label+0x346>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d584:	b29a      	uxth	r2, r3
 800d586:	78fb      	ldrb	r3, [r7, #3]
 800d588:	b29b      	uxth	r3, r3
 800d58a:	fb12 f303 	smulbb	r3, r2, r3
 800d58e:	b29b      	uxth	r3, r3
 800d590:	0a1b      	lsrs	r3, r3, #8
 800d592:	b29b      	uxth	r3, r3
 800d594:	b2db      	uxtb	r3, r3
 800d596:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 800d59a:	2300      	movs	r3, #0
 800d59c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    uint32_t i;
    uint16_t par_start = 0;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
    lv_color_t recolor;
    lv_coord_t letter_w;
    lv_style_t sel_style;
    lv_style_copy(&sel_style, &lv_style_plain_color);
 800d5a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5aa:	499c      	ldr	r1, [pc, #624]	; (800d81c <lv_draw_label+0x5cc>)
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7fd fea3 	bl	800b2f8 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d5b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d5b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d5ba:	857b      	strh	r3, [r7, #42]	; 0x2a

    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 800d5bc:	e1d7      	b.n	800d96e <lv_draw_label+0x71e>
        if(offset != NULL) {
 800d5be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d009      	beq.n	800d5da <lv_draw_label+0x38a>
            pos.x += x_ofs;
 800d5c6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800d5d0:	4413      	add	r3, r2
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	b21b      	sxth	r3, r3
 800d5d6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }
        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        i         = line_start;
 800d5e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d5e4:	66bb      	str	r3, [r7, #104]	; 0x68
        uint32_t letter;
        uint32_t letter_next;
        while(i < line_end) {
 800d5e6:	e120      	b.n	800d82a <lv_draw_label+0x5da>
            letter      = lv_txt_encoded_next(txt, &i);
 800d5e8:	4b8d      	ldr	r3, [pc, #564]	; (800d820 <lv_draw_label+0x5d0>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d5f0:	4611      	mov	r1, r2
 800d5f2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800d5f6:	4798      	blx	r3
 800d5f8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800d5fc:	4b88      	ldr	r3, [pc, #544]	; (800d820 <lv_draw_label+0x5d0>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d602:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800d606:	440a      	add	r2, r1
 800d608:	2100      	movs	r1, #0
 800d60a:	4610      	mov	r0, r2
 800d60c:	4798      	blx	r3
 800d60e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

            /*Handle the re-color command*/
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d612:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d616:	f003 0301 	and.w	r3, r3, #1
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d07a      	beq.n	800d714 <lv_draw_label+0x4c4>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800d61e:	2323      	movs	r3, #35	; 0x23
 800d620:	461a      	mov	r2, r3
 800d622:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d626:	4293      	cmp	r3, r2
 800d628:	d11a      	bne.n	800d660 <lv_draw_label+0x410>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800d62a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d106      	bne.n	800d640 <lv_draw_label+0x3f0>
                        par_start = i;
 800d632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d634:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                        cmd_state = CMD_STATE_PAR;
 800d638:	2301      	movs	r3, #1
 800d63a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                        continue;
 800d63e:	e0f4      	b.n	800d82a <lv_draw_label+0x5da>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 800d640:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800d644:	2b01      	cmp	r3, #1
 800d646:	d103      	bne.n	800d650 <lv_draw_label+0x400>
                        cmd_state = CMD_STATE_WAIT;
 800d648:	2300      	movs	r3, #0
 800d64a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800d64e:	e007      	b.n	800d660 <lv_draw_label+0x410>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 800d650:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800d654:	2b02      	cmp	r3, #2
 800d656:	d103      	bne.n	800d660 <lv_draw_label+0x410>
                        cmd_state = CMD_STATE_WAIT;
 800d658:	2300      	movs	r3, #0
 800d65a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                        continue;
 800d65e:	e0e4      	b.n	800d82a <lv_draw_label+0x5da>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 800d660:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800d664:	2b01      	cmp	r3, #1
 800d666:	d155      	bne.n	800d714 <lv_draw_label+0x4c4>
                    if(letter == ' ') {
 800d668:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d66c:	2b20      	cmp	r3, #32
 800d66e:	f040 80db 	bne.w	800d828 <lv_draw_label+0x5d8>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800d672:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d674:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	2b07      	cmp	r3, #7
 800d67c:	d142      	bne.n	800d704 <lv_draw_label+0x4b4>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800d67e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800d682:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d686:	18d1      	adds	r1, r2, r3
 800d688:	f107 0318 	add.w	r3, r7, #24
 800d68c:	2206      	movs	r2, #6
 800d68e:	4618      	mov	r0, r3
 800d690:	f01c fb90 	bl	8029db4 <memcpy>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 800d694:	2300      	movs	r3, #0
 800d696:	77bb      	strb	r3, [r7, #30]
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800d698:	7e3b      	ldrb	r3, [r7, #24]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 f978 	bl	800d990 <hex_char_to_num>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	011c      	lsls	r4, r3, #4
 800d6a4:	7e7b      	ldrb	r3, [r7, #25]
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 f972 	bl	800d990 <hex_char_to_num>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	4423      	add	r3, r4
 800d6b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800d6b4:	7ebb      	ldrb	r3, [r7, #26]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f000 f96a 	bl	800d990 <hex_char_to_num>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	011c      	lsls	r4, r3, #4
 800d6c0:	7efb      	ldrb	r3, [r7, #27]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 f964 	bl	800d990 <hex_char_to_num>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	4423      	add	r3, r4
 800d6cc:	67fb      	str	r3, [r7, #124]	; 0x7c
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800d6ce:	7f3b      	ldrb	r3, [r7, #28]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f000 f95d 	bl	800d990 <hex_char_to_num>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	011c      	lsls	r4, r3, #4
 800d6da:	7f7b      	ldrb	r3, [r7, #29]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f000 f957 	bl	800d990 <hex_char_to_num>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	4423      	add	r3, r4
 800d6e6:	67bb      	str	r3, [r7, #120]	; 0x78
                            recolor = lv_color_make(r, g, b);
 800d6e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d6f0:	b2d1      	uxtb	r1, r2
 800d6f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d6f4:	b2d2      	uxtb	r2, r2
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7ff fd5a 	bl	800d1b0 <lv_color_make>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d702:	e003      	b.n	800d70c <lv_draw_label+0x4bc>
                        } else {
                            recolor.full = style->text.color.full;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	8c1b      	ldrh	r3, [r3, #32]
 800d708:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800d70c:	2302      	movs	r3, #2
 800d70e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    }
                    continue;
 800d712:	e089      	b.n	800d828 <lv_draw_label+0x5d8>
                }
            }

            lv_color_t color = style->text.color;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	8c1b      	ldrh	r3, [r3, #32]
 800d718:	843b      	strh	r3, [r7, #32]

            if(cmd_state == CMD_STATE_IN) color = recolor;
 800d71a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800d71e:	2b02      	cmp	r3, #2
 800d720:	d102      	bne.n	800d728 <lv_draw_label+0x4d8>
 800d722:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d726:	843b      	strh	r3, [r7, #32]

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800d728:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d72c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d730:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d734:	f007 f92a 	bl	801498c <lv_font_get_glyph_width>
 800d738:	4603      	mov	r3, r0
 800d73a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800d73e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800d742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d746:	4293      	cmp	r3, r2
 800d748:	d043      	beq.n	800d7d2 <lv_draw_label+0x582>
 800d74a:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800d74e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d752:	4293      	cmp	r3, r2
 800d754:	d03d      	beq.n	800d7d2 <lv_draw_label+0x582>
                int char_ind = lv_encoded_get_char_id(txt, i);
 800d756:	4b33      	ldr	r3, [pc, #204]	; (800d824 <lv_draw_label+0x5d4>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d75c:	4611      	mov	r1, r2
 800d75e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800d762:	4798      	blx	r3
 800d764:	4603      	mov	r3, r0
 800d766:	673b      	str	r3, [r7, #112]	; 0x70
                /*Do not draw the rectangle on the character at `sel_start`.*/
                if(char_ind > sel_start && char_ind <= sel_end) {
 800d768:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800d76c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d76e:	429a      	cmp	r2, r3
 800d770:	dd2f      	ble.n	800d7d2 <lv_draw_label+0x582>
 800d772:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800d776:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d778:	429a      	cmp	r2, r3
 800d77a:	dc2a      	bgt.n	800d7d2 <lv_draw_label+0x582>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 800d77c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800d780:	823b      	strh	r3, [r7, #16]
                    sel_coords.y1 = pos.y;
 800d782:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800d786:	827b      	strh	r3, [r7, #18]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800d788:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d792:	4413      	add	r3, r2
 800d794:	b29a      	uxth	r2, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	4413      	add	r3, r2
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	b21b      	sxth	r3, r3
 800d7a8:	82bb      	strh	r3, [r7, #20]
                    sel_coords.y2 = pos.y + line_height - 1;
 800d7aa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d7b4:	4413      	add	r3, r2
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	b21b      	sxth	r3, r3
 800d7be:	82fb      	strh	r3, [r7, #22]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 800d7c0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d7c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d7c8:	f107 0010 	add.w	r0, r7, #16
 800d7cc:	68b9      	ldr	r1, [r7, #8]
 800d7ce:	f001 ffd8 	bl	800f782 <lv_draw_rect>
                }
            }
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 800d7d2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800d7d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d7da:	9301      	str	r3, [sp, #4]
 800d7dc:	8c3b      	ldrh	r3, [r7, #32]
 800d7de:	f8ad 3000 	strh.w	r3, [sp]
 800d7e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d7e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d7ea:	68b9      	ldr	r1, [r7, #8]
 800d7ec:	f7fe fc1c 	bl	800c028 <lv_draw_letter>

            if(letter_w > 0) {
 800d7f0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	dd18      	ble.n	800d82a <lv_draw_label+0x5da>
                pos.x += letter_w + style->text.letter_space;
 800d7f8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800d804:	b299      	uxth	r1, r3
 800d806:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d80a:	440b      	add	r3, r1
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	4413      	add	r3, r2
 800d810:	b29b      	uxth	r3, r3
 800d812:	b21b      	sxth	r3, r3
 800d814:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800d818:	e007      	b.n	800d82a <lv_draw_label+0x5da>
 800d81a:	bf00      	nop
 800d81c:	2001bb00 	.word	0x2001bb00
 800d820:	200027a0 	.word	0x200027a0
 800d824:	200027ac 	.word	0x200027ac
                    continue;
 800d828:	bf00      	nop
        while(i < line_end) {
 800d82a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d82c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d830:	429a      	cmp	r2, r3
 800d832:	f63f aed9 	bhi.w	800d5e8 <lv_draw_label+0x398>
            }
        }
        /*Go to next line*/
        line_start = line_end;
 800d836:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d83a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800d83e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d842:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d846:	18d0      	adds	r0, r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800d84e:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800d852:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	460b      	mov	r3, r1
 800d85a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d85e:	f009 fa7b 	bl	8016d58 <lv_txt_get_next_line>
 800d862:	4603      	mov	r3, r0
 800d864:	461a      	mov	r2, r3
 800d866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d86a:	4413      	add	r3, r2
 800d86c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        pos.x = coords->x1;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d876:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        /*Align to middle*/
        if(flag & LV_TXT_FLAG_CENTER) {
 800d87a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d87e:	f003 0304 	and.w	r3, r3, #4
 800d882:	2b00      	cmp	r3, #0
 800d884:	d030      	beq.n	800d8e8 <lv_draw_label+0x698>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800d886:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d88a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d88e:	18d0      	adds	r0, r2, r3
 800d890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d894:	b29a      	uxth	r2, r3
 800d896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	1ad3      	subs	r3, r2, r3
 800d89e:	b299      	uxth	r1, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
            line_width =
 800d8a6:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d8aa:	9300      	str	r3, [sp, #0]
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d8b2:	f009 fb03 	bl	8016ebc <lv_txt_get_width>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7ff fcaf 	bl	800d220 <lv_area_get_width>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	0fda      	lsrs	r2, r3, #31
 800d8ce:	4413      	add	r3, r2
 800d8d0:	105b      	asrs	r3, r3, #1
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	b28b      	uxth	r3, r1
 800d8dc:	4413      	add	r3, r2
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	b21b      	sxth	r3, r3
 800d8e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800d8e6:	e031      	b.n	800d94c <lv_draw_label+0x6fc>

        }
        /*Align to the right*/
        else if(flag & LV_TXT_FLAG_RIGHT) {
 800d8e8:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d8ec:	f003 0308 	and.w	r3, r3, #8
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d02b      	beq.n	800d94c <lv_draw_label+0x6fc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800d8f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d8f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d8fc:	18d0      	adds	r0, r2, r3
 800d8fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d902:	b29a      	uxth	r2, r3
 800d904:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d908:	b29b      	uxth	r3, r3
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	b299      	uxth	r1, r3
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
            line_width =
 800d914:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	4613      	mov	r3, r2
 800d91c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d920:	f009 facc 	bl	8016ebc <lv_txt_get_width>
 800d924:	4603      	mov	r3, r0
 800d926:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
            pos.x += lv_area_get_width(coords) - line_width;
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f7ff fc78 	bl	800d220 <lv_area_get_width>
 800d930:	4603      	mov	r3, r0
 800d932:	461a      	mov	r2, r3
 800d934:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800d93e:	b292      	uxth	r2, r2
 800d940:	b29b      	uxth	r3, r3
 800d942:	4413      	add	r3, r2
 800d944:	b29b      	uxth	r3, r3
 800d946:	b21b      	sxth	r3, r3
 800d948:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }

        /*Go the next line position*/
        pos.y += line_height;
 800d94c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800d950:	b29a      	uxth	r2, r3
 800d952:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d956:	4413      	add	r3, r2
 800d958:	b29b      	uxth	r3, r3
 800d95a:	b21b      	sxth	r3, r3
 800d95c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        if(pos.y > mask->y2) return;
 800d960:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	dc0b      	bgt.n	800d986 <lv_draw_label+0x736>
    while(txt[line_start] != '\0') {
 800d96e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d976:	4413      	add	r3, r2
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f47f ae1f 	bne.w	800d5be <lv_draw_label+0x36e>
 800d980:	e002      	b.n	800d988 <lv_draw_label+0x738>
        if(txt[line_start] == '\0') return;
 800d982:	bf00      	nop
 800d984:	e000      	b.n	800d988 <lv_draw_label+0x738>
        if(pos.y > mask->y2) return;
 800d986:	bf00      	nop
    }
}
 800d988:	37b4      	adds	r7, #180	; 0xb4
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd90      	pop	{r4, r7, pc}
 800d98e:	bf00      	nop

0800d990 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	4603      	mov	r3, r0
 800d998:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 800d99e:	79fb      	ldrb	r3, [r7, #7]
 800d9a0:	2b2f      	cmp	r3, #47	; 0x2f
 800d9a2:	d906      	bls.n	800d9b2 <hex_char_to_num+0x22>
 800d9a4:	79fb      	ldrb	r3, [r7, #7]
 800d9a6:	2b39      	cmp	r3, #57	; 0x39
 800d9a8:	d803      	bhi.n	800d9b2 <hex_char_to_num+0x22>
        result = hex - '0';
 800d9aa:	79fb      	ldrb	r3, [r7, #7]
 800d9ac:	3b30      	subs	r3, #48	; 0x30
 800d9ae:	73fb      	strb	r3, [r7, #15]
 800d9b0:	e02d      	b.n	800da0e <hex_char_to_num+0x7e>
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800d9b2:	79fb      	ldrb	r3, [r7, #7]
 800d9b4:	2b60      	cmp	r3, #96	; 0x60
 800d9b6:	d902      	bls.n	800d9be <hex_char_to_num+0x2e>
 800d9b8:	79fb      	ldrb	r3, [r7, #7]
 800d9ba:	3b20      	subs	r3, #32
 800d9bc:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 800d9be:	79fb      	ldrb	r3, [r7, #7]
 800d9c0:	3b41      	subs	r3, #65	; 0x41
 800d9c2:	2b05      	cmp	r3, #5
 800d9c4:	d820      	bhi.n	800da08 <hex_char_to_num+0x78>
 800d9c6:	a201      	add	r2, pc, #4	; (adr r2, 800d9cc <hex_char_to_num+0x3c>)
 800d9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9cc:	0800d9e5 	.word	0x0800d9e5
 800d9d0:	0800d9eb 	.word	0x0800d9eb
 800d9d4:	0800d9f1 	.word	0x0800d9f1
 800d9d8:	0800d9f7 	.word	0x0800d9f7
 800d9dc:	0800d9fd 	.word	0x0800d9fd
 800d9e0:	0800da03 	.word	0x0800da03
            case 'A': result = 10; break;
 800d9e4:	230a      	movs	r3, #10
 800d9e6:	73fb      	strb	r3, [r7, #15]
 800d9e8:	e011      	b.n	800da0e <hex_char_to_num+0x7e>
            case 'B': result = 11; break;
 800d9ea:	230b      	movs	r3, #11
 800d9ec:	73fb      	strb	r3, [r7, #15]
 800d9ee:	e00e      	b.n	800da0e <hex_char_to_num+0x7e>
            case 'C': result = 12; break;
 800d9f0:	230c      	movs	r3, #12
 800d9f2:	73fb      	strb	r3, [r7, #15]
 800d9f4:	e00b      	b.n	800da0e <hex_char_to_num+0x7e>
            case 'D': result = 13; break;
 800d9f6:	230d      	movs	r3, #13
 800d9f8:	73fb      	strb	r3, [r7, #15]
 800d9fa:	e008      	b.n	800da0e <hex_char_to_num+0x7e>
            case 'E': result = 14; break;
 800d9fc:	230e      	movs	r3, #14
 800d9fe:	73fb      	strb	r3, [r7, #15]
 800da00:	e005      	b.n	800da0e <hex_char_to_num+0x7e>
            case 'F': result = 15; break;
 800da02:	230f      	movs	r3, #15
 800da04:	73fb      	strb	r3, [r7, #15]
 800da06:	e002      	b.n	800da0e <hex_char_to_num+0x7e>
            default: result = 0; break;
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]
 800da0c:	bf00      	nop
        }
    }

    return result;
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <lv_draw_line>:
 * @param style pointer to a line's style
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * mask,
                  const lv_style_t * style, lv_opa_t opa_scale)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b090      	sub	sp, #64	; 0x40
 800da20:	af02      	add	r7, sp, #8
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	603b      	str	r3, [r7, #0]

    if(style->line.width == 0) return;
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800da30:	2b00      	cmp	r3, #0
 800da32:	f000 81ce 	beq.w	800ddd2 <lv_draw_line+0x3b6>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f9b3 2000 	ldrsh.w	r2, [r3]
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da42:	429a      	cmp	r2, r3
 800da44:	d108      	bne.n	800da58 <lv_draw_line+0x3c>
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da52:	429a      	cmp	r2, r3
 800da54:	f000 81bf 	beq.w	800ddd6 <lv_draw_line+0x3ba>

    /*Return if the points are out of the mask*/
    if(point1->x < mask->x1 - style->line.width && point2->x < mask->x1 - style->line.width) return;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da5e:	461a      	mov	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da66:	4619      	mov	r1, r3
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800da6e:	1acb      	subs	r3, r1, r3
 800da70:	429a      	cmp	r2, r3
 800da72:	da0e      	bge.n	800da92 <lv_draw_line+0x76>
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da7a:	461a      	mov	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da82:	4619      	mov	r1, r3
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800da8a:	1acb      	subs	r3, r1, r3
 800da8c:	429a      	cmp	r2, r3
 800da8e:	f2c0 81a4 	blt.w	800ddda <lv_draw_line+0x3be>
    if(point1->x > mask->x2 + style->line.width && point2->x > mask->x2 + style->line.width) return;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da98:	461a      	mov	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800daa0:	4619      	mov	r1, r3
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800daa8:	440b      	add	r3, r1
 800daaa:	429a      	cmp	r2, r3
 800daac:	dd0e      	ble.n	800dacc <lv_draw_line+0xb0>
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dab4:	461a      	mov	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dabc:	4619      	mov	r1, r3
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800dac4:	440b      	add	r3, r1
 800dac6:	429a      	cmp	r2, r3
 800dac8:	f300 8189 	bgt.w	800ddde <lv_draw_line+0x3c2>
    if(point1->y < mask->y1 - style->line.width && point2->y < mask->y1 - style->line.width) return;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dad2:	461a      	mov	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dada:	4619      	mov	r1, r3
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800dae2:	1acb      	subs	r3, r1, r3
 800dae4:	429a      	cmp	r2, r3
 800dae6:	da0e      	bge.n	800db06 <lv_draw_line+0xea>
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800daee:	461a      	mov	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800daf6:	4619      	mov	r1, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800dafe:	1acb      	subs	r3, r1, r3
 800db00:	429a      	cmp	r2, r3
 800db02:	f2c0 816e 	blt.w	800dde2 <lv_draw_line+0x3c6>
    if(point1->y > mask->y2 + style->line.width && point2->y > mask->y2 + style->line.width) return;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800db0c:	461a      	mov	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800db14:	4619      	mov	r1, r3
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800db1c:	440b      	add	r3, r1
 800db1e:	429a      	cmp	r2, r3
 800db20:	dd0e      	ble.n	800db40 <lv_draw_line+0x124>
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800db28:	461a      	mov	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800db30:	4619      	mov	r1, r3
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800db38:	440b      	add	r3, r1
 800db3a:	429a      	cmp	r2, r3
 800db3c:	f300 8153 	bgt.w	800dde6 <lv_draw_line+0x3ca>
    lv_point_t p1;
    lv_point_t p2;

    /*If the line if rather vertical then be sure y1 < y2 else x1 < x2*/

    if(LV_MATH_ABS(point1->x - point2->x) > LV_MATH_ABS(point1->y - point2->y)) {
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db46:	461a      	mov	r2, r3
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800db54:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800db5e:	4619      	mov	r1, r3
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800db66:	1acb      	subs	r3, r1, r3
 800db68:	2b00      	cmp	r3, #0
 800db6a:	bfb8      	it	lt
 800db6c:	425b      	neglt	r3, r3
 800db6e:	429a      	cmp	r2, r3
 800db70:	dd29      	ble.n	800dbc6 <lv_draw_line+0x1aa>

        /*Steps less in y then x -> rather horizontal*/
        if(point1->x < point2->x) {
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db7e:	429a      	cmp	r2, r3
 800db80:	da10      	bge.n	800dba4 <lv_draw_line+0x188>
            p1.x = point1->x;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db88:	833b      	strh	r3, [r7, #24]
            p1.y = point1->y;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800db90:	837b      	strh	r3, [r7, #26]
            p2.x = point2->x;
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db98:	82bb      	strh	r3, [r7, #20]
            p2.y = point2->y;
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dba0:	82fb      	strh	r3, [r7, #22]
 800dba2:	e039      	b.n	800dc18 <lv_draw_line+0x1fc>
        } else {
            p1.x = point2->x;
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbaa:	833b      	strh	r3, [r7, #24]
            p1.y = point2->y;
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dbb2:	837b      	strh	r3, [r7, #26]
            p2.x = point1->x;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbba:	82bb      	strh	r3, [r7, #20]
            p2.y = point1->y;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dbc2:	82fb      	strh	r3, [r7, #22]
 800dbc4:	e028      	b.n	800dc18 <lv_draw_line+0x1fc>
        }
    } else {
        /*Steps less in x then y -> rather vertical*/
        if(point1->y < point2->y) {
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	da10      	bge.n	800dbf8 <lv_draw_line+0x1dc>
            p1.x = point1->x;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbdc:	833b      	strh	r3, [r7, #24]
            p1.y = point1->y;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dbe4:	837b      	strh	r3, [r7, #26]
            p2.x = point2->x;
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbec:	82bb      	strh	r3, [r7, #20]
            p2.y = point2->y;
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dbf4:	82fb      	strh	r3, [r7, #22]
 800dbf6:	e00f      	b.n	800dc18 <lv_draw_line+0x1fc>
        } else {
            p1.x = point2->x;
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbfe:	833b      	strh	r3, [r7, #24]
            p1.y = point2->y;
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dc06:	837b      	strh	r3, [r7, #26]
            p2.x = point1->x;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc0e:	82bb      	strh	r3, [r7, #20]
            p2.y = point1->y;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dc16:	82fb      	strh	r3, [r7, #22]
        }
    }

    line_init(&main_line, &p1, &p2);
 800dc18:	f107 0214 	add.w	r2, r7, #20
 800dc1c:	f107 0118 	add.w	r1, r7, #24
 800dc20:	f107 031c 	add.w	r3, r7, #28
 800dc24:	4618      	mov	r0, r3
 800dc26:	f001 fbb0 	bl	800f38a <line_init>

    /*Special case draw a horizontal line*/
    if(main_line.p1.y == main_line.p2.y) {
 800dc2a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800dc2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d108      	bne.n	800dc48 <lv_draw_line+0x22c>
        line_draw_hor(&main_line, mask, style, opa_scale);
 800dc36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dc3a:	f107 001c 	add.w	r0, r7, #28
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	6879      	ldr	r1, [r7, #4]
 800dc42:	f000 f8d4 	bl	800ddee <line_draw_hor>
 800dc46:	e0cf      	b.n	800dde8 <lv_draw_line+0x3cc>
    }
    /*Special case draw a vertical line*/
    else if(main_line.p1.x == main_line.p2.x) {
 800dc48:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800dc4c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d108      	bne.n	800dc66 <lv_draw_line+0x24a>
        line_draw_ver(&main_line, mask, style, opa_scale);
 800dc54:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dc58:	f107 001c 	add.w	r0, r7, #28
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	6879      	ldr	r1, [r7, #4]
 800dc60:	f000 f93e 	bl	800dee0 <line_draw_ver>
 800dc64:	e0c0      	b.n	800dde8 <lv_draw_line+0x3cc>
    }
    /*Arbitrary skew line*/
    else {
        bool dir_ori = false;
 800dc66:	2300      	movs	r3, #0
 800dc68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#if LV_ANTIALIAS
        bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800dc6c:	f7fc fbe0 	bl	800a430 <lv_refr_get_disp_refreshing>
 800dc70:	4603      	mov	r3, r0
 800dc72:	4618      	mov	r0, r3
 800dc74:	f007 faac 	bl	80151d0 <lv_disp_get_antialiasing>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(aa) {
 800dc7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f000 8099 	beq.w	800ddba <lv_draw_line+0x39e>
            lv_point_t p_tmp;

            if(main_line.hor) {
 800dc88:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d04a      	beq.n	800dd26 <lv_draw_line+0x30a>
                if(main_line.p1.y < main_line.p2.y) {
 800dc90:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800dc94:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	da1d      	bge.n	800dcd8 <lv_draw_line+0x2bc>
                    dir_ori = true;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x;
 800dca2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dca6:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y - 1;
 800dca8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	b21b      	sxth	r3, r3
 800dcb4:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800dcb6:	f107 0210 	add.w	r2, r7, #16
 800dcba:	f107 0118 	add.w	r1, r7, #24
 800dcbe:	f107 031c 	add.w	r3, r7, #28
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f001 fb61 	bl	800f38a <line_init>
                    main_line.sy = LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
 800dcc8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	bfb8      	it	lt
 800dcd0:	425b      	neglt	r3, r3
 800dcd2:	b21b      	sxth	r3, r3
 800dcd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dcd6:	e070      	b.n	800ddba <lv_draw_line+0x39e>
                } else if(main_line.p1.y > main_line.p2.y) {
 800dcd8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800dcdc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dce0:	429a      	cmp	r2, r3
 800dce2:	dd6a      	ble.n	800ddba <lv_draw_line+0x39e>
                    dir_ori = false;
 800dce4:	2300      	movs	r3, #0
 800dce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x;
 800dcea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dcee:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y + 1;
 800dcf0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	b21b      	sxth	r3, r3
 800dcfc:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800dcfe:	f107 0210 	add.w	r2, r7, #16
 800dd02:	f107 0118 	add.w	r1, r7, #24
 800dd06:	f107 031c 	add.w	r3, r7, #28
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f001 fb3d 	bl	800f38a <line_init>
                    main_line.sy = -LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
 800dd10:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	bfb8      	it	lt
 800dd18:	425b      	neglt	r3, r3
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	425b      	negs	r3, r3
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	b21b      	sxth	r3, r3
 800dd22:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dd24:	e049      	b.n	800ddba <lv_draw_line+0x39e>
                }
            } else {
                if(main_line.p1.x < main_line.p2.x) {
 800dd26:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800dd2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	da1d      	bge.n	800dd6e <lv_draw_line+0x352>
                    dir_ori = true;
 800dd32:	2301      	movs	r3, #1
 800dd34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x - 1;
 800dd38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	3b01      	subs	r3, #1
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	b21b      	sxth	r3, r3
 800dd44:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y;
 800dd46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dd4a:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800dd4c:	f107 0210 	add.w	r2, r7, #16
 800dd50:	f107 0118 	add.w	r1, r7, #24
 800dd54:	f107 031c 	add.w	r3, r7, #28
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f001 fb16 	bl	800f38a <line_init>
                    main_line.sx = LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
 800dd5e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	bfb8      	it	lt
 800dd66:	425b      	neglt	r3, r3
 800dd68:	b21b      	sxth	r3, r3
 800dd6a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800dd6c:	e025      	b.n	800ddba <lv_draw_line+0x39e>
                } else if(main_line.p1.x > main_line.p2.x) {
 800dd6e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800dd72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	dd1f      	ble.n	800ddba <lv_draw_line+0x39e>
                    dir_ori = false;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x + 1;
 800dd80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	3301      	adds	r3, #1
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	b21b      	sxth	r3, r3
 800dd8c:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y;
 800dd8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dd92:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800dd94:	f107 0210 	add.w	r2, r7, #16
 800dd98:	f107 0118 	add.w	r1, r7, #24
 800dd9c:	f107 031c 	add.w	r3, r7, #28
 800dda0:	4618      	mov	r0, r3
 800dda2:	f001 faf2 	bl	800f38a <line_init>
                    main_line.sx = -LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
 800dda6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	bfb8      	it	lt
 800ddae:	425b      	neglt	r3, r3
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	425b      	negs	r3, r3
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	b21b      	sxth	r3, r3
 800ddb8:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
            }
        }
#endif
        line_draw_skew(&main_line, dir_ori, mask, style, opa_scale);
 800ddba:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ddbe:	f107 001c 	add.w	r0, r7, #28
 800ddc2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	f000 f901 	bl	800dfd2 <line_draw_skew>
 800ddd0:	e00a      	b.n	800dde8 <lv_draw_line+0x3cc>
    if(style->line.width == 0) return;
 800ddd2:	bf00      	nop
 800ddd4:	e008      	b.n	800dde8 <lv_draw_line+0x3cc>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800ddd6:	bf00      	nop
 800ddd8:	e006      	b.n	800dde8 <lv_draw_line+0x3cc>
    if(point1->x < mask->x1 - style->line.width && point2->x < mask->x1 - style->line.width) return;
 800ddda:	bf00      	nop
 800dddc:	e004      	b.n	800dde8 <lv_draw_line+0x3cc>
    if(point1->x > mask->x2 + style->line.width && point2->x > mask->x2 + style->line.width) return;
 800ddde:	bf00      	nop
 800dde0:	e002      	b.n	800dde8 <lv_draw_line+0x3cc>
    if(point1->y < mask->y1 - style->line.width && point2->y < mask->y1 - style->line.width) return;
 800dde2:	bf00      	nop
 800dde4:	e000      	b.n	800dde8 <lv_draw_line+0x3cc>
    if(point1->y > mask->y2 + style->line.width && point2->y > mask->y2 + style->line.width) return;
 800dde6:	bf00      	nop
    }
}
 800dde8:	3738      	adds	r7, #56	; 0x38
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <line_draw_hor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void line_draw_hor(line_draw_t * main_line, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b08a      	sub	sp, #40	; 0x28
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	60f8      	str	r0, [r7, #12]
 800ddf6:	60b9      	str	r1, [r7, #8]
 800ddf8:	607a      	str	r2, [r7, #4]
 800ddfa:	70fb      	strb	r3, [r7, #3]
    lv_coord_t width      = style->line.width - 1;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800de02:	b29b      	uxth	r3, r3
 800de04:	3b01      	subs	r3, #1
 800de06:	b29b      	uxth	r3, r3
 800de08:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t width_half = width >> 1;
 800de0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800de0e:	105b      	asrs	r3, r3, #1
 800de10:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t width_1    = width & 0x1;
 800de12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de14:	f003 0301 	and.w	r3, r3, #1
 800de18:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800de1a:	78fb      	ldrb	r3, [r7, #3]
 800de1c:	2bff      	cmp	r3, #255	; 0xff
 800de1e:	d103      	bne.n	800de28 <line_draw_hor+0x3a>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de26:	e00b      	b.n	800de40 <line_draw_hor+0x52>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de2e:	b29a      	uxth	r2, r3
 800de30:	78fb      	ldrb	r3, [r7, #3]
 800de32:	b29b      	uxth	r3, r3
 800de34:	fb12 f303 	smulbb	r3, r2, r3
 800de38:	b29b      	uxth	r3, r3
 800de3a:	0a1b      	lsrs	r3, r3, #8
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    lv_area_t act_area;
    act_area.x1 = main_line->p1.x;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de4a:	833b      	strh	r3, [r7, #24]
    act_area.x2 = main_line->p2.x;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800de52:	83bb      	strh	r3, [r7, #28]
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de5e:	1ad3      	subs	r3, r2, r3
 800de60:	b29a      	uxth	r2, r3
 800de62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	b29b      	uxth	r3, r3
 800de68:	b21b      	sxth	r3, r3
 800de6a:	837b      	strh	r3, [r7, #26]
    act_area.y2 = main_line->p2.y + width_half;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de72:	b29a      	uxth	r2, r3
 800de74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de76:	4413      	add	r3, r2
 800de78:	b29b      	uxth	r3, r3
 800de7a:	b21b      	sxth	r3, r3
 800de7c:	83fb      	strh	r3, [r7, #30]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800de7e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800de82:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800de86:	4293      	cmp	r3, r2
 800de88:	bfa8      	it	ge
 800de8a:	4613      	movge	r3, r2
 800de8c:	b21b      	sxth	r3, r3
 800de8e:	823b      	strh	r3, [r7, #16]
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800de90:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800de94:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800de98:	4293      	cmp	r3, r2
 800de9a:	bfb8      	it	lt
 800de9c:	4613      	movlt	r3, r2
 800de9e:	b21b      	sxth	r3, r3
 800dea0:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800dea2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800dea6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800deaa:	4293      	cmp	r3, r2
 800deac:	bfa8      	it	ge
 800deae:	4613      	movge	r3, r2
 800deb0:	b21b      	sxth	r3, r3
 800deb2:	827b      	strh	r3, [r7, #18]
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800deb4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800deb8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800debc:	4293      	cmp	r3, r2
 800debe:	bfb8      	it	lt
 800dec0:	4613      	movlt	r3, r2
 800dec2:	b21b      	sxth	r3, r3
 800dec4:	82fb      	strh	r3, [r7, #22]
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800dec6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	f107 0010 	add.w	r0, r7, #16
 800ded0:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800ded2:	68b9      	ldr	r1, [r7, #8]
 800ded4:	f7fe f82f 	bl	800bf36 <lv_draw_fill>
}
 800ded8:	bf00      	nop
 800deda:	3728      	adds	r7, #40	; 0x28
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <line_draw_ver>:

static void line_draw_ver(line_draw_t * main_line, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08a      	sub	sp, #40	; 0x28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	70fb      	strb	r3, [r7, #3]
    lv_coord_t width      = style->line.width - 1;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800def4:	b29b      	uxth	r3, r3
 800def6:	3b01      	subs	r3, #1
 800def8:	b29b      	uxth	r3, r3
 800defa:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t width_half = width >> 1;
 800defc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800df00:	105b      	asrs	r3, r3, #1
 800df02:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t width_1    = width & 0x1;
 800df04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800df06:	f003 0301 	and.w	r3, r3, #1
 800df0a:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800df0c:	78fb      	ldrb	r3, [r7, #3]
 800df0e:	2bff      	cmp	r3, #255	; 0xff
 800df10:	d103      	bne.n	800df1a <line_draw_ver+0x3a>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800df18:	e00b      	b.n	800df32 <line_draw_ver+0x52>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800df20:	b29a      	uxth	r2, r3
 800df22:	78fb      	ldrb	r3, [r7, #3]
 800df24:	b29b      	uxth	r3, r3
 800df26:	fb12 f303 	smulbb	r3, r2, r3
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	0a1b      	lsrs	r3, r3, #8
 800df2e:	b29b      	uxth	r3, r3
 800df30:	b2db      	uxtb	r3, r3
 800df32:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    lv_area_t act_area;
    act_area.x1 = main_line->p1.x - width_half;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df40:	1ad3      	subs	r3, r2, r3
 800df42:	b29b      	uxth	r3, r3
 800df44:	b21b      	sxth	r3, r3
 800df46:	833b      	strh	r3, [r7, #24]
    act_area.x2 = main_line->p2.x + width_half + width_1;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800df4e:	b29a      	uxth	r2, r3
 800df50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df52:	4413      	add	r3, r2
 800df54:	b29a      	uxth	r2, r3
 800df56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df58:	4413      	add	r3, r2
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	b21b      	sxth	r3, r3
 800df5e:	83bb      	strh	r3, [r7, #28]
    act_area.y1 = main_line->p1.y;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df66:	837b      	strh	r3, [r7, #26]
    act_area.y2 = main_line->p2.y;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800df6e:	83fb      	strh	r3, [r7, #30]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800df70:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800df74:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800df78:	4293      	cmp	r3, r2
 800df7a:	bfa8      	it	ge
 800df7c:	4613      	movge	r3, r2
 800df7e:	b21b      	sxth	r3, r3
 800df80:	823b      	strh	r3, [r7, #16]
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800df82:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800df86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800df8a:	4293      	cmp	r3, r2
 800df8c:	bfb8      	it	lt
 800df8e:	4613      	movlt	r3, r2
 800df90:	b21b      	sxth	r3, r3
 800df92:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800df94:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800df98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800df9c:	4293      	cmp	r3, r2
 800df9e:	bfa8      	it	ge
 800dfa0:	4613      	movge	r3, r2
 800dfa2:	b21b      	sxth	r3, r3
 800dfa4:	827b      	strh	r3, [r7, #18]
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800dfa6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800dfaa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	bfb8      	it	lt
 800dfb2:	4613      	movlt	r3, r2
 800dfb4:	b21b      	sxth	r3, r3
 800dfb6:	82fb      	strh	r3, [r7, #22]
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800dfb8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	f107 0010 	add.w	r0, r7, #16
 800dfc2:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800dfc4:	68b9      	ldr	r1, [r7, #8]
 800dfc6:	f7fd ffb6 	bl	800bf36 <lv_draw_fill>
}
 800dfca:	bf00      	nop
 800dfcc:	3728      	adds	r7, #40	; 0x28
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <line_draw_skew>:

static void line_draw_skew(line_draw_t * main_line, bool dir_ori, const lv_area_t * mask, const lv_style_t * style,
                           lv_opa_t opa_scale)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b09e      	sub	sp, #120	; 0x78
 800dfd6:	af02      	add	r7, sp, #8
 800dfd8:	60f8      	str	r0, [r7, #12]
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	603b      	str	r3, [r7, #0]
 800dfde:	460b      	mov	r3, r1
 800dfe0:	72fb      	strb	r3, [r7, #11]

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800dfe2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800dfe6:	2bff      	cmp	r3, #255	; 0xff
 800dfe8:	d103      	bne.n	800dff2 <line_draw_skew+0x20>
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dff0:	e00c      	b.n	800e00c <line_draw_skew+0x3a>
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800dffe:	b29b      	uxth	r3, r3
 800e000:	fb12 f303 	smulbb	r3, r2, r3
 800e004:	b29b      	uxth	r3, r3
 800e006:	0a1b      	lsrs	r3, r3, #8
 800e008:	b29b      	uxth	r3, r3
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
#if LV_ANTIALIAS
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800e010:	f7fc fa0e 	bl	800a430 <lv_refr_get_disp_refreshing>
 800e014:	4603      	mov	r3, r0
 800e016:	4618      	mov	r0, r3
 800e018:	f007 f8da 	bl	80151d0 <lv_disp_get_antialiasing>
 800e01c:	4603      	mov	r3, r0
 800e01e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
#endif
    lv_point_t vect_main, vect_norm;
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e028:	b29a      	uxth	r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e030:	b29b      	uxth	r3, r3
 800e032:	1ad3      	subs	r3, r2, r3
 800e034:	b29b      	uxth	r3, r3
 800e036:	b21b      	sxth	r3, r3
 800e038:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e042:	b29a      	uxth	r2, r3
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	b29b      	uxth	r3, r3
 800e050:	b21b      	sxth	r3, r3
 800e052:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(main_line->hor) {
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	7e1b      	ldrb	r3, [r3, #24]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d025      	beq.n	800e0aa <line_draw_skew+0xd8>
        if(main_line->p1.y < main_line->p2.y + dir_ori) {
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e064:	461a      	mov	r2, r3
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e06c:	4619      	mov	r1, r3
 800e06e:	7afb      	ldrb	r3, [r7, #11]
 800e070:	440b      	add	r3, r1
 800e072:	429a      	cmp	r2, r3
 800e074:	da0c      	bge.n	800e090 <line_draw_skew+0xbe>
            vect_norm.x = -vect_main.y;
 800e076:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	425b      	negs	r3, r3
 800e07e:	b29b      	uxth	r3, r3
 800e080:	b21b      	sxth	r3, r3
 800e082:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = vect_main.x;
 800e086:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800e08a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e08e:	e031      	b.n	800e0f4 <line_draw_skew+0x122>
        } else {
            vect_norm.x = vect_main.y;
 800e090:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800e094:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = -vect_main.x;
 800e098:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	425b      	negs	r3, r3
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	b21b      	sxth	r3, r3
 800e0a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e0a8:	e024      	b.n	800e0f4 <line_draw_skew+0x122>
        }
    } else {
        if(main_line->p1.x < main_line->p2.x + dir_ori) {
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	7afb      	ldrb	r3, [r7, #11]
 800e0bc:	440b      	add	r3, r1
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	da0c      	bge.n	800e0dc <line_draw_skew+0x10a>
            vect_norm.x = vect_main.y;
 800e0c2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800e0c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = -vect_main.x;
 800e0ca:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	425b      	negs	r3, r3
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	b21b      	sxth	r3, r3
 800e0d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e0da:	e00b      	b.n	800e0f4 <line_draw_skew+0x122>
        } else {
            vect_norm.x = -vect_main.y;
 800e0dc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	425b      	negs	r3, r3
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	b21b      	sxth	r3, r3
 800e0e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = vect_main.x;
 800e0ec:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800e0f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        }
    }

    /* In case of a short but tick line the perpendicular ending is longer then the real line.
     * it would break the calculations so make the normal vector larger*/
    vect_norm.x = vect_norm.x << 4;
 800e0f4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800e0f8:	011b      	lsls	r3, r3, #4
 800e0fa:	b21b      	sxth	r3, r3
 800e0fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    vect_norm.y = vect_norm.y << 4;
 800e100:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800e104:	011b      	lsls	r3, r3, #4
 800e106:	b21b      	sxth	r3, r3
 800e108:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    lv_coord_t width;
    width = style->line.width;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e110:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    /* The pattern stores the points of the line ending. It has the good direction and length.
     * The worth case is the 45° line where pattern can have 1.41 x `width` points*/

    lv_point_t * pattern = lv_draw_get_buf(width * 2 * sizeof(lv_point_t));
 800e114:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e118:	00db      	lsls	r3, r3, #3
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fd f8fa 	bl	800b314 <lv_draw_get_buf>
 800e120:	65b8      	str	r0, [r7, #88]	; 0x58
    lv_coord_t i = 0;
 800e122:	2300      	movs	r3, #0
 800e124:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    /*Create a perpendicular pattern (a small line)*/
    if(width != 0) {
 800e128:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d05b      	beq.n	800e1e8 <line_draw_skew+0x216>
        line_draw_t pattern_line;
        lv_point_t p0 = {0, 0};
 800e130:	2300      	movs	r3, #0
 800e132:	82bb      	strh	r3, [r7, #20]
 800e134:	2300      	movs	r3, #0
 800e136:	82fb      	strh	r3, [r7, #22]
        line_init(&pattern_line, &p0, &vect_norm);
 800e138:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e13c:	f107 0114 	add.w	r1, r7, #20
 800e140:	f107 0318 	add.w	r3, r7, #24
 800e144:	4618      	mov	r0, r3
 800e146:	f001 f920 	bl	800f38a <line_init>

        uint32_t width_sqr = width * width;
 800e14a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e14e:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800e152:	fb02 f303 	mul.w	r3, r2, r3
 800e156:	657b      	str	r3, [r7, #84]	; 0x54
        /* Run for a lot of times. Meanwhile the real width will be determined as well */
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i++) {
 800e158:	2300      	movs	r3, #0
 800e15a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800e15e:	e03d      	b.n	800e1dc <line_draw_skew+0x20a>
            pattern[i].x = pattern_line.p_act.x;
 800e160:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e168:	4413      	add	r3, r2
 800e16a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e16e:	801a      	strh	r2, [r3, #0]
            pattern[i].y = pattern_line.p_act.y;
 800e170:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e178:	4413      	add	r3, r2
 800e17a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800e17e:	805a      	strh	r2, [r3, #2]

            /*Finish the pattern line if it's length equal to the desired width (Use Pythagoras
             * theorem)*/
            uint32_t sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800e180:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e184:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e188:	fb02 f203 	mul.w	r2, r2, r3
 800e18c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e190:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 800e194:	fb01 f303 	mul.w	r3, r1, r3
 800e198:	4413      	add	r3, r2
 800e19a:	653b      	str	r3, [r7, #80]	; 0x50
            if(sqr >= width_sqr) {
 800e19c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e19e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d30f      	bcc.n	800e1c4 <line_draw_skew+0x1f2>
                width = i;
 800e1a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e1a8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
#if LV_ANTIALIAS
                if(aa) width--;
 800e1ac:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d018      	beq.n	800e1e6 <line_draw_skew+0x214>
 800e1b4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	3b01      	subs	r3, #1
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
#endif
                break;
 800e1c2:	e010      	b.n	800e1e6 <line_draw_skew+0x214>
            }

            line_next(&pattern_line);
 800e1c4:	f107 0318 	add.w	r3, r7, #24
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f001 f96a 	bl	800f4a2 <line_next>
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i++) {
 800e1ce:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800e1dc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e1e0:	2b03      	cmp	r3, #3
 800e1e2:	ddbd      	ble.n	800e160 <line_draw_skew+0x18e>
 800e1e4:	e000      	b.n	800e1e8 <line_draw_skew+0x216>
                break;
 800e1e6:	bf00      	nop
        }
    }

#if LV_ANTIALIAS
    lv_coord_t aa_last_corner;
    lv_coord_t width_safe = width;
 800e1e8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800e1ec:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    if(aa) {
 800e1f0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d009      	beq.n	800e20c <line_draw_skew+0x23a>
        if(width == 0) width_safe = 1;
 800e1f8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d102      	bne.n	800e206 <line_draw_skew+0x234>
 800e200:	2301      	movs	r3, #1
 800e202:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

        aa_last_corner = 0;
 800e206:	2300      	movs	r3, #0
 800e208:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    }
#endif

    lv_coord_t x_center_ofs = 0;
 800e20c:	2300      	movs	r3, #0
 800e20e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    lv_coord_t y_center_ofs = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    if(width != 0) {
 800e218:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d01e      	beq.n	800e25e <line_draw_skew+0x28c>
        x_center_ofs = pattern[width - 1].x / 2;
 800e220:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e228:	3b01      	subs	r3, #1
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e22e:	4413      	add	r3, r2
 800e230:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e234:	0fda      	lsrs	r2, r3, #31
 800e236:	4413      	add	r3, r2
 800e238:	105b      	asrs	r3, r3, #1
 800e23a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        y_center_ofs = pattern[width - 1].y / 2;
 800e23e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e242:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e246:	3b01      	subs	r3, #1
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e24c:	4413      	add	r3, r2
 800e24e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e252:	0fda      	lsrs	r2, r3, #31
 800e254:	4413      	add	r3, r2
 800e256:	105b      	asrs	r3, r3, #1
 800e258:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800e25c:	e034      	b.n	800e2c8 <line_draw_skew+0x2f6>
    } else {
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y--;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	7e1b      	ldrb	r3, [r3, #24]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d014      	beq.n	800e290 <line_draw_skew+0x2be>
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e26c:	461a      	mov	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e274:	4619      	mov	r1, r3
 800e276:	7afb      	ldrb	r3, [r7, #11]
 800e278:	440b      	add	r3, r1
 800e27a:	429a      	cmp	r2, r3
 800e27c:	db08      	blt.n	800e290 <line_draw_skew+0x2be>
 800e27e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e280:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e284:	b29b      	uxth	r3, r3
 800e286:	3b01      	subs	r3, #1
 800e288:	b29b      	uxth	r3, r3
 800e28a:	b21a      	sxth	r2, r3
 800e28c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e28e:	805a      	strh	r2, [r3, #2]
        if(!main_line->hor && main_line->p1.x >= main_line->p2.x + dir_ori) pattern[0].x--;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	7e1b      	ldrb	r3, [r3, #24]
 800e294:	f083 0301 	eor.w	r3, r3, #1
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d014      	beq.n	800e2c8 <line_draw_skew+0x2f6>
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	7afb      	ldrb	r3, [r7, #11]
 800e2b0:	440b      	add	r3, r1
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	db08      	blt.n	800e2c8 <line_draw_skew+0x2f6>
 800e2b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	b21a      	sxth	r2, r3
 800e2c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2c6:	801a      	strh	r2, [r3, #0]
    }

    /* Make the coordinates relative to the center */
    for(i = 0; i < width; i++) {
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800e2ce:	e224      	b.n	800e71a <line_draw_skew+0x748>
        pattern[i].x -= x_center_ofs;
 800e2d0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2d8:	4413      	add	r3, r2
 800e2da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800e2e4:	1ad3      	subs	r3, r2, r3
 800e2e6:	b299      	uxth	r1, r3
 800e2e8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2f0:	4413      	add	r3, r2
 800e2f2:	b20a      	sxth	r2, r1
 800e2f4:	801a      	strh	r2, [r3, #0]
        pattern[i].y -= y_center_ofs;
 800e2f6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2fe:	4413      	add	r3, r2
 800e300:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e304:	b29a      	uxth	r2, r3
 800e306:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	b299      	uxth	r1, r3
 800e30e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e316:	4413      	add	r3, r2
 800e318:	b20a      	sxth	r2, r1
 800e31a:	805a      	strh	r2, [r3, #2]
#if LV_ANTIALIAS
        if(aa) {
 800e31c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800e320:	2b00      	cmp	r3, #0
 800e322:	f000 81f3 	beq.w	800e70c <line_draw_skew+0x73a>
            if(i != 0) {
 800e326:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f000 81ee 	beq.w	800e70c <line_draw_skew+0x73a>
                if(main_line->hor) {
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	7e1b      	ldrb	r3, [r3, #24]
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 80f5 	beq.w	800e524 <line_draw_skew+0x552>
                    if(pattern[i - 1].x != pattern[i].x) {
 800e33a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e33e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e342:	3b01      	subs	r3, #1
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e348:	4413      	add	r3, r2
 800e34a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e34e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e356:	440b      	add	r3, r1
 800e358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	f000 81d5 	beq.w	800e70c <line_draw_skew+0x73a>
                        lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
 800e362:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e36a:	4413      	add	r3, r2
 800e36c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e370:	b29a      	uxth	r2, r3
 800e372:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e37a:	440b      	add	r3, r1
 800e37c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e380:	b29b      	uxth	r3, r3
 800e382:	1ad3      	subs	r3, r2, r3
 800e384:	b29b      	uxth	r3, r3
 800e386:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        if(main_line->sy < 0) {
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e390:	2b00      	cmp	r3, #0
 800e392:	da67      	bge.n	800e464 <line_draw_skew+0x492>
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e39a:	b29a      	uxth	r2, r3
 800e39c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3a4:	440b      	add	r3, r1
 800e3a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	4413      	add	r3, r2
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y + seg_w + 1, seg_w, mask,
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3c6:	440b      	add	r3, r1
 800e3c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	4413      	add	r3, r2
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e3d6:	4413      	add	r3, r2
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	3301      	adds	r3, #1
 800e3dc:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800e3de:	b219      	sxth	r1, r3
 800e3e0:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800e3e4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e3e8:	9301      	str	r3, [sp, #4]
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e3ee:	f8ad 3000 	strh.w	r3, [sp]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f7fd f81a 	bl	800b42c <lv_draw_aa_ver_seg>
                                               style->line.color, opa);

                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e408:	440b      	add	r3, r1
 800e40a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e40e:	b29b      	uxth	r3, r3
 800e410:	4413      	add	r3, r2
 800e412:	b29b      	uxth	r3, r3
 800e414:	3301      	adds	r3, #1
 800e416:	b29b      	uxth	r3, r3
 800e418:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + seg_w + 1, -seg_w, mask,
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e420:	b29a      	uxth	r2, r3
 800e422:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e42a:	440b      	add	r3, r1
 800e42c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e430:	b29b      	uxth	r3, r3
 800e432:	4413      	add	r3, r2
 800e434:	b29a      	uxth	r2, r3
 800e436:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e43a:	4413      	add	r3, r2
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	3301      	adds	r3, #1
 800e440:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800e442:	b219      	sxth	r1, r3
 800e444:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e448:	425b      	negs	r3, r3
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	b21a      	sxth	r2, r3
 800e44e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e452:	9301      	str	r3, [sp, #4]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e458:	f8ad 3000 	strh.w	r3, [sp]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f7fc ffe5 	bl	800b42c <lv_draw_aa_ver_seg>
 800e462:	e05a      	b.n	800e51a <line_draw_skew+0x548>
                                               style->line.color, opa);
                        } else {
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e474:	440b      	add	r3, r1
 800e476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	4413      	add	r3, r2
 800e47e:	b29b      	uxth	r3, r3
 800e480:	3b01      	subs	r3, #1
 800e482:	b29b      	uxth	r3, r3
 800e484:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y, seg_w, mask,
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e496:	440b      	add	r3, r1
 800e498:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	4413      	add	r3, r2
 800e4a0:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800e4a2:	b219      	sxth	r1, r3
 800e4a4:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800e4a8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e4ac:	9301      	str	r3, [sp, #4]
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e4b2:	f8ad 3000 	strh.w	r3, [sp]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f7fc ffb8 	bl	800b42c <lv_draw_aa_ver_seg>
                                               style->line.color, opa);

                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4cc:	440b      	add	r3, r1
 800e4ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	4413      	add	r3, r2
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	3301      	adds	r3, #1
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y, -seg_w, mask,
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4ee:	440b      	add	r3, r1
 800e4f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	4413      	add	r3, r2
 800e4f8:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800e4fa:	b219      	sxth	r1, r3
 800e4fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e500:	425b      	negs	r3, r3
 800e502:	b29b      	uxth	r3, r3
 800e504:	b21a      	sxth	r2, r3
 800e506:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e50a:	9301      	str	r3, [sp, #4]
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e510:	f8ad 3000 	strh.w	r3, [sp]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f7fc ff89 	bl	800b42c <lv_draw_aa_ver_seg>
                                               style->line.color, opa);
                        }
                        aa_last_corner = i;
 800e51a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e51e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800e522:	e0f3      	b.n	800e70c <line_draw_skew+0x73a>
                    }
                } else {
                    if(pattern[i - 1].y != pattern[i].y) {
 800e524:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e528:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e52c:	3b01      	subs	r3, #1
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e532:	4413      	add	r3, r2
 800e534:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e538:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e540:	440b      	add	r3, r1
 800e542:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e546:	429a      	cmp	r2, r3
 800e548:	f000 80e0 	beq.w	800e70c <line_draw_skew+0x73a>
                        lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800e54c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e554:	4413      	add	r3, r2
 800e556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e564:	440b      	add	r3, r1
 800e566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	1ad3      	subs	r3, r2, r3
 800e56e:	b29b      	uxth	r3, r3
 800e570:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                        if(main_line->sx < 0) {
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	da67      	bge.n	800e64e <line_draw_skew+0x67c>
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1,
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e584:	b29a      	uxth	r2, r3
 800e586:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e58e:	440b      	add	r3, r1
 800e590:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e594:	b29b      	uxth	r3, r3
 800e596:	4413      	add	r3, r2
 800e598:	b29a      	uxth	r2, r3
 800e59a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e59e:	4413      	add	r3, r2
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w, mask,
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e5ae:	b29a      	uxth	r2, r3
 800e5b0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e5b8:	440b      	add	r3, r1
 800e5ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	4413      	add	r3, r2
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1,
 800e5c8:	b219      	sxth	r1, r3
 800e5ca:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800e5ce:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e5d2:	9301      	str	r3, [sp, #4]
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e5d8:	f8ad 3000 	strh.w	r3, [sp]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f7fc ff6e 	bl	800b4be <lv_draw_aa_hor_seg>
                                               style->line.color, opa);

                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e5e8:	b29a      	uxth	r2, r3
 800e5ea:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e5f2:	440b      	add	r3, r1
 800e5f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	4413      	add	r3, r2
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e602:	4413      	add	r3, r2
 800e604:	b29b      	uxth	r3, r3
 800e606:	3301      	adds	r3, #1
 800e608:	b29b      	uxth	r3, r3
 800e60a:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e612:	b29a      	uxth	r2, r3
 800e614:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e61c:	440b      	add	r3, r1
 800e61e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e622:	b29b      	uxth	r3, r3
 800e624:	4413      	add	r3, r2
 800e626:	b29b      	uxth	r3, r3
 800e628:	3301      	adds	r3, #1
 800e62a:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
 800e62c:	b219      	sxth	r1, r3
 800e62e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e632:	425b      	negs	r3, r3
 800e634:	b29b      	uxth	r3, r3
 800e636:	b21a      	sxth	r2, r3
 800e638:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e642:	f8ad 3000 	strh.w	r3, [sp]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f7fc ff39 	bl	800b4be <lv_draw_aa_hor_seg>
 800e64c:	e05a      	b.n	800e704 <line_draw_skew+0x732>
                                               style->line.color, opa);
                        } else {
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e654:	b29a      	uxth	r2, r3
 800e656:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e65e:	440b      	add	r3, r1
 800e660:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e664:	b29b      	uxth	r3, r3
 800e666:	4413      	add	r3, r2
 800e668:	b29b      	uxth	r3, r3
 800e66a:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w, mask,
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e672:	b29a      	uxth	r2, r3
 800e674:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e67c:	440b      	add	r3, r1
 800e67e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e682:	b29b      	uxth	r3, r3
 800e684:	4413      	add	r3, r2
 800e686:	b29b      	uxth	r3, r3
 800e688:	3b01      	subs	r3, #1
 800e68a:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800e68c:	b219      	sxth	r1, r3
 800e68e:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800e692:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e696:	9301      	str	r3, [sp, #4]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e69c:	f8ad 3000 	strh.w	r3, [sp]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f7fc ff0c 	bl	800b4be <lv_draw_aa_hor_seg>
                                               style->line.color, opa);

                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e6b6:	440b      	add	r3, r1
 800e6b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	4413      	add	r3, r2
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e6ca:	b29a      	uxth	r2, r3
 800e6cc:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e6d4:	440b      	add	r3, r1
 800e6d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	4413      	add	r3, r2
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800e6e4:	b219      	sxth	r1, r3
 800e6e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e6ea:	425b      	negs	r3, r3
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	b21a      	sxth	r2, r3
 800e6f0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e6f4:	9301      	str	r3, [sp, #4]
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e6fa:	f8ad 3000 	strh.w	r3, [sp]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f7fc fedd 	bl	800b4be <lv_draw_aa_hor_seg>
                                               style->line.color, opa);
                        }
                        aa_last_corner = i;
 800e704:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e708:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    for(i = 0; i < width; i++) {
 800e70c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e710:	b29b      	uxth	r3, r3
 800e712:	3301      	adds	r3, #1
 800e714:	b29b      	uxth	r3, r3
 800e716:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800e71a:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800e71e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e722:	429a      	cmp	r2, r3
 800e724:	f6ff add4 	blt.w	800e2d0 <line_draw_skew+0x2fe>
#endif
    }

#if LV_ANTIALIAS
    /*Add the last part of anti-aliasing for the perpendicular ending*/
    if(width != 0 && aa) { /*Due to rounding error with very thin lines it looks ugly*/
 800e728:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f000 81f5 	beq.w	800eb1c <line_draw_skew+0xb4a>
 800e732:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800e736:	2b00      	cmp	r3, #0
 800e738:	f000 81f0 	beq.w	800eb1c <line_draw_skew+0xb4a>
        if(main_line->hor) {
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	7e1b      	ldrb	r3, [r3, #24]
 800e740:	2b00      	cmp	r3, #0
 800e742:	f000 80f6 	beq.w	800e932 <line_draw_skew+0x960>
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800e746:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800e74a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e74e:	3b01      	subs	r3, #1
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e754:	4413      	add	r3, r2
 800e756:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e75a:	b29a      	uxth	r2, r3
 800e75c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e764:	440b      	add	r3, r1
 800e766:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	1ad3      	subs	r3, r2, r3
 800e76e:	b29b      	uxth	r3, r3
 800e770:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if(main_line->sy < 0) {
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	da70      	bge.n	800e860 <line_draw_skew+0x88e>
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e784:	b29a      	uxth	r2, r3
 800e786:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e78e:	440b      	add	r3, r1
 800e790:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e794:	b29b      	uxth	r3, r3
 800e796:	4413      	add	r3, r2
 800e798:	b29b      	uxth	r3, r3
 800e79a:	3b01      	subs	r3, #1
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y + seg_w, seg_w + main_line->sy, mask,
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7b0:	440b      	add	r3, r1
 800e7b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	4413      	add	r3, r2
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e7c0:	4413      	add	r3, r2
 800e7c2:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800e7c4:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y + seg_w, seg_w + main_line->sy, mask,
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e7d2:	4413      	add	r3, r2
 800e7d4:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800e7d6:	b21a      	sxth	r2, r3
 800e7d8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e7dc:	9301      	str	r3, [sp, #4]
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e7e2:	f8ad 3000 	strh.w	r3, [sp]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f7fc fe20 	bl	800b42c <lv_draw_aa_ver_seg>
                                   style->line.color, opa);

                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7fc:	440b      	add	r3, r1
 800e7fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e802:	b29b      	uxth	r3, r3
 800e804:	4413      	add	r3, r2
 800e806:	b29b      	uxth	r3, r3
 800e808:	3301      	adds	r3, #1
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e814:	b29a      	uxth	r2, r3
 800e816:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e81e:	440b      	add	r3, r1
 800e820:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e824:	b29b      	uxth	r3, r3
 800e826:	4413      	add	r3, r2
 800e828:	b29a      	uxth	r2, r3
 800e82a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e82e:	4413      	add	r3, r2
 800e830:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800e832:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e840:	4413      	add	r3, r2
 800e842:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800e844:	425b      	negs	r3, r3
 800e846:	b29b      	uxth	r3, r3
 800e848:	b21a      	sxth	r2, r3
 800e84a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e84e:	9301      	str	r3, [sp, #4]
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e854:	f8ad 3000 	strh.w	r3, [sp]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f7fc fde7 	bl	800b42c <lv_draw_aa_ver_seg>
 800e85e:	e15d      	b.n	800eb1c <line_draw_skew+0xb4a>
                                   style->line.color, opa);

            } else {
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e866:	b29a      	uxth	r2, r3
 800e868:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e870:	440b      	add	r3, r1
 800e872:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e876:	b29b      	uxth	r3, r3
 800e878:	4413      	add	r3, r2
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	3b01      	subs	r3, #1
 800e87e:	b29b      	uxth	r3, r3
 800e880:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y, seg_w + main_line->sy, mask,
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e888:	b29a      	uxth	r2, r3
 800e88a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e892:	440b      	add	r3, r1
 800e894:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e898:	b29b      	uxth	r3, r3
 800e89a:	4413      	add	r3, r2
 800e89c:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800e89e:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y, seg_w + main_line->sy, mask,
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e8ac:	4413      	add	r3, r2
 800e8ae:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800e8b0:	b21a      	sxth	r2, r3
 800e8b2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e8b6:	9301      	str	r3, [sp, #4]
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e8bc:	f8ad 3000 	strh.w	r3, [sp]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f7fc fdb3 	bl	800b42c <lv_draw_aa_ver_seg>
                                   style->line.color, opa);

                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8d6:	440b      	add	r3, r1
 800e8d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	4413      	add	r3, r2
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8f8:	440b      	add	r3, r1
 800e8fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	4413      	add	r3, r2
 800e902:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800e904:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e90c:	b29a      	uxth	r2, r3
 800e90e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e912:	4413      	add	r3, r2
 800e914:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800e916:	425b      	negs	r3, r3
 800e918:	b29b      	uxth	r3, r3
 800e91a:	b21a      	sxth	r2, r3
 800e91c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e920:	9301      	str	r3, [sp, #4]
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e926:	f8ad 3000 	strh.w	r3, [sp]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f7fc fd7e 	bl	800b42c <lv_draw_aa_ver_seg>
 800e930:	e0f4      	b.n	800eb1c <line_draw_skew+0xb4a>
                                   style->line.color, opa);
            }
        } else {
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800e932:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800e936:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e93a:	3b01      	subs	r3, #1
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e940:	4413      	add	r3, r2
 800e942:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e946:	b29a      	uxth	r2, r3
 800e948:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e950:	440b      	add	r3, r1
 800e952:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e956:	b29b      	uxth	r3, r3
 800e958:	1ad3      	subs	r3, r2, r3
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(main_line->sx < 0) {
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e966:	2b00      	cmp	r3, #0
 800e968:	da70      	bge.n	800ea4c <line_draw_skew+0xa7a>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e970:	b29a      	uxth	r2, r3
 800e972:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e976:	009b      	lsls	r3, r3, #2
 800e978:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e97a:	440b      	add	r3, r1
 800e97c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e980:	b29b      	uxth	r3, r3
 800e982:	4413      	add	r3, r2
 800e984:	b29a      	uxth	r2, r3
 800e986:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e98a:	4413      	add	r3, r2
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e996:	b29a      	uxth	r2, r3
 800e998:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e9a0:	440b      	add	r3, r1
 800e9a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	4413      	add	r3, r2
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800e9b0:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e9b8:	b29a      	uxth	r2, r3
 800e9ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e9be:	4413      	add	r3, r2
 800e9c0:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800e9c2:	b21a      	sxth	r2, r3
 800e9c4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800e9c8:	9301      	str	r3, [sp, #4]
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e9ce:	f8ad 3000 	strh.w	r3, [sp]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f7fc fd73 	bl	800b4be <lv_draw_aa_hor_seg>
                                   style->line.color, opa);

                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e9de:	b29a      	uxth	r2, r3
 800e9e0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800e9e4:	009b      	lsls	r3, r3, #2
 800e9e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e9e8:	440b      	add	r3, r1
 800e9ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	4413      	add	r3, r2
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e9f8:	4413      	add	r3, r2
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea0e:	440b      	add	r3, r1
 800ea10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	4413      	add	r3, r2
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800ea1e:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ea26:	b29a      	uxth	r2, r3
 800ea28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea2c:	4413      	add	r3, r2
 800ea2e:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800ea30:	425b      	negs	r3, r3
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	b21a      	sxth	r2, r3
 800ea36:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ea3a:	9301      	str	r3, [sp, #4]
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ea40:	f8ad 3000 	strh.w	r3, [sp]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f7fc fd3a 	bl	800b4be <lv_draw_aa_hor_seg>
 800ea4a:	e067      	b.n	800eb1c <line_draw_skew+0xb4a>
                                   style->line.color, opa);

            } else {
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea52:	b29a      	uxth	r2, r3
 800ea54:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea5c:	440b      	add	r3, r1
 800ea5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	4413      	add	r3, r2
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ea70:	b29a      	uxth	r2, r3
 800ea72:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea7a:	440b      	add	r3, r1
 800ea7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	4413      	add	r3, r2
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	3b01      	subs	r3, #1
 800ea88:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800ea8a:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ea92:	b29a      	uxth	r2, r3
 800ea94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea98:	4413      	add	r3, r2
 800ea9a:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800ea9c:	b21a      	sxth	r2, r3
 800ea9e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800eaa2:	9301      	str	r3, [sp, #4]
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800eaa8:	f8ad 3000 	strh.w	r3, [sp]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f7fc fd06 	bl	800b4be <lv_draw_aa_hor_seg>
                                   style->line.color, opa);

                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eab8:	b29a      	uxth	r2, r3
 800eaba:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eac2:	440b      	add	r3, r1
 800eac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	4413      	add	r3, r2
 800eacc:	b29b      	uxth	r3, r3
 800eace:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eae0:	440b      	add	r3, r1
 800eae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	4413      	add	r3, r2
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	3301      	adds	r3, #1
 800eaee:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800eaf0:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800eafe:	4413      	add	r3, r2
 800eb00:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800eb02:	425b      	negs	r3, r3
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	b21a      	sxth	r2, r3
 800eb08:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800eb0c:	9301      	str	r3, [sp, #4]
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800eb12:	f8ad 3000 	strh.w	r3, [sp]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f7fc fcd1 	bl	800b4be <lv_draw_aa_hor_seg>
#endif

#if LV_ANTIALIAS

    /*Shift the anti aliasing on the edges (-1, 1 or 0 (zero only in case width == 0))*/
    lv_coord_t aa_shift1 = 0;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    lv_coord_t aa_shift2 = 0;
 800eb22:	2300      	movs	r3, #0
 800eb24:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    if(aa) {
 800eb28:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d049      	beq.n	800ebc4 <line_draw_skew+0xbf2>
        if(main_line->hor == false) {
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	7e1b      	ldrb	r3, [r3, #24]
 800eb34:	f083 0301 	eor.w	r3, r3, #1
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d021      	beq.n	800eb82 <line_draw_skew+0xbb0>
            if(main_line->sx < 0) {
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	da0e      	bge.n	800eb66 <line_draw_skew+0xb94>
                aa_shift1 = -1;
 800eb48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb4c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                aa_shift2 = width == 0 ? 0 : aa_shift1;
 800eb50:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d002      	beq.n	800eb5e <line_draw_skew+0xb8c>
 800eb58:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800eb5c:	e000      	b.n	800eb60 <line_draw_skew+0xb8e>
 800eb5e:	2300      	movs	r3, #0
 800eb60:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800eb64:	e02e      	b.n	800ebc4 <line_draw_skew+0xbf2>
            } else {
                aa_shift2 = 1;
 800eb66:	2301      	movs	r3, #1
 800eb68:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                aa_shift1 = width == 0 ? 0 : aa_shift2;
 800eb6c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d002      	beq.n	800eb7a <line_draw_skew+0xba8>
 800eb74:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800eb78:	e000      	b.n	800eb7c <line_draw_skew+0xbaa>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800eb80:	e020      	b.n	800ebc4 <line_draw_skew+0xbf2>
            }
        } else {
            if(main_line->sy < 0) {
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	da0e      	bge.n	800ebaa <line_draw_skew+0xbd8>
                aa_shift1 = -1;
 800eb8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb90:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                aa_shift2 = width == 0 ? 0 : aa_shift1;
 800eb94:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d002      	beq.n	800eba2 <line_draw_skew+0xbd0>
 800eb9c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800eba0:	e000      	b.n	800eba4 <line_draw_skew+0xbd2>
 800eba2:	2300      	movs	r3, #0
 800eba4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800eba8:	e00c      	b.n	800ebc4 <line_draw_skew+0xbf2>
            } else {
                aa_shift2 = 1;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                aa_shift1 = width == 0 ? 0 : aa_shift2;
 800ebb0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <line_draw_skew+0xbec>
 800ebb8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800ebbc:	e000      	b.n	800ebc0 <line_draw_skew+0xbee>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        }
    }
#endif

    volatile lv_point_t prev_p;
    prev_p.x = main_line->p1.x;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebca:	87bb      	strh	r3, [r7, #60]	; 0x3c
    prev_p.y = main_line->p1.y;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ebd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_area_t draw_area;
    bool first_run = true;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if(main_line->hor) {
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	7e1b      	ldrb	r3, [r3, #24]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	f000 82dd 	beq.w	800f19e <line_draw_skew+0x11cc>
        while(line_next_y(main_line)) {
 800ebe4:	e0f3      	b.n	800edce <line_draw_skew+0xdfc>
            for(i = 0; i < width; i++) {
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800ebec:	e074      	b.n	800ecd8 <line_draw_skew+0xd06>
                draw_area.x1 = prev_p.x + pattern[i].x;
 800ebee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ebf0:	b21b      	sxth	r3, r3
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebfc:	440b      	add	r3, r1
 800ebfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	4413      	add	r3, r2
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	b21b      	sxth	r3, r3
 800ec0a:	86bb      	strh	r3, [r7, #52]	; 0x34
                draw_area.y1 = prev_p.y + pattern[i].y;
 800ec0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ec0e:	b21b      	sxth	r3, r3
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec1a:	440b      	add	r3, r1
 800ec1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	4413      	add	r3, r2
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	b21b      	sxth	r3, r3
 800ec28:	86fb      	strh	r3, [r7, #54]	; 0x36
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800ec2a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	4413      	add	r3, r2
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec3e:	b21b      	sxth	r3, r3
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	3b01      	subs	r3, #1
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	b21b      	sxth	r3, r3
 800ec4c:	873b      	strh	r3, [r7, #56]	; 0x38
                draw_area.y2 = draw_area.y1;
 800ec4e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ec52:	877b      	strh	r3, [r7, #58]	; 0x3a
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800ec54:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ec58:	683a      	ldr	r2, [r7, #0]
 800ec5a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800ec5e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800ec60:	6879      	ldr	r1, [r7, #4]
 800ec62:	f7fd f968 	bl	800bf36 <lv_draw_fill>

                /* Fill the gaps
                 * When stepping in y one pixel remains empty on every corner (don't do this on the
                 * first segment ) */
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800ec66:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d02d      	beq.n	800ecca <line_draw_skew+0xcf8>
 800ec6e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec76:	4413      	add	r3, r2
 800ec78:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ec7c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ec80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ec84:	3b01      	subs	r3, #1
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec8a:	440b      	add	r3, r1
 800ec8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d01a      	beq.n	800ecca <line_draw_skew+0xcf8>
 800ec94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec98:	f083 0301 	eor.w	r3, r3, #1
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d013      	beq.n	800ecca <line_draw_skew+0xcf8>
                    lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800eca2:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 800eca6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	1ad3      	subs	r3, r2, r3
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	b219      	sxth	r1, r3
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800ecc0:	9200      	str	r2, [sp, #0]
 800ecc2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	f7fd f89e 	bl	800be06 <lv_draw_px>
            for(i = 0; i < width; i++) {
 800ecca:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800ecd8:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800ecdc:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ece0:	429a      	cmp	r2, r3
 800ece2:	db84      	blt.n	800ebee <line_draw_skew+0xc1c>
                }
            }

#if LV_ANTIALIAS
            if(aa) {
 800ece4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d065      	beq.n	800edb8 <line_draw_skew+0xde6>
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800ecec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ecee:	b21b      	sxth	r3, r3
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ecf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	4413      	add	r3, r2
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	b218      	sxth	r0, r3
 800ed00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ed02:	b21b      	sxth	r3, r3
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	4413      	add	r3, r2
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ed16:	1ad3      	subs	r3, r2, r3
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	b219      	sxth	r1, r3
                                   -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800ed1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed1e:	b21b      	sxth	r3, r3
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	1ad3      	subs	r3, r2, r3
 800ed2c:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800ed2e:	b21a      	sxth	r2, r3
 800ed30:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ed34:	9301      	str	r3, [sp, #4]
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ed3a:	f8ad 3000 	strh.w	r3, [sp]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f7fc fbbd 	bl	800b4be <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800ed44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed46:	b21b      	sxth	r3, r3
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800ed4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed52:	3b01      	subs	r3, #1
 800ed54:	009b      	lsls	r3, r3, #2
 800ed56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed58:	440b      	add	r3, r1
 800ed5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	4413      	add	r3, r2
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	b218      	sxth	r0, r3
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 800ed66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ed68:	b21b      	sxth	r3, r3
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800ed70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed74:	3b01      	subs	r3, #1
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed7a:	440b      	add	r3, r1
 800ed7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	4413      	add	r3, r2
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800ed8a:	4413      	add	r3, r2
 800ed8c:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800ed8e:	b219      	sxth	r1, r3
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ed96:	b29a      	uxth	r2, r3
 800ed98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed9a:	b21b      	sxth	r3, r3
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	1ad3      	subs	r3, r2, r3
 800eda0:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800eda2:	b21a      	sxth	r2, r3
 800eda4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800eda8:	9301      	str	r3, [sp, #4]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800edae:	f8ad 3000 	strh.w	r3, [sp]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f7fc fb83 	bl	800b4be <lv_draw_aa_hor_seg>
                                   mask, style->line.color, opa);
            }
#endif

            first_run = false;
 800edb8:	2300      	movs	r3, #0
 800edba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            prev_p.x = main_line->p_act.x;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800edc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800edcc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        while(line_next_y(main_line)) {
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f000 fbcf 	bl	800f572 <line_next_y>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	f47f af05 	bne.w	800ebe6 <line_draw_skew+0xc14>
        }

        for(i = 0; i < width; i++) {
 800eddc:	2300      	movs	r3, #0
 800edde:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800ede2:	e072      	b.n	800eeca <line_draw_skew+0xef8>
            draw_area.x1 = prev_p.x + pattern[i].x;
 800ede4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ede6:	b21b      	sxth	r3, r3
 800ede8:	b29a      	uxth	r2, r3
 800edea:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800edee:	009b      	lsls	r3, r3, #2
 800edf0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800edf2:	440b      	add	r3, r1
 800edf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	4413      	add	r3, r2
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	b21b      	sxth	r3, r3
 800ee00:	86bb      	strh	r3, [r7, #52]	; 0x34
            draw_area.y1 = prev_p.y + pattern[i].y;
 800ee02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee04:	b21b      	sxth	r3, r3
 800ee06:	b29a      	uxth	r2, r3
 800ee08:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee10:	440b      	add	r3, r1
 800ee12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	4413      	add	r3, r2
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	b21b      	sxth	r3, r3
 800ee1e:	86fb      	strh	r3, [r7, #54]	; 0x36
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800ee20:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	4413      	add	r3, r2
 800ee30:	b29a      	uxth	r2, r3
 800ee32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee34:	b21b      	sxth	r3, r3
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	1ad3      	subs	r3, r2, r3
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	b21b      	sxth	r3, r3
 800ee3e:	873b      	strh	r3, [r7, #56]	; 0x38
            draw_area.y2 = draw_area.y1;
 800ee40:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ee44:	877b      	strh	r3, [r7, #58]	; 0x3a
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800ee46:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ee4a:	683a      	ldr	r2, [r7, #0]
 800ee4c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800ee50:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800ee52:	6879      	ldr	r1, [r7, #4]
 800ee54:	f7fd f86f 	bl	800bf36 <lv_draw_fill>

            /* Fill the gaps
             * When stepping in y one pixel remains empty on every corner */
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800ee58:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d02d      	beq.n	800eebc <line_draw_skew+0xeea>
 800ee60:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee68:	4413      	add	r3, r2
 800ee6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ee6e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ee72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ee76:	3b01      	subs	r3, #1
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee7c:	440b      	add	r3, r1
 800ee7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d01a      	beq.n	800eebc <line_draw_skew+0xeea>
 800ee86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee8a:	f083 0301 	eor.w	r3, r3, #1
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d013      	beq.n	800eebc <line_draw_skew+0xeea>
                lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800ee94:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 800ee98:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	b219      	sxth	r1, r3
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800eeb2:	9200      	str	r2, [sp, #0]
 800eeb4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	f7fc ffa5 	bl	800be06 <lv_draw_px>
        for(i = 0; i < width; i++) {
 800eebc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	3301      	adds	r3, #1
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800eeca:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800eece:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800eed2:	429a      	cmp	r2, r3
 800eed4:	db86      	blt.n	800ede4 <line_draw_skew+0xe12>
            }
        }

#if LV_ANTIALIAS
        if(aa) {
 800eed6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f000 8251 	beq.w	800f382 <line_draw_skew+0x13b0>
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800eee0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eee2:	b21b      	sxth	r3, r3
 800eee4:	b29a      	uxth	r2, r3
 800eee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	4413      	add	r3, r2
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	b218      	sxth	r0, r3
 800eef4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eef6:	b21b      	sxth	r3, r3
 800eef8:	b29a      	uxth	r2, r3
 800eefa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eefc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	4413      	add	r3, r2
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ef0a:	1ad3      	subs	r3, r2, r3
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	b219      	sxth	r1, r3
                               -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ef16:	b29a      	uxth	r2, r3
 800ef18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef1a:	b21b      	sxth	r3, r3
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	1ad3      	subs	r3, r2, r3
 800ef20:	b29b      	uxth	r3, r3
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800ef22:	43db      	mvns	r3, r3
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	b21a      	sxth	r2, r3
 800ef28:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ef2c:	9301      	str	r3, [sp, #4]
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ef32:	f8ad 3000 	strh.w	r3, [sp]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f7fc fac1 	bl	800b4be <lv_draw_aa_hor_seg>
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800ef3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef3e:	b21b      	sxth	r3, r3
 800ef40:	b29a      	uxth	r2, r3
 800ef42:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800ef46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	009b      	lsls	r3, r3, #2
 800ef4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef50:	440b      	add	r3, r1
 800ef52:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	4413      	add	r3, r2
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	b218      	sxth	r0, r3
 800ef5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef60:	b21b      	sxth	r3, r3
 800ef62:	b29a      	uxth	r2, r3
 800ef64:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800ef68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef6c:	3b01      	subs	r3, #1
 800ef6e:	009b      	lsls	r3, r3, #2
 800ef70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef72:	440b      	add	r3, r1
 800ef74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	4413      	add	r3, r2
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800ef82:	4413      	add	r3, r2
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	b219      	sxth	r1, r3
                               main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ef8e:	b29a      	uxth	r2, r3
 800ef90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef92:	b21b      	sxth	r3, r3
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	1ad3      	subs	r3, r2, r3
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	b29b      	uxth	r3, r3
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800ef9e:	b21a      	sxth	r2, r3
 800efa0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800efa4:	9301      	str	r3, [sp, #4]
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800efaa:	f8ad 3000 	strh.w	r3, [sp]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f7fc fa85 	bl	800b4be <lv_draw_aa_hor_seg>
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
        }
#endif
    }
}
 800efb4:	e1e5      	b.n	800f382 <line_draw_skew+0x13b0>
            for(i = 0; i < width; i++) {
 800efb6:	2300      	movs	r3, #0
 800efb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800efbc:	e074      	b.n	800f0a8 <line_draw_skew+0x10d6>
                draw_area.x1 = prev_p.x + pattern[i].x;
 800efbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efc0:	b21b      	sxth	r3, r3
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800efcc:	440b      	add	r3, r1
 800efce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	4413      	add	r3, r2
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	b21b      	sxth	r3, r3
 800efda:	86bb      	strh	r3, [r7, #52]	; 0x34
                draw_area.y1 = prev_p.y + pattern[i].y;
 800efdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efde:	b21b      	sxth	r3, r3
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800efea:	440b      	add	r3, r1
 800efec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	4413      	add	r3, r2
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	b21b      	sxth	r3, r3
 800eff8:	86fb      	strh	r3, [r7, #54]	; 0x36
                draw_area.x2 = draw_area.x1;
 800effa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800effe:	873b      	strh	r3, [r7, #56]	; 0x38
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800f000:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f004:	b29a      	uxth	r2, r3
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	4413      	add	r3, r2
 800f010:	b29a      	uxth	r2, r3
 800f012:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f014:	b21b      	sxth	r3, r3
 800f016:	b29b      	uxth	r3, r3
 800f018:	1ad3      	subs	r3, r2, r3
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	3b01      	subs	r3, #1
 800f01e:	b29b      	uxth	r3, r3
 800f020:	b21b      	sxth	r3, r3
 800f022:	877b      	strh	r3, [r7, #58]	; 0x3a
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800f024:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f028:	683a      	ldr	r2, [r7, #0]
 800f02a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f02e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800f030:	6879      	ldr	r1, [r7, #4]
 800f032:	f7fc ff80 	bl	800bf36 <lv_draw_fill>
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800f036:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d02d      	beq.n	800f09a <line_draw_skew+0x10c8>
 800f03e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f046:	4413      	add	r3, r2
 800f048:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f04c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f050:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f054:	3b01      	subs	r3, #1
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f05a:	440b      	add	r3, r1
 800f05c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f060:	429a      	cmp	r2, r3
 800f062:	d01a      	beq.n	800f09a <line_draw_skew+0x10c8>
 800f064:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f068:	f083 0301 	eor.w	r3, r3, #1
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d013      	beq.n	800f09a <line_draw_skew+0x10c8>
                    lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800f072:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f076:	b29a      	uxth	r2, r3
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f07e:	b29b      	uxth	r3, r3
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	b29b      	uxth	r3, r3
 800f084:	b218      	sxth	r0, r3
 800f086:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800f090:	9200      	str	r2, [sp, #0]
 800f092:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	f7fc feb6 	bl	800be06 <lv_draw_px>
            for(i = 0; i < width; i++) {
 800f09a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f0a8:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800f0ac:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	db84      	blt.n	800efbe <line_draw_skew+0xfec>
            if(aa) {
 800f0b4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d065      	beq.n	800f188 <line_draw_skew+0x11b6>
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800f0bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0be:	b21b      	sxth	r3, r3
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	4413      	add	r3, r2
 800f0cc:	b29a      	uxth	r2, r3
 800f0ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f0d2:	1ad3      	subs	r3, r2, r3
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	b218      	sxth	r0, r3
 800f0d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f0da:	b21b      	sxth	r3, r3
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	4413      	add	r3, r2
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	b219      	sxth	r1, r3
                                   -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 800f0ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f0ee:	b21b      	sxth	r3, r3
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	1ad3      	subs	r3, r2, r3
 800f0fc:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800f0fe:	b21a      	sxth	r2, r3
 800f100:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f104:	9301      	str	r3, [sp, #4]
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f10a:	f8ad 3000 	strh.w	r3, [sp]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f7fc f98c 	bl	800b42c <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800f114:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f116:	b21b      	sxth	r3, r3
 800f118:	b29a      	uxth	r2, r3
 800f11a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f11e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f122:	3b01      	subs	r3, #1
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f128:	440b      	add	r3, r1
 800f12a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f12e:	b29b      	uxth	r3, r3
 800f130:	4413      	add	r3, r2
 800f132:	b29a      	uxth	r2, r3
 800f134:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800f138:	4413      	add	r3, r2
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	b218      	sxth	r0, r3
                                   prev_p.y + pattern[width_safe - 1].y, main_line->p_act.y - prev_p.y, mask,
 800f13e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f140:	b21b      	sxth	r3, r3
 800f142:	b29a      	uxth	r2, r3
 800f144:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f148:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f14c:	3b01      	subs	r3, #1
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f152:	440b      	add	r3, r1
 800f154:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	4413      	add	r3, r2
 800f15c:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800f15e:	b219      	sxth	r1, r3
                                   prev_p.y + pattern[width_safe - 1].y, main_line->p_act.y - prev_p.y, mask,
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f166:	b29a      	uxth	r2, r3
 800f168:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f16a:	b21b      	sxth	r3, r3
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800f172:	b21a      	sxth	r2, r3
 800f174:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f178:	9301      	str	r3, [sp, #4]
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f17e:	f8ad 3000 	strh.w	r3, [sp]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f7fc f952 	bl	800b42c <lv_draw_aa_ver_seg>
            first_run = false;
 800f188:	2300      	movs	r3, #0
 800f18a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            prev_p.x = main_line->p_act.x;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f194:	87bb      	strh	r3, [r7, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f19c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        while(line_next_x(main_line)) {
 800f19e:	68f8      	ldr	r0, [r7, #12]
 800f1a0:	f000 fa05 	bl	800f5ae <line_next_x>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	f47f af05 	bne.w	800efb6 <line_draw_skew+0xfe4>
        for(i = 0; i < width; i++) {
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f1b2:	e072      	b.n	800f29a <line_draw_skew+0x12c8>
            draw_area.x1 = prev_p.x + pattern[i].x;
 800f1b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f1b6:	b21b      	sxth	r3, r3
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f1c2:	440b      	add	r3, r1
 800f1c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	4413      	add	r3, r2
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	b21b      	sxth	r3, r3
 800f1d0:	86bb      	strh	r3, [r7, #52]	; 0x34
            draw_area.y1 = prev_p.y + pattern[i].y;
 800f1d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f1d4:	b21b      	sxth	r3, r3
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f1e0:	440b      	add	r3, r1
 800f1e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	4413      	add	r3, r2
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	b21b      	sxth	r3, r3
 800f1ee:	86fb      	strh	r3, [r7, #54]	; 0x36
            draw_area.x2 = draw_area.x1;
 800f1f0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f1f4:	873b      	strh	r3, [r7, #56]	; 0x38
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800f1f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f202:	b29b      	uxth	r3, r3
 800f204:	4413      	add	r3, r2
 800f206:	b29a      	uxth	r2, r3
 800f208:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f20a:	b21b      	sxth	r3, r3
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	b29b      	uxth	r3, r3
 800f212:	b21b      	sxth	r3, r3
 800f214:	877b      	strh	r3, [r7, #58]	; 0x3a
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800f216:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f21a:	683a      	ldr	r2, [r7, #0]
 800f21c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f220:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800f222:	6879      	ldr	r1, [r7, #4]
 800f224:	f7fc fe87 	bl	800bf36 <lv_draw_fill>
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800f228:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d02d      	beq.n	800f28c <line_draw_skew+0x12ba>
 800f230:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f238:	4413      	add	r3, r2
 800f23a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f23e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f242:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f246:	3b01      	subs	r3, #1
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f24c:	440b      	add	r3, r1
 800f24e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f252:	429a      	cmp	r2, r3
 800f254:	d01a      	beq.n	800f28c <line_draw_skew+0x12ba>
 800f256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f25a:	f083 0301 	eor.w	r3, r3, #1
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	2b00      	cmp	r3, #0
 800f262:	d013      	beq.n	800f28c <line_draw_skew+0x12ba>
                lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800f264:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f268:	b29a      	uxth	r2, r3
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f270:	b29b      	uxth	r3, r3
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	b29b      	uxth	r3, r3
 800f276:	b218      	sxth	r0, r3
 800f278:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800f282:	9200      	str	r2, [sp, #0]
 800f284:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	f7fc fdbd 	bl	800be06 <lv_draw_px>
        for(i = 0; i < width; i++) {
 800f28c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800f290:	b29b      	uxth	r3, r3
 800f292:	3301      	adds	r3, #1
 800f294:	b29b      	uxth	r3, r3
 800f296:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f29a:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800f29e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	db86      	blt.n	800f1b4 <line_draw_skew+0x11e2>
        if(aa) {
 800f2a6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d069      	beq.n	800f382 <line_draw_skew+0x13b0>
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800f2ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f2b0:	b21b      	sxth	r3, r3
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	4413      	add	r3, r2
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f2c4:	1ad3      	subs	r3, r2, r3
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	b218      	sxth	r0, r3
 800f2ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f2cc:	b21b      	sxth	r3, r3
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	4413      	add	r3, r2
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	b219      	sxth	r1, r3
                               -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f2e8:	b21b      	sxth	r3, r3
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	b29b      	uxth	r3, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800f2f0:	43db      	mvns	r3, r3
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	b21a      	sxth	r2, r3
 800f2f6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f2fa:	9301      	str	r3, [sp, #4]
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f300:	f8ad 3000 	strh.w	r3, [sp]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f7fc f891 	bl	800b42c <lv_draw_aa_ver_seg>
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800f30a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f30c:	b21b      	sxth	r3, r3
 800f30e:	b29a      	uxth	r2, r3
 800f310:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f314:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f318:	3b01      	subs	r3, #1
 800f31a:	009b      	lsls	r3, r3, #2
 800f31c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f31e:	440b      	add	r3, r1
 800f320:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f324:	b29b      	uxth	r3, r3
 800f326:	4413      	add	r3, r2
 800f328:	b29a      	uxth	r2, r3
 800f32a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800f32e:	4413      	add	r3, r2
 800f330:	b29b      	uxth	r3, r3
 800f332:	b218      	sxth	r0, r3
 800f334:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f336:	b21b      	sxth	r3, r3
 800f338:	b29a      	uxth	r2, r3
 800f33a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800f33e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f342:	3b01      	subs	r3, #1
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f348:	440b      	add	r3, r1
 800f34a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4413      	add	r3, r2
 800f352:	b29b      	uxth	r3, r3
 800f354:	b219      	sxth	r1, r3
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f35c:	b29a      	uxth	r2, r3
 800f35e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f360:	b21b      	sxth	r3, r3
 800f362:	b29b      	uxth	r3, r3
 800f364:	1ad3      	subs	r3, r2, r3
 800f366:	b29b      	uxth	r3, r3
 800f368:	3301      	adds	r3, #1
 800f36a:	b29b      	uxth	r3, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800f36c:	b21a      	sxth	r2, r3
 800f36e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f372:	9301      	str	r3, [sp, #4]
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f378:	f8ad 3000 	strh.w	r3, [sp]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f7fc f855 	bl	800b42c <lv_draw_aa_ver_seg>
}
 800f382:	bf00      	nop
 800f384:	3770      	adds	r7, #112	; 0x70
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <line_init>:

static void line_init(line_draw_t * line, const lv_point_t * p1, const lv_point_t * p2)
{
 800f38a:	b480      	push	{r7}
 800f38c:	b085      	sub	sp, #20
 800f38e:	af00      	add	r7, sp, #0
 800f390:	60f8      	str	r0, [r7, #12]
 800f392:	60b9      	str	r1, [r7, #8]
 800f394:	607a      	str	r2, [r7, #4]
    line->p1.x = p1->x;
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	801a      	strh	r2, [r3, #0]
    line->p1.y = p1->y;
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	805a      	strh	r2, [r3, #2]
    line->p2.x = p2->x;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	809a      	strh	r2, [r3, #4]
    line->p2.y = p2->y;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	80da      	strh	r2, [r3, #6]

    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3cc:	1ad3      	subs	r3, r2, r3
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	bfb8      	it	lt
 800f3d2:	425b      	neglt	r3, r3
 800f3d4:	b21a      	sxth	r2, r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	819a      	strh	r2, [r3, #12]
    line->sx  = line->p1.x < line->p2.x ? 1 : -1;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	da01      	bge.n	800f3ee <line_init+0x64>
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	e001      	b.n	800f3f2 <line_init+0x68>
 800f3ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	81da      	strh	r2, [r3, #14]
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f404:	1ad3      	subs	r3, r2, r3
 800f406:	2b00      	cmp	r3, #0
 800f408:	bfb8      	it	lt
 800f40a:	425b      	neglt	r3, r3
 800f40c:	b21a      	sxth	r2, r3
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	821a      	strh	r2, [r3, #16]
    line->sy  = line->p1.y < line->p2.y ? 1 : -1;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f41e:	429a      	cmp	r2, r3
 800f420:	da01      	bge.n	800f426 <line_init+0x9c>
 800f422:	2201      	movs	r2, #1
 800f424:	e001      	b.n	800f42a <line_init+0xa0>
 800f426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	825a      	strh	r2, [r3, #18]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	dd07      	ble.n	800f44e <line_init+0xc4>
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f444:	0fda      	lsrs	r2, r3, #31
 800f446:	4413      	add	r3, r2
 800f448:	105b      	asrs	r3, r3, #1
 800f44a:	b21b      	sxth	r3, r3
 800f44c:	e007      	b.n	800f45e <line_init+0xd4>
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f454:	425b      	negs	r3, r3
 800f456:	0fda      	lsrs	r2, r3, #31
 800f458:	4413      	add	r3, r2
 800f45a:	105b      	asrs	r3, r3, #1
 800f45c:	b21b      	sxth	r3, r3
 800f45e:	68fa      	ldr	r2, [r7, #12]
 800f460:	8293      	strh	r3, [r2, #20]
    line->e2  = 0;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2200      	movs	r2, #0
 800f466:	82da      	strh	r2, [r3, #22]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f474:	429a      	cmp	r2, r3
 800f476:	bfcc      	ite	gt
 800f478:	2301      	movgt	r3, #1
 800f47a:	2300      	movle	r3, #0
 800f47c:	b2da      	uxtb	r2, r3
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	761a      	strb	r2, [r3, #24]

    line->p_act.x = line->p1.x;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	811a      	strh	r2, [r3, #8]
    line->p_act.y = line->p1.y;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	815a      	strh	r2, [r3, #10]
}
 800f496:	bf00      	nop
 800f498:	3714      	adds	r7, #20
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr

0800f4a2 <line_next>:

static bool line_next(line_draw_t * line)
{
 800f4a2:	b480      	push	{r7}
 800f4a4:	b083      	sub	sp, #12
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d109      	bne.n	800f4ce <line_next+0x2c>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d101      	bne.n	800f4ce <line_next+0x2c>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	e04b      	b.n	800f566 <line_next+0xc4>
    line->e2 = line->err;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	82da      	strh	r2, [r3, #22]
    if(line->e2 > -line->dx) {
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f4e6:	425b      	negs	r3, r3
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	dd19      	ble.n	800f520 <line_next+0x7e>
        line->err -= line->dy;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f4f2:	b29a      	uxth	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	1ad3      	subs	r3, r2, r3
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	b21a      	sxth	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	829a      	strh	r2, [r3, #20]
        line->p_act.x += line->sx;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f514:	b29b      	uxth	r3, r3
 800f516:	4413      	add	r3, r2
 800f518:	b29b      	uxth	r3, r3
 800f51a:	b21a      	sxth	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	811a      	strh	r2, [r3, #8]
    }
    if(line->e2 < line->dy) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	da19      	bge.n	800f564 <line_next+0xc2>
        line->err += line->dx;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f536:	b29a      	uxth	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f53e:	b29b      	uxth	r3, r3
 800f540:	4413      	add	r3, r2
 800f542:	b29b      	uxth	r3, r3
 800f544:	b21a      	sxth	r2, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	829a      	strh	r2, [r3, #20]
        line->p_act.y += line->sy;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f550:	b29a      	uxth	r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f558:	b29b      	uxth	r3, r3
 800f55a:	4413      	add	r3, r2
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	b21a      	sxth	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	815a      	strh	r2, [r3, #10]
    }
    return true;
 800f564:	2301      	movs	r3, #1
}
 800f566:	4618      	mov	r0, r3
 800f568:	370c      	adds	r7, #12
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <line_next_y>:
 * Iterate until step one in y direction.
 * @param line
 * @return
 */
static bool line_next_y(line_draw_t * line)
{
 800f572:	b580      	push	{r7, lr}
 800f574:	b084      	sub	sp, #16
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
    lv_coord_t last_y = line->p_act.y;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	895b      	ldrh	r3, [r3, #10]
 800f57e:	81fb      	strh	r3, [r7, #14]

    do {
        if(!line_next(line)) return false;
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7ff ff8e 	bl	800f4a2 <line_next>
 800f586:	4603      	mov	r3, r0
 800f588:	f083 0301 	eor.w	r3, r3, #1
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <line_next_y+0x24>
 800f592:	2300      	movs	r3, #0
 800f594:	e007      	b.n	800f5a6 <line_next_y+0x34>
    } while(last_y == line->p_act.y);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f59c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d0ed      	beq.n	800f580 <line_next_y+0xe>

    return true;
 800f5a4:	2301      	movs	r3, #1
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}

0800f5ae <line_next_x>:
 * Iterate until step one in x direction.
 * @param line
 * @return
 */
static bool line_next_x(line_draw_t * line)
{
 800f5ae:	b580      	push	{r7, lr}
 800f5b0:	b084      	sub	sp, #16
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	6078      	str	r0, [r7, #4]
    lv_coord_t last_x = line->p_act.x;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	891b      	ldrh	r3, [r3, #8]
 800f5ba:	81fb      	strh	r3, [r7, #14]

    do {
        if(!line_next(line)) return false;
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f7ff ff70 	bl	800f4a2 <line_next>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	f083 0301 	eor.w	r3, r3, #1
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d001      	beq.n	800f5d2 <line_next_x+0x24>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	e007      	b.n	800f5e2 <line_next_x+0x34>
    } while(last_x == line->p_act.x);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f5d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d0ed      	beq.n	800f5bc <line_next_x+0xe>

    return true;
 800f5e0:	2301      	movs	r3, #1
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <lv_color_mix>:
{
 800f5ea:	b480      	push	{r7}
 800f5ec:	b085      	sub	sp, #20
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	80b8      	strh	r0, [r7, #4]
 800f5f2:	8039      	strh	r1, [r7, #0]
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	70fb      	strb	r3, [r7, #3]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800f5f8:	793b      	ldrb	r3, [r7, #4]
 800f5fa:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	b29a      	uxth	r2, r3
 800f602:	78fb      	ldrb	r3, [r7, #3]
 800f604:	b29b      	uxth	r3, r3
 800f606:	fb12 f303 	smulbb	r3, r2, r3
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	783b      	ldrb	r3, [r7, #0]
 800f60e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800f612:	b2db      	uxtb	r3, r3
 800f614:	b299      	uxth	r1, r3
 800f616:	78fb      	ldrb	r3, [r7, #3]
 800f618:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	fb11 f303 	smulbb	r3, r1, r3
 800f622:	b29b      	uxth	r3, r3
 800f624:	4413      	add	r3, r2
 800f626:	b29b      	uxth	r3, r3
 800f628:	0a1b      	lsrs	r3, r3, #8
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	f003 031f 	and.w	r3, r3, #31
 800f630:	b2da      	uxtb	r2, r3
 800f632:	7a3b      	ldrb	r3, [r7, #8]
 800f634:	f362 03c7 	bfi	r3, r2, #3, #5
 800f638:	723b      	strb	r3, [r7, #8]
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 800f63a:	793b      	ldrb	r3, [r7, #4]
 800f63c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f640:	b2db      	uxtb	r3, r3
 800f642:	b29b      	uxth	r3, r3
 800f644:	00db      	lsls	r3, r3, #3
 800f646:	b29a      	uxth	r2, r3
 800f648:	797b      	ldrb	r3, [r7, #5]
 800f64a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	b29b      	uxth	r3, r3
 800f652:	4413      	add	r3, r2
 800f654:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 800f656:	783b      	ldrb	r3, [r7, #0]
 800f658:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	b29b      	uxth	r3, r3
 800f660:	00db      	lsls	r3, r3, #3
 800f662:	b29a      	uxth	r2, r3
 800f664:	787b      	ldrb	r3, [r7, #1]
 800f666:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	4413      	add	r3, r2
 800f670:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 800f672:	78fb      	ldrb	r3, [r7, #3]
 800f674:	b29b      	uxth	r3, r3
 800f676:	89fa      	ldrh	r2, [r7, #14]
 800f678:	fb12 f303 	smulbb	r3, r2, r3
 800f67c:	b29a      	uxth	r2, r3
 800f67e:	78fb      	ldrb	r3, [r7, #3]
 800f680:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f684:	b29b      	uxth	r3, r3
 800f686:	89b9      	ldrh	r1, [r7, #12]
 800f688:	fb11 f303 	smulbb	r3, r1, r3
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	4413      	add	r3, r2
 800f690:	b29b      	uxth	r3, r3
 800f692:	0a1b      	lsrs	r3, r3, #8
 800f694:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 800f696:	897b      	ldrh	r3, [r7, #10]
 800f698:	08db      	lsrs	r3, r3, #3
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	f003 0307 	and.w	r3, r3, #7
 800f6a0:	b2da      	uxtb	r2, r3
 800f6a2:	7a3b      	ldrb	r3, [r7, #8]
 800f6a4:	f362 0302 	bfi	r3, r2, #0, #3
 800f6a8:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 800f6aa:	897b      	ldrh	r3, [r7, #10]
 800f6ac:	f003 0307 	and.w	r3, r3, #7
 800f6b0:	b2da      	uxtb	r2, r3
 800f6b2:	7a7b      	ldrb	r3, [r7, #9]
 800f6b4:	f362 1347 	bfi	r3, r2, #5, #3
 800f6b8:	727b      	strb	r3, [r7, #9]
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800f6ba:	797b      	ldrb	r3, [r7, #5]
 800f6bc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	78fb      	ldrb	r3, [r7, #3]
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	fb12 f303 	smulbb	r3, r2, r3
 800f6cc:	b29a      	uxth	r2, r3
 800f6ce:	787b      	ldrb	r3, [r7, #1]
 800f6d0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	b299      	uxth	r1, r3
 800f6d8:	78fb      	ldrb	r3, [r7, #3]
 800f6da:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	fb11 f303 	smulbb	r3, r1, r3
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	4413      	add	r3, r2
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	0a1b      	lsrs	r3, r3, #8
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	f003 031f 	and.w	r3, r3, #31
 800f6f2:	b2da      	uxtb	r2, r3
 800f6f4:	7a7b      	ldrb	r3, [r7, #9]
 800f6f6:	f362 0304 	bfi	r3, r2, #0, #5
 800f6fa:	727b      	strb	r3, [r7, #9]
    return ret;
 800f6fc:	893b      	ldrh	r3, [r7, #8]
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3714      	adds	r7, #20
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr

0800f70a <lv_area_copy>:
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b082      	sub	sp, #8
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
 800f712:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 800f714:	2208      	movs	r2, #8
 800f716:	6839      	ldr	r1, [r7, #0]
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f01a fb4b 	bl	8029db4 <memcpy>
}
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <lv_area_get_width>:
{
 800f726:	b480      	push	{r7}
 800f728:	b083      	sub	sp, #12
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f734:	b29a      	uxth	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	1ad3      	subs	r3, r2, r3
 800f740:	b29b      	uxth	r3, r3
 800f742:	3301      	adds	r3, #1
 800f744:	b29b      	uxth	r3, r3
 800f746:	b21b      	sxth	r3, r3
}
 800f748:	4618      	mov	r0, r3
 800f74a:	370c      	adds	r7, #12
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr

0800f754 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f762:	b29a      	uxth	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	b29b      	uxth	r3, r3
 800f770:	3301      	adds	r3, #1
 800f772:	b29b      	uxth	r3, r3
 800f774:	b21b      	sxth	r3, r3
}
 800f776:	4618      	mov	r0, r3
 800f778:	370c      	adds	r7, #12
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr

0800f782 <lv_draw_rect>:
 * @param mask the rectangle will be drawn only in this mask
 * @param style pointer to a style
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_rect(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800f782:	b580      	push	{r7, lr}
 800f784:	b084      	sub	sp, #16
 800f786:	af00      	add	r7, sp, #0
 800f788:	60f8      	str	r0, [r7, #12]
 800f78a:	60b9      	str	r1, [r7, #8]
 800f78c:	607a      	str	r2, [r7, #4]
 800f78e:	70fb      	strb	r3, [r7, #3]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800f790:	68f8      	ldr	r0, [r7, #12]
 800f792:	f7ff ffdf 	bl	800f754 <lv_area_get_height>
 800f796:	4603      	mov	r3, r0
 800f798:	2b00      	cmp	r3, #0
 800f79a:	dd4e      	ble.n	800f83a <lv_draw_rect+0xb8>
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f7ff ffc2 	bl	800f726 <lv_area_get_width>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	dd48      	ble.n	800f83a <lv_draw_rect+0xb8>

#if LV_USE_SHADOW
    if(style->body.shadow.width != 0) {
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d005      	beq.n	800f7be <lv_draw_rect+0x3c>
        lv_draw_shadow(coords, mask, style, opa_scale);
 800f7b2:	78fb      	ldrb	r3, [r7, #3]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	68b9      	ldr	r1, [r7, #8]
 800f7b8:	68f8      	ldr	r0, [r7, #12]
 800f7ba:	f002 ff63 	bl	8012684 <lv_draw_shadow>
    }
#endif

    /* If the object is out of the mask there is nothing to draw.
     * Draw shadow before it because the shadow is out of `coords`*/
    if(lv_area_is_on(coords, mask) == false) return;
 800f7be:	68b9      	ldr	r1, [r7, #8]
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f006 f96e 	bl	8015aa2 <lv_area_is_on>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	f083 0301 	eor.w	r3, r3, #1
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d135      	bne.n	800f83e <lv_draw_rect+0xbc>

    if(style->body.opa > LV_OPA_MIN) {
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	7a1b      	ldrb	r3, [r3, #8]
 800f7d6:	2b10      	cmp	r3, #16
 800f7d8:	d910      	bls.n	800f7fc <lv_draw_rect+0x7a>
        lv_draw_rect_main_mid(coords, mask, style, opa_scale);
 800f7da:	78fb      	ldrb	r3, [r7, #3]
 800f7dc:	687a      	ldr	r2, [r7, #4]
 800f7de:	68b9      	ldr	r1, [r7, #8]
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f000 f830 	bl	800f846 <lv_draw_rect_main_mid>

        if(style->body.radius != 0) {
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d005      	beq.n	800f7fc <lv_draw_rect+0x7a>
            lv_draw_rect_main_corner(coords, mask, style, opa_scale);
 800f7f0:	78fb      	ldrb	r3, [r7, #3]
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	68b9      	ldr	r1, [r7, #8]
 800f7f6:	68f8      	ldr	r0, [r7, #12]
 800f7f8:	f000 f927 	bl	800fa4a <lv_draw_rect_main_corner>
        }
    }

    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d01c      	beq.n	800f840 <lv_draw_rect+0xbe>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	7b9b      	ldrb	r3, [r3, #14]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d018      	beq.n	800f840 <lv_draw_rect+0xbe>
       style->body.border.opa >= LV_OPA_MIN) {
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	7bdb      	ldrb	r3, [r3, #15]
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800f812:	2b0f      	cmp	r3, #15
 800f814:	d914      	bls.n	800f840 <lv_draw_rect+0xbe>
        lv_draw_rect_border_straight(coords, mask, style, opa_scale);
 800f816:	78fb      	ldrb	r3, [r7, #3]
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	68b9      	ldr	r1, [r7, #8]
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f001 f93d 	bl	8010a9c <lv_draw_rect_border_straight>

        if(style->body.radius != 0) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d009      	beq.n	800f840 <lv_draw_rect+0xbe>
            lv_draw_rect_border_corner(coords, mask, style, opa_scale);
 800f82c:	78fb      	ldrb	r3, [r7, #3]
 800f82e:	687a      	ldr	r2, [r7, #4]
 800f830:	68b9      	ldr	r1, [r7, #8]
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f001 fcdf 	bl	80111f6 <lv_draw_rect_border_corner>
 800f838:	e002      	b.n	800f840 <lv_draw_rect+0xbe>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800f83a:	bf00      	nop
 800f83c:	e000      	b.n	800f840 <lv_draw_rect+0xbe>
    if(lv_area_is_on(coords, mask) == false) return;
 800f83e:	bf00      	nop
        }
    }
}
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}

0800f846 <lv_draw_rect_main_mid>:
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_mid(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                  lv_opa_t opa_scale)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b08e      	sub	sp, #56	; 0x38
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	60f8      	str	r0, [r7, #12]
 800f84e:	60b9      	str	r1, [r7, #8]
 800f850:	607a      	str	r2, [r7, #4]
 800f852:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f85a:	863b      	strh	r3, [r7, #48]	; 0x30
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800f85c:	f7fa fde8 	bl	800a430 <lv_refr_get_disp_refreshing>
 800f860:	4603      	mov	r3, r0
 800f862:	4618      	mov	r0, r3
 800f864:	f005 fcb4 	bl	80151d0 <lv_disp_get_antialiasing>
 800f868:	4603      	mov	r3, r0
 800f86a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    lv_color_t mcolor = style->body.main_color;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	885b      	ldrh	r3, [r3, #2]
 800f872:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_color_t gcolor = style->body.grad_color;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	889b      	ldrh	r3, [r3, #4]
 800f878:	843b      	strh	r3, [r7, #32]
    uint8_t mix;
    lv_coord_t height = lv_area_get_height(coords);
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f7ff ff6a 	bl	800f754 <lv_area_get_height>
 800f880:	4603      	mov	r3, r0
 800f882:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_coord_t width  = lv_area_get_width(coords);
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	f7ff ff4e 	bl	800f726 <lv_area_get_width>
 800f88a:	4603      	mov	r3, r0
 800f88c:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800f88e:	78fb      	ldrb	r3, [r7, #3]
 800f890:	2bff      	cmp	r3, #255	; 0xff
 800f892:	d102      	bne.n	800f89a <lv_draw_rect_main_mid+0x54>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	7a1b      	ldrb	r3, [r3, #8]
 800f898:	e00a      	b.n	800f8b0 <lv_draw_rect_main_mid+0x6a>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7a1b      	ldrb	r3, [r3, #8]
 800f89e:	b29a      	uxth	r2, r3
 800f8a0:	78fb      	ldrb	r3, [r7, #3]
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	fb12 f303 	smulbb	r3, r2, r3
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	0a1b      	lsrs	r3, r3, #8
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800f8b4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800f8b8:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800f8bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f003 fdd8 	bl	8013474 <lv_draw_cont_radius_corr>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	863b      	strh	r3, [r7, #48]	; 0x30

    /*If the radius is too big then there is no body*/
    if(radius > height / 2) return;
 800f8c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800f8ca:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800f8ce:	0fd9      	lsrs	r1, r3, #31
 800f8d0:	440b      	add	r3, r1
 800f8d2:	105b      	asrs	r3, r3, #1
 800f8d4:	b21b      	sxth	r3, r3
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	f300 80b3 	bgt.w	800fa42 <lv_draw_rect_main_mid+0x1fc>

    lv_area_t work_area;
    work_area.x1 = coords->x1;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8e2:	833b      	strh	r3, [r7, #24]
    work_area.x2 = coords->x2;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f8ea:	83bb      	strh	r3, [r7, #28]

    if(mcolor.full == gcolor.full) {
 800f8ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8ee:	8c3b      	ldrh	r3, [r7, #32]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d140      	bne.n	800f976 <lv_draw_rect_main_mid+0x130>
        work_area.y1 = coords->y1 + radius;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f8fe:	4413      	add	r3, r2
 800f900:	b29b      	uxth	r3, r3
 800f902:	b21b      	sxth	r3, r3
 800f904:	837b      	strh	r3, [r7, #26]
        work_area.y2 = coords->y2 - radius;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f90c:	b29a      	uxth	r2, r3
 800f90e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	b29b      	uxth	r3, r3
 800f914:	b21b      	sxth	r3, r3
 800f916:	83fb      	strh	r3, [r7, #30]

        if(style->body.radius != 0) {
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d020      	beq.n	800f964 <lv_draw_rect_main_mid+0x11e>

            if(aa) {
 800f922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00e      	beq.n	800f948 <lv_draw_rect_main_mid+0x102>
                work_area.y1 += 2;
 800f92a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f92e:	b29b      	uxth	r3, r3
 800f930:	3302      	adds	r3, #2
 800f932:	b29b      	uxth	r3, r3
 800f934:	b21b      	sxth	r3, r3
 800f936:	837b      	strh	r3, [r7, #26]
                work_area.y2 -= 2;
 800f938:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	3b02      	subs	r3, #2
 800f940:	b29b      	uxth	r3, r3
 800f942:	b21b      	sxth	r3, r3
 800f944:	83fb      	strh	r3, [r7, #30]
 800f946:	e00d      	b.n	800f964 <lv_draw_rect_main_mid+0x11e>
            } else {
                work_area.y1 += 1;
 800f948:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	3301      	adds	r3, #1
 800f950:	b29b      	uxth	r3, r3
 800f952:	b21b      	sxth	r3, r3
 800f954:	837b      	strh	r3, [r7, #26]
                work_area.y2 -= 1;
 800f956:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	3b01      	subs	r3, #1
 800f95e:	b29b      	uxth	r3, r3
 800f960:	b21b      	sxth	r3, r3
 800f962:	83fb      	strh	r3, [r7, #30]
            }
        }

        lv_draw_fill(&work_area, mask, mcolor, opa);
 800f964:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f968:	f107 0018 	add.w	r0, r7, #24
 800f96c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f96e:	68b9      	ldr	r1, [r7, #8]
 800f970:	f7fc fae1 	bl	800bf36 <lv_draw_fill>
 800f974:	e066      	b.n	800fa44 <lv_draw_rect_main_mid+0x1fe>
    } else {
        lv_coord_t row;
        lv_coord_t row_start = coords->y1 + radius;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f980:	4413      	add	r3, r2
 800f982:	b29b      	uxth	r3, r3
 800f984:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_coord_t row_end   = coords->y2 - radius;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f98c:	b29a      	uxth	r2, r3
 800f98e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	b29b      	uxth	r3, r3
 800f994:	867b      	strh	r3, [r7, #50]	; 0x32
        lv_color_t act_color;

        if(style->body.radius != 0) {
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d014      	beq.n	800f9ca <lv_draw_rect_main_mid+0x184>
            if(aa) {
 800f9a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d008      	beq.n	800f9ba <lv_draw_rect_main_mid+0x174>
                row_start += 2;
 800f9a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f9aa:	3302      	adds	r3, #2
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	86bb      	strh	r3, [r7, #52]	; 0x34
                row_end -= 2;
 800f9b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f9b2:	3b02      	subs	r3, #2
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	867b      	strh	r3, [r7, #50]	; 0x32
 800f9b8:	e007      	b.n	800f9ca <lv_draw_rect_main_mid+0x184>
            } else {
                row_start += 1;
 800f9ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f9bc:	3301      	adds	r3, #1
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	86bb      	strh	r3, [r7, #52]	; 0x34
                row_end -= 1;
 800f9c2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	867b      	strh	r3, [r7, #50]	; 0x32
            }
        }
        if(row_start < 0) row_start = 0;
 800f9ca:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	da01      	bge.n	800f9d6 <lv_draw_rect_main_mid+0x190>
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	86bb      	strh	r3, [r7, #52]	; 0x34

        for(row = row_start; row <= row_end; row++) {
 800f9d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f9d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f9da:	e02b      	b.n	800fa34 <lv_draw_rect_main_mid+0x1ee>
            work_area.y1 = row;
 800f9dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f9de:	837b      	strh	r3, [r7, #26]
            work_area.y2 = row;
 800f9e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f9e2:	83fb      	strh	r3, [r7, #30]
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	021b      	lsls	r3, r3, #8
 800f9f8:	1a9a      	subs	r2, r3, r2
 800f9fa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800f9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800fa06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	8c39      	ldrh	r1, [r7, #32]
 800fa0e:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800fa10:	f7ff fdeb 	bl	800f5ea <lv_color_mix>
 800fa14:	4603      	mov	r3, r0
 800fa16:	82bb      	strh	r3, [r7, #20]

            lv_draw_fill(&work_area, mask, act_color, opa);
 800fa18:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fa1c:	f107 0018 	add.w	r0, r7, #24
 800fa20:	8aba      	ldrh	r2, [r7, #20]
 800fa22:	68b9      	ldr	r1, [r7, #8]
 800fa24:	f7fc fa87 	bl	800bf36 <lv_draw_fill>
        for(row = row_start; row <= row_end; row++) {
 800fa28:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	3301      	adds	r3, #1
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	86fb      	strh	r3, [r7, #54]	; 0x36
 800fa34:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800fa38:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	ddcd      	ble.n	800f9dc <lv_draw_rect_main_mid+0x196>
 800fa40:	e000      	b.n	800fa44 <lv_draw_rect_main_mid+0x1fe>
    if(radius > height / 2) return;
 800fa42:	bf00      	nop
        }
    }
}
 800fa44:	3738      	adds	r7, #56	; 0x38
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <lv_draw_rect_main_corner>:
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                     lv_opa_t opa_scale)
{
 800fa4a:	b5b0      	push	{r4, r5, r7, lr}
 800fa4c:	b0a4      	sub	sp, #144	; 0x90
 800fa4e:	af02      	add	r7, sp, #8
 800fa50:	60f8      	str	r0, [r7, #12]
 800fa52:	60b9      	str	r1, [r7, #8]
 800fa54:	607a      	str	r2, [r7, #4]
 800fa56:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fa5e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800fa62:	f7fa fce5 	bl	800a430 <lv_refr_get_disp_refreshing>
 800fa66:	4603      	mov	r3, r0
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f005 fbb1 	bl	80151d0 <lv_disp_get_antialiasing>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    lv_color_t mcolor = style->body.main_color;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	885b      	ldrh	r3, [r3, #2]
 800fa78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    lv_color_t gcolor = style->body.grad_color;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	889b      	ldrh	r3, [r3, #4]
 800fa80:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    lv_color_t act_color;
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800fa84:	78fb      	ldrb	r3, [r7, #3]
 800fa86:	2bff      	cmp	r3, #255	; 0xff
 800fa88:	d102      	bne.n	800fa90 <lv_draw_rect_main_corner+0x46>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	7a1b      	ldrb	r3, [r3, #8]
 800fa8e:	e00a      	b.n	800faa6 <lv_draw_rect_main_corner+0x5c>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	7a1b      	ldrb	r3, [r3, #8]
 800fa94:	b29a      	uxth	r2, r3
 800fa96:	78fb      	ldrb	r3, [r7, #3]
 800fa98:	b29b      	uxth	r3, r3
 800fa9a:	fb12 f303 	smulbb	r3, r2, r3
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	0a1b      	lsrs	r3, r3, #8
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    uint8_t mix;
    lv_coord_t height = lv_area_get_height(coords);
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f7ff fe52 	bl	800f754 <lv_area_get_height>
 800fab0:	4603      	mov	r3, r0
 800fab2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    lv_coord_t width  = lv_area_get_width(coords);
 800fab6:	68f8      	ldr	r0, [r7, #12]
 800fab8:	f7ff fe35 	bl	800f726 <lv_area_get_width>
 800fabc:	4603      	mov	r3, r0
 800fabe:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800fac2:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800fac6:	f9b7 1072 	ldrsh.w	r1, [r7, #114]	; 0x72
 800faca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800face:	4618      	mov	r0, r3
 800fad0:	f003 fcd0 	bl	8013474 <lv_draw_cont_radius_corr>
 800fad4:	4603      	mov	r3, r0
 800fad6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    lv_point_t lt_origo; /*Left  Top    origo*/
    lv_point_t lb_origo; /*Left  Bottom origo*/
    lv_point_t rt_origo; /*Right Top    origo*/
    lv_point_t rb_origo; /*Left  Bottom origo*/

    lt_origo.x = coords->x1 + radius + aa;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fae6:	4413      	add	r3, r2
 800fae8:	b29a      	uxth	r2, r3
 800faea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800faee:	b29b      	uxth	r3, r3
 800faf0:	4413      	add	r3, r2
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	b21b      	sxth	r3, r3
 800faf6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    lt_origo.y = coords->y1 + radius + aa;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fb00:	b29a      	uxth	r2, r3
 800fb02:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fb06:	4413      	add	r3, r2
 800fb08:	b29a      	uxth	r2, r3
 800fb0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	4413      	add	r3, r2
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	b21b      	sxth	r3, r3
 800fb16:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    lb_origo.x = coords->x1 + radius + aa;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fb26:	4413      	add	r3, r2
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	4413      	add	r3, r2
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	b21b      	sxth	r3, r3
 800fb36:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fb46:	1ad3      	subs	r3, r2, r3
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	1ad3      	subs	r3, r2, r3
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	b21b      	sxth	r3, r3
 800fb56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    rt_origo.x = coords->x2 - radius - aa;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fb66:	1ad3      	subs	r3, r2, r3
 800fb68:	b29a      	uxth	r2, r3
 800fb6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	1ad3      	subs	r3, r2, r3
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	b21b      	sxth	r3, r3
 800fb76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    rt_origo.y = coords->y1 + radius + aa;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fb86:	4413      	add	r3, r2
 800fb88:	b29a      	uxth	r2, r3
 800fb8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	4413      	add	r3, r2
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	b21b      	sxth	r3, r3
 800fb96:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    rb_origo.x = coords->x2 - radius - aa;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fba0:	b29a      	uxth	r2, r3
 800fba2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fba6:	1ad3      	subs	r3, r2, r3
 800fba8:	b29a      	uxth	r2, r3
 800fbaa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	1ad3      	subs	r3, r2, r3
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	b21b      	sxth	r3, r3
 800fbb6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    rb_origo.y = coords->y2 - radius - aa;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	1ad3      	subs	r3, r2, r3
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	b21b      	sxth	r3, r3
 800fbd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    lv_area_t mid_bot_area;
    lv_area_t edge_bot_area;

    lv_point_t cir;
    lv_coord_t cir_tmp;
    lv_circ_init(&cir, &cir_tmp, radius);
 800fbda:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 800fbde:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800fbe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f005 ffb9 	bl	8015b5e <lv_circ_init>

    /*Init the areas*/
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800fbec:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	1ad3      	subs	r3, r2, r3
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	b219      	sxth	r1, r3
 800fbfe:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	4413      	add	r3, r2
 800fc0c:	b29b      	uxth	r3, r3
 800fc0e:	b21c      	sxth	r4, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800fc10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800fc14:	b29a      	uxth	r2, r3
 800fc16:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	4413      	add	r3, r2
 800fc1e:	b29b      	uxth	r3, r3
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800fc20:	b21d      	sxth	r5, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800fc22:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc2c:	b29b      	uxth	r3, r3
 800fc2e:	4413      	add	r3, r2
 800fc30:	b29b      	uxth	r3, r3
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800fc32:	b21b      	sxth	r3, r3
 800fc34:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	462b      	mov	r3, r5
 800fc3c:	4622      	mov	r2, r4
 800fc3e:	f005 fddb 	bl	80157f8 <lv_area_set>

    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800fc42:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	1ad3      	subs	r3, r2, r3
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	b219      	sxth	r1, r3
 800fc54:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800fc58:	b29a      	uxth	r2, r3
 800fc5a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	4413      	add	r3, r2
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	b21c      	sxth	r4, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800fc66:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	4413      	add	r3, r2
 800fc74:	b29b      	uxth	r3, r3
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800fc76:	b21d      	sxth	r5, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800fc78:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fc7c:	b29a      	uxth	r2, r3
 800fc7e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	4413      	add	r3, r2
 800fc86:	b29b      	uxth	r3, r3
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800fc88:	b21b      	sxth	r3, r3
 800fc8a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	462b      	mov	r3, r5
 800fc92:	4622      	mov	r2, r4
 800fc94:	f005 fdb0 	bl	80157f8 <lv_area_set>

    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800fc98:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800fc9c:	b29a      	uxth	r2, r3
 800fc9e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	b219      	sxth	r1, r3
 800fcaa:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	1ad3      	subs	r3, r2, r3
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	b21c      	sxth	r4, r3
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800fcbc:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800fcc0:	b29a      	uxth	r2, r3
 800fcc2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	4413      	add	r3, r2
 800fcca:	b29b      	uxth	r3, r3
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800fccc:	b21d      	sxth	r5, r3
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800fcce:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcd8:	b29b      	uxth	r3, r3
 800fcda:	1ad3      	subs	r3, r2, r3
 800fcdc:	b29b      	uxth	r3, r3
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800fcde:	b21b      	sxth	r3, r3
 800fce0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800fce4:	9300      	str	r3, [sp, #0]
 800fce6:	462b      	mov	r3, r5
 800fce8:	4622      	mov	r2, r4
 800fcea:	f005 fd85 	bl	80157f8 <lv_area_set>

    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800fcee:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800fcf2:	b29a      	uxth	r2, r3
 800fcf4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	1ad3      	subs	r3, r2, r3
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	b219      	sxth	r1, r3
 800fd00:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800fd04:	b29a      	uxth	r2, r3
 800fd06:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	1ad3      	subs	r3, r2, r3
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	b21c      	sxth	r4, r3
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800fd12:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	4413      	add	r3, r2
 800fd20:	b29b      	uxth	r3, r3
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800fd22:	b21d      	sxth	r5, r3
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800fd24:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	b29b      	uxth	r3, r3
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800fd34:	b21b      	sxth	r3, r3
 800fd36:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800fd3a:	9300      	str	r3, [sp, #0]
 800fd3c:	462b      	mov	r3, r5
 800fd3e:	4622      	mov	r2, r4
 800fd40:	f005 fd5a 	bl	80157f8 <lv_area_set>
#if LV_ANTIALIAS
    /*Store some internal states for anti-aliasing*/
    lv_coord_t out_y_seg_start = 0;
 800fd44:	2300      	movs	r3, #0
 800fd46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    lv_coord_t out_y_seg_end   = 0;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    lv_coord_t out_x_last      = radius;
 800fd50:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fd54:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    lv_color_t aa_color_hor_top;
    lv_color_t aa_color_hor_bottom;
    lv_color_t aa_color_ver;
#endif

    while(lv_circ_cont(&cir)) {
 800fd58:	e367      	b.n	801042a <lv_draw_rect_main_corner+0x9e0>
#if LV_ANTIALIAS
        if(aa) {
 800fd5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f000 8197 	beq.w	8010092 <lv_draw_rect_main_corner+0x648>
            /*New step in y on the outter circle*/
            if(out_x_last != cir.x) {
 800fd64:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fd68:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	f000 8190 	beq.w	8010092 <lv_draw_rect_main_corner+0x648>
                out_y_seg_end       = cir.y;
 800fd72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd74:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800fd78:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800fd7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800fd80:	1ad3      	subs	r3, r2, r3
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                lv_point_t aa_p;

                aa_p.x = out_x_last;
 800fd88:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800fd8c:	833b      	strh	r3, [r7, #24]
                aa_p.y = out_y_seg_start;
 800fd8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800fd92:	837b      	strh	r3, [r7, #26]

                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800fd94:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800fd98:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800fd9c:	1ad3      	subs	r3, r2, r3
 800fd9e:	461a      	mov	r2, r3
 800fda0:	4613      	mov	r3, r2
 800fda2:	021b      	lsls	r3, r3, #8
 800fda4:	1a9a      	subs	r2, r3, r2
 800fda6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800fdaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800fdb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800fdbc:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800fdc0:	f7ff fc13 	bl	800f5ea <lv_color_mix>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	84bb      	strh	r3, [r7, #36]	; 0x24
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800fdc8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fdcc:	461a      	mov	r2, r3
 800fdce:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800fdd2:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800fdd6:	f7ff fc08 	bl	800f5ea <lv_color_mix>
 800fdda:	4603      	mov	r3, r0
 800fddc:	843b      	strh	r3, [r7, #32]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 800fdde:	2300      	movs	r3, #0
 800fde0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800fde4:	e147      	b.n	8010076 <lv_draw_rect_main_corner+0x62c>
                    lv_opa_t aa_opa;
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800fde6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800fdea:	2b01      	cmp	r3, #1
 800fdec:	dd0c      	ble.n	800fe08 <lv_draw_rect_main_corner+0x3be>
                                                                           on the first segment*/
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800fdee:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800fdf2:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 800fdf6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f003 fb7c 	bl	80134f8 <antialias_get_opa_circ>
 800fe00:	4603      	mov	r3, r0
 800fe02:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800fe06:	e00f      	b.n	800fe28 <lv_draw_rect_main_corner+0x3de>
                    } else {
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800fe08:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800fe0c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 800fe10:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7fb facf 	bl	800b3b8 <lv_draw_aa_get_opa>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fe22:	1a9b      	subs	r3, r3, r2
 800fe24:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                    }

                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800fe28:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	4413      	add	r3, r2
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800fe3c:	4413      	add	r3, r2
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	b218      	sxth	r0, r3
 800fe42:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fe46:	b29a      	uxth	r2, r3
 800fe48:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	4413      	add	r3, r2
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	3301      	adds	r3, #1
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	b219      	sxth	r1, r3
 800fe58:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	8c3b      	ldrh	r3, [r7, #32]
 800fe60:	68ba      	ldr	r2, [r7, #8]
 800fe62:	f7fb ffd0 	bl	800be06 <lv_draw_px>
                               aa_color_hor_bottom, aa_opa);
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800fe66:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800fe7a:	1ad3      	subs	r3, r2, r3
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	b218      	sxth	r0, r3
 800fe80:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	4413      	add	r3, r2
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	3301      	adds	r3, #1
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	b219      	sxth	r1, r3
 800fe96:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	8c3b      	ldrh	r3, [r7, #32]
 800fe9e:	68ba      	ldr	r2, [r7, #8]
 800fea0:	f7fb ffb1 	bl	800be06 <lv_draw_px>
                               aa_color_hor_bottom, aa_opa);
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800fea4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800fea8:	b29a      	uxth	r2, r3
 800feaa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800feae:	b29b      	uxth	r3, r3
 800feb0:	1ad3      	subs	r3, r2, r3
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800feb8:	1ad3      	subs	r3, r2, r3
 800feba:	b29b      	uxth	r3, r3
 800febc:	b218      	sxth	r0, r3
 800febe:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800fec8:	b29b      	uxth	r3, r3
 800feca:	1ad3      	subs	r3, r2, r3
 800fecc:	b29b      	uxth	r3, r3
 800fece:	3b01      	subs	r3, #1
 800fed0:	b29b      	uxth	r3, r3
 800fed2:	b219      	sxth	r1, r3
 800fed4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fed8:	9300      	str	r3, [sp, #0]
 800feda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fedc:	68ba      	ldr	r2, [r7, #8]
 800fede:	f7fb ff92 	bl	800be06 <lv_draw_px>
                               aa_color_hor_top, aa_opa);
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800fee2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800feec:	b29b      	uxth	r3, r3
 800feee:	4413      	add	r3, r2
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800fef6:	4413      	add	r3, r2
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	b218      	sxth	r0, r3
 800fefc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800ff00:	b29a      	uxth	r2, r3
 800ff02:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	3b01      	subs	r3, #1
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	b219      	sxth	r1, r3
 800ff12:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ff16:	9300      	str	r3, [sp, #0]
 800ff18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff1a:	68ba      	ldr	r2, [r7, #8]
 800ff1c:	f7fb ff73 	bl	800be06 <lv_draw_px>
                               aa_color_hor_top, aa_opa);

                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800ff20:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800ff24:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800ff28:	1ad2      	subs	r2, r2, r3
 800ff2a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800ff2e:	4413      	add	r3, r2
 800ff30:	461a      	mov	r2, r3
 800ff32:	4613      	mov	r3, r2
 800ff34:	021b      	lsls	r3, r3, #8
 800ff36:	1a9a      	subs	r2, r3, r2
 800ff38:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800ff3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800ff44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ff48:	461a      	mov	r2, r3
 800ff4a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800ff4e:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800ff52:	f7ff fb4a 	bl	800f5ea <lv_color_mix>
 800ff56:	4603      	mov	r3, r0
 800ff58:	83bb      	strh	r3, [r7, #28]
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800ff5a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800ff5e:	b29a      	uxth	r2, r3
 800ff60:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	4413      	add	r3, r2
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	b218      	sxth	r0, r3
 800ff70:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	4413      	add	r3, r2
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800ff84:	4413      	add	r3, r2
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	b219      	sxth	r1, r3
 800ff8a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ff8e:	9300      	str	r3, [sp, #0]
 800ff90:	8bbb      	ldrh	r3, [r7, #28]
 800ff92:	68ba      	ldr	r2, [r7, #8]
 800ff94:	f7fb ff37 	bl	800be06 <lv_draw_px>
                               aa_color_ver, aa_opa);
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800ff98:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800ff9c:	b29a      	uxth	r2, r3
 800ff9e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ffa2:	b29b      	uxth	r3, r3
 800ffa4:	1ad3      	subs	r3, r2, r3
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	3b01      	subs	r3, #1
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	b218      	sxth	r0, r3
 800ffae:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	4413      	add	r3, r2
 800ffbc:	b29a      	uxth	r2, r3
 800ffbe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800ffc2:	4413      	add	r3, r2
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	b219      	sxth	r1, r3
 800ffc8:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	8bbb      	ldrh	r3, [r7, #28]
 800ffd0:	68ba      	ldr	r2, [r7, #8]
 800ffd2:	f7fb ff18 	bl	800be06 <lv_draw_px>
                               aa_color_ver, aa_opa);

                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800ffd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ffda:	461a      	mov	r2, r3
 800ffdc:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800ffe0:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800ffe4:	f7ff fb01 	bl	800f5ea <lv_color_mix>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	83bb      	strh	r3, [r7, #28]
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800ffec:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800fff0:	b29a      	uxth	r2, r3
 800fff2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	1ad3      	subs	r3, r2, r3
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	3b01      	subs	r3, #1
 800fffe:	b29b      	uxth	r3, r3
 8010000:	b218      	sxth	r0, r3
 8010002:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8010006:	b29a      	uxth	r2, r3
 8010008:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801000c:	b29b      	uxth	r3, r3
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	b29a      	uxth	r2, r3
 8010012:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	b29b      	uxth	r3, r3
 801001a:	b219      	sxth	r1, r3
 801001c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	8bbb      	ldrh	r3, [r7, #28]
 8010024:	68ba      	ldr	r2, [r7, #8]
 8010026:	f7fb feee 	bl	800be06 <lv_draw_px>
                               aa_color_ver, aa_opa);
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 801002a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801002e:	b29a      	uxth	r2, r3
 8010030:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010034:	b29b      	uxth	r3, r3
 8010036:	4413      	add	r3, r2
 8010038:	b29b      	uxth	r3, r3
 801003a:	3301      	adds	r3, #1
 801003c:	b29b      	uxth	r3, r3
 801003e:	b218      	sxth	r0, r3
 8010040:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8010044:	b29a      	uxth	r2, r3
 8010046:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801004a:	b29b      	uxth	r3, r3
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	b29a      	uxth	r2, r3
 8010050:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010054:	1ad3      	subs	r3, r2, r3
 8010056:	b29b      	uxth	r3, r3
 8010058:	b219      	sxth	r1, r3
 801005a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801005e:	9300      	str	r3, [sp, #0]
 8010060:	8bbb      	ldrh	r3, [r7, #28]
 8010062:	68ba      	ldr	r2, [r7, #8]
 8010064:	f7fb fecf 	bl	800be06 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 8010068:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801006c:	b29b      	uxth	r3, r3
 801006e:	3301      	adds	r3, #1
 8010070:	b29b      	uxth	r3, r3
 8010072:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8010076:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
 801007a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801007e:	429a      	cmp	r2, r3
 8010080:	f6ff aeb1 	blt.w	800fde6 <lv_draw_rect_main_corner+0x39c>
                               aa_color_ver, aa_opa);
                }

                out_x_last      = cir.x;
 8010084:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010086:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
                out_y_seg_start = out_y_seg_end;
 801008a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 801008e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
            }
        }
#endif
        uint8_t edge_top_refr = 0;
 8010092:	2300      	movs	r3, #0
 8010094:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        uint8_t mid_top_refr  = 0;
 8010098:	2300      	movs	r3, #0
 801009a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        uint8_t mid_bot_refr  = 0;
 801009e:	2300      	movs	r3, #0
 80100a0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        uint8_t edge_bot_refr = 0;
 80100a4:	2300      	movs	r3, #0
 80100a6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

        /* If a new row coming draw the previous
         * The y coordinate can remain the same so wait for a new*/
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 80100aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80100ae:	461a      	mov	r2, r3
 80100b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80100b4:	4619      	mov	r1, r3
 80100b6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80100ba:	440b      	add	r3, r1
 80100bc:	429a      	cmp	r2, r3
 80100be:	d002      	beq.n	80100c6 <lv_draw_rect_main_corner+0x67c>
 80100c0:	2301      	movs	r3, #1
 80100c2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 80100c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80100ca:	461a      	mov	r2, r3
 80100cc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80100d0:	4619      	mov	r1, r3
 80100d2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80100d6:	440b      	add	r3, r1
 80100d8:	429a      	cmp	r2, r3
 80100da:	d002      	beq.n	80100e2 <lv_draw_rect_main_corner+0x698>
 80100dc:	2301      	movs	r3, #1
 80100de:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 80100e2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80100e6:	461a      	mov	r2, r3
 80100e8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80100ec:	4619      	mov	r1, r3
 80100ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80100f2:	1acb      	subs	r3, r1, r3
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d002      	beq.n	80100fe <lv_draw_rect_main_corner+0x6b4>
 80100f8:	2301      	movs	r3, #1
 80100fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 80100fe:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010102:	461a      	mov	r2, r3
 8010104:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8010108:	4619      	mov	r1, r3
 801010a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801010e:	1acb      	subs	r3, r1, r3
 8010110:	429a      	cmp	r2, r3
 8010112:	d002      	beq.n	801011a <lv_draw_rect_main_corner+0x6d0>
 8010114:	2301      	movs	r3, #1
 8010116:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

        /*Draw the areas which are not disabled*/
        if(edge_top_refr != 0) {
 801011a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801011e:	2b00      	cmp	r3, #0
 8010120:	d030      	beq.n	8010184 <lv_draw_rect_main_corner+0x73a>
            if(mcolor.full == gcolor.full)
 8010122:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010126:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801012a:	429a      	cmp	r2, r3
 801012c:	d104      	bne.n	8010138 <lv_draw_rect_main_corner+0x6ee>
                act_color = mcolor;
 801012e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010132:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010136:	e01c      	b.n	8010172 <lv_draw_rect_main_corner+0x728>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801013e:	461a      	mov	r2, r3
 8010140:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	461a      	mov	r2, r3
 8010148:	4613      	mov	r3, r2
 801014a:	021b      	lsls	r3, r3, #8
 801014c:	1a9a      	subs	r2, r3, r2
 801014e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010152:	fbb2 f3f3 	udiv	r3, r2, r3
 8010156:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 801015a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801015e:	461a      	mov	r2, r3
 8010160:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010164:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010168:	f7ff fa3f 	bl	800f5ea <lv_color_mix>
 801016c:	4603      	mov	r3, r0
 801016e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8010172:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010176:	f107 0044 	add.w	r0, r7, #68	; 0x44
 801017a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801017e:	68b9      	ldr	r1, [r7, #8]
 8010180:	f7fb fed9 	bl	800bf36 <lv_draw_fill>
        }

        if(mid_top_refr != 0) {
 8010184:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010188:	2b00      	cmp	r3, #0
 801018a:	d030      	beq.n	80101ee <lv_draw_rect_main_corner+0x7a4>
            if(mcolor.full == gcolor.full)
 801018c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010190:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010194:	429a      	cmp	r2, r3
 8010196:	d104      	bne.n	80101a2 <lv_draw_rect_main_corner+0x758>
                act_color = mcolor;
 8010198:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801019c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80101a0:	e01c      	b.n	80101dc <lv_draw_rect_main_corner+0x792>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80101a8:	461a      	mov	r2, r3
 80101aa:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80101ae:	1ad3      	subs	r3, r2, r3
 80101b0:	461a      	mov	r2, r3
 80101b2:	4613      	mov	r3, r2
 80101b4:	021b      	lsls	r3, r3, #8
 80101b6:	1a9a      	subs	r2, r3, r2
 80101b8:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80101bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80101c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80101c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80101c8:	461a      	mov	r2, r3
 80101ca:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80101ce:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 80101d2:	f7ff fa0a 	bl	800f5ea <lv_color_mix>
 80101d6:	4603      	mov	r3, r0
 80101d8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 80101dc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80101e0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80101e4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80101e8:	68b9      	ldr	r1, [r7, #8]
 80101ea:	f7fb fea4 	bl	800bf36 <lv_draw_fill>
        }

        if(mid_bot_refr != 0) {
 80101ee:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d030      	beq.n	8010258 <lv_draw_rect_main_corner+0x80e>
            if(mcolor.full == gcolor.full)
 80101f6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80101fa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80101fe:	429a      	cmp	r2, r3
 8010200:	d104      	bne.n	801020c <lv_draw_rect_main_corner+0x7c2>
                act_color = mcolor;
 8010202:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010206:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 801020a:	e01c      	b.n	8010246 <lv_draw_rect_main_corner+0x7fc>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010212:	461a      	mov	r2, r3
 8010214:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010218:	1ad3      	subs	r3, r2, r3
 801021a:	461a      	mov	r2, r3
 801021c:	4613      	mov	r3, r2
 801021e:	021b      	lsls	r3, r3, #8
 8010220:	1a9a      	subs	r2, r3, r2
 8010222:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010226:	fbb2 f3f3 	udiv	r3, r2, r3
 801022a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 801022e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010232:	461a      	mov	r2, r3
 8010234:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010238:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 801023c:	f7ff f9d5 	bl	800f5ea <lv_color_mix>
 8010240:	4603      	mov	r3, r0
 8010242:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8010246:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801024a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801024e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010252:	68b9      	ldr	r1, [r7, #8]
 8010254:	f7fb fe6f 	bl	800bf36 <lv_draw_fill>
        }

        if(edge_bot_refr != 0) {
 8010258:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 801025c:	2b00      	cmp	r3, #0
 801025e:	d030      	beq.n	80102c2 <lv_draw_rect_main_corner+0x878>

            if(mcolor.full == gcolor.full)
 8010260:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010264:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010268:	429a      	cmp	r2, r3
 801026a:	d104      	bne.n	8010276 <lv_draw_rect_main_corner+0x82c>
                act_color = mcolor;
 801026c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010270:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010274:	e01c      	b.n	80102b0 <lv_draw_rect_main_corner+0x866>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801027c:	461a      	mov	r2, r3
 801027e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010282:	1ad3      	subs	r3, r2, r3
 8010284:	461a      	mov	r2, r3
 8010286:	4613      	mov	r3, r2
 8010288:	021b      	lsls	r3, r3, #8
 801028a:	1a9a      	subs	r2, r3, r2
 801028c:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8010290:	fbb2 f3f3 	udiv	r3, r2, r3
 8010294:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8010298:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801029c:	461a      	mov	r2, r3
 801029e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80102a2:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 80102a6:	f7ff f9a0 	bl	800f5ea <lv_color_mix>
 80102aa:	4603      	mov	r3, r0
 80102ac:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 80102b0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80102b4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80102b8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80102bc:	68b9      	ldr	r1, [r7, #8]
 80102be:	f7fb fe3a 	bl	800bf36 <lv_draw_fill>
        }

        /*Save the current coordinates*/
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80102c2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	b219      	sxth	r1, r3
 80102d4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80102d8:	b29a      	uxth	r2, r3
 80102da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80102de:	b29b      	uxth	r3, r3
 80102e0:	4413      	add	r3, r2
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	b21c      	sxth	r4, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 80102e6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	4413      	add	r3, r2
 80102f4:	b29b      	uxth	r3, r3
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80102f6:	b21d      	sxth	r5, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 80102f8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80102fc:	b29a      	uxth	r2, r3
 80102fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010302:	b29b      	uxth	r3, r3
 8010304:	4413      	add	r3, r2
 8010306:	b29b      	uxth	r3, r3
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8010308:	b21b      	sxth	r3, r3
 801030a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	462b      	mov	r3, r5
 8010312:	4622      	mov	r2, r4
 8010314:	f005 fa70 	bl	80157f8 <lv_area_set>

        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8010318:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801031c:	b29a      	uxth	r2, r3
 801031e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010322:	b29b      	uxth	r3, r3
 8010324:	1ad3      	subs	r3, r2, r3
 8010326:	b29b      	uxth	r3, r3
 8010328:	b219      	sxth	r1, r3
 801032a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801032e:	b29a      	uxth	r2, r3
 8010330:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010334:	b29b      	uxth	r3, r3
 8010336:	4413      	add	r3, r2
 8010338:	b29b      	uxth	r3, r3
 801033a:	b21c      	sxth	r4, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 801033c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010340:	b29a      	uxth	r2, r3
 8010342:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010346:	b29b      	uxth	r3, r3
 8010348:	4413      	add	r3, r2
 801034a:	b29b      	uxth	r3, r3
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 801034c:	b21d      	sxth	r5, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 801034e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010352:	b29a      	uxth	r2, r3
 8010354:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010358:	b29b      	uxth	r3, r3
 801035a:	4413      	add	r3, r2
 801035c:	b29b      	uxth	r3, r3
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 801035e:	b21b      	sxth	r3, r3
 8010360:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010364:	9300      	str	r3, [sp, #0]
 8010366:	462b      	mov	r3, r5
 8010368:	4622      	mov	r2, r4
 801036a:	f005 fa45 	bl	80157f8 <lv_area_set>

        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 801036e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8010372:	b29a      	uxth	r2, r3
 8010374:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010378:	b29b      	uxth	r3, r3
 801037a:	1ad3      	subs	r3, r2, r3
 801037c:	b29b      	uxth	r3, r3
 801037e:	b219      	sxth	r1, r3
 8010380:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8010384:	b29a      	uxth	r2, r3
 8010386:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801038a:	b29b      	uxth	r3, r3
 801038c:	1ad3      	subs	r3, r2, r3
 801038e:	b29b      	uxth	r3, r3
 8010390:	b21c      	sxth	r4, r3
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8010392:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8010396:	b29a      	uxth	r2, r3
 8010398:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801039c:	b29b      	uxth	r3, r3
 801039e:	4413      	add	r3, r2
 80103a0:	b29b      	uxth	r3, r3
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 80103a2:	b21d      	sxth	r5, r3
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 80103a4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	1ad3      	subs	r3, r2, r3
 80103b2:	b29b      	uxth	r3, r3
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 80103b4:	b21b      	sxth	r3, r3
 80103b6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80103ba:	9300      	str	r3, [sp, #0]
 80103bc:	462b      	mov	r3, r5
 80103be:	4622      	mov	r2, r4
 80103c0:	f005 fa1a 	bl	80157f8 <lv_area_set>

        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 80103c4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	b219      	sxth	r1, r3
 80103d6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80103da:	b29a      	uxth	r2, r3
 80103dc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	b21c      	sxth	r4, r3
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 80103e8:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	4413      	add	r3, r2
 80103f6:	b29b      	uxth	r3, r3
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 80103f8:	b21d      	sxth	r5, r3
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 80103fa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80103fe:	b29a      	uxth	r2, r3
 8010400:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010404:	b29b      	uxth	r3, r3
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	b29b      	uxth	r3, r3
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 801040a:	b21b      	sxth	r3, r3
 801040c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	462b      	mov	r3, r5
 8010414:	4622      	mov	r2, r4
 8010416:	f005 f9ef 	bl	80157f8 <lv_area_set>

        lv_circ_next(&cir, &cir_tmp);
 801041a:	f107 0226 	add.w	r2, r7, #38	; 0x26
 801041e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010422:	4611      	mov	r1, r2
 8010424:	4618      	mov	r0, r3
 8010426:	f005 fbc9 	bl	8015bbc <lv_circ_next>
    while(lv_circ_cont(&cir)) {
 801042a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801042e:	4618      	mov	r0, r3
 8010430:	f005 fbaf 	bl	8015b92 <lv_circ_cont>
 8010434:	4603      	mov	r3, r0
 8010436:	2b00      	cmp	r3, #0
 8010438:	f47f ac8f 	bne.w	800fd5a <lv_draw_rect_main_corner+0x310>
    }

    if(mcolor.full == gcolor.full)
 801043c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010440:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010444:	429a      	cmp	r2, r3
 8010446:	d104      	bne.n	8010452 <lv_draw_rect_main_corner+0xa08>
        act_color = mcolor;
 8010448:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801044c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010450:	e01c      	b.n	801048c <lv_draw_rect_main_corner+0xa42>
    else {
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010458:	461a      	mov	r2, r3
 801045a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 801045e:	1ad3      	subs	r3, r2, r3
 8010460:	461a      	mov	r2, r3
 8010462:	4613      	mov	r3, r2
 8010464:	021b      	lsls	r3, r3, #8
 8010466:	1a9a      	subs	r2, r3, r2
 8010468:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801046c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010470:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8010474:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010478:	461a      	mov	r2, r3
 801047a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 801047e:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010482:	f7ff f8b2 	bl	800f5ea <lv_color_mix>
 8010486:	4603      	mov	r3, r0
 8010488:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 801048c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010490:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8010494:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010498:	68b9      	ldr	r1, [r7, #8]
 801049a:	f7fb fd4c 	bl	800bf36 <lv_draw_fill>

    if(edge_top_area.y1 != mid_top_area.y1) {
 801049e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80104a2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d030      	beq.n	801050c <lv_draw_rect_main_corner+0xac2>

        if(mcolor.full == gcolor.full)
 80104aa:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80104ae:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d104      	bne.n	80104c0 <lv_draw_rect_main_corner+0xa76>
            act_color = mcolor;
 80104b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80104ba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80104be:	e01c      	b.n	80104fa <lv_draw_rect_main_corner+0xab0>
        else {
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80104c6:	461a      	mov	r2, r3
 80104c8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	461a      	mov	r2, r3
 80104d0:	4613      	mov	r3, r2
 80104d2:	021b      	lsls	r3, r3, #8
 80104d4:	1a9a      	subs	r2, r3, r2
 80104d6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80104da:	fbb2 f3f3 	udiv	r3, r2, r3
 80104de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            act_color = lv_color_mix(mcolor, gcolor, mix);
 80104e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80104e6:	461a      	mov	r2, r3
 80104e8:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80104ec:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 80104f0:	f7ff f87b 	bl	800f5ea <lv_color_mix>
 80104f4:	4603      	mov	r3, r0
 80104f6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 80104fa:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80104fe:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8010502:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010506:	68b9      	ldr	r1, [r7, #8]
 8010508:	f7fb fd15 	bl	800bf36 <lv_draw_fill>
    }

    if(mcolor.full == gcolor.full)
 801050c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8010510:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010514:	429a      	cmp	r2, r3
 8010516:	d104      	bne.n	8010522 <lv_draw_rect_main_corner+0xad8>
        act_color = mcolor;
 8010518:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801051c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010520:	e01c      	b.n	801055c <lv_draw_rect_main_corner+0xb12>
    else {
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010528:	461a      	mov	r2, r3
 801052a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	461a      	mov	r2, r3
 8010532:	4613      	mov	r3, r2
 8010534:	021b      	lsls	r3, r3, #8
 8010536:	1a9a      	subs	r2, r3, r2
 8010538:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801053c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010540:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8010544:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010548:	461a      	mov	r2, r3
 801054a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 801054e:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010552:	f7ff f84a 	bl	800f5ea <lv_color_mix>
 8010556:	4603      	mov	r3, r0
 8010558:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 801055c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010560:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8010564:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010568:	68b9      	ldr	r1, [r7, #8]
 801056a:	f7fb fce4 	bl	800bf36 <lv_draw_fill>

    if(edge_bot_area.y1 != mid_bot_area.y1) {
 801056e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8010572:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010576:	429a      	cmp	r2, r3
 8010578:	d030      	beq.n	80105dc <lv_draw_rect_main_corner+0xb92>

        if(mcolor.full == gcolor.full)
 801057a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801057e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8010582:	429a      	cmp	r2, r3
 8010584:	d104      	bne.n	8010590 <lv_draw_rect_main_corner+0xb46>
            act_color = mcolor;
 8010586:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801058a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 801058e:	e01c      	b.n	80105ca <lv_draw_rect_main_corner+0xb80>
        else {
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010596:	461a      	mov	r2, r3
 8010598:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	461a      	mov	r2, r3
 80105a0:	4613      	mov	r3, r2
 80105a2:	021b      	lsls	r3, r3, #8
 80105a4:	1a9a      	subs	r2, r3, r2
 80105a6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80105aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80105ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            act_color = lv_color_mix(mcolor, gcolor, mix);
 80105b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80105b6:	461a      	mov	r2, r3
 80105b8:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80105bc:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 80105c0:	f7ff f813 	bl	800f5ea <lv_color_mix>
 80105c4:	4603      	mov	r3, r0
 80105c6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 80105ca:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80105ce:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80105d2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80105d6:	68b9      	ldr	r1, [r7, #8]
 80105d8:	f7fb fcad 	bl	800bf36 <lv_draw_fill>
    }

#if LV_ANTIALIAS
    if(aa) {
 80105dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f000 8257 	beq.w	8010a94 <lv_draw_rect_main_corner+0x104a>
        /*The first and the last line is not drawn*/
        edge_top_area.x1 = coords->x1 + radius + 2;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105ec:	b29a      	uxth	r2, r3
 80105ee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80105f2:	4413      	add	r3, r2
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	3302      	adds	r3, #2
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	b21b      	sxth	r3, r3
 80105fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        edge_top_area.x2 = coords->x2 - radius - 2;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010606:	b29a      	uxth	r2, r3
 8010608:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801060c:	1ad3      	subs	r3, r2, r3
 801060e:	b29b      	uxth	r3, r3
 8010610:	3b02      	subs	r3, #2
 8010612:	b29b      	uxth	r3, r3
 8010614:	b21b      	sxth	r3, r3
 8010616:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        edge_top_area.y1 = coords->y1;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010620:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        edge_top_area.y2 = coords->y1;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801062a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 801062e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8010638:	8852      	ldrh	r2, [r2, #2]
 801063a:	68b9      	ldr	r1, [r7, #8]
 801063c:	f7fb fc7b 	bl	800bf36 <lv_draw_fill>

        edge_top_area.y1 = coords->y2;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010646:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        edge_top_area.y2 = coords->y2;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010650:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8010654:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 801065e:	8892      	ldrh	r2, [r2, #4]
 8010660:	68b9      	ldr	r1, [r7, #8]
 8010662:	f7fb fc68 	bl	800bf36 <lv_draw_fill>

        /*Last parts of the anti-alias*/
        out_y_seg_end       = cir.y;
 8010666:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010668:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 801066c:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8010670:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010674:	1ad3      	subs	r3, r2, r3
 8010676:	b29b      	uxth	r3, r3
 8010678:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        lv_point_t aa_p;

        aa_p.x = out_x_last;
 801067c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010680:	82bb      	strh	r3, [r7, #20]
        aa_p.y = out_y_seg_start;
 8010682:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010686:	82fb      	strh	r3, [r7, #22]

        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8010688:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 801068c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	461a      	mov	r2, r3
 8010694:	4613      	mov	r3, r2
 8010696:	021b      	lsls	r3, r3, #8
 8010698:	1a9a      	subs	r2, r3, r2
 801069a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80106a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 80106a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80106aa:	461a      	mov	r2, r3
 80106ac:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80106b0:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 80106b4:	f7fe ff99 	bl	800f5ea <lv_color_mix>
 80106b8:	4603      	mov	r3, r0
 80106ba:	843b      	strh	r3, [r7, #32]
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 80106bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80106c0:	461a      	mov	r2, r3
 80106c2:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80106c6:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 80106ca:	f7fe ff8e 	bl	800f5ea <lv_color_mix>
 80106ce:	4603      	mov	r3, r0
 80106d0:	84bb      	strh	r3, [r7, #36]	; 0x24

        lv_coord_t i;
        for(i = 0; i < seg_size; i++) {
 80106d2:	2300      	movs	r3, #0
 80106d4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80106d8:	e136      	b.n	8010948 <lv_draw_rect_main_corner+0xefe>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80106da:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80106de:	f9b7 107a 	ldrsh.w	r1, [r7, #122]	; 0x7a
 80106e2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fa fe66 	bl	800b3b8 <lv_draw_aa_get_opa>
 80106ec:	4603      	mov	r3, r0
 80106ee:	461a      	mov	r2, r3
 80106f0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80106f4:	1a9b      	subs	r3, r3, r2
 80106f6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80106fa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80106fe:	b29a      	uxth	r2, r3
 8010700:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010704:	b29b      	uxth	r3, r3
 8010706:	4413      	add	r3, r2
 8010708:	b29a      	uxth	r2, r3
 801070a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801070e:	4413      	add	r3, r2
 8010710:	b29b      	uxth	r3, r3
 8010712:	b218      	sxth	r0, r3
 8010714:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010718:	b29a      	uxth	r2, r3
 801071a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801071e:	b29b      	uxth	r3, r3
 8010720:	4413      	add	r3, r2
 8010722:	b29b      	uxth	r3, r3
 8010724:	3301      	adds	r3, #1
 8010726:	b29b      	uxth	r3, r3
 8010728:	b219      	sxth	r1, r3
 801072a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 801072e:	9300      	str	r3, [sp, #0]
 8010730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010732:	68ba      	ldr	r2, [r7, #8]
 8010734:	f7fb fb67 	bl	800be06 <lv_draw_px>
                       aa_color_hor_top, aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8010738:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801073c:	b29a      	uxth	r2, r3
 801073e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010742:	b29b      	uxth	r3, r3
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	b29a      	uxth	r2, r3
 8010748:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801074c:	1ad3      	subs	r3, r2, r3
 801074e:	b29b      	uxth	r3, r3
 8010750:	b218      	sxth	r0, r3
 8010752:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8010756:	b29a      	uxth	r2, r3
 8010758:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801075c:	b29b      	uxth	r3, r3
 801075e:	4413      	add	r3, r2
 8010760:	b29b      	uxth	r3, r3
 8010762:	3301      	adds	r3, #1
 8010764:	b29b      	uxth	r3, r3
 8010766:	b219      	sxth	r1, r3
 8010768:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 801076c:	9300      	str	r3, [sp, #0]
 801076e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010770:	68ba      	ldr	r2, [r7, #8]
 8010772:	f7fb fb48 	bl	800be06 <lv_draw_px>
                       aa_color_hor_top, aa_opa);
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8010776:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801077a:	b29a      	uxth	r2, r3
 801077c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010780:	b29b      	uxth	r3, r3
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	b29a      	uxth	r2, r3
 8010786:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801078a:	1ad3      	subs	r3, r2, r3
 801078c:	b29b      	uxth	r3, r3
 801078e:	b218      	sxth	r0, r3
 8010790:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8010794:	b29a      	uxth	r2, r3
 8010796:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801079a:	b29b      	uxth	r3, r3
 801079c:	1ad3      	subs	r3, r2, r3
 801079e:	b29b      	uxth	r3, r3
 80107a0:	3b01      	subs	r3, #1
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	b219      	sxth	r1, r3
 80107a6:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80107aa:	9300      	str	r3, [sp, #0]
 80107ac:	8c3b      	ldrh	r3, [r7, #32]
 80107ae:	68ba      	ldr	r2, [r7, #8]
 80107b0:	f7fb fb29 	bl	800be06 <lv_draw_px>
                       aa_color_hor_bottom, aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 80107b4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80107be:	b29b      	uxth	r3, r3
 80107c0:	4413      	add	r3, r2
 80107c2:	b29a      	uxth	r2, r3
 80107c4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80107c8:	4413      	add	r3, r2
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	b218      	sxth	r0, r3
 80107ce:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80107d8:	b29b      	uxth	r3, r3
 80107da:	1ad3      	subs	r3, r2, r3
 80107dc:	b29b      	uxth	r3, r3
 80107de:	3b01      	subs	r3, #1
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	b219      	sxth	r1, r3
 80107e4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80107e8:	9300      	str	r3, [sp, #0]
 80107ea:	8c3b      	ldrh	r3, [r7, #32]
 80107ec:	68ba      	ldr	r2, [r7, #8]
 80107ee:	f7fb fb0a 	bl	800be06 <lv_draw_px>
                       aa_color_hor_bottom, aa_opa);

            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 80107f2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80107f6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80107fa:	1ad2      	subs	r2, r2, r3
 80107fc:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8010800:	4413      	add	r3, r2
 8010802:	461a      	mov	r2, r3
 8010804:	4613      	mov	r3, r2
 8010806:	021b      	lsls	r3, r3, #8
 8010808:	1a9a      	subs	r2, r3, r2
 801080a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010812:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8010816:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801081a:	461a      	mov	r2, r3
 801081c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010820:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8010824:	f7fe fee1 	bl	800f5ea <lv_color_mix>
 8010828:	4603      	mov	r3, r0
 801082a:	83bb      	strh	r3, [r7, #28]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 801082c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010830:	b29a      	uxth	r2, r3
 8010832:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010836:	b29b      	uxth	r3, r3
 8010838:	4413      	add	r3, r2
 801083a:	b29b      	uxth	r3, r3
 801083c:	3301      	adds	r3, #1
 801083e:	b29b      	uxth	r3, r3
 8010840:	b218      	sxth	r0, r3
 8010842:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010846:	b29a      	uxth	r2, r3
 8010848:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801084c:	b29b      	uxth	r3, r3
 801084e:	4413      	add	r3, r2
 8010850:	b29a      	uxth	r2, r3
 8010852:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010856:	4413      	add	r3, r2
 8010858:	b29b      	uxth	r3, r3
 801085a:	b219      	sxth	r1, r3
 801085c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8010860:	9300      	str	r3, [sp, #0]
 8010862:	8bbb      	ldrh	r3, [r7, #28]
 8010864:	68ba      	ldr	r2, [r7, #8]
 8010866:	f7fb face 	bl	800be06 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 801086a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801086e:	b29a      	uxth	r2, r3
 8010870:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010874:	b29b      	uxth	r3, r3
 8010876:	1ad3      	subs	r3, r2, r3
 8010878:	b29b      	uxth	r3, r3
 801087a:	3b01      	subs	r3, #1
 801087c:	b29b      	uxth	r3, r3
 801087e:	b218      	sxth	r0, r3
 8010880:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8010884:	b29a      	uxth	r2, r3
 8010886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801088a:	b29b      	uxth	r3, r3
 801088c:	4413      	add	r3, r2
 801088e:	b29a      	uxth	r2, r3
 8010890:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010894:	4413      	add	r3, r2
 8010896:	b29b      	uxth	r3, r3
 8010898:	b219      	sxth	r1, r3
 801089a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	8bbb      	ldrh	r3, [r7, #28]
 80108a2:	68ba      	ldr	r2, [r7, #8]
 80108a4:	f7fb faaf 	bl	800be06 <lv_draw_px>
                       aa_opa);

            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 80108a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80108ac:	461a      	mov	r2, r3
 80108ae:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80108b2:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 80108b6:	f7fe fe98 	bl	800f5ea <lv_color_mix>
 80108ba:	4603      	mov	r3, r0
 80108bc:	83bb      	strh	r3, [r7, #28]
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 80108be:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	1ad3      	subs	r3, r2, r3
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	3b01      	subs	r3, #1
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	b218      	sxth	r0, r3
 80108d4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80108d8:	b29a      	uxth	r2, r3
 80108da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	1ad3      	subs	r3, r2, r3
 80108e2:	b29a      	uxth	r2, r3
 80108e4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80108e8:	1ad3      	subs	r3, r2, r3
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	b219      	sxth	r1, r3
 80108ee:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80108f2:	9300      	str	r3, [sp, #0]
 80108f4:	8bbb      	ldrh	r3, [r7, #28]
 80108f6:	68ba      	ldr	r2, [r7, #8]
 80108f8:	f7fb fa85 	bl	800be06 <lv_draw_px>
                       aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 80108fc:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8010900:	b29a      	uxth	r2, r3
 8010902:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010906:	b29b      	uxth	r3, r3
 8010908:	4413      	add	r3, r2
 801090a:	b29b      	uxth	r3, r3
 801090c:	3301      	adds	r3, #1
 801090e:	b29b      	uxth	r3, r3
 8010910:	b218      	sxth	r0, r3
 8010912:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8010916:	b29a      	uxth	r2, r3
 8010918:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801091c:	b29b      	uxth	r3, r3
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	b29a      	uxth	r2, r3
 8010922:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010926:	1ad3      	subs	r3, r2, r3
 8010928:	b29b      	uxth	r3, r3
 801092a:	b219      	sxth	r1, r3
 801092c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	8bbb      	ldrh	r3, [r7, #28]
 8010934:	68ba      	ldr	r2, [r7, #8]
 8010936:	f7fb fa66 	bl	800be06 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 801093a:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801093e:	b29b      	uxth	r3, r3
 8010940:	3301      	adds	r3, #1
 8010942:	b29b      	uxth	r3, r3
 8010944:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8010948:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801094c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8010950:	429a      	cmp	r2, r3
 8010952:	f6ff aec2 	blt.w	80106da <lv_draw_rect_main_corner+0xc90>
                       aa_opa);
        }

        /*In some cases the last pixel is not drawn*/
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8010956:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801095a:	461a      	mov	r2, r3
 801095c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010960:	1ad3      	subs	r3, r2, r3
 8010962:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8010966:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801096a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801096e:	429a      	cmp	r2, r3
 8010970:	f040 8090 	bne.w	8010a94 <lv_draw_rect_main_corner+0x104a>
            aa_p.x = out_x_last;
 8010974:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010978:	82bb      	strh	r3, [r7, #20]
            aa_p.y = out_x_last;
 801097a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801097e:	82fb      	strh	r3, [r7, #22]

            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 8010980:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8010984:	4613      	mov	r3, r2
 8010986:	021b      	lsls	r3, r3, #8
 8010988:	1a9a      	subs	r2, r3, r2
 801098a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010992:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8010996:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801099a:	461a      	mov	r2, r3
 801099c:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80109a0:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 80109a4:	f7fe fe21 	bl	800f5ea <lv_color_mix>
 80109a8:	4603      	mov	r3, r0
 80109aa:	84bb      	strh	r3, [r7, #36]	; 0x24
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 80109ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80109b0:	461a      	mov	r2, r3
 80109b2:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80109b6:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 80109ba:	f7fe fe16 	bl	800f5ea <lv_color_mix>
 80109be:	4603      	mov	r3, r0
 80109c0:	843b      	strh	r3, [r7, #32]

            lv_opa_t aa_opa = opa >> 1;
 80109c2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80109c6:	085b      	lsrs	r3, r3, #1
 80109c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 80109cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80109d0:	b29a      	uxth	r2, r3
 80109d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	4413      	add	r3, r2
 80109da:	b29b      	uxth	r3, r3
 80109dc:	b218      	sxth	r0, r3
 80109de:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	4413      	add	r3, r2
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	b219      	sxth	r1, r3
 80109f0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80109f4:	9300      	str	r3, [sp, #0]
 80109f6:	8c3b      	ldrh	r3, [r7, #32]
 80109f8:	68ba      	ldr	r2, [r7, #8]
 80109fa:	f7fb fa04 	bl	800be06 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 80109fe:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8010a02:	b29a      	uxth	r2, r3
 8010a04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	b218      	sxth	r0, r3
 8010a10:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8010a14:	b29a      	uxth	r2, r3
 8010a16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	4413      	add	r3, r2
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	b219      	sxth	r1, r3
 8010a22:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	8c3b      	ldrh	r3, [r7, #32]
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	f7fb f9eb 	bl	800be06 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 8010a30:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	1ad3      	subs	r3, r2, r3
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	b218      	sxth	r0, r3
 8010a42:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	1ad3      	subs	r3, r2, r3
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	b219      	sxth	r1, r3
 8010a54:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010a58:	9300      	str	r3, [sp, #0]
 8010a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a5c:	68ba      	ldr	r2, [r7, #8]
 8010a5e:	f7fb f9d2 	bl	800be06 <lv_draw_px>
                       aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 8010a62:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	4413      	add	r3, r2
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	b218      	sxth	r0, r3
 8010a74:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8010a78:	b29a      	uxth	r2, r3
 8010a7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	1ad3      	subs	r3, r2, r3
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	b219      	sxth	r1, r3
 8010a86:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010a8a:	9300      	str	r3, [sp, #0]
 8010a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a8e:	68ba      	ldr	r2, [r7, #8]
 8010a90:	f7fb f9b9 	bl	800be06 <lv_draw_px>
                       aa_opa);
        }
    }
#endif
}
 8010a94:	bf00      	nop
 8010a96:	3788      	adds	r7, #136	; 0x88
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bdb0      	pop	{r4, r5, r7, pc}

08010a9c <lv_draw_rect_border_straight>:
 * @param rstyle pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_border_straight(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                         lv_opa_t opa_scale)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b08c      	sub	sp, #48	; 0x30
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	607a      	str	r2, [r7, #4]
 8010aa8:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010ab0:	857b      	strh	r3, [r7, #42]	; 0x2a
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010ab2:	f7f9 fcbd 	bl	800a430 <lv_refr_get_disp_refreshing>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f004 fb89 	bl	80151d0 <lv_disp_get_antialiasing>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    lv_coord_t width  = lv_area_get_width(coords);
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f7fe fe2e 	bl	800f726 <lv_area_get_width>
 8010aca:	4603      	mov	r3, r0
 8010acc:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t height = lv_area_get_height(coords);
 8010ace:	68f8      	ldr	r0, [r7, #12]
 8010ad0:	f7fe fe40 	bl	800f754 <lv_area_get_height>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t bwidth = style->body.border.width;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	899b      	ldrh	r3, [r3, #12]
 8010adc:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8010ade:	78fb      	ldrb	r3, [r7, #3]
 8010ae0:	2bff      	cmp	r3, #255	; 0xff
 8010ae2:	d102      	bne.n	8010aea <lv_draw_rect_border_straight+0x4e>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	7bdb      	ldrb	r3, [r3, #15]
 8010ae8:	e00a      	b.n	8010b00 <lv_draw_rect_border_straight+0x64>
                                             : (uint16_t)((uint16_t)style->body.border.opa * opa_scale) >> 8;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	7bdb      	ldrb	r3, [r3, #15]
 8010aee:	b29a      	uxth	r2, r3
 8010af0:	78fb      	ldrb	r3, [r7, #3]
 8010af2:	b29b      	uxth	r3, r3
 8010af4:	fb12 f303 	smulbb	r3, r2, r3
 8010af8:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8010afa:	0a1b      	lsrs	r3, r3, #8
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    lv_border_part_t part = style->body.border.part;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	7b9b      	ldrb	r3, [r3, #14]
 8010b08:	f887 3020 	strb.w	r3, [r7, #32]
    lv_color_t color      = style->body.border.color;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	895b      	ldrh	r3, [r3, #10]
 8010b10:	83bb      	strh	r3, [r7, #28]
    lv_area_t work_area;
    lv_coord_t length_corr = 0;
 8010b12:	2300      	movs	r3, #0
 8010b14:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t corner_size = 0;
 8010b16:	2300      	movs	r3, #0
 8010b18:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /*the 0 px border width drawn as 1 px, so decrement the b_width*/
    bwidth--;
 8010b1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	3b01      	subs	r3, #1
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	847b      	strh	r3, [r7, #34]	; 0x22

    radius = lv_draw_cont_radius_corr(radius, width, height);
 8010b26:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8010b2a:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8010b2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b30:	4618      	mov	r0, r3
 8010b32:	f002 fc9f 	bl	8013474 <lv_draw_cont_radius_corr>
 8010b36:	4603      	mov	r3, r0
 8010b38:	857b      	strh	r3, [r7, #42]	; 0x2a

    if(radius < bwidth) {
 8010b3a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010b3c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010b40:	429a      	cmp	r2, r3
 8010b42:	da0c      	bge.n	8010b5e <lv_draw_rect_border_straight+0xc2>
        length_corr = bwidth - radius - aa;
 8010b44:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010b46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b48:	1ad3      	subs	r3, r2, r3
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	1ad3      	subs	r3, r2, r3
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	85fb      	strh	r3, [r7, #46]	; 0x2e
        corner_size = bwidth;
 8010b58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010b5c:	e006      	b.n	8010b6c <lv_draw_rect_border_straight+0xd0>
    } else {
        corner_size = radius + aa;
 8010b5e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010b62:	b29a      	uxth	r2, r3
 8010b64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b66:	4413      	add	r3, r2
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    /*If radius == 0 is a special case*/
    if(style->body.radius == 0) {
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f040 80ca 	bne.w	8010d0c <lv_draw_rect_border_straight+0x270>
        /*Left top corner*/
        if(part & LV_BORDER_TOP) {
 8010b78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010b7c:	f003 0302 	and.w	r3, r3, #2
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d01c      	beq.n	8010bbe <lv_draw_rect_border_straight+0x122>
            work_area.x1 = coords->x1;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b8a:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010b92:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b9a:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010ba2:	b29a      	uxth	r2, r3
 8010ba4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ba6:	4413      	add	r3, r2
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	b21b      	sxth	r3, r3
 8010bac:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8010bae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010bb2:	f107 0014 	add.w	r0, r7, #20
 8010bb6:	8bba      	ldrh	r2, [r7, #28]
 8010bb8:	68b9      	ldr	r1, [r7, #8]
 8010bba:	f7fb f9bc 	bl	800bf36 <lv_draw_fill>
        }

        /*Right top corner*/
        if(part & LV_BORDER_RIGHT) {
 8010bbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010bc2:	f003 0308 	and.w	r3, r3, #8
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d03a      	beq.n	8010c40 <lv_draw_rect_border_straight+0x1a4>
            work_area.x1 = coords->x2 - bwidth;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010bd4:	1ad3      	subs	r3, r2, r3
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	b21b      	sxth	r3, r3
 8010bda:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010be2:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010bf0:	f003 0302 	and.w	r3, r3, #2
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d003      	beq.n	8010c00 <lv_draw_rect_border_straight+0x164>
 8010bf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	e000      	b.n	8010c02 <lv_draw_rect_border_straight+0x166>
 8010c00:	2300      	movs	r3, #0
 8010c02:	4413      	add	r3, r2
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	b21b      	sxth	r3, r3
 8010c08:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010c10:	b29a      	uxth	r2, r3
 8010c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c16:	f003 0301 	and.w	r3, r3, #1
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d003      	beq.n	8010c26 <lv_draw_rect_border_straight+0x18a>
 8010c1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c20:	3301      	adds	r3, #1
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	e000      	b.n	8010c28 <lv_draw_rect_border_straight+0x18c>
 8010c26:	2300      	movs	r3, #0
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	b21b      	sxth	r3, r3
 8010c2e:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8010c30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010c34:	f107 0014 	add.w	r0, r7, #20
 8010c38:	8bba      	ldrh	r2, [r7, #28]
 8010c3a:	68b9      	ldr	r1, [r7, #8]
 8010c3c:	f7fb f97b 	bl	800bf36 <lv_draw_fill>
        }

        /*Left bottom corner*/
        if(part & LV_BORDER_LEFT) {
 8010c40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c44:	f003 0304 	and.w	r3, r3, #4
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d03a      	beq.n	8010cc2 <lv_draw_rect_border_straight+0x226>
            work_area.x1 = coords->x1;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c52:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + bwidth;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c5e:	4413      	add	r3, r2
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	b21b      	sxth	r3, r3
 8010c64:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010c6c:	b29a      	uxth	r2, r3
 8010c6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c72:	f003 0302 	and.w	r3, r3, #2
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d003      	beq.n	8010c82 <lv_draw_rect_border_straight+0x1e6>
 8010c7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	e000      	b.n	8010c84 <lv_draw_rect_border_straight+0x1e8>
 8010c82:	2300      	movs	r3, #0
 8010c84:	4413      	add	r3, r2
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	b21b      	sxth	r3, r3
 8010c8a:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010c92:	b29a      	uxth	r2, r3
 8010c94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c98:	f003 0301 	and.w	r3, r3, #1
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d003      	beq.n	8010ca8 <lv_draw_rect_border_straight+0x20c>
 8010ca0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	e000      	b.n	8010caa <lv_draw_rect_border_straight+0x20e>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	1ad3      	subs	r3, r2, r3
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	b21b      	sxth	r3, r3
 8010cb0:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8010cb2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010cb6:	f107 0014 	add.w	r0, r7, #20
 8010cba:	8bba      	ldrh	r2, [r7, #28]
 8010cbc:	68b9      	ldr	r1, [r7, #8]
 8010cbe:	f7fb f93a 	bl	800bf36 <lv_draw_fill>
        }

        /*Right bottom corner*/
        if(part & LV_BORDER_BOTTOM) {
 8010cc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010cc6:	f003 0301 	and.w	r3, r3, #1
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	f000 828f 	beq.w	80111ee <lv_draw_rect_border_straight+0x752>
            work_area.x1 = coords->x1;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010cd6:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010cde:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010ce6:	b29a      	uxth	r2, r3
 8010ce8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010cea:	1ad3      	subs	r3, r2, r3
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	b21b      	sxth	r3, r3
 8010cf0:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010cf8:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8010cfa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010cfe:	f107 0014 	add.w	r0, r7, #20
 8010d02:	8bba      	ldrh	r2, [r7, #28]
 8010d04:	68b9      	ldr	r1, [r7, #8]
 8010d06:	f7fb f916 	bl	800bf36 <lv_draw_fill>
 8010d0a:	e271      	b.n	80111f0 <lv_draw_rect_border_straight+0x754>
        }
        return;
    }

    /* Modify the corner_size if corner is drawn */
    corner_size++;
 8010d0c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	3301      	adds	r3, #1
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /*Depending one which part's are drawn modify the area lengths */
    if(part & LV_BORDER_TOP)
 8010d18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d1c:	f003 0302 	and.w	r3, r3, #2
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d009      	beq.n	8010d38 <lv_draw_rect_border_straight+0x29c>
        work_area.y1 = coords->y1 + corner_size;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d2e:	4413      	add	r3, r2
 8010d30:	b29b      	uxth	r3, r3
 8010d32:	b21b      	sxth	r3, r3
 8010d34:	82fb      	strh	r3, [r7, #22]
 8010d36:	e008      	b.n	8010d4a <lv_draw_rect_border_straight+0x2ae>
    else
        work_area.y1 = coords->y1 + radius;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d3e:	b29a      	uxth	r2, r3
 8010d40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d42:	4413      	add	r3, r2
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	b21b      	sxth	r3, r3
 8010d48:	82fb      	strh	r3, [r7, #22]

    if(part & LV_BORDER_BOTTOM)
 8010d4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d4e:	f003 0301 	and.w	r3, r3, #1
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d009      	beq.n	8010d6a <lv_draw_rect_border_straight+0x2ce>
        work_area.y2 = coords->y2 - corner_size;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	b21b      	sxth	r3, r3
 8010d66:	837b      	strh	r3, [r7, #26]
 8010d68:	e008      	b.n	8010d7c <lv_draw_rect_border_straight+0x2e0>
    else
        work_area.y2 = coords->y2 - radius;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d74:	1ad3      	subs	r3, r2, r3
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	b21b      	sxth	r3, r3
 8010d7a:	837b      	strh	r3, [r7, #26]

    /*Left border*/
    if(part & LV_BORDER_LEFT) {
 8010d7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d80:	f003 0304 	and.w	r3, r3, #4
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d013      	beq.n	8010db0 <lv_draw_rect_border_straight+0x314>
        work_area.x1 = coords->x1;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d8e:	82bb      	strh	r3, [r7, #20]
        work_area.x2 = work_area.x1 + bwidth;
 8010d90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d98:	4413      	add	r3, r2
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	b21b      	sxth	r3, r3
 8010d9e:	833b      	strh	r3, [r7, #24]
        lv_draw_fill(&work_area, mask, color, opa);
 8010da0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010da4:	f107 0014 	add.w	r0, r7, #20
 8010da8:	8bba      	ldrh	r2, [r7, #28]
 8010daa:	68b9      	ldr	r1, [r7, #8]
 8010dac:	f7fb f8c3 	bl	800bf36 <lv_draw_fill>
    }

    /*Right border*/
    if(part & LV_BORDER_RIGHT) {
 8010db0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010db4:	f003 0308 	and.w	r3, r3, #8
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d013      	beq.n	8010de4 <lv_draw_rect_border_straight+0x348>
        work_area.x2 = coords->x2;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010dc2:	833b      	strh	r3, [r7, #24]
        work_area.x1 = work_area.x2 - bwidth;
 8010dc4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010dc8:	b29a      	uxth	r2, r3
 8010dca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010dcc:	1ad3      	subs	r3, r2, r3
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	b21b      	sxth	r3, r3
 8010dd2:	82bb      	strh	r3, [r7, #20]
        lv_draw_fill(&work_area, mask, color, opa);
 8010dd4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010dd8:	f107 0014 	add.w	r0, r7, #20
 8010ddc:	8bba      	ldrh	r2, [r7, #28]
 8010dde:	68b9      	ldr	r1, [r7, #8]
 8010de0:	f7fb f8a9 	bl	800bf36 <lv_draw_fill>
    }

    work_area.x1 = coords->x1 + corner_size - length_corr;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010dea:	b29a      	uxth	r2, r3
 8010dec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010dee:	4413      	add	r3, r2
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010df4:	1ad3      	subs	r3, r2, r3
 8010df6:	b29b      	uxth	r3, r3
 8010df8:	b21b      	sxth	r3, r3
 8010dfa:	82bb      	strh	r3, [r7, #20]
    work_area.x2 = coords->x2 - corner_size + length_corr;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010e06:	1ad3      	subs	r3, r2, r3
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e0c:	4413      	add	r3, r2
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	b21b      	sxth	r3, r3
 8010e12:	833b      	strh	r3, [r7, #24]

    /*Upper border*/
    if(part & LV_BORDER_TOP) {
 8010e14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010e18:	f003 0302 	and.w	r3, r3, #2
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d014      	beq.n	8010e4a <lv_draw_rect_border_straight+0x3ae>
        work_area.y1 = coords->y1;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010e26:	82fb      	strh	r3, [r7, #22]
        work_area.y2 = coords->y1 + bwidth;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010e2e:	b29a      	uxth	r2, r3
 8010e30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e32:	4413      	add	r3, r2
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	b21b      	sxth	r3, r3
 8010e38:	837b      	strh	r3, [r7, #26]
        lv_draw_fill(&work_area, mask, color, opa);
 8010e3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010e3e:	f107 0014 	add.w	r0, r7, #20
 8010e42:	8bba      	ldrh	r2, [r7, #28]
 8010e44:	68b9      	ldr	r1, [r7, #8]
 8010e46:	f7fb f876 	bl	800bf36 <lv_draw_fill>
    }

    /*Lower border*/
    if(part & LV_BORDER_BOTTOM) {
 8010e4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010e4e:	f003 0301 	and.w	r3, r3, #1
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d013      	beq.n	8010e7e <lv_draw_rect_border_straight+0x3e2>
        work_area.y2 = coords->y2;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010e5c:	837b      	strh	r3, [r7, #26]
        work_area.y1 = work_area.y2 - bwidth;
 8010e5e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	b21b      	sxth	r3, r3
 8010e6c:	82fb      	strh	r3, [r7, #22]
        lv_draw_fill(&work_area, mask, color, opa);
 8010e6e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010e72:	f107 0014 	add.w	r0, r7, #20
 8010e76:	8bba      	ldrh	r2, [r7, #28]
 8010e78:	68b9      	ldr	r1, [r7, #8]
 8010e7a:	f7fb f85c 	bl	800bf36 <lv_draw_fill>
    }

    /*Draw the a remaining rectangles if the radius is smaller then bwidth */
    if(length_corr != 0) {
 8010e7e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	f000 80fc 	beq.w	8011080 <lv_draw_rect_border_straight+0x5e4>
        /*Left top correction*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8010e88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010e8c:	f003 0302 	and.w	r3, r3, #2
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d038      	beq.n	8010f06 <lv_draw_rect_border_straight+0x46a>
 8010e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010e98:	f003 0304 	and.w	r3, r3, #4
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d032      	beq.n	8010f06 <lv_draw_rect_border_straight+0x46a>
            work_area.x1 = coords->x1;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ea6:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + radius + aa;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010eb2:	4413      	add	r3, r2
 8010eb4:	b29a      	uxth	r2, r3
 8010eb6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	4413      	add	r3, r2
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	b21b      	sxth	r3, r3
 8010ec2:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ece:	4413      	add	r3, r2
 8010ed0:	b29a      	uxth	r2, r3
 8010ed2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	4413      	add	r3, r2
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	3301      	adds	r3, #1
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	b21b      	sxth	r3, r3
 8010ee2:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010eee:	4413      	add	r3, r2
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	b21b      	sxth	r3, r3
 8010ef4:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8010ef6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010efa:	f107 0014 	add.w	r0, r7, #20
 8010efe:	8bba      	ldrh	r2, [r7, #28]
 8010f00:	68b9      	ldr	r1, [r7, #8]
 8010f02:	f7fb f818 	bl	800bf36 <lv_draw_fill>
        }

        /*Right top correction*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8010f06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010f0a:	f003 0302 	and.w	r3, r3, #2
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d038      	beq.n	8010f84 <lv_draw_rect_border_straight+0x4e8>
 8010f12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010f16:	f003 0308 	and.w	r3, r3, #8
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d032      	beq.n	8010f84 <lv_draw_rect_border_straight+0x4e8>
            work_area.x1 = coords->x2 - radius - aa;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010f24:	b29a      	uxth	r2, r3
 8010f26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f28:	1ad3      	subs	r3, r2, r3
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	1ad3      	subs	r3, r2, r3
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	b21b      	sxth	r3, r3
 8010f38:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010f40:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010f48:	b29a      	uxth	r2, r3
 8010f4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f4c:	4413      	add	r3, r2
 8010f4e:	b29a      	uxth	r2, r3
 8010f50:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	4413      	add	r3, r2
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	b21b      	sxth	r3, r3
 8010f60:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f6c:	4413      	add	r3, r2
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	b21b      	sxth	r3, r3
 8010f72:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8010f74:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010f78:	f107 0014 	add.w	r0, r7, #20
 8010f7c:	8bba      	ldrh	r2, [r7, #28]
 8010f7e:	68b9      	ldr	r1, [r7, #8]
 8010f80:	f7fa ffd9 	bl	800bf36 <lv_draw_fill>
        }

        /*Left bottom correction*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8010f84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010f88:	f003 0301 	and.w	r3, r3, #1
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d038      	beq.n	8011002 <lv_draw_rect_border_straight+0x566>
 8010f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010f94:	f003 0304 	and.w	r3, r3, #4
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d032      	beq.n	8011002 <lv_draw_rect_border_straight+0x566>
            work_area.x1 = coords->x1;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fa2:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + radius + aa;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010faa:	b29a      	uxth	r2, r3
 8010fac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010fae:	4413      	add	r3, r2
 8010fb0:	b29a      	uxth	r2, r3
 8010fb2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	4413      	add	r3, r2
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	b21b      	sxth	r3, r3
 8010fbe:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010fc6:	b29a      	uxth	r2, r3
 8010fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	b21b      	sxth	r3, r3
 8010fd0:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010fd8:	b29a      	uxth	r2, r3
 8010fda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010fdc:	1ad3      	subs	r3, r2, r3
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	1ad3      	subs	r3, r2, r3
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	3b01      	subs	r3, #1
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	b21b      	sxth	r3, r3
 8010ff0:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8010ff2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010ff6:	f107 0014 	add.w	r0, r7, #20
 8010ffa:	8bba      	ldrh	r2, [r7, #28]
 8010ffc:	68b9      	ldr	r1, [r7, #8]
 8010ffe:	f7fa ff9a 	bl	800bf36 <lv_draw_fill>
        }

        /*Right bottom correction*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8011002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011006:	f003 0301 	and.w	r3, r3, #1
 801100a:	2b00      	cmp	r3, #0
 801100c:	d038      	beq.n	8011080 <lv_draw_rect_border_straight+0x5e4>
 801100e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011012:	f003 0308 	and.w	r3, r3, #8
 8011016:	2b00      	cmp	r3, #0
 8011018:	d032      	beq.n	8011080 <lv_draw_rect_border_straight+0x5e4>
            work_area.x1 = coords->x2 - radius - aa;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011020:	b29a      	uxth	r2, r3
 8011022:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	b29a      	uxth	r2, r3
 8011028:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801102c:	b29b      	uxth	r3, r3
 801102e:	1ad3      	subs	r3, r2, r3
 8011030:	b29b      	uxth	r3, r3
 8011032:	b21b      	sxth	r3, r3
 8011034:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801103c:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011044:	b29a      	uxth	r2, r3
 8011046:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011048:	1ad3      	subs	r3, r2, r3
 801104a:	b29b      	uxth	r3, r3
 801104c:	b21b      	sxth	r3, r3
 801104e:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011056:	b29a      	uxth	r2, r3
 8011058:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801105a:	1ad3      	subs	r3, r2, r3
 801105c:	b29a      	uxth	r2, r3
 801105e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011062:	b29b      	uxth	r3, r3
 8011064:	1ad3      	subs	r3, r2, r3
 8011066:	b29b      	uxth	r3, r3
 8011068:	3b01      	subs	r3, #1
 801106a:	b29b      	uxth	r3, r3
 801106c:	b21b      	sxth	r3, r3
 801106e:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8011070:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011074:	f107 0014 	add.w	r0, r7, #20
 8011078:	8bba      	ldrh	r2, [r7, #28]
 801107a:	68b9      	ldr	r1, [r7, #8]
 801107c:	f7fa ff5b 	bl	800bf36 <lv_draw_fill>
        }
    }

    /*If radius == 0 one px on the corners are not drawn by main drawer*/
    if(style->body.radius == 0) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011086:	2b00      	cmp	r3, #0
 8011088:	f040 80b2 	bne.w	80111f0 <lv_draw_rect_border_straight+0x754>
        /*Left top corner*/
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 801108c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011090:	f003 0306 	and.w	r3, r3, #6
 8011094:	2b00      	cmp	r3, #0
 8011096:	d025      	beq.n	80110e4 <lv_draw_rect_border_straight+0x648>
            work_area.x1 = coords->x1;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801109e:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + aa;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	4413      	add	r3, r2
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	b21b      	sxth	r3, r3
 80110b4:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80110bc:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + aa;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80110c4:	b29a      	uxth	r2, r3
 80110c6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	4413      	add	r3, r2
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	b21b      	sxth	r3, r3
 80110d2:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 80110d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80110d8:	f107 0014 	add.w	r0, r7, #20
 80110dc:	8bba      	ldrh	r2, [r7, #28]
 80110de:	68b9      	ldr	r1, [r7, #8]
 80110e0:	f7fa ff29 	bl	800bf36 <lv_draw_fill>
        }

        /*Right top corner*/
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 80110e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80110e8:	f003 030a 	and.w	r3, r3, #10
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d025      	beq.n	801113c <lv_draw_rect_border_straight+0x6a0>
            work_area.x1 = coords->x2 - aa;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80110f6:	b29a      	uxth	r2, r3
 80110f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	1ad3      	subs	r3, r2, r3
 8011100:	b29b      	uxth	r3, r3
 8011102:	b21b      	sxth	r3, r3
 8011104:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801110c:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011114:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + aa;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801111c:	b29a      	uxth	r2, r3
 801111e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011122:	b29b      	uxth	r3, r3
 8011124:	4413      	add	r3, r2
 8011126:	b29b      	uxth	r3, r3
 8011128:	b21b      	sxth	r3, r3
 801112a:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 801112c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011130:	f107 0014 	add.w	r0, r7, #20
 8011134:	8bba      	ldrh	r2, [r7, #28]
 8011136:	68b9      	ldr	r1, [r7, #8]
 8011138:	f7fa fefd 	bl	800bf36 <lv_draw_fill>
        }

        /*Left bottom corner*/
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 801113c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011140:	f003 0305 	and.w	r3, r3, #5
 8011144:	2b00      	cmp	r3, #0
 8011146:	d025      	beq.n	8011194 <lv_draw_rect_border_straight+0x6f8>
            work_area.x1 = coords->x1;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801114e:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + aa;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011156:	b29a      	uxth	r2, r3
 8011158:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801115c:	b29b      	uxth	r3, r3
 801115e:	4413      	add	r3, r2
 8011160:	b29b      	uxth	r3, r3
 8011162:	b21b      	sxth	r3, r3
 8011164:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - aa;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801116c:	b29a      	uxth	r2, r3
 801116e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011172:	b29b      	uxth	r3, r3
 8011174:	1ad3      	subs	r3, r2, r3
 8011176:	b29b      	uxth	r3, r3
 8011178:	b21b      	sxth	r3, r3
 801117a:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011182:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 8011184:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011188:	f107 0014 	add.w	r0, r7, #20
 801118c:	8bba      	ldrh	r2, [r7, #28]
 801118e:	68b9      	ldr	r1, [r7, #8]
 8011190:	f7fa fed1 	bl	800bf36 <lv_draw_fill>
        }

        /*Right bottom corner*/
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 8011194:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011198:	f003 0309 	and.w	r3, r3, #9
 801119c:	2b00      	cmp	r3, #0
 801119e:	d027      	beq.n	80111f0 <lv_draw_rect_border_straight+0x754>
            work_area.x1 = coords->x2 - aa;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	b21b      	sxth	r3, r3
 80111b4:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80111bc:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - aa;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	1ad3      	subs	r3, r2, r3
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	b21b      	sxth	r3, r3
 80111d2:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80111da:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 80111dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80111e0:	f107 0014 	add.w	r0, r7, #20
 80111e4:	8bba      	ldrh	r2, [r7, #28]
 80111e6:	68b9      	ldr	r1, [r7, #8]
 80111e8:	f7fa fea5 	bl	800bf36 <lv_draw_fill>
 80111ec:	e000      	b.n	80111f0 <lv_draw_rect_border_straight+0x754>
        return;
 80111ee:	bf00      	nop
        }
    }
}
 80111f0:	3730      	adds	r7, #48	; 0x30
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}

080111f6 <lv_draw_rect_border_corner>:
 * @param style pointer to a style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_border_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                       lv_opa_t opa_scale)
{
 80111f6:	b580      	push	{r7, lr}
 80111f8:	b0a0      	sub	sp, #128	; 0x80
 80111fa:	af02      	add	r7, sp, #8
 80111fc:	60f8      	str	r0, [r7, #12]
 80111fe:	60b9      	str	r1, [r7, #8]
 8011200:	607a      	str	r2, [r7, #4]
 8011202:	70fb      	strb	r3, [r7, #3]
    uint16_t radius       = style->body.radius;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801120a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801120e:	f7f9 f90f 	bl	800a430 <lv_refr_get_disp_refreshing>
 8011212:	4603      	mov	r3, r0
 8011214:	4618      	mov	r0, r3
 8011216:	f003 ffdb 	bl	80151d0 <lv_disp_get_antialiasing>
 801121a:	4603      	mov	r3, r0
 801121c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    lv_coord_t bwidth     = style->body.border.width;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	899b      	ldrh	r3, [r3, #12]
 8011224:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    lv_color_t color      = style->body.border.color;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	895b      	ldrh	r3, [r3, #10]
 801122c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    lv_border_part_t part = style->body.border.part;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	7b9b      	ldrb	r3, [r3, #14]
 8011234:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011238:	78fb      	ldrb	r3, [r7, #3]
 801123a:	2bff      	cmp	r3, #255	; 0xff
 801123c:	d102      	bne.n	8011244 <lv_draw_rect_border_corner+0x4e>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	7bdb      	ldrb	r3, [r3, #15]
 8011242:	e00a      	b.n	801125a <lv_draw_rect_border_corner+0x64>
                                             : (uint16_t)((uint16_t)style->body.border.opa * opa_scale) >> 8;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	7bdb      	ldrb	r3, [r3, #15]
 8011248:	b29a      	uxth	r2, r3
 801124a:	78fb      	ldrb	r3, [r7, #3]
 801124c:	b29b      	uxth	r3, r3
 801124e:	fb12 f303 	smulbb	r3, r2, r3
 8011252:	b29b      	uxth	r3, r3
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011254:	0a1b      	lsrs	r3, r3, #8
 8011256:	b29b      	uxth	r3, r3
 8011258:	b2db      	uxtb	r3, r3
 801125a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
    /*0 px border width drawn as 1 px, so decrement the bwidth*/
    bwidth--;
 801125e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8011262:	b29b      	uxth	r3, r3
 8011264:	3b01      	subs	r3, #1
 8011266:	b29b      	uxth	r3, r3
 8011268:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

#if LV_ANTIALIAS
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 801126c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011270:	2b00      	cmp	r3, #0
 8011272:	d006      	beq.n	8011282 <lv_draw_rect_border_corner+0x8c>
 8011274:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8011278:	b29b      	uxth	r3, r3
 801127a:	3b01      	subs	r3, #1
 801127c:	b29b      	uxth	r3, r3
 801127e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
#endif

    lv_coord_t width  = lv_area_get_width(coords);
 8011282:	68f8      	ldr	r0, [r7, #12]
 8011284:	f7fe fa4f 	bl	800f726 <lv_area_get_width>
 8011288:	4603      	mov	r3, r0
 801128a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    lv_coord_t height = lv_area_get_height(coords);
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f7fe fa60 	bl	800f754 <lv_area_get_height>
 8011294:	4603      	mov	r3, r0
 8011296:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    radius = lv_draw_cont_radius_corr(radius, width, height);
 801129a:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 801129e:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	; 0x56
 80112a2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80112a6:	4618      	mov	r0, r3
 80112a8:	f002 f8e4 	bl	8013474 <lv_draw_cont_radius_corr>
 80112ac:	4603      	mov	r3, r0
 80112ae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    lv_point_t lt_origo; /*Left  Top    origo*/
    lv_point_t lb_origo; /*Left  Bottom origo*/
    lv_point_t rt_origo; /*Right Top    origo*/
    lv_point_t rb_origo; /*Left  Bottom origo*/

    lt_origo.x = coords->x1 + radius + aa;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80112be:	4413      	add	r3, r2
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	4413      	add	r3, r2
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	b21b      	sxth	r3, r3
 80112ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lt_origo.y = coords->y1 + radius + aa;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112d8:	b29a      	uxth	r2, r3
 80112da:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80112de:	4413      	add	r3, r2
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	4413      	add	r3, r2
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	b21b      	sxth	r3, r3
 80112ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    lb_origo.x = coords->x1 + radius + aa;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112f8:	b29a      	uxth	r2, r3
 80112fa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80112fe:	4413      	add	r3, r2
 8011300:	b29a      	uxth	r2, r3
 8011302:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011306:	b29b      	uxth	r3, r3
 8011308:	4413      	add	r3, r2
 801130a:	b29b      	uxth	r3, r3
 801130c:	b21b      	sxth	r3, r3
 801130e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lb_origo.y = coords->y2 - radius - aa;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011316:	b29a      	uxth	r2, r3
 8011318:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	b29a      	uxth	r2, r3
 8011320:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011324:	b29b      	uxth	r3, r3
 8011326:	1ad3      	subs	r3, r2, r3
 8011328:	b29b      	uxth	r3, r3
 801132a:	b21b      	sxth	r3, r3
 801132c:	87fb      	strh	r3, [r7, #62]	; 0x3e

    rt_origo.x = coords->x2 - radius - aa;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011334:	b29a      	uxth	r2, r3
 8011336:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	b29a      	uxth	r2, r3
 801133e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011342:	b29b      	uxth	r3, r3
 8011344:	1ad3      	subs	r3, r2, r3
 8011346:	b29b      	uxth	r3, r3
 8011348:	b21b      	sxth	r3, r3
 801134a:	873b      	strh	r3, [r7, #56]	; 0x38
    rt_origo.y = coords->y1 + radius + aa;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011352:	b29a      	uxth	r2, r3
 8011354:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011358:	4413      	add	r3, r2
 801135a:	b29a      	uxth	r2, r3
 801135c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011360:	b29b      	uxth	r3, r3
 8011362:	4413      	add	r3, r2
 8011364:	b29b      	uxth	r3, r3
 8011366:	b21b      	sxth	r3, r3
 8011368:	877b      	strh	r3, [r7, #58]	; 0x3a

    rb_origo.x = coords->x2 - radius - aa;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011370:	b29a      	uxth	r2, r3
 8011372:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011376:	1ad3      	subs	r3, r2, r3
 8011378:	b29a      	uxth	r2, r3
 801137a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801137e:	b29b      	uxth	r3, r3
 8011380:	1ad3      	subs	r3, r2, r3
 8011382:	b29b      	uxth	r3, r3
 8011384:	b21b      	sxth	r3, r3
 8011386:	86bb      	strh	r3, [r7, #52]	; 0x34
    rb_origo.y = coords->y2 - radius - aa;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801138e:	b29a      	uxth	r2, r3
 8011390:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011394:	1ad3      	subs	r3, r2, r3
 8011396:	b29a      	uxth	r2, r3
 8011398:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801139c:	b29b      	uxth	r3, r3
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	b21b      	sxth	r3, r3
 80113a4:	86fb      	strh	r3, [r7, #54]	; 0x36

    lv_point_t cir_out;
    lv_coord_t tmp_out;
    lv_circ_init(&cir_out, &tmp_out, radius);
 80113a6:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 80113aa:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 80113ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80113b2:	4618      	mov	r0, r3
 80113b4:	f004 fbd3 	bl	8015b5e <lv_circ_init>

    lv_point_t cir_in;
    lv_coord_t tmp_in;
    lv_coord_t radius_in = radius - bwidth;
 80113b8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80113bc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

    if(radius_in < 0) {
 80113c8:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	da02      	bge.n	80113d6 <lv_draw_rect_border_corner+0x1e0>
        radius_in = 0;
 80113d0:	2300      	movs	r3, #0
 80113d2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    }

    lv_circ_init(&cir_in, &tmp_in, radius_in);
 80113d6:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 80113da:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80113de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80113e2:	4618      	mov	r0, r3
 80113e4:	f004 fbbb 	bl	8015b5e <lv_circ_init>
    lv_coord_t act_w1;
    lv_coord_t act_w2;

#if LV_ANTIALIAS
    /*Store some internal states for anti-aliasing*/
    lv_coord_t out_y_seg_start = 0;
 80113e8:	2300      	movs	r3, #0
 80113ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    lv_coord_t out_y_seg_end   = 0;
 80113ee:	2300      	movs	r3, #0
 80113f0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    lv_coord_t out_x_last      = radius;
 80113f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80113f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    lv_coord_t in_y_seg_start = 0;
 80113fc:	2300      	movs	r3, #0
 80113fe:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    lv_coord_t in_y_seg_end   = 0;
 8011402:	2300      	movs	r3, #0
 8011404:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    lv_coord_t in_x_last      = radius - bwidth;
 8011408:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801140c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8011410:	1ad3      	subs	r3, r2, r3
 8011412:	b29b      	uxth	r3, r3
 8011414:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#endif

    while(cir_out.y <= cir_out.x) {
 8011418:	f000 bd74 	b.w	8011f04 <lv_draw_rect_border_corner+0xd0e>

        /*Calculate the actual width to avoid overwriting pixels*/
        if(cir_in.y < cir_in.x) {
 801141c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8011420:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011424:	429a      	cmp	r2, r3
 8011426:	da0e      	bge.n	8011446 <lv_draw_rect_border_corner+0x250>
            act_w1 = cir_out.x - cir_in.x;
 8011428:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801142c:	b29a      	uxth	r2, r3
 801142e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011432:	b29b      	uxth	r3, r3
 8011434:	1ad3      	subs	r3, r2, r3
 8011436:	b29b      	uxth	r3, r3
 8011438:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
            act_w2 = act_w1;
 801143c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8011440:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8011444:	e00f      	b.n	8011466 <lv_draw_rect_border_corner+0x270>
        } else {
            act_w1 = cir_out.x - cir_out.y;
 8011446:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801144a:	b29a      	uxth	r2, r3
 801144c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011450:	b29b      	uxth	r3, r3
 8011452:	1ad3      	subs	r3, r2, r3
 8011454:	b29b      	uxth	r3, r3
 8011456:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
            act_w2 = act_w1 - 1;
 801145a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 801145e:	3b01      	subs	r3, #1
 8011460:	b29b      	uxth	r3, r3
 8011462:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        }

#if LV_ANTIALIAS
        if(aa) {
 8011466:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801146a:	2b00      	cmp	r3, #0
 801146c:	f000 8340 	beq.w	8011af0 <lv_draw_rect_border_corner+0x8fa>
            /*New step in y on the outter circle*/
            if(out_x_last != cir_out.x) {
 8011470:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011474:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8011478:	429a      	cmp	r2, r3
 801147a:	f000 817b 	beq.w	8011774 <lv_draw_rect_border_corner+0x57e>
                out_y_seg_end       = cir_out.y;
 801147e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011480:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011484:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8011488:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801148c:	1ad3      	subs	r3, r2, r3
 801148e:	b29b      	uxth	r3, r3
 8011490:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                lv_point_t aa_p;

                aa_p.x = out_x_last;
 8011494:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011498:	833b      	strh	r3, [r7, #24]
                aa_p.y = out_y_seg_start;
 801149a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801149e:	837b      	strh	r3, [r7, #26]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 80114a0:	2300      	movs	r3, #0
 80114a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80114a6:	e157      	b.n	8011758 <lv_draw_rect_border_corner+0x562>
                    lv_opa_t aa_opa;

                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 80114a8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	dd0c      	ble.n	80114ca <lv_draw_rect_border_corner+0x2d4>
                                                                           on the first segment*/
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 80114b0:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80114b4:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 80114b8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80114bc:	4618      	mov	r0, r3
 80114be:	f002 f81b 	bl	80134f8 <antialias_get_opa_circ>
 80114c2:	4603      	mov	r3, r0
 80114c4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80114c8:	e00f      	b.n	80114ea <lv_draw_rect_border_corner+0x2f4>
                    } else {
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80114ca:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80114ce:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 80114d2:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7f9 ff6e 	bl	800b3b8 <lv_draw_aa_get_opa>
 80114dc:	4603      	mov	r3, r0
 80114de:	461a      	mov	r2, r3
 80114e0:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80114e4:	1a9b      	subs	r3, r3, r2
 80114e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80114ea:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80114ee:	f003 0301 	and.w	r3, r3, #1
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d045      	beq.n	8011582 <lv_draw_rect_border_corner+0x38c>
 80114f6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80114fa:	f003 0308 	and.w	r3, r3, #8
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d03f      	beq.n	8011582 <lv_draw_rect_border_corner+0x38c>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011502:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011506:	b29a      	uxth	r2, r3
 8011508:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801150c:	b29b      	uxth	r3, r3
 801150e:	4413      	add	r3, r2
 8011510:	b29b      	uxth	r3, r3
 8011512:	3301      	adds	r3, #1
 8011514:	b29b      	uxth	r3, r3
 8011516:	b218      	sxth	r0, r3
 8011518:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801151c:	b29a      	uxth	r2, r3
 801151e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011522:	b29b      	uxth	r3, r3
 8011524:	4413      	add	r3, r2
 8011526:	b29a      	uxth	r2, r3
 8011528:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801152c:	4413      	add	r3, r2
 801152e:	b29b      	uxth	r3, r3
 8011530:	b219      	sxth	r1, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8011538:	9200      	str	r2, [sp, #0]
 801153a:	895b      	ldrh	r3, [r3, #10]
 801153c:	68ba      	ldr	r2, [r7, #8]
 801153e:	f7fa fc62 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011542:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011546:	b29a      	uxth	r2, r3
 8011548:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801154c:	b29b      	uxth	r3, r3
 801154e:	4413      	add	r3, r2
 8011550:	b29a      	uxth	r2, r3
 8011552:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8011556:	4413      	add	r3, r2
 8011558:	b29b      	uxth	r3, r3
 801155a:	b218      	sxth	r0, r3
 801155c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011560:	b29a      	uxth	r2, r3
 8011562:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011566:	b29b      	uxth	r3, r3
 8011568:	4413      	add	r3, r2
 801156a:	b29b      	uxth	r3, r3
 801156c:	3301      	adds	r3, #1
 801156e:	b29b      	uxth	r3, r3
 8011570:	b219      	sxth	r1, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8011578:	9200      	str	r2, [sp, #0]
 801157a:	895b      	ldrh	r3, [r3, #10]
 801157c:	68ba      	ldr	r2, [r7, #8]
 801157e:	f7fa fc42 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8011582:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011586:	f003 0301 	and.w	r3, r3, #1
 801158a:	2b00      	cmp	r3, #0
 801158c:	d045      	beq.n	801161a <lv_draw_rect_border_corner+0x424>
 801158e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011592:	f003 0304 	and.w	r3, r3, #4
 8011596:	2b00      	cmp	r3, #0
 8011598:	d03f      	beq.n	801161a <lv_draw_rect_border_corner+0x424>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 801159a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801159e:	b29a      	uxth	r2, r3
 80115a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	1ad3      	subs	r3, r2, r3
 80115a8:	b29a      	uxth	r2, r3
 80115aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80115ae:	1ad3      	subs	r3, r2, r3
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	b218      	sxth	r0, r3
 80115b4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80115b8:	b29a      	uxth	r2, r3
 80115ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80115be:	b29b      	uxth	r3, r3
 80115c0:	4413      	add	r3, r2
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	3301      	adds	r3, #1
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	b219      	sxth	r1, r3
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80115d0:	9200      	str	r2, [sp, #0]
 80115d2:	895b      	ldrh	r3, [r3, #10]
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	f7fa fc16 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 80115da:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80115de:	b29a      	uxth	r2, r3
 80115e0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	3b01      	subs	r3, #1
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	b218      	sxth	r0, r3
 80115f0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80115f4:	b29a      	uxth	r2, r3
 80115f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	4413      	add	r3, r2
 80115fe:	b29a      	uxth	r2, r3
 8011600:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8011604:	4413      	add	r3, r2
 8011606:	b29b      	uxth	r3, r3
 8011608:	b219      	sxth	r1, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8011610:	9200      	str	r2, [sp, #0]
 8011612:	895b      	ldrh	r3, [r3, #10]
 8011614:	68ba      	ldr	r2, [r7, #8]
 8011616:	f7fa fbf6 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801161a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801161e:	f003 0302 	and.w	r3, r3, #2
 8011622:	2b00      	cmp	r3, #0
 8011624:	d045      	beq.n	80116b2 <lv_draw_rect_border_corner+0x4bc>
 8011626:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801162a:	f003 0304 	and.w	r3, r3, #4
 801162e:	2b00      	cmp	r3, #0
 8011630:	d03f      	beq.n	80116b2 <lv_draw_rect_border_corner+0x4bc>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8011632:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8011636:	b29a      	uxth	r2, r3
 8011638:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801163c:	b29b      	uxth	r3, r3
 801163e:	1ad3      	subs	r3, r2, r3
 8011640:	b29b      	uxth	r3, r3
 8011642:	3b01      	subs	r3, #1
 8011644:	b29b      	uxth	r3, r3
 8011646:	b218      	sxth	r0, r3
 8011648:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801164c:	b29a      	uxth	r2, r3
 801164e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011652:	b29b      	uxth	r3, r3
 8011654:	1ad3      	subs	r3, r2, r3
 8011656:	b29a      	uxth	r2, r3
 8011658:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	b29b      	uxth	r3, r3
 8011660:	b219      	sxth	r1, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8011668:	9200      	str	r2, [sp, #0]
 801166a:	895b      	ldrh	r3, [r3, #10]
 801166c:	68ba      	ldr	r2, [r7, #8]
 801166e:	f7fa fbca 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8011672:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8011676:	b29a      	uxth	r2, r3
 8011678:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801167c:	b29b      	uxth	r3, r3
 801167e:	1ad3      	subs	r3, r2, r3
 8011680:	b29a      	uxth	r2, r3
 8011682:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8011686:	1ad3      	subs	r3, r2, r3
 8011688:	b29b      	uxth	r3, r3
 801168a:	b218      	sxth	r0, r3
 801168c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8011690:	b29a      	uxth	r2, r3
 8011692:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011696:	b29b      	uxth	r3, r3
 8011698:	1ad3      	subs	r3, r2, r3
 801169a:	b29b      	uxth	r3, r3
 801169c:	3b01      	subs	r3, #1
 801169e:	b29b      	uxth	r3, r3
 80116a0:	b219      	sxth	r1, r3
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80116a8:	9200      	str	r2, [sp, #0]
 80116aa:	895b      	ldrh	r3, [r3, #10]
 80116ac:	68ba      	ldr	r2, [r7, #8]
 80116ae:	f7fa fbaa 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80116b2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80116b6:	f003 0302 	and.w	r3, r3, #2
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d045      	beq.n	801174a <lv_draw_rect_border_corner+0x554>
 80116be:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80116c2:	f003 0308 	and.w	r3, r3, #8
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d03f      	beq.n	801174a <lv_draw_rect_border_corner+0x554>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 80116ca:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80116ce:	b29a      	uxth	r2, r3
 80116d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	4413      	add	r3, r2
 80116d8:	b29a      	uxth	r2, r3
 80116da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80116de:	4413      	add	r3, r2
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	b218      	sxth	r0, r3
 80116e4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	3b01      	subs	r3, #1
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	b219      	sxth	r1, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8011700:	9200      	str	r2, [sp, #0]
 8011702:	895b      	ldrh	r3, [r3, #10]
 8011704:	68ba      	ldr	r2, [r7, #8]
 8011706:	f7fa fb7e 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 801170a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801170e:	b29a      	uxth	r2, r3
 8011710:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011714:	b29b      	uxth	r3, r3
 8011716:	4413      	add	r3, r2
 8011718:	b29b      	uxth	r3, r3
 801171a:	3301      	adds	r3, #1
 801171c:	b29b      	uxth	r3, r3
 801171e:	b218      	sxth	r0, r3
 8011720:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8011724:	b29a      	uxth	r2, r3
 8011726:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801172a:	b29b      	uxth	r3, r3
 801172c:	1ad3      	subs	r3, r2, r3
 801172e:	b29a      	uxth	r2, r3
 8011730:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8011734:	1ad3      	subs	r3, r2, r3
 8011736:	b29b      	uxth	r3, r3
 8011738:	b219      	sxth	r1, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8011740:	9200      	str	r2, [sp, #0]
 8011742:	895b      	ldrh	r3, [r3, #10]
 8011744:	68ba      	ldr	r2, [r7, #8]
 8011746:	f7fa fb5e 	bl	800be06 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 801174a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801174e:	b29b      	uxth	r3, r3
 8011750:	3301      	adds	r3, #1
 8011752:	b29b      	uxth	r3, r3
 8011754:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8011758:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 801175c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8011760:	429a      	cmp	r2, r3
 8011762:	f6ff aea1 	blt.w	80114a8 <lv_draw_rect_border_corner+0x2b2>
                                   style->body.border.color, aa_opa);
                    }
                }

                out_x_last      = cir_out.x;
 8011766:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011768:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                out_y_seg_start = out_y_seg_end;
 801176c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8011770:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
            }

            /*New step in y on the inner circle*/
            if(in_x_last != cir_in.x) {
 8011774:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011778:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801177c:	429a      	cmp	r2, r3
 801177e:	f000 81b7 	beq.w	8011af0 <lv_draw_rect_border_corner+0x8fa>
                in_y_seg_end        = cir_out.y;
 8011782:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011784:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8011788:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801178c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011790:	1ad3      	subs	r3, r2, r3
 8011792:	b29b      	uxth	r3, r3
 8011794:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
                lv_point_t aa_p;

                aa_p.x = in_x_last;
 8011798:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801179c:	82bb      	strh	r3, [r7, #20]
                aa_p.y = in_y_seg_start;
 801179e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80117a2:	82fb      	strh	r3, [r7, #22]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 80117a4:	2300      	movs	r3, #0
 80117a6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80117aa:	e193      	b.n	8011ad4 <lv_draw_rect_border_corner+0x8de>
                    lv_opa_t aa_opa;

                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 80117ac:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	dd10      	ble.n	80117d6 <lv_draw_rect_border_corner+0x5e0>
                                                                           on the first segment*/
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 80117b4:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80117b8:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 80117bc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80117c0:	4618      	mov	r0, r3
 80117c2:	f001 fe99 	bl	80134f8 <antialias_get_opa_circ>
 80117c6:	4603      	mov	r3, r0
 80117c8:	461a      	mov	r2, r3
 80117ca:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80117ce:	1a9b      	subs	r3, r3, r2
 80117d0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80117d4:	e00b      	b.n	80117ee <lv_draw_rect_border_corner+0x5f8>
                    } else {
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 80117d6:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80117da:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 80117de:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7f9 fde8 	bl	800b3b8 <lv_draw_aa_get_opa>
 80117e8:	4603      	mov	r3, r0
 80117ea:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80117ee:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80117f2:	f003 0301 	and.w	r3, r3, #1
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d025      	beq.n	8011846 <lv_draw_rect_border_corner+0x650>
 80117fa:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80117fe:	f003 0308 	and.w	r3, r3, #8
 8011802:	2b00      	cmp	r3, #0
 8011804:	d01f      	beq.n	8011846 <lv_draw_rect_border_corner+0x650>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011806:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801180a:	b29a      	uxth	r2, r3
 801180c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011810:	b29b      	uxth	r3, r3
 8011812:	4413      	add	r3, r2
 8011814:	b29b      	uxth	r3, r3
 8011816:	3b01      	subs	r3, #1
 8011818:	b29b      	uxth	r3, r3
 801181a:	b218      	sxth	r0, r3
 801181c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011820:	b29a      	uxth	r2, r3
 8011822:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011826:	b29b      	uxth	r3, r3
 8011828:	4413      	add	r3, r2
 801182a:	b29a      	uxth	r2, r3
 801182c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011830:	4413      	add	r3, r2
 8011832:	b29b      	uxth	r3, r3
 8011834:	b219      	sxth	r1, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 801183c:	9200      	str	r2, [sp, #0]
 801183e:	895b      	ldrh	r3, [r3, #10]
 8011840:	68ba      	ldr	r2, [r7, #8]
 8011842:	f7fa fae0 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8011846:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801184a:	f003 0301 	and.w	r3, r3, #1
 801184e:	2b00      	cmp	r3, #0
 8011850:	d025      	beq.n	801189e <lv_draw_rect_border_corner+0x6a8>
 8011852:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011856:	f003 0304 	and.w	r3, r3, #4
 801185a:	2b00      	cmp	r3, #0
 801185c:	d01f      	beq.n	801189e <lv_draw_rect_border_corner+0x6a8>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 801185e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8011862:	b29a      	uxth	r2, r3
 8011864:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011868:	b29b      	uxth	r3, r3
 801186a:	1ad3      	subs	r3, r2, r3
 801186c:	b29a      	uxth	r2, r3
 801186e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	b29b      	uxth	r3, r3
 8011876:	b218      	sxth	r0, r3
 8011878:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801187c:	b29a      	uxth	r2, r3
 801187e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011882:	b29b      	uxth	r3, r3
 8011884:	4413      	add	r3, r2
 8011886:	b29b      	uxth	r3, r3
 8011888:	3b01      	subs	r3, #1
 801188a:	b29b      	uxth	r3, r3
 801188c:	b219      	sxth	r1, r3
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8011894:	9200      	str	r2, [sp, #0]
 8011896:	895b      	ldrh	r3, [r3, #10]
 8011898:	68ba      	ldr	r2, [r7, #8]
 801189a:	f7fa fab4 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801189e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80118a2:	f003 0302 	and.w	r3, r3, #2
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d025      	beq.n	80118f6 <lv_draw_rect_border_corner+0x700>
 80118aa:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80118ae:	f003 0304 	and.w	r3, r3, #4
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d01f      	beq.n	80118f6 <lv_draw_rect_border_corner+0x700>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 80118b6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80118ba:	b29a      	uxth	r2, r3
 80118bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80118c0:	b29b      	uxth	r3, r3
 80118c2:	1ad3      	subs	r3, r2, r3
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	3301      	adds	r3, #1
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	b218      	sxth	r0, r3
 80118cc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80118d0:	b29a      	uxth	r2, r3
 80118d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	1ad3      	subs	r3, r2, r3
 80118da:	b29a      	uxth	r2, r3
 80118dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80118e0:	1ad3      	subs	r3, r2, r3
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	b219      	sxth	r1, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80118ec:	9200      	str	r2, [sp, #0]
 80118ee:	895b      	ldrh	r3, [r3, #10]
 80118f0:	68ba      	ldr	r2, [r7, #8]
 80118f2:	f7fa fa88 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80118f6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80118fa:	f003 0302 	and.w	r3, r3, #2
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d025      	beq.n	801194e <lv_draw_rect_border_corner+0x758>
 8011902:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011906:	f003 0308 	and.w	r3, r3, #8
 801190a:	2b00      	cmp	r3, #0
 801190c:	d01f      	beq.n	801194e <lv_draw_rect_border_corner+0x758>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 801190e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8011912:	b29a      	uxth	r2, r3
 8011914:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011918:	b29b      	uxth	r3, r3
 801191a:	4413      	add	r3, r2
 801191c:	b29a      	uxth	r2, r3
 801191e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011922:	4413      	add	r3, r2
 8011924:	b29b      	uxth	r3, r3
 8011926:	b218      	sxth	r0, r3
 8011928:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801192c:	b29a      	uxth	r2, r3
 801192e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011932:	b29b      	uxth	r3, r3
 8011934:	1ad3      	subs	r3, r2, r3
 8011936:	b29b      	uxth	r3, r3
 8011938:	3301      	adds	r3, #1
 801193a:	b29b      	uxth	r3, r3
 801193c:	b219      	sxth	r1, r3
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8011944:	9200      	str	r2, [sp, #0]
 8011946:	895b      	ldrh	r3, [r3, #10]
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	f7fa fa5c 	bl	800be06 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    /*Be sure the pixels on the middle are not drawn twice*/
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 801194e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011952:	1e5a      	subs	r2, r3, #1
 8011954:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011958:	4619      	mov	r1, r3
 801195a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801195e:	440b      	add	r3, r1
 8011960:	429a      	cmp	r2, r3
 8011962:	f000 80b0 	beq.w	8011ac6 <lv_draw_rect_border_corner+0x8d0>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8011966:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801196a:	f003 0301 	and.w	r3, r3, #1
 801196e:	2b00      	cmp	r3, #0
 8011970:	d025      	beq.n	80119be <lv_draw_rect_border_corner+0x7c8>
 8011972:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011976:	f003 0308 	and.w	r3, r3, #8
 801197a:	2b00      	cmp	r3, #0
 801197c:	d01f      	beq.n	80119be <lv_draw_rect_border_corner+0x7c8>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 801197e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011982:	b29a      	uxth	r2, r3
 8011984:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011988:	b29b      	uxth	r3, r3
 801198a:	4413      	add	r3, r2
 801198c:	b29a      	uxth	r2, r3
 801198e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011992:	4413      	add	r3, r2
 8011994:	b29b      	uxth	r3, r3
 8011996:	b218      	sxth	r0, r3
 8011998:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801199c:	b29a      	uxth	r2, r3
 801199e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80119a2:	b29b      	uxth	r3, r3
 80119a4:	4413      	add	r3, r2
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	3b01      	subs	r3, #1
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	b219      	sxth	r1, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80119b4:	9200      	str	r2, [sp, #0]
 80119b6:	895b      	ldrh	r3, [r3, #10]
 80119b8:	68ba      	ldr	r2, [r7, #8]
 80119ba:	f7fa fa24 	bl	800be06 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80119be:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80119c2:	f003 0301 	and.w	r3, r3, #1
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d025      	beq.n	8011a16 <lv_draw_rect_border_corner+0x820>
 80119ca:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80119ce:	f003 0304 	and.w	r3, r3, #4
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d01f      	beq.n	8011a16 <lv_draw_rect_border_corner+0x820>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 80119d6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80119da:	b29a      	uxth	r2, r3
 80119dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	1ad3      	subs	r3, r2, r3
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	3301      	adds	r3, #1
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	b218      	sxth	r0, r3
 80119ec:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	4413      	add	r3, r2
 80119fa:	b29a      	uxth	r2, r3
 80119fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011a00:	4413      	add	r3, r2
 8011a02:	b29b      	uxth	r3, r3
 8011a04:	b219      	sxth	r1, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8011a0c:	9200      	str	r2, [sp, #0]
 8011a0e:	895b      	ldrh	r3, [r3, #10]
 8011a10:	68ba      	ldr	r2, [r7, #8]
 8011a12:	f7fa f9f8 	bl	800be06 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8011a16:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011a1a:	f003 0302 	and.w	r3, r3, #2
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d025      	beq.n	8011a6e <lv_draw_rect_border_corner+0x878>
 8011a22:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011a26:	f003 0304 	and.w	r3, r3, #4
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d01f      	beq.n	8011a6e <lv_draw_rect_border_corner+0x878>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 8011a2e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8011a32:	b29a      	uxth	r2, r3
 8011a34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	1ad3      	subs	r3, r2, r3
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	b218      	sxth	r0, r3
 8011a48:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8011a4c:	b29a      	uxth	r2, r3
 8011a4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	1ad3      	subs	r3, r2, r3
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	3301      	adds	r3, #1
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	b219      	sxth	r1, r3
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8011a64:	9200      	str	r2, [sp, #0]
 8011a66:	895b      	ldrh	r3, [r3, #10]
 8011a68:	68ba      	ldr	r2, [r7, #8]
 8011a6a:	f7fa f9cc 	bl	800be06 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8011a6e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011a72:	f003 0302 	and.w	r3, r3, #2
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d025      	beq.n	8011ac6 <lv_draw_rect_border_corner+0x8d0>
 8011a7a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011a7e:	f003 0308 	and.w	r3, r3, #8
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d01f      	beq.n	8011ac6 <lv_draw_rect_border_corner+0x8d0>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 8011a86:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	4413      	add	r3, r2
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	3b01      	subs	r3, #1
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	b218      	sxth	r0, r3
 8011a9c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8011aa0:	b29a      	uxth	r2, r3
 8011aa2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	1ad3      	subs	r3, r2, r3
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011ab0:	1ad3      	subs	r3, r2, r3
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	b219      	sxth	r1, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8011abc:	9200      	str	r2, [sp, #0]
 8011abe:	895b      	ldrh	r3, [r3, #10]
 8011ac0:	68ba      	ldr	r2, [r7, #8]
 8011ac2:	f7fa f9a0 	bl	800be06 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 8011ac6:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	3301      	adds	r3, #1
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8011ad4:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8011ad8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8011adc:	429a      	cmp	r2, r3
 8011ade:	f6ff ae65 	blt.w	80117ac <lv_draw_rect_border_corner+0x5b6>
                                       mask, style->body.border.color, aa_opa);
                        }
                    }
                }

                in_x_last      = cir_in.x;
 8011ae2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011ae4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                in_y_seg_start = in_y_seg_end;
 8011ae8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8011aec:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
            }
        }
#endif

        /*Draw the octets to the right bottom corner*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8011af0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011af4:	f003 0301 	and.w	r3, r3, #1
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d06f      	beq.n	8011bdc <lv_draw_rect_border_corner+0x9e6>
 8011afc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011b00:	f003 0308 	and.w	r3, r3, #8
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d069      	beq.n	8011bdc <lv_draw_rect_border_corner+0x9e6>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 8011b08:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	4413      	add	r3, r2
 8011b16:	b29a      	uxth	r2, r3
 8011b18:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	b21b      	sxth	r3, r3
 8011b22:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 8011b24:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	4413      	add	r3, r2
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	b21b      	sxth	r3, r3
 8011b36:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8011b38:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011b3c:	b29a      	uxth	r2, r3
 8011b3e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	4413      	add	r3, r2
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	b21b      	sxth	r3, r3
 8011b4a:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8011b4c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	4413      	add	r3, r2
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	b21b      	sxth	r3, r3
 8011b5e:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 8011b60:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8011b64:	f107 001c 	add.w	r0, r7, #28
 8011b68:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011b6c:	68b9      	ldr	r1, [r7, #8]
 8011b6e:	f7fa f9e2 	bl	800bf36 <lv_draw_fill>

            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8011b72:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011b7c:	b29b      	uxth	r3, r3
 8011b7e:	4413      	add	r3, r2
 8011b80:	b29b      	uxth	r3, r3
 8011b82:	b21b      	sxth	r3, r3
 8011b84:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8011b86:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011b8a:	b29a      	uxth	r2, r3
 8011b8c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	4413      	add	r3, r2
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	b21b      	sxth	r3, r3
 8011b98:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8011b9a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011b9e:	b29a      	uxth	r2, r3
 8011ba0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	4413      	add	r3, r2
 8011ba8:	b29a      	uxth	r2, r3
 8011baa:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8011bae:	1ad3      	subs	r3, r2, r3
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	b21b      	sxth	r3, r3
 8011bb4:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 8011bb6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	4413      	add	r3, r2
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	b21b      	sxth	r3, r3
 8011bc8:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 8011bca:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8011bce:	f107 001c 	add.w	r0, r7, #28
 8011bd2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011bd6:	68b9      	ldr	r1, [r7, #8]
 8011bd8:	f7fa f9ad 	bl	800bf36 <lv_draw_fill>
        }

        /*Draw the octets to the left bottom corner*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8011bdc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011be0:	f003 0301 	and.w	r3, r3, #1
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d06f      	beq.n	8011cc8 <lv_draw_rect_border_corner+0xad2>
 8011be8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011bec:	f003 0304 	and.w	r3, r3, #4
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d069      	beq.n	8011cc8 <lv_draw_rect_border_corner+0xad2>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8011bf4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	1ad3      	subs	r3, r2, r3
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	b21b      	sxth	r3, r3
 8011c06:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8011c08:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	1ad3      	subs	r3, r2, r3
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	b21b      	sxth	r3, r3
 8011c1a:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 8011c1c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	4413      	add	r3, r2
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	b21b      	sxth	r3, r3
 8011c36:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 8011c38:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8011c3c:	b29a      	uxth	r2, r3
 8011c3e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	4413      	add	r3, r2
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	b21b      	sxth	r3, r3
 8011c4a:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 8011c4c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8011c50:	f107 001c 	add.w	r0, r7, #28
 8011c54:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011c58:	68b9      	ldr	r1, [r7, #8]
 8011c5a:	f7fa f96c 	bl	800bf36 <lv_draw_fill>

            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 8011c5e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8011c62:	b29a      	uxth	r2, r3
 8011c64:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	1ad3      	subs	r3, r2, r3
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	b21b      	sxth	r3, r3
 8011c70:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8011c72:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8011c76:	b29a      	uxth	r2, r3
 8011c78:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	1ad3      	subs	r3, r2, r3
 8011c80:	b29a      	uxth	r2, r3
 8011c82:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8011c86:	4413      	add	r3, r2
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	b21b      	sxth	r3, r3
 8011c8c:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8011c8e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8011c92:	b29a      	uxth	r2, r3
 8011c94:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	4413      	add	r3, r2
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	b21b      	sxth	r3, r3
 8011ca0:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8011ca2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8011ca6:	b29a      	uxth	r2, r3
 8011ca8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	4413      	add	r3, r2
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	b21b      	sxth	r3, r3
 8011cb4:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 8011cb6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8011cba:	f107 001c 	add.w	r0, r7, #28
 8011cbe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011cc2:	68b9      	ldr	r1, [r7, #8]
 8011cc4:	f7fa f937 	bl	800bf36 <lv_draw_fill>
        }

        /*Draw the octets to the left top corner*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8011cc8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011ccc:	f003 0302 	and.w	r3, r3, #2
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d07d      	beq.n	8011dd0 <lv_draw_rect_border_corner+0xbda>
 8011cd4:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011cd8:	f003 0304 	and.w	r3, r3, #4
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d077      	beq.n	8011dd0 <lv_draw_rect_border_corner+0xbda>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 8011ce0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011cea:	441a      	add	r2, r3
 8011cec:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011cf6:	1acb      	subs	r3, r1, r3
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	dd34      	ble.n	8011d66 <lv_draw_rect_border_corner+0xb70>
                /*Don't draw if the lines are common in the middle*/
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8011cfc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8011d00:	b29a      	uxth	r2, r3
 8011d02:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	1ad3      	subs	r3, r2, r3
 8011d0a:	b29b      	uxth	r3, r3
 8011d0c:	b21b      	sxth	r3, r3
 8011d0e:	83bb      	strh	r3, [r7, #28]
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8011d10:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8011d14:	b29a      	uxth	r2, r3
 8011d16:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011d1a:	b29b      	uxth	r3, r3
 8011d1c:	1ad3      	subs	r3, r2, r3
 8011d1e:	b29a      	uxth	r2, r3
 8011d20:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8011d24:	4413      	add	r3, r2
 8011d26:	b29b      	uxth	r3, r3
 8011d28:	b21b      	sxth	r3, r3
 8011d2a:	843b      	strh	r3, [r7, #32]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8011d2c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8011d30:	b29a      	uxth	r2, r3
 8011d32:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	1ad3      	subs	r3, r2, r3
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	b21b      	sxth	r3, r3
 8011d3e:	83fb      	strh	r3, [r7, #30]
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8011d40:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8011d44:	b29a      	uxth	r2, r3
 8011d46:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	b21b      	sxth	r3, r3
 8011d52:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_fill(&circ_area, mask, color, opa);
 8011d54:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8011d58:	f107 001c 	add.w	r0, r7, #28
 8011d5c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011d60:	68b9      	ldr	r1, [r7, #8]
 8011d62:	f7fa f8e8 	bl	800bf36 <lv_draw_fill>
            }

            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8011d66:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8011d6a:	b29a      	uxth	r2, r3
 8011d6c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	1ad3      	subs	r3, r2, r3
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	b21b      	sxth	r3, r3
 8011d78:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8011d7a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	1ad3      	subs	r3, r2, r3
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	b21b      	sxth	r3, r3
 8011d8c:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 8011d8e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8011d92:	b29a      	uxth	r2, r3
 8011d94:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	1ad3      	subs	r3, r2, r3
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	b21b      	sxth	r3, r3
 8011da0:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 8011da2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	b29a      	uxth	r2, r3
 8011db2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8011db6:	4413      	add	r3, r2
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	b21b      	sxth	r3, r3
 8011dbc:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 8011dbe:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8011dc2:	f107 001c 	add.w	r0, r7, #28
 8011dc6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011dca:	68b9      	ldr	r1, [r7, #8]
 8011dcc:	f7fa f8b3 	bl	800bf36 <lv_draw_fill>
        }

        /*Draw the octets to the right top corner*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8011dd0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011dd4:	f003 0302 	and.w	r3, r3, #2
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d07d      	beq.n	8011ed8 <lv_draw_rect_border_corner+0xce2>
 8011ddc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011de0:	f003 0308 	and.w	r3, r3, #8
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d077      	beq.n	8011ed8 <lv_draw_rect_border_corner+0xce2>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8011de8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8011dec:	b29a      	uxth	r2, r3
 8011dee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	4413      	add	r3, r2
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	b21b      	sxth	r3, r3
 8011dfa:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8011dfc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8011e00:	b29a      	uxth	r2, r3
 8011e02:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	4413      	add	r3, r2
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	b21b      	sxth	r3, r3
 8011e0e:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8011e10:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	1ad3      	subs	r3, r2, r3
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	b21b      	sxth	r3, r3
 8011e22:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 8011e24:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	b29a      	uxth	r2, r3
 8011e34:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8011e38:	4413      	add	r3, r2
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	b21b      	sxth	r3, r3
 8011e3e:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 8011e40:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8011e44:	f107 001c 	add.w	r0, r7, #28
 8011e48:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011e4c:	68b9      	ldr	r1, [r7, #8]
 8011e4e:	f7fa f872 	bl	800bf36 <lv_draw_fill>

            /*Don't draw if the lines are common in the middle*/
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 8011e52:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011e56:	461a      	mov	r2, r3
 8011e58:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011e5c:	441a      	add	r2, r3
 8011e5e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8011e62:	4619      	mov	r1, r3
 8011e64:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011e68:	1acb      	subs	r3, r1, r3
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	dd34      	ble.n	8011ed8 <lv_draw_rect_border_corner+0xce2>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8011e6e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011e78:	b29b      	uxth	r3, r3
 8011e7a:	4413      	add	r3, r2
 8011e7c:	b29a      	uxth	r2, r3
 8011e7e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8011e82:	1ad3      	subs	r3, r2, r3
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	b21b      	sxth	r3, r3
 8011e88:	83bb      	strh	r3, [r7, #28]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 8011e8a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	4413      	add	r3, r2
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	b21b      	sxth	r3, r3
 8011e9c:	843b      	strh	r3, [r7, #32]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8011e9e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011ea8:	b29b      	uxth	r3, r3
 8011eaa:	1ad3      	subs	r3, r2, r3
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	b21b      	sxth	r3, r3
 8011eb0:	83fb      	strh	r3, [r7, #30]
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8011eb2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8011eb6:	b29a      	uxth	r2, r3
 8011eb8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011ebc:	b29b      	uxth	r3, r3
 8011ebe:	1ad3      	subs	r3, r2, r3
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	b21b      	sxth	r3, r3
 8011ec4:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_fill(&circ_area, mask, color, opa);
 8011ec6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8011eca:	f107 001c 	add.w	r0, r7, #28
 8011ece:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011ed2:	68b9      	ldr	r1, [r7, #8]
 8011ed4:	f7fa f82f 	bl	800bf36 <lv_draw_fill>
            }
        }
        lv_circ_next(&cir_out, &tmp_out);
 8011ed8:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8011edc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f003 fe6a 	bl	8015bbc <lv_circ_next>

        /*The internal circle will be ready faster
         * so check it! */
        if(cir_in.y < cir_in.x) {
 8011ee8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8011eec:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	da07      	bge.n	8011f04 <lv_draw_rect_border_corner+0xd0e>
            lv_circ_next(&cir_in, &tmp_in);
 8011ef4:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8011ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011efc:	4611      	mov	r1, r2
 8011efe:	4618      	mov	r0, r3
 8011f00:	f003 fe5c 	bl	8015bbc <lv_circ_next>
    while(cir_out.y <= cir_out.x) {
 8011f04:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8011f08:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	f77f aa85 	ble.w	801141c <lv_draw_rect_border_corner+0x226>
        }
    }

#if LV_ANTIALIAS
    if(aa) {
 8011f12:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	f000 83b0 	beq.w	801267c <lv_draw_rect_border_corner+0x1486>
        /*Last parts of the outer anti-alias*/
        out_y_seg_end       = cir_out.y;
 8011f1c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011f1e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011f22:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8011f26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011f2a:	1ad3      	subs	r3, r2, r3
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lv_point_t aa_p;

        aa_p.x = out_x_last;
 8011f32:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011f36:	823b      	strh	r3, [r7, #16]
        aa_p.y = out_y_seg_start;
 8011f38:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011f3c:	827b      	strh	r3, [r7, #18]

        lv_coord_t i;
        for(i = 0; i < seg_size; i++) {
 8011f3e:	2300      	movs	r3, #0
 8011f40:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8011f44:	e146      	b.n	80121d4 <lv_draw_rect_border_corner+0xfde>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8011f46:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8011f4a:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 8011f4e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7f9 fa30 	bl	800b3b8 <lv_draw_aa_get_opa>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8011f60:	1a9b      	subs	r3, r3, r2
 8011f62:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8011f66:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011f6a:	f003 0301 	and.w	r3, r3, #1
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d045      	beq.n	8011ffe <lv_draw_rect_border_corner+0xe08>
 8011f72:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8011f76:	f003 0308 	and.w	r3, r3, #8
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d03f      	beq.n	8011ffe <lv_draw_rect_border_corner+0xe08>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011f7e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011f82:	b29a      	uxth	r2, r3
 8011f84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	4413      	add	r3, r2
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	3301      	adds	r3, #1
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	b218      	sxth	r0, r3
 8011f94:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	4413      	add	r3, r2
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8011fa8:	4413      	add	r3, r2
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	b219      	sxth	r1, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8011fb4:	9200      	str	r2, [sp, #0]
 8011fb6:	895b      	ldrh	r3, [r3, #10]
 8011fb8:	68ba      	ldr	r2, [r7, #8]
 8011fba:	f7f9 ff24 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011fbe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8011fc2:	b29a      	uxth	r2, r3
 8011fc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	4413      	add	r3, r2
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8011fd2:	4413      	add	r3, r2
 8011fd4:	b29b      	uxth	r3, r3
 8011fd6:	b218      	sxth	r0, r3
 8011fd8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011fdc:	b29a      	uxth	r2, r3
 8011fde:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	4413      	add	r3, r2
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	3301      	adds	r3, #1
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	b219      	sxth	r1, r3
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8011ff4:	9200      	str	r2, [sp, #0]
 8011ff6:	895b      	ldrh	r3, [r3, #10]
 8011ff8:	68ba      	ldr	r2, [r7, #8]
 8011ffa:	f7f9 ff04 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8011ffe:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012002:	f003 0301 	and.w	r3, r3, #1
 8012006:	2b00      	cmp	r3, #0
 8012008:	d045      	beq.n	8012096 <lv_draw_rect_border_corner+0xea0>
 801200a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801200e:	f003 0304 	and.w	r3, r3, #4
 8012012:	2b00      	cmp	r3, #0
 8012014:	d03f      	beq.n	8012096 <lv_draw_rect_border_corner+0xea0>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8012016:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801201a:	b29a      	uxth	r2, r3
 801201c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012020:	b29b      	uxth	r3, r3
 8012022:	1ad3      	subs	r3, r2, r3
 8012024:	b29a      	uxth	r2, r3
 8012026:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801202a:	1ad3      	subs	r3, r2, r3
 801202c:	b29b      	uxth	r3, r3
 801202e:	b218      	sxth	r0, r3
 8012030:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012034:	b29a      	uxth	r2, r3
 8012036:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801203a:	b29b      	uxth	r3, r3
 801203c:	4413      	add	r3, r2
 801203e:	b29b      	uxth	r3, r3
 8012040:	3301      	adds	r3, #1
 8012042:	b29b      	uxth	r3, r3
 8012044:	b219      	sxth	r1, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 801204c:	9200      	str	r2, [sp, #0]
 801204e:	895b      	ldrh	r3, [r3, #10]
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	f7f9 fed8 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8012056:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801205a:	b29a      	uxth	r2, r3
 801205c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012060:	b29b      	uxth	r3, r3
 8012062:	1ad3      	subs	r3, r2, r3
 8012064:	b29b      	uxth	r3, r3
 8012066:	3b01      	subs	r3, #1
 8012068:	b29b      	uxth	r3, r3
 801206a:	b218      	sxth	r0, r3
 801206c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012070:	b29a      	uxth	r2, r3
 8012072:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012076:	b29b      	uxth	r3, r3
 8012078:	4413      	add	r3, r2
 801207a:	b29a      	uxth	r2, r3
 801207c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012080:	4413      	add	r3, r2
 8012082:	b29b      	uxth	r3, r3
 8012084:	b219      	sxth	r1, r3
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 801208c:	9200      	str	r2, [sp, #0]
 801208e:	895b      	ldrh	r3, [r3, #10]
 8012090:	68ba      	ldr	r2, [r7, #8]
 8012092:	f7f9 feb8 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012096:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801209a:	f003 0302 	and.w	r3, r3, #2
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d045      	beq.n	801212e <lv_draw_rect_border_corner+0xf38>
 80120a2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80120a6:	f003 0304 	and.w	r3, r3, #4
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d03f      	beq.n	801212e <lv_draw_rect_border_corner+0xf38>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 80120ae:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80120b2:	b29a      	uxth	r2, r3
 80120b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80120b8:	b29b      	uxth	r3, r3
 80120ba:	1ad3      	subs	r3, r2, r3
 80120bc:	b29b      	uxth	r3, r3
 80120be:	3b01      	subs	r3, #1
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	b218      	sxth	r0, r3
 80120c4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	1ad3      	subs	r3, r2, r3
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80120d8:	1ad3      	subs	r3, r2, r3
 80120da:	b29b      	uxth	r3, r3
 80120dc:	b219      	sxth	r1, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80120e4:	9200      	str	r2, [sp, #0]
 80120e6:	895b      	ldrh	r3, [r3, #10]
 80120e8:	68ba      	ldr	r2, [r7, #8]
 80120ea:	f7f9 fe8c 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 80120ee:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	1ad3      	subs	r3, r2, r3
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012102:	1ad3      	subs	r3, r2, r3
 8012104:	b29b      	uxth	r3, r3
 8012106:	b218      	sxth	r0, r3
 8012108:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801210c:	b29a      	uxth	r2, r3
 801210e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012112:	b29b      	uxth	r3, r3
 8012114:	1ad3      	subs	r3, r2, r3
 8012116:	b29b      	uxth	r3, r3
 8012118:	3b01      	subs	r3, #1
 801211a:	b29b      	uxth	r3, r3
 801211c:	b219      	sxth	r1, r3
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8012124:	9200      	str	r2, [sp, #0]
 8012126:	895b      	ldrh	r3, [r3, #10]
 8012128:	68ba      	ldr	r2, [r7, #8]
 801212a:	f7f9 fe6c 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 801212e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012132:	f003 0302 	and.w	r3, r3, #2
 8012136:	2b00      	cmp	r3, #0
 8012138:	d045      	beq.n	80121c6 <lv_draw_rect_border_corner+0xfd0>
 801213a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801213e:	f003 0308 	and.w	r3, r3, #8
 8012142:	2b00      	cmp	r3, #0
 8012144:	d03f      	beq.n	80121c6 <lv_draw_rect_border_corner+0xfd0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8012146:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801214a:	b29a      	uxth	r2, r3
 801214c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012150:	b29b      	uxth	r3, r3
 8012152:	4413      	add	r3, r2
 8012154:	b29a      	uxth	r2, r3
 8012156:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801215a:	4413      	add	r3, r2
 801215c:	b29b      	uxth	r3, r3
 801215e:	b218      	sxth	r0, r3
 8012160:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012164:	b29a      	uxth	r2, r3
 8012166:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801216a:	b29b      	uxth	r3, r3
 801216c:	1ad3      	subs	r3, r2, r3
 801216e:	b29b      	uxth	r3, r3
 8012170:	3b01      	subs	r3, #1
 8012172:	b29b      	uxth	r3, r3
 8012174:	b219      	sxth	r1, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 801217c:	9200      	str	r2, [sp, #0]
 801217e:	895b      	ldrh	r3, [r3, #10]
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	f7f9 fe40 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8012186:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801218a:	b29a      	uxth	r2, r3
 801218c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012190:	b29b      	uxth	r3, r3
 8012192:	4413      	add	r3, r2
 8012194:	b29b      	uxth	r3, r3
 8012196:	3301      	adds	r3, #1
 8012198:	b29b      	uxth	r3, r3
 801219a:	b218      	sxth	r0, r3
 801219c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80121a0:	b29a      	uxth	r2, r3
 80121a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	1ad3      	subs	r3, r2, r3
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80121b0:	1ad3      	subs	r3, r2, r3
 80121b2:	b29b      	uxth	r3, r3
 80121b4:	b219      	sxth	r1, r3
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80121bc:	9200      	str	r2, [sp, #0]
 80121be:	895b      	ldrh	r3, [r3, #10]
 80121c0:	68ba      	ldr	r2, [r7, #8]
 80121c2:	f7f9 fe20 	bl	800be06 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 80121c6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	3301      	adds	r3, #1
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80121d4:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 80121d8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80121dc:	429a      	cmp	r2, r3
 80121de:	f6ff aeb2 	blt.w	8011f46 <lv_draw_rect_border_corner+0xd50>
                           style->body.border.color, aa_opa);
            }
        }

        /*In some cases the last pixel in the outer middle is not drawn*/
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 80121e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80121e6:	461a      	mov	r2, r3
 80121e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121ec:	1ad3      	subs	r3, r2, r3
 80121ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80121f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80121f6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80121fa:	429a      	cmp	r2, r3
 80121fc:	f040 80a3 	bne.w	8012346 <lv_draw_rect_border_corner+0x1150>
            aa_p.x = out_x_last;
 8012200:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012204:	823b      	strh	r3, [r7, #16]
            aa_p.y = out_x_last;
 8012206:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801220a:	827b      	strh	r3, [r7, #18]

            lv_opa_t aa_opa = opa >> 1;
 801220c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8012210:	085b      	lsrs	r3, r3, #1
 8012212:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012216:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801221a:	f003 0301 	and.w	r3, r3, #1
 801221e:	2b00      	cmp	r3, #0
 8012220:	d01f      	beq.n	8012262 <lv_draw_rect_border_corner+0x106c>
 8012222:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012226:	f003 0308 	and.w	r3, r3, #8
 801222a:	2b00      	cmp	r3, #0
 801222c:	d019      	beq.n	8012262 <lv_draw_rect_border_corner+0x106c>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 801222e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8012232:	b29a      	uxth	r2, r3
 8012234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012238:	b29b      	uxth	r3, r3
 801223a:	4413      	add	r3, r2
 801223c:	b29b      	uxth	r3, r3
 801223e:	b218      	sxth	r0, r3
 8012240:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8012244:	b29a      	uxth	r2, r3
 8012246:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801224a:	b29b      	uxth	r3, r3
 801224c:	4413      	add	r3, r2
 801224e:	b29b      	uxth	r3, r3
 8012250:	b219      	sxth	r1, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8012258:	9200      	str	r2, [sp, #0]
 801225a:	895b      	ldrh	r3, [r3, #10]
 801225c:	68ba      	ldr	r2, [r7, #8]
 801225e:	f7f9 fdd2 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012262:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012266:	f003 0301 	and.w	r3, r3, #1
 801226a:	2b00      	cmp	r3, #0
 801226c:	d01f      	beq.n	80122ae <lv_draw_rect_border_corner+0x10b8>
 801226e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012272:	f003 0304 	and.w	r3, r3, #4
 8012276:	2b00      	cmp	r3, #0
 8012278:	d019      	beq.n	80122ae <lv_draw_rect_border_corner+0x10b8>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 801227a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801227e:	b29a      	uxth	r2, r3
 8012280:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012284:	b29b      	uxth	r3, r3
 8012286:	1ad3      	subs	r3, r2, r3
 8012288:	b29b      	uxth	r3, r3
 801228a:	b218      	sxth	r0, r3
 801228c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012290:	b29a      	uxth	r2, r3
 8012292:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012296:	b29b      	uxth	r3, r3
 8012298:	4413      	add	r3, r2
 801229a:	b29b      	uxth	r3, r3
 801229c:	b219      	sxth	r1, r3
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80122a4:	9200      	str	r2, [sp, #0]
 80122a6:	895b      	ldrh	r3, [r3, #10]
 80122a8:	68ba      	ldr	r2, [r7, #8]
 80122aa:	f7f9 fdac 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80122ae:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80122b2:	f003 0302 	and.w	r3, r3, #2
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d01f      	beq.n	80122fa <lv_draw_rect_border_corner+0x1104>
 80122ba:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80122be:	f003 0304 	and.w	r3, r3, #4
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d019      	beq.n	80122fa <lv_draw_rect_border_corner+0x1104>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 80122c6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	b218      	sxth	r0, r3
 80122d8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80122dc:	b29a      	uxth	r2, r3
 80122de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	b219      	sxth	r1, r3
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80122f0:	9200      	str	r2, [sp, #0]
 80122f2:	895b      	ldrh	r3, [r3, #10]
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	f7f9 fd86 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80122fa:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80122fe:	f003 0302 	and.w	r3, r3, #2
 8012302:	2b00      	cmp	r3, #0
 8012304:	d01f      	beq.n	8012346 <lv_draw_rect_border_corner+0x1150>
 8012306:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801230a:	f003 0308 	and.w	r3, r3, #8
 801230e:	2b00      	cmp	r3, #0
 8012310:	d019      	beq.n	8012346 <lv_draw_rect_border_corner+0x1150>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 8012312:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8012316:	b29a      	uxth	r2, r3
 8012318:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801231c:	b29b      	uxth	r3, r3
 801231e:	4413      	add	r3, r2
 8012320:	b29b      	uxth	r3, r3
 8012322:	b218      	sxth	r0, r3
 8012324:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8012328:	b29a      	uxth	r2, r3
 801232a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801232e:	b29b      	uxth	r3, r3
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	b29b      	uxth	r3, r3
 8012334:	b219      	sxth	r1, r3
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 801233c:	9200      	str	r2, [sp, #0]
 801233e:	895b      	ldrh	r3, [r3, #10]
 8012340:	68ba      	ldr	r2, [r7, #8]
 8012342:	f7f9 fd60 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }
        }

        /*Last parts of the inner anti-alias*/
        in_y_seg_end = cir_in.y;
 8012346:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012348:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        aa_p.x       = in_x_last;
 801234c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8012350:	823b      	strh	r3, [r7, #16]
        aa_p.y       = in_y_seg_start;
 8012352:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8012356:	827b      	strh	r3, [r7, #18]
        seg_size     = in_y_seg_end - in_y_seg_start;
 8012358:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801235c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8012360:	1ad3      	subs	r3, r2, r3
 8012362:	b29b      	uxth	r3, r3
 8012364:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        for(i = 0; i < seg_size; i++) {
 8012368:	2300      	movs	r3, #0
 801236a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801236e:	e17e      	b.n	801266e <lv_draw_rect_border_corner+0x1478>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8012370:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8012374:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 8012378:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801237c:	4618      	mov	r0, r3
 801237e:	f7f9 f81b 	bl	800b3b8 <lv_draw_aa_get_opa>
 8012382:	4603      	mov	r3, r0
 8012384:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012388:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801238c:	f003 0301 	and.w	r3, r3, #1
 8012390:	2b00      	cmp	r3, #0
 8012392:	d025      	beq.n	80123e0 <lv_draw_rect_border_corner+0x11ea>
 8012394:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012398:	f003 0308 	and.w	r3, r3, #8
 801239c:	2b00      	cmp	r3, #0
 801239e:	d01f      	beq.n	80123e0 <lv_draw_rect_border_corner+0x11ea>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80123a0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80123a4:	b29a      	uxth	r2, r3
 80123a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	4413      	add	r3, r2
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	3b01      	subs	r3, #1
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	b218      	sxth	r0, r3
 80123b6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	4413      	add	r3, r2
 80123c4:	b29a      	uxth	r2, r3
 80123c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80123ca:	4413      	add	r3, r2
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	b219      	sxth	r1, r3
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80123d6:	9200      	str	r2, [sp, #0]
 80123d8:	895b      	ldrh	r3, [r3, #10]
 80123da:	68ba      	ldr	r2, [r7, #8]
 80123dc:	f7f9 fd13 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80123e0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80123e4:	f003 0301 	and.w	r3, r3, #1
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d025      	beq.n	8012438 <lv_draw_rect_border_corner+0x1242>
 80123ec:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80123f0:	f003 0304 	and.w	r3, r3, #4
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d01f      	beq.n	8012438 <lv_draw_rect_border_corner+0x1242>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 80123f8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80123fc:	b29a      	uxth	r2, r3
 80123fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012402:	b29b      	uxth	r3, r3
 8012404:	1ad3      	subs	r3, r2, r3
 8012406:	b29a      	uxth	r2, r3
 8012408:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	b29b      	uxth	r3, r3
 8012410:	b218      	sxth	r0, r3
 8012412:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8012416:	b29a      	uxth	r2, r3
 8012418:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801241c:	b29b      	uxth	r3, r3
 801241e:	4413      	add	r3, r2
 8012420:	b29b      	uxth	r3, r3
 8012422:	3b01      	subs	r3, #1
 8012424:	b29b      	uxth	r3, r3
 8012426:	b219      	sxth	r1, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801242e:	9200      	str	r2, [sp, #0]
 8012430:	895b      	ldrh	r3, [r3, #10]
 8012432:	68ba      	ldr	r2, [r7, #8]
 8012434:	f7f9 fce7 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012438:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801243c:	f003 0302 	and.w	r3, r3, #2
 8012440:	2b00      	cmp	r3, #0
 8012442:	d025      	beq.n	8012490 <lv_draw_rect_border_corner+0x129a>
 8012444:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012448:	f003 0304 	and.w	r3, r3, #4
 801244c:	2b00      	cmp	r3, #0
 801244e:	d01f      	beq.n	8012490 <lv_draw_rect_border_corner+0x129a>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012450:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8012454:	b29a      	uxth	r2, r3
 8012456:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801245a:	b29b      	uxth	r3, r3
 801245c:	1ad3      	subs	r3, r2, r3
 801245e:	b29b      	uxth	r3, r3
 8012460:	3301      	adds	r3, #1
 8012462:	b29b      	uxth	r3, r3
 8012464:	b218      	sxth	r0, r3
 8012466:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801246a:	b29a      	uxth	r2, r3
 801246c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012470:	b29b      	uxth	r3, r3
 8012472:	1ad3      	subs	r3, r2, r3
 8012474:	b29a      	uxth	r2, r3
 8012476:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801247a:	1ad3      	subs	r3, r2, r3
 801247c:	b29b      	uxth	r3, r3
 801247e:	b219      	sxth	r1, r3
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8012486:	9200      	str	r2, [sp, #0]
 8012488:	895b      	ldrh	r3, [r3, #10]
 801248a:	68ba      	ldr	r2, [r7, #8]
 801248c:	f7f9 fcbb 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012490:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012494:	f003 0302 	and.w	r3, r3, #2
 8012498:	2b00      	cmp	r3, #0
 801249a:	d025      	beq.n	80124e8 <lv_draw_rect_border_corner+0x12f2>
 801249c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80124a0:	f003 0308 	and.w	r3, r3, #8
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d01f      	beq.n	80124e8 <lv_draw_rect_border_corner+0x12f2>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 80124a8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80124ac:	b29a      	uxth	r2, r3
 80124ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	4413      	add	r3, r2
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80124bc:	4413      	add	r3, r2
 80124be:	b29b      	uxth	r3, r3
 80124c0:	b218      	sxth	r0, r3
 80124c2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80124c6:	b29a      	uxth	r2, r3
 80124c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	1ad3      	subs	r3, r2, r3
 80124d0:	b29b      	uxth	r3, r3
 80124d2:	3301      	adds	r3, #1
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	b219      	sxth	r1, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80124de:	9200      	str	r2, [sp, #0]
 80124e0:	895b      	ldrh	r3, [r3, #10]
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	f7f9 fc8f 	bl	800be06 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 80124e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80124ec:	1e5a      	subs	r2, r3, #1
 80124ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80124f2:	4619      	mov	r1, r3
 80124f4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80124f8:	440b      	add	r3, r1
 80124fa:	429a      	cmp	r2, r3
 80124fc:	f000 80b0 	beq.w	8012660 <lv_draw_rect_border_corner+0x146a>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012500:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012504:	f003 0301 	and.w	r3, r3, #1
 8012508:	2b00      	cmp	r3, #0
 801250a:	d025      	beq.n	8012558 <lv_draw_rect_border_corner+0x1362>
 801250c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012510:	f003 0308 	and.w	r3, r3, #8
 8012514:	2b00      	cmp	r3, #0
 8012516:	d01f      	beq.n	8012558 <lv_draw_rect_border_corner+0x1362>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 8012518:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801251c:	b29a      	uxth	r2, r3
 801251e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012522:	b29b      	uxth	r3, r3
 8012524:	4413      	add	r3, r2
 8012526:	b29a      	uxth	r2, r3
 8012528:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801252c:	4413      	add	r3, r2
 801252e:	b29b      	uxth	r3, r3
 8012530:	b218      	sxth	r0, r3
 8012532:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8012536:	b29a      	uxth	r2, r3
 8012538:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801253c:	b29b      	uxth	r3, r3
 801253e:	4413      	add	r3, r2
 8012540:	b29b      	uxth	r3, r3
 8012542:	3b01      	subs	r3, #1
 8012544:	b29b      	uxth	r3, r3
 8012546:	b219      	sxth	r1, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801254e:	9200      	str	r2, [sp, #0]
 8012550:	895b      	ldrh	r3, [r3, #10]
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	f7f9 fc57 	bl	800be06 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012558:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801255c:	f003 0301 	and.w	r3, r3, #1
 8012560:	2b00      	cmp	r3, #0
 8012562:	d025      	beq.n	80125b0 <lv_draw_rect_border_corner+0x13ba>
 8012564:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012568:	f003 0304 	and.w	r3, r3, #4
 801256c:	2b00      	cmp	r3, #0
 801256e:	d01f      	beq.n	80125b0 <lv_draw_rect_border_corner+0x13ba>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8012570:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8012574:	b29a      	uxth	r2, r3
 8012576:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801257a:	b29b      	uxth	r3, r3
 801257c:	1ad3      	subs	r3, r2, r3
 801257e:	b29b      	uxth	r3, r3
 8012580:	3301      	adds	r3, #1
 8012582:	b29b      	uxth	r3, r3
 8012584:	b218      	sxth	r0, r3
 8012586:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801258a:	b29a      	uxth	r2, r3
 801258c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012590:	b29b      	uxth	r3, r3
 8012592:	4413      	add	r3, r2
 8012594:	b29a      	uxth	r2, r3
 8012596:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801259a:	4413      	add	r3, r2
 801259c:	b29b      	uxth	r3, r3
 801259e:	b219      	sxth	r1, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80125a6:	9200      	str	r2, [sp, #0]
 80125a8:	895b      	ldrh	r3, [r3, #10]
 80125aa:	68ba      	ldr	r2, [r7, #8]
 80125ac:	f7f9 fc2b 	bl	800be06 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80125b0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80125b4:	f003 0302 	and.w	r3, r3, #2
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d025      	beq.n	8012608 <lv_draw_rect_border_corner+0x1412>
 80125bc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80125c0:	f003 0304 	and.w	r3, r3, #4
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d01f      	beq.n	8012608 <lv_draw_rect_border_corner+0x1412>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 80125c8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80125cc:	b29a      	uxth	r2, r3
 80125ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	1ad3      	subs	r3, r2, r3
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80125dc:	1ad3      	subs	r3, r2, r3
 80125de:	b29b      	uxth	r3, r3
 80125e0:	b218      	sxth	r0, r3
 80125e2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80125e6:	b29a      	uxth	r2, r3
 80125e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	1ad3      	subs	r3, r2, r3
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	3301      	adds	r3, #1
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	b219      	sxth	r1, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80125fe:	9200      	str	r2, [sp, #0]
 8012600:	895b      	ldrh	r3, [r3, #10]
 8012602:	68ba      	ldr	r2, [r7, #8]
 8012604:	f7f9 fbff 	bl	800be06 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012608:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801260c:	f003 0302 	and.w	r3, r3, #2
 8012610:	2b00      	cmp	r3, #0
 8012612:	d025      	beq.n	8012660 <lv_draw_rect_border_corner+0x146a>
 8012614:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8012618:	f003 0308 	and.w	r3, r3, #8
 801261c:	2b00      	cmp	r3, #0
 801261e:	d01f      	beq.n	8012660 <lv_draw_rect_border_corner+0x146a>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8012620:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8012624:	b29a      	uxth	r2, r3
 8012626:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801262a:	b29b      	uxth	r3, r3
 801262c:	4413      	add	r3, r2
 801262e:	b29b      	uxth	r3, r3
 8012630:	3b01      	subs	r3, #1
 8012632:	b29b      	uxth	r3, r3
 8012634:	b218      	sxth	r0, r3
 8012636:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801263a:	b29a      	uxth	r2, r3
 801263c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012640:	b29b      	uxth	r3, r3
 8012642:	1ad3      	subs	r3, r2, r3
 8012644:	b29a      	uxth	r2, r3
 8012646:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801264a:	1ad3      	subs	r3, r2, r3
 801264c:	b29b      	uxth	r3, r3
 801264e:	b219      	sxth	r1, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8012656:	9200      	str	r2, [sp, #0]
 8012658:	895b      	ldrh	r3, [r3, #10]
 801265a:	68ba      	ldr	r2, [r7, #8]
 801265c:	f7f9 fbd3 	bl	800be06 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 8012660:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8012664:	b29b      	uxth	r3, r3
 8012666:	3301      	adds	r3, #1
 8012668:	b29b      	uxth	r3, r3
 801266a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801266e:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8012672:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012676:	429a      	cmp	r2, r3
 8012678:	f6ff ae7a 	blt.w	8012370 <lv_draw_rect_border_corner+0x117a>
                }
            }
        }
    }
#endif
}
 801267c:	bf00      	nop
 801267e:	3778      	adds	r7, #120	; 0x78
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <lv_draw_shadow>:
 * @param mask pointer to a mask area (from the design functions)
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_shadow(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                           lv_opa_t opa_scale)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b088      	sub	sp, #32
 8012688:	af00      	add	r7, sp, #0
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	60b9      	str	r1, [r7, #8]
 801268e:	607a      	str	r2, [r7, #4]
 8012690:	70fb      	strb	r3, [r7, #3]
    /* If mask is in the middle of cords do not draw shadow*/
    lv_coord_t radius = style->body.radius;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	88db      	ldrh	r3, [r3, #6]
 8012696:	83fb      	strh	r3, [r7, #30]
    lv_coord_t width  = lv_area_get_width(coords);
 8012698:	68f8      	ldr	r0, [r7, #12]
 801269a:	f7fd f844 	bl	800f726 <lv_area_get_width>
 801269e:	4603      	mov	r3, r0
 80126a0:	83bb      	strh	r3, [r7, #28]
    lv_coord_t height = lv_area_get_height(coords);
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	f7fd f856 	bl	800f754 <lv_area_get_height>
 80126a8:	4603      	mov	r3, r0
 80126aa:	837b      	strh	r3, [r7, #26]
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 80126ac:	8bfb      	ldrh	r3, [r7, #30]
 80126ae:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80126b2:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80126b6:	4618      	mov	r0, r3
 80126b8:	f000 fedc 	bl	8013474 <lv_draw_cont_radius_corr>
 80126bc:	4603      	mov	r3, r0
 80126be:	83fb      	strh	r3, [r7, #30]
    lv_area_t area_tmp;

    /*Check horizontally without radius*/
    lv_area_copy(&area_tmp, coords);
 80126c0:	f107 0310 	add.w	r3, r7, #16
 80126c4:	68f9      	ldr	r1, [r7, #12]
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fd f81f 	bl	800f70a <lv_area_copy>
    area_tmp.x1 += radius;
 80126cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80126d0:	b29a      	uxth	r2, r3
 80126d2:	8bfb      	ldrh	r3, [r7, #30]
 80126d4:	4413      	add	r3, r2
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	b21b      	sxth	r3, r3
 80126da:	823b      	strh	r3, [r7, #16]
    area_tmp.x2 -= radius;
 80126dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80126e0:	b29a      	uxth	r2, r3
 80126e2:	8bfb      	ldrh	r3, [r7, #30]
 80126e4:	1ad3      	subs	r3, r2, r3
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	b21b      	sxth	r3, r3
 80126ea:	82bb      	strh	r3, [r7, #20]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80126ec:	f107 0310 	add.w	r3, r7, #16
 80126f0:	4619      	mov	r1, r3
 80126f2:	68b8      	ldr	r0, [r7, #8]
 80126f4:	f003 fa03 	bl	8015afe <lv_area_is_in>
 80126f8:	4603      	mov	r3, r0
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d134      	bne.n	8012768 <lv_draw_shadow+0xe4>

    /*Check vertically without radius*/
    lv_area_copy(&area_tmp, coords);
 80126fe:	f107 0310 	add.w	r3, r7, #16
 8012702:	68f9      	ldr	r1, [r7, #12]
 8012704:	4618      	mov	r0, r3
 8012706:	f7fd f800 	bl	800f70a <lv_area_copy>
    area_tmp.y1 += radius;
 801270a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801270e:	b29a      	uxth	r2, r3
 8012710:	8bfb      	ldrh	r3, [r7, #30]
 8012712:	4413      	add	r3, r2
 8012714:	b29b      	uxth	r3, r3
 8012716:	b21b      	sxth	r3, r3
 8012718:	827b      	strh	r3, [r7, #18]
    area_tmp.y2 -= radius;
 801271a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801271e:	b29a      	uxth	r2, r3
 8012720:	8bfb      	ldrh	r3, [r7, #30]
 8012722:	1ad3      	subs	r3, r2, r3
 8012724:	b29b      	uxth	r3, r3
 8012726:	b21b      	sxth	r3, r3
 8012728:	82fb      	strh	r3, [r7, #22]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 801272a:	f107 0310 	add.w	r3, r7, #16
 801272e:	4619      	mov	r1, r3
 8012730:	68b8      	ldr	r0, [r7, #8]
 8012732:	f003 f9e4 	bl	8015afe <lv_area_is_in>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d117      	bne.n	801276c <lv_draw_shadow+0xe8>

    if(style->body.shadow.type == LV_SHADOW_FULL) {
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	7d1b      	ldrb	r3, [r3, #20]
 8012740:	2b01      	cmp	r3, #1
 8012742:	d106      	bne.n	8012752 <lv_draw_shadow+0xce>
        lv_draw_shadow_full(coords, mask, style, opa_scale);
 8012744:	78fb      	ldrb	r3, [r7, #3]
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	68b9      	ldr	r1, [r7, #8]
 801274a:	68f8      	ldr	r0, [r7, #12]
 801274c:	f000 f812 	bl	8012774 <lv_draw_shadow_full>
 8012750:	e00d      	b.n	801276e <lv_draw_shadow+0xea>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	7d1b      	ldrb	r3, [r3, #20]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d109      	bne.n	801276e <lv_draw_shadow+0xea>
        lv_draw_shadow_bottom(coords, mask, style, opa_scale);
 801275a:	78fb      	ldrb	r3, [r7, #3]
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	68b9      	ldr	r1, [r7, #8]
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	f000 fb2e 	bl	8012dc2 <lv_draw_shadow_bottom>
 8012766:	e002      	b.n	801276e <lv_draw_shadow+0xea>
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8012768:	bf00      	nop
 801276a:	e000      	b.n	801276e <lv_draw_shadow+0xea>
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 801276c:	bf00      	nop
    }
}
 801276e:	3720      	adds	r7, #32
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <lv_draw_shadow_full>:

static void lv_draw_shadow_full(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                lv_opa_t opa_scale)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b0a0      	sub	sp, #128	; 0x80
 8012778:	af02      	add	r7, sp, #8
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	60b9      	str	r1, [r7, #8]
 801277e:	607a      	str	r2, [r7, #4]
 8012780:	70fb      	strb	r3, [r7, #3]
     * radius means smaller average shadow opacity. The solution should be to start `line` from `-
     * swidth` and handle if the straight part is short (or zero) and the value is taken from the
     * other corner. `col` also should start from `- swidth`
     */

    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8012782:	f7f7 fe55 	bl	800a430 <lv_refr_get_disp_refreshing>
 8012786:	4603      	mov	r3, r0
 8012788:	4618      	mov	r0, r3
 801278a:	f002 fd21 	bl	80151d0 <lv_disp_get_antialiasing>
 801278e:	4603      	mov	r3, r0
 8012790:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    lv_coord_t radius = style->body.radius;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	88db      	ldrh	r3, [r3, #6]
 8012798:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    lv_coord_t swidth = style->body.shadow.width;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	8a5b      	ldrh	r3, [r3, #18]
 80127a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    lv_coord_t width  = lv_area_get_width(coords);
 80127a4:	68f8      	ldr	r0, [r7, #12]
 80127a6:	f7fc ffbe 	bl	800f726 <lv_area_get_width>
 80127aa:	4603      	mov	r3, r0
 80127ac:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    lv_coord_t height = lv_area_get_height(coords);
 80127b0:	68f8      	ldr	r0, [r7, #12]
 80127b2:	f7fc ffcf 	bl	800f754 <lv_area_get_height>
 80127b6:	4603      	mov	r3, r0
 80127b8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

    radius = lv_draw_cont_radius_corr(radius, width, height);
 80127bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80127c0:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 80127c4:	f9b7 1060 	ldrsh.w	r1, [r7, #96]	; 0x60
 80127c8:	4618      	mov	r0, r3
 80127ca:	f000 fe53 	bl	8013474 <lv_draw_cont_radius_corr>
 80127ce:	4603      	mov	r3, r0
 80127d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    radius += aa;
 80127d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80127d8:	b29a      	uxth	r2, r3
 80127da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80127de:	4413      	add	r3, r2
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    /*Allocate a draw buffer the buffer required to draw the shadow*/
    int16_t filter_width = 2 * swidth + 1;
 80127e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80127ea:	005b      	lsls	r3, r3, #1
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	3301      	adds	r3, #1
 80127f0:	b29b      	uxth	r3, r3
 80127f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 80127f6:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 80127fa:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80127fe:	4413      	add	r3, r2
 8012800:	3304      	adds	r3, #4
 8012802:	f023 0303 	bic.w	r3, r3, #3
 8012806:	65bb      	str	r3, [r7, #88]	; 0x58
    curve_x_size *= sizeof(lv_coord_t);
 8012808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801280a:	005b      	lsls	r3, r3, #1
 801280c:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 801280e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8012812:	3303      	adds	r3, #3
 8012814:	f023 0303 	bic.w	r3, r3, #3
 8012818:	657b      	str	r3, [r7, #84]	; 0x54
    line_1d_blur_size *= sizeof(uint32_t);
 801281a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801281c:	009b      	lsls	r3, r3, #2
 801281e:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t line_2d_blur_size = ((radius + swidth + 1) + 3) & ~0x3;     /*Round to 4*/
 8012820:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8012824:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8012828:	4413      	add	r3, r2
 801282a:	3304      	adds	r3, #4
 801282c:	f023 0303 	bic.w	r3, r3, #3
 8012830:	653b      	str	r3, [r7, #80]	; 0x50
    line_2d_blur_size *= sizeof(lv_opa_t);

    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8012832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012836:	441a      	add	r2, r3
 8012838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801283a:	4413      	add	r3, r2
 801283c:	4618      	mov	r0, r3
 801283e:	f7f8 fd69 	bl	800b314 <lv_draw_get_buf>
 8012842:	64f8      	str	r0, [r7, #76]	; 0x4c

    /*Divide the draw buffer*/
    lv_coord_t  * curve_x = (lv_coord_t *)&draw_buf[0]; /*Stores the 'x' coordinates of a quarter circle.*/
 8012844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012846:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 8012848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801284a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801284c:	4413      	add	r3, r2
 801284e:	647b      	str	r3, [r7, #68]	; 0x44
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8012850:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012854:	4413      	add	r3, r2
 8012856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012858:	4413      	add	r3, r2
 801285a:	643b      	str	r3, [r7, #64]	; 0x40

    memset(curve_x, 0, curve_x_size);
 801285c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801285e:	2100      	movs	r1, #0
 8012860:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012862:	f017 fab2 	bl	8029dca <memset>
    lv_point_t circ;
    lv_coord_t circ_tmp;
    lv_circ_init(&circ, &circ_tmp, radius);
 8012866:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 801286a:	f107 0136 	add.w	r1, r7, #54	; 0x36
 801286e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012872:	4618      	mov	r0, r3
 8012874:	f003 f973 	bl	8015b5e <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8012878:	e017      	b.n	80128aa <lv_draw_shadow_full+0x136>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 801287a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801287e:	005b      	lsls	r3, r3, #1
 8012880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012882:	4413      	add	r3, r2
 8012884:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8012888:	801a      	strh	r2, [r3, #0]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 801288a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801288e:	005b      	lsls	r3, r3, #1
 8012890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012892:	4413      	add	r3, r2
 8012894:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8012898:	801a      	strh	r2, [r3, #0]
        lv_circ_next(&circ, &circ_tmp);
 801289a:	f107 0236 	add.w	r2, r7, #54	; 0x36
 801289e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128a2:	4611      	mov	r1, r2
 80128a4:	4618      	mov	r0, r3
 80128a6:	f003 f989 	bl	8015bbc <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 80128aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128ae:	4618      	mov	r0, r3
 80128b0:	f003 f96f 	bl	8015b92 <lv_circ_cont>
 80128b4:	4603      	mov	r3, r0
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d1df      	bne.n	801287a <lv_draw_shadow_full+0x106>
    }
    int16_t line;
    /*1D Blur horizontally*/
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80128ba:	78fb      	ldrb	r3, [r7, #3]
 80128bc:	2bff      	cmp	r3, #255	; 0xff
 80128be:	d102      	bne.n	80128c6 <lv_draw_shadow_full+0x152>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	7a1b      	ldrb	r3, [r3, #8]
 80128c4:	e00a      	b.n	80128dc <lv_draw_shadow_full+0x168>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	7a1b      	ldrb	r3, [r3, #8]
 80128ca:	b29a      	uxth	r2, r3
 80128cc:	78fb      	ldrb	r3, [r7, #3]
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	fb12 f303 	smulbb	r3, r2, r3
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	0a1b      	lsrs	r3, r3, #8
 80128d8:	b29b      	uxth	r3, r3
 80128da:	b2db      	uxtb	r3, r3
 80128dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for(line = 0; line < filter_width; line++) {
 80128e0:	2300      	movs	r3, #0
 80128e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80128e6:	e021      	b.n	801292c <lv_draw_shadow_full+0x1b8>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 80128e8:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 80128ec:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80128f0:	1ad3      	subs	r3, r2, r3
 80128f2:	461a      	mov	r2, r3
 80128f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80128f8:	fb03 f302 	mul.w	r3, r3, r2
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	021a      	lsls	r2, r3, #8
                             (filter_width * filter_width);
 8012900:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8012904:	f9b7 105c 	ldrsh.w	r1, [r7, #92]	; 0x5c
 8012908:	fb01 f303 	mul.w	r3, r1, r3
 801290c:	4618      	mov	r0, r3
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 801290e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012916:	440b      	add	r3, r1
 8012918:	fbb2 f2f0 	udiv	r2, r2, r0
 801291c:	601a      	str	r2, [r3, #0]
    for(line = 0; line < filter_width; line++) {
 801291e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8012922:	b29b      	uxth	r3, r3
 8012924:	3301      	adds	r3, #1
 8012926:	b29b      	uxth	r3, r3
 8012928:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 801292c:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8012930:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8012934:	429a      	cmp	r2, r3
 8012936:	dbd7      	blt.n	80128e8 <lv_draw_shadow_full+0x174>
    lv_point_t point_lb;
    lv_point_t ofs_rb;
    lv_point_t ofs_rt;
    lv_point_t ofs_lb;
    lv_point_t ofs_lt;
    ofs_rb.x = coords->x2 - radius - aa;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801293e:	b29a      	uxth	r2, r3
 8012940:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012944:	1ad3      	subs	r3, r2, r3
 8012946:	b29a      	uxth	r2, r3
 8012948:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801294c:	b29b      	uxth	r3, r3
 801294e:	1ad3      	subs	r3, r2, r3
 8012950:	b29b      	uxth	r3, r3
 8012952:	b21b      	sxth	r3, r3
 8012954:	843b      	strh	r3, [r7, #32]
    ofs_rb.y = coords->y2 - radius - aa;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801295c:	b29a      	uxth	r2, r3
 801295e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012962:	1ad3      	subs	r3, r2, r3
 8012964:	b29a      	uxth	r2, r3
 8012966:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801296a:	b29b      	uxth	r3, r3
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	b29b      	uxth	r3, r3
 8012970:	b21b      	sxth	r3, r3
 8012972:	847b      	strh	r3, [r7, #34]	; 0x22

    ofs_rt.x = coords->x2 - radius - aa;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801297a:	b29a      	uxth	r2, r3
 801297c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	b29a      	uxth	r2, r3
 8012984:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012988:	b29b      	uxth	r3, r3
 801298a:	1ad3      	subs	r3, r2, r3
 801298c:	b29b      	uxth	r3, r3
 801298e:	b21b      	sxth	r3, r3
 8012990:	83bb      	strh	r3, [r7, #28]
    ofs_rt.y = coords->y1 + radius + aa;
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012998:	b29a      	uxth	r2, r3
 801299a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801299e:	4413      	add	r3, r2
 80129a0:	b29a      	uxth	r2, r3
 80129a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	4413      	add	r3, r2
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	b21b      	sxth	r3, r3
 80129ae:	83fb      	strh	r3, [r7, #30]

    ofs_lb.x = coords->x1 + radius + aa;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129b6:	b29a      	uxth	r2, r3
 80129b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80129bc:	4413      	add	r3, r2
 80129be:	b29a      	uxth	r2, r3
 80129c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80129c4:	b29b      	uxth	r3, r3
 80129c6:	4413      	add	r3, r2
 80129c8:	b29b      	uxth	r3, r3
 80129ca:	b21b      	sxth	r3, r3
 80129cc:	833b      	strh	r3, [r7, #24]
    ofs_lb.y = coords->y2 - radius - aa;
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80129d4:	b29a      	uxth	r2, r3
 80129d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80129da:	1ad3      	subs	r3, r2, r3
 80129dc:	b29a      	uxth	r2, r3
 80129de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80129e2:	b29b      	uxth	r3, r3
 80129e4:	1ad3      	subs	r3, r2, r3
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	b21b      	sxth	r3, r3
 80129ea:	837b      	strh	r3, [r7, #26]

    ofs_lt.x = coords->x1 + radius + aa;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129f2:	b29a      	uxth	r2, r3
 80129f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80129f8:	4413      	add	r3, r2
 80129fa:	b29a      	uxth	r2, r3
 80129fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	4413      	add	r3, r2
 8012a04:	b29b      	uxth	r3, r3
 8012a06:	b21b      	sxth	r3, r3
 8012a08:	82bb      	strh	r3, [r7, #20]
    ofs_lt.y = coords->y1 + radius + aa;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012a16:	4413      	add	r3, r2
 8012a18:	b29a      	uxth	r2, r3
 8012a1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	4413      	add	r3, r2
 8012a22:	b29b      	uxth	r3, r3
 8012a24:	b21b      	sxth	r3, r3
 8012a26:	82fb      	strh	r3, [r7, #22]
    bool line_ready;
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8012a28:	2300      	movs	r3, #0
 8012a2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8012a2e:	e1ba      	b.n	8012da6 <lv_draw_shadow_full+0x632>
        line_ready = false;
 8012a30:	2300      	movs	r3, #0
 8012a32:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 8012a36:	2300      	movs	r3, #0
 8012a38:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012a3c:	e098      	b.n	8012b70 <lv_draw_shadow_full+0x3fc>
                                                         shadow pixel (radius + swidth))*/

            /*Sum the opacities from the lines above and below this 'row'*/
            int16_t line_rel;
            uint32_t px_opa_sum = 0;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	66fb      	str	r3, [r7, #108]	; 0x6c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8012a42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012a46:	425b      	negs	r3, r3
 8012a48:	b29b      	uxth	r3, r3
 8012a4a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8012a4e:	e06e      	b.n	8012b2e <lv_draw_shadow_full+0x3ba>
                /*Get the relative x position of the 'line_rel' to 'line'*/
                int16_t col_rel;
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 8012a50:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8012a54:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8012a58:	4413      	add	r3, r2
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	da12      	bge.n	8012a84 <lv_draw_shadow_full+0x310>
                    col_rel = radius - curve_x[line] - col;
 8012a5e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012a62:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8012a66:	005b      	lsls	r3, r3, #1
 8012a68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012a6a:	440b      	add	r3, r1
 8012a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	1ad3      	subs	r3, r2, r3
 8012a74:	b29a      	uxth	r2, r3
 8012a76:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012a7a:	1ad3      	subs	r3, r2, r3
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8012a82:	e023      	b.n	8012acc <lv_draw_shadow_full+0x358>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8012a84:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8012a88:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8012a8c:	441a      	add	r2, r3
 8012a8e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8012a92:	429a      	cmp	r2, r3
 8012a94:	dc52      	bgt.n	8012b3c <lv_draw_shadow_full+0x3c8>
                    break;
                } else { /*Blur from the curve*/
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8012a96:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8012a9a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8012a9e:	4413      	add	r3, r2
 8012aa0:	005b      	lsls	r3, r3, #1
 8012aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012aa4:	4413      	add	r3, r2
 8012aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8012ab0:	005b      	lsls	r3, r3, #1
 8012ab2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012ab4:	440b      	add	r3, r1
 8012ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	1ad3      	subs	r3, r2, r3
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
                }

                /*Add the value of the 1D blur on 'col_rel' position*/
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8012acc:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8012ad0:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8012ad4:	425b      	negs	r3, r3
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	da0a      	bge.n	8012af0 <lv_draw_shadow_full+0x37c>
                    if(line_rel == -swidth)
 8012ada:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8012ade:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8012ae2:	425b      	negs	r3, r3
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d12b      	bne.n	8012b40 <lv_draw_shadow_full+0x3cc>
                        line_ready = true; /*If no data even on the very first line then it wont't
 8012ae8:	2301      	movs	r3, #1
 8012aea:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                                              be anything else in this line*/
                    break;                 /*Break anyway because only smaller 'col_rel' values will come */
 8012aee:	e027      	b.n	8012b40 <lv_draw_shadow_full+0x3cc>
                } else if(col_rel > swidth)
 8012af0:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8012af4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8012af8:	429a      	cmp	r2, r3
 8012afa:	dd05      	ble.n	8012b08 <lv_draw_shadow_full+0x394>
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 8012afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012b02:	4413      	add	r3, r2
 8012b04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012b06:	e00b      	b.n	8012b20 <lv_draw_shadow_full+0x3ac>
                else
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8012b08:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8012b0c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8012b10:	1ad3      	subs	r3, r2, r3
 8012b12:	009b      	lsls	r3, r3, #2
 8012b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b16:	4413      	add	r3, r2
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012b1c:	4413      	add	r3, r2
 8012b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8012b20:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	3301      	adds	r3, #1
 8012b28:	b29b      	uxth	r3, r3
 8012b2a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8012b2e:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8012b32:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8012b36:	429a      	cmp	r2, r3
 8012b38:	dd8a      	ble.n	8012a50 <lv_draw_shadow_full+0x2dc>
 8012b3a:	e002      	b.n	8012b42 <lv_draw_shadow_full+0x3ce>
                    break;
 8012b3c:	bf00      	nop
 8012b3e:	e000      	b.n	8012b42 <lv_draw_shadow_full+0x3ce>
                    break;                 /*Break anyway because only smaller 'col_rel' values will come */
 8012b40:	bf00      	nop
            }

            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 8012b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b44:	0a19      	lsrs	r1, r3, #8
 8012b46:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012b4c:	4413      	add	r3, r2
 8012b4e:	b2ca      	uxtb	r2, r1
 8012b50:	701a      	strb	r2, [r3, #0]
            if(line_ready) {
 8012b52:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d005      	beq.n	8012b66 <lv_draw_shadow_full+0x3f2>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 8012b5a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012b5e:	3301      	adds	r3, #1
 8012b60:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                break;
 8012b64:	e00e      	b.n	8012b84 <lv_draw_shadow_full+0x410>
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 8012b66:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012b70:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8012b74:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 8012b78:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8012b7c:	440b      	add	r3, r1
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	f77f af5d 	ble.w	8012a3e <lv_draw_shadow_full+0x2ca>
            }
        }

        /*Flush the line*/
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8012b84:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8012b88:	005b      	lsls	r3, r3, #1
 8012b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b92:	b29a      	uxth	r2, r3
 8012b94:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	4413      	add	r3, r2
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	b21b      	sxth	r3, r3
 8012ba4:	863b      	strh	r3, [r7, #48]	; 0x30
        point_rt.y = ofs_rt.y - line;
 8012ba6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012bb0:	1ad3      	subs	r3, r2, r3
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	b21b      	sxth	r3, r3
 8012bb6:	867b      	strh	r3, [r7, #50]	; 0x32

        point_rb.x = curve_x[line] + ofs_rb.x + 1;
 8012bb8:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8012bbc:	005b      	lsls	r3, r3, #1
 8012bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bc0:	4413      	add	r3, r2
 8012bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012bc6:	b29a      	uxth	r2, r3
 8012bc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	4413      	add	r3, r2
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	b21b      	sxth	r3, r3
 8012bd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        point_rb.y = ofs_rb.y + line;
 8012bda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012bde:	b29a      	uxth	r2, r3
 8012be0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012be4:	4413      	add	r3, r2
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	b21b      	sxth	r3, r3
 8012bea:	85fb      	strh	r3, [r7, #46]	; 0x2e

        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8012bec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012bf0:	b29a      	uxth	r2, r3
 8012bf2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8012bf6:	005b      	lsls	r3, r3, #1
 8012bf8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012bfa:	440b      	add	r3, r1
 8012bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	1ad3      	subs	r3, r2, r3
 8012c04:	b29b      	uxth	r3, r3
 8012c06:	3b01      	subs	r3, #1
 8012c08:	b29b      	uxth	r3, r3
 8012c0a:	b21b      	sxth	r3, r3
 8012c0c:	853b      	strh	r3, [r7, #40]	; 0x28
        point_lt.y = ofs_lt.y - line;
 8012c0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012c18:	1ad3      	subs	r3, r2, r3
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	b21b      	sxth	r3, r3
 8012c1e:	857b      	strh	r3, [r7, #42]	; 0x2a

        point_lb.x = ofs_lb.x - curve_x[line] - 1;
 8012c20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8012c24:	b29a      	uxth	r2, r3
 8012c26:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8012c2a:	005b      	lsls	r3, r3, #1
 8012c2c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012c2e:	440b      	add	r3, r1
 8012c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	1ad3      	subs	r3, r2, r3
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	3b01      	subs	r3, #1
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	b21b      	sxth	r3, r3
 8012c40:	84bb      	strh	r3, [r7, #36]	; 0x24
        point_lb.y = ofs_lb.y + line;
 8012c42:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012c46:	b29a      	uxth	r2, r3
 8012c48:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012c4c:	4413      	add	r3, r2
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	b21b      	sxth	r3, r3
 8012c52:	84fb      	strh	r3, [r7, #38]	; 0x26

        uint16_t d;
        for(d = 1; d < col; d++) {
 8012c54:	2301      	movs	r3, #1
 8012c56:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8012c5a:	e08c      	b.n	8012d76 <lv_draw_shadow_full+0x602>

            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 8012c5c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8012c60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012c64:	429a      	cmp	r2, r3
 8012c66:	da14      	bge.n	8012c92 <lv_draw_shadow_full+0x51e>
 8012c68:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8012c6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	da0e      	bge.n	8012c92 <lv_draw_shadow_full+0x51e>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8012c74:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 8012c78:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8012c7c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8012c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c82:	4413      	add	r3, r2
 8012c84:	781a      	ldrb	r2, [r3, #0]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	9200      	str	r2, [sp, #0]
 8012c8a:	8a1b      	ldrh	r3, [r3, #16]
 8012c8c:	68ba      	ldr	r2, [r7, #8]
 8012c8e:	f7f9 f8ba 	bl	800be06 <lv_draw_px>
            }

            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 8012c92:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8012c96:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	da14      	bge.n	8012cc8 <lv_draw_shadow_full+0x554>
 8012c9e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8012ca2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	dd0e      	ble.n	8012cc8 <lv_draw_shadow_full+0x554>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8012caa:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 8012cae:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8012cb2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8012cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012cb8:	4413      	add	r3, r2
 8012cba:	781a      	ldrb	r2, [r3, #0]
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	9200      	str	r2, [sp, #0]
 8012cc0:	8a1b      	ldrh	r3, [r3, #16]
 8012cc2:	68ba      	ldr	r2, [r7, #8]
 8012cc4:	f7f9 f89f 	bl	800be06 <lv_draw_px>
            }

            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8012cc8:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8012ccc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	dd14      	ble.n	8012cfe <lv_draw_shadow_full+0x58a>
 8012cd4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8012cd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	da0e      	bge.n	8012cfe <lv_draw_shadow_full+0x58a>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8012ce0:	f9b7 0030 	ldrsh.w	r0, [r7, #48]	; 0x30
 8012ce4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8012ce8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8012cec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012cee:	4413      	add	r3, r2
 8012cf0:	781a      	ldrb	r2, [r3, #0]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	9200      	str	r2, [sp, #0]
 8012cf6:	8a1b      	ldrh	r3, [r3, #16]
 8012cf8:	68ba      	ldr	r2, [r7, #8]
 8012cfa:	f7f9 f884 	bl	800be06 <lv_draw_px>
            }

            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 8012cfe:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8012d02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012d06:	429a      	cmp	r2, r3
 8012d08:	dd14      	ble.n	8012d34 <lv_draw_shadow_full+0x5c0>
 8012d0a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8012d0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012d12:	429a      	cmp	r2, r3
 8012d14:	dd0e      	ble.n	8012d34 <lv_draw_shadow_full+0x5c0>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8012d16:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	; 0x2c
 8012d1a:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8012d1e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8012d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012d24:	4413      	add	r3, r2
 8012d26:	781a      	ldrb	r2, [r3, #0]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	9200      	str	r2, [sp, #0]
 8012d2c:	8a1b      	ldrh	r3, [r3, #16]
 8012d2e:	68ba      	ldr	r2, [r7, #8]
 8012d30:	f7f9 f869 	bl	800be06 <lv_draw_px>
            }

            point_rb.x++;
 8012d34:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	b21b      	sxth	r3, r3
 8012d40:	85bb      	strh	r3, [r7, #44]	; 0x2c
            point_lb.x--;
 8012d42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	3b01      	subs	r3, #1
 8012d4a:	b29b      	uxth	r3, r3
 8012d4c:	b21b      	sxth	r3, r3
 8012d4e:	84bb      	strh	r3, [r7, #36]	; 0x24

            point_rt.x++;
 8012d50:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	3301      	adds	r3, #1
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	b21b      	sxth	r3, r3
 8012d5c:	863b      	strh	r3, [r7, #48]	; 0x30
            point_lt.x--;
 8012d5e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	3b01      	subs	r3, #1
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	b21b      	sxth	r3, r3
 8012d6a:	853b      	strh	r3, [r7, #40]	; 0x28
        for(d = 1; d < col; d++) {
 8012d6c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8012d70:	3301      	adds	r3, #1
 8012d72:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8012d76:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8012d7a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	f4ff af6c 	bcc.w	8012c5c <lv_draw_shadow_full+0x4e8>
        }

        /* Put the first line to the edges too.
         * It is not correct because blur should be done below the corner too
         * but is is simple, fast and gives a good enough result*/
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 8012d84:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d105      	bne.n	8012d98 <lv_draw_shadow_full+0x624>
 8012d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	68b9      	ldr	r1, [r7, #8]
 8012d92:	68f8      	ldr	r0, [r7, #12]
 8012d94:	f000 fa17 	bl	80131c6 <lv_draw_shadow_full_straight>
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8012d98:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	3301      	adds	r3, #1
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8012da6:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8012daa:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 8012dae:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8012db2:	440b      	add	r3, r1
 8012db4:	429a      	cmp	r2, r3
 8012db6:	f77f ae3b 	ble.w	8012a30 <lv_draw_shadow_full+0x2bc>
    }
}
 8012dba:	bf00      	nop
 8012dbc:	3778      	adds	r7, #120	; 0x78
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}

08012dc2 <lv_draw_shadow_bottom>:

static void lv_draw_shadow_bottom(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                  lv_opa_t opa_scale)
{
 8012dc2:	b580      	push	{r7, lr}
 8012dc4:	b09a      	sub	sp, #104	; 0x68
 8012dc6:	af02      	add	r7, sp, #8
 8012dc8:	60f8      	str	r0, [r7, #12]
 8012dca:	60b9      	str	r1, [r7, #8]
 8012dcc:	607a      	str	r2, [r7, #4]
 8012dce:	70fb      	strb	r3, [r7, #3]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8012dd0:	f7f7 fb2e 	bl	800a430 <lv_refr_get_disp_refreshing>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f002 f9fa 	bl	80151d0 <lv_disp_get_antialiasing>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    lv_coord_t radius = style->body.radius;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	88db      	ldrh	r3, [r3, #6]
 8012de6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lv_coord_t swidth = style->body.shadow.width;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	8a5b      	ldrh	r3, [r3, #18]
 8012dee:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    lv_coord_t width  = lv_area_get_width(coords);
 8012df2:	68f8      	ldr	r0, [r7, #12]
 8012df4:	f7fc fc97 	bl	800f726 <lv_area_get_width>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    lv_coord_t height = lv_area_get_height(coords);
 8012dfe:	68f8      	ldr	r0, [r7, #12]
 8012e00:	f7fc fca8 	bl	800f754 <lv_area_get_height>
 8012e04:	4603      	mov	r3, r0
 8012e06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012e0a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012e0e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8012e12:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	; 0x50
 8012e16:	4618      	mov	r0, r3
 8012e18:	f000 fb2c 	bl	8013474 <lv_draw_cont_radius_corr>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8012e22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e26:	b29b      	uxth	r3, r3
 8012e28:	461a      	mov	r2, r3
 8012e2a:	0052      	lsls	r2, r2, #1
 8012e2c:	4413      	add	r3, r2
 8012e2e:	b29a      	uxth	r2, r3
 8012e30:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012e34:	4413      	add	r3, r2
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    swidth += aa;
 8012e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e40:	b29a      	uxth	r2, r3
 8012e42:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8012e46:	4413      	add	r3, r2
 8012e48:	b29b      	uxth	r3, r3
 8012e4a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8012e4e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8012e52:	3304      	adds	r3, #4
 8012e54:	f023 0303 	bic.w	r3, r3, #3
 8012e58:	64bb      	str	r3, [r7, #72]	; 0x48
    curve_x_size *= sizeof(lv_coord_t);
 8012e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e5c:	005b      	lsls	r3, r3, #1
 8012e5e:	64bb      	str	r3, [r7, #72]	; 0x48
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 8012e60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8012e64:	b2db      	uxtb	r3, r3
 8012e66:	3303      	adds	r3, #3
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	f023 0303 	bic.w	r3, r3, #3
 8012e6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    line_1d_blur_size *= sizeof(lv_opa_t);

    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8012e72:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8012e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e78:	4413      	add	r3, r2
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7f8 fa4a 	bl	800b314 <lv_draw_get_buf>
 8012e80:	6438      	str	r0, [r7, #64]	; 0x40

    /*Divide the draw buffer*/
    lv_coord_t  * curve_x = (lv_coord_t *)&draw_buf[0]; /*Stores the 'x' coordinates of a quarter circle.*/
 8012e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e84:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 8012e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e8a:	4413      	add	r3, r2
 8012e8c:	63bb      	str	r3, [r7, #56]	; 0x38

    lv_point_t circ;
    lv_coord_t circ_tmp;
    lv_circ_init(&circ, &circ_tmp, radius);
 8012e8e:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8012e92:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8012e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f002 fe5f 	bl	8015b5e <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8012ea0:	e017      	b.n	8012ed2 <lv_draw_shadow_bottom+0x110>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8012ea2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8012ea6:	005b      	lsls	r3, r3, #1
 8012ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012eaa:	4413      	add	r3, r2
 8012eac:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8012eb0:	801a      	strh	r2, [r3, #0]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8012eb2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012eb6:	005b      	lsls	r3, r3, #1
 8012eb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012eba:	4413      	add	r3, r2
 8012ebc:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8012ec0:	801a      	strh	r2, [r3, #0]
        lv_circ_next(&circ, &circ_tmp);
 8012ec2:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8012ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012eca:	4611      	mov	r1, r2
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f002 fe75 	bl	8015bbc <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 8012ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f002 fe5b 	bl	8015b92 <lv_circ_cont>
 8012edc:	4603      	mov	r3, r0
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d1df      	bne.n	8012ea2 <lv_draw_shadow_bottom+0xe0>
    }

    int16_t col;

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8012ee2:	78fb      	ldrb	r3, [r7, #3]
 8012ee4:	2bff      	cmp	r3, #255	; 0xff
 8012ee6:	d102      	bne.n	8012eee <lv_draw_shadow_bottom+0x12c>
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	7a1b      	ldrb	r3, [r3, #8]
 8012eec:	e00a      	b.n	8012f04 <lv_draw_shadow_bottom+0x142>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	7a1b      	ldrb	r3, [r3, #8]
 8012ef2:	b29a      	uxth	r2, r3
 8012ef4:	78fb      	ldrb	r3, [r7, #3]
 8012ef6:	b29b      	uxth	r3, r3
 8012ef8:	fb12 f303 	smulbb	r3, r2, r3
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	0a1b      	lsrs	r3, r3, #8
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    for(col = 0; col < swidth; col++) {
 8012f08:	2300      	movs	r3, #0
 8012f0a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8012f0e:	e01b      	b.n	8012f48 <lv_draw_shadow_bottom+0x186>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 8012f10:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8012f14:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8012f18:	1ad3      	subs	r3, r2, r3
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f20:	fb03 f302 	mul.w	r3, r3, r2
 8012f24:	085a      	lsrs	r2, r3, #1
 8012f26:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8012f2a:	fbb2 f1f3 	udiv	r1, r2, r3
 8012f2e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8012f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f34:	4413      	add	r3, r2
 8012f36:	b2ca      	uxtb	r2, r1
 8012f38:	701a      	strb	r2, [r3, #0]
    for(col = 0; col < swidth; col++) {
 8012f3a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	3301      	adds	r3, #1
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8012f48:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8012f4c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8012f50:	429a      	cmp	r2, r3
 8012f52:	dbdd      	blt.n	8012f10 <lv_draw_shadow_bottom+0x14e>
    lv_point_t point_r;
    lv_area_t area_mid;
    lv_point_t ofs_l;
    lv_point_t ofs_r;

    ofs_l.x = coords->x1 + radius;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f5a:	b29a      	uxth	r2, r3
 8012f5c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012f60:	4413      	add	r3, r2
 8012f62:	b29b      	uxth	r3, r3
 8012f64:	b21b      	sxth	r3, r3
 8012f66:	833b      	strh	r3, [r7, #24]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012f6e:	b29a      	uxth	r2, r3
 8012f70:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012f74:	1ad3      	subs	r3, r2, r3
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f7c:	b29b      	uxth	r3, r3
 8012f7e:	1ad3      	subs	r3, r2, r3
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	3301      	adds	r3, #1
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	b21b      	sxth	r3, r3
 8012f88:	837b      	strh	r3, [r7, #26]

    ofs_r.x = coords->x2 - radius;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012f96:	1ad3      	subs	r3, r2, r3
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	b21b      	sxth	r3, r3
 8012f9c:	82bb      	strh	r3, [r7, #20]
    ofs_r.y = coords->y2 - radius + 1 - aa;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012fa4:	b29a      	uxth	r2, r3
 8012fa6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012faa:	1ad3      	subs	r3, r2, r3
 8012fac:	b29a      	uxth	r2, r3
 8012fae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	1ad3      	subs	r3, r2, r3
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	3301      	adds	r3, #1
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	b21b      	sxth	r3, r3
 8012fbe:	82fb      	strh	r3, [r7, #22]

    for(col = 0; col <= radius; col++) {
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8012fc6:	e0b0      	b.n	801312a <lv_draw_shadow_bottom+0x368>
        point_l.x = ofs_l.x - col;
 8012fc8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8012fcc:	b29a      	uxth	r2, r3
 8012fce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012fd2:	1ad3      	subs	r3, r2, r3
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	b21b      	sxth	r3, r3
 8012fd8:	853b      	strh	r3, [r7, #40]	; 0x28
        point_l.y = ofs_l.y + curve_x[col];
 8012fda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8012fe4:	005b      	lsls	r3, r3, #1
 8012fe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012fe8:	440b      	add	r3, r1
 8012fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	4413      	add	r3, r2
 8012ff2:	b29b      	uxth	r3, r3
 8012ff4:	b21b      	sxth	r3, r3
 8012ff6:	857b      	strh	r3, [r7, #42]	; 0x2a

        point_r.x = ofs_r.x + col;
 8012ff8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012ffc:	b29a      	uxth	r2, r3
 8012ffe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8013002:	4413      	add	r3, r2
 8013004:	b29b      	uxth	r3, r3
 8013006:	b21b      	sxth	r3, r3
 8013008:	84bb      	strh	r3, [r7, #36]	; 0x24
        point_r.y = ofs_r.y + curve_x[col];
 801300a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801300e:	b29a      	uxth	r2, r3
 8013010:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013014:	005b      	lsls	r3, r3, #1
 8013016:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013018:	440b      	add	r3, r1
 801301a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801301e:	b29b      	uxth	r3, r3
 8013020:	4413      	add	r3, r2
 8013022:	b29b      	uxth	r3, r3
 8013024:	b21b      	sxth	r3, r3
 8013026:	84fb      	strh	r3, [r7, #38]	; 0x26

        lv_opa_t px_opa;
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 8013028:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801302c:	2b00      	cmp	r3, #0
 801302e:	d016      	beq.n	801305e <lv_draw_shadow_bottom+0x29c>
 8013030:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013034:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013038:	3b01      	subs	r3, #1
 801303a:	005b      	lsls	r3, r3, #1
 801303c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801303e:	4413      	add	r3, r2
 8013040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013044:	b29a      	uxth	r2, r3
 8013046:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801304a:	005b      	lsls	r3, r3, #1
 801304c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801304e:	440b      	add	r3, r1
 8013050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013054:	b29b      	uxth	r3, r3
 8013056:	1ad3      	subs	r3, r2, r3
 8013058:	b29b      	uxth	r3, r3
 801305a:	b21b      	sxth	r3, r3
 801305c:	e000      	b.n	8013060 <lv_draw_shadow_bottom+0x29e>
 801305e:	2300      	movs	r3, #0
 8013060:	86bb      	strh	r3, [r7, #52]	; 0x34
        uint16_t d;
        for(d = 0; d < swidth; d++) {
 8013062:	2300      	movs	r3, #0
 8013064:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8013068:	e052      	b.n	8013110 <lv_draw_shadow_bottom+0x34e>
            /*When stepping a pixel in y calculate the average with the pixel from the prev. column
             * to make a blur */
            if(diff == 0) {
 801306a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801306e:	2b00      	cmp	r3, #0
 8013070:	d107      	bne.n	8013082 <lv_draw_shadow_bottom+0x2c0>
                px_opa = line_1d_blur[d];
 8013072:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8013076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013078:	4413      	add	r3, r2
 801307a:	781b      	ldrb	r3, [r3, #0]
 801307c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8013080:	e015      	b.n	80130ae <lv_draw_shadow_bottom+0x2ec>
            } else {
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 8013082:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8013086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013088:	4413      	add	r3, r2
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	b29a      	uxth	r2, r3
 801308e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8013092:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8013096:	1acb      	subs	r3, r1, r3
 8013098:	4619      	mov	r1, r3
 801309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309c:	440b      	add	r3, r1
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	4413      	add	r3, r2
 80130a4:	b29b      	uxth	r3, r3
 80130a6:	085b      	lsrs	r3, r3, #1
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            }
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 80130ae:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 80130b2:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80130bc:	9200      	str	r2, [sp, #0]
 80130be:	8a1b      	ldrh	r3, [r3, #16]
 80130c0:	68ba      	ldr	r2, [r7, #8]
 80130c2:	f7f8 fea0 	bl	800be06 <lv_draw_px>
            point_l.y++;
 80130c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	3301      	adds	r3, #1
 80130ce:	b29b      	uxth	r3, r3
 80130d0:	b21b      	sxth	r3, r3
 80130d2:	857b      	strh	r3, [r7, #42]	; 0x2a

            /*Don't overdraw the pixel on the middle*/
            if(point_r.x > ofs_l.x) {
 80130d4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80130d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80130dc:	429a      	cmp	r2, r3
 80130de:	dd0b      	ble.n	80130f8 <lv_draw_shadow_bottom+0x336>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 80130e0:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 80130e4:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80130ee:	9200      	str	r2, [sp, #0]
 80130f0:	8a1b      	ldrh	r3, [r3, #16]
 80130f2:	68ba      	ldr	r2, [r7, #8]
 80130f4:	f7f8 fe87 	bl	800be06 <lv_draw_px>
            }
            point_r.y++;
 80130f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80130fc:	b29b      	uxth	r3, r3
 80130fe:	3301      	adds	r3, #1
 8013100:	b29b      	uxth	r3, r3
 8013102:	b21b      	sxth	r3, r3
 8013104:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(d = 0; d < swidth; d++) {
 8013106:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801310a:	3301      	adds	r3, #1
 801310c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8013110:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8013114:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8013118:	429a      	cmp	r2, r3
 801311a:	dba6      	blt.n	801306a <lv_draw_shadow_bottom+0x2a8>
    for(col = 0; col <= radius; col++) {
 801311c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013120:	b29b      	uxth	r3, r3
 8013122:	3301      	adds	r3, #1
 8013124:	b29b      	uxth	r3, r3
 8013126:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801312a:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 801312e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8013132:	429a      	cmp	r2, r3
 8013134:	f77f af48 	ble.w	8012fc8 <lv_draw_shadow_bottom+0x206>
        }
    }

    area_mid.x1 = ofs_l.x + 1;
 8013138:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801313c:	b29b      	uxth	r3, r3
 801313e:	3301      	adds	r3, #1
 8013140:	b29b      	uxth	r3, r3
 8013142:	b21b      	sxth	r3, r3
 8013144:	83bb      	strh	r3, [r7, #28]
    area_mid.y1 = ofs_l.y + radius;
 8013146:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801314a:	b29a      	uxth	r2, r3
 801314c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013150:	4413      	add	r3, r2
 8013152:	b29b      	uxth	r3, r3
 8013154:	b21b      	sxth	r3, r3
 8013156:	83fb      	strh	r3, [r7, #30]
    area_mid.x2 = ofs_r.x - 1;
 8013158:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801315c:	b29b      	uxth	r3, r3
 801315e:	3b01      	subs	r3, #1
 8013160:	b29b      	uxth	r3, r3
 8013162:	b21b      	sxth	r3, r3
 8013164:	843b      	strh	r3, [r7, #32]
    area_mid.y2 = area_mid.y1;
 8013166:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801316a:	847b      	strh	r3, [r7, #34]	; 0x22

    uint16_t d;
    for(d = 0; d < swidth; d++) {
 801316c:	2300      	movs	r3, #0
 801316e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8013172:	e01e      	b.n	80131b2 <lv_draw_shadow_bottom+0x3f0>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 8013174:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8013178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801317a:	4413      	add	r3, r2
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	f107 001c 	add.w	r0, r7, #28
 8013184:	8a12      	ldrh	r2, [r2, #16]
 8013186:	68b9      	ldr	r1, [r7, #8]
 8013188:	f7f8 fed5 	bl	800bf36 <lv_draw_fill>
        area_mid.y1++;
 801318c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013190:	b29b      	uxth	r3, r3
 8013192:	3301      	adds	r3, #1
 8013194:	b29b      	uxth	r3, r3
 8013196:	b21b      	sxth	r3, r3
 8013198:	83fb      	strh	r3, [r7, #30]
        area_mid.y2++;
 801319a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801319e:	b29b      	uxth	r3, r3
 80131a0:	3301      	adds	r3, #1
 80131a2:	b29b      	uxth	r3, r3
 80131a4:	b21b      	sxth	r3, r3
 80131a6:	847b      	strh	r3, [r7, #34]	; 0x22
    for(d = 0; d < swidth; d++) {
 80131a8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80131ac:	3301      	adds	r3, #1
 80131ae:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80131b2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80131b6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80131ba:	429a      	cmp	r2, r3
 80131bc:	dbda      	blt.n	8013174 <lv_draw_shadow_bottom+0x3b2>
    }
}
 80131be:	bf00      	nop
 80131c0:	3760      	adds	r7, #96	; 0x60
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}

080131c6 <lv_draw_shadow_full_straight>:

static void lv_draw_shadow_full_straight(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                         const lv_opa_t * map)
{
 80131c6:	b580      	push	{r7, lr}
 80131c8:	b090      	sub	sp, #64	; 0x40
 80131ca:	af00      	add	r7, sp, #0
 80131cc:	60f8      	str	r0, [r7, #12]
 80131ce:	60b9      	str	r1, [r7, #8]
 80131d0:	607a      	str	r2, [r7, #4]
 80131d2:	603b      	str	r3, [r7, #0]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80131d4:	f7f7 f92c 	bl	800a430 <lv_refr_get_disp_refreshing>
 80131d8:	4603      	mov	r3, r0
 80131da:	4618      	mov	r0, r3
 80131dc:	f001 fff8 	bl	80151d0 <lv_disp_get_antialiasing>
 80131e0:	4603      	mov	r3, r0
 80131e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    lv_coord_t radius = style->body.radius;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	88db      	ldrh	r3, [r3, #6]
 80131ea:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t swidth = style->body.shadow.width;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	8a5b      	ldrh	r3, [r3, #18]
 80131f0:	873b      	strh	r3, [r7, #56]	; 0x38
    lv_coord_t width  = lv_area_get_width(coords);
 80131f2:	68f8      	ldr	r0, [r7, #12]
 80131f4:	f7fc fa97 	bl	800f726 <lv_area_get_width>
 80131f8:	4603      	mov	r3, r0
 80131fa:	86fb      	strh	r3, [r7, #54]	; 0x36
    lv_coord_t height = lv_area_get_height(coords);
 80131fc:	68f8      	ldr	r0, [r7, #12]
 80131fe:	f7fc faa9 	bl	800f754 <lv_area_get_height>
 8013202:	4603      	mov	r3, r0
 8013204:	86bb      	strh	r3, [r7, #52]	; 0x34

    radius = lv_draw_cont_radius_corr(radius, width, height);
 8013206:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013208:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801320c:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 8013210:	4618      	mov	r0, r3
 8013212:	f000 f92f 	bl	8013474 <lv_draw_cont_radius_corr>
 8013216:	4603      	mov	r3, r0
 8013218:	877b      	strh	r3, [r7, #58]	; 0x3a
    radius += aa;
 801321a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801321e:	b29a      	uxth	r2, r3
 8013220:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013222:	4413      	add	r3, r2
 8013224:	b29b      	uxth	r3, r3
 8013226:	877b      	strh	r3, [r7, #58]	; 0x3a

    lv_area_t right_area;
    right_area.x1 = coords->x2 + 1 - aa;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801322e:	b29a      	uxth	r2, r3
 8013230:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013234:	b29b      	uxth	r3, r3
 8013236:	1ad3      	subs	r3, r2, r3
 8013238:	b29b      	uxth	r3, r3
 801323a:	3301      	adds	r3, #1
 801323c:	b29b      	uxth	r3, r3
 801323e:	b21b      	sxth	r3, r3
 8013240:	853b      	strh	r3, [r7, #40]	; 0x28
    right_area.y1 = coords->y1 + radius + aa;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013248:	b29a      	uxth	r2, r3
 801324a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801324c:	4413      	add	r3, r2
 801324e:	b29a      	uxth	r2, r3
 8013250:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013254:	b29b      	uxth	r3, r3
 8013256:	4413      	add	r3, r2
 8013258:	b29b      	uxth	r3, r3
 801325a:	b21b      	sxth	r3, r3
 801325c:	857b      	strh	r3, [r7, #42]	; 0x2a
    right_area.x2 = right_area.x1;
 801325e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8013262:	85bb      	strh	r3, [r7, #44]	; 0x2c
    right_area.y2 = coords->y2 - radius - aa;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801326a:	b29a      	uxth	r2, r3
 801326c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801326e:	1ad3      	subs	r3, r2, r3
 8013270:	b29a      	uxth	r2, r3
 8013272:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013276:	b29b      	uxth	r3, r3
 8013278:	1ad3      	subs	r3, r2, r3
 801327a:	b29b      	uxth	r3, r3
 801327c:	b21b      	sxth	r3, r3
 801327e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    lv_area_t left_area;
    left_area.x1 = coords->x1 - 1 + aa;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013286:	b29a      	uxth	r2, r3
 8013288:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801328c:	b29b      	uxth	r3, r3
 801328e:	4413      	add	r3, r2
 8013290:	b29b      	uxth	r3, r3
 8013292:	3b01      	subs	r3, #1
 8013294:	b29b      	uxth	r3, r3
 8013296:	b21b      	sxth	r3, r3
 8013298:	843b      	strh	r3, [r7, #32]
    left_area.y1 = coords->y1 + radius + aa;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80132a0:	b29a      	uxth	r2, r3
 80132a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80132a4:	4413      	add	r3, r2
 80132a6:	b29a      	uxth	r2, r3
 80132a8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80132ac:	b29b      	uxth	r3, r3
 80132ae:	4413      	add	r3, r2
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	b21b      	sxth	r3, r3
 80132b4:	847b      	strh	r3, [r7, #34]	; 0x22
    left_area.x2 = left_area.x1;
 80132b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80132ba:	84bb      	strh	r3, [r7, #36]	; 0x24
    left_area.y2 = coords->y2 - radius - aa;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80132c2:	b29a      	uxth	r2, r3
 80132c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80132c6:	1ad3      	subs	r3, r2, r3
 80132c8:	b29a      	uxth	r2, r3
 80132ca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	1ad3      	subs	r3, r2, r3
 80132d2:	b29b      	uxth	r3, r3
 80132d4:	b21b      	sxth	r3, r3
 80132d6:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_area_t top_area;
    top_area.x1 = coords->x1 + radius + aa;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132de:	b29a      	uxth	r2, r3
 80132e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80132e2:	4413      	add	r3, r2
 80132e4:	b29a      	uxth	r2, r3
 80132e6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	4413      	add	r3, r2
 80132ee:	b29b      	uxth	r3, r3
 80132f0:	b21b      	sxth	r3, r3
 80132f2:	833b      	strh	r3, [r7, #24]
    top_area.y1 = coords->y1 - 1 + aa;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80132fa:	b29a      	uxth	r2, r3
 80132fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013300:	b29b      	uxth	r3, r3
 8013302:	4413      	add	r3, r2
 8013304:	b29b      	uxth	r3, r3
 8013306:	3b01      	subs	r3, #1
 8013308:	b29b      	uxth	r3, r3
 801330a:	b21b      	sxth	r3, r3
 801330c:	837b      	strh	r3, [r7, #26]
    top_area.x2 = coords->x2 - radius - aa;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013314:	b29a      	uxth	r2, r3
 8013316:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013318:	1ad3      	subs	r3, r2, r3
 801331a:	b29a      	uxth	r2, r3
 801331c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013320:	b29b      	uxth	r3, r3
 8013322:	1ad3      	subs	r3, r2, r3
 8013324:	b29b      	uxth	r3, r3
 8013326:	b21b      	sxth	r3, r3
 8013328:	83bb      	strh	r3, [r7, #28]
    top_area.y2 = top_area.y1;
 801332a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801332e:	83fb      	strh	r3, [r7, #30]

    lv_area_t bottom_area;
    bottom_area.x1 = coords->x1 + radius + aa;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013336:	b29a      	uxth	r2, r3
 8013338:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801333a:	4413      	add	r3, r2
 801333c:	b29a      	uxth	r2, r3
 801333e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013342:	b29b      	uxth	r3, r3
 8013344:	4413      	add	r3, r2
 8013346:	b29b      	uxth	r3, r3
 8013348:	b21b      	sxth	r3, r3
 801334a:	823b      	strh	r3, [r7, #16]
    bottom_area.y1 = coords->y2 + 1 - aa;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013352:	b29a      	uxth	r2, r3
 8013354:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013358:	b29b      	uxth	r3, r3
 801335a:	1ad3      	subs	r3, r2, r3
 801335c:	b29b      	uxth	r3, r3
 801335e:	3301      	adds	r3, #1
 8013360:	b29b      	uxth	r3, r3
 8013362:	b21b      	sxth	r3, r3
 8013364:	827b      	strh	r3, [r7, #18]
    bottom_area.x2 = coords->x2 - radius - aa;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801336c:	b29a      	uxth	r2, r3
 801336e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013370:	1ad3      	subs	r3, r2, r3
 8013372:	b29a      	uxth	r2, r3
 8013374:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013378:	b29b      	uxth	r3, r3
 801337a:	1ad3      	subs	r3, r2, r3
 801337c:	b29b      	uxth	r3, r3
 801337e:	b21b      	sxth	r3, r3
 8013380:	82bb      	strh	r3, [r7, #20]
    bottom_area.y2 = bottom_area.y1;
 8013382:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013386:	82fb      	strh	r3, [r7, #22]

    lv_opa_t opa_act;
    int16_t d;
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8013388:	2301      	movs	r3, #1
 801338a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801338c:	e068      	b.n	8013460 <lv_draw_shadow_full_straight+0x29a>
        opa_act = map[d];
 801338e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8013392:	683a      	ldr	r2, [r7, #0]
 8013394:	4413      	add	r3, r2
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 801339c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80133a6:	8a12      	ldrh	r2, [r2, #16]
 80133a8:	68b9      	ldr	r1, [r7, #8]
 80133aa:	f7f8 fdc4 	bl	800bf36 <lv_draw_fill>
        right_area.x1++;
 80133ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	3301      	adds	r3, #1
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	b21b      	sxth	r3, r3
 80133ba:	853b      	strh	r3, [r7, #40]	; 0x28
        right_area.x2++;
 80133bc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	3301      	adds	r3, #1
 80133c4:	b29b      	uxth	r3, r3
 80133c6:	b21b      	sxth	r3, r3
 80133c8:	85bb      	strh	r3, [r7, #44]	; 0x2c

        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 80133ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	f107 0020 	add.w	r0, r7, #32
 80133d4:	8a12      	ldrh	r2, [r2, #16]
 80133d6:	68b9      	ldr	r1, [r7, #8]
 80133d8:	f7f8 fdad 	bl	800bf36 <lv_draw_fill>
        left_area.x1--;
 80133dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	3b01      	subs	r3, #1
 80133e4:	b29b      	uxth	r3, r3
 80133e6:	b21b      	sxth	r3, r3
 80133e8:	843b      	strh	r3, [r7, #32]
        left_area.x2--;
 80133ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	3b01      	subs	r3, #1
 80133f2:	b29b      	uxth	r3, r3
 80133f4:	b21b      	sxth	r3, r3
 80133f6:	84bb      	strh	r3, [r7, #36]	; 0x24

        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 80133f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80133fc:	687a      	ldr	r2, [r7, #4]
 80133fe:	f107 0018 	add.w	r0, r7, #24
 8013402:	8a12      	ldrh	r2, [r2, #16]
 8013404:	68b9      	ldr	r1, [r7, #8]
 8013406:	f7f8 fd96 	bl	800bf36 <lv_draw_fill>
        top_area.y1--;
 801340a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801340e:	b29b      	uxth	r3, r3
 8013410:	3b01      	subs	r3, #1
 8013412:	b29b      	uxth	r3, r3
 8013414:	b21b      	sxth	r3, r3
 8013416:	837b      	strh	r3, [r7, #26]
        top_area.y2--;
 8013418:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801341c:	b29b      	uxth	r3, r3
 801341e:	3b01      	subs	r3, #1
 8013420:	b29b      	uxth	r3, r3
 8013422:	b21b      	sxth	r3, r3
 8013424:	83fb      	strh	r3, [r7, #30]

        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8013426:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	f107 0010 	add.w	r0, r7, #16
 8013430:	8a12      	ldrh	r2, [r2, #16]
 8013432:	68b9      	ldr	r1, [r7, #8]
 8013434:	f7f8 fd7f 	bl	800bf36 <lv_draw_fill>
        bottom_area.y1++;
 8013438:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801343c:	b29b      	uxth	r3, r3
 801343e:	3301      	adds	r3, #1
 8013440:	b29b      	uxth	r3, r3
 8013442:	b21b      	sxth	r3, r3
 8013444:	827b      	strh	r3, [r7, #18]
        bottom_area.y2++;
 8013446:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801344a:	b29b      	uxth	r3, r3
 801344c:	3301      	adds	r3, #1
 801344e:	b29b      	uxth	r3, r3
 8013450:	b21b      	sxth	r3, r3
 8013452:	82fb      	strh	r3, [r7, #22]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8013454:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8013458:	b29b      	uxth	r3, r3
 801345a:	3301      	adds	r3, #1
 801345c:	b29b      	uxth	r3, r3
 801345e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013460:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8013464:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8013468:	429a      	cmp	r2, r3
 801346a:	dd90      	ble.n	801338e <lv_draw_shadow_full_straight+0x1c8>
    }
}
 801346c:	bf00      	nop
 801346e:	3740      	adds	r7, #64	; 0x40
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <lv_draw_cont_radius_corr>:

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b084      	sub	sp, #16
 8013478:	af00      	add	r7, sp, #0
 801347a:	4603      	mov	r3, r0
 801347c:	80fb      	strh	r3, [r7, #6]
 801347e:	460b      	mov	r3, r1
 8013480:	80bb      	strh	r3, [r7, #4]
 8013482:	4613      	mov	r3, r2
 8013484:	807b      	strh	r3, [r7, #2]
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8013486:	f7f6 ffd3 	bl	800a430 <lv_refr_get_disp_refreshing>
 801348a:	4603      	mov	r3, r0
 801348c:	4618      	mov	r0, r3
 801348e:	f001 fe9f 	bl	80151d0 <lv_disp_get_antialiasing>
 8013492:	4603      	mov	r3, r0
 8013494:	73fb      	strb	r3, [r7, #15]

    if(r >= (w >> 1)) {
 8013496:	88fb      	ldrh	r3, [r7, #6]
 8013498:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801349c:	1052      	asrs	r2, r2, #1
 801349e:	b212      	sxth	r2, r2
 80134a0:	4293      	cmp	r3, r2
 80134a2:	db0a      	blt.n	80134ba <lv_draw_cont_radius_corr+0x46>
        r = (w >> 1);
 80134a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80134a8:	105b      	asrs	r3, r3, #1
 80134aa:	b21b      	sxth	r3, r3
 80134ac:	80fb      	strh	r3, [r7, #6]
        if(r != 0) r--;
 80134ae:	88fb      	ldrh	r3, [r7, #6]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d002      	beq.n	80134ba <lv_draw_cont_radius_corr+0x46>
 80134b4:	88fb      	ldrh	r3, [r7, #6]
 80134b6:	3b01      	subs	r3, #1
 80134b8:	80fb      	strh	r3, [r7, #6]
    }
    if(r >= (h >> 1)) {
 80134ba:	88fb      	ldrh	r3, [r7, #6]
 80134bc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80134c0:	1052      	asrs	r2, r2, #1
 80134c2:	b212      	sxth	r2, r2
 80134c4:	4293      	cmp	r3, r2
 80134c6:	db0a      	blt.n	80134de <lv_draw_cont_radius_corr+0x6a>
        r = (h >> 1);
 80134c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80134cc:	105b      	asrs	r3, r3, #1
 80134ce:	b21b      	sxth	r3, r3
 80134d0:	80fb      	strh	r3, [r7, #6]
        if(r != 0) r--;
 80134d2:	88fb      	ldrh	r3, [r7, #6]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d002      	beq.n	80134de <lv_draw_cont_radius_corr+0x6a>
 80134d8:	88fb      	ldrh	r3, [r7, #6]
 80134da:	3b01      	subs	r3, #1
 80134dc:	80fb      	strh	r3, [r7, #6]
    }

    if(r > 0) r -= aa;
 80134de:	88fb      	ldrh	r3, [r7, #6]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d004      	beq.n	80134ee <lv_draw_cont_radius_corr+0x7a>
 80134e4:	7bfb      	ldrb	r3, [r7, #15]
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	88fa      	ldrh	r2, [r7, #6]
 80134ea:	1ad3      	subs	r3, r2, r3
 80134ec:	80fb      	strh	r3, [r7, #6]

    return r;
 80134ee:	88fb      	ldrh	r3, [r7, #6]
}
 80134f0:	4618      	mov	r0, r3
 80134f2:	3710      	adds	r7, #16
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <antialias_get_opa_circ>:
 * @param px_id index of pixel on the line segment
 * @param line_opa opacity of the lien (it will be the max opacity)
 * @return the desired opacity of the pixel
 */
static lv_opa_t antialias_get_opa_circ(lv_coord_t seg, lv_coord_t px_id, lv_opa_t opa)
{
 80134f8:	b480      	push	{r7}
 80134fa:	b085      	sub	sp, #20
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	4603      	mov	r3, r0
 8013500:	80fb      	strh	r3, [r7, #6]
 8013502:	460b      	mov	r3, r1
 8013504:	80bb      	strh	r3, [r7, #4]
 8013506:	4613      	mov	r3, r2
 8013508:	70fb      	strb	r3, [r7, #3]
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 801350a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801350e:	2b02      	cmp	r3, #2
 8013510:	d10a      	bne.n	8013528 <antialias_get_opa_circ+0x30>
 8013512:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013516:	4a20      	ldr	r2, [pc, #128]	; (8013598 <antialias_get_opa_circ+0xa0>)
 8013518:	5cd3      	ldrb	r3, [r2, r3]
 801351a:	461a      	mov	r2, r3
 801351c:	78fb      	ldrb	r3, [r7, #3]
 801351e:	fb03 f302 	mul.w	r3, r3, r2
 8013522:	121b      	asrs	r3, r3, #8
 8013524:	b2db      	uxtb	r3, r3
 8013526:	e031      	b.n	801358c <antialias_get_opa_circ+0x94>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 3
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 8013528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801352c:	2b03      	cmp	r3, #3
 801352e:	d10a      	bne.n	8013546 <antialias_get_opa_circ+0x4e>
 8013530:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013534:	4a19      	ldr	r2, [pc, #100]	; (801359c <antialias_get_opa_circ+0xa4>)
 8013536:	5cd3      	ldrb	r3, [r2, r3]
 8013538:	461a      	mov	r2, r3
 801353a:	78fb      	ldrb	r3, [r7, #3]
 801353c:	fb03 f302 	mul.w	r3, r3, r2
 8013540:	121b      	asrs	r3, r3, #8
 8013542:	b2db      	uxtb	r3, r3
 8013544:	e022      	b.n	801358c <antialias_get_opa_circ+0x94>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8013546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801354a:	2b04      	cmp	r3, #4
 801354c:	d10a      	bne.n	8013564 <antialias_get_opa_circ+0x6c>
 801354e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013552:	4a13      	ldr	r2, [pc, #76]	; (80135a0 <antialias_get_opa_circ+0xa8>)
 8013554:	5cd3      	ldrb	r3, [r2, r3]
 8013556:	461a      	mov	r2, r3
 8013558:	78fb      	ldrb	r3, [r7, #3]
 801355a:	fb03 f302 	mul.w	r3, r3, r2
 801355e:	121b      	asrs	r3, r3, #8
 8013560:	b2db      	uxtb	r3, r3
 8013562:	e013      	b.n	801358c <antialias_get_opa_circ+0x94>
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8013564:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013568:	4613      	mov	r3, r2
 801356a:	00db      	lsls	r3, r3, #3
 801356c:	1a9b      	subs	r3, r3, r2
 801356e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013572:	3a01      	subs	r2, #1
 8013574:	fbb3 f3f2 	udiv	r3, r3, r2
 8013578:	73fb      	strb	r3, [r7, #15]
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 801357a:	7bfb      	ldrb	r3, [r7, #15]
 801357c:	4a09      	ldr	r2, [pc, #36]	; (80135a4 <antialias_get_opa_circ+0xac>)
 801357e:	5cd3      	ldrb	r3, [r2, r3]
 8013580:	461a      	mov	r2, r3
 8013582:	78fb      	ldrb	r3, [r7, #3]
 8013584:	fb03 f302 	mul.w	r3, r3, r2
 8013588:	0a1b      	lsrs	r3, r3, #8
 801358a:	b2db      	uxtb	r3, r3
}
 801358c:	4618      	mov	r0, r3
 801358e:	3714      	adds	r7, #20
 8013590:	46bd      	mov	sp, r7
 8013592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013596:	4770      	bx	lr
 8013598:	0802d1fc 	.word	0x0802d1fc
 801359c:	0802d200 	.word	0x0802d200
 80135a0:	0802d204 	.word	0x0802d204
 80135a4:	0802d208 	.word	0x0802d208

080135a8 <lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b088      	sub	sp, #32
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	6039      	str	r1, [r7, #0]
    if(entry_cnt == 0) {
 80135b2:	4b6b      	ldr	r3, [pc, #428]	; (8013760 <lv_img_cache_open+0x1b8>)
 80135b4:	881b      	ldrh	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d101      	bne.n	80135be <lv_img_cache_open+0x16>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
 80135ba:	2300      	movs	r3, #0
 80135bc:	e0cc      	b.n	8013758 <lv_img_cache_open+0x1b0>
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 80135be:	4b69      	ldr	r3, [pc, #420]	; (8013764 <lv_img_cache_open+0x1bc>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	617b      	str	r3, [r7, #20]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 80135c4:	2300      	movs	r3, #0
 80135c6:	83fb      	strh	r3, [r7, #30]
 80135c8:	e021      	b.n	801360e <lv_img_cache_open+0x66>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 80135ca:	8bfa      	ldrh	r2, [r7, #30]
 80135cc:	4613      	mov	r3, r2
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	4413      	add	r3, r2
 80135d2:	00db      	lsls	r3, r3, #3
 80135d4:	461a      	mov	r2, r3
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	4413      	add	r3, r2
 80135da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135dc:	4a62      	ldr	r2, [pc, #392]	; (8013768 <lv_img_cache_open+0x1c0>)
 80135de:	4293      	cmp	r3, r2
 80135e0:	db12      	blt.n	8013608 <lv_img_cache_open+0x60>
            cache[i].life -= LV_IMG_CACHE_AGING;
 80135e2:	8bfa      	ldrh	r2, [r7, #30]
 80135e4:	4613      	mov	r3, r2
 80135e6:	009b      	lsls	r3, r3, #2
 80135e8:	4413      	add	r3, r2
 80135ea:	00db      	lsls	r3, r3, #3
 80135ec:	461a      	mov	r2, r3
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	4413      	add	r3, r2
 80135f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80135f4:	8bfa      	ldrh	r2, [r7, #30]
 80135f6:	4613      	mov	r3, r2
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	4413      	add	r3, r2
 80135fc:	00db      	lsls	r3, r3, #3
 80135fe:	461a      	mov	r2, r3
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	4413      	add	r3, r2
 8013604:	1e4a      	subs	r2, r1, #1
 8013606:	625a      	str	r2, [r3, #36]	; 0x24
    for(i = 0; i < entry_cnt; i++) {
 8013608:	8bfb      	ldrh	r3, [r7, #30]
 801360a:	3301      	adds	r3, #1
 801360c:	83fb      	strh	r3, [r7, #30]
 801360e:	4b54      	ldr	r3, [pc, #336]	; (8013760 <lv_img_cache_open+0x1b8>)
 8013610:	881b      	ldrh	r3, [r3, #0]
 8013612:	8bfa      	ldrh	r2, [r7, #30]
 8013614:	429a      	cmp	r2, r3
 8013616:	d3d8      	bcc.n	80135ca <lv_img_cache_open+0x22>
        }
    }

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
 8013618:	2300      	movs	r3, #0
 801361a:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < entry_cnt; i++) {
 801361c:	2300      	movs	r3, #0
 801361e:	83fb      	strh	r3, [r7, #30]
 8013620:	e02a      	b.n	8013678 <lv_img_cache_open+0xd0>
        if(cache[i].dec_dsc.src == src) {
 8013622:	8bfa      	ldrh	r2, [r7, #30]
 8013624:	4613      	mov	r3, r2
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	4413      	add	r3, r2
 801362a:	00db      	lsls	r3, r3, #3
 801362c:	461a      	mov	r2, r3
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	4413      	add	r3, r2
 8013632:	685b      	ldr	r3, [r3, #4]
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	429a      	cmp	r2, r3
 8013638:	d11b      	bne.n	8013672 <lv_img_cache_open+0xca>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
 801363a:	8bfa      	ldrh	r2, [r7, #30]
 801363c:	4613      	mov	r3, r2
 801363e:	009b      	lsls	r3, r3, #2
 8013640:	4413      	add	r3, r2
 8013642:	00db      	lsls	r3, r3, #3
 8013644:	461a      	mov	r2, r3
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	4413      	add	r3, r2
 801364a:	61bb      	str	r3, [r7, #24]
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013650:	461a      	mov	r2, r3
 8013652:	69bb      	ldr	r3, [r7, #24]
 8013654:	699b      	ldr	r3, [r3, #24]
 8013656:	4413      	add	r3, r2
 8013658:	461a      	mov	r2, r3
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	625a      	str	r2, [r3, #36]	; 0x24
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 801365e:	69bb      	ldr	r3, [r7, #24]
 8013660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013666:	dd0d      	ble.n	8013684 <lv_img_cache_open+0xdc>
 8013668:	69bb      	ldr	r3, [r7, #24]
 801366a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801366e:	625a      	str	r2, [r3, #36]	; 0x24
            LV_LOG_TRACE("image draw: image found in the cache");
            break;
 8013670:	e008      	b.n	8013684 <lv_img_cache_open+0xdc>
    for(i = 0; i < entry_cnt; i++) {
 8013672:	8bfb      	ldrh	r3, [r7, #30]
 8013674:	3301      	adds	r3, #1
 8013676:	83fb      	strh	r3, [r7, #30]
 8013678:	4b39      	ldr	r3, [pc, #228]	; (8013760 <lv_img_cache_open+0x1b8>)
 801367a:	881b      	ldrh	r3, [r3, #0]
 801367c:	8bfa      	ldrh	r2, [r7, #30]
 801367e:	429a      	cmp	r2, r3
 8013680:	d3cf      	bcc.n	8013622 <lv_img_cache_open+0x7a>
 8013682:	e000      	b.n	8013686 <lv_img_cache_open+0xde>
            break;
 8013684:	bf00      	nop
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
 8013686:	69bb      	ldr	r3, [r7, #24]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d164      	bne.n	8013756 <lv_img_cache_open+0x1ae>
        /*Find an entry to reuse. Select the entry with the least life*/
        cached_src = &cache[0];
 801368c:	697b      	ldr	r3, [r7, #20]
 801368e:	61bb      	str	r3, [r7, #24]
        for(i = 1; i < entry_cnt; i++) {
 8013690:	2301      	movs	r3, #1
 8013692:	83fb      	strh	r3, [r7, #30]
 8013694:	e018      	b.n	80136c8 <lv_img_cache_open+0x120>
            if(cache[i].life < cached_src->life) {
 8013696:	8bfa      	ldrh	r2, [r7, #30]
 8013698:	4613      	mov	r3, r2
 801369a:	009b      	lsls	r3, r3, #2
 801369c:	4413      	add	r3, r2
 801369e:	00db      	lsls	r3, r3, #3
 80136a0:	461a      	mov	r2, r3
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	4413      	add	r3, r2
 80136a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ac:	429a      	cmp	r2, r3
 80136ae:	da08      	bge.n	80136c2 <lv_img_cache_open+0x11a>
                cached_src = &cache[i];
 80136b0:	8bfa      	ldrh	r2, [r7, #30]
 80136b2:	4613      	mov	r3, r2
 80136b4:	009b      	lsls	r3, r3, #2
 80136b6:	4413      	add	r3, r2
 80136b8:	00db      	lsls	r3, r3, #3
 80136ba:	461a      	mov	r2, r3
 80136bc:	697b      	ldr	r3, [r7, #20]
 80136be:	4413      	add	r3, r2
 80136c0:	61bb      	str	r3, [r7, #24]
        for(i = 1; i < entry_cnt; i++) {
 80136c2:	8bfb      	ldrh	r3, [r7, #30]
 80136c4:	3301      	adds	r3, #1
 80136c6:	83fb      	strh	r3, [r7, #30]
 80136c8:	4b25      	ldr	r3, [pc, #148]	; (8013760 <lv_img_cache_open+0x1b8>)
 80136ca:	881b      	ldrh	r3, [r3, #0]
 80136cc:	8bfa      	ldrh	r2, [r7, #30]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d3e1      	bcc.n	8013696 <lv_img_cache_open+0xee>
            }
        }

        /*Close the decoder to reuse if it was opened (has a valid source)*/
        if(cached_src->dec_dsc.src) {
 80136d2:	69bb      	ldr	r3, [r7, #24]
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d003      	beq.n	80136e2 <lv_img_cache_open+0x13a>
            lv_img_decoder_close(&cached_src->dec_dsc);
 80136da:	69bb      	ldr	r3, [r7, #24]
 80136dc:	4618      	mov	r0, r3
 80136de:	f000 fa21 	bl	8013b24 <lv_img_decoder_close>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
        }

        /*Open the image and measure the time to open*/
        uint32_t t_start;
        t_start                          = lv_tick_get();
 80136e2:	f001 fe15 	bl	8015310 <lv_tick_get>
 80136e6:	6138      	str	r0, [r7, #16]
        cached_src->dec_dsc.time_to_open = 0;
 80136e8:	69bb      	ldr	r3, [r7, #24]
 80136ea:	2200      	movs	r2, #0
 80136ec:	619a      	str	r2, [r3, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 80136ee:	69bb      	ldr	r3, [r7, #24]
 80136f0:	683a      	ldr	r2, [r7, #0]
 80136f2:	6879      	ldr	r1, [r7, #4]
 80136f4:	4618      	mov	r0, r3
 80136f6:	f000 f987 	bl	8013a08 <lv_img_decoder_open>
 80136fa:	4603      	mov	r3, r0
 80136fc:	73fb      	strb	r3, [r7, #15]
        if(open_res == LV_RES_INV) {
 80136fe:	7bfb      	ldrb	r3, [r7, #15]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d114      	bne.n	801372e <lv_img_cache_open+0x186>
            LV_LOG_WARN("Image draw cannot open the image resource");
            lv_img_decoder_close(&cached_src->dec_dsc);
 8013704:	69bb      	ldr	r3, [r7, #24]
 8013706:	4618      	mov	r0, r3
 8013708:	f000 fa0c 	bl	8013b24 <lv_img_decoder_close>
            memset(&cached_src->dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	2224      	movs	r2, #36	; 0x24
 8013710:	2100      	movs	r1, #0
 8013712:	4618      	mov	r0, r3
 8013714:	f016 fb59 	bl	8029dca <memset>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 8013718:	2228      	movs	r2, #40	; 0x28
 801371a:	2100      	movs	r1, #0
 801371c:	69b8      	ldr	r0, [r7, #24]
 801371e:	f016 fb54 	bl	8029dca <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013728:	625a      	str	r2, [r3, #36]	; 0x24
            return NULL;
 801372a:	2300      	movs	r3, #0
 801372c:	e014      	b.n	8013758 <lv_img_cache_open+0x1b0>
        }

        cached_src->life = 0;
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	2200      	movs	r2, #0
 8013732:	625a      	str	r2, [r3, #36]	; 0x24

        /*If `time_to_open` was not set in the open function set it here*/
        if(cached_src->dec_dsc.time_to_open == 0) {
 8013734:	69bb      	ldr	r3, [r7, #24]
 8013736:	699b      	ldr	r3, [r3, #24]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d105      	bne.n	8013748 <lv_img_cache_open+0x1a0>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 801373c:	6938      	ldr	r0, [r7, #16]
 801373e:	f001 fe01 	bl	8015344 <lv_tick_elaps>
 8013742:	4602      	mov	r2, r0
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	619a      	str	r2, [r3, #24]
        }

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	699b      	ldr	r3, [r3, #24]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d102      	bne.n	8013756 <lv_img_cache_open+0x1ae>
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	2201      	movs	r2, #1
 8013754:	619a      	str	r2, [r3, #24]
    }

    return cached_src;
 8013756:	69bb      	ldr	r3, [r7, #24]
}
 8013758:	4618      	mov	r0, r3
 801375a:	3720      	adds	r7, #32
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}
 8013760:	20017778 	.word	0x20017778
 8013764:	2001bb80 	.word	0x2001bb80
 8013768:	80000002 	.word	0x80000002

0801376c <lv_img_cache_set_size>:
 * More cached images mean more opened image at same time which might mean more memory usage.
 * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 * @param new_entry_cnt number of image to cache
 */
void lv_img_cache_set_size(uint16_t new_entry_cnt)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b084      	sub	sp, #16
 8013770:	af00      	add	r7, sp, #0
 8013772:	4603      	mov	r3, r0
 8013774:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8013776:	4b27      	ldr	r3, [pc, #156]	; (8013814 <lv_img_cache_set_size+0xa8>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d007      	beq.n	801378e <lv_img_cache_set_size+0x22>
        /*Clean the cache before free it*/
        lv_img_cache_invalidate_src(NULL);
 801377e:	2000      	movs	r0, #0
 8013780:	f000 f84c 	bl	801381c <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8013784:	4b23      	ldr	r3, [pc, #140]	; (8013814 <lv_img_cache_set_size+0xa8>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	4618      	mov	r0, r3
 801378a:	f002 ff27 	bl	80165dc <lv_mem_free>
    }

    /*Reallocate the cache*/
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 801378e:	88fa      	ldrh	r2, [r7, #6]
 8013790:	4613      	mov	r3, r2
 8013792:	009b      	lsls	r3, r3, #2
 8013794:	4413      	add	r3, r2
 8013796:	00db      	lsls	r3, r3, #3
 8013798:	4618      	mov	r0, r3
 801379a:	f002 fedf 	bl	801655c <lv_mem_alloc>
 801379e:	4602      	mov	r2, r0
 80137a0:	4b1c      	ldr	r3, [pc, #112]	; (8013814 <lv_img_cache_set_size+0xa8>)
 80137a2:	601a      	str	r2, [r3, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 80137a4:	4b1b      	ldr	r3, [pc, #108]	; (8013814 <lv_img_cache_set_size+0xa8>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d100      	bne.n	80137ae <lv_img_cache_set_size+0x42>
 80137ac:	e7fe      	b.n	80137ac <lv_img_cache_set_size+0x40>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 80137ae:	4b19      	ldr	r3, [pc, #100]	; (8013814 <lv_img_cache_set_size+0xa8>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d103      	bne.n	80137be <lv_img_cache_set_size+0x52>
        entry_cnt = 0;
 80137b6:	4b18      	ldr	r3, [pc, #96]	; (8013818 <lv_img_cache_set_size+0xac>)
 80137b8:	2200      	movs	r2, #0
 80137ba:	801a      	strh	r2, [r3, #0]
        return;
 80137bc:	e027      	b.n	801380e <lv_img_cache_set_size+0xa2>
    }
    entry_cnt = new_entry_cnt;
 80137be:	4a16      	ldr	r2, [pc, #88]	; (8013818 <lv_img_cache_set_size+0xac>)
 80137c0:	88fb      	ldrh	r3, [r7, #6]
 80137c2:	8013      	strh	r3, [r2, #0]

    /*Clean the cache*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 80137c4:	2300      	movs	r3, #0
 80137c6:	81fb      	strh	r3, [r7, #14]
 80137c8:	e01c      	b.n	8013804 <lv_img_cache_set_size+0x98>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 80137ca:	4b12      	ldr	r3, [pc, #72]	; (8013814 <lv_img_cache_set_size+0xa8>)
 80137cc:	6819      	ldr	r1, [r3, #0]
 80137ce:	89fa      	ldrh	r2, [r7, #14]
 80137d0:	4613      	mov	r3, r2
 80137d2:	009b      	lsls	r3, r3, #2
 80137d4:	4413      	add	r3, r2
 80137d6:	00db      	lsls	r3, r3, #3
 80137d8:	440b      	add	r3, r1
 80137da:	2224      	movs	r2, #36	; 0x24
 80137dc:	2100      	movs	r1, #0
 80137de:	4618      	mov	r0, r3
 80137e0:	f016 faf3 	bl	8029dca <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 80137e4:	4b0b      	ldr	r3, [pc, #44]	; (8013814 <lv_img_cache_set_size+0xa8>)
 80137e6:	6819      	ldr	r1, [r3, #0]
 80137e8:	89fa      	ldrh	r2, [r7, #14]
 80137ea:	4613      	mov	r3, r2
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	4413      	add	r3, r2
 80137f0:	00db      	lsls	r3, r3, #3
 80137f2:	440b      	add	r3, r1
 80137f4:	2228      	movs	r2, #40	; 0x28
 80137f6:	2100      	movs	r1, #0
 80137f8:	4618      	mov	r0, r3
 80137fa:	f016 fae6 	bl	8029dca <memset>
    for(i = 0; i < entry_cnt; i++) {
 80137fe:	89fb      	ldrh	r3, [r7, #14]
 8013800:	3301      	adds	r3, #1
 8013802:	81fb      	strh	r3, [r7, #14]
 8013804:	4b04      	ldr	r3, [pc, #16]	; (8013818 <lv_img_cache_set_size+0xac>)
 8013806:	881b      	ldrh	r3, [r3, #0]
 8013808:	89fa      	ldrh	r2, [r7, #14]
 801380a:	429a      	cmp	r2, r3
 801380c:	d3dd      	bcc.n	80137ca <lv_img_cache_set_size+0x5e>
    }
}
 801380e:	3710      	adds	r7, #16
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}
 8013814:	2001bb80 	.word	0x2001bb80
 8013818:	20017778 	.word	0x20017778

0801381c <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b084      	sub	sp, #16
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8013824:	4b28      	ldr	r3, [pc, #160]	; (80138c8 <lv_img_cache_invalidate_src+0xac>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	60bb      	str	r3, [r7, #8]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 801382a:	2300      	movs	r3, #0
 801382c:	81fb      	strh	r3, [r7, #14]
 801382e:	e041      	b.n	80138b4 <lv_img_cache_invalidate_src+0x98>
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8013830:	89fa      	ldrh	r2, [r7, #14]
 8013832:	4613      	mov	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	4413      	add	r3, r2
 8013838:	00db      	lsls	r3, r3, #3
 801383a:	461a      	mov	r2, r3
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	4413      	add	r3, r2
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	687a      	ldr	r2, [r7, #4]
 8013844:	429a      	cmp	r2, r3
 8013846:	d002      	beq.n	801384e <lv_img_cache_invalidate_src+0x32>
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d12f      	bne.n	80138ae <lv_img_cache_invalidate_src+0x92>
            if(cache[i].dec_dsc.src != NULL) {
 801384e:	89fa      	ldrh	r2, [r7, #14]
 8013850:	4613      	mov	r3, r2
 8013852:	009b      	lsls	r3, r3, #2
 8013854:	4413      	add	r3, r2
 8013856:	00db      	lsls	r3, r3, #3
 8013858:	461a      	mov	r2, r3
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	4413      	add	r3, r2
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d00a      	beq.n	801387a <lv_img_cache_invalidate_src+0x5e>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8013864:	89fa      	ldrh	r2, [r7, #14]
 8013866:	4613      	mov	r3, r2
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	4413      	add	r3, r2
 801386c:	00db      	lsls	r3, r3, #3
 801386e:	461a      	mov	r2, r3
 8013870:	68bb      	ldr	r3, [r7, #8]
 8013872:	4413      	add	r3, r2
 8013874:	4618      	mov	r0, r3
 8013876:	f000 f955 	bl	8013b24 <lv_img_decoder_close>
            }

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 801387a:	89fa      	ldrh	r2, [r7, #14]
 801387c:	4613      	mov	r3, r2
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	4413      	add	r3, r2
 8013882:	00db      	lsls	r3, r3, #3
 8013884:	461a      	mov	r2, r3
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	4413      	add	r3, r2
 801388a:	2224      	movs	r2, #36	; 0x24
 801388c:	2100      	movs	r1, #0
 801388e:	4618      	mov	r0, r3
 8013890:	f016 fa9b 	bl	8029dca <memset>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 8013894:	89fa      	ldrh	r2, [r7, #14]
 8013896:	4613      	mov	r3, r2
 8013898:	009b      	lsls	r3, r3, #2
 801389a:	4413      	add	r3, r2
 801389c:	00db      	lsls	r3, r3, #3
 801389e:	461a      	mov	r2, r3
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	4413      	add	r3, r2
 80138a4:	2228      	movs	r2, #40	; 0x28
 80138a6:	2100      	movs	r1, #0
 80138a8:	4618      	mov	r0, r3
 80138aa:	f016 fa8e 	bl	8029dca <memset>
    for(i = 0; i < entry_cnt; i++) {
 80138ae:	89fb      	ldrh	r3, [r7, #14]
 80138b0:	3301      	adds	r3, #1
 80138b2:	81fb      	strh	r3, [r7, #14]
 80138b4:	4b05      	ldr	r3, [pc, #20]	; (80138cc <lv_img_cache_invalidate_src+0xb0>)
 80138b6:	881b      	ldrh	r3, [r3, #0]
 80138b8:	89fa      	ldrh	r2, [r7, #14]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d3b8      	bcc.n	8013830 <lv_img_cache_invalidate_src+0x14>
        }
    }
}
 80138be:	bf00      	nop
 80138c0:	3710      	adds	r7, #16
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}
 80138c6:	bf00      	nop
 80138c8:	2001bb80 	.word	0x2001bb80
 80138cc:	20017778 	.word	0x20017778

080138d0 <lv_color_make>:
{
 80138d0:	b480      	push	{r7}
 80138d2:	b085      	sub	sp, #20
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	4603      	mov	r3, r0
 80138d8:	71fb      	strb	r3, [r7, #7]
 80138da:	460b      	mov	r3, r1
 80138dc:	71bb      	strb	r3, [r7, #6]
 80138de:	4613      	mov	r3, r2
 80138e0:	717b      	strb	r3, [r7, #5]
    color.ch.green_h = (uint16_t)(g8 >> 5);
 80138e2:	79bb      	ldrb	r3, [r7, #6]
 80138e4:	095b      	lsrs	r3, r3, #5
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	f003 0307 	and.w	r3, r3, #7
 80138ec:	b2da      	uxtb	r2, r3
 80138ee:	7b3b      	ldrb	r3, [r7, #12]
 80138f0:	f362 0302 	bfi	r3, r2, #0, #3
 80138f4:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 80138f6:	79fb      	ldrb	r3, [r7, #7]
 80138f8:	08db      	lsrs	r3, r3, #3
 80138fa:	b2db      	uxtb	r3, r3
 80138fc:	f003 031f 	and.w	r3, r3, #31
 8013900:	b2da      	uxtb	r2, r3
 8013902:	7b3b      	ldrb	r3, [r7, #12]
 8013904:	f362 03c7 	bfi	r3, r2, #3, #5
 8013908:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 801390a:	797b      	ldrb	r3, [r7, #5]
 801390c:	08db      	lsrs	r3, r3, #3
 801390e:	b2db      	uxtb	r3, r3
 8013910:	f003 031f 	and.w	r3, r3, #31
 8013914:	b2da      	uxtb	r2, r3
 8013916:	7b7b      	ldrb	r3, [r7, #13]
 8013918:	f362 0304 	bfi	r3, r2, #0, #5
 801391c:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 801391e:	79bb      	ldrb	r3, [r7, #6]
 8013920:	089b      	lsrs	r3, r3, #2
 8013922:	b2db      	uxtb	r3, r3
 8013924:	f003 0307 	and.w	r3, r3, #7
 8013928:	b2da      	uxtb	r2, r3
 801392a:	7b7b      	ldrb	r3, [r7, #13]
 801392c:	f362 1347 	bfi	r3, r2, #5, #3
 8013930:	737b      	strb	r3, [r7, #13]
    return color;
 8013932:	89bb      	ldrh	r3, [r7, #12]
}
 8013934:	4618      	mov	r0, r3
 8013936:	3714      	adds	r7, #20
 8013938:	46bd      	mov	sp, r7
 801393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393e:	4770      	bx	lr

08013940 <lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 * */
void lv_img_decoder_init(void)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 8013946:	2114      	movs	r1, #20
 8013948:	4810      	ldr	r0, [pc, #64]	; (801398c <lv_img_decoder_init+0x4c>)
 801394a:	f002 fb05 	bl	8015f58 <lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 801394e:	f000 f8ff 	bl	8013b50 <lv_img_decoder_create>
 8013952:	6078      	str	r0, [r7, #4]
    if(decoder == NULL) {
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d103      	bne.n	8013962 <lv_img_decoder_init+0x22>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        lv_mem_assert(decoder);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d111      	bne.n	8013984 <lv_img_decoder_init+0x44>
 8013960:	e7fe      	b.n	8013960 <lv_img_decoder_init+0x20>
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8013962:	490b      	ldr	r1, [pc, #44]	; (8013990 <lv_img_decoder_init+0x50>)
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f000 f90f 	bl	8013b88 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 801396a:	490a      	ldr	r1, [pc, #40]	; (8013994 <lv_img_decoder_init+0x54>)
 801396c:	6878      	ldr	r0, [r7, #4]
 801396e:	f000 f919 	bl	8013ba4 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8013972:	4909      	ldr	r1, [pc, #36]	; (8013998 <lv_img_decoder_init+0x58>)
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f000 f923 	bl	8013bc0 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 801397a:	4908      	ldr	r1, [pc, #32]	; (801399c <lv_img_decoder_init+0x5c>)
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f000 f92d 	bl	8013bdc <lv_img_decoder_set_close_cb>
 8013982:	e000      	b.n	8013986 <lv_img_decoder_init+0x46>
        return;
 8013984:	bf00      	nop
}
 8013986:	3708      	adds	r7, #8
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	2001bb64 	.word	0x2001bb64
 8013990:	08013bf9 	.word	0x08013bf9
 8013994:	08013cfd 	.word	0x08013cfd
 8013998:	08013f55 	.word	0x08013f55
 801399c:	08014079 	.word	0x08014079

080139a0 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const char * src, lv_img_header_t * header)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b084      	sub	sp, #16
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	6039      	str	r1, [r7, #0]
    header->always_zero = 0;
 80139aa:	683a      	ldr	r2, [r7, #0]
 80139ac:	7813      	ldrb	r3, [r2, #0]
 80139ae:	f36f 1347 	bfc	r3, #5, #3
 80139b2:	7013      	strb	r3, [r2, #0]

    lv_res_t res = LV_RES_INV;
 80139b4:	2300      	movs	r3, #0
 80139b6:	73fb      	strb	r3, [r7, #15]
    lv_img_decoder_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 80139b8:	4812      	ldr	r0, [pc, #72]	; (8013a04 <lv_img_decoder_get_info+0x64>)
 80139ba:	f002 fc4f 	bl	801625c <lv_ll_get_head>
 80139be:	60b8      	str	r0, [r7, #8]
 80139c0:	e015      	b.n	80139ee <lv_img_decoder_get_info+0x4e>
    {
        res = LV_RES_INV;
 80139c2:	2300      	movs	r3, #0
 80139c4:	73fb      	strb	r3, [r7, #15]
        if(d->info_cb) {
 80139c6:	68bb      	ldr	r3, [r7, #8]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d00a      	beq.n	80139e4 <lv_img_decoder_get_info+0x44>
            res = d->info_cb(d, src, header);
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	683a      	ldr	r2, [r7, #0]
 80139d4:	6879      	ldr	r1, [r7, #4]
 80139d6:	68b8      	ldr	r0, [r7, #8]
 80139d8:	4798      	blx	r3
 80139da:	4603      	mov	r3, r0
 80139dc:	73fb      	strb	r3, [r7, #15]
            if(res == LV_RES_OK) break;
 80139de:	7bfb      	ldrb	r3, [r7, #15]
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	d008      	beq.n	80139f6 <lv_img_decoder_get_info+0x56>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 80139e4:	68b9      	ldr	r1, [r7, #8]
 80139e6:	4807      	ldr	r0, [pc, #28]	; (8013a04 <lv_img_decoder_get_info+0x64>)
 80139e8:	f002 fc5e 	bl	80162a8 <lv_ll_get_next>
 80139ec:	60b8      	str	r0, [r7, #8]
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d1e6      	bne.n	80139c2 <lv_img_decoder_get_info+0x22>
 80139f4:	e000      	b.n	80139f8 <lv_img_decoder_get_info+0x58>
            if(res == LV_RES_OK) break;
 80139f6:	bf00      	nop
        }
    }

    return res;
 80139f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3710      	adds	r7, #16
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}
 8013a02:	bf00      	nop
 8013a04:	2001bb64 	.word	0x2001bb64

08013a08 <lv_img_decoder_open>:
 * @param style the style of the image
 * @return LV_RES_OK: opened the image. `dsc->img_data` and `dsc->header` are set.
 *         LV_RES_INV: none of the registered image decoders were able to open the image.
 */
lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, const lv_style_t * style)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b086      	sub	sp, #24
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	60f8      	str	r0, [r7, #12]
 8013a10:	60b9      	str	r1, [r7, #8]
 8013a12:	607a      	str	r2, [r7, #4]
    dsc->style     = style;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	687a      	ldr	r2, [r7, #4]
 8013a18:	609a      	str	r2, [r3, #8]
    dsc->src       = src;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	68ba      	ldr	r2, [r7, #8]
 8013a1e:	605a      	str	r2, [r3, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 8013a20:	68b8      	ldr	r0, [r7, #8]
 8013a22:	f7f9 fa71 	bl	800cf08 <lv_img_src_get_type>
 8013a26:	4603      	mov	r3, r0
 8013a28:	461a      	mov	r2, r3
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	731a      	strb	r2, [r3, #12]
    dsc->user_data = NULL;
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	2200      	movs	r2, #0
 8013a32:	621a      	str	r2, [r3, #32]

    lv_res_t res = LV_RES_INV;
 8013a34:	2300      	movs	r3, #0
 8013a36:	75fb      	strb	r3, [r7, #23]

    lv_img_decoder_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8013a38:	4823      	ldr	r0, [pc, #140]	; (8013ac8 <lv_img_decoder_open+0xc0>)
 8013a3a:	f002 fc0f 	bl	801625c <lv_ll_get_head>
 8013a3e:	6138      	str	r0, [r7, #16]
 8013a40:	e02f      	b.n	8013aa2 <lv_img_decoder_open+0x9a>
    {
        /*Info an Open callbacks are required*/
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d023      	beq.n	8013a92 <lv_img_decoder_open+0x8a>
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	685b      	ldr	r3, [r3, #4]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d01f      	beq.n	8013a92 <lv_img_decoder_open+0x8a>

        res = d->info_cb(d, src, &dsc->header);
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	68fa      	ldr	r2, [r7, #12]
 8013a58:	3210      	adds	r2, #16
 8013a5a:	68b9      	ldr	r1, [r7, #8]
 8013a5c:	6938      	ldr	r0, [r7, #16]
 8013a5e:	4798      	blx	r3
 8013a60:	4603      	mov	r3, r0
 8013a62:	75fb      	strb	r3, [r7, #23]
        if(res != LV_RES_OK) continue;
 8013a64:	7dfb      	ldrb	r3, [r7, #23]
 8013a66:	2b01      	cmp	r3, #1
 8013a68:	d115      	bne.n	8013a96 <lv_img_decoder_open+0x8e>

        dsc->error_msg = NULL;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	61da      	str	r2, [r3, #28]
        dsc->img_data  = NULL;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	2200      	movs	r2, #0
 8013a74:	615a      	str	r2, [r3, #20]
        dsc->decoder   = d;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	693a      	ldr	r2, [r7, #16]
 8013a7a:	601a      	str	r2, [r3, #0]

        res = d->open_cb(d, dsc);
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	68f9      	ldr	r1, [r7, #12]
 8013a82:	6938      	ldr	r0, [r7, #16]
 8013a84:	4798      	blx	r3
 8013a86:	4603      	mov	r3, r0
 8013a88:	75fb      	strb	r3, [r7, #23]

        /*Opened successfully. It is a good decoder to for this image source*/
        if(res == LV_RES_OK) break;
 8013a8a:	7dfb      	ldrb	r3, [r7, #23]
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d00c      	beq.n	8013aaa <lv_img_decoder_open+0xa2>
 8013a90:	e002      	b.n	8013a98 <lv_img_decoder_open+0x90>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8013a92:	bf00      	nop
 8013a94:	e000      	b.n	8013a98 <lv_img_decoder_open+0x90>
        if(res != LV_RES_OK) continue;
 8013a96:	bf00      	nop
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8013a98:	6939      	ldr	r1, [r7, #16]
 8013a9a:	480b      	ldr	r0, [pc, #44]	; (8013ac8 <lv_img_decoder_open+0xc0>)
 8013a9c:	f002 fc04 	bl	80162a8 <lv_ll_get_next>
 8013aa0:	6138      	str	r0, [r7, #16]
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d1cc      	bne.n	8013a42 <lv_img_decoder_open+0x3a>
 8013aa8:	e000      	b.n	8013aac <lv_img_decoder_open+0xa4>
        if(res == LV_RES_OK) break;
 8013aaa:	bf00      	nop
    }

    if(res == LV_RES_INV) {
 8013aac:	7dfb      	ldrb	r3, [r7, #23]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d104      	bne.n	8013abc <lv_img_decoder_open+0xb4>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8013ab2:	2224      	movs	r2, #36	; 0x24
 8013ab4:	2100      	movs	r1, #0
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f016 f987 	bl	8029dca <memset>
    }

    return res;
 8013abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3718      	adds	r7, #24
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	2001bb64 	.word	0x2001bb64

08013acc <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8013acc:	b590      	push	{r4, r7, lr}
 8013ace:	b089      	sub	sp, #36	; 0x24
 8013ad0:	af02      	add	r7, sp, #8
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	4608      	mov	r0, r1
 8013ad6:	4611      	mov	r1, r2
 8013ad8:	461a      	mov	r2, r3
 8013ada:	4603      	mov	r3, r0
 8013adc:	817b      	strh	r3, [r7, #10]
 8013ade:	460b      	mov	r3, r1
 8013ae0:	813b      	strh	r3, [r7, #8]
 8013ae2:	4613      	mov	r3, r2
 8013ae4:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	689b      	ldr	r3, [r3, #8]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d012      	beq.n	8013b1a <lv_img_decoder_read_line+0x4e>
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	689c      	ldr	r4, [r3, #8]
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	6818      	ldr	r0, [r3, #0]
 8013afe:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8013b02:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b08:	9301      	str	r3, [sp, #4]
 8013b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013b0e:	9300      	str	r3, [sp, #0]
 8013b10:	460b      	mov	r3, r1
 8013b12:	68f9      	ldr	r1, [r7, #12]
 8013b14:	47a0      	blx	r4
 8013b16:	4603      	mov	r3, r0
 8013b18:	75fb      	strb	r3, [r7, #23]

    return res;
 8013b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	371c      	adds	r7, #28
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd90      	pop	{r4, r7, pc}

08013b24 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
    if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	68db      	ldr	r3, [r3, #12]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d007      	beq.n	8013b46 <lv_img_decoder_close+0x22>
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	687a      	ldr	r2, [r7, #4]
 8013b3e:	6812      	ldr	r2, [r2, #0]
 8013b40:	6879      	ldr	r1, [r7, #4]
 8013b42:	4610      	mov	r0, r2
 8013b44:	4798      	blx	r3
}
 8013b46:	bf00      	nop
 8013b48:	3708      	adds	r7, #8
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}
	...

08013b50 <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 8013b56:	480b      	ldr	r0, [pc, #44]	; (8013b84 <lv_img_decoder_create+0x34>)
 8013b58:	f002 fa1e 	bl	8015f98 <lv_ll_ins_head>
 8013b5c:	6078      	str	r0, [r7, #4]
    lv_mem_assert(decoder);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d100      	bne.n	8013b66 <lv_img_decoder_create+0x16>
 8013b64:	e7fe      	b.n	8013b64 <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d101      	bne.n	8013b70 <lv_img_decoder_create+0x20>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	e005      	b.n	8013b7c <lv_img_decoder_create+0x2c>

    memset(decoder, 0, sizeof(lv_img_decoder_t));
 8013b70:	2214      	movs	r2, #20
 8013b72:	2100      	movs	r1, #0
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f016 f928 	bl	8029dca <memset>

    return decoder;
 8013b7a:	687b      	ldr	r3, [r7, #4]
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3708      	adds	r7, #8
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	2001bb64 	.word	0x2001bb64

08013b88 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 8013b88:	b480      	push	{r7}
 8013b8a:	b083      	sub	sp, #12
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	683a      	ldr	r2, [r7, #0]
 8013b96:	601a      	str	r2, [r3, #0]
}
 8013b98:	bf00      	nop
 8013b9a:	370c      	adds	r7, #12
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba2:	4770      	bx	lr

08013ba4 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8013ba4:	b480      	push	{r7}
 8013ba6:	b083      	sub	sp, #12
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	683a      	ldr	r2, [r7, #0]
 8013bb2:	605a      	str	r2, [r3, #4]
}
 8013bb4:	bf00      	nop
 8013bb6:	370c      	adds	r7, #12
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbe:	4770      	bx	lr

08013bc0 <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	b083      	sub	sp, #12
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	683a      	ldr	r2, [r7, #0]
 8013bce:	609a      	str	r2, [r3, #8]
}
 8013bd0:	bf00      	nop
 8013bd2:	370c      	adds	r7, #12
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b083      	sub	sp, #12
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	683a      	ldr	r2, [r7, #0]
 8013bea:	60da      	str	r2, [r3, #12]
}
 8013bec:	bf00      	nop
 8013bee:	370c      	adds	r7, #12
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf6:	4770      	bx	lr

08013bf8 <lv_img_decoder_built_in_info>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b088      	sub	sp, #32
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	60f8      	str	r0, [r7, #12]
 8013c00:	60b9      	str	r1, [r7, #8]
 8013c02:	607a      	str	r2, [r7, #4]
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8013c04:	68b8      	ldr	r0, [r7, #8]
 8013c06:	f7f9 f97f 	bl	800cf08 <lv_img_src_get_type>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	77bb      	strb	r3, [r7, #30]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8013c0e:	7fbb      	ldrb	r3, [r7, #30]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d11e      	bne.n	8013c52 <lv_img_decoder_built_in_info+0x5a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013c1c:	b299      	uxth	r1, r3
 8013c1e:	687a      	ldr	r2, [r7, #4]
 8013c20:	6813      	ldr	r3, [r2, #0]
 8013c22:	f361 2394 	bfi	r3, r1, #10, #11
 8013c26:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	885b      	ldrh	r3, [r3, #2]
 8013c2c:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8013c30:	b299      	uxth	r1, r3
 8013c32:	687a      	ldr	r2, [r7, #4]
 8013c34:	8853      	ldrh	r3, [r2, #2]
 8013c36:	f361 134f 	bfi	r3, r1, #5, #11
 8013c3a:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8013c44:	b2d9      	uxtb	r1, r3
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	7813      	ldrb	r3, [r2, #0]
 8013c4a:	f361 0304 	bfi	r3, r1, #0, #5
 8013c4e:	7013      	strb	r3, [r2, #0]
 8013c50:	e04e      	b.n	8013cf0 <lv_img_decoder_built_in_info+0xf8>
    }
#if LV_USE_FILESYSTEM
    else if(src_type == LV_IMG_SRC_FILE) {
 8013c52:	7fbb      	ldrb	r3, [r7, #30]
 8013c54:	2b01      	cmp	r3, #1
 8013c56:	d133      	bne.n	8013cc0 <lv_img_decoder_built_in_info+0xc8>
        lv_fs_file_t file;
        lv_fs_res_t res;
        uint32_t rn;
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 8013c58:	f107 0314 	add.w	r3, r7, #20
 8013c5c:	2202      	movs	r2, #2
 8013c5e:	68b9      	ldr	r1, [r7, #8]
 8013c60:	4618      	mov	r0, r3
 8013c62:	f001 ffff 	bl	8015c64 <lv_fs_open>
 8013c66:	4603      	mov	r3, r0
 8013c68:	77fb      	strb	r3, [r7, #31]
        if(res == LV_FS_RES_OK) {
 8013c6a:	7ffb      	ldrb	r3, [r7, #31]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d10e      	bne.n	8013c8e <lv_img_decoder_built_in_info+0x96>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 8013c70:	f107 0310 	add.w	r3, r7, #16
 8013c74:	f107 0014 	add.w	r0, r7, #20
 8013c78:	2204      	movs	r2, #4
 8013c7a:	6879      	ldr	r1, [r7, #4]
 8013c7c:	f002 f8a1 	bl	8015dc2 <lv_fs_read>
 8013c80:	4603      	mov	r3, r0
 8013c82:	77fb      	strb	r3, [r7, #31]
            lv_fs_close(&file);
 8013c84:	f107 0314 	add.w	r3, r7, #20
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f002 f86b 	bl	8015d64 <lv_fs_close>
        }

        /*Create a dummy header on fs error*/
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8013c8e:	7ffb      	ldrb	r3, [r7, #31]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d102      	bne.n	8013c9a <lv_img_decoder_built_in_info+0xa2>
 8013c94:	693b      	ldr	r3, [r7, #16]
 8013c96:	2b04      	cmp	r3, #4
 8013c98:	d02a      	beq.n	8013cf0 <lv_img_decoder_built_in_info+0xf8>
            header->w  = LV_DPI;
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	6813      	ldr	r3, [r2, #0]
 8013c9e:	2164      	movs	r1, #100	; 0x64
 8013ca0:	f361 2394 	bfi	r3, r1, #10, #11
 8013ca4:	6013      	str	r3, [r2, #0]
            header->h  = LV_DPI;
 8013ca6:	687a      	ldr	r2, [r7, #4]
 8013ca8:	8853      	ldrh	r3, [r2, #2]
 8013caa:	2164      	movs	r1, #100	; 0x64
 8013cac:	f361 134f 	bfi	r3, r1, #5, #11
 8013cb0:	8053      	strh	r3, [r2, #2]
            header->cf = LV_IMG_CF_UNKNOWN;
 8013cb2:	687a      	ldr	r2, [r7, #4]
 8013cb4:	7813      	ldrb	r3, [r2, #0]
 8013cb6:	f36f 0304 	bfc	r3, #0, #5
 8013cba:	7013      	strb	r3, [r2, #0]
            return LV_RES_INV;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	e018      	b.n	8013cf2 <lv_img_decoder_built_in_info+0xfa>
        }
    }
#endif
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8013cc0:	7fbb      	ldrb	r3, [r7, #30]
 8013cc2:	2b02      	cmp	r3, #2
 8013cc4:	d112      	bne.n	8013cec <lv_img_decoder_built_in_info+0xf4>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         * function*/
        header->w = 1;
 8013cc6:	687a      	ldr	r2, [r7, #4]
 8013cc8:	6813      	ldr	r3, [r2, #0]
 8013cca:	2101      	movs	r1, #1
 8013ccc:	f361 2394 	bfi	r3, r1, #10, #11
 8013cd0:	6013      	str	r3, [r2, #0]
        header->h = 1;
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	8853      	ldrh	r3, [r2, #2]
 8013cd6:	2101      	movs	r1, #1
 8013cd8:	f361 134f 	bfi	r3, r1, #5, #11
 8013cdc:	8053      	strh	r3, [r2, #2]
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8013cde:	687a      	ldr	r2, [r7, #4]
 8013ce0:	7813      	ldrb	r3, [r2, #0]
 8013ce2:	210b      	movs	r1, #11
 8013ce4:	f361 0304 	bfi	r3, r1, #0, #5
 8013ce8:	7013      	strb	r3, [r2, #0]
 8013cea:	e001      	b.n	8013cf0 <lv_img_decoder_built_in_info+0xf8>
    } else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 8013cec:	2300      	movs	r3, #0
 8013cee:	e000      	b.n	8013cf2 <lv_img_decoder_built_in_info+0xfa>
    }
    return LV_RES_OK;
 8013cf0:	2301      	movs	r3, #1
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	3720      	adds	r7, #32
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}
	...

08013cfc <lv_img_decoder_built_in_open>:

static lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8013cfc:	b5b0      	push	{r4, r5, r7, lr}
 8013cfe:	b08c      	sub	sp, #48	; 0x30
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
 8013d04:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	7b1b      	ldrb	r3, [r3, #12]
 8013d0a:	2b01      	cmp	r3, #1
 8013d0c:	d153      	bne.n	8013db6 <lv_img_decoder_built_in_open+0xba>
#if LV_USE_FILESYSTEM

        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	4618      	mov	r0, r3
 8013d14:	f002 f8ae 	bl	8015e74 <lv_fs_get_ext>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	498d      	ldr	r1, [pc, #564]	; (8013f50 <lv_img_decoder_built_in_open+0x254>)
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7ec fa57 	bl	80001d0 <strcmp>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d001      	beq.n	8013d2c <lv_img_decoder_built_in_open+0x30>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	e10d      	b.n	8013f48 <lv_img_decoder_built_in_open+0x24c>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	6859      	ldr	r1, [r3, #4]
 8013d30:	f107 030c 	add.w	r3, r7, #12
 8013d34:	2202      	movs	r2, #2
 8013d36:	4618      	mov	r0, r3
 8013d38:	f001 ff94 	bl	8015c64 <lv_fs_open>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if(res != LV_FS_RES_OK) {
 8013d42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d001      	beq.n	8013d4e <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	e0fc      	b.n	8013f48 <lv_img_decoder_built_in_open+0x24c>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 8013d4e:	683b      	ldr	r3, [r7, #0]
 8013d50:	6a1b      	ldr	r3, [r3, #32]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d115      	bne.n	8013d82 <lv_img_decoder_built_in_open+0x86>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8013d56:	2008      	movs	r0, #8
 8013d58:	f002 fc00 	bl	801655c <lv_mem_alloc>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	6a1b      	ldr	r3, [r3, #32]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d104      	bne.n	8013d74 <lv_img_decoder_built_in_open+0x78>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_mem_assert(dsc->user_data);
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	6a1b      	ldr	r3, [r3, #32]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d100      	bne.n	8013d74 <lv_img_decoder_built_in_open+0x78>
 8013d72:	e7fe      	b.n	8013d72 <lv_img_decoder_built_in_open+0x76>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	6a1b      	ldr	r3, [r3, #32]
 8013d78:	2208      	movs	r2, #8
 8013d7a:	2100      	movs	r1, #0
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f016 f824 	bl	8029dca <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	6a1b      	ldr	r3, [r3, #32]
 8013d86:	627b      	str	r3, [r7, #36]	; 0x24
        user_data->f                               = lv_mem_alloc(sizeof(f));
 8013d88:	2008      	movs	r0, #8
 8013d8a:	f002 fbe7 	bl	801655c <lv_mem_alloc>
 8013d8e:	4602      	mov	r2, r0
 8013d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d92:	601a      	str	r2, [r3, #0]
        if(user_data->f == NULL) {
 8013d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d104      	bne.n	8013da6 <lv_img_decoder_built_in_open+0xaa>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_mem_assert(user_data->f);
 8013d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d100      	bne.n	8013da6 <lv_img_decoder_built_in_open+0xaa>
 8013da4:	e7fe      	b.n	8013da4 <lv_img_decoder_built_in_open+0xa8>
        }

        memcpy(user_data->f, &f, sizeof(f));
 8013da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	f107 010c 	add.w	r1, r7, #12
 8013dae:	2208      	movs	r2, #8
 8013db0:	4618      	mov	r0, r3
 8013db2:	f015 ffff 	bl	8029db4 <memcpy>
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
        return LV_RES_INV;
#endif
    }

    lv_img_cf_t cf = dsc->header.cf;
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	7c1b      	ldrb	r3, [r3, #16]
 8013dba:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8013dbe:	b2db      	uxtb	r3, r3
 8013dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8013dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013dc8:	2b04      	cmp	r3, #4
 8013dca:	d007      	beq.n	8013ddc <lv_img_decoder_built_in_open+0xe0>
 8013dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013dd0:	2b05      	cmp	r3, #5
 8013dd2:	d003      	beq.n	8013ddc <lv_img_decoder_built_in_open+0xe0>
 8013dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013dd8:	2b06      	cmp	r3, #6
 8013dda:	d10f      	bne.n	8013dfc <lv_img_decoder_built_in_open+0x100>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	7b1b      	ldrb	r3, [r3, #12]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d106      	bne.n	8013df2 <lv_img_decoder_built_in_open+0xf6>
            /* In case of uncompressed formats the image stored in the ROM/RAM.
             * So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8013de4:	683b      	ldr	r3, [r7, #0]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	689a      	ldr	r2, [r3, #8]
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 8013dee:	2301      	movs	r3, #1
 8013df0:	e0aa      	b.n	8013f48 <lv_img_decoder_built_in_open+0x24c>
        } else {
            /*If it's a file it need to be read line by line later*/
            dsc->img_data = NULL;
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	2200      	movs	r2, #0
 8013df6:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 8013df8:	2301      	movs	r3, #1
 8013dfa:	e0a5      	b.n	8013f48 <lv_img_decoder_built_in_open+0x24c>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8013dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e00:	2b07      	cmp	r3, #7
 8013e02:	d00b      	beq.n	8013e1c <lv_img_decoder_built_in_open+0x120>
 8013e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e08:	2b08      	cmp	r3, #8
 8013e0a:	d007      	beq.n	8013e1c <lv_img_decoder_built_in_open+0x120>
 8013e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e10:	2b09      	cmp	r3, #9
 8013e12:	d003      	beq.n	8013e1c <lv_img_decoder_built_in_open+0x120>
 8013e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e18:	2b0a      	cmp	r3, #10
 8013e1a:	d17b      	bne.n	8013f14 <lv_img_decoder_built_in_open+0x218>
            cf == LV_IMG_CF_INDEXED_8BIT) {

#if LV_IMG_CF_INDEXED
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8013e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7f8 ffd3 	bl	800cdcc <lv_img_color_format_get_px_size>
 8013e26:	4603      	mov	r3, r0
 8013e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        uint32_t palette_size = 1 << px_size;
 8013e2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013e30:	2201      	movs	r2, #1
 8013e32:	fa02 f303 	lsl.w	r3, r2, r3
 8013e36:	61fb      	str	r3, [r7, #28]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	6a1b      	ldr	r3, [r3, #32]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d115      	bne.n	8013e6c <lv_img_decoder_built_in_open+0x170>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8013e40:	2008      	movs	r0, #8
 8013e42:	f002 fb8b 	bl	801655c <lv_mem_alloc>
 8013e46:	4602      	mov	r2, r0
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	6a1b      	ldr	r3, [r3, #32]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d104      	bne.n	8013e5e <lv_img_decoder_built_in_open+0x162>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_mem_assert(dsc->user_data);
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	6a1b      	ldr	r3, [r3, #32]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d100      	bne.n	8013e5e <lv_img_decoder_built_in_open+0x162>
 8013e5c:	e7fe      	b.n	8013e5c <lv_img_decoder_built_in_open+0x160>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	6a1b      	ldr	r3, [r3, #32]
 8013e62:	2208      	movs	r2, #8
 8013e64:	2100      	movs	r1, #0
 8013e66:	4618      	mov	r0, r3
 8013e68:	f015 ffaf 	bl	8029dca <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	6a1b      	ldr	r3, [r3, #32]
 8013e70:	61bb      	str	r3, [r7, #24]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8013e72:	69fb      	ldr	r3, [r7, #28]
 8013e74:	005b      	lsls	r3, r3, #1
 8013e76:	4618      	mov	r0, r3
 8013e78:	f002 fb70 	bl	801655c <lv_mem_alloc>
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	69bb      	ldr	r3, [r7, #24]
 8013e80:	605a      	str	r2, [r3, #4]
        if(user_data->palette == NULL) {
 8013e82:	69bb      	ldr	r3, [r7, #24]
 8013e84:	685b      	ldr	r3, [r3, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d104      	bne.n	8013e94 <lv_img_decoder_built_in_open+0x198>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
#if LV_USE_FILESYSTEM
            lv_mem_assert(user_data->f);
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d100      	bne.n	8013e94 <lv_img_decoder_built_in_open+0x198>
 8013e92:	e7fe      	b.n	8013e92 <lv_img_decoder_built_in_open+0x196>
#endif
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	7b1b      	ldrb	r3, [r3, #12]
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d10f      	bne.n	8013ebc <lv_img_decoder_built_in_open+0x1c0>
            /*Read the palette from file*/
#if LV_USE_FILESYSTEM
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 8013e9c:	69bb      	ldr	r3, [r7, #24]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	2104      	movs	r1, #4
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f001 ffc3 	bl	8015e2e <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 8013ea8:	69bb      	ldr	r3, [r7, #24]
 8013eaa:	6818      	ldr	r0, [r3, #0]
 8013eac:	69bb      	ldr	r3, [r7, #24]
 8013eae:	6859      	ldr	r1, [r3, #4]
 8013eb0:	69fb      	ldr	r3, [r7, #28]
 8013eb2:	005a      	lsls	r2, r3, #1
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	f001 ff84 	bl	8015dc2 <lv_fs_read>
 8013eba:	e026      	b.n	8013f0a <lv_img_decoder_built_in_open+0x20e>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
            return LV_RES_INV;
#endif
        } else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	689b      	ldr	r3, [r3, #8]
 8013ec2:	617b      	str	r3, [r7, #20]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ec8:	e01b      	b.n	8013f02 <lv_img_decoder_built_in_open+0x206>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8013eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	697a      	ldr	r2, [r7, #20]
 8013ed0:	4413      	add	r3, r2
 8013ed2:	7898      	ldrb	r0, [r3, #2]
 8013ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed6:	009b      	lsls	r3, r3, #2
 8013ed8:	697a      	ldr	r2, [r7, #20]
 8013eda:	4413      	add	r3, r2
 8013edc:	7859      	ldrb	r1, [r3, #1]
 8013ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	697a      	ldr	r2, [r7, #20]
 8013ee4:	4413      	add	r3, r2
 8013ee6:	781d      	ldrb	r5, [r3, #0]
 8013ee8:	69bb      	ldr	r3, [r7, #24]
 8013eea:	685a      	ldr	r2, [r3, #4]
 8013eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eee:	005b      	lsls	r3, r3, #1
 8013ef0:	18d4      	adds	r4, r2, r3
 8013ef2:	462a      	mov	r2, r5
 8013ef4:	f7ff fcec 	bl	80138d0 <lv_color_make>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	8023      	strh	r3, [r4, #0]
            for(i = 0; i < palette_size; i++) {
 8013efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013efe:	3301      	adds	r3, #1
 8013f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f04:	69fb      	ldr	r3, [r7, #28]
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d3df      	bcc.n	8013eca <lv_img_decoder_built_in_open+0x1ce>
            }
        }

        dsc->img_data = NULL;
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	615a      	str	r2, [r3, #20]
        return LV_RES_OK;
 8013f10:	2301      	movs	r3, #1
 8013f12:	e019      	b.n	8013f48 <lv_img_decoder_built_in_open+0x24c>
        LV_LOG_WARN("Indexed (palette) images are not enabled in lv_conf.h. See LV_IMG_CF_INDEXED");
        return LV_RES_INV;
#endif
    }
    /*Alpha indexed images. */
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 8013f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013f18:	2b0b      	cmp	r3, #11
 8013f1a:	d00b      	beq.n	8013f34 <lv_img_decoder_built_in_open+0x238>
 8013f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013f20:	2b0c      	cmp	r3, #12
 8013f22:	d007      	beq.n	8013f34 <lv_img_decoder_built_in_open+0x238>
 8013f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013f28:	2b0d      	cmp	r3, #13
 8013f2a:	d003      	beq.n	8013f34 <lv_img_decoder_built_in_open+0x238>
 8013f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013f30:	2b0e      	cmp	r3, #14
 8013f32:	d104      	bne.n	8013f3e <lv_img_decoder_built_in_open+0x242>
            cf == LV_IMG_CF_ALPHA_8BIT) {
#if LV_IMG_CF_ALPHA
        dsc->img_data = NULL;
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	2200      	movs	r2, #0
 8013f38:	615a      	str	r2, [r3, #20]
        return LV_RES_OK; /*Nothing to process*/
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e004      	b.n	8013f48 <lv_img_decoder_built_in_open+0x24c>
#endif
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 8013f3e:	6839      	ldr	r1, [r7, #0]
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	f000 f899 	bl	8014078 <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format")
        return LV_RES_INV;
 8013f46:	2300      	movs	r3, #0
    }
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	3730      	adds	r7, #48	; 0x30
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8013f50:	0802c894 	.word	0x0802c894

08013f54 <lv_img_decoder_built_in_read_line>:

static lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                                  lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b088      	sub	sp, #32
 8013f58:	af02      	add	r7, sp, #8
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	60b9      	str	r1, [r7, #8]
 8013f5e:	4611      	mov	r1, r2
 8013f60:	461a      	mov	r2, r3
 8013f62:	460b      	mov	r3, r1
 8013f64:	80fb      	strh	r3, [r7, #6]
 8013f66:	4613      	mov	r3, r2
 8013f68:	80bb      	strh	r3, [r7, #4]
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	7c1b      	ldrb	r3, [r3, #16]
 8013f72:	f003 031f 	and.w	r3, r3, #31
 8013f76:	b2db      	uxtb	r3, r3
 8013f78:	2b04      	cmp	r3, #4
 8013f7a:	d00d      	beq.n	8013f98 <lv_img_decoder_built_in_read_line+0x44>
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	7c1b      	ldrb	r3, [r3, #16]
 8013f80:	f003 031f 	and.w	r3, r3, #31
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	2b05      	cmp	r3, #5
 8013f88:	d006      	beq.n	8013f98 <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	7c1b      	ldrb	r3, [r3, #16]
 8013f8e:	f003 031f 	and.w	r3, r3, #31
 8013f92:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8013f94:	2b06      	cmp	r3, #6
 8013f96:	d112      	bne.n	8013fbe <lv_img_decoder_built_in_read_line+0x6a>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	7b1b      	ldrb	r3, [r3, #12]
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d166      	bne.n	801406e <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8013fa0:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8013fa4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013fa8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8013fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fae:	9300      	str	r3, [sp, #0]
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	68b8      	ldr	r0, [r7, #8]
 8013fb4:	f000 f88c 	bl	80140d0 <lv_img_decoder_built_in_line_true_color>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8013fbc:	e057      	b.n	801406e <lv_img_decoder_built_in_read_line+0x11a>
        }
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	7c1b      	ldrb	r3, [r3, #16]
 8013fc2:	f003 031f 	and.w	r3, r3, #31
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	2b0b      	cmp	r3, #11
 8013fca:	d014      	beq.n	8013ff6 <lv_img_decoder_built_in_read_line+0xa2>
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	7c1b      	ldrb	r3, [r3, #16]
 8013fd0:	f003 031f 	and.w	r3, r3, #31
 8013fd4:	b2db      	uxtb	r3, r3
 8013fd6:	2b0c      	cmp	r3, #12
 8013fd8:	d00d      	beq.n	8013ff6 <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	7c1b      	ldrb	r3, [r3, #16]
 8013fde:	f003 031f 	and.w	r3, r3, #31
 8013fe2:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8013fe4:	2b0d      	cmp	r3, #13
 8013fe6:	d006      	beq.n	8013ff6 <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	7c1b      	ldrb	r3, [r3, #16]
 8013fec:	f003 031f 	and.w	r3, r3, #31
 8013ff0:	b2db      	uxtb	r3, r3
 8013ff2:	2b0e      	cmp	r3, #14
 8013ff4:	d10e      	bne.n	8014014 <lv_img_decoder_built_in_read_line+0xc0>

        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8013ff6:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8013ffa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013ffe:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014004:	9300      	str	r3, [sp, #0]
 8014006:	4603      	mov	r3, r0
 8014008:	68b8      	ldr	r0, [r7, #8]
 801400a:	f000 f8bf 	bl	801418c <lv_img_decoder_built_in_line_alpha>
 801400e:	4603      	mov	r3, r0
 8014010:	75fb      	strb	r3, [r7, #23]
 8014012:	e02c      	b.n	801406e <lv_img_decoder_built_in_read_line+0x11a>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	7c1b      	ldrb	r3, [r3, #16]
 8014018:	f003 031f 	and.w	r3, r3, #31
 801401c:	b2db      	uxtb	r3, r3
 801401e:	2b07      	cmp	r3, #7
 8014020:	d014      	beq.n	801404c <lv_img_decoder_built_in_read_line+0xf8>
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	7c1b      	ldrb	r3, [r3, #16]
 8014026:	f003 031f 	and.w	r3, r3, #31
 801402a:	b2db      	uxtb	r3, r3
 801402c:	2b08      	cmp	r3, #8
 801402e:	d00d      	beq.n	801404c <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	7c1b      	ldrb	r3, [r3, #16]
 8014034:	f003 031f 	and.w	r3, r3, #31
 8014038:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 801403a:	2b09      	cmp	r3, #9
 801403c:	d006      	beq.n	801404c <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 801403e:	68bb      	ldr	r3, [r7, #8]
 8014040:	7c1b      	ldrb	r3, [r3, #16]
 8014042:	f003 031f 	and.w	r3, r3, #31
 8014046:	b2db      	uxtb	r3, r3
 8014048:	2b0a      	cmp	r3, #10
 801404a:	d10e      	bne.n	801406a <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 801404c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014050:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014054:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405a:	9300      	str	r3, [sp, #0]
 801405c:	4603      	mov	r3, r0
 801405e:	68b8      	ldr	r0, [r7, #8]
 8014060:	f000 faaa 	bl	80145b8 <lv_img_decoder_built_in_line_indexed>
 8014064:	4603      	mov	r3, r0
 8014066:	75fb      	strb	r3, [r7, #23]
 8014068:	e001      	b.n	801406e <lv_img_decoder_built_in_read_line+0x11a>
    } else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 801406a:	2300      	movs	r3, #0
 801406c:	e000      	b.n	8014070 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 801406e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014070:	4618      	mov	r0, r3
 8014072:	3718      	adds	r7, #24
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <lv_img_decoder_built_in_close>:

static void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
 8014080:	6039      	str	r1, [r7, #0]
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	6a1b      	ldr	r3, [r3, #32]
 8014086:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d01c      	beq.n	80140c8 <lv_img_decoder_built_in_close+0x50>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d009      	beq.n	80140aa <lv_img_decoder_built_in_close+0x32>
            lv_fs_close(user_data->f);
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	4618      	mov	r0, r3
 801409c:	f001 fe62 	bl	8015d64 <lv_fs_close>
            lv_mem_free(user_data->f);
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	4618      	mov	r0, r3
 80140a6:	f002 fa99 	bl	80165dc <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d004      	beq.n	80140bc <lv_img_decoder_built_in_close+0x44>
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	685b      	ldr	r3, [r3, #4]
 80140b6:	4618      	mov	r0, r3
 80140b8:	f002 fa90 	bl	80165dc <lv_mem_free>

        lv_mem_free(user_data);
 80140bc:	68f8      	ldr	r0, [r7, #12]
 80140be:	f002 fa8d 	bl	80165dc <lv_mem_free>

        dsc->user_data = NULL;
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	2200      	movs	r2, #0
 80140c6:	621a      	str	r2, [r3, #32]
    }
}
 80140c8:	bf00      	nop
 80140ca:	3710      	adds	r7, #16
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <lv_img_decoder_built_in_line_true_color>:

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b08a      	sub	sp, #40	; 0x28
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	4608      	mov	r0, r1
 80140da:	4611      	mov	r1, r2
 80140dc:	461a      	mov	r2, r3
 80140de:	4603      	mov	r3, r0
 80140e0:	817b      	strh	r3, [r7, #10]
 80140e2:	460b      	mov	r3, r1
 80140e4:	813b      	strh	r3, [r7, #8]
 80140e6:	4613      	mov	r3, r2
 80140e8:	80fb      	strh	r3, [r7, #6]
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	6a1b      	ldr	r3, [r3, #32]
 80140ee:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	7c1b      	ldrb	r3, [r3, #16]
 80140f4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80140f8:	b2db      	uxtb	r3, r3
 80140fa:	4618      	mov	r0, r3
 80140fc:	f7f8 fe66 	bl	800cdcc <lv_img_color_format_get_px_size>
 8014100:	4603      	mov	r3, r0
 8014102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8014106:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801410a:	68fa      	ldr	r2, [r7, #12]
 801410c:	6912      	ldr	r2, [r2, #16]
 801410e:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8014112:	b292      	uxth	r2, r2
 8014114:	fb02 f203 	mul.w	r2, r2, r3
 8014118:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801411c:	4413      	add	r3, r2
 801411e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8014122:	fb02 f303 	mul.w	r3, r2, r3
 8014126:	10db      	asrs	r3, r3, #3
 8014128:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	3304      	adds	r3, #4
 801412e:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(user_data->f, pos);
 8014130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	69f9      	ldr	r1, [r7, #28]
 8014136:	4618      	mov	r0, r3
 8014138:	f001 fe79 	bl	8015e2e <lv_fs_seek>
 801413c:	4603      	mov	r3, r0
 801413e:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8014140:	7efb      	ldrb	r3, [r7, #27]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d001      	beq.n	801414a <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8014146:	2300      	movs	r3, #0
 8014148:	e01c      	b.n	8014184 <lv_img_decoder_built_in_line_true_color+0xb4>
    }
    uint32_t btr = len * (px_size >> 3);
 801414a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801414e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8014152:	08d2      	lsrs	r2, r2, #3
 8014154:	b2d2      	uxtb	r2, r2
 8014156:	fb02 f303 	mul.w	r3, r2, r3
 801415a:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 801415c:	2300      	movs	r3, #0
 801415e:	613b      	str	r3, [r7, #16]
    lv_fs_read(user_data->f, buf, btr, &br);
 8014160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014162:	6818      	ldr	r0, [r3, #0]
 8014164:	f107 0310 	add.w	r3, r7, #16
 8014168:	697a      	ldr	r2, [r7, #20]
 801416a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801416c:	f001 fe29 	bl	8015dc2 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8014170:	7efb      	ldrb	r3, [r7, #27]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d103      	bne.n	801417e <lv_img_decoder_built_in_line_true_color+0xae>
 8014176:	693b      	ldr	r3, [r7, #16]
 8014178:	697a      	ldr	r2, [r7, #20]
 801417a:	429a      	cmp	r2, r3
 801417c:	d001      	beq.n	8014182 <lv_img_decoder_built_in_line_true_color+0xb2>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 801417e:	2300      	movs	r3, #0
 8014180:	e000      	b.n	8014184 <lv_img_decoder_built_in_line_true_color+0xb4>
    }

    return LV_RES_OK;
 8014182:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
 8014184:	4618      	mov	r0, r3
 8014186:	3728      	adds	r7, #40	; 0x28
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}

0801418c <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 801418c:	b590      	push	{r4, r7, lr}
 801418e:	b0d1      	sub	sp, #324	; 0x144
 8014190:	af00      	add	r7, sp, #0
 8014192:	f107 040c 	add.w	r4, r7, #12
 8014196:	6020      	str	r0, [r4, #0]
 8014198:	460c      	mov	r4, r1
 801419a:	4610      	mov	r0, r2
 801419c:	4619      	mov	r1, r3
 801419e:	f107 030a 	add.w	r3, r7, #10
 80141a2:	4622      	mov	r2, r4
 80141a4:	801a      	strh	r2, [r3, #0]
 80141a6:	f107 0308 	add.w	r3, r7, #8
 80141aa:	4602      	mov	r2, r0
 80141ac:	801a      	strh	r2, [r3, #0]
 80141ae:	1dbb      	adds	r3, r7, #6
 80141b0:	460a      	mov	r2, r1
 80141b2:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80141b4:	2300      	movs	r3, #0
 80141b6:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 80141ba:	23ff      	movs	r3, #255	; 0xff
 80141bc:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80141c0:	4bcc      	ldr	r3, [pc, #816]	; (80144f4 <lv_img_decoder_built_in_line_alpha+0x368>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 80141c8:	4bcb      	ldr	r3, [pc, #812]	; (80144f8 <lv_img_decoder_built_in_line_alpha+0x36c>)
 80141ca:	f507 7482 	add.w	r4, r7, #260	; 0x104
 80141ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80141d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 80141d4:	f107 030c 	add.w	r3, r7, #12
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	689b      	ldr	r3, [r3, #8]
 80141dc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80141de:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 80141e2:	2300      	movs	r3, #0
 80141e4:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80141e8:	e022      	b.n	8014230 <lv_img_decoder_built_in_line_alpha+0xa4>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 80141ea:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 80141ee:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 80141f2:	4613      	mov	r3, r2
 80141f4:	005b      	lsls	r3, r3, #1
 80141f6:	4413      	add	r3, r2
 80141f8:	461a      	mov	r2, r3
 80141fa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80141fe:	4413      	add	r3, r2
 8014200:	b2ca      	uxtb	r2, r1
 8014202:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8014204:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8014208:	0a1b      	lsrs	r3, r3, #8
 801420a:	b299      	uxth	r1, r3
 801420c:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 8014210:	4613      	mov	r3, r2
 8014212:	005b      	lsls	r3, r3, #1
 8014214:	4413      	add	r3, r2
 8014216:	3301      	adds	r3, #1
 8014218:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801421c:	4413      	add	r3, r2
 801421e:	b2ca      	uxtb	r2, r1
 8014220:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8014222:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 8014226:	b29b      	uxth	r3, r3
 8014228:	3301      	adds	r3, #1
 801422a:	b29b      	uxth	r3, r3
 801422c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8014230:	1dbb      	adds	r3, r7, #6
 8014232:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 8014236:	f9b3 3000 	ldrsh.w	r3, [r3]
 801423a:	429a      	cmp	r2, r3
 801423c:	dbd5      	blt.n	80141ea <lv_img_decoder_built_in_line_alpha+0x5e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 801423e:	2300      	movs	r3, #0
 8014240:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 8014244:	f107 030c 	add.w	r3, r7, #12
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	7c1b      	ldrb	r3, [r3, #16]
 801424c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014250:	b2db      	uxtb	r3, r3
 8014252:	4618      	mov	r0, r3
 8014254:	f7f8 fdba 	bl	800cdcc <lv_img_color_format_get_px_size>
 8014258:	4603      	mov	r3, r0
 801425a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801425e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8014262:	2201      	movs	r2, #1
 8014264:	fa02 f303 	lsl.w	r3, r2, r3
 8014268:	b29b      	uxth	r3, r3
 801426a:	3b01      	subs	r3, #1
 801426c:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

    lv_coord_t w = 0;
 8014270:	2300      	movs	r3, #0
 8014272:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
    uint32_t ofs = 0;
 8014276:	2300      	movs	r3, #0
 8014278:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    int8_t pos   = 0;
 801427c:	2300      	movs	r3, #0
 801427e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    switch(dsc->header.cf) {
 8014282:	f107 030c 	add.w	r3, r7, #12
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	7c1b      	ldrb	r3, [r3, #16]
 801428a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801428e:	b2db      	uxtb	r3, r3
 8014290:	3b0b      	subs	r3, #11
 8014292:	2b03      	cmp	r3, #3
 8014294:	f200 80f0 	bhi.w	8014478 <lv_img_decoder_built_in_line_alpha+0x2ec>
 8014298:	a201      	add	r2, pc, #4	; (adr r2, 80142a0 <lv_img_decoder_built_in_line_alpha+0x114>)
 801429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801429e:	bf00      	nop
 80142a0:	080142b1 	.word	0x080142b1
 80142a4:	08014331 	.word	0x08014331
 80142a8:	080143b5 	.word	0x080143b5
 80142ac:	08014439 	.word	0x08014439
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80142b0:	f107 030c 	add.w	r3, r7, #12
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	691b      	ldr	r3, [r3, #16]
 80142b8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80142bc:	b29b      	uxth	r3, r3
 80142be:	10db      	asrs	r3, r3, #3
 80142c0:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x7) w++;
 80142c4:	f107 030c 	add.w	r3, r7, #12
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	691b      	ldr	r3, [r3, #16]
 80142cc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	f003 0307 	and.w	r3, r3, #7
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d006      	beq.n	80142e8 <lv_img_decoder_built_in_line_alpha+0x15c>
 80142da:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80142de:	b29b      	uxth	r3, r3
 80142e0:	3301      	adds	r3, #1
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 3); /*First pixel*/
 80142e8:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80142ec:	f107 0208 	add.w	r2, r7, #8
 80142f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80142f4:	fb02 f303 	mul.w	r3, r2, r3
 80142f8:	f107 020a 	add.w	r2, r7, #10
 80142fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014300:	10d2      	asrs	r2, r2, #3
 8014302:	b212      	sxth	r2, r2
 8014304:	4413      	add	r3, r2
 8014306:	461a      	mov	r2, r3
 8014308:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801430c:	4413      	add	r3, r2
 801430e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 7 - (x & 0x7);
 8014312:	f107 030a 	add.w	r3, r7, #10
 8014316:	881b      	ldrh	r3, [r3, #0]
 8014318:	b25b      	sxtb	r3, r3
 801431a:	43db      	mvns	r3, r3
 801431c:	b25b      	sxtb	r3, r3
 801431e:	f003 0307 	and.w	r3, r3, #7
 8014322:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha1_opa_table;
 8014326:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801432a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 801432e:	e0a3      	b.n	8014478 <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8014330:	f107 030c 	add.w	r3, r7, #12
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	691b      	ldr	r3, [r3, #16]
 8014338:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801433c:	b29b      	uxth	r3, r3
 801433e:	109b      	asrs	r3, r3, #2
 8014340:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x3) w++;
 8014344:	f107 030c 	add.w	r3, r7, #12
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	691b      	ldr	r3, [r3, #16]
 801434c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014350:	b29b      	uxth	r3, r3
 8014352:	f003 0303 	and.w	r3, r3, #3
 8014356:	2b00      	cmp	r3, #0
 8014358:	d006      	beq.n	8014368 <lv_img_decoder_built_in_line_alpha+0x1dc>
 801435a:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 801435e:	b29b      	uxth	r3, r3
 8014360:	3301      	adds	r3, #1
 8014362:	b29b      	uxth	r3, r3
 8014364:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 2); /*First pixel*/
 8014368:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 801436c:	f107 0208 	add.w	r2, r7, #8
 8014370:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014374:	fb02 f303 	mul.w	r3, r2, r3
 8014378:	f107 020a 	add.w	r2, r7, #10
 801437c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014380:	1092      	asrs	r2, r2, #2
 8014382:	b212      	sxth	r2, r2
 8014384:	4413      	add	r3, r2
 8014386:	461a      	mov	r2, r3
 8014388:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801438c:	4413      	add	r3, r2
 801438e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 6 - ((x & 0x3) * 2);
 8014392:	f107 030a 	add.w	r3, r7, #10
 8014396:	881b      	ldrh	r3, [r3, #0]
 8014398:	43db      	mvns	r3, r3
 801439a:	b2db      	uxtb	r3, r3
 801439c:	f003 0303 	and.w	r3, r3, #3
 80143a0:	b2db      	uxtb	r3, r3
 80143a2:	005b      	lsls	r3, r3, #1
 80143a4:	b2db      	uxtb	r3, r3
 80143a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha2_opa_table;
 80143aa:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80143ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 80143b2:	e061      	b.n	8014478 <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80143b4:	f107 030c 	add.w	r3, r7, #12
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	691b      	ldr	r3, [r3, #16]
 80143bc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80143c0:	b29b      	uxth	r3, r3
 80143c2:	105b      	asrs	r3, r3, #1
 80143c4:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x1) w++;
 80143c8:	f107 030c 	add.w	r3, r7, #12
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	691b      	ldr	r3, [r3, #16]
 80143d0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	f003 0301 	and.w	r3, r3, #1
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d006      	beq.n	80143ec <lv_img_decoder_built_in_line_alpha+0x260>
 80143de:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	3301      	adds	r3, #1
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 1); /*First pixel*/
 80143ec:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80143f0:	f107 0208 	add.w	r2, r7, #8
 80143f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80143f8:	fb02 f303 	mul.w	r3, r2, r3
 80143fc:	f107 020a 	add.w	r2, r7, #10
 8014400:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014404:	1052      	asrs	r2, r2, #1
 8014406:	b212      	sxth	r2, r2
 8014408:	4413      	add	r3, r2
 801440a:	461a      	mov	r2, r3
 801440c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014410:	4413      	add	r3, r2
 8014412:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 4 - ((x & 0x1) * 4);
 8014416:	f107 030a 	add.w	r3, r7, #10
 801441a:	881b      	ldrh	r3, [r3, #0]
 801441c:	f003 0301 	and.w	r3, r3, #1
 8014420:	2b00      	cmp	r3, #0
 8014422:	d101      	bne.n	8014428 <lv_img_decoder_built_in_line_alpha+0x29c>
 8014424:	2304      	movs	r3, #4
 8014426:	e000      	b.n	801442a <lv_img_decoder_built_in_line_alpha+0x29e>
 8014428:	2300      	movs	r3, #0
 801442a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha4_opa_table;
 801442e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8014432:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 8014436:	e01f      	b.n	8014478 <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8014438:	f107 030c 	add.w	r3, r7, #12
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	691b      	ldr	r3, [r3, #16]
 8014440:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014444:	b29b      	uxth	r3, r3
 8014446:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + x;  /*First pixel*/
 801444a:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 801444e:	f107 0208 	add.w	r2, r7, #8
 8014452:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014456:	fb02 f203 	mul.w	r2, r2, r3
 801445a:	f107 030a 	add.w	r3, r7, #10
 801445e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014462:	4413      	add	r3, r2
 8014464:	461a      	mov	r2, r3
 8014466:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801446a:	4413      	add	r3, r2
 801446c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos = 0;
 8014470:	2300      	movs	r3, #0
 8014472:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8014476:	bf00      	nop
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014478:	f107 030c 	add.w	r3, r7, #12
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	6a1b      	ldr	r3, [r3, #32]
 8014480:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
 8014484:	2300      	movs	r3, #0
 8014486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801448a:	f107 030c 	add.w	r3, r7, #12
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	7b1b      	ldrb	r3, [r3, #12]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d10e      	bne.n	80144b4 <lv_img_decoder_built_in_line_alpha+0x328>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8014496:	f107 030c 	add.w	r3, r7, #12
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        data_tmp = img_dsc->data + ofs;
 80144a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80144a6:	689a      	ldr	r2, [r3, #8]
 80144a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80144ac:	4413      	add	r3, r2
 80144ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80144b2:	e017      	b.n	80144e4 <lv_img_decoder_built_in_line_alpha+0x358>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 80144b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80144be:	3304      	adds	r3, #4
 80144c0:	4619      	mov	r1, r3
 80144c2:	4610      	mov	r0, r2
 80144c4:	f001 fcb3 	bl	8015e2e <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 80144c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80144cc:	6818      	ldr	r0, [r3, #0]
 80144ce:	f9b7 2136 	ldrsh.w	r2, [r7, #310]	; 0x136
 80144d2:	f107 0110 	add.w	r1, r7, #16
 80144d6:	2300      	movs	r3, #0
 80144d8:	f001 fc73 	bl	8015dc2 <lv_fs_read>
        data_tmp = fs_buf;
 80144dc:	f107 0310 	add.w	r3, r7, #16
 80144e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 80144e4:	2300      	movs	r3, #0
 80144e6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    uint8_t val_act;
    for(i = 0; i < len; i++) {
 80144ea:	2300      	movs	r3, #0
 80144ec:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80144f0:	e054      	b.n	801459c <lv_img_decoder_built_in_line_alpha+0x410>
 80144f2:	bf00      	nop
 80144f4:	0802c898 	.word	0x0802c898
 80144f8:	0802c89c 	.word	0x0802c89c
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80144fc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8014500:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8014504:	4413      	add	r3, r2
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	4619      	mov	r1, r3
 801450a:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 801450e:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8014512:	fa02 f303 	lsl.w	r3, r2, r3
 8014516:	ea01 0203 	and.w	r2, r1, r3
 801451a:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 801451e:	fa42 f303 	asr.w	r3, r2, r3
 8014522:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8014526:	f107 030c 	add.w	r3, r7, #12
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	7c1b      	ldrb	r3, [r3, #16]
 801452e:	f003 031f 	and.w	r3, r3, #31
 8014532:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8014534:	2b0e      	cmp	r3, #14
 8014536:	d006      	beq.n	8014546 <lv_img_decoder_built_in_line_alpha+0x3ba>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8014538:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 801453c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8014540:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8014542:	781a      	ldrb	r2, [r3, #0]
 8014544:	e001      	b.n	801454a <lv_img_decoder_built_in_line_alpha+0x3be>
 8014546:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 801454a:	f9b7 113e 	ldrsh.w	r1, [r7, #318]	; 0x13e
 801454e:	460b      	mov	r3, r1
 8014550:	005b      	lsls	r3, r3, #1
 8014552:	440b      	add	r3, r1
 8014554:	3302      	adds	r3, #2
 8014556:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 801455a:	440b      	add	r3, r1
 801455c:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 801455e:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8014562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8014566:	1ad3      	subs	r3, r2, r3
 8014568:	b2db      	uxtb	r3, r3
 801456a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        if(pos < 0) {
 801456e:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8014572:	2b00      	cmp	r3, #0
 8014574:	da0b      	bge.n	801458e <lv_img_decoder_built_in_line_alpha+0x402>
            pos = 8 - px_size;
 8014576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801457a:	f1c3 0308 	rsb	r3, r3, #8
 801457e:	b2db      	uxtb	r3, r3
 8014580:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            data_tmp++;
 8014584:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014588:	3301      	adds	r3, #1
 801458a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for(i = 0; i < len; i++) {
 801458e:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 8014592:	b29b      	uxth	r3, r3
 8014594:	3301      	adds	r3, #1
 8014596:	b29b      	uxth	r3, r3
 8014598:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 801459c:	1dbb      	adds	r3, r7, #6
 801459e:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 80145a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145a6:	429a      	cmp	r2, r3
 80145a8:	dba8      	blt.n	80144fc <lv_img_decoder_built_in_line_alpha+0x370>
        }
    }

    return LV_RES_OK;
 80145aa:	2301      	movs	r3, #1

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd90      	pop	{r4, r7, pc}
 80145b6:	bf00      	nop

080145b8 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 80145b8:	b590      	push	{r4, r7, lr}
 80145ba:	b0cb      	sub	sp, #300	; 0x12c
 80145bc:	af00      	add	r7, sp, #0
 80145be:	f107 040c 	add.w	r4, r7, #12
 80145c2:	6020      	str	r0, [r4, #0]
 80145c4:	460c      	mov	r4, r1
 80145c6:	4610      	mov	r0, r2
 80145c8:	4619      	mov	r1, r3
 80145ca:	f107 030a 	add.w	r3, r7, #10
 80145ce:	4622      	mov	r2, r4
 80145d0:	801a      	strh	r2, [r3, #0]
 80145d2:	f107 0308 	add.w	r3, r7, #8
 80145d6:	4602      	mov	r2, r0
 80145d8:	801a      	strh	r2, [r3, #0]
 80145da:	1dbb      	adds	r3, r7, #6
 80145dc:	460a      	mov	r2, r1
 80145de:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 80145e0:	f107 030c 	add.w	r3, r7, #12
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	7c1b      	ldrb	r3, [r3, #16]
 80145e8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80145ec:	b2db      	uxtb	r3, r3
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7f8 fbec 	bl	800cdcc <lv_img_color_format_get_px_size>
 80145f4:	4603      	mov	r3, r0
 80145f6:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80145fa:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80145fe:	2201      	movs	r2, #1
 8014600:	fa02 f303 	lsl.w	r3, r2, r3
 8014604:	b29b      	uxth	r3, r3
 8014606:	3b01      	subs	r3, #1
 8014608:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

    lv_coord_t w = 0;
 801460c:	2300      	movs	r3, #0
 801460e:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    int8_t pos   = 0;
 8014612:	2300      	movs	r3, #0
 8014614:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
    uint32_t ofs = 0;
 8014618:	2300      	movs	r3, #0
 801461a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    switch(dsc->header.cf) {
 801461e:	f107 030c 	add.w	r3, r7, #12
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	7c1b      	ldrb	r3, [r3, #16]
 8014626:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801462a:	b2db      	uxtb	r3, r3
 801462c:	3b07      	subs	r3, #7
 801462e:	2b03      	cmp	r3, #3
 8014630:	f200 80f9 	bhi.w	8014826 <lv_img_decoder_built_in_line_indexed+0x26e>
 8014634:	a201      	add	r2, pc, #4	; (adr r2, 801463c <lv_img_decoder_built_in_line_indexed+0x84>)
 8014636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801463a:	bf00      	nop
 801463c:	0801464d 	.word	0x0801464d
 8014640:	080146cf 	.word	0x080146cf
 8014644:	08014755 	.word	0x08014755
 8014648:	080147db 	.word	0x080147db
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 801464c:	f107 030c 	add.w	r3, r7, #12
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	691b      	ldr	r3, [r3, #16]
 8014654:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014658:	b29b      	uxth	r3, r3
 801465a:	10db      	asrs	r3, r3, #3
 801465c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x7) w++;
 8014660:	f107 030c 	add.w	r3, r7, #12
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	691b      	ldr	r3, [r3, #16]
 8014668:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801466c:	b29b      	uxth	r3, r3
 801466e:	f003 0307 	and.w	r3, r3, #7
 8014672:	2b00      	cmp	r3, #0
 8014674:	d006      	beq.n	8014684 <lv_img_decoder_built_in_line_indexed+0xcc>
 8014676:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 801467a:	b29b      	uxth	r3, r3
 801467c:	3301      	adds	r3, #1
 801467e:	b29b      	uxth	r3, r3
 8014680:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 3); /*First pixel*/
 8014684:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8014688:	f107 0208 	add.w	r2, r7, #8
 801468c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014690:	fb02 f303 	mul.w	r3, r2, r3
 8014694:	f107 020a 	add.w	r2, r7, #10
 8014698:	f9b2 2000 	ldrsh.w	r2, [r2]
 801469c:	10d2      	asrs	r2, r2, #3
 801469e:	b212      	sxth	r2, r2
 80146a0:	4413      	add	r3, r2
 80146a2:	461a      	mov	r2, r3
 80146a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80146a8:	4413      	add	r3, r2
 80146aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 8;                /*Skip the palette*/
 80146ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80146b2:	3308      	adds	r3, #8
 80146b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 7 - (x & 0x7);
 80146b8:	f107 030a 	add.w	r3, r7, #10
 80146bc:	881b      	ldrh	r3, [r3, #0]
 80146be:	b25b      	sxtb	r3, r3
 80146c0:	43db      	mvns	r3, r3
 80146c2:	b25b      	sxtb	r3, r3
 80146c4:	f003 0307 	and.w	r3, r3, #7
 80146c8:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 80146cc:	e0ab      	b.n	8014826 <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80146ce:	f107 030c 	add.w	r3, r7, #12
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	691b      	ldr	r3, [r3, #16]
 80146d6:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80146da:	b29b      	uxth	r3, r3
 80146dc:	109b      	asrs	r3, r3, #2
 80146de:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x3) w++;
 80146e2:	f107 030c 	add.w	r3, r7, #12
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	691b      	ldr	r3, [r3, #16]
 80146ea:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80146ee:	b29b      	uxth	r3, r3
 80146f0:	f003 0303 	and.w	r3, r3, #3
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d006      	beq.n	8014706 <lv_img_decoder_built_in_line_indexed+0x14e>
 80146f8:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	3301      	adds	r3, #1
 8014700:	b29b      	uxth	r3, r3
 8014702:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 2); /*First pixel*/
 8014706:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 801470a:	f107 0208 	add.w	r2, r7, #8
 801470e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014712:	fb02 f303 	mul.w	r3, r2, r3
 8014716:	f107 020a 	add.w	r2, r7, #10
 801471a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801471e:	1092      	asrs	r2, r2, #2
 8014720:	b212      	sxth	r2, r2
 8014722:	4413      	add	r3, r2
 8014724:	461a      	mov	r2, r3
 8014726:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801472a:	4413      	add	r3, r2
 801472c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 16;               /*Skip the palette*/
 8014730:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014734:	3310      	adds	r3, #16
 8014736:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 6 - ((x & 0x3) * 2);
 801473a:	f107 030a 	add.w	r3, r7, #10
 801473e:	881b      	ldrh	r3, [r3, #0]
 8014740:	43db      	mvns	r3, r3
 8014742:	b2db      	uxtb	r3, r3
 8014744:	f003 0303 	and.w	r3, r3, #3
 8014748:	b2db      	uxtb	r3, r3
 801474a:	005b      	lsls	r3, r3, #1
 801474c:	b2db      	uxtb	r3, r3
 801474e:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8014752:	e068      	b.n	8014826 <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8014754:	f107 030c 	add.w	r3, r7, #12
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	691b      	ldr	r3, [r3, #16]
 801475c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014760:	b29b      	uxth	r3, r3
 8014762:	105b      	asrs	r3, r3, #1
 8014764:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x1) w++;
 8014768:	f107 030c 	add.w	r3, r7, #12
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	691b      	ldr	r3, [r3, #16]
 8014770:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014774:	b29b      	uxth	r3, r3
 8014776:	f003 0301 	and.w	r3, r3, #1
 801477a:	2b00      	cmp	r3, #0
 801477c:	d006      	beq.n	801478c <lv_img_decoder_built_in_line_indexed+0x1d4>
 801477e:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8014782:	b29b      	uxth	r3, r3
 8014784:	3301      	adds	r3, #1
 8014786:	b29b      	uxth	r3, r3
 8014788:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 1); /*First pixel*/
 801478c:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8014790:	f107 0208 	add.w	r2, r7, #8
 8014794:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014798:	fb02 f303 	mul.w	r3, r2, r3
 801479c:	f107 020a 	add.w	r2, r7, #10
 80147a0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80147a4:	1052      	asrs	r2, r2, #1
 80147a6:	b212      	sxth	r2, r2
 80147a8:	4413      	add	r3, r2
 80147aa:	461a      	mov	r2, r3
 80147ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80147b0:	4413      	add	r3, r2
 80147b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 64;               /*Skip the palette*/
 80147b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80147ba:	3340      	adds	r3, #64	; 0x40
 80147bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 4 - ((x & 0x1) * 4);
 80147c0:	f107 030a 	add.w	r3, r7, #10
 80147c4:	881b      	ldrh	r3, [r3, #0]
 80147c6:	f003 0301 	and.w	r3, r3, #1
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d101      	bne.n	80147d2 <lv_img_decoder_built_in_line_indexed+0x21a>
 80147ce:	2304      	movs	r3, #4
 80147d0:	e000      	b.n	80147d4 <lv_img_decoder_built_in_line_indexed+0x21c>
 80147d2:	2300      	movs	r3, #0
 80147d4:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 80147d8:	e025      	b.n	8014826 <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80147da:	f107 030c 	add.w	r3, r7, #12
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	691b      	ldr	r3, [r3, #16]
 80147e2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80147e6:	b29b      	uxth	r3, r3
 80147e8:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + x;  /*First pixel*/
 80147ec:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 80147f0:	f107 0208 	add.w	r2, r7, #8
 80147f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80147f8:	fb02 f203 	mul.w	r2, r2, r3
 80147fc:	f107 030a 	add.w	r3, r7, #10
 8014800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014804:	4413      	add	r3, r2
 8014806:	461a      	mov	r2, r3
 8014808:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801480c:	4413      	add	r3, r2
 801480e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 1024;       /*Skip the palette*/
 8014812:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801481a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 0;
 801481e:	2300      	movs	r3, #0
 8014820:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8014824:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014826:	f107 030c 	add.w	r3, r7, #12
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	6a1b      	ldr	r3, [r3, #32]
 801482e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
 8014832:	2300      	movs	r3, #0
 8014834:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8014838:	f107 030c 	add.w	r3, r7, #12
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	7b1b      	ldrb	r3, [r3, #12]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d10e      	bne.n	8014862 <lv_img_decoder_built_in_line_indexed+0x2aa>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8014844:	f107 030c 	add.w	r3, r7, #12
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        data_tmp                     = img_dsc->data + ofs;
 8014850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014854:	689a      	ldr	r2, [r3, #8]
 8014856:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801485a:	4413      	add	r3, r2
 801485c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8014860:	e017      	b.n	8014892 <lv_img_decoder_built_in_line_indexed+0x2da>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8014862:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014866:	681a      	ldr	r2, [r3, #0]
 8014868:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801486c:	3304      	adds	r3, #4
 801486e:	4619      	mov	r1, r3
 8014870:	4610      	mov	r0, r2
 8014872:	f001 fadc 	bl	8015e2e <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8014876:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801487a:	6818      	ldr	r0, [r3, #0]
 801487c:	f9b7 2126 	ldrsh.w	r2, [r7, #294]	; 0x126
 8014880:	f107 0110 	add.w	r1, r7, #16
 8014884:	2300      	movs	r3, #0
 8014886:	f001 fa9c 	bl	8015dc2 <lv_fs_read>
        data_tmp = fs_buf;
 801488a:	f107 0310 	add.w	r3, r7, #16
 801488e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 8014892:	2300      	movs	r3, #0
 8014894:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    uint8_t val_act;
    lv_coord_t i;
    lv_color_t * cbuf = (lv_color_t *)buf;
 8014898:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801489c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    for(i = 0; i < len; i++) {
 80148a0:	2300      	movs	r3, #0
 80148a2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 80148a6:	e042      	b.n	801492e <lv_img_decoder_built_in_line_indexed+0x376>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80148a8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80148ac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80148b0:	4413      	add	r3, r2
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	4619      	mov	r1, r3
 80148b6:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 80148ba:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 80148be:	fa02 f303 	lsl.w	r3, r2, r3
 80148c2:	ea01 0203 	and.w	r2, r1, r3
 80148c6:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 80148ca:	fa42 f303 	asr.w	r3, r2, r3
 80148ce:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cbuf[i] = user_data->palette[val_act];
 80148d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80148d6:	685a      	ldr	r2, [r3, #4]
 80148d8:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80148dc:	005b      	lsls	r3, r3, #1
 80148de:	441a      	add	r2, r3
 80148e0:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 80148e4:	005b      	lsls	r3, r3, #1
 80148e6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80148ea:	440b      	add	r3, r1
 80148ec:	8812      	ldrh	r2, [r2, #0]
 80148ee:	801a      	strh	r2, [r3, #0]

        pos -= px_size;
 80148f0:	f897 2125 	ldrb.w	r2, [r7, #293]	; 0x125
 80148f4:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80148f8:	1ad3      	subs	r3, r2, r3
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
        if(pos < 0) {
 8014900:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 8014904:	2b00      	cmp	r3, #0
 8014906:	da0b      	bge.n	8014920 <lv_img_decoder_built_in_line_indexed+0x368>
            pos = 8 - px_size;
 8014908:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 801490c:	f1c3 0308 	rsb	r3, r3, #8
 8014910:	b2db      	uxtb	r3, r3
 8014912:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            data_tmp++;
 8014916:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801491a:	3301      	adds	r3, #1
 801491c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(i = 0; i < len; i++) {
 8014920:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 8014924:	b29b      	uxth	r3, r3
 8014926:	3301      	adds	r3, #1
 8014928:	b29b      	uxth	r3, r3
 801492a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 801492e:	1dbb      	adds	r3, r7, #6
 8014930:	f9b7 211a 	ldrsh.w	r2, [r7, #282]	; 0x11a
 8014934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014938:	429a      	cmp	r2, r3
 801493a:	dbb5      	blt.n	80148a8 <lv_img_decoder_built_in_line_indexed+0x2f0>
        }
    }

    return LV_RES_OK;
 801493c:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 801493e:	4618      	mov	r0, r3
 8014940:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8014944:	46bd      	mov	sp, r7
 8014946:	bd90      	pop	{r4, r7, pc}

08014948 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	6039      	str	r1, [r7, #0]
    return font_p->get_glyph_bitmap(font_p, letter);
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	6839      	ldr	r1, [r7, #0]
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	4798      	blx	r3
 801495c:	4603      	mov	r3, r0
}
 801495e:	4618      	mov	r0, r3
 8014960:	3708      	adds	r7, #8
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}

08014966 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 8014966:	b590      	push	{r4, r7, lr}
 8014968:	b085      	sub	sp, #20
 801496a:	af00      	add	r7, sp, #0
 801496c:	60f8      	str	r0, [r7, #12]
 801496e:	60b9      	str	r1, [r7, #8]
 8014970:	607a      	str	r2, [r7, #4]
 8014972:	603b      	str	r3, [r7, #0]
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681c      	ldr	r4, [r3, #0]
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	687a      	ldr	r2, [r7, #4]
 801497c:	68b9      	ldr	r1, [r7, #8]
 801497e:	68f8      	ldr	r0, [r7, #12]
 8014980:	47a0      	blx	r4
 8014982:	4603      	mov	r3, r0
}
 8014984:	4618      	mov	r0, r3
 8014986:	3714      	adds	r7, #20
 8014988:	46bd      	mov	sp, r7
 801498a:	bd90      	pop	{r4, r7, pc}

0801498c <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b088      	sub	sp, #32
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8014998:	f107 0114 	add.w	r1, r7, #20
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	68ba      	ldr	r2, [r7, #8]
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f7ff ffe0 	bl	8014966 <lv_font_get_glyph_dsc>
 80149a6:	4603      	mov	r3, r0
 80149a8:	77fb      	strb	r3, [r7, #31]
    if(ret) return g.adv_w;
 80149aa:	7ffb      	ldrb	r3, [r7, #31]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d001      	beq.n	80149b4 <lv_font_get_glyph_width+0x28>
 80149b0:	8abb      	ldrh	r3, [r7, #20]
 80149b2:	e000      	b.n	80149b6 <lv_font_get_glyph_width+0x2a>
    else return 0;
 80149b4:	2300      	movs	r3, #0
}
 80149b6:	4618      	mov	r0, r3
 80149b8:	3720      	adds	r7, #32
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}

080149be <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter an unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 80149be:	b580      	push	{r7, lr}
 80149c0:	b086      	sub	sp, #24
 80149c2:	af00      	add	r7, sp, #0
 80149c4:	6078      	str	r0, [r7, #4]
 80149c6:	6039      	str	r1, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80149ce:	6839      	ldr	r1, [r7, #0]
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f000 f883 	bl	8014adc <get_glyph_dsc_id>
 80149d6:	6138      	str	r0, [r7, #16]
    if(!gid) return false;
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d101      	bne.n	80149e2 <lv_font_get_bitmap_fmt_txt+0x24>
 80149de:	2300      	movs	r3, #0
 80149e0:	e011      	b.n	8014a06 <lv_font_get_bitmap_fmt_txt+0x48>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	685a      	ldr	r2, [r3, #4]
 80149e6:	693b      	ldr	r3, [r7, #16]
 80149e8:	00db      	lsls	r3, r3, #3
 80149ea:	4413      	add	r3, r2
 80149ec:	60fb      	str	r3, [r7, #12]

    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d007      	beq.n	8014a04 <lv_font_get_bitmap_fmt_txt+0x46>
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	68fa      	ldr	r2, [r7, #12]
 80149fa:	6812      	ldr	r2, [r2, #0]
 80149fc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014a00:	4413      	add	r3, r2
 8014a02:	e000      	b.n	8014a06 <lv_font_get_bitmap_fmt_txt+0x48>

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
 8014a04:	2300      	movs	r3, #0
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	3718      	adds	r7, #24
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}

08014a0e <lv_font_get_glyph_dsc_fmt_txt>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next)
{
 8014a0e:	b580      	push	{r7, lr}
 8014a10:	b08a      	sub	sp, #40	; 0x28
 8014a12:	af00      	add	r7, sp, #0
 8014a14:	60f8      	str	r0, [r7, #12]
 8014a16:	60b9      	str	r1, [r7, #8]
 8014a18:	607a      	str	r2, [r7, #4]
 8014a1a:	603b      	str	r3, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	68db      	ldr	r3, [r3, #12]
 8014a20:	623b      	str	r3, [r7, #32]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8014a22:	6879      	ldr	r1, [r7, #4]
 8014a24:	68f8      	ldr	r0, [r7, #12]
 8014a26:	f000 f859 	bl	8014adc <get_glyph_dsc_id>
 8014a2a:	61f8      	str	r0, [r7, #28]
    if(!gid) return false;
 8014a2c:	69fb      	ldr	r3, [r7, #28]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d101      	bne.n	8014a36 <lv_font_get_glyph_dsc_fmt_txt+0x28>
 8014a32:	2300      	movs	r3, #0
 8014a34:	e04e      	b.n	8014ad4 <lv_font_get_glyph_dsc_fmt_txt+0xc6>

    int8_t kvalue = 0;
 8014a36:	2300      	movs	r3, #0
 8014a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(fdsc->kern_dsc) {
 8014a3c:	6a3b      	ldr	r3, [r7, #32]
 8014a3e:	68db      	ldr	r3, [r3, #12]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d00f      	beq.n	8014a64 <lv_font_get_glyph_dsc_fmt_txt+0x56>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 8014a44:	6839      	ldr	r1, [r7, #0]
 8014a46:	68f8      	ldr	r0, [r7, #12]
 8014a48:	f000 f848 	bl	8014adc <get_glyph_dsc_id>
 8014a4c:	61b8      	str	r0, [r7, #24]
        if(gid_next) {
 8014a4e:	69bb      	ldr	r3, [r7, #24]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d007      	beq.n	8014a64 <lv_font_get_glyph_dsc_fmt_txt+0x56>
            kvalue = get_kern_value(font, gid, gid_next);
 8014a54:	69ba      	ldr	r2, [r7, #24]
 8014a56:	69f9      	ldr	r1, [r7, #28]
 8014a58:	68f8      	ldr	r0, [r7, #12]
 8014a5a:	f000 f97b 	bl	8014d54 <get_kern_value>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8014a64:	6a3b      	ldr	r3, [r7, #32]
 8014a66:	685a      	ldr	r2, [r3, #4]
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	00db      	lsls	r3, r3, #3
 8014a6c:	4413      	add	r3, r2
 8014a6e:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	885b      	ldrh	r3, [r3, #2]
 8014a74:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8014a78:	b29b      	uxth	r3, r3
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014a80:	6a3a      	ldr	r2, [r7, #32]
 8014a82:	8a12      	ldrh	r2, [r2, #16]
 8014a84:	fb02 f303 	mul.w	r3, r2, r3
 8014a88:	111b      	asrs	r3, r3, #4
 8014a8a:	440b      	add	r3, r1
 8014a8c:	613b      	str	r3, [r7, #16]
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	3308      	adds	r3, #8
 8014a92:	091b      	lsrs	r3, r3, #4
 8014a94:	613b      	str	r3, [r7, #16]

    dsc_out->adv_w = adv_w;
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	b29a      	uxth	r2, r3
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	801a      	strh	r2, [r3, #0]
    dsc_out->box_h = gdsc->box_h;
 8014a9e:	697b      	ldr	r3, [r7, #20]
 8014aa0:	795a      	ldrb	r2, [r3, #5]
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	70da      	strb	r2, [r3, #3]
    dsc_out->box_w = gdsc->box_w;
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	791a      	ldrb	r2, [r3, #4]
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	709a      	strb	r2, [r3, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	711a      	strb	r2, [r3, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	79db      	ldrb	r3, [r3, #7]
 8014abc:	b25a      	sxtb	r2, r3
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	715a      	strb	r2, [r3, #5]
    dsc_out->bpp   = fdsc->bpp;
 8014ac2:	6a3b      	ldr	r3, [r7, #32]
 8014ac4:	7cdb      	ldrb	r3, [r3, #19]
 8014ac6:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8014aca:	b2db      	uxtb	r3, r3
 8014acc:	461a      	mov	r2, r3
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	719a      	strb	r2, [r3, #6]

    return true;
 8014ad2:	2301      	movs	r3, #1
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3728      	adds	r7, #40	; 0x28
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}

08014adc <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 8014adc:	b590      	push	{r4, r7, lr}
 8014ade:	b08f      	sub	sp, #60	; 0x3c
 8014ae0:	af02      	add	r7, sp, #8
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d101      	bne.n	8014af0 <get_glyph_dsc_id+0x14>
 8014aec:	2300      	movs	r3, #0
 8014aee:	e12a      	b.n	8014d46 <get_glyph_dsc_id+0x26a>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	68db      	ldr	r3, [r3, #12]
 8014af4:	627b      	str	r3, [r7, #36]	; 0x24

    /*Check the chacge first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8014af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af8:	695b      	ldr	r3, [r3, #20]
 8014afa:	683a      	ldr	r2, [r7, #0]
 8014afc:	429a      	cmp	r2, r3
 8014afe:	d102      	bne.n	8014b06 <get_glyph_dsc_id+0x2a>
 8014b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b02:	699b      	ldr	r3, [r3, #24]
 8014b04:	e11f      	b.n	8014d46 <get_glyph_dsc_id+0x26a>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 8014b06:	2300      	movs	r3, #0
 8014b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8014b0a:	e10b      	b.n	8014d24 <get_glyph_dsc_id+0x248>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8014b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b0e:	6899      	ldr	r1, [r3, #8]
 8014b10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b12:	4613      	mov	r3, r2
 8014b14:	009b      	lsls	r3, r3, #2
 8014b16:	4413      	add	r3, r2
 8014b18:	009b      	lsls	r3, r3, #2
 8014b1a:	440b      	add	r3, r1
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	683a      	ldr	r2, [r7, #0]
 8014b20:	1ad3      	subs	r3, r2, r3
 8014b22:	60bb      	str	r3, [r7, #8]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8014b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b26:	6899      	ldr	r1, [r3, #8]
 8014b28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b2a:	4613      	mov	r3, r2
 8014b2c:	009b      	lsls	r3, r3, #2
 8014b2e:	4413      	add	r3, r2
 8014b30:	009b      	lsls	r3, r3, #2
 8014b32:	440b      	add	r3, r1
 8014b34:	889b      	ldrh	r3, [r3, #4]
 8014b36:	461a      	mov	r2, r3
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d203      	bcs.n	8014b46 <get_glyph_dsc_id+0x6a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8014b3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014b40:	3301      	adds	r3, #1
 8014b42:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8014b44:	e0ee      	b.n	8014d24 <get_glyph_dsc_id+0x248>
        uint32_t glyph_id = 0;
 8014b46:	2300      	movs	r3, #0
 8014b48:	62bb      	str	r3, [r7, #40]	; 0x28
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8014b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b4c:	6899      	ldr	r1, [r3, #8]
 8014b4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b50:	4613      	mov	r3, r2
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	4413      	add	r3, r2
 8014b56:	009b      	lsls	r3, r3, #2
 8014b58:	440b      	add	r3, r1
 8014b5a:	7c9b      	ldrb	r3, [r3, #18]
 8014b5c:	f003 0303 	and.w	r3, r3, #3
 8014b60:	b2db      	uxtb	r3, r3
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d10d      	bne.n	8014b82 <get_glyph_dsc_id+0xa6>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8014b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b68:	6899      	ldr	r1, [r3, #8]
 8014b6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b6c:	4613      	mov	r3, r2
 8014b6e:	009b      	lsls	r3, r3, #2
 8014b70:	4413      	add	r3, r2
 8014b72:	009b      	lsls	r3, r3, #2
 8014b74:	440b      	add	r3, r1
 8014b76:	88db      	ldrh	r3, [r3, #6]
 8014b78:	461a      	mov	r2, r3
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	4413      	add	r3, r2
 8014b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014b80:	e0c8      	b.n	8014d14 <get_glyph_dsc_id+0x238>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8014b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b84:	6899      	ldr	r1, [r3, #8]
 8014b86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b88:	4613      	mov	r3, r2
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	4413      	add	r3, r2
 8014b8e:	009b      	lsls	r3, r3, #2
 8014b90:	440b      	add	r3, r1
 8014b92:	7c9b      	ldrb	r3, [r3, #18]
 8014b94:	f003 0303 	and.w	r3, r3, #3
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	2b01      	cmp	r3, #1
 8014b9c:	d11a      	bne.n	8014bd4 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 8014b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba0:	6899      	ldr	r1, [r3, #8]
 8014ba2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	009b      	lsls	r3, r3, #2
 8014ba8:	4413      	add	r3, r2
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	440b      	add	r3, r1
 8014bae:	68db      	ldr	r3, [r3, #12]
 8014bb0:	60fb      	str	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8014bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb4:	6899      	ldr	r1, [r3, #8]
 8014bb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014bb8:	4613      	mov	r3, r2
 8014bba:	009b      	lsls	r3, r3, #2
 8014bbc:	4413      	add	r3, r2
 8014bbe:	009b      	lsls	r3, r3, #2
 8014bc0:	440b      	add	r3, r1
 8014bc2:	88db      	ldrh	r3, [r3, #6]
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	68fa      	ldr	r2, [r7, #12]
 8014bca:	4413      	add	r3, r2
 8014bcc:	781b      	ldrb	r3, [r3, #0]
 8014bce:	440b      	add	r3, r1
 8014bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8014bd2:	e09f      	b.n	8014d14 <get_glyph_dsc_id+0x238>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8014bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd6:	6899      	ldr	r1, [r3, #8]
 8014bd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014bda:	4613      	mov	r3, r2
 8014bdc:	009b      	lsls	r3, r3, #2
 8014bde:	4413      	add	r3, r2
 8014be0:	009b      	lsls	r3, r3, #2
 8014be2:	440b      	add	r3, r1
 8014be4:	7c9b      	ldrb	r3, [r3, #18]
 8014be6:	f003 0303 	and.w	r3, r3, #3
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	2b02      	cmp	r3, #2
 8014bee:	d13b      	bne.n	8014c68 <get_glyph_dsc_id+0x18c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8014bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf2:	6899      	ldr	r1, [r3, #8]
 8014bf4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014bf6:	4613      	mov	r3, r2
 8014bf8:	009b      	lsls	r3, r3, #2
 8014bfa:	4413      	add	r3, r2
 8014bfc:	009b      	lsls	r3, r3, #2
 8014bfe:	440b      	add	r3, r1
 8014c00:	689c      	ldr	r4, [r3, #8]
 8014c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c04:	6899      	ldr	r1, [r3, #8]
 8014c06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c08:	4613      	mov	r3, r2
 8014c0a:	009b      	lsls	r3, r3, #2
 8014c0c:	4413      	add	r3, r2
 8014c0e:	009b      	lsls	r3, r3, #2
 8014c10:	440b      	add	r3, r1
 8014c12:	8a1b      	ldrh	r3, [r3, #16]
 8014c14:	461a      	mov	r2, r3
 8014c16:	f107 0008 	add.w	r0, r7, #8
 8014c1a:	4b4d      	ldr	r3, [pc, #308]	; (8014d50 <get_glyph_dsc_id+0x274>)
 8014c1c:	9300      	str	r3, [sp, #0]
 8014c1e:	2302      	movs	r3, #2
 8014c20:	4621      	mov	r1, r4
 8014c22:	f002 fbfb 	bl	801741c <lv_utils_bsearch>
 8014c26:	6178      	str	r0, [r7, #20]

            if(p) {
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d072      	beq.n	8014d14 <get_glyph_dsc_id+0x238>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 8014c2e:	6979      	ldr	r1, [r7, #20]
 8014c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c32:	6898      	ldr	r0, [r3, #8]
 8014c34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c36:	4613      	mov	r3, r2
 8014c38:	009b      	lsls	r3, r3, #2
 8014c3a:	4413      	add	r3, r2
 8014c3c:	009b      	lsls	r3, r3, #2
 8014c3e:	4403      	add	r3, r0
 8014c40:	689b      	ldr	r3, [r3, #8]
 8014c42:	1acb      	subs	r3, r1, r3
 8014c44:	613b      	str	r3, [r7, #16]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	085b      	lsrs	r3, r3, #1
 8014c4a:	613b      	str	r3, [r7, #16]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8014c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c4e:	6899      	ldr	r1, [r3, #8]
 8014c50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c52:	4613      	mov	r3, r2
 8014c54:	009b      	lsls	r3, r3, #2
 8014c56:	4413      	add	r3, r2
 8014c58:	009b      	lsls	r3, r3, #2
 8014c5a:	440b      	add	r3, r1
 8014c5c:	88db      	ldrh	r3, [r3, #6]
 8014c5e:	461a      	mov	r2, r3
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	4413      	add	r3, r2
 8014c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c66:	e055      	b.n	8014d14 <get_glyph_dsc_id+0x238>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8014c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c6a:	6899      	ldr	r1, [r3, #8]
 8014c6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c6e:	4613      	mov	r3, r2
 8014c70:	009b      	lsls	r3, r3, #2
 8014c72:	4413      	add	r3, r2
 8014c74:	009b      	lsls	r3, r3, #2
 8014c76:	440b      	add	r3, r1
 8014c78:	7c9b      	ldrb	r3, [r3, #18]
 8014c7a:	f003 0303 	and.w	r3, r3, #3
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	2b03      	cmp	r3, #3
 8014c82:	d147      	bne.n	8014d14 <get_glyph_dsc_id+0x238>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8014c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c86:	6899      	ldr	r1, [r3, #8]
 8014c88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	009b      	lsls	r3, r3, #2
 8014c8e:	4413      	add	r3, r2
 8014c90:	009b      	lsls	r3, r3, #2
 8014c92:	440b      	add	r3, r1
 8014c94:	689c      	ldr	r4, [r3, #8]
 8014c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c98:	6899      	ldr	r1, [r3, #8]
 8014c9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c9c:	4613      	mov	r3, r2
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	4413      	add	r3, r2
 8014ca2:	009b      	lsls	r3, r3, #2
 8014ca4:	440b      	add	r3, r1
 8014ca6:	8a1b      	ldrh	r3, [r3, #16]
 8014ca8:	461a      	mov	r2, r3
 8014caa:	f107 0008 	add.w	r0, r7, #8
 8014cae:	4b28      	ldr	r3, [pc, #160]	; (8014d50 <get_glyph_dsc_id+0x274>)
 8014cb0:	9300      	str	r3, [sp, #0]
 8014cb2:	2302      	movs	r3, #2
 8014cb4:	4621      	mov	r1, r4
 8014cb6:	f002 fbb1 	bl	801741c <lv_utils_bsearch>
 8014cba:	6238      	str	r0, [r7, #32]

            if(p) {
 8014cbc:	6a3b      	ldr	r3, [r7, #32]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d028      	beq.n	8014d14 <get_glyph_dsc_id+0x238>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 8014cc2:	6a39      	ldr	r1, [r7, #32]
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc6:	6898      	ldr	r0, [r3, #8]
 8014cc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014cca:	4613      	mov	r3, r2
 8014ccc:	009b      	lsls	r3, r3, #2
 8014cce:	4413      	add	r3, r2
 8014cd0:	009b      	lsls	r3, r3, #2
 8014cd2:	4403      	add	r3, r0
 8014cd4:	689b      	ldr	r3, [r3, #8]
 8014cd6:	1acb      	subs	r3, r1, r3
 8014cd8:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 8014cda:	69fb      	ldr	r3, [r7, #28]
 8014cdc:	085b      	lsrs	r3, r3, #1
 8014cde:	61fb      	str	r3, [r7, #28]
                const uint8_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 8014ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce2:	6899      	ldr	r1, [r3, #8]
 8014ce4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014ce6:	4613      	mov	r3, r2
 8014ce8:	009b      	lsls	r3, r3, #2
 8014cea:	4413      	add	r3, r2
 8014cec:	009b      	lsls	r3, r3, #2
 8014cee:	440b      	add	r3, r1
 8014cf0:	68db      	ldr	r3, [r3, #12]
 8014cf2:	61bb      	str	r3, [r7, #24]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8014cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf6:	6899      	ldr	r1, [r3, #8]
 8014cf8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014cfa:	4613      	mov	r3, r2
 8014cfc:	009b      	lsls	r3, r3, #2
 8014cfe:	4413      	add	r3, r2
 8014d00:	009b      	lsls	r3, r3, #2
 8014d02:	440b      	add	r3, r1
 8014d04:	88db      	ldrh	r3, [r3, #6]
 8014d06:	4619      	mov	r1, r3
 8014d08:	69ba      	ldr	r2, [r7, #24]
 8014d0a:	69fb      	ldr	r3, [r7, #28]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	440b      	add	r3, r1
 8014d12:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        /*Update the cache*/
        fdsc->last_letter = letter;
 8014d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d16:	683a      	ldr	r2, [r7, #0]
 8014d18:	615a      	str	r2, [r3, #20]
        fdsc->last_glyph_id = glyph_id;
 8014d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d1e:	619a      	str	r2, [r3, #24]
        return glyph_id;
 8014d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d22:	e010      	b.n	8014d46 <get_glyph_dsc_id+0x26a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8014d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d26:	8a5b      	ldrh	r3, [r3, #18]
 8014d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014d2c:	b29b      	uxth	r3, r3
 8014d2e:	461a      	mov	r2, r3
 8014d30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014d32:	4293      	cmp	r3, r2
 8014d34:	f4ff aeea 	bcc.w	8014b0c <get_glyph_dsc_id+0x30>
    }

    fdsc->last_letter = letter;
 8014d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3a:	683a      	ldr	r2, [r7, #0]
 8014d3c:	615a      	str	r2, [r3, #20]
    fdsc->last_glyph_id = 0;
 8014d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d40:	2200      	movs	r2, #0
 8014d42:	619a      	str	r2, [r3, #24]
    return 0;
 8014d44:	2300      	movs	r3, #0

}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3734      	adds	r7, #52	; 0x34
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd90      	pop	{r4, r7, pc}
 8014d4e:	bf00      	nop
 8014d50:	08014f3d 	.word	0x08014f3d

08014d54 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b094      	sub	sp, #80	; 0x50
 8014d58:	af02      	add	r7, sp, #8
 8014d5a:	60f8      	str	r0, [r7, #12]
 8014d5c:	60b9      	str	r1, [r7, #8]
 8014d5e:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	68db      	ldr	r3, [r3, #12]
 8014d64:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 8014d66:	2300      	movs	r3, #0
 8014d68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 8014d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d6e:	7cdb      	ldrb	r3, [r3, #19]
 8014d70:	f003 0320 	and.w	r3, r3, #32
 8014d74:	b2db      	uxtb	r3, r3
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d164      	bne.n	8014e44 <get_kern_value+0xf0>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8014d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d7c:	68db      	ldr	r3, [r3, #12]
 8014d7e:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 8014d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d82:	7adb      	ldrb	r3, [r3, #11]
 8014d84:	f003 0303 	and.w	r3, r3, #3
 8014d88:	b2db      	uxtb	r3, r3
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d12b      	bne.n	8014de6 <get_kern_value+0x92>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
 8014d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	021b      	lsls	r3, r3, #8
 8014d9a:	b29a      	uxth	r2, r3
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	4413      	add	r3, r2
 8014da2:	b29b      	uxth	r3, r3
 8014da4:	837b      	strh	r3, [r7, #26]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8014da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014da8:	689b      	ldr	r3, [r3, #8]
 8014daa:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8014dae:	461a      	mov	r2, r3
 8014db0:	f107 001a 	add.w	r0, r7, #26
 8014db4:	4b3b      	ldr	r3, [pc, #236]	; (8014ea4 <get_kern_value+0x150>)
 8014db6:	9300      	str	r3, [sp, #0]
 8014db8:	2302      	movs	r3, #2
 8014dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014dbc:	f002 fb2e 	bl	801741c <lv_utils_bsearch>
 8014dc0:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 8014dc2:	6a3b      	ldr	r3, [r7, #32]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d067      	beq.n	8014e98 <get_kern_value+0x144>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8014dc8:	6a3a      	ldr	r2, [r7, #32]
 8014dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dcc:	1ad3      	subs	r3, r2, r3
 8014dce:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	085b      	lsrs	r3, r3, #1
 8014dd4:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 8014dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dd8:	685a      	ldr	r2, [r3, #4]
 8014dda:	69fb      	ldr	r3, [r7, #28]
 8014ddc:	4413      	add	r3, r2
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014de4:	e058      	b.n	8014e98 <get_kern_value+0x144>
            }
        } else if(kdsc->glyph_ids_size == 1) {
 8014de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014de8:	7adb      	ldrb	r3, [r3, #11]
 8014dea:	f003 0303 	and.w	r3, r3, #3
 8014dee:	b2db      	uxtb	r3, r3
 8014df0:	2b01      	cmp	r3, #1
 8014df2:	d151      	bne.n	8014e98 <get_kern_value+0x144>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint16_t * g_ids = kdsc->glyph_ids;
 8014df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	021a      	lsls	r2, r3, #8
 8014dfe:	68bb      	ldr	r3, [r7, #8]
 8014e00:	4413      	add	r3, r2
 8014e02:	617b      	str	r3, [r7, #20]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8014e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e06:	689b      	ldr	r3, [r3, #8]
 8014e08:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8014e0c:	461a      	mov	r2, r3
 8014e0e:	f107 0014 	add.w	r0, r7, #20
 8014e12:	4b25      	ldr	r3, [pc, #148]	; (8014ea8 <get_kern_value+0x154>)
 8014e14:	9300      	str	r3, [sp, #0]
 8014e16:	2304      	movs	r3, #4
 8014e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e1a:	f002 faff 	bl	801741c <lv_utils_bsearch>
 8014e1e:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 8014e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d038      	beq.n	8014e98 <get_kern_value+0x144>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8014e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2a:	1ad3      	subs	r3, r2, r3
 8014e2c:	62bb      	str	r3, [r7, #40]	; 0x28
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 8014e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e30:	091b      	lsrs	r3, r3, #4
 8014e32:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 8014e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e36:	685a      	ldr	r2, [r3, #4]
 8014e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e3a:	4413      	add	r3, r2
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014e42:	e029      	b.n	8014e98 <get_kern_value+0x144>
        } else {
            /*Invalid value*/
        }
    } else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 8014e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e46:	68db      	ldr	r3, [r3, #12]
 8014e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8014e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e4c:	685a      	ldr	r2, [r3, #4]
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	4413      	add	r3, r2
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 8014e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e5a:	685a      	ldr	r2, [r3, #4]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	4413      	add	r3, r2
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 8014e66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d014      	beq.n	8014e98 <get_kern_value+0x144>
 8014e6e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d010      	beq.n	8014e98 <get_kern_value+0x144>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 8014e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8014e7e:	3a01      	subs	r2, #1
 8014e80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014e82:	7b49      	ldrb	r1, [r1, #13]
 8014e84:	fb01 f102 	mul.w	r1, r1, r2
 8014e88:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8014e8c:	3a01      	subs	r2, #1
 8014e8e:	440a      	add	r2, r1
 8014e90:	4413      	add	r3, r2
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 8014e98:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3748      	adds	r7, #72	; 0x48
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	08014ead 	.word	0x08014ead
 8014ea8:	08014ef5 	.word	0x08014ef5

08014eac <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 8014eac:	b480      	push	{r7}
 8014eae:	b085      	sub	sp, #20
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	781a      	ldrb	r2, [r3, #0]
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	d006      	beq.n	8014ed8 <kern_pair_8_compare+0x2c>
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	781b      	ldrb	r3, [r3, #0]
 8014ece:	461a      	mov	r2, r3
 8014ed0:	68bb      	ldr	r3, [r7, #8]
 8014ed2:	781b      	ldrb	r3, [r3, #0]
 8014ed4:	1ad3      	subs	r3, r2, r3
 8014ed6:	e007      	b.n	8014ee8 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	3301      	adds	r3, #1
 8014edc:	781b      	ldrb	r3, [r3, #0]
 8014ede:	461a      	mov	r2, r3
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	781b      	ldrb	r3, [r3, #0]
 8014ee6:	1ad3      	subs	r3, r2, r3

}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3714      	adds	r7, #20
 8014eec:	46bd      	mov	sp, r7
 8014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef2:	4770      	bx	lr

08014ef4 <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 8014ef4:	b480      	push	{r7}
 8014ef6:	b085      	sub	sp, #20
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	881a      	ldrh	r2, [r3, #0]
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	881b      	ldrh	r3, [r3, #0]
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d006      	beq.n	8014f20 <kern_pair_16_compare+0x2c>
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	881b      	ldrh	r3, [r3, #0]
 8014f16:	461a      	mov	r2, r3
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	881b      	ldrh	r3, [r3, #0]
 8014f1c:	1ad3      	subs	r3, r2, r3
 8014f1e:	e007      	b.n	8014f30 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	3302      	adds	r3, #2
 8014f24:	881b      	ldrh	r3, [r3, #0]
 8014f26:	461a      	mov	r2, r3
 8014f28:	68bb      	ldr	r3, [r7, #8]
 8014f2a:	3302      	adds	r3, #2
 8014f2c:	881b      	ldrh	r3, [r3, #0]
 8014f2e:	1ad3      	subs	r3, r2, r3
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3714      	adds	r7, #20
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr

08014f3c <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 8014f3c:	b480      	push	{r7}
 8014f3e:	b083      	sub	sp, #12
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	881b      	ldrh	r3, [r3, #0]
 8014f4a:	461a      	mov	r2, r3
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	881b      	ldrh	r3, [r3, #0]
 8014f50:	1ad3      	subs	r3, r2, r3
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	370c      	adds	r7, #12
 8014f56:	46bd      	mov	sp, r7
 8014f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5c:	4770      	bx	lr

08014f5e <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8014f5e:	b580      	push	{r7, lr}
 8014f60:	b082      	sub	sp, #8
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	6078      	str	r0, [r7, #4]
    memset(driver, 0, sizeof(lv_disp_drv_t));
 8014f66:	2224      	movs	r2, #36	; 0x24
 8014f68:	2100      	movs	r1, #0
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	f014 ff2d 	bl	8029dca <memset>

    driver->flush_cb         = NULL;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2200      	movs	r2, #0
 8014f74:	60da      	str	r2, [r3, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	22f0      	movs	r2, #240	; 0xf0
 8014f7a:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	22f0      	movs	r2, #240	; 0xf0
 8014f80:	805a      	strh	r2, [r3, #2]
    driver->buffer           = NULL;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	2200      	movs	r2, #0
 8014f86:	605a      	str	r2, [r3, #4]
    driver->rotated          = 0;
 8014f88:	687a      	ldr	r2, [r7, #4]
 8014f8a:	7a13      	ldrb	r3, [r2, #8]
 8014f8c:	f36f 0341 	bfc	r3, #1, #1
 8014f90:	7213      	strb	r3, [r2, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	7f13      	ldrb	r3, [r2, #28]
 8014f96:	f043 0307 	orr.w	r3, r3, #7
 8014f9a:	7713      	strb	r3, [r2, #28]
 8014f9c:	687a      	ldr	r2, [r7, #4]
 8014f9e:	7f13      	ldrb	r3, [r2, #28]
 8014fa0:	f36f 03c7 	bfc	r3, #3, #5
 8014fa4:	7713      	strb	r3, [r2, #28]
 8014fa6:	687a      	ldr	r2, [r7, #4]
 8014fa8:	7f53      	ldrb	r3, [r2, #29]
 8014faa:	f36f 0304 	bfc	r3, #0, #5
 8014fae:	7753      	strb	r3, [r2, #29]
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	7f53      	ldrb	r3, [r2, #29]
 8014fb4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8014fb8:	7753      	strb	r3, [r2, #29]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 8014fba:	687a      	ldr	r2, [r7, #4]
 8014fbc:	7a13      	ldrb	r3, [r2, #8]
 8014fbe:	f043 0301 	orr.w	r3, r3, #1
 8014fc2:	7213      	strb	r3, [r2, #8]
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	621a      	str	r2, [r3, #32]
#endif

    driver->set_px_cb = NULL;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	615a      	str	r2, [r3, #20]
}
 8014fd0:	bf00      	nop
 8014fd2:	3708      	adds	r7, #8
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b084      	sub	sp, #16
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	607a      	str	r2, [r7, #4]
 8014fe4:	603b      	str	r3, [r7, #0]
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 8014fe6:	221c      	movs	r2, #28
 8014fe8:	2100      	movs	r1, #0
 8014fea:	68f8      	ldr	r0, [r7, #12]
 8014fec:	f014 feed 	bl	8029dca <memset>

    disp_buf->buf1    = buf1;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	68ba      	ldr	r2, [r7, #8]
 8014ff4:	601a      	str	r2, [r3, #0]
    disp_buf->buf2    = buf2;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	687a      	ldr	r2, [r7, #4]
 8014ffa:	605a      	str	r2, [r3, #4]
    disp_buf->buf_act = disp_buf->buf1;
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	681a      	ldr	r2, [r3, #0]
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	609a      	str	r2, [r3, #8]
    disp_buf->size    = size_in_px_cnt;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	683a      	ldr	r2, [r7, #0]
 8015008:	60da      	str	r2, [r3, #12]
}
 801500a:	bf00      	nop
 801500c:	3710      	adds	r7, #16
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
	...

08015014 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b084      	sub	sp, #16
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801501c:	4841      	ldr	r0, [pc, #260]	; (8015124 <lv_disp_drv_register+0x110>)
 801501e:	f000 ffbb 	bl	8015f98 <lv_ll_ins_head>
 8015022:	60f8      	str	r0, [r7, #12]
    if(!disp) {
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d105      	bne.n	8015036 <lv_disp_drv_register+0x22>
        lv_mem_assert(disp);
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d100      	bne.n	8015032 <lv_disp_drv_register+0x1e>
 8015030:	e7fe      	b.n	8015030 <lv_disp_drv_register+0x1c>
        return NULL;
 8015032:	2300      	movs	r3, #0
 8015034:	e072      	b.n	801511c <lv_disp_drv_register+0x108>
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	2224      	movs	r2, #36	; 0x24
 801503a:	6879      	ldr	r1, [r7, #4]
 801503c:	4618      	mov	r0, r3
 801503e:	f014 feb9 	bl	8029db4 <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8015048:	2220      	movs	r2, #32
 801504a:	2100      	movs	r1, #0
 801504c:	4618      	mov	r0, r3
 801504e:	f014 febc 	bl	8029dca <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	3340      	adds	r3, #64	; 0x40
 8015056:	f44f 7280 	mov.w	r2, #256	; 0x100
 801505a:	2100      	movs	r1, #0
 801505c:	4618      	mov	r0, r3
 801505e:	f014 feb4 	bl	8029dca <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	3328      	adds	r3, #40	; 0x28
 8015066:	2148      	movs	r1, #72	; 0x48
 8015068:	4618      	mov	r0, r3
 801506a:	f000 ff75 	bl	8015f58 <lv_ll_init>

    if(disp_def == NULL) disp_def = disp;
 801506e:	4b2e      	ldr	r3, [pc, #184]	; (8015128 <lv_disp_drv_register+0x114>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d102      	bne.n	801507c <lv_disp_drv_register+0x68>
 8015076:	4a2c      	ldr	r2, [pc, #176]	; (8015128 <lv_disp_drv_register+0x114>)
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	6013      	str	r3, [r2, #0]

    lv_disp_t * disp_def_tmp = disp_def;
 801507c:	4b2a      	ldr	r3, [pc, #168]	; (8015128 <lv_disp_drv_register+0x114>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	60bb      	str	r3, [r7, #8]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8015082:	4a29      	ldr	r2, [pc, #164]	; (8015128 <lv_disp_drv_register+0x114>)
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	6013      	str	r3, [r2, #0]
                                        new display*/

    disp->inv_p = 0;
 8015088:	68fa      	ldr	r2, [r7, #12]
 801508a:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 801508e:	f36f 0309 	bfc	r3, #0, #10
 8015092:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8015096:	2100      	movs	r1, #0
 8015098:	2000      	movs	r0, #0
 801509a:	f7f3 f955 	bl	8008348 <lv_obj_create>
 801509e:	4602      	mov	r2, r0
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	635a      	str	r2, [r3, #52]	; 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 80150a4:	2100      	movs	r1, #0
 80150a6:	2000      	movs	r0, #0
 80150a8:	f7f3 f94e 	bl	8008348 <lv_obj_create>
 80150ac:	4602      	mov	r2, r0
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	639a      	str	r2, [r3, #56]	; 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 80150b2:	2100      	movs	r1, #0
 80150b4:	2000      	movs	r0, #0
 80150b6:	f7f3 f947 	bl	8008348 <lv_obj_create>
 80150ba:	4602      	mov	r2, r0
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	63da      	str	r2, [r3, #60]	; 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150c4:	4919      	ldr	r1, [pc, #100]	; (801512c <lv_disp_drv_register+0x118>)
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7f4 fb77 	bl	80097ba <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150d0:	4916      	ldr	r1, [pc, #88]	; (801512c <lv_disp_drv_register+0x118>)
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7f4 fb71 	bl	80097ba <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150dc:	4618      	mov	r0, r3
 80150de:	f7f3 fc70 	bl	80089c2 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 80150e2:	4a11      	ldr	r2, [pc, #68]	; (8015128 <lv_disp_drv_register+0x114>)
 80150e4:	68bb      	ldr	r3, [r7, #8]
 80150e6:	6013      	str	r3, [r2, #0]

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	2203      	movs	r2, #3
 80150ec:	211e      	movs	r1, #30
 80150ee:	4810      	ldr	r0, [pc, #64]	; (8015130 <lv_disp_drv_register+0x11c>)
 80150f0:	f001 fc64 	bl	80169bc <lv_task_create>
 80150f4:	4602      	mov	r2, r0
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	625a      	str	r2, [r3, #36]	; 0x24
    lv_mem_assert(disp->refr_task);
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d100      	bne.n	8015104 <lv_disp_drv_register+0xf0>
 8015102:	e7fe      	b.n	8015102 <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015108:	2b00      	cmp	r3, #0
 801510a:	d101      	bne.n	8015110 <lv_disp_drv_register+0xfc>
 801510c:	2300      	movs	r3, #0
 801510e:	e005      	b.n	801511c <lv_disp_drv_register+0x108>

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015114:	4618      	mov	r0, r3
 8015116:	f001 fcff 	bl	8016b18 <lv_task_ready>

    return disp;
 801511a:	68fb      	ldr	r3, [r7, #12]
}
 801511c:	4618      	mov	r0, r3
 801511e:	3710      	adds	r7, #16
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}
 8015124:	2001bb58 	.word	0x2001bb58
 8015128:	2001777c 	.word	0x2001777c
 801512c:	2001b86c 	.word	0x2001b86c
 8015130:	0800a449 	.word	0x0800a449

08015134 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 8015134:	b480      	push	{r7}
 8015136:	af00      	add	r7, sp, #0
    return disp_def;
 8015138:	4b03      	ldr	r3, [pc, #12]	; (8015148 <lv_disp_get_default+0x14>)
 801513a:	681b      	ldr	r3, [r3, #0]
}
 801513c:	4618      	mov	r0, r3
 801513e:	46bd      	mov	sp, r7
 8015140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015144:	4770      	bx	lr
 8015146:	bf00      	nop
 8015148:	2001777c 	.word	0x2001777c

0801514c <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b082      	sub	sp, #8
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d102      	bne.n	8015160 <lv_disp_get_hor_res+0x14>
 801515a:	f7ff ffeb 	bl	8015134 <lv_disp_get_default>
 801515e:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d101      	bne.n	801516a <lv_disp_get_hor_res+0x1e>
        return LV_HOR_RES_MAX;
 8015166:	23f0      	movs	r3, #240	; 0xf0
 8015168:	e00d      	b.n	8015186 <lv_disp_get_hor_res+0x3a>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	7a1b      	ldrb	r3, [r3, #8]
 801516e:	f003 0302 	and.w	r3, r3, #2
 8015172:	b2db      	uxtb	r3, r3
 8015174:	2b00      	cmp	r3, #0
 8015176:	d103      	bne.n	8015180 <lv_disp_get_hor_res+0x34>
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801517e:	e002      	b.n	8015186 <lv_disp_get_hor_res+0x3a>
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8015186:	4618      	mov	r0, r3
 8015188:	3708      	adds	r7, #8
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}

0801518e <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 801518e:	b580      	push	{r7, lr}
 8015190:	b082      	sub	sp, #8
 8015192:	af00      	add	r7, sp, #0
 8015194:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d102      	bne.n	80151a2 <lv_disp_get_ver_res+0x14>
 801519c:	f7ff ffca 	bl	8015134 <lv_disp_get_default>
 80151a0:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d101      	bne.n	80151ac <lv_disp_get_ver_res+0x1e>
        return LV_VER_RES_MAX;
 80151a8:	23f0      	movs	r3, #240	; 0xf0
 80151aa:	e00d      	b.n	80151c8 <lv_disp_get_ver_res+0x3a>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	7a1b      	ldrb	r3, [r3, #8]
 80151b0:	f003 0302 	and.w	r3, r3, #2
 80151b4:	b2db      	uxtb	r3, r3
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d103      	bne.n	80151c2 <lv_disp_get_ver_res+0x34>
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80151c0:	e002      	b.n	80151c8 <lv_disp_get_ver_res+0x3a>
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3708      	adds	r7, #8
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <lv_disp_get_antialiasing>:
 * Get if anti-aliasing is enabled for a display or not
 * @param disp pointer to a display (NULL to use the default display)
 * @return true: anti-aliasing is enabled; false: disabled
 */
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d102      	bne.n	80151e4 <lv_disp_get_antialiasing+0x14>
 80151de:	f7ff ffa9 	bl	8015134 <lv_disp_get_default>
 80151e2:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return false;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d101      	bne.n	80151ee <lv_disp_get_antialiasing+0x1e>
 80151ea:	2300      	movs	r3, #0
 80151ec:	e008      	b.n	8015200 <lv_disp_get_antialiasing+0x30>

    return disp->driver.antialiasing ? true : false;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	7a1b      	ldrb	r3, [r3, #8]
 80151f2:	f003 0301 	and.w	r3, r3, #1
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	bf14      	ite	ne
 80151fa:	2301      	movne	r3, #1
 80151fc:	2300      	moveq	r3, #0
 80151fe:	b2db      	uxtb	r3, r3
#endif
}
 8015200:	4618      	mov	r0, r3
 8015202:	3708      	adds	r7, #8
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}

08015208 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 8015208:	b480      	push	{r7}
 801520a:	b083      	sub	sp, #12
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
    disp_drv->buffer->flushing = 0;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	685a      	ldr	r2, [r3, #4]
 8015214:	7e13      	ldrb	r3, [r2, #24]
 8015216:	f36f 0300 	bfc	r3, #0, #1
 801521a:	7613      	strb	r3, [r2, #24]
#if LV_COLOR_SCREEN_TRANSP
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif
}
 801521c:	bf00      	nop
 801521e:	370c      	adds	r7, #12
 8015220:	46bd      	mov	sp, r7
 8015222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015226:	4770      	bx	lr

08015228 <lv_disp_get_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
 8015228:	b480      	push	{r7}
 801522a:	b083      	sub	sp, #12
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
    return disp->driver.buffer;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	685b      	ldr	r3, [r3, #4]
}
 8015234:	4618      	mov	r0, r3
 8015236:	370c      	adds	r7, #12
 8015238:	46bd      	mov	sp, r7
 801523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523e:	4770      	bx	lr

08015240 <lv_disp_is_double_buf>:
 * Check the driver configuration if it's double buffered (both `buf1` and `buf2` are set)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
 8015240:	b480      	push	{r7}
 8015242:	b083      	sub	sp, #12
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	685b      	ldr	r3, [r3, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d006      	beq.n	8015260 <lv_disp_is_double_buf+0x20>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d001      	beq.n	8015260 <lv_disp_is_double_buf+0x20>
        return true;
 801525c:	2301      	movs	r3, #1
 801525e:	e000      	b.n	8015262 <lv_disp_is_double_buf+0x22>
    else
        return false;
 8015260:	2300      	movs	r3, #0
}
 8015262:	4618      	mov	r0, r3
 8015264:	370c      	adds	r7, #12
 8015266:	46bd      	mov	sp, r7
 8015268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526c:	4770      	bx	lr

0801526e <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 801526e:	b580      	push	{r7, lr}
 8015270:	b084      	sub	sp, #16
 8015272:	af00      	add	r7, sp, #0
 8015274:	6078      	str	r0, [r7, #4]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f9b3 3000 	ldrsh.w	r3, [r3]
 801527c:	461a      	mov	r2, r3
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015284:	fb03 f302 	mul.w	r3, r3, r2
 8015288:	60fb      	str	r3, [r7, #12]

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f7ff ffd8 	bl	8015240 <lv_disp_is_double_buf>
 8015290:	4603      	mov	r3, r0
 8015292:	2b00      	cmp	r3, #0
 8015294:	d007      	beq.n	80152a6 <lv_disp_is_true_double_buf+0x38>
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	685b      	ldr	r3, [r3, #4]
 801529a:	68db      	ldr	r3, [r3, #12]
 801529c:	68fa      	ldr	r2, [r7, #12]
 801529e:	429a      	cmp	r2, r3
 80152a0:	d101      	bne.n	80152a6 <lv_disp_is_true_double_buf+0x38>
        return true;
 80152a2:	2301      	movs	r3, #1
 80152a4:	e000      	b.n	80152a8 <lv_disp_is_true_double_buf+0x3a>
    } else {
        return false;
 80152a6:	2300      	movs	r3, #0
    }
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3710      	adds	r7, #16
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d104      	bne.n	80152c8 <lv_indev_get_next+0x18>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 80152be:	4807      	ldr	r0, [pc, #28]	; (80152dc <lv_indev_get_next+0x2c>)
 80152c0:	f000 ffcc 	bl	801625c <lv_ll_get_head>
 80152c4:	4603      	mov	r3, r0
 80152c6:	e004      	b.n	80152d2 <lv_indev_get_next+0x22>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 80152c8:	6879      	ldr	r1, [r7, #4]
 80152ca:	4804      	ldr	r0, [pc, #16]	; (80152dc <lv_indev_get_next+0x2c>)
 80152cc:	f000 ffec 	bl	80162a8 <lv_ll_get_next>
 80152d0:	4603      	mov	r3, r0
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	3708      	adds	r7, #8
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	2001bb48 	.word	0x2001bb48

080152e0 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 80152e0:	b480      	push	{r7}
 80152e2:	b083      	sub	sp, #12
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 80152e8:	4b07      	ldr	r3, [pc, #28]	; (8015308 <lv_tick_inc+0x28>)
 80152ea:	2200      	movs	r2, #0
 80152ec:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 80152ee:	4b07      	ldr	r3, [pc, #28]	; (801530c <lv_tick_inc+0x2c>)
 80152f0:	681a      	ldr	r2, [r3, #0]
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	4413      	add	r3, r2
 80152f6:	4a05      	ldr	r2, [pc, #20]	; (801530c <lv_tick_inc+0x2c>)
 80152f8:	6013      	str	r3, [r2, #0]
}
 80152fa:	bf00      	nop
 80152fc:	370c      	adds	r7, #12
 80152fe:	46bd      	mov	sp, r7
 8015300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015304:	4770      	bx	lr
 8015306:	bf00      	nop
 8015308:	20017784 	.word	0x20017784
 801530c:	20017780 	.word	0x20017780

08015310 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 8015310:	b480      	push	{r7}
 8015312:	b083      	sub	sp, #12
 8015314:	af00      	add	r7, sp, #0
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8015316:	4b09      	ldr	r3, [pc, #36]	; (801533c <lv_tick_get+0x2c>)
 8015318:	2201      	movs	r2, #1
 801531a:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 801531c:	4b08      	ldr	r3, [pc, #32]	; (8015340 <lv_tick_get+0x30>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 8015322:	4b06      	ldr	r3, [pc, #24]	; (801533c <lv_tick_get+0x2c>)
 8015324:	781b      	ldrb	r3, [r3, #0]
 8015326:	b2db      	uxtb	r3, r3
 8015328:	2b00      	cmp	r3, #0
 801532a:	d0f4      	beq.n	8015316 <lv_tick_get+0x6>
                                Continue until make a non interrupted cycle */

    return result;
 801532c:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801532e:	4618      	mov	r0, r3
 8015330:	370c      	adds	r7, #12
 8015332:	46bd      	mov	sp, r7
 8015334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015338:	4770      	bx	lr
 801533a:	bf00      	nop
 801533c:	20017784 	.word	0x20017784
 8015340:	20017780 	.word	0x20017780

08015344 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b084      	sub	sp, #16
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 801534c:	f7ff ffe0 	bl	8015310 <lv_tick_get>
 8015350:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 8015352:	68fa      	ldr	r2, [r7, #12]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	429a      	cmp	r2, r3
 8015358:	d304      	bcc.n	8015364 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 801535a:	68fa      	ldr	r2, [r7, #12]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	1ad3      	subs	r3, r2, r3
 8015360:	607b      	str	r3, [r7, #4]
 8015362:	e006      	b.n	8015372 <lv_tick_elaps+0x2e>
    } else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	425b      	negs	r3, r3
 8015368:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 801536a:	687a      	ldr	r2, [r7, #4]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	4413      	add	r3, r2
 8015370:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 8015372:	687b      	ldr	r3, [r7, #4]
}
 8015374:	4618      	mov	r0, r3
 8015376:	3710      	adds	r7, #16
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <lv_anim_core_init>:

/**
 * Init. the animation module
 */
void lv_anim_core_init(void)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8015380:	2128      	movs	r1, #40	; 0x28
 8015382:	4808      	ldr	r0, [pc, #32]	; (80153a4 <lv_anim_core_init+0x28>)
 8015384:	f000 fde8 	bl	8015f58 <lv_ll_init>
    last_task_run = lv_tick_get();
 8015388:	f7ff ffc2 	bl	8015310 <lv_tick_get>
 801538c:	4602      	mov	r2, r0
 801538e:	4b06      	ldr	r3, [pc, #24]	; (80153a8 <lv_anim_core_init+0x2c>)
 8015390:	601a      	str	r2, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8015392:	2300      	movs	r3, #0
 8015394:	2203      	movs	r2, #3
 8015396:	211e      	movs	r1, #30
 8015398:	4804      	ldr	r0, [pc, #16]	; (80153ac <lv_anim_core_init+0x30>)
 801539a:	f001 fb0f 	bl	80169bc <lv_task_create>
}
 801539e:	bf00      	nop
 80153a0:	bd80      	pop	{r7, pc}
 80153a2:	bf00      	nop
 80153a4:	2001bb84 	.word	0x2001bb84
 80153a8:	20017788 	.word	0x20017788
 80153ac:	08015565 	.word	0x08015565

080153b0 <lv_anim_create>:
/**
 * Create an animation
 * @param a an initialized 'anim_t' variable. Not required after call.
 */
void lv_anim_create(lv_anim_t * a)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b084      	sub	sp, #16
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("animation create started")
    /* Do not let two animations for the  same 'var' with the same 'fp'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d007      	beq.n	80153d0 <lv_anim_create+0x20>
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	681a      	ldr	r2, [r3, #0]
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	685b      	ldr	r3, [r3, #4]
 80153c8:	4619      	mov	r1, r3
 80153ca:	4610      	mov	r0, r2
 80153cc:	f000 f830 	bl	8015430 <lv_anim_del>

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 80153d0:	4815      	ldr	r0, [pc, #84]	; (8015428 <lv_anim_create+0x78>)
 80153d2:	f000 fde1 	bl	8015f98 <lv_ll_ins_head>
 80153d6:	60f8      	str	r0, [r7, #12]
    lv_mem_assert(new_anim);
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d100      	bne.n	80153e0 <lv_anim_create+0x30>
 80153de:	e7fe      	b.n	80153de <lv_anim_create+0x2e>
    if(new_anim == NULL) return;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d01c      	beq.n	8015420 <lv_anim_create+0x70>

    /*Initialize the animation descriptor*/
    a->playback_now = 0;
 80153e6:	687a      	ldr	r2, [r7, #4]
 80153e8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80153ec:	f36f 0382 	bfc	r3, #2, #1
 80153f0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    memcpy(new_anim, a, sizeof(lv_anim_t));
 80153f4:	2228      	movs	r2, #40	; 0x28
 80153f6:	6879      	ldr	r1, [r7, #4]
 80153f8:	68f8      	ldr	r0, [r7, #12]
 80153fa:	f014 fcdb 	bl	8029db4 <memcpy>

    /*Set the start value*/
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	685b      	ldr	r3, [r3, #4]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d008      	beq.n	8015418 <lv_anim_create+0x68>
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	685b      	ldr	r3, [r3, #4]
 801540a:	68fa      	ldr	r2, [r7, #12]
 801540c:	6810      	ldr	r0, [r2, #0]
 801540e:	68fa      	ldr	r2, [r7, #12]
 8015410:	6912      	ldr	r2, [r2, #16]
 8015412:	b212      	sxth	r2, r2
 8015414:	4611      	mov	r1, r2
 8015416:	4798      	blx	r3

    /* Creating an animation changed the linked list.
     * It's important if it happens in a ready callback. (see `anim_task`)*/
    anim_list_changed = true;
 8015418:	4b04      	ldr	r3, [pc, #16]	; (801542c <lv_anim_create+0x7c>)
 801541a:	2201      	movs	r2, #1
 801541c:	701a      	strb	r2, [r3, #0]
 801541e:	e000      	b.n	8015422 <lv_anim_create+0x72>
    if(new_anim == NULL) return;
 8015420:	bf00      	nop

    LV_LOG_TRACE("animation created")
}
 8015422:	3710      	adds	r7, #16
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}
 8015428:	2001bb84 	.word	0x2001bb84
 801542c:	2001778c 	.word	0x2001778c

08015430 <lv_anim_del>:
 * @param exec_cb a function pointer which is animating 'var',
 *           or NULL to delete all the animations of 'var'
 * @return true: at least 1 animation is deleted, false: no animation is deleted
 */
bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b086      	sub	sp, #24
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 801543a:	2300      	movs	r3, #0
 801543c:	74fb      	strb	r3, [r7, #19]
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801543e:	4816      	ldr	r0, [pc, #88]	; (8015498 <lv_anim_del+0x68>)
 8015440:	f000 ff0c 	bl	801625c <lv_ll_get_head>
 8015444:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 8015446:	e01f      	b.n	8015488 <lv_anim_del+0x58>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8015448:	6979      	ldr	r1, [r7, #20]
 801544a:	4813      	ldr	r0, [pc, #76]	; (8015498 <lv_anim_del+0x68>)
 801544c:	f000 ff2c 	bl	80162a8 <lv_ll_get_next>
 8015450:	60f8      	str	r0, [r7, #12]

        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	687a      	ldr	r2, [r7, #4]
 8015458:	429a      	cmp	r2, r3
 801545a:	d113      	bne.n	8015484 <lv_anim_del+0x54>
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	683a      	ldr	r2, [r7, #0]
 8015462:	429a      	cmp	r2, r3
 8015464:	d002      	beq.n	801546c <lv_anim_del+0x3c>
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d10b      	bne.n	8015484 <lv_anim_del+0x54>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 801546c:	6979      	ldr	r1, [r7, #20]
 801546e:	480a      	ldr	r0, [pc, #40]	; (8015498 <lv_anim_del+0x68>)
 8015470:	f000 fe46 	bl	8016100 <lv_ll_rem>
            lv_mem_free(a);
 8015474:	6978      	ldr	r0, [r7, #20]
 8015476:	f001 f8b1 	bl	80165dc <lv_mem_free>
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 801547a:	4b08      	ldr	r3, [pc, #32]	; (801549c <lv_anim_del+0x6c>)
 801547c:	2201      	movs	r2, #1
 801547e:	701a      	strb	r2, [r3, #0]
                                         the linked list*/
            del = true;
 8015480:	2301      	movs	r3, #1
 8015482:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 8015488:	697b      	ldr	r3, [r7, #20]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d1dc      	bne.n	8015448 <lv_anim_del+0x18>
    }

    return del;
 801548e:	7cfb      	ldrb	r3, [r7, #19]
}
 8015490:	4618      	mov	r0, r3
 8015492:	3718      	adds	r7, #24
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}
 8015498:	2001bb84 	.word	0x2001bb84
 801549c:	2001778c 	.word	0x2001778c

080154a0 <lv_anim_speed_to_time>:
 * @param start start value of the animation
 * @param end end value of the animation
 * @return the required time [ms] for the animation with the given parameters
 */
uint16_t lv_anim_speed_to_time(uint16_t speed, lv_anim_value_t start, lv_anim_value_t end)
{
 80154a0:	b480      	push	{r7}
 80154a2:	b085      	sub	sp, #20
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	4603      	mov	r3, r0
 80154a8:	80fb      	strh	r3, [r7, #6]
 80154aa:	460b      	mov	r3, r1
 80154ac:	80bb      	strh	r3, [r7, #4]
 80154ae:	4613      	mov	r3, r2
 80154b0:	807b      	strh	r3, [r7, #2]
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 80154b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80154b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80154ba:	1ad3      	subs	r3, r2, r3
 80154bc:	2b00      	cmp	r3, #0
 80154be:	bfb8      	it	lt
 80154c0:	425b      	neglt	r3, r3
 80154c2:	60bb      	str	r3, [r7, #8]
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80154ca:	fb02 f203 	mul.w	r2, r2, r3
 80154ce:	88fb      	ldrh	r3, [r7, #6]
 80154d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80154d4:	60fb      	str	r3, [r7, #12]

    if(time > UINT16_MAX) time = UINT16_MAX;
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80154dc:	d302      	bcc.n	80154e4 <lv_anim_speed_to_time+0x44>
 80154de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154e2:	60fb      	str	r3, [r7, #12]

    if(time == 0) {
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d102      	bne.n	80154f0 <lv_anim_speed_to_time+0x50>
        time++;
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	3301      	adds	r3, #1
 80154ee:	60fb      	str	r3, [r7, #12]
    }

    return time;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	b29b      	uxth	r3, r3
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3714      	adds	r7, #20
 80154f8:	46bd      	mov	sp, r7
 80154fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fe:	4770      	bx	lr

08015500 <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
 8015500:	b480      	push	{r7}
 8015502:	b085      	sub	sp, #20
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	8b1b      	ldrh	r3, [r3, #24]
 801550c:	461a      	mov	r2, r3
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015514:	429a      	cmp	r2, r3
 8015516:	d103      	bne.n	8015520 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 8015518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801551c:	60fb      	str	r3, [r7, #12]
 801551e:	e008      	b.n	8015532 <lv_anim_path_linear+0x32>
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015526:	029b      	lsls	r3, r3, #10
 8015528:	687a      	ldr	r2, [r7, #4]
 801552a:	8b12      	ldrh	r2, [r2, #24]
 801552c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015530:	60fb      	str	r3, [r7, #12]
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	695a      	ldr	r2, [r3, #20]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	691b      	ldr	r3, [r3, #16]
 801553a:	1ad3      	subs	r3, r2, r3
 801553c:	68fa      	ldr	r2, [r7, #12]
 801553e:	fb02 f303 	mul.w	r3, r2, r3
 8015542:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	129b      	asrs	r3, r3, #10
 8015548:	60bb      	str	r3, [r7, #8]
    new_value += a->start;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	691b      	ldr	r3, [r3, #16]
 801554e:	68ba      	ldr	r2, [r7, #8]
 8015550:	4413      	add	r3, r2
 8015552:	60bb      	str	r3, [r7, #8]

    return (lv_anim_value_t)new_value;
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	b21b      	sxth	r3, r3
}
 8015558:	4618      	mov	r0, r3
 801555a:	3714      	adds	r7, #20
 801555c:	46bd      	mov	sp, r7
 801555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015562:	4770      	bx	lr

08015564 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b086      	sub	sp, #24
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 801556c:	4842      	ldr	r0, [pc, #264]	; (8015678 <anim_task+0x114>)
 801556e:	f000 fe75 	bl	801625c <lv_ll_get_head>
 8015572:	6178      	str	r0, [r7, #20]
 8015574:	e00b      	b.n	801558e <anim_task+0x2a>
    {
        a->has_run = 0;
 8015576:	697a      	ldr	r2, [r7, #20]
 8015578:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 801557c:	f36f 03c3 	bfc	r3, #3, #1
 8015580:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8015584:	6979      	ldr	r1, [r7, #20]
 8015586:	483c      	ldr	r0, [pc, #240]	; (8015678 <anim_task+0x114>)
 8015588:	f000 fe8e 	bl	80162a8 <lv_ll_get_next>
 801558c:	6178      	str	r0, [r7, #20]
 801558e:	697b      	ldr	r3, [r7, #20]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d1f0      	bne.n	8015576 <anim_task+0x12>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 8015594:	4b39      	ldr	r3, [pc, #228]	; (801567c <anim_task+0x118>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	4618      	mov	r0, r3
 801559a:	f7ff fed3 	bl	8015344 <lv_tick_elaps>
 801559e:	6138      	str	r0, [r7, #16]

    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80155a0:	4835      	ldr	r0, [pc, #212]	; (8015678 <anim_task+0x114>)
 80155a2:	f000 fe5b 	bl	801625c <lv_ll_get_head>
 80155a6:	6178      	str	r0, [r7, #20]

    while(a != NULL) {
 80155a8:	e059      	b.n	801565e <anim_task+0xfa>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 80155aa:	4b35      	ldr	r3, [pc, #212]	; (8015680 <anim_task+0x11c>)
 80155ac:	2200      	movs	r2, #0
 80155ae:	701a      	strb	r2, [r3, #0]

        if(!a->has_run) {
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80155b6:	f003 0308 	and.w	r3, r3, #8
 80155ba:	b2db      	uxtb	r3, r3
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d140      	bne.n	8015642 <anim_task+0xde>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 80155c0:	697a      	ldr	r2, [r7, #20]
 80155c2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80155c6:	f043 0308 	orr.w	r3, r3, #8
 80155ca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            a->act_time += elaps;
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	693b      	ldr	r3, [r7, #16]
 80155d8:	b29b      	uxth	r3, r3
 80155da:	4413      	add	r3, r2
 80155dc:	b29b      	uxth	r3, r3
 80155de:	b21a      	sxth	r2, r3
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	835a      	strh	r2, [r3, #26]
            if(a->act_time >= 0) {
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	db29      	blt.n	8015642 <anim_task+0xde>
                if(a->act_time > a->time) a->act_time = a->time;
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80155f4:	461a      	mov	r2, r3
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	8b1b      	ldrh	r3, [r3, #24]
 80155fa:	429a      	cmp	r2, r3
 80155fc:	dd04      	ble.n	8015608 <anim_task+0xa4>
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	8b1b      	ldrh	r3, [r3, #24]
 8015602:	b21a      	sxth	r2, r3
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	835a      	strh	r2, [r3, #26]

                int32_t new_value;
                new_value = a->path_cb(a);
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	689b      	ldr	r3, [r3, #8]
 801560c:	6978      	ldr	r0, [r7, #20]
 801560e:	4798      	blx	r3
 8015610:	4603      	mov	r3, r0
 8015612:	60fb      	str	r3, [r7, #12]

                /*Apply the calculated value*/
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8015614:	697b      	ldr	r3, [r7, #20]
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d007      	beq.n	801562c <anim_task+0xc8>
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	685b      	ldr	r3, [r3, #4]
 8015620:	697a      	ldr	r2, [r7, #20]
 8015622:	6812      	ldr	r2, [r2, #0]
 8015624:	68f9      	ldr	r1, [r7, #12]
 8015626:	b209      	sxth	r1, r1
 8015628:	4610      	mov	r0, r2
 801562a:	4798      	blx	r3

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015632:	461a      	mov	r2, r3
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	8b1b      	ldrh	r3, [r3, #24]
 8015638:	429a      	cmp	r2, r3
 801563a:	db02      	blt.n	8015642 <anim_task+0xde>
                    anim_ready_handler(a);
 801563c:	6978      	ldr	r0, [r7, #20]
 801563e:	f000 f821 	bl	8015684 <anim_ready_handler>
            }
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 8015642:	4b0f      	ldr	r3, [pc, #60]	; (8015680 <anim_task+0x11c>)
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d004      	beq.n	8015654 <anim_task+0xf0>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801564a:	480b      	ldr	r0, [pc, #44]	; (8015678 <anim_task+0x114>)
 801564c:	f000 fe06 	bl	801625c <lv_ll_get_head>
 8015650:	6178      	str	r0, [r7, #20]
 8015652:	e004      	b.n	801565e <anim_task+0xfa>
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8015654:	6979      	ldr	r1, [r7, #20]
 8015656:	4808      	ldr	r0, [pc, #32]	; (8015678 <anim_task+0x114>)
 8015658:	f000 fe26 	bl	80162a8 <lv_ll_get_next>
 801565c:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d1a2      	bne.n	80155aa <anim_task+0x46>
    }

    last_task_run = lv_tick_get();
 8015664:	f7ff fe54 	bl	8015310 <lv_tick_get>
 8015668:	4602      	mov	r2, r0
 801566a:	4b04      	ldr	r3, [pc, #16]	; (801567c <anim_task+0x118>)
 801566c:	601a      	str	r2, [r3, #0]
}
 801566e:	bf00      	nop
 8015670:	3718      	adds	r7, #24
 8015672:	46bd      	mov	sp, r7
 8015674:	bd80      	pop	{r7, pc}
 8015676:	bf00      	nop
 8015678:	2001bb84 	.word	0x2001bb84
 801567c:	20017788 	.word	0x20017788
 8015680:	2001778c 	.word	0x2001778c

08015684 <anim_ready_handler>:
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 * @return true: animation delete occurred nnd the `LV_GC_ROOT(_lv_anim_ll)` has changed
 * */
static bool anim_ready_handler(lv_anim_t * a)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b08e      	sub	sp, #56	; 0x38
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015692:	f003 0302 	and.w	r3, r3, #2
 8015696:	b2db      	uxtb	r3, r3
 8015698:	2b00      	cmp	r3, #0
 801569a:	d107      	bne.n	80156ac <anim_ready_handler+0x28>
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80156a2:	f003 0301 	and.w	r3, r3, #1
 80156a6:	b2db      	uxtb	r3, r3
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d017      	beq.n	80156dc <anim_ready_handler+0x58>
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80156b2:	f003 0302 	and.w	r3, r3, #2
 80156b6:	b2db      	uxtb	r3, r3
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d129      	bne.n	8015710 <anim_ready_handler+0x8c>
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80156c2:	f003 0301 	and.w	r3, r3, #1
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d021      	beq.n	8015710 <anim_ready_handler+0x8c>
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80156d2:	f003 0304 	and.w	r3, r3, #4
 80156d6:	b2db      	uxtb	r3, r3
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d019      	beq.n	8015710 <anim_ready_handler+0x8c>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 80156dc:	f107 030c 	add.w	r3, r7, #12
 80156e0:	2228      	movs	r2, #40	; 0x28
 80156e2:	6879      	ldr	r1, [r7, #4]
 80156e4:	4618      	mov	r0, r3
 80156e6:	f014 fb65 	bl	8029db4 <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 80156ea:	6879      	ldr	r1, [r7, #4]
 80156ec:	4829      	ldr	r0, [pc, #164]	; (8015794 <anim_ready_handler+0x110>)
 80156ee:	f000 fd07 	bl	8016100 <lv_ll_rem>
        lv_mem_free(a);
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f000 ff72 	bl	80165dc <lv_mem_free>
        anim_list_changed = true;
 80156f8:	4b27      	ldr	r3, [pc, #156]	; (8015798 <anim_ready_handler+0x114>)
 80156fa:	2201      	movs	r2, #1
 80156fc:	701a      	strb	r2, [r3, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d040      	beq.n	8015786 <anim_ready_handler+0x102>
 8015704:	69bb      	ldr	r3, [r7, #24]
 8015706:	f107 020c 	add.w	r2, r7, #12
 801570a:	4610      	mov	r0, r2
 801570c:	4798      	blx	r3
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 801570e:	e03a      	b.n	8015786 <anim_ready_handler+0x102>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	8bdb      	ldrh	r3, [r3, #30]
 8015714:	425b      	negs	r3, r3
 8015716:	b29b      	uxth	r3, r3
 8015718:	b21a      	sxth	r2, r3
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	835a      	strh	r2, [r3, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015724:	f003 0301 	and.w	r3, r3, #1
 8015728:	b2db      	uxtb	r3, r3
 801572a:	2b00      	cmp	r3, #0
 801572c:	d02c      	beq.n	8015788 <anim_ready_handler+0x104>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015734:	f003 0304 	and.w	r3, r3, #4
 8015738:	b2db      	uxtb	r3, r3
 801573a:	2b00      	cmp	r3, #0
 801573c:	d106      	bne.n	801574c <anim_ready_handler+0xc8>
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	8b9b      	ldrh	r3, [r3, #28]
 8015742:	425b      	negs	r3, r3
 8015744:	b29b      	uxth	r3, r3
 8015746:	b21a      	sxth	r2, r3
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	835a      	strh	r2, [r3, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015752:	f003 0304 	and.w	r3, r3, #4
 8015756:	b2db      	uxtb	r3, r3
 8015758:	2b00      	cmp	r3, #0
 801575a:	bf0c      	ite	eq
 801575c:	2301      	moveq	r3, #1
 801575e:	2300      	movne	r3, #0
 8015760:	b2d9      	uxtb	r1, r3
 8015762:	687a      	ldr	r2, [r7, #4]
 8015764:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8015768:	f361 0382 	bfi	r3, r1, #2, #1
 801576c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	691b      	ldr	r3, [r3, #16]
 8015774:	637b      	str	r3, [r7, #52]	; 0x34
            a->start = a->end;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	695a      	ldr	r2, [r3, #20]
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	611a      	str	r2, [r3, #16]
            a->end   = tmp;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015782:	615a      	str	r2, [r3, #20]
 8015784:	e000      	b.n	8015788 <anim_ready_handler+0x104>
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8015786:	bf00      	nop
        }
    }

    return anim_list_changed;
 8015788:	4b03      	ldr	r3, [pc, #12]	; (8015798 <anim_ready_handler+0x114>)
 801578a:	781b      	ldrb	r3, [r3, #0]
}
 801578c:	4618      	mov	r0, r3
 801578e:	3738      	adds	r7, #56	; 0x38
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}
 8015794:	2001bb84 	.word	0x2001bb84
 8015798:	2001778c 	.word	0x2001778c

0801579c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801579c:	b480      	push	{r7}
 801579e:	b083      	sub	sp, #12
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80157aa:	b29a      	uxth	r2, r3
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	1ad3      	subs	r3, r2, r3
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	3301      	adds	r3, #1
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	b21b      	sxth	r3, r3
}
 80157be:	4618      	mov	r0, r3
 80157c0:	370c      	adds	r7, #12
 80157c2:	46bd      	mov	sp, r7
 80157c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c8:	4770      	bx	lr

080157ca <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80157ca:	b480      	push	{r7}
 80157cc:	b083      	sub	sp, #12
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80157d8:	b29a      	uxth	r2, r3
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80157e0:	b29b      	uxth	r3, r3
 80157e2:	1ad3      	subs	r3, r2, r3
 80157e4:	b29b      	uxth	r3, r3
 80157e6:	3301      	adds	r3, #1
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	b21b      	sxth	r3, r3
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	370c      	adds	r7, #12
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 80157f8:	b480      	push	{r7}
 80157fa:	b085      	sub	sp, #20
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	60f8      	str	r0, [r7, #12]
 8015800:	4608      	mov	r0, r1
 8015802:	4611      	mov	r1, r2
 8015804:	461a      	mov	r2, r3
 8015806:	4603      	mov	r3, r0
 8015808:	817b      	strh	r3, [r7, #10]
 801580a:	460b      	mov	r3, r1
 801580c:	813b      	strh	r3, [r7, #8]
 801580e:	4613      	mov	r3, r2
 8015810:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	897a      	ldrh	r2, [r7, #10]
 8015816:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	893a      	ldrh	r2, [r7, #8]
 801581c:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	88fa      	ldrh	r2, [r7, #6]
 8015822:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	8b3a      	ldrh	r2, [r7, #24]
 8015828:	80da      	strh	r2, [r3, #6]
}
 801582a:	bf00      	nop
 801582c:	3714      	adds	r7, #20
 801582e:	46bd      	mov	sp, r7
 8015830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015834:	4770      	bx	lr

08015836 <lv_area_set_width>:
 * Set the width of an area
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
 8015836:	b480      	push	{r7}
 8015838:	b083      	sub	sp, #12
 801583a:	af00      	add	r7, sp, #0
 801583c:	6078      	str	r0, [r7, #4]
 801583e:	460b      	mov	r3, r1
 8015840:	807b      	strh	r3, [r7, #2]
    area_p->x2 = area_p->x1 + w - 1;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015848:	b29a      	uxth	r2, r3
 801584a:	887b      	ldrh	r3, [r7, #2]
 801584c:	4413      	add	r3, r2
 801584e:	b29b      	uxth	r3, r3
 8015850:	3b01      	subs	r3, #1
 8015852:	b29b      	uxth	r3, r3
 8015854:	b21a      	sxth	r2, r3
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	809a      	strh	r2, [r3, #4]
}
 801585a:	bf00      	nop
 801585c:	370c      	adds	r7, #12
 801585e:	46bd      	mov	sp, r7
 8015860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015864:	4770      	bx	lr

08015866 <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 8015866:	b480      	push	{r7}
 8015868:	b083      	sub	sp, #12
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
 801586e:	460b      	mov	r3, r1
 8015870:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015878:	b29a      	uxth	r2, r3
 801587a:	887b      	ldrh	r3, [r7, #2]
 801587c:	4413      	add	r3, r2
 801587e:	b29b      	uxth	r3, r3
 8015880:	3b01      	subs	r3, #1
 8015882:	b29b      	uxth	r3, r3
 8015884:	b21a      	sxth	r2, r3
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	80da      	strh	r2, [r3, #6]
}
 801588a:	bf00      	nop
 801588c:	370c      	adds	r7, #12
 801588e:	46bd      	mov	sp, r7
 8015890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015894:	4770      	bx	lr

08015896 <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 8015896:	b580      	push	{r7, lr}
 8015898:	b084      	sub	sp, #16
 801589a:	af00      	add	r7, sp, #0
 801589c:	6078      	str	r0, [r7, #4]
 801589e:	460b      	mov	r3, r1
 80158a0:	807b      	strh	r3, [r7, #2]
 80158a2:	4613      	mov	r3, r2
 80158a4:	803b      	strh	r3, [r7, #0]
    lv_coord_t w = lv_area_get_width(area_p);
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f7ff ff78 	bl	801579c <lv_area_get_width>
 80158ac:	4603      	mov	r3, r0
 80158ae:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_area_get_height(area_p);
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	f7ff ff8a 	bl	80157ca <lv_area_get_height>
 80158b6:	4603      	mov	r3, r0
 80158b8:	81bb      	strh	r3, [r7, #12]
    area_p->x1   = x;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	887a      	ldrh	r2, [r7, #2]
 80158be:	801a      	strh	r2, [r3, #0]
    area_p->y1   = y;
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	883a      	ldrh	r2, [r7, #0]
 80158c4:	805a      	strh	r2, [r3, #2]
    lv_area_set_width(area_p, w);
 80158c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80158ca:	4619      	mov	r1, r3
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f7ff ffb2 	bl	8015836 <lv_area_set_width>
    lv_area_set_height(area_p, h);
 80158d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80158d6:	4619      	mov	r1, r3
 80158d8:	6878      	ldr	r0, [r7, #4]
 80158da:	f7ff ffc4 	bl	8015866 <lv_area_set_height>
}
 80158de:	bf00      	nop
 80158e0:	3710      	adds	r7, #16
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}

080158e6 <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 80158e6:	b480      	push	{r7}
 80158e8:	b085      	sub	sp, #20
 80158ea:	af00      	add	r7, sp, #0
 80158ec:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80158f4:	461a      	mov	r2, r3
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158fc:	1ad3      	subs	r3, r2, r3
 80158fe:	3301      	adds	r3, #1
 8015900:	461a      	mov	r2, r3
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015908:	4619      	mov	r1, r3
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015910:	1acb      	subs	r3, r1, r3
 8015912:	3301      	adds	r3, #1
 8015914:	fb03 f302 	mul.w	r3, r3, r2
 8015918:	60fb      	str	r3, [r7, #12]

    return size;
 801591a:	68fb      	ldr	r3, [r7, #12]
}
 801591c:	4618      	mov	r0, r3
 801591e:	3714      	adds	r7, #20
 8015920:	46bd      	mov	sp, r7
 8015922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015926:	4770      	bx	lr

08015928 <lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8015928:	b480      	push	{r7}
 801592a:	b087      	sub	sp, #28
 801592c:	af00      	add	r7, sp, #0
 801592e:	60f8      	str	r0, [r7, #12]
 8015930:	60b9      	str	r1, [r7, #8]
 8015932:	607a      	str	r2, [r7, #4]
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f9b3 2000 	ldrsh.w	r2, [r3]
 801593a:	68bb      	ldr	r3, [r7, #8]
 801593c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015940:	4293      	cmp	r3, r2
 8015942:	bfb8      	it	lt
 8015944:	4613      	movlt	r3, r2
 8015946:	b21a      	sxth	r2, r3
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015958:	4293      	cmp	r3, r2
 801595a:	bfb8      	it	lt
 801595c:	4613      	movlt	r3, r2
 801595e:	b21a      	sxth	r2, r3
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801596a:	68bb      	ldr	r3, [r7, #8]
 801596c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015970:	4293      	cmp	r3, r2
 8015972:	bfa8      	it	ge
 8015974:	4613      	movge	r3, r2
 8015976:	b21a      	sxth	r2, r3
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015982:	68bb      	ldr	r3, [r7, #8]
 8015984:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015988:	4293      	cmp	r3, r2
 801598a:	bfa8      	it	ge
 801598c:	4613      	movge	r3, r2
 801598e:	b21a      	sxth	r2, r3
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 8015994:	2301      	movs	r3, #1
 8015996:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	dc07      	bgt.n	80159b8 <lv_area_intersect+0x90>
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80159b4:	429a      	cmp	r2, r3
 80159b6:	dd01      	ble.n	80159bc <lv_area_intersect+0x94>
        union_ok = false;
 80159b8:	2300      	movs	r3, #0
 80159ba:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 80159bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80159be:	4618      	mov	r0, r3
 80159c0:	371c      	adds	r7, #28
 80159c2:	46bd      	mov	sp, r7
 80159c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c8:	4770      	bx	lr

080159ca <lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 80159ca:	b480      	push	{r7}
 80159cc:	b085      	sub	sp, #20
 80159ce:	af00      	add	r7, sp, #0
 80159d0:	60f8      	str	r0, [r7, #12]
 80159d2:	60b9      	str	r1, [r7, #8]
 80159d4:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80159dc:	68bb      	ldr	r3, [r7, #8]
 80159de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80159e2:	4293      	cmp	r3, r2
 80159e4:	bfa8      	it	ge
 80159e6:	4613      	movge	r3, r2
 80159e8:	b21a      	sxth	r2, r3
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80159f4:	68bb      	ldr	r3, [r7, #8]
 80159f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80159fa:	4293      	cmp	r3, r2
 80159fc:	bfa8      	it	ge
 80159fe:	4613      	movge	r3, r2
 8015a00:	b21a      	sxth	r2, r3
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015a12:	4293      	cmp	r3, r2
 8015a14:	bfb8      	it	lt
 8015a16:	4613      	movlt	r3, r2
 8015a18:	b21a      	sxth	r2, r3
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015a24:	68bb      	ldr	r3, [r7, #8]
 8015a26:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015a2a:	4293      	cmp	r3, r2
 8015a2c:	bfb8      	it	lt
 8015a2e:	4613      	movlt	r3, r2
 8015a30:	b21a      	sxth	r2, r3
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	80da      	strh	r2, [r3, #6]
}
 8015a36:	bf00      	nop
 8015a38:	3714      	adds	r7, #20
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a40:	4770      	bx	lr

08015a42 <lv_area_is_point_on>:
 * @param a_p pointer to an area
 * @param p_p pointer to a point
 * @return false:the point is out of the area
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
 8015a42:	b480      	push	{r7}
 8015a44:	b085      	sub	sp, #20
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	6078      	str	r0, [r7, #4]
 8015a4a:	6039      	str	r1, [r7, #0]
    bool is_on = false;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	73fb      	strb	r3, [r7, #15]

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	db19      	blt.n	8015a94 <lv_area_is_point_on+0x52>
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	dc11      	bgt.n	8015a94 <lv_area_is_point_on+0x52>
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	db09      	blt.n	8015a94 <lv_area_is_point_on+0x52>
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	dc01      	bgt.n	8015a94 <lv_area_is_point_on+0x52>
        is_on = true;
 8015a90:	2301      	movs	r3, #1
 8015a92:	73fb      	strb	r3, [r7, #15]
    }

    return is_on;
 8015a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	3714      	adds	r7, #20
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa0:	4770      	bx	lr

08015aa2 <lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8015aa2:	b480      	push	{r7}
 8015aa4:	b083      	sub	sp, #12
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
 8015aaa:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	dc19      	bgt.n	8015af0 <lv_area_is_on+0x4e>
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	db11      	blt.n	8015af0 <lv_area_is_on+0x4e>
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	dc09      	bgt.n	8015af0 <lv_area_is_on+0x4e>
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015ae2:	683b      	ldr	r3, [r7, #0]
 8015ae4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	db01      	blt.n	8015af0 <lv_area_is_on+0x4e>
        return true;
 8015aec:	2301      	movs	r3, #1
 8015aee:	e000      	b.n	8015af2 <lv_area_is_on+0x50>
    } else {
        return false;
 8015af0:	2300      	movs	r3, #0
    }
}
 8015af2:	4618      	mov	r0, r3
 8015af4:	370c      	adds	r7, #12
 8015af6:	46bd      	mov	sp, r7
 8015af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afc:	4770      	bx	lr

08015afe <lv_area_is_in>:
 * @param ain_p pointer to an area which could be in 'aholder_p'
 * @param aholder pointer to an area which could involve 'ain_p'
 * @return
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
 8015afe:	b480      	push	{r7}
 8015b00:	b085      	sub	sp, #20
 8015b02:	af00      	add	r7, sp, #0
 8015b04:	6078      	str	r0, [r7, #4]
 8015b06:	6039      	str	r1, [r7, #0]
    bool is_in = false;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	73fb      	strb	r3, [r7, #15]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015b12:	683b      	ldr	r3, [r7, #0]
 8015b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	db19      	blt.n	8015b50 <lv_area_is_in+0x52>
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	db11      	blt.n	8015b50 <lv_area_is_in+0x52>
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	dc09      	bgt.n	8015b50 <lv_area_is_in+0x52>
       ain_p->y2 <= aholder_p->y2) {
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015b42:	683b      	ldr	r3, [r7, #0]
 8015b44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8015b48:	429a      	cmp	r2, r3
 8015b4a:	dc01      	bgt.n	8015b50 <lv_area_is_in+0x52>
        is_in = true;
 8015b4c:	2301      	movs	r3, #1
 8015b4e:	73fb      	strb	r3, [r7, #15]
    }

    return is_in;
 8015b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b52:	4618      	mov	r0, r3
 8015b54:	3714      	adds	r7, #20
 8015b56:	46bd      	mov	sp, r7
 8015b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5c:	4770      	bx	lr

08015b5e <lv_circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 8015b5e:	b480      	push	{r7}
 8015b60:	b085      	sub	sp, #20
 8015b62:	af00      	add	r7, sp, #0
 8015b64:	60f8      	str	r0, [r7, #12]
 8015b66:	60b9      	str	r1, [r7, #8]
 8015b68:	4613      	mov	r3, r2
 8015b6a:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	88fa      	ldrh	r2, [r7, #6]
 8015b70:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	2200      	movs	r2, #0
 8015b76:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 8015b78:	88fb      	ldrh	r3, [r7, #6]
 8015b7a:	f1c3 0301 	rsb	r3, r3, #1
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	b21a      	sxth	r2, r3
 8015b82:	68bb      	ldr	r3, [r7, #8]
 8015b84:	801a      	strh	r2, [r3, #0]
}
 8015b86:	bf00      	nop
 8015b88:	3714      	adds	r7, #20
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b90:	4770      	bx	lr

08015b92 <lv_circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
 8015b92:	b480      	push	{r7}
 8015b94:	b083      	sub	sp, #12
 8015b96:	af00      	add	r7, sp, #0
 8015b98:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ba6:	429a      	cmp	r2, r3
 8015ba8:	bfd4      	ite	le
 8015baa:	2301      	movle	r3, #1
 8015bac:	2300      	movgt	r3, #0
 8015bae:	b2db      	uxtb	r3, r3
}
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	370c      	adds	r7, #12
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bba:	4770      	bx	lr

08015bbc <lv_circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 8015bbc:	b480      	push	{r7}
 8015bbe:	b083      	sub	sp, #12
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	6039      	str	r1, [r7, #0]
    c->y++;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015bcc:	b29b      	uxth	r3, r3
 8015bce:	3301      	adds	r3, #1
 8015bd0:	b29b      	uxth	r3, r3
 8015bd2:	b21a      	sxth	r2, r3
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	805a      	strh	r2, [r3, #2]

    if(*tmp <= 0) {
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	dc11      	bgt.n	8015c06 <lv_circ_next+0x4a>
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015be8:	b29a      	uxth	r2, r3
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015bf0:	b29b      	uxth	r3, r3
 8015bf2:	005b      	lsls	r3, r3, #1
 8015bf4:	b29b      	uxth	r3, r3
 8015bf6:	4413      	add	r3, r2
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	b29b      	uxth	r3, r3
 8015bfe:	b21a      	sxth	r2, r3
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	801a      	strh	r2, [r3, #0]
    } else {
        c->x--;
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
    }
}
 8015c04:	e01e      	b.n	8015c44 <lv_circ_next+0x88>
        c->x--;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	3b01      	subs	r3, #1
 8015c10:	b29b      	uxth	r3, r3
 8015c12:	b21a      	sxth	r2, r3
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	801a      	strh	r2, [r3, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 8015c18:	683b      	ldr	r3, [r7, #0]
 8015c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c1e:	b29a      	uxth	r2, r3
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c26:	4619      	mov	r1, r3
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c2e:	1acb      	subs	r3, r1, r3
 8015c30:	b29b      	uxth	r3, r3
 8015c32:	005b      	lsls	r3, r3, #1
 8015c34:	b29b      	uxth	r3, r3
 8015c36:	4413      	add	r3, r2
 8015c38:	b29b      	uxth	r3, r3
 8015c3a:	3301      	adds	r3, #1
 8015c3c:	b29b      	uxth	r3, r3
 8015c3e:	b21a      	sxth	r2, r3
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	801a      	strh	r2, [r3, #0]
}
 8015c44:	bf00      	nop
 8015c46:	370c      	adds	r7, #12
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4e:	4770      	bx	lr

08015c50 <lv_fs_init>:

/**
 * Initialize the File system interface
 */
void lv_fs_init(void)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 8015c54:	2148      	movs	r1, #72	; 0x48
 8015c56:	4802      	ldr	r0, [pc, #8]	; (8015c60 <lv_fs_init+0x10>)
 8015c58:	f000 f97e 	bl	8015f58 <lv_ll_init>
}
 8015c5c:	bf00      	nop
 8015c5e:	bd80      	pop	{r7, pc}
 8015c60:	2001bb70 	.word	0x2001bb70

08015c64 <lv_fs_open>:
 * @param path path to the file beginning with the driver letter (e.g. S:/folder/file.txt)
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 8015c64:	b590      	push	{r4, r7, lr}
 8015c66:	b089      	sub	sp, #36	; 0x24
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	60f8      	str	r0, [r7, #12]
 8015c6c:	60b9      	str	r1, [r7, #8]
 8015c6e:	4613      	mov	r3, r2
 8015c70:	71fb      	strb	r3, [r7, #7]
    file_p->drv    = NULL;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	2200      	movs	r2, #0
 8015c76:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	601a      	str	r2, [r3, #0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 8015c7e:	68bb      	ldr	r3, [r7, #8]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d101      	bne.n	8015c88 <lv_fs_open+0x24>
 8015c84:	230b      	movs	r3, #11
 8015c86:	e069      	b.n	8015d5c <lv_fs_open+0xf8>

    char letter = path[0];
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	77fb      	strb	r3, [r7, #31]

    file_p->drv = lv_fs_get_drv(letter);
 8015c8e:	7ffb      	ldrb	r3, [r7, #31]
 8015c90:	4618      	mov	r0, r3
 8015c92:	f000 f941 	bl	8015f18 <lv_fs_get_drv>
 8015c96:	4602      	mov	r2, r0
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	605a      	str	r2, [r3, #4]

    if(file_p->drv == NULL) {
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	685b      	ldr	r3, [r3, #4]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d104      	bne.n	8015cae <lv_fs_open+0x4a>
        file_p->file_d = NULL;
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	601a      	str	r2, [r3, #0]
        return LV_FS_RES_NOT_EX;
 8015caa:	2303      	movs	r3, #3
 8015cac:	e056      	b.n	8015d5c <lv_fs_open+0xf8>
    }

    if(file_p->drv->ready_cb != NULL) {
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	685b      	ldr	r3, [r3, #4]
 8015cb2:	689b      	ldr	r3, [r3, #8]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d014      	beq.n	8015ce2 <lv_fs_open+0x7e>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	685b      	ldr	r3, [r3, #4]
 8015cbc:	689b      	ldr	r3, [r3, #8]
 8015cbe:	68fa      	ldr	r2, [r7, #12]
 8015cc0:	6852      	ldr	r2, [r2, #4]
 8015cc2:	4610      	mov	r0, r2
 8015cc4:	4798      	blx	r3
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	f083 0301 	eor.w	r3, r3, #1
 8015ccc:	b2db      	uxtb	r3, r3
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d007      	beq.n	8015ce2 <lv_fs_open+0x7e>
            file_p->drv    = NULL;
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	605a      	str	r2, [r3, #4]
            file_p->file_d = NULL;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	2200      	movs	r2, #0
 8015cdc:	601a      	str	r2, [r3, #0]
            return LV_FS_RES_HW_ERR;
 8015cde:	2301      	movs	r3, #1
 8015ce0:	e03c      	b.n	8015d5c <lv_fs_open+0xf8>
        }
    }

    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	685b      	ldr	r3, [r3, #4]
 8015ce6:	885b      	ldrh	r3, [r3, #2]
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f000 fc37 	bl	801655c <lv_mem_alloc>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	601a      	str	r2, [r3, #0]
    lv_mem_assert(file_p->file_d);
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d100      	bne.n	8015cfe <lv_fs_open+0x9a>
 8015cfc:	e7fe      	b.n	8015cfc <lv_fs_open+0x98>
    if(file_p->file_d == NULL) {
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d104      	bne.n	8015d10 <lv_fs_open+0xac>
        file_p->drv = NULL;
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	2200      	movs	r2, #0
 8015d0a:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 8015d0c:	230a      	movs	r3, #10
 8015d0e:	e025      	b.n	8015d5c <lv_fs_open+0xf8>
    }

    if(file_p->drv->open_cb == NULL) {
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	685b      	ldr	r3, [r3, #4]
 8015d14:	68db      	ldr	r3, [r3, #12]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d101      	bne.n	8015d1e <lv_fs_open+0xba>
        return LV_FS_RES_NOT_IMP;
 8015d1a:	2309      	movs	r3, #9
 8015d1c:	e01e      	b.n	8015d5c <lv_fs_open+0xf8>
    }

    const char * real_path = lv_fs_get_real_path(path);
 8015d1e:	68b8      	ldr	r0, [r7, #8]
 8015d20:	f000 f8d8 	bl	8015ed4 <lv_fs_get_real_path>
 8015d24:	61b8      	str	r0, [r7, #24]
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	685b      	ldr	r3, [r3, #4]
 8015d2a:	68dc      	ldr	r4, [r3, #12]
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	6858      	ldr	r0, [r3, #4]
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	6819      	ldr	r1, [r3, #0]
 8015d34:	79fb      	ldrb	r3, [r7, #7]
 8015d36:	69ba      	ldr	r2, [r7, #24]
 8015d38:	47a0      	blx	r4
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	75fb      	strb	r3, [r7, #23]

    if(res != LV_FS_RES_OK) {
 8015d3e:	7dfb      	ldrb	r3, [r7, #23]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d00a      	beq.n	8015d5a <lv_fs_open+0xf6>
        lv_mem_free(file_p->file_d);
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f000 fc47 	bl	80165dc <lv_mem_free>
        file_p->file_d = NULL;
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	2200      	movs	r2, #0
 8015d52:	601a      	str	r2, [r3, #0]
        file_p->drv    = NULL;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2200      	movs	r2, #0
 8015d58:	605a      	str	r2, [r3, #4]
    }

    return res;
 8015d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	3724      	adds	r7, #36	; 0x24
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd90      	pop	{r4, r7, pc}

08015d64 <lv_fs_close>:
 * Close an already opened file
 * @param file_p pointer to a lv_fs_file_t variable
 * @return  LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b084      	sub	sp, #16
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	685b      	ldr	r3, [r3, #4]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d101      	bne.n	8015d78 <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 8015d74:	230b      	movs	r3, #11
 8015d76:	e020      	b.n	8015dba <lv_fs_close+0x56>
    }

    if(file_p->drv->close_cb == NULL) {
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	691b      	ldr	r3, [r3, #16]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d101      	bne.n	8015d86 <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 8015d82:	2309      	movs	r3, #9
 8015d84:	e019      	b.n	8015dba <lv_fs_close+0x56>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	691b      	ldr	r3, [r3, #16]
 8015d8c:	687a      	ldr	r2, [r7, #4]
 8015d8e:	6850      	ldr	r0, [r2, #4]
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	6812      	ldr	r2, [r2, #0]
 8015d94:	4611      	mov	r1, r2
 8015d96:	4798      	blx	r3
 8015d98:	4603      	mov	r3, r0
 8015d9a:	73fb      	strb	r3, [r7, #15]

    lv_mem_free(file_p->file_d); /*Clean up*/
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	4618      	mov	r0, r3
 8015da2:	f000 fc1b 	bl	80165dc <lv_mem_free>
    file_p->file_d = NULL;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	2200      	movs	r2, #0
 8015daa:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	2200      	movs	r2, #0
 8015db0:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	2200      	movs	r2, #0
 8015db6:	601a      	str	r2, [r3, #0]

    return res;
 8015db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3710      	adds	r7, #16
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}

08015dc2 <lv_fs_read>:
 * @param btr Bytes To Read
 * @param br the number of real read bytes (Bytes Read). NULL if unused.
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 8015dc2:	b590      	push	{r4, r7, lr}
 8015dc4:	b089      	sub	sp, #36	; 0x24
 8015dc6:	af02      	add	r7, sp, #8
 8015dc8:	60f8      	str	r0, [r7, #12]
 8015dca:	60b9      	str	r1, [r7, #8]
 8015dcc:	607a      	str	r2, [r7, #4]
 8015dce:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d002      	beq.n	8015ddc <lv_fs_read+0x1a>
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	2200      	movs	r2, #0
 8015dda:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d101      	bne.n	8015de8 <lv_fs_read+0x26>
 8015de4:	230b      	movs	r3, #11
 8015de6:	e01e      	b.n	8015e26 <lv_fs_read+0x64>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	685b      	ldr	r3, [r3, #4]
 8015dec:	699b      	ldr	r3, [r3, #24]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d101      	bne.n	8015df6 <lv_fs_read+0x34>
 8015df2:	2309      	movs	r3, #9
 8015df4:	e017      	b.n	8015e26 <lv_fs_read+0x64>

    uint32_t br_tmp = 0;
 8015df6:	2300      	movs	r3, #0
 8015df8:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	685b      	ldr	r3, [r3, #4]
 8015dfe:	699c      	ldr	r4, [r3, #24]
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	6858      	ldr	r0, [r3, #4]
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	6819      	ldr	r1, [r3, #0]
 8015e08:	f107 0310 	add.w	r3, r7, #16
 8015e0c:	9300      	str	r3, [sp, #0]
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	68ba      	ldr	r2, [r7, #8]
 8015e12:	47a0      	blx	r4
 8015e14:	4603      	mov	r3, r0
 8015e16:	75fb      	strb	r3, [r7, #23]
    if(br != NULL) *br = br_tmp;
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d002      	beq.n	8015e24 <lv_fs_read+0x62>
 8015e1e:	693a      	ldr	r2, [r7, #16]
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	601a      	str	r2, [r3, #0]

    return res;
 8015e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e26:	4618      	mov	r0, r3
 8015e28:	371c      	adds	r7, #28
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	bd90      	pop	{r4, r7, pc}

08015e2e <lv_fs_seek>:
 * @param file_p pointer to a lv_fs_file_t variable
 * @param pos the new position expressed in bytes index (0: start of file)
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos)
{
 8015e2e:	b580      	push	{r7, lr}
 8015e30:	b084      	sub	sp, #16
 8015e32:	af00      	add	r7, sp, #0
 8015e34:	6078      	str	r0, [r7, #4]
 8015e36:	6039      	str	r1, [r7, #0]
    if(file_p->drv == NULL) {
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	685b      	ldr	r3, [r3, #4]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d101      	bne.n	8015e44 <lv_fs_seek+0x16>
        return LV_FS_RES_INV_PARAM;
 8015e40:	230b      	movs	r3, #11
 8015e42:	e012      	b.n	8015e6a <lv_fs_seek+0x3c>
    }

    if(file_p->drv->seek_cb == NULL) {
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	685b      	ldr	r3, [r3, #4]
 8015e48:	6a1b      	ldr	r3, [r3, #32]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d101      	bne.n	8015e52 <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 8015e4e:	2309      	movs	r3, #9
 8015e50:	e00b      	b.n	8015e6a <lv_fs_seek+0x3c>
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	685b      	ldr	r3, [r3, #4]
 8015e56:	6a1b      	ldr	r3, [r3, #32]
 8015e58:	687a      	ldr	r2, [r7, #4]
 8015e5a:	6850      	ldr	r0, [r2, #4]
 8015e5c:	687a      	ldr	r2, [r7, #4]
 8015e5e:	6811      	ldr	r1, [r2, #0]
 8015e60:	683a      	ldr	r2, [r7, #0]
 8015e62:	4798      	blx	r3
 8015e64:	4603      	mov	r3, r0
 8015e66:	73fb      	strb	r3, [r7, #15]

    return res;
 8015e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3710      	adds	r7, #16
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
	...

08015e74 <lv_fs_get_ext>:
 * Return with the extension of the filename
 * @param fn string with a filename
 * @return pointer to the beginning extension or empty string if no extension
 */
const char * lv_fs_get_ext(const char * fn)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b084      	sub	sp, #16
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
    uint16_t i;
    for(i = strlen(fn); i > 0; i--) {
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f7ea f9b1 	bl	80001e4 <strlen>
 8015e82:	4603      	mov	r3, r0
 8015e84:	81fb      	strh	r3, [r7, #14]
 8015e86:	e01b      	b.n	8015ec0 <lv_fs_get_ext+0x4c>
        if(fn[i] == '.') {
 8015e88:	89fb      	ldrh	r3, [r7, #14]
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	4413      	add	r3, r2
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	2b2e      	cmp	r3, #46	; 0x2e
 8015e92:	d104      	bne.n	8015e9e <lv_fs_get_ext+0x2a>
            return &fn[i + 1];
 8015e94:	89fb      	ldrh	r3, [r7, #14]
 8015e96:	3301      	adds	r3, #1
 8015e98:	687a      	ldr	r2, [r7, #4]
 8015e9a:	4413      	add	r3, r2
 8015e9c:	e014      	b.n	8015ec8 <lv_fs_get_ext+0x54>
        } else if(fn[i] == '/' || fn[i] == '\\') {
 8015e9e:	89fb      	ldrh	r3, [r7, #14]
 8015ea0:	687a      	ldr	r2, [r7, #4]
 8015ea2:	4413      	add	r3, r2
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	2b2f      	cmp	r3, #47	; 0x2f
 8015ea8:	d005      	beq.n	8015eb6 <lv_fs_get_ext+0x42>
 8015eaa:	89fb      	ldrh	r3, [r7, #14]
 8015eac:	687a      	ldr	r2, [r7, #4]
 8015eae:	4413      	add	r3, r2
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	2b5c      	cmp	r3, #92	; 0x5c
 8015eb4:	d101      	bne.n	8015eba <lv_fs_get_ext+0x46>
            return ""; /*No extension if a '\' or '/' found*/
 8015eb6:	4b06      	ldr	r3, [pc, #24]	; (8015ed0 <lv_fs_get_ext+0x5c>)
 8015eb8:	e006      	b.n	8015ec8 <lv_fs_get_ext+0x54>
    for(i = strlen(fn); i > 0; i--) {
 8015eba:	89fb      	ldrh	r3, [r7, #14]
 8015ebc:	3b01      	subs	r3, #1
 8015ebe:	81fb      	strh	r3, [r7, #14]
 8015ec0:	89fb      	ldrh	r3, [r7, #14]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d1e0      	bne.n	8015e88 <lv_fs_get_ext+0x14>
        }
    }

    return ""; /*Empty string if no '.' in the file name. */
 8015ec6:	4b02      	ldr	r3, [pc, #8]	; (8015ed0 <lv_fs_get_ext+0x5c>)
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3710      	adds	r7, #16
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}
 8015ed0:	0802c8ac 	.word	0x0802c8ac

08015ed4 <lv_fs_get_real_path>:
 * Leave the driver letters and / or \ letters from beginning of the path
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	b083      	sub	sp, #12
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	607b      	str	r3, [r7, #4]

    while(*path != '\0') {
 8015ee2:	e00e      	b.n	8015f02 <lv_fs_get_real_path+0x2e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	781b      	ldrb	r3, [r3, #0]
 8015ee8:	2b3a      	cmp	r3, #58	; 0x3a
 8015eea:	d007      	beq.n	8015efc <lv_fs_get_real_path+0x28>
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	781b      	ldrb	r3, [r3, #0]
 8015ef0:	2b5c      	cmp	r3, #92	; 0x5c
 8015ef2:	d003      	beq.n	8015efc <lv_fs_get_real_path+0x28>
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	2b2f      	cmp	r3, #47	; 0x2f
 8015efa:	d106      	bne.n	8015f0a <lv_fs_get_real_path+0x36>
            path++;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	3301      	adds	r3, #1
 8015f00:	607b      	str	r3, [r7, #4]
    while(*path != '\0') {
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	781b      	ldrb	r3, [r3, #0]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d1ec      	bne.n	8015ee4 <lv_fs_get_real_path+0x10>
        } else {
            break;
        }
    }

    return path;
 8015f0a:	687b      	ldr	r3, [r7, #4]
}
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	370c      	adds	r7, #12
 8015f10:	46bd      	mov	sp, r7
 8015f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f16:	4770      	bx	lr

08015f18 <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
static lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b084      	sub	sp, #16
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	4603      	mov	r3, r0
 8015f20:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t * drv;

    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 8015f22:	480c      	ldr	r0, [pc, #48]	; (8015f54 <lv_fs_get_drv+0x3c>)
 8015f24:	f000 f99a 	bl	801625c <lv_ll_get_head>
 8015f28:	60f8      	str	r0, [r7, #12]
 8015f2a:	e00b      	b.n	8015f44 <lv_fs_get_drv+0x2c>
    {
        if(drv->letter == letter) {
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	79fa      	ldrb	r2, [r7, #7]
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d101      	bne.n	8015f3a <lv_fs_get_drv+0x22>
            return drv;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	e008      	b.n	8015f4c <lv_fs_get_drv+0x34>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 8015f3a:	68f9      	ldr	r1, [r7, #12]
 8015f3c:	4805      	ldr	r0, [pc, #20]	; (8015f54 <lv_fs_get_drv+0x3c>)
 8015f3e:	f000 f9b3 	bl	80162a8 <lv_ll_get_next>
 8015f42:	60f8      	str	r0, [r7, #12]
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d1f0      	bne.n	8015f2c <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 8015f4a:	2300      	movs	r3, #0
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	3710      	adds	r7, #16
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}
 8015f54:	2001bb70 	.word	0x2001bb70

08015f58 <lv_ll_init>:
 * Initialize linked list
 * @param ll_dsc pointer to ll_dsc variable
 * @param node_size the size of 1 node in bytes
 */
void lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 8015f58:	b480      	push	{r7}
 8015f5a:	b083      	sub	sp, #12
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2200      	movs	r2, #0
 8015f66:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	609a      	str	r2, [r3, #8]
        node_size = node_size & (~0x7);
        node_size += 8;
    }
#else
    /*Round the size up to 4*/
    if(node_size & 0x3) {
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	f003 0303 	and.w	r3, r3, #3
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d006      	beq.n	8015f86 <lv_ll_init+0x2e>
        node_size = node_size & (~0x3);
 8015f78:	683b      	ldr	r3, [r7, #0]
 8015f7a:	f023 0303 	bic.w	r3, r3, #3
 8015f7e:	603b      	str	r3, [r7, #0]
        node_size += 4;
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	3304      	adds	r3, #4
 8015f84:	603b      	str	r3, [r7, #0]
    }
#endif

    ll_p->n_size = node_size;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	683a      	ldr	r2, [r7, #0]
 8015f8a:	601a      	str	r2, [r3, #0]
}
 8015f8c:	bf00      	nop
 8015f8e:	370c      	adds	r7, #12
 8015f90:	46bd      	mov	sp, r7
 8015f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f96:	4770      	bx	lr

08015f98 <lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * lv_ll_ins_head(lv_ll_t * ll_p)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b084      	sub	sp, #16
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	3308      	adds	r3, #8
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f000 fad8 	bl	801655c <lv_mem_alloc>
 8015fac:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d020      	beq.n	8015ff6 <lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	68f9      	ldr	r1, [r7, #12]
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f000 fa08 	bl	80163ce <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	461a      	mov	r2, r3
 8015fc4:	68f9      	ldr	r1, [r7, #12]
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f000 fa27 	bl	801641a <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d006      	beq.n	8015fe2 <lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	685b      	ldr	r3, [r3, #4]
 8015fd8:	68fa      	ldr	r2, [r7, #12]
 8015fda:	4619      	mov	r1, r3
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f000 f9f6 	bl	80163ce <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	68fa      	ldr	r2, [r7, #12]
 8015fe6:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	689b      	ldr	r3, [r3, #8]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d102      	bne.n	8015ff6 <lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	68fa      	ldr	r2, [r7, #12]
 8015ff4:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	3710      	adds	r7, #16
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}

08016000 <lv_ll_ins_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the new head
 */
void * lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b084      	sub	sp, #16
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	6039      	str	r1, [r7, #0]
    lv_ll_node_t * n_new;
    lv_ll_node_t * n_prev;

    if(NULL == ll_p || NULL == n_act) return NULL;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d002      	beq.n	8016016 <lv_ll_ins_prev+0x16>
 8016010:	683b      	ldr	r3, [r7, #0]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d101      	bne.n	801601a <lv_ll_ins_prev+0x1a>
 8016016:	2300      	movs	r3, #0
 8016018:	e035      	b.n	8016086 <lv_ll_ins_prev+0x86>

    if(lv_ll_get_head(ll_p) == n_act) {
 801601a:	6878      	ldr	r0, [r7, #4]
 801601c:	f000 f91e 	bl	801625c <lv_ll_get_head>
 8016020:	4602      	mov	r2, r0
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	4293      	cmp	r3, r2
 8016026:	d108      	bne.n	801603a <lv_ll_ins_prev+0x3a>
        n_new = lv_ll_ins_head(ll_p);
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f7ff ffb5 	bl	8015f98 <lv_ll_ins_head>
 801602e:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d126      	bne.n	8016084 <lv_ll_ins_prev+0x84>
 8016036:	2300      	movs	r3, #0
 8016038:	e025      	b.n	8016086 <lv_ll_ins_prev+0x86>
    } else {
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	3308      	adds	r3, #8
 8016040:	4618      	mov	r0, r3
 8016042:	f000 fa8b 	bl	801655c <lv_mem_alloc>
 8016046:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d101      	bne.n	8016052 <lv_ll_ins_prev+0x52>
 801604e:	2300      	movs	r3, #0
 8016050:	e019      	b.n	8016086 <lv_ll_ins_prev+0x86>

        n_prev = lv_ll_get_prev(ll_p, n_act);
 8016052:	6839      	ldr	r1, [r7, #0]
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f000 f941 	bl	80162dc <lv_ll_get_prev>
 801605a:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_new);
 801605c:	68fa      	ldr	r2, [r7, #12]
 801605e:	68b9      	ldr	r1, [r7, #8]
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f000 f9da 	bl	801641a <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 8016066:	68ba      	ldr	r2, [r7, #8]
 8016068:	68f9      	ldr	r1, [r7, #12]
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f000 f9af 	bl	80163ce <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 8016070:	68fa      	ldr	r2, [r7, #12]
 8016072:	6839      	ldr	r1, [r7, #0]
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f000 f9aa 	bl	80163ce <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 801607a:	683a      	ldr	r2, [r7, #0]
 801607c:	68f9      	ldr	r1, [r7, #12]
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f000 f9cb 	bl	801641a <node_set_next>
    }

    return n_new;
 8016084:	68fb      	ldr	r3, [r7, #12]
}
 8016086:	4618      	mov	r0, r3
 8016088:	3710      	adds	r7, #16
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * lv_ll_ins_tail(lv_ll_t * ll_p)
{
 801608e:	b580      	push	{r7, lr}
 8016090:	b084      	sub	sp, #16
 8016092:	af00      	add	r7, sp, #0
 8016094:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	3308      	adds	r3, #8
 801609c:	4618      	mov	r0, r3
 801609e:	f000 fa5d 	bl	801655c <lv_mem_alloc>
 80160a2:	60f8      	str	r0, [r7, #12]
    if(n_new == NULL) return NULL;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d101      	bne.n	80160ae <lv_ll_ins_tail+0x20>
 80160aa:	2300      	movs	r3, #0
 80160ac:	e024      	b.n	80160f8 <lv_ll_ins_tail+0x6a>

    if(n_new != NULL) {
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d020      	beq.n	80160f6 <lv_ll_ins_tail+0x68>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 80160b4:	2200      	movs	r2, #0
 80160b6:	68f9      	ldr	r1, [r7, #12]
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f000 f9ae 	bl	801641a <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	689b      	ldr	r3, [r3, #8]
 80160c2:	461a      	mov	r2, r3
 80160c4:	68f9      	ldr	r1, [r7, #12]
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f000 f981 	bl	80163ce <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	689b      	ldr	r3, [r3, #8]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d006      	beq.n	80160e2 <lv_ll_ins_tail+0x54>
            node_set_next(ll_p, ll_p->tail, n_new);
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	689b      	ldr	r3, [r3, #8]
 80160d8:	68fa      	ldr	r2, [r7, #12]
 80160da:	4619      	mov	r1, r3
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 f99c 	bl	801641a <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	685b      	ldr	r3, [r3, #4]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d102      	bne.n	80160f6 <lv_ll_ins_tail+0x68>
            ll_p->head = n_new;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	68fa      	ldr	r2, [r7, #12]
 80160f4:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 80160f6:	68fb      	ldr	r3, [r7, #12]
}
 80160f8:	4618      	mov	r0, r3
 80160fa:	3710      	adds	r7, #16
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}

08016100 <lv_ll_rem>:
 * It does not free the the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void lv_ll_rem(lv_ll_t * ll_p, void * node_p)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b084      	sub	sp, #16
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
 8016108:	6039      	str	r1, [r7, #0]
    if(lv_ll_get_head(ll_p) == node_p) {
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f000 f8a6 	bl	801625c <lv_ll_get_head>
 8016110:	4602      	mov	r2, r0
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	4293      	cmp	r3, r2
 8016116:	d116      	bne.n	8016146 <lv_ll_rem+0x46>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 8016118:	6839      	ldr	r1, [r7, #0]
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f000 f8c4 	bl	80162a8 <lv_ll_get_next>
 8016120:	4602      	mov	r2, r0
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d103      	bne.n	8016136 <lv_ll_rem+0x36>
            ll_p->tail = NULL;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	2200      	movs	r2, #0
 8016132:	609a      	str	r2, [r3, #8]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);

        node_set_next(ll_p, n_prev, n_next);
        node_set_prev(ll_p, n_next, n_prev);
    }
}
 8016134:	e039      	b.n	80161aa <lv_ll_rem+0xaa>
            node_set_prev(ll_p, ll_p->head, NULL);
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	685b      	ldr	r3, [r3, #4]
 801613a:	2200      	movs	r2, #0
 801613c:	4619      	mov	r1, r3
 801613e:	6878      	ldr	r0, [r7, #4]
 8016140:	f000 f945 	bl	80163ce <node_set_prev>
}
 8016144:	e031      	b.n	80161aa <lv_ll_rem+0xaa>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f000 f89b 	bl	8016282 <lv_ll_get_tail>
 801614c:	4602      	mov	r2, r0
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	4293      	cmp	r3, r2
 8016152:	d116      	bne.n	8016182 <lv_ll_rem+0x82>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 8016154:	6839      	ldr	r1, [r7, #0]
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f000 f8c0 	bl	80162dc <lv_ll_get_prev>
 801615c:	4602      	mov	r2, r0
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	689b      	ldr	r3, [r3, #8]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d103      	bne.n	8016172 <lv_ll_rem+0x72>
            ll_p->head = NULL;
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	2200      	movs	r2, #0
 801616e:	605a      	str	r2, [r3, #4]
}
 8016170:	e01b      	b.n	80161aa <lv_ll_rem+0xaa>
            node_set_next(ll_p, ll_p->tail, NULL);
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	689b      	ldr	r3, [r3, #8]
 8016176:	2200      	movs	r2, #0
 8016178:	4619      	mov	r1, r3
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f000 f94d 	bl	801641a <node_set_next>
}
 8016180:	e013      	b.n	80161aa <lv_ll_rem+0xaa>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 8016182:	6839      	ldr	r1, [r7, #0]
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	f000 f8a9 	bl	80162dc <lv_ll_get_prev>
 801618a:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 801618c:	6839      	ldr	r1, [r7, #0]
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f000 f88a 	bl	80162a8 <lv_ll_get_next>
 8016194:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_next);
 8016196:	68ba      	ldr	r2, [r7, #8]
 8016198:	68f9      	ldr	r1, [r7, #12]
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	f000 f93d 	bl	801641a <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 80161a0:	68fa      	ldr	r2, [r7, #12]
 80161a2:	68b9      	ldr	r1, [r7, #8]
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f000 f912 	bl	80163ce <node_set_prev>
}
 80161aa:	bf00      	nop
 80161ac:	3710      	adds	r7, #16
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}

080161b2 <lv_ll_chg_list>:
 * @param node pointer to a node
 * @param head true: be the head in the new list
 *             false be the head in the new list
 */
void lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, bool head)
{
 80161b2:	b580      	push	{r7, lr}
 80161b4:	b084      	sub	sp, #16
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	60f8      	str	r0, [r7, #12]
 80161ba:	60b9      	str	r1, [r7, #8]
 80161bc:	607a      	str	r2, [r7, #4]
 80161be:	70fb      	strb	r3, [r7, #3]
    lv_ll_rem(ll_ori_p, node);
 80161c0:	6879      	ldr	r1, [r7, #4]
 80161c2:	68f8      	ldr	r0, [r7, #12]
 80161c4:	f7ff ff9c 	bl	8016100 <lv_ll_rem>

    if(head) {
 80161c8:	78fb      	ldrb	r3, [r7, #3]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d021      	beq.n	8016212 <lv_ll_chg_list+0x60>
        /*Set node as head*/
        node_set_prev(ll_new_p, node, NULL);
 80161ce:	2200      	movs	r2, #0
 80161d0:	6879      	ldr	r1, [r7, #4]
 80161d2:	68b8      	ldr	r0, [r7, #8]
 80161d4:	f000 f8fb 	bl	80163ce <node_set_prev>
        node_set_next(ll_new_p, node, ll_new_p->head);
 80161d8:	68bb      	ldr	r3, [r7, #8]
 80161da:	685b      	ldr	r3, [r3, #4]
 80161dc:	461a      	mov	r2, r3
 80161de:	6879      	ldr	r1, [r7, #4]
 80161e0:	68b8      	ldr	r0, [r7, #8]
 80161e2:	f000 f91a 	bl	801641a <node_set_next>

        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 80161e6:	68bb      	ldr	r3, [r7, #8]
 80161e8:	685b      	ldr	r3, [r3, #4]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d006      	beq.n	80161fc <lv_ll_chg_list+0x4a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	4619      	mov	r1, r3
 80161f6:	68b8      	ldr	r0, [r7, #8]
 80161f8:	f000 f8e9 	bl	80163ce <node_set_prev>
        }

        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	605a      	str	r2, [r3, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	689b      	ldr	r3, [r3, #8]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d124      	bne.n	8016254 <lv_ll_chg_list+0xa2>
            ll_new_p->tail = node;
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	609a      	str	r2, [r3, #8]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
            ll_new_p->head = node;
        }
    }
}
 8016210:	e020      	b.n	8016254 <lv_ll_chg_list+0xa2>
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 8016212:	68bb      	ldr	r3, [r7, #8]
 8016214:	689b      	ldr	r3, [r3, #8]
 8016216:	461a      	mov	r2, r3
 8016218:	6879      	ldr	r1, [r7, #4]
 801621a:	68b8      	ldr	r0, [r7, #8]
 801621c:	f000 f8d7 	bl	80163ce <node_set_prev>
        node_set_next(ll_new_p, node, NULL);
 8016220:	2200      	movs	r2, #0
 8016222:	6879      	ldr	r1, [r7, #4]
 8016224:	68b8      	ldr	r0, [r7, #8]
 8016226:	f000 f8f8 	bl	801641a <node_set_next>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	689b      	ldr	r3, [r3, #8]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d006      	beq.n	8016240 <lv_ll_chg_list+0x8e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	689b      	ldr	r3, [r3, #8]
 8016236:	687a      	ldr	r2, [r7, #4]
 8016238:	4619      	mov	r1, r3
 801623a:	68b8      	ldr	r0, [r7, #8]
 801623c:	f000 f8ed 	bl	801641a <node_set_next>
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	687a      	ldr	r2, [r7, #4]
 8016244:	609a      	str	r2, [r3, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	685b      	ldr	r3, [r3, #4]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d102      	bne.n	8016254 <lv_ll_chg_list+0xa2>
            ll_new_p->head = node;
 801624e:	68bb      	ldr	r3, [r7, #8]
 8016250:	687a      	ldr	r2, [r7, #4]
 8016252:	605a      	str	r2, [r3, #4]
}
 8016254:	bf00      	nop
 8016256:	3710      	adds	r7, #16
 8016258:	46bd      	mov	sp, r7
 801625a:	bd80      	pop	{r7, pc}

0801625c <lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_head(const lv_ll_t * ll_p)
{
 801625c:	b480      	push	{r7}
 801625e:	b085      	sub	sp, #20
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
    void * head = NULL;
 8016264:	2300      	movs	r3, #0
 8016266:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d002      	beq.n	8016274 <lv_ll_get_head+0x18>
        head = ll_p->head;
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	685b      	ldr	r3, [r3, #4]
 8016272:	60fb      	str	r3, [r7, #12]
    }

    return head;
 8016274:	68fb      	ldr	r3, [r7, #12]
}
 8016276:	4618      	mov	r0, r3
 8016278:	3714      	adds	r7, #20
 801627a:	46bd      	mov	sp, r7
 801627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016280:	4770      	bx	lr

08016282 <lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_tail(const lv_ll_t * ll_p)
{
 8016282:	b480      	push	{r7}
 8016284:	b085      	sub	sp, #20
 8016286:	af00      	add	r7, sp, #0
 8016288:	6078      	str	r0, [r7, #4]
    void * tail = NULL;
 801628a:	2300      	movs	r3, #0
 801628c:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d002      	beq.n	801629a <lv_ll_get_tail+0x18>
        tail = ll_p->tail;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	689b      	ldr	r3, [r3, #8]
 8016298:	60fb      	str	r3, [r7, #12]
    }

    return tail;
 801629a:	68fb      	ldr	r3, [r7, #12]
}
 801629c:	4618      	mov	r0, r3
 801629e:	3714      	adds	r7, #20
 80162a0:	46bd      	mov	sp, r7
 80162a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a6:	4770      	bx	lr

080162a8 <lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 80162a8:	b480      	push	{r7}
 80162aa:	b085      	sub	sp, #20
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	6039      	str	r1, [r7, #0]
    void * next = NULL;
 80162b2:	2300      	movs	r3, #0
 80162b4:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d008      	beq.n	80162ce <lv_ll_get_next+0x26>
        const lv_ll_node_t * n_act_d = n_act;
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	60fb      	str	r3, [r7, #12]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	3304      	adds	r3, #4
 80162c6:	68fa      	ldr	r2, [r7, #12]
 80162c8:	4413      	add	r3, r2
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	60bb      	str	r3, [r7, #8]
    }

    return next;
 80162ce:	68bb      	ldr	r3, [r7, #8]
}
 80162d0:	4618      	mov	r0, r3
 80162d2:	3714      	adds	r7, #20
 80162d4:	46bd      	mov	sp, r7
 80162d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162da:	4770      	bx	lr

080162dc <lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 80162dc:	b480      	push	{r7}
 80162de:	b085      	sub	sp, #20
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
 80162e4:	6039      	str	r1, [r7, #0]
    void * prev = NULL;
 80162e6:	2300      	movs	r3, #0
 80162e8:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d007      	beq.n	8016300 <lv_ll_get_prev+0x24>
        const lv_ll_node_t * n_act_d = n_act;
 80162f0:	683b      	ldr	r3, [r7, #0]
 80162f2:	60fb      	str	r3, [r7, #12]
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	68fa      	ldr	r2, [r7, #12]
 80162fa:	4413      	add	r3, r2
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	60bb      	str	r3, [r7, #8]
    }

    return prev;
 8016300:	68bb      	ldr	r3, [r7, #8]
}
 8016302:	4618      	mov	r0, r3
 8016304:	3714      	adds	r7, #20
 8016306:	46bd      	mov	sp, r7
 8016308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630c:	4770      	bx	lr

0801630e <lv_ll_move_before>:
 * @param ll_p pointer to a linked list
 * @param n_act pointer to node to move
 * @param n_after pointer to a node which should be after `n_act`
 */
void lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after)
{
 801630e:	b580      	push	{r7, lr}
 8016310:	b086      	sub	sp, #24
 8016312:	af00      	add	r7, sp, #0
 8016314:	60f8      	str	r0, [r7, #12]
 8016316:	60b9      	str	r1, [r7, #8]
 8016318:	607a      	str	r2, [r7, #4]
    if(n_act == n_after) return; /*Can't move before itself*/
 801631a:	68ba      	ldr	r2, [r7, #8]
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	429a      	cmp	r2, r3
 8016320:	d035      	beq.n	801638e <lv_ll_move_before+0x80>

    void * n_before;
    if(n_after != NULL)
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d005      	beq.n	8016334 <lv_ll_move_before+0x26>
        n_before = lv_ll_get_prev(ll_p, n_after);
 8016328:	6879      	ldr	r1, [r7, #4]
 801632a:	68f8      	ldr	r0, [r7, #12]
 801632c:	f7ff ffd6 	bl	80162dc <lv_ll_get_prev>
 8016330:	6178      	str	r0, [r7, #20]
 8016332:	e003      	b.n	801633c <lv_ll_move_before+0x2e>
    else
        n_before = lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
 8016334:	68f8      	ldr	r0, [r7, #12]
 8016336:	f7ff ffa4 	bl	8016282 <lv_ll_get_tail>
 801633a:	6178      	str	r0, [r7, #20]

    if(n_act == n_before) return; /*Already before `n_after`*/
 801633c:	68ba      	ldr	r2, [r7, #8]
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	429a      	cmp	r2, r3
 8016342:	d026      	beq.n	8016392 <lv_ll_move_before+0x84>

    /*It's much easier to remove from the list and add again*/
    lv_ll_rem(ll_p, n_act);
 8016344:	68b9      	ldr	r1, [r7, #8]
 8016346:	68f8      	ldr	r0, [r7, #12]
 8016348:	f7ff feda 	bl	8016100 <lv_ll_rem>

    /*Add again by setting the prev. and next nodes*/
    node_set_next(ll_p, n_before, n_act);
 801634c:	68ba      	ldr	r2, [r7, #8]
 801634e:	6979      	ldr	r1, [r7, #20]
 8016350:	68f8      	ldr	r0, [r7, #12]
 8016352:	f000 f862 	bl	801641a <node_set_next>
    node_set_prev(ll_p, n_act, n_before);
 8016356:	697a      	ldr	r2, [r7, #20]
 8016358:	68b9      	ldr	r1, [r7, #8]
 801635a:	68f8      	ldr	r0, [r7, #12]
 801635c:	f000 f837 	bl	80163ce <node_set_prev>
    node_set_prev(ll_p, n_after, n_act);
 8016360:	68ba      	ldr	r2, [r7, #8]
 8016362:	6879      	ldr	r1, [r7, #4]
 8016364:	68f8      	ldr	r0, [r7, #12]
 8016366:	f000 f832 	bl	80163ce <node_set_prev>
    node_set_next(ll_p, n_act, n_after);
 801636a:	687a      	ldr	r2, [r7, #4]
 801636c:	68b9      	ldr	r1, [r7, #8]
 801636e:	68f8      	ldr	r0, [r7, #12]
 8016370:	f000 f853 	bl	801641a <node_set_next>

    /*If `n_act` was moved before NULL then it become the new tail*/
    if(n_after == NULL) ll_p->tail = n_act;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d102      	bne.n	8016380 <lv_ll_move_before+0x72>
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	68ba      	ldr	r2, [r7, #8]
 801637e:	609a      	str	r2, [r3, #8]

    /*If `n_act` was moved before `NULL` then it's the new head*/
    if(n_before == NULL) ll_p->head = n_act;
 8016380:	697b      	ldr	r3, [r7, #20]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d106      	bne.n	8016394 <lv_ll_move_before+0x86>
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	68ba      	ldr	r2, [r7, #8]
 801638a:	605a      	str	r2, [r3, #4]
 801638c:	e002      	b.n	8016394 <lv_ll_move_before+0x86>
    if(n_act == n_after) return; /*Can't move before itself*/
 801638e:	bf00      	nop
 8016390:	e000      	b.n	8016394 <lv_ll_move_before+0x86>
    if(n_act == n_before) return; /*Already before `n_after`*/
 8016392:	bf00      	nop
}
 8016394:	3718      	adds	r7, #24
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}

0801639a <lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool lv_ll_is_empty(lv_ll_t * ll_p)
{
 801639a:	b480      	push	{r7}
 801639c:	b083      	sub	sp, #12
 801639e:	af00      	add	r7, sp, #0
 80163a0:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d101      	bne.n	80163ac <lv_ll_is_empty+0x12>
 80163a8:	2301      	movs	r3, #1
 80163aa:	e00a      	b.n	80163c2 <lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d105      	bne.n	80163c0 <lv_ll_is_empty+0x26>
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	689b      	ldr	r3, [r3, #8]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d101      	bne.n	80163c0 <lv_ll_is_empty+0x26>
 80163bc:	2301      	movs	r3, #1
 80163be:	e000      	b.n	80163c2 <lv_ll_is_empty+0x28>

    return false;
 80163c0:	2300      	movs	r3, #0
}
 80163c2:	4618      	mov	r0, r3
 80163c4:	370c      	adds	r7, #12
 80163c6:	46bd      	mov	sp, r7
 80163c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163cc:	4770      	bx	lr

080163ce <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 80163ce:	b580      	push	{r7, lr}
 80163d0:	b086      	sub	sp, #24
 80163d2:	af00      	add	r7, sp, #0
 80163d4:	60f8      	str	r0, [r7, #12]
 80163d6:	60b9      	str	r1, [r7, #8]
 80163d8:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d018      	beq.n	8016412 <node_set_prev+0x44>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 80163e0:	2304      	movs	r3, #4
 80163e2:	617b      	str	r3, [r7, #20]
    if(prev)
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d009      	beq.n	80163fe <node_set_prev+0x30>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	68ba      	ldr	r2, [r7, #8]
 80163f0:	4413      	add	r3, r2
 80163f2:	1d39      	adds	r1, r7, #4
 80163f4:	697a      	ldr	r2, [r7, #20]
 80163f6:	4618      	mov	r0, r3
 80163f8:	f013 fcdc 	bl	8029db4 <memcpy>
 80163fc:	e00a      	b.n	8016414 <node_set_prev+0x46>
    else
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	68ba      	ldr	r2, [r7, #8]
 8016404:	4413      	add	r3, r2
 8016406:	697a      	ldr	r2, [r7, #20]
 8016408:	2100      	movs	r1, #0
 801640a:	4618      	mov	r0, r3
 801640c:	f013 fcdd 	bl	8029dca <memset>
 8016410:	e000      	b.n	8016414 <node_set_prev+0x46>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8016412:	bf00      	nop
}
 8016414:	3718      	adds	r7, #24
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}

0801641a <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 801641a:	b580      	push	{r7, lr}
 801641c:	b086      	sub	sp, #24
 801641e:	af00      	add	r7, sp, #0
 8016420:	60f8      	str	r0, [r7, #12]
 8016422:	60b9      	str	r1, [r7, #8]
 8016424:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d01a      	beq.n	8016462 <node_set_next+0x48>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 801642c:	2304      	movs	r3, #4
 801642e:	617b      	str	r3, [r7, #20]
    if(next)
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d00a      	beq.n	801644c <node_set_next+0x32>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	3304      	adds	r3, #4
 801643c:	68ba      	ldr	r2, [r7, #8]
 801643e:	4413      	add	r3, r2
 8016440:	1d39      	adds	r1, r7, #4
 8016442:	697a      	ldr	r2, [r7, #20]
 8016444:	4618      	mov	r0, r3
 8016446:	f013 fcb5 	bl	8029db4 <memcpy>
 801644a:	e00b      	b.n	8016464 <node_set_next+0x4a>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	3304      	adds	r3, #4
 8016452:	68ba      	ldr	r2, [r7, #8]
 8016454:	4413      	add	r3, r2
 8016456:	697a      	ldr	r2, [r7, #20]
 8016458:	2100      	movs	r1, #0
 801645a:	4618      	mov	r0, r3
 801645c:	f013 fcb5 	bl	8029dca <memset>
 8016460:	e000      	b.n	8016464 <node_set_next+0x4a>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8016462:	bf00      	nop
}
 8016464:	3718      	adds	r7, #24
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}
	...

0801646c <lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
int16_t lv_trigo_sin(int16_t angle)
{
 801646c:	b480      	push	{r7}
 801646e:	b085      	sub	sp, #20
 8016470:	af00      	add	r7, sp, #0
 8016472:	4603      	mov	r3, r0
 8016474:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 8016476:	2300      	movs	r3, #0
 8016478:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 801647a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801647e:	4a31      	ldr	r2, [pc, #196]	; (8016544 <lv_trigo_sin+0xd8>)
 8016480:	fb82 1203 	smull	r1, r2, r2, r3
 8016484:	441a      	add	r2, r3
 8016486:	1211      	asrs	r1, r2, #8
 8016488:	17da      	asrs	r2, r3, #31
 801648a:	1a8a      	subs	r2, r1, r2
 801648c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8016490:	fb01 f202 	mul.w	r2, r1, r2
 8016494:	1a9b      	subs	r3, r3, r2
 8016496:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 8016498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801649c:	2b00      	cmp	r3, #0
 801649e:	da04      	bge.n	80164aa <lv_trigo_sin+0x3e>
 80164a0:	88fb      	ldrh	r3, [r7, #6]
 80164a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80164a6:	b29b      	uxth	r3, r3
 80164a8:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 80164aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164ae:	2b59      	cmp	r3, #89	; 0x59
 80164b0:	dc06      	bgt.n	80164c0 <lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 80164b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164b6:	4a24      	ldr	r2, [pc, #144]	; (8016548 <lv_trigo_sin+0xdc>)
 80164b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80164bc:	81fb      	strh	r3, [r7, #14]
 80164be:	e038      	b.n	8016532 <lv_trigo_sin+0xc6>
    } else if(angle >= 90 && angle < 180) {
 80164c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164c4:	2b59      	cmp	r3, #89	; 0x59
 80164c6:	dd0f      	ble.n	80164e8 <lv_trigo_sin+0x7c>
 80164c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164cc:	2bb3      	cmp	r3, #179	; 0xb3
 80164ce:	dc0b      	bgt.n	80164e8 <lv_trigo_sin+0x7c>
        angle = 180 - angle;
 80164d0:	88fb      	ldrh	r3, [r7, #6]
 80164d2:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80164d6:	b29b      	uxth	r3, r3
 80164d8:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 80164da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164de:	4a1a      	ldr	r2, [pc, #104]	; (8016548 <lv_trigo_sin+0xdc>)
 80164e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80164e4:	81fb      	strh	r3, [r7, #14]
 80164e6:	e024      	b.n	8016532 <lv_trigo_sin+0xc6>
    } else if(angle >= 180 && angle < 270) {
 80164e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164ec:	2bb3      	cmp	r3, #179	; 0xb3
 80164ee:	dd12      	ble.n	8016516 <lv_trigo_sin+0xaa>
 80164f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164f4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80164f8:	da0d      	bge.n	8016516 <lv_trigo_sin+0xaa>
        angle = angle - 180;
 80164fa:	88fb      	ldrh	r3, [r7, #6]
 80164fc:	3bb4      	subs	r3, #180	; 0xb4
 80164fe:	b29b      	uxth	r3, r3
 8016500:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8016502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016506:	4a10      	ldr	r2, [pc, #64]	; (8016548 <lv_trigo_sin+0xdc>)
 8016508:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801650c:	b29b      	uxth	r3, r3
 801650e:	425b      	negs	r3, r3
 8016510:	b29b      	uxth	r3, r3
 8016512:	81fb      	strh	r3, [r7, #14]
 8016514:	e00d      	b.n	8016532 <lv_trigo_sin+0xc6>
    } else { /*angle >=270*/
        angle = 360 - angle;
 8016516:	88fb      	ldrh	r3, [r7, #6]
 8016518:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801651c:	b29b      	uxth	r3, r3
 801651e:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8016520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016524:	4a08      	ldr	r2, [pc, #32]	; (8016548 <lv_trigo_sin+0xdc>)
 8016526:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801652a:	b29b      	uxth	r3, r3
 801652c:	425b      	negs	r3, r3
 801652e:	b29b      	uxth	r3, r3
 8016530:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 8016532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8016536:	4618      	mov	r0, r3
 8016538:	3714      	adds	r7, #20
 801653a:	46bd      	mov	sp, r7
 801653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016540:	4770      	bx	lr
 8016542:	bf00      	nop
 8016544:	b60b60b7 	.word	0xb60b60b7
 8016548:	200026e4 	.word	0x200026e4

0801654c <lv_mem_init>:

/**
 * Initiaiize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 801654c:	b480      	push	{r7}
 801654e:	af00      	add	r7, sp, #0
    lv_mem_ent_t * full = (lv_mem_ent_t *)work_mem;
    full->header.s.used = 0;
    /*The total mem size id reduced by the first header and the close patterns */
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
#endif
}
 8016550:	bf00      	nop
 8016552:	46bd      	mov	sp, r7
 8016554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016558:	4770      	bx	lr
	...

0801655c <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(uint32_t size)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b084      	sub	sp, #16
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
    if(size == 0) {
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d101      	bne.n	801656e <lv_mem_alloc+0x12>
        return &zero_mem;
 801656a:	4b1b      	ldr	r3, [pc, #108]	; (80165d8 <lv_mem_alloc+0x7c>)
 801656c:	e030      	b.n	80165d0 <lv_mem_alloc+0x74>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	f003 0303 	and.w	r3, r3, #3
 8016574:	2b00      	cmp	r3, #0
 8016576:	d006      	beq.n	8016586 <lv_mem_alloc+0x2a>
        size = size & (~0x3);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f023 0303 	bic.w	r3, r3, #3
 801657e:	607b      	str	r3, [r7, #4]
        size += 4;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	3304      	adds	r3, #4
 8016584:	607b      	str	r3, [r7, #4]
    }
#endif
    void * alloc = NULL;
 8016586:	2300      	movs	r3, #0
 8016588:	60fb      	str	r3, [r7, #12]
/*Use custom, user defined malloc function*/
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	3304      	adds	r3, #4
 801658e:	4618      	mov	r0, r3
 8016590:	f013 fc00 	bl	8029d94 <malloc>
 8016594:	4603      	mov	r3, r0
 8016596:	60fb      	str	r3, [r7, #12]
    if(alloc != NULL) {
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d00f      	beq.n	80165be <lv_mem_alloc+0x62>
        ((lv_mem_ent_t *)alloc)->header.s.d_size = size;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80165a4:	68fa      	ldr	r2, [r7, #12]
 80165a6:	6813      	ldr	r3, [r2, #0]
 80165a8:	f361 035f 	bfi	r3, r1, #1, #31
 80165ac:	6013      	str	r3, [r2, #0]
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
 80165ae:	68fa      	ldr	r2, [r7, #12]
 80165b0:	7813      	ldrb	r3, [r2, #0]
 80165b2:	f043 0301 	orr.w	r3, r3, #1
 80165b6:	7013      	strb	r3, [r2, #0]

        alloc = &((lv_mem_ent_t *)alloc)->first_data;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	3304      	adds	r3, #4
 80165bc:	60fb      	str	r3, [r7, #12]
    }
#endif                /* LV_ENABLE_GC */
#endif                /* LV_MEM_CUSTOM */

#if LV_MEM_ADD_JUNK
    if(alloc != NULL) memset(alloc, 0xaa, size);
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d004      	beq.n	80165ce <lv_mem_alloc+0x72>
 80165c4:	687a      	ldr	r2, [r7, #4]
 80165c6:	21aa      	movs	r1, #170	; 0xaa
 80165c8:	68f8      	ldr	r0, [r7, #12]
 80165ca:	f013 fbfe 	bl	8029dca <memset>
#endif

    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return alloc;
 80165ce:	68fb      	ldr	r3, [r7, #12]
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	3710      	adds	r7, #16
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}
 80165d8:	20017790 	.word	0x20017790

080165dc <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b084      	sub	sp, #16
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
    if(data == &zero_mem) return;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	4a10      	ldr	r2, [pc, #64]	; (8016628 <lv_mem_free+0x4c>)
 80165e8:	4293      	cmp	r3, r2
 80165ea:	d017      	beq.n	801661c <lv_mem_free+0x40>
    if(data == NULL) return;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d016      	beq.n	8016620 <lv_mem_free+0x44>

#if LV_MEM_ADD_JUNK
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f000 f858 	bl	80166a8 <lv_mem_get_size>
 80165f8:	4603      	mov	r3, r0
 80165fa:	461a      	mov	r2, r3
 80165fc:	21bb      	movs	r1, #187	; 0xbb
 80165fe:	6878      	ldr	r0, [r7, #4]
 8016600:	f013 fbe3 	bl	8029dca <memset>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	3b04      	subs	r3, #4
 8016608:	60fb      	str	r3, [r7, #12]
    e->header.s.used = 0;
 801660a:	68fa      	ldr	r2, [r7, #12]
 801660c:	7813      	ldrb	r3, [r2, #0]
 801660e:	f36f 0300 	bfc	r3, #0, #1
 8016612:	7013      	strb	r3, [r2, #0]
        e_next = ent_get_next(e_next);
    }
#endif
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
 8016614:	68f8      	ldr	r0, [r7, #12]
 8016616:	f013 fbc5 	bl	8029da4 <free>
 801661a:	e002      	b.n	8016622 <lv_mem_free+0x46>
    if(data == &zero_mem) return;
 801661c:	bf00      	nop
 801661e:	e000      	b.n	8016622 <lv_mem_free+0x46>
    if(data == NULL) return;
 8016620:	bf00      	nop
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
 8016622:	3710      	adds	r7, #16
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}
 8016628:	20017790 	.word	0x20017790

0801662c <lv_mem_realloc>:
 */

#if LV_ENABLE_GC == 0

void * lv_mem_realloc(void * data_p, uint32_t new_size)
{
 801662c:	b580      	push	{r7, lr}
 801662e:	b086      	sub	sp, #24
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
 8016634:	6039      	str	r1, [r7, #0]
    /*data_p could be previously freed pointer (in this case it is invalid)*/
    if(data_p != NULL) {
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d00b      	beq.n	8016654 <lv_mem_realloc+0x28>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	3b04      	subs	r3, #4
 8016640:	617b      	str	r3, [r7, #20]
        if(e->header.s.used == 0) {
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	f003 0301 	and.w	r3, r3, #1
 801664a:	b2db      	uxtb	r3, r3
 801664c:	2b00      	cmp	r3, #0
 801664e:	d101      	bne.n	8016654 <lv_mem_realloc+0x28>
            data_p = NULL;
 8016650:	2300      	movs	r3, #0
 8016652:	607b      	str	r3, [r7, #4]
        }
    }

    uint32_t old_size = lv_mem_get_size(data_p);
 8016654:	6878      	ldr	r0, [r7, #4]
 8016656:	f000 f827 	bl	80166a8 <lv_mem_get_size>
 801665a:	6138      	str	r0, [r7, #16]
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 801665c:	693a      	ldr	r2, [r7, #16]
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	429a      	cmp	r2, r3
 8016662:	d101      	bne.n	8016668 <lv_mem_realloc+0x3c>
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	e01a      	b.n	801669e <lv_mem_realloc+0x72>
        return &e->first_data;
    }
#endif

    void * new_p;
    new_p = lv_mem_alloc(new_size);
 8016668:	6838      	ldr	r0, [r7, #0]
 801666a:	f7ff ff77 	bl	801655c <lv_mem_alloc>
 801666e:	60f8      	str	r0, [r7, #12]

    if(new_p != NULL && data_p != NULL) {
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d012      	beq.n	801669c <lv_mem_realloc+0x70>
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d00f      	beq.n	801669c <lv_mem_realloc+0x70>
        /*Copy the old data to the new. Use the smaller size*/
        if(old_size != 0) {
 801667c:	693b      	ldr	r3, [r7, #16]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d00c      	beq.n	801669c <lv_mem_realloc+0x70>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 8016682:	693a      	ldr	r2, [r7, #16]
 8016684:	683b      	ldr	r3, [r7, #0]
 8016686:	4293      	cmp	r3, r2
 8016688:	bf28      	it	cs
 801668a:	4613      	movcs	r3, r2
 801668c:	461a      	mov	r2, r3
 801668e:	6879      	ldr	r1, [r7, #4]
 8016690:	68f8      	ldr	r0, [r7, #12]
 8016692:	f013 fb8f 	bl	8029db4 <memcpy>
            lv_mem_free(data_p);
 8016696:	6878      	ldr	r0, [r7, #4]
 8016698:	f7ff ffa0 	bl	80165dc <lv_mem_free>
        }
    }

    if(new_p == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return new_p;
 801669c:	68fb      	ldr	r3, [r7, #12]
}
 801669e:	4618      	mov	r0, r3
 80166a0:	3718      	adds	r7, #24
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}
	...

080166a8 <lv_mem_get_size>:
 */

#if LV_ENABLE_GC == 0

uint32_t lv_mem_get_size(const void * data)
{
 80166a8:	b480      	push	{r7}
 80166aa:	b085      	sub	sp, #20
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
    if(data == NULL) return 0;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d101      	bne.n	80166ba <lv_mem_get_size+0x12>
 80166b6:	2300      	movs	r3, #0
 80166b8:	e00c      	b.n	80166d4 <lv_mem_get_size+0x2c>
    if(data == &zero_mem) return 0;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	4a08      	ldr	r2, [pc, #32]	; (80166e0 <lv_mem_get_size+0x38>)
 80166be:	4293      	cmp	r3, r2
 80166c0:	d101      	bne.n	80166c6 <lv_mem_get_size+0x1e>
 80166c2:	2300      	movs	r3, #0
 80166c4:	e006      	b.n	80166d4 <lv_mem_get_size+0x2c>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	3b04      	subs	r3, #4
 80166ca:	60fb      	str	r3, [r7, #12]

    return e->header.s.d_size;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	f3c3 035e 	ubfx	r3, r3, #1, #31
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	3714      	adds	r7, #20
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr
 80166e0:	20017790 	.word	0x20017790

080166e4 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 80166e8:	2114      	movs	r1, #20
 80166ea:	4804      	ldr	r0, [pc, #16]	; (80166fc <lv_task_core_init+0x18>)
 80166ec:	f7ff fc34 	bl	8015f58 <lv_ll_init>

    /*Initially enable the lv_task handling*/
    lv_task_enable(true);
 80166f0:	2001      	movs	r0, #1
 80166f2:	f000 fa23 	bl	8016b3c <lv_task_enable>
}
 80166f6:	bf00      	nop
 80166f8:	bd80      	pop	{r7, pc}
 80166fa:	bf00      	nop
 80166fc:	2001bb3c 	.word	0x2001bb3c

08016700 <lv_task_handler>:

/**
 * Call it  periodically to handle lv_tasks.
 */
LV_ATTRIBUTE_TASK_HANDLER void lv_task_handler(void)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b084      	sub	sp, #16
 8016704:	af00      	add	r7, sp, #0
    LV_LOG_TRACE("lv_task_handler started");

    /*Avoid concurrent running of the task handler*/
    static bool task_handler_mutex = false;
    if(task_handler_mutex) return;
 8016706:	4b6b      	ldr	r3, [pc, #428]	; (80168b4 <lv_task_handler+0x1b4>)
 8016708:	781b      	ldrb	r3, [r3, #0]
 801670a:	2b00      	cmp	r3, #0
 801670c:	f040 80cd 	bne.w	80168aa <lv_task_handler+0x1aa>
    task_handler_mutex = true;
 8016710:	4b68      	ldr	r3, [pc, #416]	; (80168b4 <lv_task_handler+0x1b4>)
 8016712:	2201      	movs	r2, #1
 8016714:	701a      	strb	r2, [r3, #0]

    static uint32_t idle_period_start = 0;
    static uint32_t handler_start     = 0;
    static uint32_t busy_time         = 0;

    if(lv_task_run == false) {
 8016716:	4b68      	ldr	r3, [pc, #416]	; (80168b8 <lv_task_handler+0x1b8>)
 8016718:	781b      	ldrb	r3, [r3, #0]
 801671a:	f083 0301 	eor.w	r3, r3, #1
 801671e:	b2db      	uxtb	r3, r3
 8016720:	2b00      	cmp	r3, #0
 8016722:	d003      	beq.n	801672c <lv_task_handler+0x2c>
        task_handler_mutex = false; /*Release mutex*/
 8016724:	4b63      	ldr	r3, [pc, #396]	; (80168b4 <lv_task_handler+0x1b4>)
 8016726:	2200      	movs	r2, #0
 8016728:	701a      	strb	r2, [r3, #0]
        return;
 801672a:	e0bf      	b.n	80168ac <lv_task_handler+0x1ac>
    }

    handler_start = lv_tick_get();
 801672c:	f7fe fdf0 	bl	8015310 <lv_tick_get>
 8016730:	4602      	mov	r2, r0
 8016732:	4b62      	ldr	r3, [pc, #392]	; (80168bc <lv_task_handler+0x1bc>)
 8016734:	601a      	str	r2, [r3, #0]

    /* Run all task from the highest to the lowest priority
     * If a lower priority task is executed check task again from the highest priority
     * but on the priority of executed tasks don't run tasks before the executed*/
    lv_task_t * task_interrupter = NULL;
 8016736:	2300      	movs	r3, #0
 8016738:	60fb      	str	r3, [r7, #12]
    lv_task_t * next;
    bool end_flag;
    do {
        end_flag                 = true;
 801673a:	2301      	movs	r3, #1
 801673c:	72fb      	strb	r3, [r7, #11]
        task_deleted             = false;
 801673e:	4b60      	ldr	r3, [pc, #384]	; (80168c0 <lv_task_handler+0x1c0>)
 8016740:	2200      	movs	r2, #0
 8016742:	701a      	strb	r2, [r3, #0]
        task_created             = false;
 8016744:	4b5f      	ldr	r3, [pc, #380]	; (80168c4 <lv_task_handler+0x1c4>)
 8016746:	2200      	movs	r2, #0
 8016748:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801674a:	485f      	ldr	r0, [pc, #380]	; (80168c8 <lv_task_handler+0x1c8>)
 801674c:	f7ff fd86 	bl	801625c <lv_ll_get_head>
 8016750:	4602      	mov	r2, r0
 8016752:	4b5e      	ldr	r3, [pc, #376]	; (80168cc <lv_task_handler+0x1cc>)
 8016754:	601a      	str	r2, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8016756:	e05e      	b.n	8016816 <lv_task_handler+0x116>
            /* The task might be deleted if it runs only once ('once = 1')
             * So get next element until the current is surely valid*/
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8016758:	4b5c      	ldr	r3, [pc, #368]	; (80168cc <lv_task_handler+0x1cc>)
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	4619      	mov	r1, r3
 801675e:	485a      	ldr	r0, [pc, #360]	; (80168c8 <lv_task_handler+0x1c8>)
 8016760:	f7ff fda2 	bl	80162a8 <lv_ll_get_next>
 8016764:	6078      	str	r0, [r7, #4]

            /*We reach priority of the turned off task. There is nothing more to do.*/
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 8016766:	4b59      	ldr	r3, [pc, #356]	; (80168cc <lv_task_handler+0x1cc>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	7c1b      	ldrb	r3, [r3, #16]
 801676c:	f003 0307 	and.w	r3, r3, #7
 8016770:	b2db      	uxtb	r3, r3
 8016772:	2b00      	cmp	r3, #0
 8016774:	d054      	beq.n	8016820 <lv_task_handler+0x120>
                break;
            }

            /*Here is the interrupter task. Don't execute it again.*/
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 8016776:	4b55      	ldr	r3, [pc, #340]	; (80168cc <lv_task_handler+0x1cc>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	68fa      	ldr	r2, [r7, #12]
 801677c:	429a      	cmp	r2, r3
 801677e:	d105      	bne.n	801678c <lv_task_handler+0x8c>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 8016780:	2300      	movs	r3, #0
 8016782:	60fb      	str	r3, [r7, #12]
                                            the interrupter is not interesting anymore*/
                LV_GC_ROOT(_lv_task_act) = next;
 8016784:	4a51      	ldr	r2, [pc, #324]	; (80168cc <lv_task_handler+0x1cc>)
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	6013      	str	r3, [r2, #0]
                continue; /*Load the next task*/
 801678a:	e044      	b.n	8016816 <lv_task_handler+0x116>
            }

            /*Just try to run the tasks with highest priority.*/
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 801678c:	4b4f      	ldr	r3, [pc, #316]	; (80168cc <lv_task_handler+0x1cc>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	7c1b      	ldrb	r3, [r3, #16]
 8016792:	f003 0307 	and.w	r3, r3, #7
 8016796:	b2db      	uxtb	r3, r3
 8016798:	2b05      	cmp	r3, #5
 801679a:	d105      	bne.n	80167a8 <lv_task_handler+0xa8>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 801679c:	4b4b      	ldr	r3, [pc, #300]	; (80168cc <lv_task_handler+0x1cc>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	4618      	mov	r0, r3
 80167a2:	f000 f9db 	bl	8016b5c <lv_task_exec>
 80167a6:	e02b      	b.n	8016800 <lv_task_handler+0x100>
            }
            /*Tasks with higher priority then the interrupted shall be run in every case*/
            else if(task_interrupter) {
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d01a      	beq.n	80167e4 <lv_task_handler+0xe4>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 80167ae:	4b47      	ldr	r3, [pc, #284]	; (80168cc <lv_task_handler+0x1cc>)
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	7c1b      	ldrb	r3, [r3, #16]
 80167b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80167b8:	b2da      	uxtb	r2, r3
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	7c1b      	ldrb	r3, [r3, #16]
 80167be:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d91b      	bls.n	8016800 <lv_task_handler+0x100>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 80167c8:	4b40      	ldr	r3, [pc, #256]	; (80168cc <lv_task_handler+0x1cc>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	4618      	mov	r0, r3
 80167ce:	f000 f9c5 	bl	8016b5c <lv_task_exec>
 80167d2:	4603      	mov	r3, r0
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d013      	beq.n	8016800 <lv_task_handler+0x100>
                        task_interrupter =
 80167d8:	4b3c      	ldr	r3, [pc, #240]	; (80168cc <lv_task_handler+0x1cc>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	60fb      	str	r3, [r7, #12]
                            LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
                        end_flag = false;
 80167de:	2300      	movs	r3, #0
 80167e0:	72fb      	strb	r3, [r7, #11]
                        break;
 80167e2:	e022      	b.n	801682a <lv_task_handler+0x12a>
                }
            }
            /* It is no interrupter task or we already reached it earlier.
             * Just run the remaining tasks*/
            else {
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 80167e4:	4b39      	ldr	r3, [pc, #228]	; (80168cc <lv_task_handler+0x1cc>)
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	4618      	mov	r0, r3
 80167ea:	f000 f9b7 	bl	8016b5c <lv_task_exec>
 80167ee:	4603      	mov	r3, r0
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d005      	beq.n	8016800 <lv_task_handler+0x100>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 80167f4:	4b35      	ldr	r3, [pc, #212]	; (80168cc <lv_task_handler+0x1cc>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	60fb      	str	r3, [r7, #12]
                    end_flag         = false;
 80167fa:	2300      	movs	r3, #0
 80167fc:	72fb      	strb	r3, [r7, #11]
                    break;
 80167fe:	e014      	b.n	801682a <lv_task_handler+0x12a>
                }
            }

            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 8016800:	4b2f      	ldr	r3, [pc, #188]	; (80168c0 <lv_task_handler+0x1c0>)
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d10d      	bne.n	8016824 <lv_task_handler+0x124>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8016808:	4b2e      	ldr	r3, [pc, #184]	; (80168c4 <lv_task_handler+0x1c4>)
 801680a:	781b      	ldrb	r3, [r3, #0]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d10b      	bne.n	8016828 <lv_task_handler+0x128>

            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 8016810:	4a2e      	ldr	r2, [pc, #184]	; (80168cc <lv_task_handler+0x1cc>)
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8016816:	4b2d      	ldr	r3, [pc, #180]	; (80168cc <lv_task_handler+0x1cc>)
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d19c      	bne.n	8016758 <lv_task_handler+0x58>
 801681e:	e004      	b.n	801682a <lv_task_handler+0x12a>
                break;
 8016820:	bf00      	nop
 8016822:	e002      	b.n	801682a <lv_task_handler+0x12a>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 8016824:	bf00      	nop
 8016826:	e000      	b.n	801682a <lv_task_handler+0x12a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8016828:	bf00      	nop
        }
    } while(!end_flag);
 801682a:	7afb      	ldrb	r3, [r7, #11]
 801682c:	f083 0301 	eor.w	r3, r3, #1
 8016830:	b2db      	uxtb	r3, r3
 8016832:	2b00      	cmp	r3, #0
 8016834:	d181      	bne.n	801673a <lv_task_handler+0x3a>

    busy_time += lv_tick_elaps(handler_start);
 8016836:	4b21      	ldr	r3, [pc, #132]	; (80168bc <lv_task_handler+0x1bc>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	4618      	mov	r0, r3
 801683c:	f7fe fd82 	bl	8015344 <lv_tick_elaps>
 8016840:	4602      	mov	r2, r0
 8016842:	4b23      	ldr	r3, [pc, #140]	; (80168d0 <lv_task_handler+0x1d0>)
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	4413      	add	r3, r2
 8016848:	4a21      	ldr	r2, [pc, #132]	; (80168d0 <lv_task_handler+0x1d0>)
 801684a:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 801684c:	4b21      	ldr	r3, [pc, #132]	; (80168d4 <lv_task_handler+0x1d4>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	4618      	mov	r0, r3
 8016852:	f7fe fd77 	bl	8015344 <lv_tick_elaps>
 8016856:	6038      	str	r0, [r7, #0]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8016858:	683b      	ldr	r3, [r7, #0]
 801685a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801685e:	d320      	bcc.n	80168a2 <lv_task_handler+0x1a2>

        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 8016860:	4b1b      	ldr	r3, [pc, #108]	; (80168d0 <lv_task_handler+0x1d0>)
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	2264      	movs	r2, #100	; 0x64
 8016866:	fb02 f303 	mul.w	r3, r2, r3
 801686a:	4a1b      	ldr	r2, [pc, #108]	; (80168d8 <lv_task_handler+0x1d8>)
 801686c:	fba2 2303 	umull	r2, r3, r2, r3
 8016870:	095b      	lsrs	r3, r3, #5
 8016872:	b2da      	uxtb	r2, r3
 8016874:	4b19      	ldr	r3, [pc, #100]	; (80168dc <lv_task_handler+0x1dc>)
 8016876:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 8016878:	4b18      	ldr	r3, [pc, #96]	; (80168dc <lv_task_handler+0x1dc>)
 801687a:	781b      	ldrb	r3, [r3, #0]
 801687c:	2b64      	cmp	r3, #100	; 0x64
 801687e:	d805      	bhi.n	801688c <lv_task_handler+0x18c>
 8016880:	4b16      	ldr	r3, [pc, #88]	; (80168dc <lv_task_handler+0x1dc>)
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8016888:	b2db      	uxtb	r3, r3
 801688a:	e000      	b.n	801688e <lv_task_handler+0x18e>
 801688c:	2300      	movs	r3, #0
 801688e:	4a13      	ldr	r2, [pc, #76]	; (80168dc <lv_task_handler+0x1dc>)
 8016890:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 8016892:	4b0f      	ldr	r3, [pc, #60]	; (80168d0 <lv_task_handler+0x1d0>)
 8016894:	2200      	movs	r2, #0
 8016896:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 8016898:	f7fe fd3a 	bl	8015310 <lv_tick_get>
 801689c:	4602      	mov	r2, r0
 801689e:	4b0d      	ldr	r3, [pc, #52]	; (80168d4 <lv_task_handler+0x1d4>)
 80168a0:	601a      	str	r2, [r3, #0]
    }

    task_handler_mutex = false; /*Release the mutex*/
 80168a2:	4b04      	ldr	r3, [pc, #16]	; (80168b4 <lv_task_handler+0x1b4>)
 80168a4:	2200      	movs	r2, #0
 80168a6:	701a      	strb	r2, [r3, #0]
 80168a8:	e000      	b.n	80168ac <lv_task_handler+0x1ac>
    if(task_handler_mutex) return;
 80168aa:	bf00      	nop

    LV_LOG_TRACE("lv_task_handler ready");
}
 80168ac:	3710      	adds	r7, #16
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}
 80168b2:	bf00      	nop
 80168b4:	20017798 	.word	0x20017798
 80168b8:	20017794 	.word	0x20017794
 80168bc:	2001779c 	.word	0x2001779c
 80168c0:	20017796 	.word	0x20017796
 80168c4:	20017797 	.word	0x20017797
 80168c8:	2001bb3c 	.word	0x2001bb3c
 80168cc:	2001bb7c 	.word	0x2001bb7c
 80168d0:	200177a0 	.word	0x200177a0
 80168d4:	200177a4 	.word	0x200177a4
 80168d8:	10624dd3 	.word	0x10624dd3
 80168dc:	20017795 	.word	0x20017795

080168e0 <lv_task_create_basic>:
 * Create an "empty" task. It needs to initialzed with at least
 * `lv_task_set_cb` and `lv_task_set_period`
 * @return pointer to the craeted task
 */
lv_task_t * lv_task_create_basic(void)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	af00      	add	r7, sp, #0
    lv_task_t * new_task = NULL;
 80168e6:	2300      	movs	r3, #0
 80168e8:	607b      	str	r3, [r7, #4]
    lv_task_t * tmp;

    /*Create task lists in order of priority from high to low*/
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80168ea:	4832      	ldr	r0, [pc, #200]	; (80169b4 <lv_task_create_basic+0xd4>)
 80168ec:	f7ff fcb6 	bl	801625c <lv_ll_get_head>
 80168f0:	6038      	str	r0, [r7, #0]

    /*It's the first task*/
    if(NULL == tmp) {
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d10c      	bne.n	8016912 <lv_task_create_basic+0x32>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 80168f8:	482e      	ldr	r0, [pc, #184]	; (80169b4 <lv_task_create_basic+0xd4>)
 80168fa:	f7ff fb4d 	bl	8015f98 <lv_ll_ins_head>
 80168fe:	6078      	str	r0, [r7, #4]
        lv_mem_assert(new_task);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d100      	bne.n	8016908 <lv_task_create_basic+0x28>
 8016906:	e7fe      	b.n	8016906 <lv_task_create_basic+0x26>
        if(new_task == NULL) return NULL;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d130      	bne.n	8016970 <lv_task_create_basic+0x90>
 801690e:	2300      	movs	r3, #0
 8016910:	e04c      	b.n	80169ac <lv_task_create_basic+0xcc>
    }
    /*Insert the new task to proper place according to its priority*/
    else {
        do {
            if(tmp->prio <= DEF_PRIO) {
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	7c1b      	ldrb	r3, [r3, #16]
 8016916:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801691a:	b2db      	uxtb	r3, r3
 801691c:	2b03      	cmp	r3, #3
 801691e:	d80d      	bhi.n	801693c <lv_task_create_basic+0x5c>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8016920:	6839      	ldr	r1, [r7, #0]
 8016922:	4824      	ldr	r0, [pc, #144]	; (80169b4 <lv_task_create_basic+0xd4>)
 8016924:	f7ff fb6c 	bl	8016000 <lv_ll_ins_prev>
 8016928:	6078      	str	r0, [r7, #4]
                lv_mem_assert(new_task);
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d100      	bne.n	8016932 <lv_task_create_basic+0x52>
 8016930:	e7fe      	b.n	8016930 <lv_task_create_basic+0x50>
                if(new_task == NULL) return NULL;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d10a      	bne.n	801694e <lv_task_create_basic+0x6e>
 8016938:	2300      	movs	r3, #0
 801693a:	e037      	b.n	80169ac <lv_task_create_basic+0xcc>
                break;
            }
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 801693c:	6839      	ldr	r1, [r7, #0]
 801693e:	481d      	ldr	r0, [pc, #116]	; (80169b4 <lv_task_create_basic+0xd4>)
 8016940:	f7ff fcb2 	bl	80162a8 <lv_ll_get_next>
 8016944:	6038      	str	r0, [r7, #0]
        } while(tmp != NULL);
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d1e2      	bne.n	8016912 <lv_task_create_basic+0x32>
 801694c:	e000      	b.n	8016950 <lv_task_create_basic+0x70>
                break;
 801694e:	bf00      	nop

        /*Only too high priority tasks were found. Add the task to the end*/
        if(tmp == NULL) {
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d10c      	bne.n	8016970 <lv_task_create_basic+0x90>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 8016956:	4817      	ldr	r0, [pc, #92]	; (80169b4 <lv_task_create_basic+0xd4>)
 8016958:	f7ff fb99 	bl	801608e <lv_ll_ins_tail>
 801695c:	6078      	str	r0, [r7, #4]
            lv_mem_assert(new_task);
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d100      	bne.n	8016966 <lv_task_create_basic+0x86>
 8016964:	e7fe      	b.n	8016964 <lv_task_create_basic+0x84>
            if(new_task == NULL) return NULL;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d101      	bne.n	8016970 <lv_task_create_basic+0x90>
 801696c:	2300      	movs	r3, #0
 801696e:	e01d      	b.n	80169ac <lv_task_create_basic+0xcc>
        }
    }

    new_task->period  = DEF_PERIOD;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8016976:	601a      	str	r2, [r3, #0]
    new_task->task_cb = NULL;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2200      	movs	r2, #0
 801697c:	609a      	str	r2, [r3, #8]
    new_task->prio    = DEF_PRIO;
 801697e:	687a      	ldr	r2, [r7, #4]
 8016980:	7c13      	ldrb	r3, [r2, #16]
 8016982:	2103      	movs	r1, #3
 8016984:	f361 0302 	bfi	r3, r1, #0, #3
 8016988:	7413      	strb	r3, [r2, #16]

    new_task->once     = 0;
 801698a:	687a      	ldr	r2, [r7, #4]
 801698c:	7c13      	ldrb	r3, [r2, #16]
 801698e:	f36f 03c3 	bfc	r3, #3, #1
 8016992:	7413      	strb	r3, [r2, #16]
    new_task->last_run = lv_tick_get();
 8016994:	f7fe fcbc 	bl	8015310 <lv_tick_get>
 8016998:	4602      	mov	r2, r0
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	605a      	str	r2, [r3, #4]

    new_task->user_data = NULL;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	2200      	movs	r2, #0
 80169a2:	60da      	str	r2, [r3, #12]

    task_created = true;
 80169a4:	4b04      	ldr	r3, [pc, #16]	; (80169b8 <lv_task_create_basic+0xd8>)
 80169a6:	2201      	movs	r2, #1
 80169a8:	701a      	strb	r2, [r3, #0]

    return new_task;
 80169aa:	687b      	ldr	r3, [r7, #4]
}
 80169ac:	4618      	mov	r0, r3
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}
 80169b4:	2001bb3c 	.word	0x2001bb3c
 80169b8:	20017797 	.word	0x20017797

080169bc <lv_task_create>:
 * @param prio priority of the task (LV_TASK_PRIO_OFF means the task is stopped)
 * @param user_data custom parameter
 * @return pointer to the new task
 */
lv_task_t * lv_task_create(lv_task_cb_t task_cb, uint32_t period, lv_task_prio_t prio, void * user_data)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b086      	sub	sp, #24
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	60f8      	str	r0, [r7, #12]
 80169c4:	60b9      	str	r1, [r7, #8]
 80169c6:	603b      	str	r3, [r7, #0]
 80169c8:	4613      	mov	r3, r2
 80169ca:	71fb      	strb	r3, [r7, #7]
    lv_task_t * new_task = lv_task_create_basic();
 80169cc:	f7ff ff88 	bl	80168e0 <lv_task_create_basic>
 80169d0:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_task);
 80169d2:	697b      	ldr	r3, [r7, #20]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d100      	bne.n	80169da <lv_task_create+0x1e>
 80169d8:	e7fe      	b.n	80169d8 <lv_task_create+0x1c>
    if(new_task == NULL) return NULL;
 80169da:	697b      	ldr	r3, [r7, #20]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d101      	bne.n	80169e4 <lv_task_create+0x28>
 80169e0:	2300      	movs	r3, #0
 80169e2:	e010      	b.n	8016a06 <lv_task_create+0x4a>

    lv_task_set_cb(new_task, task_cb);
 80169e4:	68f9      	ldr	r1, [r7, #12]
 80169e6:	6978      	ldr	r0, [r7, #20]
 80169e8:	f000 f811 	bl	8016a0e <lv_task_set_cb>
    lv_task_set_period(new_task, period);
 80169ec:	68b9      	ldr	r1, [r7, #8]
 80169ee:	6978      	ldr	r0, [r7, #20]
 80169f0:	f000 f884 	bl	8016afc <lv_task_set_period>
    lv_task_set_prio(new_task, prio);
 80169f4:	79fb      	ldrb	r3, [r7, #7]
 80169f6:	4619      	mov	r1, r3
 80169f8:	6978      	ldr	r0, [r7, #20]
 80169fa:	f000 f835 	bl	8016a68 <lv_task_set_prio>
    new_task->user_data = user_data;
 80169fe:	697b      	ldr	r3, [r7, #20]
 8016a00:	683a      	ldr	r2, [r7, #0]
 8016a02:	60da      	str	r2, [r3, #12]

    return new_task;
 8016a04:	697b      	ldr	r3, [r7, #20]
}
 8016a06:	4618      	mov	r0, r3
 8016a08:	3718      	adds	r7, #24
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	bd80      	pop	{r7, pc}

08016a0e <lv_task_set_cb>:
 * Set the callback the task (the function to call periodically)
 * @param task pointer to a task
 * @param task_cb teh function to call periodically
 */
void lv_task_set_cb(lv_task_t * task, lv_task_cb_t task_cb)
{
 8016a0e:	b480      	push	{r7}
 8016a10:	b083      	sub	sp, #12
 8016a12:	af00      	add	r7, sp, #0
 8016a14:	6078      	str	r0, [r7, #4]
 8016a16:	6039      	str	r1, [r7, #0]
    task->task_cb = task_cb;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	683a      	ldr	r2, [r7, #0]
 8016a1c:	609a      	str	r2, [r3, #8]
}
 8016a1e:	bf00      	nop
 8016a20:	370c      	adds	r7, #12
 8016a22:	46bd      	mov	sp, r7
 8016a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a28:	4770      	bx	lr
	...

08016a2c <lv_task_del>:
/**
 * Delete a lv_task
 * @param task pointer to task created by task
 */
void lv_task_del(lv_task_t * task)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b082      	sub	sp, #8
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 8016a34:	6879      	ldr	r1, [r7, #4]
 8016a36:	4809      	ldr	r0, [pc, #36]	; (8016a5c <lv_task_del+0x30>)
 8016a38:	f7ff fb62 	bl	8016100 <lv_ll_rem>

    lv_mem_free(task);
 8016a3c:	6878      	ldr	r0, [r7, #4]
 8016a3e:	f7ff fdcd 	bl	80165dc <lv_mem_free>

    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 8016a42:	4b07      	ldr	r3, [pc, #28]	; (8016a60 <lv_task_del+0x34>)
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	687a      	ldr	r2, [r7, #4]
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d102      	bne.n	8016a52 <lv_task_del+0x26>
 8016a4c:	4b05      	ldr	r3, [pc, #20]	; (8016a64 <lv_task_del+0x38>)
 8016a4e:	2201      	movs	r2, #1
 8016a50:	701a      	strb	r2, [r3, #0]
}
 8016a52:	bf00      	nop
 8016a54:	3708      	adds	r7, #8
 8016a56:	46bd      	mov	sp, r7
 8016a58:	bd80      	pop	{r7, pc}
 8016a5a:	bf00      	nop
 8016a5c:	2001bb3c 	.word	0x2001bb3c
 8016a60:	2001bb7c 	.word	0x2001bb7c
 8016a64:	20017796 	.word	0x20017796

08016a68 <lv_task_set_prio>:
 * Set new priority for a lv_task
 * @param task pointer to a lv_task
 * @param prio the new priority
 */
void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b084      	sub	sp, #16
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
 8016a70:	460b      	mov	r3, r1
 8016a72:	70fb      	strb	r3, [r7, #3]
    if(task->prio == prio) return;
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	7c1b      	ldrb	r3, [r3, #16]
 8016a78:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016a7c:	b2db      	uxtb	r3, r3
 8016a7e:	461a      	mov	r2, r3
 8016a80:	78fb      	ldrb	r3, [r7, #3]
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d033      	beq.n	8016aee <lv_task_set_prio+0x86>

    /*Find the tasks with new priority*/
    lv_task_t * i;
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8016a86:	481c      	ldr	r0, [pc, #112]	; (8016af8 <lv_task_set_prio+0x90>)
 8016a88:	f7ff fbe8 	bl	801625c <lv_ll_get_head>
 8016a8c:	60f8      	str	r0, [r7, #12]
 8016a8e:	e017      	b.n	8016ac0 <lv_task_set_prio+0x58>
    {
        if(i->prio <= prio) {
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	7c1b      	ldrb	r3, [r3, #16]
 8016a94:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016a98:	b2db      	uxtb	r3, r3
 8016a9a:	461a      	mov	r2, r3
 8016a9c:	78fb      	ldrb	r3, [r7, #3]
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	dc09      	bgt.n	8016ab6 <lv_task_set_prio+0x4e>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8016aa2:	68fa      	ldr	r2, [r7, #12]
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d00e      	beq.n	8016ac8 <lv_task_set_prio+0x60>
 8016aaa:	68fa      	ldr	r2, [r7, #12]
 8016aac:	6879      	ldr	r1, [r7, #4]
 8016aae:	4812      	ldr	r0, [pc, #72]	; (8016af8 <lv_task_set_prio+0x90>)
 8016ab0:	f7ff fc2d 	bl	801630e <lv_ll_move_before>
            break;
 8016ab4:	e008      	b.n	8016ac8 <lv_task_set_prio+0x60>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8016ab6:	68f9      	ldr	r1, [r7, #12]
 8016ab8:	480f      	ldr	r0, [pc, #60]	; (8016af8 <lv_task_set_prio+0x90>)
 8016aba:	f7ff fbf5 	bl	80162a8 <lv_ll_get_next>
 8016abe:	60f8      	str	r0, [r7, #12]
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d1e4      	bne.n	8016a90 <lv_task_set_prio+0x28>
 8016ac6:	e000      	b.n	8016aca <lv_task_set_prio+0x62>
            break;
 8016ac8:	bf00      	nop
        }
    }

    /*There was no such a low priority so far then add the node to the tail*/
    if(i == NULL) {
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d104      	bne.n	8016ada <lv_task_set_prio+0x72>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	6879      	ldr	r1, [r7, #4]
 8016ad4:	4808      	ldr	r0, [pc, #32]	; (8016af8 <lv_task_set_prio+0x90>)
 8016ad6:	f7ff fc1a 	bl	801630e <lv_ll_move_before>
    }

    task->prio = prio;
 8016ada:	78fb      	ldrb	r3, [r7, #3]
 8016adc:	f003 0307 	and.w	r3, r3, #7
 8016ae0:	b2d9      	uxtb	r1, r3
 8016ae2:	687a      	ldr	r2, [r7, #4]
 8016ae4:	7c13      	ldrb	r3, [r2, #16]
 8016ae6:	f361 0302 	bfi	r3, r1, #0, #3
 8016aea:	7413      	strb	r3, [r2, #16]
 8016aec:	e000      	b.n	8016af0 <lv_task_set_prio+0x88>
    if(task->prio == prio) return;
 8016aee:	bf00      	nop
}
 8016af0:	3710      	adds	r7, #16
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bd80      	pop	{r7, pc}
 8016af6:	bf00      	nop
 8016af8:	2001bb3c 	.word	0x2001bb3c

08016afc <lv_task_set_period>:
 * Set new period for a lv_task
 * @param task pointer to a lv_task
 * @param period the new period
 */
void lv_task_set_period(lv_task_t * task, uint32_t period)
{
 8016afc:	b480      	push	{r7}
 8016afe:	b083      	sub	sp, #12
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
 8016b04:	6039      	str	r1, [r7, #0]
    task->period = period;
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	683a      	ldr	r2, [r7, #0]
 8016b0a:	601a      	str	r2, [r3, #0]
}
 8016b0c:	bf00      	nop
 8016b0e:	370c      	adds	r7, #12
 8016b10:	46bd      	mov	sp, r7
 8016b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b16:	4770      	bx	lr

08016b18 <lv_task_ready>:
/**
 * Make a lv_task ready. It will not wait its period.
 * @param task pointer to a lv_task.
 */
void lv_task_ready(lv_task_t * task)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b082      	sub	sp, #8
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
    task->last_run = lv_tick_get() - task->period - 1;
 8016b20:	f7fe fbf6 	bl	8015310 <lv_tick_get>
 8016b24:	4602      	mov	r2, r0
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	1ad3      	subs	r3, r2, r3
 8016b2c:	1e5a      	subs	r2, r3, #1
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	605a      	str	r2, [r3, #4]
}
 8016b32:	bf00      	nop
 8016b34:	3708      	adds	r7, #8
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}
	...

08016b3c <lv_task_enable>:
/**
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
 8016b3c:	b480      	push	{r7}
 8016b3e:	b083      	sub	sp, #12
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	4603      	mov	r3, r0
 8016b44:	71fb      	strb	r3, [r7, #7]
    lv_task_run = en;
 8016b46:	4a04      	ldr	r2, [pc, #16]	; (8016b58 <lv_task_enable+0x1c>)
 8016b48:	79fb      	ldrb	r3, [r7, #7]
 8016b4a:	7013      	strb	r3, [r2, #0]
}
 8016b4c:	bf00      	nop
 8016b4e:	370c      	adds	r7, #12
 8016b50:	46bd      	mov	sp, r7
 8016b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b56:	4770      	bx	lr
 8016b58:	20017794 	.word	0x20017794

08016b5c <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b084      	sub	sp, #16
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
    bool exec = false;
 8016b64:	2300      	movs	r3, #0
 8016b66:	73fb      	strb	r3, [r7, #15]

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	685b      	ldr	r3, [r3, #4]
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7fe fbe9 	bl	8015344 <lv_tick_elaps>
 8016b72:	60b8      	str	r0, [r7, #8]
    if(elp >= task->period) {
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	68ba      	ldr	r2, [r7, #8]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d325      	bcc.n	8016bca <lv_task_exec+0x6e>
        task->last_run = lv_tick_get();
 8016b7e:	f7fe fbc7 	bl	8015310 <lv_tick_get>
 8016b82:	4602      	mov	r2, r0
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	605a      	str	r2, [r3, #4]
        task_deleted   = false;
 8016b88:	4b12      	ldr	r3, [pc, #72]	; (8016bd4 <lv_task_exec+0x78>)
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	701a      	strb	r2, [r3, #0]
        task_created   = false;
 8016b8e:	4b12      	ldr	r3, [pc, #72]	; (8016bd8 <lv_task_exec+0x7c>)
 8016b90:	2200      	movs	r2, #0
 8016b92:	701a      	strb	r2, [r3, #0]
        if(task->task_cb) task->task_cb(task);
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	689b      	ldr	r3, [r3, #8]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d003      	beq.n	8016ba4 <lv_task_exec+0x48>
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	689b      	ldr	r3, [r3, #8]
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 8016ba4:	4b0b      	ldr	r3, [pc, #44]	; (8016bd4 <lv_task_exec+0x78>)
 8016ba6:	781b      	ldrb	r3, [r3, #0]
 8016ba8:	f083 0301 	eor.w	r3, r3, #1
 8016bac:	b2db      	uxtb	r3, r3
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d009      	beq.n	8016bc6 <lv_task_exec+0x6a>
            if(task->once != 0) {
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	7c1b      	ldrb	r3, [r3, #16]
 8016bb6:	f003 0308 	and.w	r3, r3, #8
 8016bba:	b2db      	uxtb	r3, r3
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d002      	beq.n	8016bc6 <lv_task_exec+0x6a>
                lv_task_del(task);
 8016bc0:	6878      	ldr	r0, [r7, #4]
 8016bc2:	f7ff ff33 	bl	8016a2c <lv_task_del>
            }
        }
        exec = true;
 8016bc6:	2301      	movs	r3, #1
 8016bc8:	73fb      	strb	r3, [r7, #15]
    }

    return exec;
 8016bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bcc:	4618      	mov	r0, r3
 8016bce:	3710      	adds	r7, #16
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}
 8016bd4:	20017796 	.word	0x20017796
 8016bd8:	20017797 	.word	0x20017797

08016bdc <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8016bdc:	b480      	push	{r7}
 8016bde:	b083      	sub	sp, #12
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	7a1b      	ldrb	r3, [r3, #8]
}
 8016be8:	4618      	mov	r0, r3
 8016bea:	370c      	adds	r7, #12
 8016bec:	46bd      	mov	sp, r7
 8016bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf2:	4770      	bx	lr

08016bf4 <lv_txt_get_size>:
 * @param max_width max with of the text (break the lines to fit this size) Set CORD_MAX to avoid
 * line breaks
 */
void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b08a      	sub	sp, #40	; 0x28
 8016bf8:	af02      	add	r7, sp, #8
 8016bfa:	60f8      	str	r0, [r7, #12]
 8016bfc:	60b9      	str	r1, [r7, #8]
 8016bfe:	607a      	str	r2, [r7, #4]
 8016c00:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	2200      	movs	r2, #0
 8016c06:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	f000 809a 	beq.w	8016d4a <lv_txt_get_size+0x156>
    if(font == NULL) return;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	f000 8098 	beq.w	8016d4e <lv_txt_get_size+0x15a>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8016c1e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016c22:	f003 0302 	and.w	r3, r3, #2
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d002      	beq.n	8016c30 <lv_txt_get_size+0x3c>
 8016c2a:	f647 4318 	movw	r3, #31768	; 0x7c18
 8016c2e:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 8016c30:	2300      	movs	r3, #0
 8016c32:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 8016c34:	2300      	movs	r3, #0
 8016c36:	61bb      	str	r3, [r7, #24]
    lv_coord_t act_line_length;
    uint8_t letter_height = lv_font_get_line_height(font);
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f7ff ffcf 	bl	8016bdc <lv_font_get_line_height>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	75fb      	strb	r3, [r7, #23]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 8016c42:	e048      	b.n	8016cd6 <lv_txt_get_size+0xe2>
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8016c44:	68ba      	ldr	r2, [r7, #8]
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	18d0      	adds	r0, r2, r3
 8016c4a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8016c4e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016c52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016c56:	9300      	str	r3, [sp, #0]
 8016c58:	460b      	mov	r3, r1
 8016c5a:	6879      	ldr	r1, [r7, #4]
 8016c5c:	f000 f87c 	bl	8016d58 <lv_txt_get_next_line>
 8016c60:	4603      	mov	r3, r0
 8016c62:	461a      	mov	r2, r3
 8016c64:	69bb      	ldr	r3, [r7, #24]
 8016c66:	4413      	add	r3, r2
 8016c68:	61bb      	str	r3, [r7, #24]
        size_res->y += letter_height;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c70:	b29a      	uxth	r2, r3
 8016c72:	7dfb      	ldrb	r3, [r7, #23]
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	4413      	add	r3, r2
 8016c78:	b29b      	uxth	r3, r3
 8016c7a:	b21a      	sxth	r2, r3
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	805a      	strh	r2, [r3, #2]
        size_res->y += line_space;
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c86:	b29a      	uxth	r2, r3
 8016c88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016c8a:	4413      	add	r3, r2
 8016c8c:	b29b      	uxth	r3, r3
 8016c8e:	b21a      	sxth	r2, r3
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	805a      	strh	r2, [r3, #2]

        /*Calculate the the longest line*/
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8016c94:	68ba      	ldr	r2, [r7, #8]
 8016c96:	69fb      	ldr	r3, [r7, #28]
 8016c98:	18d0      	adds	r0, r2, r3
 8016c9a:	69bb      	ldr	r3, [r7, #24]
 8016c9c:	b29a      	uxth	r2, r3
 8016c9e:	69fb      	ldr	r3, [r7, #28]
 8016ca0:	b29b      	uxth	r3, r3
 8016ca2:	1ad3      	subs	r3, r2, r3
 8016ca4:	b299      	uxth	r1, r3
 8016ca6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016caa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016cae:	9300      	str	r3, [sp, #0]
 8016cb0:	4613      	mov	r3, r2
 8016cb2:	687a      	ldr	r2, [r7, #4]
 8016cb4:	f000 f902 	bl	8016ebc <lv_txt_get_width>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	82bb      	strh	r3, [r7, #20]

        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cc2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016cc6:	4293      	cmp	r3, r2
 8016cc8:	bfb8      	it	lt
 8016cca:	4613      	movlt	r3, r2
 8016ccc:	b21a      	sxth	r2, r3
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 8016cd2:	69bb      	ldr	r3, [r7, #24]
 8016cd4:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 8016cd6:	68ba      	ldr	r2, [r7, #8]
 8016cd8:	69fb      	ldr	r3, [r7, #28]
 8016cda:	4413      	add	r3, r2
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d1b0      	bne.n	8016c44 <lv_txt_get_size+0x50>
    }

    /*Ma ke the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8016ce2:	69fb      	ldr	r3, [r7, #28]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d01b      	beq.n	8016d20 <lv_txt_get_size+0x12c>
 8016ce8:	69fb      	ldr	r3, [r7, #28]
 8016cea:	3b01      	subs	r3, #1
 8016cec:	68ba      	ldr	r2, [r7, #8]
 8016cee:	4413      	add	r3, r2
 8016cf0:	781b      	ldrb	r3, [r3, #0]
 8016cf2:	2b0a      	cmp	r3, #10
 8016cf4:	d006      	beq.n	8016d04 <lv_txt_get_size+0x110>
 8016cf6:	69fb      	ldr	r3, [r7, #28]
 8016cf8:	3b01      	subs	r3, #1
 8016cfa:	68ba      	ldr	r2, [r7, #8]
 8016cfc:	4413      	add	r3, r2
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	2b0d      	cmp	r3, #13
 8016d02:	d10d      	bne.n	8016d20 <lv_txt_get_size+0x12c>
        size_res->y += letter_height + line_space;
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d0a:	b29a      	uxth	r2, r3
 8016d0c:	7dfb      	ldrb	r3, [r7, #23]
 8016d0e:	b299      	uxth	r1, r3
 8016d10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016d12:	440b      	add	r3, r1
 8016d14:	b29b      	uxth	r3, r3
 8016d16:	4413      	add	r3, r2
 8016d18:	b29b      	uxth	r3, r3
 8016d1a:	b21a      	sxth	r2, r3
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d104      	bne.n	8016d34 <lv_txt_get_size+0x140>
        size_res->y = letter_height;
 8016d2a:	7dfb      	ldrb	r3, [r7, #23]
 8016d2c:	b21a      	sxth	r2, r3
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	805a      	strh	r2, [r3, #2]
 8016d32:	e00d      	b.n	8016d50 <lv_txt_get_size+0x15c>
    else
        size_res->y -= line_space;
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d3a:	b29a      	uxth	r2, r3
 8016d3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016d3e:	1ad3      	subs	r3, r2, r3
 8016d40:	b29b      	uxth	r3, r3
 8016d42:	b21a      	sxth	r2, r3
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	805a      	strh	r2, [r3, #2]
 8016d48:	e002      	b.n	8016d50 <lv_txt_get_size+0x15c>
    if(text == NULL) return;
 8016d4a:	bf00      	nop
 8016d4c:	e000      	b.n	8016d50 <lv_txt_get_size+0x15c>
    if(font == NULL) return;
 8016d4e:	bf00      	nop
}
 8016d50:	3720      	adds	r7, #32
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
	...

08016d58 <lv_txt_get_next_line>:
 * @param flags settings for the text from 'txt_flag_type' enum
 * @return the index of the first char of the new line (in byte index not letter index. With UTF-8 they are different)
 */
uint16_t lv_txt_get_next_line(const char * txt, const lv_font_t * font, lv_coord_t letter_space, lv_coord_t max_width,
                              lv_txt_flag_t flag)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b08c      	sub	sp, #48	; 0x30
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	60f8      	str	r0, [r7, #12]
 8016d60:	60b9      	str	r1, [r7, #8]
 8016d62:	4611      	mov	r1, r2
 8016d64:	461a      	mov	r2, r3
 8016d66:	460b      	mov	r3, r1
 8016d68:	80fb      	strh	r3, [r7, #6]
 8016d6a:	4613      	mov	r3, r2
 8016d6c:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL) return 0;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d101      	bne.n	8016d78 <lv_txt_get_next_line+0x20>
 8016d74:	2300      	movs	r3, #0
 8016d76:	e099      	b.n	8016eac <lv_txt_get_next_line+0x154>
    if(font == NULL) return 0;
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d101      	bne.n	8016d82 <lv_txt_get_next_line+0x2a>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	e094      	b.n	8016eac <lv_txt_get_next_line+0x154>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8016d82:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016d86:	f003 0302 	and.w	r3, r3, #2
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d002      	beq.n	8016d94 <lv_txt_get_next_line+0x3c>
 8016d8e:	f647 4318 	movw	r3, #31768	; 0x7c18
 8016d92:	80bb      	strh	r3, [r7, #4]

    uint32_t i                   = 0;
 8016d94:	2300      	movs	r3, #0
 8016d96:	61bb      	str	r3, [r7, #24]
    uint32_t i_next              = 0;
 8016d98:	2300      	movs	r3, #0
 8016d9a:	617b      	str	r3, [r7, #20]
    lv_coord_t cur_w             = 0;
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t last_break          = NO_BREAK_FOUND;
 8016da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016da4:	62bb      	str	r3, [r7, #40]	; 0x28
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8016da6:	2300      	movs	r3, #0
 8016da8:	74fb      	strb	r3, [r7, #19]
    uint32_t letter_w;
    uint32_t letter      = 0;
 8016daa:	2300      	movs	r3, #0
 8016dac:	623b      	str	r3, [r7, #32]
    uint32_t letter_next = 0;
 8016dae:	2300      	movs	r3, #0
 8016db0:	627b      	str	r3, [r7, #36]	; 0x24

    letter_next = lv_txt_encoded_next(txt, &i_next);
 8016db2:	4b40      	ldr	r3, [pc, #256]	; (8016eb4 <lv_txt_get_next_line+0x15c>)
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	f107 0214 	add.w	r2, r7, #20
 8016dba:	4611      	mov	r1, r2
 8016dbc:	68f8      	ldr	r0, [r7, #12]
 8016dbe:	4798      	blx	r3
 8016dc0:	6278      	str	r0, [r7, #36]	; 0x24

    while(txt[i] != '\0') {
 8016dc2:	e06b      	b.n	8016e9c <lv_txt_get_next_line+0x144>
        letter      = letter_next;
 8016dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc6:	623b      	str	r3, [r7, #32]
        i           = i_next;
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	61bb      	str	r3, [r7, #24]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8016dcc:	4b39      	ldr	r3, [pc, #228]	; (8016eb4 <lv_txt_get_next_line+0x15c>)
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	f107 0214 	add.w	r2, r7, #20
 8016dd4:	4611      	mov	r1, r2
 8016dd6:	68f8      	ldr	r0, [r7, #12]
 8016dd8:	4798      	blx	r3
 8016dda:	6278      	str	r0, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8016ddc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016de0:	f003 0301 	and.w	r3, r3, #1
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d009      	beq.n	8016dfc <lv_txt_get_next_line+0xa4>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8016de8:	f107 0313 	add.w	r3, r7, #19
 8016dec:	6a39      	ldr	r1, [r7, #32]
 8016dee:	4618      	mov	r0, r3
 8016df0:	f000 f8ce 	bl	8016f90 <lv_txt_is_cmd>
 8016df4:	4603      	mov	r3, r0
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d000      	beq.n	8016dfc <lv_txt_get_next_line+0xa4>
                continue; /*Skip the letter is it is part of a command*/
 8016dfa:	e04f      	b.n	8016e9c <lv_txt_get_next_line+0x144>
            }
        }

        /*Check for new line chars*/
        if(letter == '\n' || letter == '\r') {
 8016dfc:	6a3b      	ldr	r3, [r7, #32]
 8016dfe:	2b0a      	cmp	r3, #10
 8016e00:	d002      	beq.n	8016e08 <lv_txt_get_next_line+0xb0>
 8016e02:	6a3b      	ldr	r3, [r7, #32]
 8016e04:	2b0d      	cmp	r3, #13
 8016e06:	d10b      	bne.n	8016e20 <lv_txt_get_next_line+0xc8>
            /*Return with the first letter of the next line*/
            if(letter == '\r' && letter_next == '\n')
 8016e08:	6a3b      	ldr	r3, [r7, #32]
 8016e0a:	2b0d      	cmp	r3, #13
 8016e0c:	d105      	bne.n	8016e1a <lv_txt_get_next_line+0xc2>
 8016e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e10:	2b0a      	cmp	r3, #10
 8016e12:	d102      	bne.n	8016e1a <lv_txt_get_next_line+0xc2>
                return i_next;
 8016e14:	697b      	ldr	r3, [r7, #20]
 8016e16:	b29b      	uxth	r3, r3
 8016e18:	e048      	b.n	8016eac <lv_txt_get_next_line+0x154>
            else
                return i;
 8016e1a:	69bb      	ldr	r3, [r7, #24]
 8016e1c:	b29b      	uxth	r3, r3
 8016e1e:	e045      	b.n	8016eac <lv_txt_get_next_line+0x154>
        } else { /*Check the actual length*/
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8016e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e22:	6a39      	ldr	r1, [r7, #32]
 8016e24:	68b8      	ldr	r0, [r7, #8]
 8016e26:	f7fd fdb1 	bl	801498c <lv_font_get_glyph_width>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	61fb      	str	r3, [r7, #28]
            cur_w += letter_w;
 8016e2e:	69fb      	ldr	r3, [r7, #28]
 8016e30:	b29a      	uxth	r2, r3
 8016e32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016e34:	4413      	add	r3, r2
 8016e36:	b29b      	uxth	r3, r3
 8016e38:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /*If the txt is too long then finish, this is the line end*/
            if(cur_w > max_width) {
 8016e3a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8016e3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016e42:	429a      	cmp	r2, r3
 8016e44:	dd1a      	ble.n	8016e7c <lv_txt_get_next_line+0x124>
                /*If a break character was already found break there*/
                if(last_break != NO_BREAK_FOUND) {
 8016e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016e4c:	d002      	beq.n	8016e54 <lv_txt_get_next_line+0xfc>
                    i = last_break;
 8016e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e50:	61bb      	str	r3, [r7, #24]
 8016e52:	e006      	b.n	8016e62 <lv_txt_get_next_line+0x10a>
                } else {
                    /* Now this character is out of the area so it will be first character of the next line*/
                    /* But 'i' already points to the next character (because of lv_txt_utf8_next) step beck one*/
                    lv_txt_encoded_prev(txt, &i);
 8016e54:	4b18      	ldr	r3, [pc, #96]	; (8016eb8 <lv_txt_get_next_line+0x160>)
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	f107 0218 	add.w	r2, r7, #24
 8016e5c:	4611      	mov	r1, r2
 8016e5e:	68f8      	ldr	r0, [r7, #12]
 8016e60:	4798      	blx	r3
                }

                /* Do not let to return without doing nothing.
                 * Find at least one character (Avoid infinite loop )*/
                if(i == 0) lv_txt_encoded_next(txt, &i);
 8016e62:	69bb      	ldr	r3, [r7, #24]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d106      	bne.n	8016e76 <lv_txt_get_next_line+0x11e>
 8016e68:	4b12      	ldr	r3, [pc, #72]	; (8016eb4 <lv_txt_get_next_line+0x15c>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	f107 0218 	add.w	r2, r7, #24
 8016e70:	4611      	mov	r1, r2
 8016e72:	68f8      	ldr	r0, [r7, #12]
 8016e74:	4798      	blx	r3

                return i;
 8016e76:	69bb      	ldr	r3, [r7, #24]
 8016e78:	b29b      	uxth	r3, r3
 8016e7a:	e017      	b.n	8016eac <lv_txt_get_next_line+0x154>
            }
            /*If this char still can fit to this line then check if
             * txt can be broken here later */
            else if(is_break_char(letter)) {
 8016e7c:	6a38      	ldr	r0, [r7, #32]
 8016e7e:	f000 faa9 	bl	80173d4 <is_break_char>
 8016e82:	4603      	mov	r3, r0
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d001      	beq.n	8016e8c <lv_txt_get_next_line+0x134>
                last_break = i; /*Save the first char index after break*/
 8016e88:	69bb      	ldr	r3, [r7, #24]
 8016e8a:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        if(letter_w > 0) {
 8016e8c:	69fb      	ldr	r3, [r7, #28]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d004      	beq.n	8016e9c <lv_txt_get_next_line+0x144>
            cur_w += letter_space;
 8016e92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016e94:	88fb      	ldrh	r3, [r7, #6]
 8016e96:	4413      	add	r3, r2
 8016e98:	b29b      	uxth	r3, r3
 8016e9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(txt[i] != '\0') {
 8016e9c:	69bb      	ldr	r3, [r7, #24]
 8016e9e:	68fa      	ldr	r2, [r7, #12]
 8016ea0:	4413      	add	r3, r2
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d18d      	bne.n	8016dc4 <lv_txt_get_next_line+0x6c>
        }
    }

    return i;
 8016ea8:	69bb      	ldr	r3, [r7, #24]
 8016eaa:	b29b      	uxth	r3, r3
}
 8016eac:	4618      	mov	r0, r3
 8016eae:	3730      	adds	r7, #48	; 0x30
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}
 8016eb4:	200027a0 	.word	0x200027a0
 8016eb8:	200027a4 	.word	0x200027a4

08016ebc <lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t lv_txt_get_width(const char * txt, uint16_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_txt_flag_t flag)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b08a      	sub	sp, #40	; 0x28
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	60f8      	str	r0, [r7, #12]
 8016ec4:	607a      	str	r2, [r7, #4]
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	460b      	mov	r3, r1
 8016eca:	817b      	strh	r3, [r7, #10]
 8016ecc:	4613      	mov	r3, r2
 8016ece:	813b      	strh	r3, [r7, #8]
    if(txt == NULL) return 0;
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d101      	bne.n	8016eda <lv_txt_get_width+0x1e>
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	e053      	b.n	8016f82 <lv_txt_get_width+0xc6>
    if(font == NULL) return 0;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d101      	bne.n	8016ee4 <lv_txt_get_width+0x28>
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	e04e      	b.n	8016f82 <lv_txt_get_width+0xc6>

    uint32_t i                   = 0;
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	617b      	str	r3, [r7, #20]
    lv_coord_t width             = 0;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8016eec:	2300      	movs	r3, #0
 8016eee:	74fb      	strb	r3, [r7, #19]
    uint32_t letter;
    uint32_t letter_next;

    if(length != 0) {
 8016ef0:	897b      	ldrh	r3, [r7, #10]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d043      	beq.n	8016f7e <lv_txt_get_width+0xc2>
        while(i < length) {
 8016ef6:	e035      	b.n	8016f64 <lv_txt_get_width+0xa8>
            letter      = lv_txt_encoded_next(txt, &i);
 8016ef8:	4b24      	ldr	r3, [pc, #144]	; (8016f8c <lv_txt_get_width+0xd0>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	f107 0214 	add.w	r2, r7, #20
 8016f00:	4611      	mov	r1, r2
 8016f02:	68f8      	ldr	r0, [r7, #12]
 8016f04:	4798      	blx	r3
 8016f06:	6238      	str	r0, [r7, #32]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8016f08:	4b20      	ldr	r3, [pc, #128]	; (8016f8c <lv_txt_get_width+0xd0>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	697a      	ldr	r2, [r7, #20]
 8016f0e:	68f9      	ldr	r1, [r7, #12]
 8016f10:	440a      	add	r2, r1
 8016f12:	2100      	movs	r1, #0
 8016f14:	4610      	mov	r0, r2
 8016f16:	4798      	blx	r3
 8016f18:	61f8      	str	r0, [r7, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8016f1a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016f1e:	f003 0301 	and.w	r3, r3, #1
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d009      	beq.n	8016f3a <lv_txt_get_width+0x7e>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8016f26:	f107 0313 	add.w	r3, r7, #19
 8016f2a:	6a39      	ldr	r1, [r7, #32]
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f000 f82f 	bl	8016f90 <lv_txt_is_cmd>
 8016f32:	4603      	mov	r3, r0
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d000      	beq.n	8016f3a <lv_txt_get_width+0x7e>
                    continue;
 8016f38:	e014      	b.n	8016f64 <lv_txt_get_width+0xa8>
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8016f3a:	69fa      	ldr	r2, [r7, #28]
 8016f3c:	6a39      	ldr	r1, [r7, #32]
 8016f3e:	6878      	ldr	r0, [r7, #4]
 8016f40:	f7fd fd24 	bl	801498c <lv_font_get_glyph_width>
 8016f44:	4603      	mov	r3, r0
 8016f46:	837b      	strh	r3, [r7, #26]
            if(char_width > 0) {
 8016f48:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	dd09      	ble.n	8016f64 <lv_txt_get_width+0xa8>
                width += char_width;
 8016f50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016f52:	8b7b      	ldrh	r3, [r7, #26]
 8016f54:	4413      	add	r3, r2
 8016f56:	b29b      	uxth	r3, r3
 8016f58:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 8016f5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016f5c:	893b      	ldrh	r3, [r7, #8]
 8016f5e:	4413      	add	r3, r2
 8016f60:	b29b      	uxth	r3, r3
 8016f62:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 8016f64:	897a      	ldrh	r2, [r7, #10]
 8016f66:	697b      	ldr	r3, [r7, #20]
 8016f68:	429a      	cmp	r2, r3
 8016f6a:	d8c5      	bhi.n	8016ef8 <lv_txt_get_width+0x3c>
            }
        }

        if(width > 0) {
 8016f6c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	dd04      	ble.n	8016f7e <lv_txt_get_width+0xc2>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8016f74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016f76:	893b      	ldrh	r3, [r7, #8]
 8016f78:	1ad3      	subs	r3, r2, r3
 8016f7a:	b29b      	uxth	r3, r3
 8016f7c:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned */
        }
    }

    return width;
 8016f7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8016f82:	4618      	mov	r0, r3
 8016f84:	3728      	adds	r7, #40	; 0x28
 8016f86:	46bd      	mov	sp, r7
 8016f88:	bd80      	pop	{r7, pc}
 8016f8a:	bf00      	nop
 8016f8c:	200027a0 	.word	0x200027a0

08016f90 <lv_txt_is_cmd>:
 * @param c the current character
 * @return true: the character is part of a command and should not be written,
 *         false: the character should be written
 */
bool lv_txt_is_cmd(lv_txt_cmd_state_t * state, uint32_t c)
{
 8016f90:	b480      	push	{r7}
 8016f92:	b085      	sub	sp, #20
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
 8016f98:	6039      	str	r1, [r7, #0]
    bool ret = false;
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8016f9e:	2323      	movs	r3, #35	; 0x23
 8016fa0:	461a      	mov	r2, r3
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	4293      	cmp	r3, r2
 8016fa6:	d11a      	bne.n	8016fde <lv_txt_is_cmd+0x4e>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	781b      	ldrb	r3, [r3, #0]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d105      	bne.n	8016fbc <lv_txt_is_cmd+0x2c>
            *state = LV_TXT_CMD_STATE_PAR;
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	2201      	movs	r2, #1
 8016fb4:	701a      	strb	r2, [r3, #0]
            ret    = true;
 8016fb6:	2301      	movs	r3, #1
 8016fb8:	73fb      	strb	r3, [r7, #15]
 8016fba:	e010      	b.n	8016fde <lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char */
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	2b01      	cmp	r3, #1
 8016fc2:	d103      	bne.n	8016fcc <lv_txt_is_cmd+0x3c>
            *state = LV_TXT_CMD_STATE_WAIT;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	701a      	strb	r2, [r3, #0]
 8016fca:	e008      	b.n	8016fde <lv_txt_is_cmd+0x4e>
        }
        /*Command end */
        else if(*state == LV_TXT_CMD_STATE_IN) {
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	781b      	ldrb	r3, [r3, #0]
 8016fd0:	2b02      	cmp	r3, #2
 8016fd2:	d104      	bne.n	8016fde <lv_txt_is_cmd+0x4e>
            *state = LV_TXT_CMD_STATE_WAIT;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	2200      	movs	r2, #0
 8016fd8:	701a      	strb	r2, [r3, #0]
            ret    = true;
 8016fda:	2301      	movs	r3, #1
 8016fdc:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	781b      	ldrb	r3, [r3, #0]
 8016fe2:	2b01      	cmp	r3, #1
 8016fe4:	d107      	bne.n	8016ff6 <lv_txt_is_cmd+0x66>
        if(c == ' ') {
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	2b20      	cmp	r3, #32
 8016fea:	d102      	bne.n	8016ff2 <lv_txt_is_cmd+0x62>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2202      	movs	r2, #2
 8016ff0:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8016ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	3714      	adds	r7, #20
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017002:	4770      	bx	lr

08017004 <lv_txt_utf8_size>:
 * Give the size of an UTF-8 coded character
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
 8017004:	b480      	push	{r7}
 8017006:	b083      	sub	sp, #12
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
    if((str[0] & 0x80) == 0)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	781b      	ldrb	r3, [r3, #0]
 8017010:	b25b      	sxtb	r3, r3
 8017012:	2b00      	cmp	r3, #0
 8017014:	db01      	blt.n	801701a <lv_txt_utf8_size+0x16>
        return 1;
 8017016:	2301      	movs	r3, #1
 8017018:	e018      	b.n	801704c <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xE0) == 0xC0)
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	781b      	ldrb	r3, [r3, #0]
 801701e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8017022:	2bc0      	cmp	r3, #192	; 0xc0
 8017024:	d101      	bne.n	801702a <lv_txt_utf8_size+0x26>
        return 2;
 8017026:	2302      	movs	r3, #2
 8017028:	e010      	b.n	801704c <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xF0) == 0xE0)
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017032:	2be0      	cmp	r3, #224	; 0xe0
 8017034:	d101      	bne.n	801703a <lv_txt_utf8_size+0x36>
        return 3;
 8017036:	2303      	movs	r3, #3
 8017038:	e008      	b.n	801704c <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xF8) == 0xF0)
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	781b      	ldrb	r3, [r3, #0]
 801703e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8017042:	2bf0      	cmp	r3, #240	; 0xf0
 8017044:	d101      	bne.n	801704a <lv_txt_utf8_size+0x46>
        return 4;
 8017046:	2304      	movs	r3, #4
 8017048:	e000      	b.n	801704c <lv_txt_utf8_size+0x48>
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 801704a:	2301      	movs	r3, #1
}
 801704c:	4618      	mov	r0, r3
 801704e:	370c      	adds	r7, #12
 8017050:	46bd      	mov	sp, r7
 8017052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017056:	4770      	bx	lr

08017058 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8017058:	b480      	push	{r7}
 801705a:	b085      	sub	sp, #20
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
 8017060:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     * */

    uint32_t result = 0;
 8017062:	2300      	movs	r3, #0
 8017064:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8017066:	2300      	movs	r3, #0
 8017068:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d102      	bne.n	8017076 <lv_txt_utf8_next+0x1e>
 8017070:	f107 0308 	add.w	r3, r7, #8
 8017074:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 8017076:	683b      	ldr	r3, [r7, #0]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	687a      	ldr	r2, [r7, #4]
 801707c:	4413      	add	r3, r2
 801707e:	781b      	ldrb	r3, [r3, #0]
 8017080:	b25b      	sxtb	r3, r3
 8017082:	2b00      	cmp	r3, #0
 8017084:	db0b      	blt.n	801709e <lv_txt_utf8_next+0x46>
        result = txt[*i];
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	687a      	ldr	r2, [r7, #4]
 801708c:	4413      	add	r3, r2
 801708e:	781b      	ldrb	r3, [r3, #0]
 8017090:	60fb      	str	r3, [r7, #12]
        (*i)++;
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	1c5a      	adds	r2, r3, #1
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	601a      	str	r2, [r3, #0]
 801709c:	e0ea      	b.n	8017274 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if((txt[*i] & 0xE0) == 0xC0) {
 801709e:	683b      	ldr	r3, [r7, #0]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	687a      	ldr	r2, [r7, #4]
 80170a4:	4413      	add	r3, r2
 80170a6:	781b      	ldrb	r3, [r3, #0]
 80170a8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80170ac:	2bc0      	cmp	r3, #192	; 0xc0
 80170ae:	d128      	bne.n	8017102 <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 80170b0:	683b      	ldr	r3, [r7, #0]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	687a      	ldr	r2, [r7, #4]
 80170b6:	4413      	add	r3, r2
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	019b      	lsls	r3, r3, #6
 80170bc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80170c0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	1c5a      	adds	r2, r3, #1
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	601a      	str	r2, [r3, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80170cc:	683b      	ldr	r3, [r7, #0]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	687a      	ldr	r2, [r7, #4]
 80170d2:	4413      	add	r3, r2
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80170da:	2b80      	cmp	r3, #128	; 0x80
 80170dc:	d001      	beq.n	80170e2 <lv_txt_utf8_next+0x8a>
 80170de:	2300      	movs	r3, #0
 80170e0:	e0c9      	b.n	8017276 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	687a      	ldr	r2, [r7, #4]
 80170e8:	4413      	add	r3, r2
 80170ea:	781b      	ldrb	r3, [r3, #0]
 80170ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80170f0:	68fa      	ldr	r2, [r7, #12]
 80170f2:	4413      	add	r3, r2
 80170f4:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	1c5a      	adds	r2, r3, #1
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	601a      	str	r2, [r3, #0]
 8017100:	e0b8      	b.n	8017274 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if((txt[*i] & 0xF0) == 0xE0) {
 8017102:	683b      	ldr	r3, [r7, #0]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	687a      	ldr	r2, [r7, #4]
 8017108:	4413      	add	r3, r2
 801710a:	781b      	ldrb	r3, [r3, #0]
 801710c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017110:	2be0      	cmp	r3, #224	; 0xe0
 8017112:	d142      	bne.n	801719a <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8017114:	683b      	ldr	r3, [r7, #0]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	687a      	ldr	r2, [r7, #4]
 801711a:	4413      	add	r3, r2
 801711c:	781b      	ldrb	r3, [r3, #0]
 801711e:	031b      	lsls	r3, r3, #12
 8017120:	b29b      	uxth	r3, r3
 8017122:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	1c5a      	adds	r2, r3, #1
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	687a      	ldr	r2, [r7, #4]
 8017134:	4413      	add	r3, r2
 8017136:	781b      	ldrb	r3, [r3, #0]
 8017138:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801713c:	2b80      	cmp	r3, #128	; 0x80
 801713e:	d001      	beq.n	8017144 <lv_txt_utf8_next+0xec>
 8017140:	2300      	movs	r3, #0
 8017142:	e098      	b.n	8017276 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8017144:	683b      	ldr	r3, [r7, #0]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	687a      	ldr	r2, [r7, #4]
 801714a:	4413      	add	r3, r2
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	019b      	lsls	r3, r3, #6
 8017150:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8017154:	68fa      	ldr	r2, [r7, #12]
 8017156:	4413      	add	r3, r2
 8017158:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801715a:	683b      	ldr	r3, [r7, #0]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	1c5a      	adds	r2, r3, #1
 8017160:	683b      	ldr	r3, [r7, #0]
 8017162:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	687a      	ldr	r2, [r7, #4]
 801716a:	4413      	add	r3, r2
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017172:	2b80      	cmp	r3, #128	; 0x80
 8017174:	d001      	beq.n	801717a <lv_txt_utf8_next+0x122>
 8017176:	2300      	movs	r3, #0
 8017178:	e07d      	b.n	8017276 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	687a      	ldr	r2, [r7, #4]
 8017180:	4413      	add	r3, r2
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017188:	68fa      	ldr	r2, [r7, #12]
 801718a:	4413      	add	r3, r2
 801718c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	1c5a      	adds	r2, r3, #1
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	601a      	str	r2, [r3, #0]
 8017198:	e06c      	b.n	8017274 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if((txt[*i] & 0xF8) == 0xF0) {
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	687a      	ldr	r2, [r7, #4]
 80171a0:	4413      	add	r3, r2
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80171a8:	2bf0      	cmp	r3, #240	; 0xf0
 80171aa:	d15e      	bne.n	801726a <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	687a      	ldr	r2, [r7, #4]
 80171b2:	4413      	add	r3, r2
 80171b4:	781b      	ldrb	r3, [r3, #0]
 80171b6:	049b      	lsls	r3, r3, #18
 80171b8:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80171bc:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80171be:	683b      	ldr	r3, [r7, #0]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	1c5a      	adds	r2, r3, #1
 80171c4:	683b      	ldr	r3, [r7, #0]
 80171c6:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	687a      	ldr	r2, [r7, #4]
 80171ce:	4413      	add	r3, r2
 80171d0:	781b      	ldrb	r3, [r3, #0]
 80171d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80171d6:	2b80      	cmp	r3, #128	; 0x80
 80171d8:	d001      	beq.n	80171de <lv_txt_utf8_next+0x186>
 80171da:	2300      	movs	r3, #0
 80171dc:	e04b      	b.n	8017276 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	687a      	ldr	r2, [r7, #4]
 80171e4:	4413      	add	r3, r2
 80171e6:	781b      	ldrb	r3, [r3, #0]
 80171e8:	031b      	lsls	r3, r3, #12
 80171ea:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 80171ee:	68fa      	ldr	r2, [r7, #12]
 80171f0:	4413      	add	r3, r2
 80171f2:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80171f4:	683b      	ldr	r3, [r7, #0]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	1c5a      	adds	r2, r3, #1
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80171fe:	683b      	ldr	r3, [r7, #0]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	687a      	ldr	r2, [r7, #4]
 8017204:	4413      	add	r3, r2
 8017206:	781b      	ldrb	r3, [r3, #0]
 8017208:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801720c:	2b80      	cmp	r3, #128	; 0x80
 801720e:	d001      	beq.n	8017214 <lv_txt_utf8_next+0x1bc>
 8017210:	2300      	movs	r3, #0
 8017212:	e030      	b.n	8017276 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	687a      	ldr	r2, [r7, #4]
 801721a:	4413      	add	r3, r2
 801721c:	781b      	ldrb	r3, [r3, #0]
 801721e:	019b      	lsls	r3, r3, #6
 8017220:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8017224:	68fa      	ldr	r2, [r7, #12]
 8017226:	4413      	add	r3, r2
 8017228:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801722a:	683b      	ldr	r3, [r7, #0]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	1c5a      	adds	r2, r3, #1
 8017230:	683b      	ldr	r3, [r7, #0]
 8017232:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	687a      	ldr	r2, [r7, #4]
 801723a:	4413      	add	r3, r2
 801723c:	781b      	ldrb	r3, [r3, #0]
 801723e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017242:	2b80      	cmp	r3, #128	; 0x80
 8017244:	d001      	beq.n	801724a <lv_txt_utf8_next+0x1f2>
 8017246:	2300      	movs	r3, #0
 8017248:	e015      	b.n	8017276 <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	687a      	ldr	r2, [r7, #4]
 8017250:	4413      	add	r3, r2
 8017252:	781b      	ldrb	r3, [r3, #0]
 8017254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017258:	68fa      	ldr	r2, [r7, #12]
 801725a:	4413      	add	r3, r2
 801725c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	1c5a      	adds	r2, r3, #1
 8017264:	683b      	ldr	r3, [r7, #0]
 8017266:	601a      	str	r2, [r3, #0]
 8017268:	e004      	b.n	8017274 <lv_txt_utf8_next+0x21c>
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	1c5a      	adds	r2, r3, #1
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 8017274:	68fb      	ldr	r3, [r7, #12]
}
 8017276:	4618      	mov	r0, r3
 8017278:	3714      	adds	r7, #20
 801727a:	46bd      	mov	sp, r7
 801727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017280:	4770      	bx	lr
	...

08017284 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b086      	sub	sp, #24
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
 801728c:	6039      	str	r1, [r7, #0]
    uint8_t c_size;
    uint8_t cnt = 0;
 801728e:	2300      	movs	r3, #0
 8017290:	75fb      	strb	r3, [r7, #23]

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8017292:	683b      	ldr	r3, [r7, #0]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	1e5a      	subs	r2, r3, #1
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	601a      	str	r2, [r3, #0]
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 801729c:	7dfb      	ldrb	r3, [r7, #23]
 801729e:	2b03      	cmp	r3, #3
 80172a0:	d901      	bls.n	80172a6 <lv_txt_utf8_prev+0x22>
 80172a2:	2300      	movs	r3, #0
 80172a4:	e02a      	b.n	80172fc <lv_txt_utf8_prev+0x78>

        c_size = lv_txt_encoded_size(&txt[*i]);
 80172a6:	4b17      	ldr	r3, [pc, #92]	; (8017304 <lv_txt_utf8_prev+0x80>)
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	683a      	ldr	r2, [r7, #0]
 80172ac:	6812      	ldr	r2, [r2, #0]
 80172ae:	6879      	ldr	r1, [r7, #4]
 80172b0:	440a      	add	r2, r1
 80172b2:	4610      	mov	r0, r2
 80172b4:	4798      	blx	r3
 80172b6:	4603      	mov	r3, r0
 80172b8:	75bb      	strb	r3, [r7, #22]
        if(c_size == 0) {
 80172ba:	7dbb      	ldrb	r3, [r7, #22]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d10b      	bne.n	80172d8 <lv_txt_utf8_prev+0x54>
            if(*i != 0)
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d005      	beq.n	80172d4 <lv_txt_utf8_prev+0x50>
                (*i)--;
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	1e5a      	subs	r2, r3, #1
 80172ce:	683b      	ldr	r3, [r7, #0]
 80172d0:	601a      	str	r2, [r3, #0]
 80172d2:	e001      	b.n	80172d8 <lv_txt_utf8_prev+0x54>
            else
                return 0;
 80172d4:	2300      	movs	r3, #0
 80172d6:	e011      	b.n	80172fc <lv_txt_utf8_prev+0x78>
        }
        cnt++;
 80172d8:	7dfb      	ldrb	r3, [r7, #23]
 80172da:	3301      	adds	r3, #1
 80172dc:	75fb      	strb	r3, [r7, #23]
    } while(c_size == 0);
 80172de:	7dbb      	ldrb	r3, [r7, #22]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d0db      	beq.n	801729c <lv_txt_utf8_prev+0x18>

    uint32_t i_tmp  = *i;
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	60fb      	str	r3, [r7, #12]
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 80172ea:	4b07      	ldr	r3, [pc, #28]	; (8017308 <lv_txt_utf8_prev+0x84>)
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	f107 020c 	add.w	r2, r7, #12
 80172f2:	4611      	mov	r1, r2
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	4798      	blx	r3
 80172f8:	6138      	str	r0, [r7, #16]

    return letter;
 80172fa:	693b      	ldr	r3, [r7, #16]
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3718      	adds	r7, #24
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}
 8017304:	2000279c 	.word	0x2000279c
 8017308:	200027a0 	.word	0x200027a0

0801730c <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b084      	sub	sp, #16
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
 8017314:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t byte_cnt = 0;
 8017316:	2300      	movs	r3, #0
 8017318:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < utf8_id; i++) {
 801731a:	2300      	movs	r3, #0
 801731c:	60fb      	str	r3, [r7, #12]
 801731e:	e00e      	b.n	801733e <lv_txt_utf8_get_byte_id+0x32>
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 8017320:	4b0b      	ldr	r3, [pc, #44]	; (8017350 <lv_txt_utf8_get_byte_id+0x44>)
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	6879      	ldr	r1, [r7, #4]
 8017326:	68ba      	ldr	r2, [r7, #8]
 8017328:	440a      	add	r2, r1
 801732a:	4610      	mov	r0, r2
 801732c:	4798      	blx	r3
 801732e:	4603      	mov	r3, r0
 8017330:	461a      	mov	r2, r3
 8017332:	68bb      	ldr	r3, [r7, #8]
 8017334:	4413      	add	r3, r2
 8017336:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < utf8_id; i++) {
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	3301      	adds	r3, #1
 801733c:	60fb      	str	r3, [r7, #12]
 801733e:	68fa      	ldr	r2, [r7, #12]
 8017340:	683b      	ldr	r3, [r7, #0]
 8017342:	429a      	cmp	r2, r3
 8017344:	d3ec      	bcc.n	8017320 <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
 8017346:	68bb      	ldr	r3, [r7, #8]
}
 8017348:	4618      	mov	r0, r3
 801734a:	3710      	adds	r7, #16
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}
 8017350:	2000279c 	.word	0x2000279c

08017354 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b084      	sub	sp, #16
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
 801735c:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 801735e:	2300      	movs	r3, #0
 8017360:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 8017362:	2300      	movs	r3, #0
 8017364:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 8017366:	e009      	b.n	801737c <lv_txt_utf8_get_char_id+0x28>
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8017368:	4b09      	ldr	r3, [pc, #36]	; (8017390 <lv_txt_utf8_get_char_id+0x3c>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f107 0208 	add.w	r2, r7, #8
 8017370:	4611      	mov	r1, r2
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	4798      	blx	r3
        char_cnt++;
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	3301      	adds	r3, #1
 801737a:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	683a      	ldr	r2, [r7, #0]
 8017380:	429a      	cmp	r2, r3
 8017382:	d8f1      	bhi.n	8017368 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 8017384:	68fb      	ldr	r3, [r7, #12]
}
 8017386:	4618      	mov	r0, r3
 8017388:	3710      	adds	r7, #16
 801738a:	46bd      	mov	sp, r7
 801738c:	bd80      	pop	{r7, pc}
 801738e:	bf00      	nop
 8017390:	200027a0 	.word	0x200027a0

08017394 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b084      	sub	sp, #16
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 801739c:	2300      	movs	r3, #0
 801739e:	60fb      	str	r3, [r7, #12]
    uint32_t i   = 0;
 80173a0:	2300      	movs	r3, #0
 80173a2:	60bb      	str	r3, [r7, #8]

    while(txt[i] != '\0') {
 80173a4:	e009      	b.n	80173ba <lv_txt_utf8_get_length+0x26>
        lv_txt_encoded_next(txt, &i);
 80173a6:	4b0a      	ldr	r3, [pc, #40]	; (80173d0 <lv_txt_utf8_get_length+0x3c>)
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	f107 0208 	add.w	r2, r7, #8
 80173ae:	4611      	mov	r1, r2
 80173b0:	6878      	ldr	r0, [r7, #4]
 80173b2:	4798      	blx	r3
        len++;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	3301      	adds	r3, #1
 80173b8:	60fb      	str	r3, [r7, #12]
    while(txt[i] != '\0') {
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	687a      	ldr	r2, [r7, #4]
 80173be:	4413      	add	r3, r2
 80173c0:	781b      	ldrb	r3, [r3, #0]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d1ef      	bne.n	80173a6 <lv_txt_utf8_get_length+0x12>
    }

    return len;
 80173c6:	68fb      	ldr	r3, [r7, #12]
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3710      	adds	r7, #16
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}
 80173d0:	200027a0 	.word	0x200027a0

080173d4 <is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool is_break_char(uint32_t letter)
{
 80173d4:	b480      	push	{r7}
 80173d6:	b085      	sub	sp, #20
 80173d8:	af00      	add	r7, sp, #0
 80173da:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 80173dc:	2300      	movs	r3, #0
 80173de:	73bb      	strb	r3, [r7, #14]

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80173e0:	2300      	movs	r3, #0
 80173e2:	73fb      	strb	r3, [r7, #15]
 80173e4:	e00c      	b.n	8017400 <is_break_char+0x2c>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 80173e6:	7bfb      	ldrb	r3, [r7, #15]
 80173e8:	4a0b      	ldr	r2, [pc, #44]	; (8017418 <is_break_char+0x44>)
 80173ea:	5cd3      	ldrb	r3, [r2, r3]
 80173ec:	461a      	mov	r2, r3
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	4293      	cmp	r3, r2
 80173f2:	d102      	bne.n	80173fa <is_break_char+0x26>
            ret = true; /*If match then it is break char*/
 80173f4:	2301      	movs	r3, #1
 80173f6:	73bb      	strb	r3, [r7, #14]
            break;
 80173f8:	e007      	b.n	801740a <is_break_char+0x36>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80173fa:	7bfb      	ldrb	r3, [r7, #15]
 80173fc:	3301      	adds	r3, #1
 80173fe:	73fb      	strb	r3, [r7, #15]
 8017400:	7bfb      	ldrb	r3, [r7, #15]
 8017402:	4a05      	ldr	r2, [pc, #20]	; (8017418 <is_break_char+0x44>)
 8017404:	5cd3      	ldrb	r3, [r2, r3]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d1ed      	bne.n	80173e6 <is_break_char+0x12>
        }
    }

    return ret;
 801740a:	7bbb      	ldrb	r3, [r7, #14]
}
 801740c:	4618      	mov	r0, r3
 801740e:	3714      	adds	r7, #20
 8017410:	46bd      	mov	sp, r7
 8017412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017416:	4770      	bx	lr
 8017418:	0802c8b0 	.word	0x0802c8b0

0801741c <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b086      	sub	sp, #24
 8017420:	af00      	add	r7, sp, #0
 8017422:	60f8      	str	r0, [r7, #12]
 8017424:	60b9      	str	r1, [r7, #8]
 8017426:	607a      	str	r2, [r7, #4]
 8017428:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 801742a:	68bb      	ldr	r3, [r7, #8]
 801742c:	617b      	str	r3, [r7, #20]
 801742e:	e02d      	b.n	801748c <lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	085b      	lsrs	r3, r3, #1
 8017434:	683a      	ldr	r2, [r7, #0]
 8017436:	fb02 f303 	mul.w	r3, r2, r3
 801743a:	697a      	ldr	r2, [r7, #20]
 801743c:	4413      	add	r3, r2
 801743e:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 8017440:	6a3b      	ldr	r3, [r7, #32]
 8017442:	6979      	ldr	r1, [r7, #20]
 8017444:	68f8      	ldr	r0, [r7, #12]
 8017446:	4798      	blx	r3
 8017448:	6138      	str	r0, [r7, #16]
 801744a:	693b      	ldr	r3, [r7, #16]
 801744c:	2b00      	cmp	r3, #0
 801744e:	dd12      	ble.n	8017476 <lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	085b      	lsrs	r3, r3, #1
 8017454:	687a      	ldr	r2, [r7, #4]
 8017456:	f002 0201 	and.w	r2, r2, #1
 801745a:	2a00      	cmp	r2, #0
 801745c:	bf0c      	ite	eq
 801745e:	2201      	moveq	r2, #1
 8017460:	2200      	movne	r2, #0
 8017462:	b2d2      	uxtb	r2, r2
 8017464:	1a9b      	subs	r3, r3, r2
 8017466:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 8017468:	697a      	ldr	r2, [r7, #20]
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	4413      	add	r3, r2
 801746e:	617b      	str	r3, [r7, #20]
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	60bb      	str	r3, [r7, #8]
 8017474:	e00a      	b.n	801748c <lv_utils_bsearch+0x70>
        } else if(c < 0) {
 8017476:	693b      	ldr	r3, [r7, #16]
 8017478:	2b00      	cmp	r3, #0
 801747a:	da05      	bge.n	8017488 <lv_utils_bsearch+0x6c>
            n /= 2;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	085b      	lsrs	r3, r3, #1
 8017480:	607b      	str	r3, [r7, #4]
            middle = base;
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	617b      	str	r3, [r7, #20]
 8017486:	e001      	b.n	801748c <lv_utils_bsearch+0x70>
        } else {
            return (char *)middle;
 8017488:	697b      	ldr	r3, [r7, #20]
 801748a:	e003      	b.n	8017494 <lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d1ce      	bne.n	8017430 <lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 8017492:	2300      	movs	r3, #0
}
 8017494:	4618      	mov	r0, r3
 8017496:	3718      	adds	r7, #24
 8017498:	46bd      	mov	sp, r7
 801749a:	bd80      	pop	{r7, pc}

0801749c <lv_arc_create>:
 * @param par pointer to an object, it will be the parent of the new arc
 * @param copy pointer to a arc object, if not NULL then the new object will be copied from it
 * @return pointer to the created arc
 */
lv_obj_t * lv_arc_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b086      	sub	sp, #24
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
 80174a4:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("arc create started");

    /*Create the ancestor of arc*/
    lv_obj_t * new_arc = lv_obj_create(par, copy);
 80174a6:	6839      	ldr	r1, [r7, #0]
 80174a8:	6878      	ldr	r0, [r7, #4]
 80174aa:	f7f0 ff4d 	bl	8008348 <lv_obj_create>
 80174ae:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_arc);
 80174b0:	697b      	ldr	r3, [r7, #20]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d100      	bne.n	80174b8 <lv_arc_create+0x1c>
 80174b6:	e7fe      	b.n	80174b6 <lv_arc_create+0x1a>
    if(new_arc == NULL) return NULL;
 80174b8:	697b      	ldr	r3, [r7, #20]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d101      	bne.n	80174c2 <lv_arc_create+0x26>
 80174be:	2300      	movs	r3, #0
 80174c0:	e059      	b.n	8017576 <lv_arc_create+0xda>

    /*Allocate the arc type specific extended data*/
    lv_arc_ext_t * ext = lv_obj_allocate_ext_attr(new_arc, sizeof(lv_arc_ext_t));
 80174c2:	2104      	movs	r1, #4
 80174c4:	6978      	ldr	r0, [r7, #20]
 80174c6:	f7f2 fadb 	bl	8009a80 <lv_obj_allocate_ext_attr>
 80174ca:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d100      	bne.n	80174d4 <lv_arc_create+0x38>
 80174d2:	e7fe      	b.n	80174d2 <lv_arc_create+0x36>
    if(ext == NULL) return NULL;
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d101      	bne.n	80174de <lv_arc_create+0x42>
 80174da:	2300      	movs	r3, #0
 80174dc:	e04b      	b.n	8017576 <lv_arc_create+0xda>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_arc);
 80174de:	4b28      	ldr	r3, [pc, #160]	; (8017580 <lv_arc_create+0xe4>)
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d105      	bne.n	80174f2 <lv_arc_create+0x56>
 80174e6:	6978      	ldr	r0, [r7, #20]
 80174e8:	f7f2 fc7f 	bl	8009dea <lv_obj_get_signal_cb>
 80174ec:	4602      	mov	r2, r0
 80174ee:	4b24      	ldr	r3, [pc, #144]	; (8017580 <lv_arc_create+0xe4>)
 80174f0:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_arc);
 80174f2:	4b24      	ldr	r3, [pc, #144]	; (8017584 <lv_arc_create+0xe8>)
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d105      	bne.n	8017506 <lv_arc_create+0x6a>
 80174fa:	6978      	ldr	r0, [r7, #20]
 80174fc:	f7f2 fc81 	bl	8009e02 <lv_obj_get_design_cb>
 8017500:	4602      	mov	r2, r0
 8017502:	4b20      	ldr	r3, [pc, #128]	; (8017584 <lv_arc_create+0xe8>)
 8017504:	601a      	str	r2, [r3, #0]

    /*Initialize the allocated 'ext' */
    ext->angle_start = 45;
 8017506:	693b      	ldr	r3, [r7, #16]
 8017508:	222d      	movs	r2, #45	; 0x2d
 801750a:	801a      	strh	r2, [r3, #0]
    ext->angle_end   = 315;
 801750c:	693b      	ldr	r3, [r7, #16]
 801750e:	f240 123b 	movw	r2, #315	; 0x13b
 8017512:	805a      	strh	r2, [r3, #2]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_arc, lv_arc_signal);
 8017514:	491c      	ldr	r1, [pc, #112]	; (8017588 <lv_arc_create+0xec>)
 8017516:	6978      	ldr	r0, [r7, #20]
 8017518:	f7f2 fa96 	bl	8009a48 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_arc, lv_arc_design);
 801751c:	491b      	ldr	r1, [pc, #108]	; (801758c <lv_arc_create+0xf0>)
 801751e:	6978      	ldr	r0, [r7, #20]
 8017520:	f7f2 faa0 	bl	8009a64 <lv_obj_set_design_cb>

    /*Init the new arc arc*/
    if(copy == NULL) {
 8017524:	683b      	ldr	r3, [r7, #0]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d113      	bne.n	8017552 <lv_arc_create+0xb6>
        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801752a:	f00a faf9 	bl	8021b20 <lv_theme_get_current>
 801752e:	60b8      	str	r0, [r7, #8]
        if(th) {
 8017530:	68bb      	ldr	r3, [r7, #8]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d007      	beq.n	8017546 <lv_arc_create+0xaa>
            lv_arc_set_style(new_arc, LV_ARC_STYLE_MAIN, th->style.arc);
 8017536:	68bb      	ldr	r3, [r7, #8]
 8017538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801753a:	461a      	mov	r2, r3
 801753c:	2100      	movs	r1, #0
 801753e:	6978      	ldr	r0, [r7, #20]
 8017540:	f000 f851 	bl	80175e6 <lv_arc_set_style>
 8017544:	e016      	b.n	8017574 <lv_arc_create+0xd8>
        } else {
            lv_arc_set_style(new_arc, LV_ARC_STYLE_MAIN, &lv_style_plain_color);
 8017546:	4a12      	ldr	r2, [pc, #72]	; (8017590 <lv_arc_create+0xf4>)
 8017548:	2100      	movs	r1, #0
 801754a:	6978      	ldr	r0, [r7, #20]
 801754c:	f000 f84b 	bl	80175e6 <lv_arc_set_style>
 8017550:	e010      	b.n	8017574 <lv_arc_create+0xd8>
        }

    }
    /*Copy an existing arc*/
    else {
        lv_arc_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8017552:	6838      	ldr	r0, [r7, #0]
 8017554:	f7f2 fc61 	bl	8009e1a <lv_obj_get_ext_attr>
 8017558:	60f8      	str	r0, [r7, #12]
        ext->angle_start        = copy_ext->angle_start;
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017560:	693b      	ldr	r3, [r7, #16]
 8017562:	801a      	strh	r2, [r3, #0]
        ext->angle_end          = copy_ext->angle_end;
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	805a      	strh	r2, [r3, #2]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_arc);
 801756e:	6978      	ldr	r0, [r7, #20]
 8017570:	f7f2 f935 	bl	80097de <lv_obj_refresh_style>
    }

    LV_LOG_INFO("arc created");

    return new_arc;
 8017574:	697b      	ldr	r3, [r7, #20]
}
 8017576:	4618      	mov	r0, r3
 8017578:	3718      	adds	r7, #24
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}
 801757e:	bf00      	nop
 8017580:	200177a8 	.word	0x200177a8
 8017584:	200177ac 	.word	0x200177ac
 8017588:	0801790d 	.word	0x0801790d
 801758c:	08017641 	.word	0x08017641
 8017590:	2001bb00 	.word	0x2001bb00

08017594 <lv_arc_set_angles>:
 * @param arc pointer to an arc object
 * @param start the start angle [0..360]
 * @param end the end angle [0..360]
 */
void lv_arc_set_angles(lv_obj_t * arc, uint16_t start, uint16_t end)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b084      	sub	sp, #16
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
 801759c:	460b      	mov	r3, r1
 801759e:	807b      	strh	r3, [r7, #2]
 80175a0:	4613      	mov	r3, r2
 80175a2:	803b      	strh	r3, [r7, #0]
    lv_arc_ext_t * ext = lv_obj_get_ext_attr(arc);
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7f2 fc38 	bl	8009e1a <lv_obj_get_ext_attr>
 80175aa:	60f8      	str	r0, [r7, #12]

    if(start > 360) start = 360;
 80175ac:	887b      	ldrh	r3, [r7, #2]
 80175ae:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80175b2:	d902      	bls.n	80175ba <lv_arc_set_angles+0x26>
 80175b4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80175b8:	807b      	strh	r3, [r7, #2]
    if(end > 360) end = 360;
 80175ba:	883b      	ldrh	r3, [r7, #0]
 80175bc:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80175c0:	d902      	bls.n	80175c8 <lv_arc_set_angles+0x34>
 80175c2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80175c6:	803b      	strh	r3, [r7, #0]

    ext->angle_start = start;
 80175c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	801a      	strh	r2, [r3, #0]
    ext->angle_end   = end;
 80175d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	805a      	strh	r2, [r3, #2]

    lv_obj_invalidate(arc);
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f7f1 f9f2 	bl	80089c2 <lv_obj_invalidate>
}
 80175de:	bf00      	nop
 80175e0:	3710      	adds	r7, #16
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}

080175e6 <lv_arc_set_style>:
 * @param arc pointer to arc object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_arc_set_style(lv_obj_t * arc, lv_arc_style_t type, const lv_style_t * style)
{
 80175e6:	b580      	push	{r7, lr}
 80175e8:	b084      	sub	sp, #16
 80175ea:	af00      	add	r7, sp, #0
 80175ec:	60f8      	str	r0, [r7, #12]
 80175ee:	460b      	mov	r3, r1
 80175f0:	607a      	str	r2, [r7, #4]
 80175f2:	72fb      	strb	r3, [r7, #11]
    switch(type) {
 80175f4:	7afb      	ldrb	r3, [r7, #11]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d000      	beq.n	80175fc <lv_arc_set_style+0x16>
        case LV_ARC_STYLE_MAIN: lv_obj_set_style(arc, style); break;
    }
}
 80175fa:	e004      	b.n	8017606 <lv_arc_set_style+0x20>
        case LV_ARC_STYLE_MAIN: lv_obj_set_style(arc, style); break;
 80175fc:	6879      	ldr	r1, [r7, #4]
 80175fe:	68f8      	ldr	r0, [r7, #12]
 8017600:	f7f2 f8db 	bl	80097ba <lv_obj_set_style>
 8017604:	bf00      	nop
}
 8017606:	bf00      	nop
 8017608:	3710      	adds	r7, #16
 801760a:	46bd      	mov	sp, r7
 801760c:	bd80      	pop	{r7, pc}

0801760e <lv_arc_get_style>:
 * @param arc pointer to arc object
 * @param type which style should be get
 * @return style pointer to the style
 *  */
const lv_style_t * lv_arc_get_style(const lv_obj_t * arc, lv_arc_style_t type)
{
 801760e:	b580      	push	{r7, lr}
 8017610:	b084      	sub	sp, #16
 8017612:	af00      	add	r7, sp, #0
 8017614:	6078      	str	r0, [r7, #4]
 8017616:	460b      	mov	r3, r1
 8017618:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801761a:	2300      	movs	r3, #0
 801761c:	60fb      	str	r3, [r7, #12]

    switch(type) {
 801761e:	78fb      	ldrb	r3, [r7, #3]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d104      	bne.n	801762e <lv_arc_get_style+0x20>
        case LV_ARC_STYLE_MAIN: style = lv_obj_get_style(arc); break;
 8017624:	6878      	ldr	r0, [r7, #4]
 8017626:	f7f2 fb3d 	bl	8009ca4 <lv_obj_get_style>
 801762a:	60f8      	str	r0, [r7, #12]
 801762c:	e002      	b.n	8017634 <lv_arc_get_style+0x26>
        default: style = NULL; break;
 801762e:	2300      	movs	r3, #0
 8017630:	60fb      	str	r3, [r7, #12]
 8017632:	bf00      	nop
    }

    return style;
 8017634:	68fb      	ldr	r3, [r7, #12]
}
 8017636:	4618      	mov	r0, r3
 8017638:	3710      	adds	r7, #16
 801763a:	46bd      	mov	sp, r7
 801763c:	bd80      	pop	{r7, pc}
	...

08017640 <lv_arc_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_arc_design(lv_obj_t * arc, const lv_area_t * mask, lv_design_mode_t mode)
{
 8017640:	b5b0      	push	{r4, r5, r7, lr}
 8017642:	b0a0      	sub	sp, #128	; 0x80
 8017644:	af04      	add	r7, sp, #16
 8017646:	60f8      	str	r0, [r7, #12]
 8017648:	60b9      	str	r1, [r7, #8]
 801764a:	4613      	mov	r3, r2
 801764c:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 801764e:	79fb      	ldrb	r3, [r7, #7]
 8017650:	2b02      	cmp	r3, #2
 8017652:	d101      	bne.n	8017658 <lv_arc_design+0x18>
        return false;
 8017654:	2300      	movs	r3, #0
 8017656:	e152      	b.n	80178fe <lv_arc_design+0x2be>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017658:	79fb      	ldrb	r3, [r7, #7]
 801765a:	2b00      	cmp	r3, #0
 801765c:	f040 814e 	bne.w	80178fc <lv_arc_design+0x2bc>
        lv_arc_ext_t * ext       = lv_obj_get_ext_attr(arc);
 8017660:	68f8      	ldr	r0, [r7, #12]
 8017662:	f7f2 fbda 	bl	8009e1a <lv_obj_get_ext_attr>
 8017666:	66f8      	str	r0, [r7, #108]	; 0x6c
        const lv_style_t * style = lv_arc_get_style(arc, LV_ARC_STYLE_MAIN);
 8017668:	2100      	movs	r1, #0
 801766a:	68f8      	ldr	r0, [r7, #12]
 801766c:	f7ff ffcf 	bl	801760e <lv_arc_get_style>
 8017670:	66b8      	str	r0, [r7, #104]	; 0x68

        lv_coord_t r       = (LV_MATH_MIN(lv_obj_get_width(arc), lv_obj_get_height(arc))) / 2;
 8017672:	68f8      	ldr	r0, [r7, #12]
 8017674:	f7f2 fae6 	bl	8009c44 <lv_obj_get_width>
 8017678:	4603      	mov	r3, r0
 801767a:	461c      	mov	r4, r3
 801767c:	68f8      	ldr	r0, [r7, #12]
 801767e:	f7f2 faef 	bl	8009c60 <lv_obj_get_height>
 8017682:	4603      	mov	r3, r0
 8017684:	429c      	cmp	r4, r3
 8017686:	da08      	bge.n	801769a <lv_arc_design+0x5a>
 8017688:	68f8      	ldr	r0, [r7, #12]
 801768a:	f7f2 fadb 	bl	8009c44 <lv_obj_get_width>
 801768e:	4603      	mov	r3, r0
 8017690:	0fda      	lsrs	r2, r3, #31
 8017692:	4413      	add	r3, r2
 8017694:	105b      	asrs	r3, r3, #1
 8017696:	b21b      	sxth	r3, r3
 8017698:	e007      	b.n	80176aa <lv_arc_design+0x6a>
 801769a:	68f8      	ldr	r0, [r7, #12]
 801769c:	f7f2 fae0 	bl	8009c60 <lv_obj_get_height>
 80176a0:	4603      	mov	r3, r0
 80176a2:	0fda      	lsrs	r2, r3, #31
 80176a4:	4413      	add	r3, r2
 80176a6:	105b      	asrs	r3, r3, #1
 80176a8:	b21b      	sxth	r3, r3
 80176aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lv_coord_t x       = arc->coords.x1 + lv_obj_get_width(arc) / 2;
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80176b4:	b29c      	uxth	r4, r3
 80176b6:	68f8      	ldr	r0, [r7, #12]
 80176b8:	f7f2 fac4 	bl	8009c44 <lv_obj_get_width>
 80176bc:	4603      	mov	r3, r0
 80176be:	0fda      	lsrs	r2, r3, #31
 80176c0:	4413      	add	r3, r2
 80176c2:	105b      	asrs	r3, r3, #1
 80176c4:	b21b      	sxth	r3, r3
 80176c6:	b29b      	uxth	r3, r3
 80176c8:	4423      	add	r3, r4
 80176ca:	b29b      	uxth	r3, r3
 80176cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        lv_coord_t y       = arc->coords.y1 + lv_obj_get_height(arc) / 2;
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80176d6:	b29c      	uxth	r4, r3
 80176d8:	68f8      	ldr	r0, [r7, #12]
 80176da:	f7f2 fac1 	bl	8009c60 <lv_obj_get_height>
 80176de:	4603      	mov	r3, r0
 80176e0:	0fda      	lsrs	r2, r3, #31
 80176e2:	4413      	add	r3, r2
 80176e4:	105b      	asrs	r3, r3, #1
 80176e6:	b21b      	sxth	r3, r3
 80176e8:	b29b      	uxth	r3, r3
 80176ea:	4423      	add	r3, r4
 80176ec:	b29b      	uxth	r3, r3
 80176ee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        lv_opa_t opa_scale = lv_obj_get_opa_scale(arc);
 80176f2:	68f8      	ldr	r0, [r7, #12]
 80176f4:	f7f2 fb43 	bl	8009d7e <lv_obj_get_opa_scale>
 80176f8:	4603      	mov	r3, r0
 80176fa:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
        lv_draw_arc(x, y, r, mask, ext->angle_start, ext->angle_end, style, opa_scale);
 80176fe:	f8b7 5066 	ldrh.w	r5, [r7, #102]	; 0x66
 8017702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017708:	b29b      	uxth	r3, r3
 801770a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801770c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017710:	b292      	uxth	r2, r2
 8017712:	f9b7 4062 	ldrsh.w	r4, [r7, #98]	; 0x62
 8017716:	f9b7 0064 	ldrsh.w	r0, [r7, #100]	; 0x64
 801771a:	f897 1061 	ldrb.w	r1, [r7, #97]	; 0x61
 801771e:	9103      	str	r1, [sp, #12]
 8017720:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017722:	9102      	str	r1, [sp, #8]
 8017724:	9201      	str	r2, [sp, #4]
 8017726:	9300      	str	r3, [sp, #0]
 8017728:	68bb      	ldr	r3, [r7, #8]
 801772a:	462a      	mov	r2, r5
 801772c:	4621      	mov	r1, r4
 801772e:	f7f3 ff0f 	bl	800b550 <lv_draw_arc>

        /*Draw circle on the ends if enabled */
        if(style->line.rounded) {
 8017732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017734:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8017738:	f003 0301 	and.w	r3, r3, #1
 801773c:	b2db      	uxtb	r3, r3
 801773e:	2b00      	cmp	r3, #0
 8017740:	f000 80dc 	beq.w	80178fc <lv_arc_design+0x2bc>
            lv_coord_t thick_half = style->line.width / 2;
 8017744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017746:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 801774a:	0fda      	lsrs	r2, r3, #31
 801774c:	4413      	add	r3, r2
 801774e:	105b      	asrs	r3, r3, #1
 8017750:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t cir_x      = ((r - thick_half) * lv_trigo_sin(ext->angle_start) >> LV_TRIGO_SHIFT);
 8017754:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8017758:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801775c:	1ad4      	subs	r4, r2, r3
 801775e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017764:	4618      	mov	r0, r3
 8017766:	f7fe fe81 	bl	801646c <lv_trigo_sin>
 801776a:	4603      	mov	r3, r0
 801776c:	fb03 f304 	mul.w	r3, r3, r4
 8017770:	13db      	asrs	r3, r3, #15
 8017772:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_coord_t cir_y      = ((r - thick_half) * lv_trigo_sin(ext->angle_start + 90) >> LV_TRIGO_SHIFT);
 8017776:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 801777a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801777e:	1ad4      	subs	r4, r2, r3
 8017780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017786:	b29b      	uxth	r3, r3
 8017788:	335a      	adds	r3, #90	; 0x5a
 801778a:	b29b      	uxth	r3, r3
 801778c:	b21b      	sxth	r3, r3
 801778e:	4618      	mov	r0, r3
 8017790:	f7fe fe6c 	bl	801646c <lv_trigo_sin>
 8017794:	4603      	mov	r3, r0
 8017796:	fb03 f304 	mul.w	r3, r3, r4
 801779a:	13db      	asrs	r3, r3, #15
 801779c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            lv_style_t cir_style;
            lv_style_copy(&cir_style, &lv_style_plain);
 80177a0:	f107 0314 	add.w	r3, r7, #20
 80177a4:	4958      	ldr	r1, [pc, #352]	; (8017908 <lv_arc_design+0x2c8>)
 80177a6:	4618      	mov	r0, r3
 80177a8:	f7f3 fda6 	bl	800b2f8 <lv_style_copy>
            cir_style.body.grad_color = style->line.color;
 80177ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80177ae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80177b0:	833b      	strh	r3, [r7, #24]
            cir_style.body.main_color = cir_style.body.grad_color;
 80177b2:	8b3b      	ldrh	r3, [r7, #24]
 80177b4:	82fb      	strh	r3, [r7, #22]
            cir_style.body.radius     = LV_RADIUS_CIRCLE;
 80177b6:	f647 4318 	movw	r3, #31768	; 0x7c18
 80177ba:	837b      	strh	r3, [r7, #26]
            lv_area_t cir_area;
            cir_area.x1 = cir_x + x - thick_half;
 80177bc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80177c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80177c4:	4413      	add	r3, r2
 80177c6:	b29a      	uxth	r2, r3
 80177c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80177cc:	1ad3      	subs	r3, r2, r3
 80177ce:	b29b      	uxth	r3, r3
 80177d0:	b21b      	sxth	r3, r3
 80177d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            cir_area.y1 = cir_y + y - thick_half;
 80177d6:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80177da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80177de:	4413      	add	r3, r2
 80177e0:	b29a      	uxth	r2, r3
 80177e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80177e6:	1ad3      	subs	r3, r2, r3
 80177e8:	b29b      	uxth	r3, r3
 80177ea:	b21b      	sxth	r3, r3
 80177ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cir_area.x2 = cir_x + x + thick_half;
 80177f0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80177f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80177f8:	4413      	add	r3, r2
 80177fa:	b29a      	uxth	r2, r3
 80177fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8017800:	4413      	add	r3, r2
 8017802:	b29b      	uxth	r3, r3
 8017804:	b21b      	sxth	r3, r3
 8017806:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            cir_area.y2 = cir_y + y + thick_half;
 801780a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801780e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8017812:	4413      	add	r3, r2
 8017814:	b29a      	uxth	r2, r3
 8017816:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801781a:	4413      	add	r3, r2
 801781c:	b29b      	uxth	r3, r3
 801781e:	b21b      	sxth	r3, r3
 8017820:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_rect(&cir_area, mask, &cir_style, opa_scale);
 8017824:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017828:	f107 0214 	add.w	r2, r7, #20
 801782c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8017830:	68b9      	ldr	r1, [r7, #8]
 8017832:	f7f7 ffa6 	bl	800f782 <lv_draw_rect>

            cir_x = ((r - thick_half) * lv_trigo_sin(ext->angle_end) >> LV_TRIGO_SHIFT);
 8017836:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 801783a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801783e:	1ad4      	subs	r4, r2, r3
 8017840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017846:	4618      	mov	r0, r3
 8017848:	f7fe fe10 	bl	801646c <lv_trigo_sin>
 801784c:	4603      	mov	r3, r0
 801784e:	fb03 f304 	mul.w	r3, r3, r4
 8017852:	13db      	asrs	r3, r3, #15
 8017854:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            cir_y = ((r - thick_half) * lv_trigo_sin(ext->angle_end + 90) >> LV_TRIGO_SHIFT);
 8017858:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 801785c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8017860:	1ad4      	subs	r4, r2, r3
 8017862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017864:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017868:	b29b      	uxth	r3, r3
 801786a:	335a      	adds	r3, #90	; 0x5a
 801786c:	b29b      	uxth	r3, r3
 801786e:	b21b      	sxth	r3, r3
 8017870:	4618      	mov	r0, r3
 8017872:	f7fe fdfb 	bl	801646c <lv_trigo_sin>
 8017876:	4603      	mov	r3, r0
 8017878:	fb03 f304 	mul.w	r3, r3, r4
 801787c:	13db      	asrs	r3, r3, #15
 801787e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            cir_area.x1 = cir_x + x - thick_half;
 8017882:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8017886:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801788a:	4413      	add	r3, r2
 801788c:	b29a      	uxth	r2, r3
 801788e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8017892:	1ad3      	subs	r3, r2, r3
 8017894:	b29b      	uxth	r3, r3
 8017896:	b21b      	sxth	r3, r3
 8017898:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            cir_area.y1 = cir_y + y - thick_half;
 801789c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80178a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80178a4:	4413      	add	r3, r2
 80178a6:	b29a      	uxth	r2, r3
 80178a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80178ac:	1ad3      	subs	r3, r2, r3
 80178ae:	b29b      	uxth	r3, r3
 80178b0:	b21b      	sxth	r3, r3
 80178b2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cir_area.x2 = cir_x + x + thick_half;
 80178b6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80178ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80178be:	4413      	add	r3, r2
 80178c0:	b29a      	uxth	r2, r3
 80178c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80178c6:	4413      	add	r3, r2
 80178c8:	b29b      	uxth	r3, r3
 80178ca:	b21b      	sxth	r3, r3
 80178cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            cir_area.y2 = cir_y + y + thick_half;
 80178d0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80178d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80178d8:	4413      	add	r3, r2
 80178da:	b29a      	uxth	r2, r3
 80178dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80178e0:	4413      	add	r3, r2
 80178e2:	b29b      	uxth	r3, r3
 80178e4:	b21b      	sxth	r3, r3
 80178e6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_rect(&cir_area, mask, &cir_style, opa_scale);
 80178ea:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80178ee:	f107 0214 	add.w	r2, r7, #20
 80178f2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80178f6:	68b9      	ldr	r1, [r7, #8]
 80178f8:	f7f7 ff43 	bl	800f782 <lv_draw_rect>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 80178fc:	2301      	movs	r3, #1
}
 80178fe:	4618      	mov	r0, r3
 8017900:	3770      	adds	r7, #112	; 0x70
 8017902:	46bd      	mov	sp, r7
 8017904:	bdb0      	pop	{r4, r5, r7, pc}
 8017906:	bf00      	nop
 8017908:	2001ba10 	.word	0x2001ba10

0801790c <lv_arc_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_arc_signal(lv_obj_t * arc, lv_signal_t sign, void * param)
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b086      	sub	sp, #24
 8017910:	af00      	add	r7, sp, #0
 8017912:	60f8      	str	r0, [r7, #12]
 8017914:	460b      	mov	r3, r1
 8017916:	607a      	str	r2, [r7, #4]
 8017918:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(arc, sign, param);
 801791a:	4b18      	ldr	r3, [pc, #96]	; (801797c <lv_arc_signal+0x70>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	7af9      	ldrb	r1, [r7, #11]
 8017920:	687a      	ldr	r2, [r7, #4]
 8017922:	68f8      	ldr	r0, [r7, #12]
 8017924:	4798      	blx	r3
 8017926:	4603      	mov	r3, r0
 8017928:	75bb      	strb	r3, [r7, #22]
    if(res != LV_RES_OK) return res;
 801792a:	7dbb      	ldrb	r3, [r7, #22]
 801792c:	2b01      	cmp	r3, #1
 801792e:	d001      	beq.n	8017934 <lv_arc_signal+0x28>
 8017930:	7dbb      	ldrb	r3, [r7, #22]
 8017932:	e01e      	b.n	8017972 <lv_arc_signal+0x66>

    if(sign == LV_SIGNAL_CLEANUP) {
 8017934:	7afb      	ldrb	r3, [r7, #11]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d01a      	beq.n	8017970 <lv_arc_signal+0x64>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801793a:	7afb      	ldrb	r3, [r7, #11]
 801793c:	2b06      	cmp	r3, #6
 801793e:	d117      	bne.n	8017970 <lv_arc_signal+0x64>
        lv_obj_type_t * buf = param;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	613b      	str	r3, [r7, #16]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8017944:	2300      	movs	r3, #0
 8017946:	75fb      	strb	r3, [r7, #23]
 8017948:	e008      	b.n	801795c <lv_arc_signal+0x50>
            if(buf->type[i] == NULL) break;
 801794a:	7dfa      	ldrb	r2, [r7, #23]
 801794c:	693b      	ldr	r3, [r7, #16]
 801794e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d006      	beq.n	8017964 <lv_arc_signal+0x58>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8017956:	7dfb      	ldrb	r3, [r7, #23]
 8017958:	3301      	adds	r3, #1
 801795a:	75fb      	strb	r3, [r7, #23]
 801795c:	7dfb      	ldrb	r3, [r7, #23]
 801795e:	2b06      	cmp	r3, #6
 8017960:	d9f3      	bls.n	801794a <lv_arc_signal+0x3e>
 8017962:	e000      	b.n	8017966 <lv_arc_signal+0x5a>
            if(buf->type[i] == NULL) break;
 8017964:	bf00      	nop
        }
        buf->type[i] = "lv_arc";
 8017966:	7dfa      	ldrb	r2, [r7, #23]
 8017968:	693b      	ldr	r3, [r7, #16]
 801796a:	4905      	ldr	r1, [pc, #20]	; (8017980 <lv_arc_signal+0x74>)
 801796c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8017970:	7dbb      	ldrb	r3, [r7, #22]
}
 8017972:	4618      	mov	r0, r3
 8017974:	3718      	adds	r7, #24
 8017976:	46bd      	mov	sp, r7
 8017978:	bd80      	pop	{r7, pc}
 801797a:	bf00      	nop
 801797c:	200177a8 	.word	0x200177a8
 8017980:	0802c8b8 	.word	0x0802c8b8

08017984 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8017984:	b580      	push	{r7, lr}
 8017986:	b082      	sub	sp, #8
 8017988:	af00      	add	r7, sp, #0
 801798a:	6078      	str	r0, [r7, #4]
 801798c:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 801798e:	2208      	movs	r2, #8
 8017990:	6839      	ldr	r1, [r7, #0]
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	f012 fa0e 	bl	8029db4 <memcpy>
}
 8017998:	bf00      	nop
 801799a:	3708      	adds	r7, #8
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}

080179a0 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80179a0:	b480      	push	{r7}
 80179a2:	b083      	sub	sp, #12
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80179ae:	b29a      	uxth	r2, r3
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80179b6:	b29b      	uxth	r3, r3
 80179b8:	1ad3      	subs	r3, r2, r3
 80179ba:	b29b      	uxth	r3, r3
 80179bc:	3301      	adds	r3, #1
 80179be:	b29b      	uxth	r3, r3
 80179c0:	b21b      	sxth	r3, r3
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	370c      	adds	r7, #12
 80179c6:	46bd      	mov	sp, r7
 80179c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179cc:	4770      	bx	lr

080179ce <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80179ce:	b480      	push	{r7}
 80179d0:	b083      	sub	sp, #12
 80179d2:	af00      	add	r7, sp, #0
 80179d4:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80179dc:	b29a      	uxth	r2, r3
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80179e4:	b29b      	uxth	r3, r3
 80179e6:	1ad3      	subs	r3, r2, r3
 80179e8:	b29b      	uxth	r3, r3
 80179ea:	3301      	adds	r3, #1
 80179ec:	b29b      	uxth	r3, r3
 80179ee:	b21b      	sxth	r3, r3
}
 80179f0:	4618      	mov	r0, r3
 80179f2:	370c      	adds	r7, #12
 80179f4:	46bd      	mov	sp, r7
 80179f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fa:	4770      	bx	lr

080179fc <lv_bar_create>:
 * @param par pointer to an object, it will be the parent of the new bar
 * @param copy pointer to a bar object, if not NULL then the new object will be copied from it
 * @return pointer to the created bar
 */
lv_obj_t * lv_bar_create(lv_obj_t * par, const lv_obj_t * copy)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b086      	sub	sp, #24
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
 8017a04:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("lv_bar create started");

    /*Create the ancestor basic object*/
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 8017a06:	6839      	ldr	r1, [r7, #0]
 8017a08:	6878      	ldr	r0, [r7, #4]
 8017a0a:	f7f0 fc9d 	bl	8008348 <lv_obj_create>
 8017a0e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_bar);
 8017a10:	697b      	ldr	r3, [r7, #20]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d100      	bne.n	8017a18 <lv_bar_create+0x1c>
 8017a16:	e7fe      	b.n	8017a16 <lv_bar_create+0x1a>
    if(new_bar == NULL) return NULL;
 8017a18:	697b      	ldr	r3, [r7, #20]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d101      	bne.n	8017a22 <lv_bar_create+0x26>
 8017a1e:	2300      	movs	r3, #0
 8017a20:	e0a2      	b.n	8017b68 <lv_bar_create+0x16c>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_bar);
 8017a22:	4b53      	ldr	r3, [pc, #332]	; (8017b70 <lv_bar_create+0x174>)
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d105      	bne.n	8017a36 <lv_bar_create+0x3a>
 8017a2a:	6978      	ldr	r0, [r7, #20]
 8017a2c:	f7f2 f9dd 	bl	8009dea <lv_obj_get_signal_cb>
 8017a30:	4602      	mov	r2, r0
 8017a32:	4b4f      	ldr	r3, [pc, #316]	; (8017b70 <lv_bar_create+0x174>)
 8017a34:	601a      	str	r2, [r3, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_bar);
 8017a36:	4b4f      	ldr	r3, [pc, #316]	; (8017b74 <lv_bar_create+0x178>)
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d105      	bne.n	8017a4a <lv_bar_create+0x4e>
 8017a3e:	6978      	ldr	r0, [r7, #20]
 8017a40:	f7f2 f9df 	bl	8009e02 <lv_obj_get_design_cb>
 8017a44:	4602      	mov	r2, r0
 8017a46:	4b4b      	ldr	r3, [pc, #300]	; (8017b74 <lv_bar_create+0x178>)
 8017a48:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 8017a4a:	2114      	movs	r1, #20
 8017a4c:	6978      	ldr	r0, [r7, #20]
 8017a4e:	f7f2 f817 	bl	8009a80 <lv_obj_allocate_ext_attr>
 8017a52:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8017a54:	693b      	ldr	r3, [r7, #16]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d100      	bne.n	8017a5c <lv_bar_create+0x60>
 8017a5a:	e7fe      	b.n	8017a5a <lv_bar_create+0x5e>
    if(ext == NULL) return NULL;
 8017a5c:	693b      	ldr	r3, [r7, #16]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d101      	bne.n	8017a66 <lv_bar_create+0x6a>
 8017a62:	2300      	movs	r3, #0
 8017a64:	e080      	b.n	8017b68 <lv_bar_create+0x16c>

    ext->min_value = 0;
 8017a66:	693b      	ldr	r3, [r7, #16]
 8017a68:	2200      	movs	r2, #0
 8017a6a:	805a      	strh	r2, [r3, #2]
    ext->max_value = 100;
 8017a6c:	693b      	ldr	r3, [r7, #16]
 8017a6e:	2264      	movs	r2, #100	; 0x64
 8017a70:	809a      	strh	r2, [r3, #4]
    ext->cur_value = 0;
 8017a72:	693b      	ldr	r3, [r7, #16]
 8017a74:	2200      	movs	r2, #0
 8017a76:	801a      	strh	r2, [r3, #0]
#if LV_USE_ANIMATION
    ext->anim_time  = 200;
 8017a78:	693b      	ldr	r3, [r7, #16]
 8017a7a:	22c8      	movs	r2, #200	; 0xc8
 8017a7c:	819a      	strh	r2, [r3, #12]
    ext->anim_start = 0;
 8017a7e:	693b      	ldr	r3, [r7, #16]
 8017a80:	2200      	movs	r2, #0
 8017a82:	80da      	strh	r2, [r3, #6]
    ext->anim_end   = 0;
 8017a84:	693b      	ldr	r3, [r7, #16]
 8017a86:	2200      	movs	r2, #0
 8017a88:	811a      	strh	r2, [r3, #8]
    ext->anim_state = LV_BAR_ANIM_STATE_INV;
 8017a8a:	693b      	ldr	r3, [r7, #16]
 8017a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017a90:	815a      	strh	r2, [r3, #10]
#endif
    ext->sym         = 0;
 8017a92:	693a      	ldr	r2, [r7, #16]
 8017a94:	7b93      	ldrb	r3, [r2, #14]
 8017a96:	f36f 0300 	bfc	r3, #0, #1
 8017a9a:	7393      	strb	r3, [r2, #14]
    ext->style_indic = &lv_style_pretty_color;
 8017a9c:	693b      	ldr	r3, [r7, #16]
 8017a9e:	4a36      	ldr	r2, [pc, #216]	; (8017b78 <lv_bar_create+0x17c>)
 8017aa0:	611a      	str	r2, [r3, #16]

    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 8017aa2:	4936      	ldr	r1, [pc, #216]	; (8017b7c <lv_bar_create+0x180>)
 8017aa4:	6978      	ldr	r0, [r7, #20]
 8017aa6:	f7f1 ffcf 	bl	8009a48 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_bar, lv_bar_design);
 8017aaa:	4935      	ldr	r1, [pc, #212]	; (8017b80 <lv_bar_create+0x184>)
 8017aac:	6978      	ldr	r0, [r7, #20]
 8017aae:	f7f1 ffd9 	bl	8009a64 <lv_obj_set_design_cb>

    /*Init the new  bar object*/
    if(copy == NULL) {
 8017ab2:	683b      	ldr	r3, [r7, #0]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d12a      	bne.n	8017b0e <lv_bar_create+0x112>
        lv_obj_set_click(new_bar, false);
 8017ab8:	2100      	movs	r1, #0
 8017aba:	6978      	ldr	r0, [r7, #20]
 8017abc:	f7f1 fea3 	bl	8009806 <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 8017ac0:	2221      	movs	r2, #33	; 0x21
 8017ac2:	21c8      	movs	r1, #200	; 0xc8
 8017ac4:	6978      	ldr	r0, [r7, #20]
 8017ac6:	f7f1 f930 	bl	8008d2a <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 8017aca:	693b      	ldr	r3, [r7, #16]
 8017acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	4619      	mov	r1, r3
 8017ad4:	6978      	ldr	r0, [r7, #20]
 8017ad6:	f000 f857 	bl	8017b88 <lv_bar_set_value>

        lv_theme_t * th = lv_theme_get_current();
 8017ada:	f00a f821 	bl	8021b20 <lv_theme_get_current>
 8017ade:	60b8      	str	r0, [r7, #8]
        if(th) {
 8017ae0:	68bb      	ldr	r3, [r7, #8]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d00e      	beq.n	8017b04 <lv_bar_create+0x108>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->style.bar.bg);
 8017ae6:	68bb      	ldr	r3, [r7, #8]
 8017ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017aea:	461a      	mov	r2, r3
 8017aec:	2100      	movs	r1, #0
 8017aee:	6978      	ldr	r0, [r7, #20]
 8017af0:	f000 f91a 	bl	8017d28 <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->style.bar.indic);
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017af8:	461a      	mov	r2, r3
 8017afa:	2101      	movs	r1, #1
 8017afc:	6978      	ldr	r0, [r7, #20]
 8017afe:	f000 f913 	bl	8017d28 <lv_bar_set_style>
 8017b02:	e030      	b.n	8017b66 <lv_bar_create+0x16a>
        } else {
            lv_obj_set_style(new_bar, &lv_style_pretty);
 8017b04:	491f      	ldr	r1, [pc, #124]	; (8017b84 <lv_bar_create+0x188>)
 8017b06:	6978      	ldr	r0, [r7, #20]
 8017b08:	f7f1 fe57 	bl	80097ba <lv_obj_set_style>
 8017b0c:	e02b      	b.n	8017b66 <lv_bar_create+0x16a>
        }
    } else {
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 8017b0e:	6838      	ldr	r0, [r7, #0]
 8017b10:	f7f2 f983 	bl	8009e1a <lv_obj_get_ext_attr>
 8017b14:	60f8      	str	r0, [r7, #12]
        ext->min_value          = ext_copy->min_value;
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017b1c:	693b      	ldr	r3, [r7, #16]
 8017b1e:	805a      	strh	r2, [r3, #2]
        ext->max_value          = ext_copy->max_value;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8017b26:	693b      	ldr	r3, [r7, #16]
 8017b28:	809a      	strh	r2, [r3, #4]
        ext->cur_value          = ext_copy->cur_value;
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017b30:	693b      	ldr	r3, [r7, #16]
 8017b32:	801a      	strh	r2, [r3, #0]
        ext->style_indic        = ext_copy->style_indic;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	691a      	ldr	r2, [r3, #16]
 8017b38:	693b      	ldr	r3, [r7, #16]
 8017b3a:	611a      	str	r2, [r3, #16]
        ext->sym                = ext_copy->sym;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	7b9b      	ldrb	r3, [r3, #14]
 8017b40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017b44:	b2d9      	uxtb	r1, r3
 8017b46:	693a      	ldr	r2, [r7, #16]
 8017b48:	7b93      	ldrb	r3, [r2, #14]
 8017b4a:	f361 0300 	bfi	r3, r1, #0, #1
 8017b4e:	7393      	strb	r3, [r2, #14]
        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_bar);
 8017b50:	6978      	ldr	r0, [r7, #20]
 8017b52:	f7f1 fe44 	bl	80097de <lv_obj_refresh_style>

        lv_bar_set_value(new_bar, ext->cur_value, false);
 8017b56:	693b      	ldr	r3, [r7, #16]
 8017b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	4619      	mov	r1, r3
 8017b60:	6978      	ldr	r0, [r7, #20]
 8017b62:	f000 f811 	bl	8017b88 <lv_bar_set_value>
    }

    LV_LOG_INFO("bar created");

    return new_bar;
 8017b66:	697b      	ldr	r3, [r7, #20]
}
 8017b68:	4618      	mov	r0, r3
 8017b6a:	3718      	adds	r7, #24
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	bd80      	pop	{r7, pc}
 8017b70:	200177b4 	.word	0x200177b4
 8017b74:	200177b0 	.word	0x200177b0
 8017b78:	2001b830 	.word	0x2001b830
 8017b7c:	080182b1 	.word	0x080182b1
 8017b80:	08017e21 	.word	0x08017e21
 8017b84:	2001b920 	.word	0x2001b920

08017b88 <lv_bar_set_value>:
 * @param bar pointer to a bar object
 * @param value new value
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediatelly
 */
void lv_bar_set_value(lv_obj_t * bar, int16_t value, lv_anim_enable_t anim)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b08e      	sub	sp, #56	; 0x38
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
 8017b90:	460b      	mov	r3, r1
 8017b92:	807b      	strh	r3, [r7, #2]
 8017b94:	4613      	mov	r3, r2
 8017b96:	707b      	strb	r3, [r7, #1]
#if LV_USE_ANIMATION == 0
    anim = false;
#endif
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f7f2 f93e 	bl	8009e1a <lv_obj_get_ext_attr>
 8017b9e:	6378      	str	r0, [r7, #52]	; 0x34
    if(ext->cur_value == value) return;
 8017ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ba6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017baa:	429a      	cmp	r2, r3
 8017bac:	d063      	beq.n	8017c76 <lv_bar_set_value+0xee>

    int16_t new_value;
    new_value = value > ext->max_value ? ext->max_value : value;
 8017bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017bb4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017bb8:	4293      	cmp	r3, r2
 8017bba:	bfa8      	it	ge
 8017bbc:	4613      	movge	r3, r2
 8017bbe:	867b      	strh	r3, [r7, #50]	; 0x32
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8017bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017bc6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8017bca:	4293      	cmp	r3, r2
 8017bcc:	bfb8      	it	lt
 8017bce:	4613      	movlt	r3, r2
 8017bd0:	867b      	strh	r3, [r7, #50]	; 0x32

    if(ext->cur_value == new_value) return;
 8017bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017bd8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8017bdc:	429a      	cmp	r2, r3
 8017bde:	d04c      	beq.n	8017c7a <lv_bar_set_value+0xf2>

    if(anim == LV_ANIM_OFF) {
 8017be0:	787b      	ldrb	r3, [r7, #1]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d106      	bne.n	8017bf4 <lv_bar_set_value+0x6c>
        ext->cur_value = new_value;
 8017be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017be8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8017bea:	801a      	strh	r2, [r3, #0]
        lv_obj_invalidate(bar);
 8017bec:	6878      	ldr	r0, [r7, #4]
 8017bee:	f7f0 fee8 	bl	80089c2 <lv_obj_invalidate>
 8017bf2:	e043      	b.n	8017c7c <lv_bar_set_value+0xf4>
    } else {
#if LV_USE_ANIMATION
        /*No animation in progress -> simply set the values*/
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 8017bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bf6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8017bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017bfe:	d108      	bne.n	8017c12 <lv_bar_set_value+0x8a>
            ext->anim_start = ext->cur_value;
 8017c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c08:	80da      	strh	r2, [r3, #6]
            ext->anim_end   = new_value;
 8017c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c0c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8017c0e:	811a      	strh	r2, [r3, #8]
 8017c10:	e007      	b.n	8017c22 <lv_bar_set_value+0x9a>
        }
        /*Animation in progress. Start from the animation end value*/
        else {
            ext->anim_start = ext->anim_end;
 8017c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c14:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8017c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c1a:	80da      	strh	r2, [r3, #6]
            ext->anim_end   = new_value;
 8017c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c1e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8017c20:	811a      	strh	r2, [r3, #8]
        }

        lv_anim_t a;
        a.var            = bar;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	60bb      	str	r3, [r7, #8]
        a.start          = LV_BAR_ANIM_STATE_START;
 8017c26:	2300      	movs	r3, #0
 8017c28:	61bb      	str	r3, [r7, #24]
        a.end            = LV_BAR_ANIM_STATE_END;
 8017c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017c2e:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_bar_anim;
 8017c30:	4b14      	ldr	r3, [pc, #80]	; (8017c84 <lv_bar_set_value+0xfc>)
 8017c32:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 8017c34:	4b14      	ldr	r3, [pc, #80]	; (8017c88 <lv_bar_set_value+0x100>)
 8017c36:	613b      	str	r3, [r7, #16]
        a.ready_cb       = lv_bar_anim_ready;
 8017c38:	4b14      	ldr	r3, [pc, #80]	; (8017c8c <lv_bar_set_value+0x104>)
 8017c3a:	617b      	str	r3, [r7, #20]
        a.act_time       = 0;
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = ext->anim_time;
 8017c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c42:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8017c46:	b29b      	uxth	r3, r3
 8017c48:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 8017c4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017c4e:	f36f 0300 	bfc	r3, #0, #1
 8017c52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 8017c56:	2300      	movs	r3, #0
 8017c58:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 8017c5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017c5e:	f36f 0341 	bfc	r3, #1, #1
 8017c62:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 8017c66:	2300      	movs	r3, #0
 8017c68:	84fb      	strh	r3, [r7, #38]	; 0x26

        lv_anim_create(&a);
 8017c6a:	f107 0308 	add.w	r3, r7, #8
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f7fd fb9e 	bl	80153b0 <lv_anim_create>
 8017c74:	e002      	b.n	8017c7c <lv_bar_set_value+0xf4>
    if(ext->cur_value == value) return;
 8017c76:	bf00      	nop
 8017c78:	e000      	b.n	8017c7c <lv_bar_set_value+0xf4>
    if(ext->cur_value == new_value) return;
 8017c7a:	bf00      	nop
#endif
    }
}
 8017c7c:	3738      	adds	r7, #56	; 0x38
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	bd80      	pop	{r7, pc}
 8017c82:	bf00      	nop
 8017c84:	0801834d 	.word	0x0801834d
 8017c88:	08015501 	.word	0x08015501
 8017c8c:	08018375 	.word	0x08018375

08017c90 <lv_bar_set_range>:
 * @param bar pointer to the bar object
 * @param min minimum value
 * @param max maximum value
 */
void lv_bar_set_range(lv_obj_t * bar, int16_t min, int16_t max)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b084      	sub	sp, #16
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
 8017c98:	460b      	mov	r3, r1
 8017c9a:	807b      	strh	r3, [r7, #2]
 8017c9c:	4613      	mov	r3, r2
 8017c9e:	803b      	strh	r3, [r7, #0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8017ca0:	6878      	ldr	r0, [r7, #4]
 8017ca2:	f7f2 f8ba 	bl	8009e1a <lv_obj_get_ext_attr>
 8017ca6:	60f8      	str	r0, [r7, #12]
    if(ext->min_value == min && ext->max_value == max) return;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017cae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017cb2:	429a      	cmp	r2, r3
 8017cb4:	d106      	bne.n	8017cc4 <lv_bar_set_range+0x34>
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017cbc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d02d      	beq.n	8017d20 <lv_bar_set_range+0x90>

    ext->max_value = max;
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	883a      	ldrh	r2, [r7, #0]
 8017cc8:	809a      	strh	r2, [r3, #4]
    ext->min_value = min;
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	887a      	ldrh	r2, [r7, #2]
 8017cce:	805a      	strh	r2, [r3, #2]
    if(ext->cur_value > max) {
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017cd6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8017cda:	429a      	cmp	r2, r3
 8017cdc:	da0a      	bge.n	8017cf4 <lv_bar_set_range+0x64>
        ext->cur_value = max;
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	883a      	ldrh	r2, [r7, #0]
 8017ce2:	801a      	strh	r2, [r3, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017cea:	2200      	movs	r2, #0
 8017cec:	4619      	mov	r1, r3
 8017cee:	6878      	ldr	r0, [r7, #4]
 8017cf0:	f7ff ff4a 	bl	8017b88 <lv_bar_set_value>
    }
    if(ext->cur_value < min) {
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017cfa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017cfe:	429a      	cmp	r2, r3
 8017d00:	dd0a      	ble.n	8017d18 <lv_bar_set_range+0x88>
        ext->cur_value = min;
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	887a      	ldrh	r2, [r7, #2]
 8017d06:	801a      	strh	r2, [r3, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d0e:	2200      	movs	r2, #0
 8017d10:	4619      	mov	r1, r3
 8017d12:	6878      	ldr	r0, [r7, #4]
 8017d14:	f7ff ff38 	bl	8017b88 <lv_bar_set_value>
    }
    lv_obj_invalidate(bar);
 8017d18:	6878      	ldr	r0, [r7, #4]
 8017d1a:	f7f0 fe52 	bl	80089c2 <lv_obj_invalidate>
 8017d1e:	e000      	b.n	8017d22 <lv_bar_set_range+0x92>
    if(ext->min_value == min && ext->max_value == max) return;
 8017d20:	bf00      	nop
}
 8017d22:	3710      	adds	r7, #16
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd80      	pop	{r7, pc}

08017d28 <lv_bar_set_style>:
 * @param bar pointer to a bar object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_bar_set_style(lv_obj_t * bar, lv_bar_style_t type, const lv_style_t * style)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b086      	sub	sp, #24
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	60f8      	str	r0, [r7, #12]
 8017d30:	460b      	mov	r3, r1
 8017d32:	607a      	str	r2, [r7, #4]
 8017d34:	72fb      	strb	r3, [r7, #11]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8017d36:	68f8      	ldr	r0, [r7, #12]
 8017d38:	f7f2 f86f 	bl	8009e1a <lv_obj_get_ext_attr>
 8017d3c:	6178      	str	r0, [r7, #20]

    switch(type) {
 8017d3e:	7afb      	ldrb	r3, [r7, #11]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d002      	beq.n	8017d4a <lv_bar_set_style+0x22>
 8017d44:	2b01      	cmp	r3, #1
 8017d46:	d005      	beq.n	8017d54 <lv_bar_set_style+0x2c>
        case LV_BAR_STYLE_INDIC:
            ext->style_indic = style;
            lv_obj_refresh_ext_draw_pad(bar);
            break;
    }
}
 8017d48:	e00b      	b.n	8017d62 <lv_bar_set_style+0x3a>
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 8017d4a:	6879      	ldr	r1, [r7, #4]
 8017d4c:	68f8      	ldr	r0, [r7, #12]
 8017d4e:	f7f1 fd34 	bl	80097ba <lv_obj_set_style>
 8017d52:	e006      	b.n	8017d62 <lv_bar_set_style+0x3a>
            ext->style_indic = style;
 8017d54:	697b      	ldr	r3, [r7, #20]
 8017d56:	687a      	ldr	r2, [r7, #4]
 8017d58:	611a      	str	r2, [r3, #16]
            lv_obj_refresh_ext_draw_pad(bar);
 8017d5a:	68f8      	ldr	r0, [r7, #12]
 8017d5c:	f7f1 fea6 	bl	8009aac <lv_obj_refresh_ext_draw_pad>
            break;
 8017d60:	bf00      	nop
}
 8017d62:	bf00      	nop
 8017d64:	3718      	adds	r7, #24
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}

08017d6a <lv_bar_get_value>:
 * Get the value of a bar
 * @param bar pointer to a bar object
 * @return the value of the bar
 */
int16_t lv_bar_get_value(const lv_obj_t * bar)
{
 8017d6a:	b580      	push	{r7, lr}
 8017d6c:	b084      	sub	sp, #16
 8017d6e:	af00      	add	r7, sp, #0
 8017d70:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8017d72:	6878      	ldr	r0, [r7, #4]
 8017d74:	f7f2 f851 	bl	8009e1a <lv_obj_get_ext_attr>
 8017d78:	60f8      	str	r0, [r7, #12]
    /*If animated tell that it's already at the end value*/
#if LV_USE_ANIMATION
    if(ext->anim_state != LV_BAR_ANIM_STATE_INV) return ext->anim_end;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8017d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d84:	d003      	beq.n	8017d8e <lv_bar_get_value+0x24>
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8017d8c:	e002      	b.n	8017d94 <lv_bar_get_value+0x2a>
#endif
    /*No animation, simple return the current value*/
    return ext->cur_value;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8017d94:	4618      	mov	r0, r3
 8017d96:	3710      	adds	r7, #16
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd80      	pop	{r7, pc}

08017d9c <lv_bar_get_min_value>:
 * Get the minimum value of a bar
 * @param bar pointer to a bar object
 * @return the minimum value of the bar
 */
int16_t lv_bar_get_min_value(const lv_obj_t * bar)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b084      	sub	sp, #16
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8017da4:	6878      	ldr	r0, [r7, #4]
 8017da6:	f7f2 f838 	bl	8009e1a <lv_obj_get_ext_attr>
 8017daa:	60f8      	str	r0, [r7, #12]
    return ext->min_value;
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8017db2:	4618      	mov	r0, r3
 8017db4:	3710      	adds	r7, #16
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}

08017dba <lv_bar_get_max_value>:
 * Get the maximum value of a bar
 * @param bar pointer to a bar object
 * @return the maximum value of the bar
 */
int16_t lv_bar_get_max_value(const lv_obj_t * bar)
{
 8017dba:	b580      	push	{r7, lr}
 8017dbc:	b084      	sub	sp, #16
 8017dbe:	af00      	add	r7, sp, #0
 8017dc0:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8017dc2:	6878      	ldr	r0, [r7, #4]
 8017dc4:	f7f2 f829 	bl	8009e1a <lv_obj_get_ext_attr>
 8017dc8:	60f8      	str	r0, [r7, #12]
    return ext->max_value;
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	3710      	adds	r7, #16
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}

08017dd8 <lv_bar_get_style>:
 * @param bar pointer to a bar object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_bar_get_style(const lv_obj_t * bar, lv_bar_style_t type)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b084      	sub	sp, #16
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
 8017de0:	460b      	mov	r3, r1
 8017de2:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8017de4:	2300      	movs	r3, #0
 8017de6:	60fb      	str	r3, [r7, #12]
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8017de8:	6878      	ldr	r0, [r7, #4]
 8017dea:	f7f2 f816 	bl	8009e1a <lv_obj_get_ext_attr>
 8017dee:	60b8      	str	r0, [r7, #8]

    switch(type) {
 8017df0:	78fb      	ldrb	r3, [r7, #3]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d002      	beq.n	8017dfc <lv_bar_get_style+0x24>
 8017df6:	2b01      	cmp	r3, #1
 8017df8:	d005      	beq.n	8017e06 <lv_bar_get_style+0x2e>
 8017dfa:	e008      	b.n	8017e0e <lv_bar_get_style+0x36>
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 8017dfc:	6878      	ldr	r0, [r7, #4]
 8017dfe:	f7f1 ff51 	bl	8009ca4 <lv_obj_get_style>
 8017e02:	60f8      	str	r0, [r7, #12]
 8017e04:	e006      	b.n	8017e14 <lv_bar_get_style+0x3c>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 8017e06:	68bb      	ldr	r3, [r7, #8]
 8017e08:	691b      	ldr	r3, [r3, #16]
 8017e0a:	60fb      	str	r3, [r7, #12]
 8017e0c:	e002      	b.n	8017e14 <lv_bar_get_style+0x3c>
        default: style = NULL; break;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	60fb      	str	r3, [r7, #12]
 8017e12:	bf00      	nop
    }

    return style;
 8017e14:	68fb      	ldr	r3, [r7, #12]
}
 8017e16:	4618      	mov	r0, r3
 8017e18:	3710      	adds	r7, #16
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}
	...

08017e20 <lv_bar_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_bar_design(lv_obj_t * bar, const lv_area_t * mask, lv_design_mode_t mode)
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b0a0      	sub	sp, #128	; 0x80
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	60f8      	str	r0, [r7, #12]
 8017e28:	60b9      	str	r1, [r7, #8]
 8017e2a:	4613      	mov	r3, r2
 8017e2c:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8017e2e:	79fb      	ldrb	r3, [r7, #7]
 8017e30:	2b02      	cmp	r3, #2
 8017e32:	d107      	bne.n	8017e44 <lv_bar_design+0x24>
        /*Return false if the object is not covers the mask area*/
        return ancestor_design_f(bar, mask, mode);
 8017e34:	4bab      	ldr	r3, [pc, #684]	; (80180e4 <lv_bar_design+0x2c4>)
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	79fa      	ldrb	r2, [r7, #7]
 8017e3a:	68b9      	ldr	r1, [r7, #8]
 8017e3c:	68f8      	ldr	r0, [r7, #12]
 8017e3e:	4798      	blx	r3
 8017e40:	4603      	mov	r3, r0
 8017e42:	e231      	b.n	80182a8 <lv_bar_design+0x488>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017e44:	79fb      	ldrb	r3, [r7, #7]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	f040 8205 	bne.w	8018256 <lv_bar_design+0x436>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 8017e4c:	68f8      	ldr	r0, [r7, #12]
 8017e4e:	f7f1 ff96 	bl	8009d7e <lv_obj_get_opa_scale>
 8017e52:	4603      	mov	r3, r0
 8017e54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        ancestor_design_f(bar, mask, mode);
#else
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(bar)) {
 8017e58:	68f8      	ldr	r0, [r7, #12]
 8017e5a:	f7f1 fff6 	bl	8009e4a <lv_obj_is_focused>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d017      	beq.n	8017e94 <lv_bar_design+0x74>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 8017e64:	2100      	movs	r1, #0
 8017e66:	68f8      	ldr	r0, [r7, #12]
 8017e68:	f7ff ffb6 	bl	8017dd8 <lv_bar_get_style>
 8017e6c:	6738      	str	r0, [r7, #112]	; 0x70
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 8017e6e:	f107 0314 	add.w	r3, r7, #20
 8017e72:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8017e74:	4618      	mov	r0, r3
 8017e76:	f7f3 fa3f 	bl	800b2f8 <lv_style_copy>
            style_tmp.body.border.width = 0;
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	843b      	strh	r3, [r7, #32]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	f103 0010 	add.w	r0, r3, #16
 8017e84:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8017e88:	f107 0214 	add.w	r2, r7, #20
 8017e8c:	68b9      	ldr	r1, [r7, #8]
 8017e8e:	f7f7 fc78 	bl	800f782 <lv_draw_rect>
 8017e92:	e005      	b.n	8017ea0 <lv_bar_design+0x80>
        } else {
            ancestor_design_f(bar, mask, mode);
 8017e94:	4b93      	ldr	r3, [pc, #588]	; (80180e4 <lv_bar_design+0x2c4>)
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	79fa      	ldrb	r2, [r7, #7]
 8017e9a:	68b9      	ldr	r1, [r7, #8]
 8017e9c:	68f8      	ldr	r0, [r7, #12]
 8017e9e:	4798      	blx	r3
        }
#endif
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8017ea0:	68f8      	ldr	r0, [r7, #12]
 8017ea2:	f7f1 ffba 	bl	8009e1a <lv_obj_get_ext_attr>
 8017ea6:	66f8      	str	r0, [r7, #108]	; 0x6c

        if(ext->cur_value != ext->min_value || ext->sym
 8017ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017eaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017eb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	d10d      	bne.n	8017ed4 <lv_bar_design+0xb4>
 8017eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017eba:	7b9b      	ldrb	r3, [r3, #14]
 8017ebc:	f003 0301 	and.w	r3, r3, #1
 8017ec0:	b2db      	uxtb	r3, r3
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d106      	bne.n	8017ed4 <lv_bar_design+0xb4>
#if LV_USE_ANIMATION
           || ext->anim_start != LV_BAR_ANIM_STATE_INV
 8017ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ec8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017ed0:	f000 81e9 	beq.w	80182a6 <lv_bar_design+0x486>
#endif
        ) {
            const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
 8017ed4:	2101      	movs	r1, #1
 8017ed6:	68f8      	ldr	r0, [r7, #12]
 8017ed8:	f7ff ff7e 	bl	8017dd8 <lv_bar_get_style>
 8017edc:	66b8      	str	r0, [r7, #104]	; 0x68
            lv_area_t indic_area;
            lv_area_copy(&indic_area, &bar->coords);
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	f103 0210 	add.w	r2, r3, #16
 8017ee4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017ee8:	4611      	mov	r1, r2
 8017eea:	4618      	mov	r0, r3
 8017eec:	f7ff fd4a 	bl	8017984 <lv_area_copy>
            indic_area.x1 += style_indic->body.padding.left;
 8017ef0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8017ef4:	b29a      	uxth	r2, r3
 8017ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017ef8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8017efc:	b29b      	uxth	r3, r3
 8017efe:	4413      	add	r3, r2
 8017f00:	b29b      	uxth	r3, r3
 8017f02:	b21b      	sxth	r3, r3
 8017f04:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            indic_area.x2 -= style_indic->body.padding.right;
 8017f08:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8017f0c:	b29a      	uxth	r2, r3
 8017f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017f10:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017f14:	b29b      	uxth	r3, r3
 8017f16:	1ad3      	subs	r3, r2, r3
 8017f18:	b29b      	uxth	r3, r3
 8017f1a:	b21b      	sxth	r3, r3
 8017f1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            indic_area.y1 += style_indic->body.padding.top;
 8017f20:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8017f24:	b29a      	uxth	r2, r3
 8017f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017f28:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8017f2c:	b29b      	uxth	r3, r3
 8017f2e:	4413      	add	r3, r2
 8017f30:	b29b      	uxth	r3, r3
 8017f32:	b21b      	sxth	r3, r3
 8017f34:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            indic_area.y2 -= style_indic->body.padding.bottom;
 8017f38:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8017f3c:	b29a      	uxth	r2, r3
 8017f3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017f40:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017f44:	b29b      	uxth	r3, r3
 8017f46:	1ad3      	subs	r3, r2, r3
 8017f48:	b29b      	uxth	r3, r3
 8017f4a:	b21b      	sxth	r3, r3
 8017f4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_coord_t w = lv_area_get_width(&indic_area);
 8017f50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017f54:	4618      	mov	r0, r3
 8017f56:	f7ff fd23 	bl	80179a0 <lv_area_get_width>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
            lv_coord_t h = lv_area_get_height(&indic_area);
 8017f60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017f64:	4618      	mov	r0, r3
 8017f66:	f7ff fd32 	bl	80179ce <lv_area_get_height>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

            if(w >= h) {
 8017f70:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8017f74:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8017f78:	429a      	cmp	r2, r3
 8017f7a:	f2c0 80b5 	blt.w	80180e8 <lv_bar_design+0x2c8>
                /*Horizontal*/
#if LV_USE_ANIMATION
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 8017f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017f80:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8017f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f88:	d043      	beq.n	8018012 <lv_bar_design+0x1f2>
                    /*Calculate the coordinates of anim. start and end*/
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8017f8a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8017f8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017f90:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8017f94:	4611      	mov	r1, r2
 8017f96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017f98:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017f9c:	1a8a      	subs	r2, r1, r2
 8017f9e:	fb02 f203 	mul.w	r2, r2, r3
 8017fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017fa4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017fa8:	4619      	mov	r1, r3
 8017faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017fac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017fb0:	1acb      	subs	r3, r1, r3
 8017fb2:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 8017fb6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8017fba:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8017fbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017fc0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017fc4:	4611      	mov	r1, r2
 8017fc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017fc8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017fcc:	1a8a      	subs	r2, r1, r2
 8017fce:	fb02 f203 	mul.w	r2, r2, r3
 8017fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017fd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017fd8:	4619      	mov	r1, r3
 8017fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017fdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017fe0:	1acb      	subs	r3, r1, r3
 8017fe2:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 8017fe6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    indic_area.x2 =
                        anim_start_x + (((anim_end_x - anim_start_x) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 8017fea:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8017fee:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8017ff2:	1ad3      	subs	r3, r2, r3
 8017ff4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017ff6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8017ffa:	fb02 f303 	mul.w	r3, r2, r3
 8017ffe:	121b      	asrs	r3, r3, #8
 8018000:	b29a      	uxth	r2, r3
 8018002:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8018006:	4413      	add	r3, r2
 8018008:	b29b      	uxth	r3, r3
 801800a:	b21b      	sxth	r3, r3
                    indic_area.x2 =
 801800c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8018010:	e018      	b.n	8018044 <lv_bar_design+0x224>
                } else
#endif
                {
                    indic_area.x2 =
                        (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8018012:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8018016:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018018:	f9b2 2000 	ldrsh.w	r2, [r2]
 801801c:	4611      	mov	r1, r2
 801801e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018020:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8018024:	1a8a      	subs	r2, r1, r2
 8018026:	fb02 f203 	mul.w	r2, r2, r3
 801802a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801802c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018030:	4619      	mov	r1, r3
 8018032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018038:	1acb      	subs	r3, r1, r3
 801803a:	fb92 f3f3 	sdiv	r3, r2, r3
                    indic_area.x2 =
 801803e:	b21b      	sxth	r3, r3
 8018040:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                }

                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 8018044:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8018048:	b29a      	uxth	r2, r3
 801804a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801804e:	b29b      	uxth	r3, r3
 8018050:	4413      	add	r3, r2
 8018052:	b29b      	uxth	r3, r3
 8018054:	3b01      	subs	r3, #1
 8018056:	b29b      	uxth	r3, r3
 8018058:	b21b      	sxth	r3, r3
 801805a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 801805e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018060:	7b9b      	ldrb	r3, [r3, #14]
 8018062:	f003 0301 	and.w	r3, r3, #1
 8018066:	b2db      	uxtb	r3, r3
 8018068:	2b00      	cmp	r3, #0
 801806a:	f000 80eb 	beq.w	8018244 <lv_bar_design+0x424>
 801806e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018070:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018074:	2b00      	cmp	r3, #0
 8018076:	f280 80e5 	bge.w	8018244 <lv_bar_design+0x424>
 801807a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801807c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018080:	2b00      	cmp	r3, #0
 8018082:	f340 80df 	ble.w	8018244 <lv_bar_design+0x424>
                    /*Calculate the coordinate of the zero point*/
                    lv_coord_t zero;
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 8018086:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801808a:	b29a      	uxth	r2, r3
 801808c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801808e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018092:	425b      	negs	r3, r3
 8018094:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 8018098:	fb01 f103 	mul.w	r1, r1, r3
 801809c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801809e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80180a2:	4618      	mov	r0, r3
 80180a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80180aa:	1ac3      	subs	r3, r0, r3
 80180ac:	fb91 f3f3 	sdiv	r3, r1, r3
 80180b0:	b29b      	uxth	r3, r3
 80180b2:	4413      	add	r3, r2
 80180b4:	b29b      	uxth	r3, r3
 80180b6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    if(indic_area.x2 > zero)
 80180ba:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80180be:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 80180c2:	429a      	cmp	r2, r3
 80180c4:	da04      	bge.n	80180d0 <lv_bar_design+0x2b0>
                        indic_area.x1 = zero;
 80180c6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80180ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80180ce:	e0b9      	b.n	8018244 <lv_bar_design+0x424>
                    else {
                        indic_area.x1 = indic_area.x2;
 80180d0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80180d4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                        indic_area.x2 = zero;
 80180d8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80180dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80180e0:	e0b0      	b.n	8018244 <lv_bar_design+0x424>
 80180e2:	bf00      	nop
 80180e4:	200177b0 	.word	0x200177b0
                    }
                }
            } else {
#if LV_USE_ANIMATION
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 80180e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80180ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80180f2:	d043      	beq.n	801817c <lv_bar_design+0x35c>
                    /*Calculate the coordinates of anim. start and end*/
                    lv_coord_t anim_start_y =
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 80180f4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80180f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80180fa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80180fe:	4611      	mov	r1, r2
 8018100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018102:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8018106:	1a8a      	subs	r2, r1, r2
 8018108:	fb02 f203 	mul.w	r2, r2, r3
 801810c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801810e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018112:	4619      	mov	r1, r3
 8018114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018116:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801811a:	1acb      	subs	r3, r1, r3
 801811c:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_y =
 8018120:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                    lv_coord_t anim_end_y =
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8018124:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8018128:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801812a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801812e:	4611      	mov	r1, r2
 8018130:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018132:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8018136:	1a8a      	subs	r2, r1, r2
 8018138:	fb02 f203 	mul.w	r2, r2, r3
 801813c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801813e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018142:	4619      	mov	r1, r3
 8018144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018146:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801814a:	1acb      	subs	r3, r1, r3
 801814c:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_y =
 8018150:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    indic_area.y1 =
                        anim_start_y + (((anim_end_y - anim_start_y) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 8018154:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8018158:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801815c:	1ad3      	subs	r3, r2, r3
 801815e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018160:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8018164:	fb02 f303 	mul.w	r3, r2, r3
 8018168:	121b      	asrs	r3, r3, #8
 801816a:	b29a      	uxth	r2, r3
 801816c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8018170:	4413      	add	r3, r2
 8018172:	b29b      	uxth	r3, r3
 8018174:	b21b      	sxth	r3, r3
                    indic_area.y1 =
 8018176:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801817a:	e018      	b.n	80181ae <lv_bar_design+0x38e>
                } else
#endif
                {
                    indic_area.y1 =
                        (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 801817c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8018180:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018182:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018186:	4611      	mov	r1, r2
 8018188:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801818a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801818e:	1a8a      	subs	r2, r1, r2
 8018190:	fb02 f203 	mul.w	r2, r2, r3
 8018194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018196:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801819a:	4619      	mov	r1, r3
 801819c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801819e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80181a2:	1acb      	subs	r3, r1, r3
 80181a4:	fb92 f3f3 	sdiv	r3, r2, r3
                    indic_area.y1 =
 80181a8:	b21b      	sxth	r3, r3
 80181aa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                }

                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 80181ae:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80181b2:	b29a      	uxth	r2, r3
 80181b4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80181b8:	b29b      	uxth	r3, r3
 80181ba:	1ad3      	subs	r3, r2, r3
 80181bc:	b29b      	uxth	r3, r3
 80181be:	3301      	adds	r3, #1
 80181c0:	b29b      	uxth	r3, r3
 80181c2:	b21b      	sxth	r3, r3
 80181c4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80181c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80181ca:	7b9b      	ldrb	r3, [r3, #14]
 80181cc:	f003 0301 	and.w	r3, r3, #1
 80181d0:	b2db      	uxtb	r3, r3
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d036      	beq.n	8018244 <lv_bar_design+0x424>
 80181d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80181d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	da31      	bge.n	8018244 <lv_bar_design+0x424>
 80181e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80181e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	dd2c      	ble.n	8018244 <lv_bar_design+0x424>
                    /*Calculate the coordinate of the zero point*/
                    lv_coord_t zero;
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 80181ea:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80181ee:	b29a      	uxth	r2, r3
 80181f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80181f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80181f6:	425b      	negs	r3, r3
 80181f8:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 80181fc:	fb01 f103 	mul.w	r1, r1, r3
 8018200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018202:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018206:	4618      	mov	r0, r3
 8018208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801820a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801820e:	1ac3      	subs	r3, r0, r3
 8018210:	fb91 f3f3 	sdiv	r3, r1, r3
 8018214:	b29b      	uxth	r3, r3
 8018216:	1ad3      	subs	r3, r2, r3
 8018218:	b29b      	uxth	r3, r3
 801821a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                    if(indic_area.y1 < zero)
 801821e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8018222:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8018226:	429a      	cmp	r2, r3
 8018228:	dd04      	ble.n	8018234 <lv_bar_design+0x414>
                        indic_area.y2 = zero;
 801822a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801822e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018232:	e007      	b.n	8018244 <lv_bar_design+0x424>
                    else {
                        indic_area.y2 = indic_area.y1;
 8018234:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8018238:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                        indic_area.y1 = zero;
 801823c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8018240:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                    }
                }
            }

            /*Draw the indicator*/
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 8018244:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8018248:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801824c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801824e:	68b9      	ldr	r1, [r7, #8]
 8018250:	f7f7 fa97 	bl	800f782 <lv_draw_rect>
 8018254:	e027      	b.n	80182a6 <lv_bar_design+0x486>
        }
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8018256:	79fb      	ldrb	r3, [r7, #7]
 8018258:	2b01      	cmp	r3, #1
 801825a:	d124      	bne.n	80182a6 <lv_bar_design+0x486>
#if LV_USE_GROUP
        /*Draw the border*/
        if(lv_obj_is_focused(bar)) {
 801825c:	68f8      	ldr	r0, [r7, #12]
 801825e:	f7f1 fdf4 	bl	8009e4a <lv_obj_is_focused>
 8018262:	4603      	mov	r3, r0
 8018264:	2b00      	cmp	r3, #0
 8018266:	d01e      	beq.n	80182a6 <lv_bar_design+0x486>
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 8018268:	68f8      	ldr	r0, [r7, #12]
 801826a:	f7f1 fd88 	bl	8009d7e <lv_obj_get_opa_scale>
 801826e:	4603      	mov	r3, r0
 8018270:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 8018274:	2100      	movs	r1, #0
 8018276:	68f8      	ldr	r0, [r7, #12]
 8018278:	f7ff fdae 	bl	8017dd8 <lv_bar_get_style>
 801827c:	67b8      	str	r0, [r7, #120]	; 0x78
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 801827e:	f107 0314 	add.w	r3, r7, #20
 8018282:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8018284:	4618      	mov	r0, r3
 8018286:	f7f3 f837 	bl	800b2f8 <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 801828a:	2300      	movs	r3, #0
 801828c:	773b      	strb	r3, [r7, #28]
            style_tmp.body.shadow.width = 0;
 801828e:	2300      	movs	r3, #0
 8018290:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	f103 0010 	add.w	r0, r3, #16
 8018298:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801829c:	f107 0214 	add.w	r2, r7, #20
 80182a0:	68b9      	ldr	r1, [r7, #8]
 80182a2:	f7f7 fa6e 	bl	800f782 <lv_draw_rect>
        }
#endif
    }
    return true;
 80182a6:	2301      	movs	r3, #1
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	3780      	adds	r7, #128	; 0x80
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}

080182b0 <lv_bar_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_bar_signal(lv_obj_t * bar, lv_signal_t sign, void * param)
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b088      	sub	sp, #32
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	60f8      	str	r0, [r7, #12]
 80182b8:	460b      	mov	r3, r1
 80182ba:	607a      	str	r2, [r7, #4]
 80182bc:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(bar, sign, param);
 80182be:	4b21      	ldr	r3, [pc, #132]	; (8018344 <lv_bar_signal+0x94>)
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	7af9      	ldrb	r1, [r7, #11]
 80182c4:	687a      	ldr	r2, [r7, #4]
 80182c6:	68f8      	ldr	r0, [r7, #12]
 80182c8:	4798      	blx	r3
 80182ca:	4603      	mov	r3, r0
 80182cc:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 80182ce:	7fbb      	ldrb	r3, [r7, #30]
 80182d0:	2b01      	cmp	r3, #1
 80182d2:	d001      	beq.n	80182d8 <lv_bar_signal+0x28>
 80182d4:	7fbb      	ldrb	r3, [r7, #30]
 80182d6:	e031      	b.n	801833c <lv_bar_signal+0x8c>

    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80182d8:	7afb      	ldrb	r3, [r7, #11]
 80182da:	2b05      	cmp	r3, #5
 80182dc:	d112      	bne.n	8018304 <lv_bar_signal+0x54>
        const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
 80182de:	2101      	movs	r1, #1
 80182e0:	68f8      	ldr	r0, [r7, #12]
 80182e2:	f7ff fd79 	bl	8017dd8 <lv_bar_get_style>
 80182e6:	6178      	str	r0, [r7, #20]
        if(style_indic->body.shadow.width > bar->ext_draw_pad) bar->ext_draw_pad = style_indic->body.shadow.width;
 80182e8:	697b      	ldr	r3, [r7, #20]
 80182ea:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80182f4:	429a      	cmp	r2, r3
 80182f6:	dd20      	ble.n	801833a <lv_bar_signal+0x8a>
 80182f8:	697b      	ldr	r3, [r7, #20]
 80182fa:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	869a      	strh	r2, [r3, #52]	; 0x34
 8018302:	e01a      	b.n	801833a <lv_bar_signal+0x8a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8018304:	7afb      	ldrb	r3, [r7, #11]
 8018306:	2b06      	cmp	r3, #6
 8018308:	d117      	bne.n	801833a <lv_bar_signal+0x8a>
        lv_obj_type_t * buf = param;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	61bb      	str	r3, [r7, #24]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801830e:	2300      	movs	r3, #0
 8018310:	77fb      	strb	r3, [r7, #31]
 8018312:	e008      	b.n	8018326 <lv_bar_signal+0x76>
            if(buf->type[i] == NULL) break;
 8018314:	7ffa      	ldrb	r2, [r7, #31]
 8018316:	69bb      	ldr	r3, [r7, #24]
 8018318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d006      	beq.n	801832e <lv_bar_signal+0x7e>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8018320:	7ffb      	ldrb	r3, [r7, #31]
 8018322:	3301      	adds	r3, #1
 8018324:	77fb      	strb	r3, [r7, #31]
 8018326:	7ffb      	ldrb	r3, [r7, #31]
 8018328:	2b06      	cmp	r3, #6
 801832a:	d9f3      	bls.n	8018314 <lv_bar_signal+0x64>
 801832c:	e000      	b.n	8018330 <lv_bar_signal+0x80>
            if(buf->type[i] == NULL) break;
 801832e:	bf00      	nop
        }
        buf->type[i] = "lv_bar";
 8018330:	7ffa      	ldrb	r2, [r7, #31]
 8018332:	69bb      	ldr	r3, [r7, #24]
 8018334:	4904      	ldr	r1, [pc, #16]	; (8018348 <lv_bar_signal+0x98>)
 8018336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801833a:	7fbb      	ldrb	r3, [r7, #30]
}
 801833c:	4618      	mov	r0, r3
 801833e:	3720      	adds	r7, #32
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}
 8018344:	200177b4 	.word	0x200177b4
 8018348:	0802c8c0 	.word	0x0802c8c0

0801834c <lv_bar_anim>:

#if LV_USE_ANIMATION
static void lv_bar_anim(void * bar, lv_anim_value_t value)
{
 801834c:	b580      	push	{r7, lr}
 801834e:	b084      	sub	sp, #16
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
 8018354:	460b      	mov	r3, r1
 8018356:	807b      	strh	r3, [r7, #2]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8018358:	6878      	ldr	r0, [r7, #4]
 801835a:	f7f1 fd5e 	bl	8009e1a <lv_obj_get_ext_attr>
 801835e:	60f8      	str	r0, [r7, #12]
    ext->anim_state    = value;
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	887a      	ldrh	r2, [r7, #2]
 8018364:	815a      	strh	r2, [r3, #10]
    lv_obj_invalidate(bar);
 8018366:	6878      	ldr	r0, [r7, #4]
 8018368:	f7f0 fb2b 	bl	80089c2 <lv_obj_invalidate>
}
 801836c:	bf00      	nop
 801836e:	3710      	adds	r7, #16
 8018370:	46bd      	mov	sp, r7
 8018372:	bd80      	pop	{r7, pc}

08018374 <lv_bar_anim_ready>:

static void lv_bar_anim_ready(lv_anim_t * a)
{
 8018374:	b580      	push	{r7, lr}
 8018376:	b084      	sub	sp, #16
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(a->var);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	4618      	mov	r0, r3
 8018382:	f7f1 fd4a 	bl	8009e1a <lv_obj_get_ext_attr>
 8018386:	60f8      	str	r0, [r7, #12]
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801838e:	815a      	strh	r2, [r3, #10]
    lv_bar_set_value(a->var, ext->anim_end, false);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	6818      	ldr	r0, [r3, #0]
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801839a:	2200      	movs	r2, #0
 801839c:	4619      	mov	r1, r3
 801839e:	f7ff fbf3 	bl	8017b88 <lv_bar_set_value>
}
 80183a2:	bf00      	nop
 80183a4:	3710      	adds	r7, #16
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bd80      	pop	{r7, pc}

080183aa <lv_btn_set_layout>:
 * Set the layout on a button
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
 80183aa:	b580      	push	{r7, lr}
 80183ac:	b082      	sub	sp, #8
 80183ae:	af00      	add	r7, sp, #0
 80183b0:	6078      	str	r0, [r7, #4]
 80183b2:	460b      	mov	r3, r1
 80183b4:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_layout(btn, layout);
 80183b6:	78fb      	ldrb	r3, [r7, #3]
 80183b8:	4619      	mov	r1, r3
 80183ba:	6878      	ldr	r0, [r7, #4]
 80183bc:	f002 fb72 	bl	801aaa4 <lv_cont_set_layout>
}
 80183c0:	bf00      	nop
 80183c2:	3708      	adds	r7, #8
 80183c4:	46bd      	mov	sp, r7
 80183c6:	bd80      	pop	{r7, pc}

080183c8 <lv_btn_create>:
 * @param par pointer to an object, it will be the parent of the new button
 * @param copy pointer to a button object, if not NULL then the new object will be copied from it
 * @return pointer to the created button
 */
lv_obj_t * lv_btn_create(lv_obj_t * par, const lv_obj_t * copy)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b086      	sub	sp, #24
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]
 80183d0:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("button create started");

    lv_obj_t * new_btn;

    new_btn = lv_cont_create(par, copy);
 80183d2:	6839      	ldr	r1, [r7, #0]
 80183d4:	6878      	ldr	r0, [r7, #4]
 80183d6:	f002 fabb 	bl	801a950 <lv_cont_create>
 80183da:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_btn);
 80183dc:	697b      	ldr	r3, [r7, #20]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d100      	bne.n	80183e4 <lv_btn_create+0x1c>
 80183e2:	e7fe      	b.n	80183e2 <lv_btn_create+0x1a>
    if(new_btn == NULL) return NULL;
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d101      	bne.n	80183ee <lv_btn_create+0x26>
 80183ea:	2300      	movs	r3, #0
 80183ec:	e0a5      	b.n	801853a <lv_btn_create+0x172>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
 80183ee:	4b55      	ldr	r3, [pc, #340]	; (8018544 <lv_btn_create+0x17c>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d105      	bne.n	8018402 <lv_btn_create+0x3a>
 80183f6:	6978      	ldr	r0, [r7, #20]
 80183f8:	f7f1 fcf7 	bl	8009dea <lv_obj_get_signal_cb>
 80183fc:	4602      	mov	r2, r0
 80183fe:	4b51      	ldr	r3, [pc, #324]	; (8018544 <lv_btn_create+0x17c>)
 8018400:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
 8018402:	4b51      	ldr	r3, [pc, #324]	; (8018548 <lv_btn_create+0x180>)
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d105      	bne.n	8018416 <lv_btn_create+0x4e>
 801840a:	6978      	ldr	r0, [r7, #20]
 801840c:	f7f1 fcf9 	bl	8009e02 <lv_obj_get_design_cb>
 8018410:	4602      	mov	r2, r0
 8018412:	4b4d      	ldr	r3, [pc, #308]	; (8018548 <lv_btn_create+0x180>)
 8018414:	601a      	str	r2, [r3, #0]

    /*Allocate the extended data*/
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 8018416:	211c      	movs	r1, #28
 8018418:	6978      	ldr	r0, [r7, #20]
 801841a:	f7f1 fb31 	bl	8009a80 <lv_obj_allocate_ext_attr>
 801841e:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8018420:	693b      	ldr	r3, [r7, #16]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d100      	bne.n	8018428 <lv_btn_create+0x60>
 8018426:	e7fe      	b.n	8018426 <lv_btn_create+0x5e>
    if(ext == NULL) return NULL;
 8018428:	693b      	ldr	r3, [r7, #16]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d101      	bne.n	8018432 <lv_btn_create+0x6a>
 801842e:	2300      	movs	r3, #0
 8018430:	e083      	b.n	801853a <lv_btn_create+0x172>

    ext->state = LV_BTN_STATE_REL;
 8018432:	693a      	ldr	r2, [r7, #16]
 8018434:	7e13      	ldrb	r3, [r2, #24]
 8018436:	f36f 0302 	bfc	r3, #0, #3
 801843a:	7613      	strb	r3, [r2, #24]

    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 801843c:	693b      	ldr	r3, [r7, #16]
 801843e:	4a43      	ldr	r2, [pc, #268]	; (801854c <lv_btn_create+0x184>)
 8018440:	605a      	str	r2, [r3, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 8018442:	693b      	ldr	r3, [r7, #16]
 8018444:	4a42      	ldr	r2, [pc, #264]	; (8018550 <lv_btn_create+0x188>)
 8018446:	609a      	str	r2, [r3, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8018448:	693b      	ldr	r3, [r7, #16]
 801844a:	4a42      	ldr	r2, [pc, #264]	; (8018554 <lv_btn_create+0x18c>)
 801844c:	60da      	str	r2, [r3, #12]
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	4a41      	ldr	r2, [pc, #260]	; (8018558 <lv_btn_create+0x190>)
 8018452:	611a      	str	r2, [r3, #16]
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 8018454:	693b      	ldr	r3, [r7, #16]
 8018456:	4a41      	ldr	r2, [pc, #260]	; (801855c <lv_btn_create+0x194>)
 8018458:	615a      	str	r2, [r3, #20]

    ext->toggle = 0;
 801845a:	693a      	ldr	r2, [r7, #16]
 801845c:	7e13      	ldrb	r3, [r2, #24]
 801845e:	f36f 03c3 	bfc	r3, #3, #1
 8018462:	7613      	strb	r3, [r2, #24]
    ext->ink_in_time   = 0;
    ext->ink_wait_time = 0;
    ext->ink_out_time  = 0;
#endif

    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 8018464:	493e      	ldr	r1, [pc, #248]	; (8018560 <lv_btn_create+0x198>)
 8018466:	6978      	ldr	r0, [r7, #20]
 8018468:	f7f1 faee 	bl	8009a48 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
 801846c:	493d      	ldr	r1, [pc, #244]	; (8018564 <lv_btn_create+0x19c>)
 801846e:	6978      	ldr	r0, [r7, #20]
 8018470:	f7f1 faf8 	bl	8009a64 <lv_obj_set_design_cb>

    /*If no copy do the basic initialization*/
    if(copy == NULL) {
 8018474:	683b      	ldr	r3, [r7, #0]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d13b      	bne.n	80184f2 <lv_btn_create+0x12a>
        /*Set layout if the button is not a screen*/
        if(par != NULL) {
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d003      	beq.n	8018488 <lv_btn_create+0xc0>
            lv_btn_set_layout(new_btn, LV_LAYOUT_CENTER);
 8018480:	2101      	movs	r1, #1
 8018482:	6978      	ldr	r0, [r7, #20]
 8018484:	f7ff ff91 	bl	80183aa <lv_btn_set_layout>
        }

        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
 8018488:	2101      	movs	r1, #1
 801848a:	6978      	ldr	r0, [r7, #20]
 801848c:	f7f1 f9bb 	bl	8009806 <lv_obj_set_click>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8018490:	f009 fb46 	bl	8021b20 <lv_theme_get_current>
 8018494:	60b8      	str	r0, [r7, #8]
        if(th) {
 8018496:	68bb      	ldr	r3, [r7, #8]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d023      	beq.n	80184e4 <lv_btn_create+0x11c>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
 801849c:	68bb      	ldr	r3, [r7, #8]
 801849e:	691b      	ldr	r3, [r3, #16]
 80184a0:	461a      	mov	r2, r3
 80184a2:	2100      	movs	r1, #0
 80184a4:	6978      	ldr	r0, [r7, #20]
 80184a6:	f000 f89d 	bl	80185e4 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
 80184aa:	68bb      	ldr	r3, [r7, #8]
 80184ac:	695b      	ldr	r3, [r3, #20]
 80184ae:	461a      	mov	r2, r3
 80184b0:	2101      	movs	r1, #1
 80184b2:	6978      	ldr	r0, [r7, #20]
 80184b4:	f000 f896 	bl	80185e4 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	699b      	ldr	r3, [r3, #24]
 80184bc:	461a      	mov	r2, r3
 80184be:	2102      	movs	r1, #2
 80184c0:	6978      	ldr	r0, [r7, #20]
 80184c2:	f000 f88f 	bl	80185e4 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
 80184c6:	68bb      	ldr	r3, [r7, #8]
 80184c8:	69db      	ldr	r3, [r3, #28]
 80184ca:	461a      	mov	r2, r3
 80184cc:	2103      	movs	r1, #3
 80184ce:	6978      	ldr	r0, [r7, #20]
 80184d0:	f000 f888 	bl	80185e4 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	6a1b      	ldr	r3, [r3, #32]
 80184d8:	461a      	mov	r2, r3
 80184da:	2104      	movs	r1, #4
 80184dc:	6978      	ldr	r0, [r7, #20]
 80184de:	f000 f881 	bl	80185e4 <lv_btn_set_style>
 80184e2:	e029      	b.n	8018538 <lv_btn_create+0x170>
        } else {
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 80184e4:	693b      	ldr	r3, [r7, #16]
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	4619      	mov	r1, r3
 80184ea:	6978      	ldr	r0, [r7, #20]
 80184ec:	f7f1 f965 	bl	80097ba <lv_obj_set_style>
 80184f0:	e022      	b.n	8018538 <lv_btn_create+0x170>
        }
    }
    /*Copy 'copy'*/
    else {
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80184f2:	6838      	ldr	r0, [r7, #0]
 80184f4:	f7f1 fc91 	bl	8009e1a <lv_obj_get_ext_attr>
 80184f8:	60f8      	str	r0, [r7, #12]
        ext->state              = copy_ext->state;
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	7e1b      	ldrb	r3, [r3, #24]
 80184fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8018502:	b2d9      	uxtb	r1, r3
 8018504:	693a      	ldr	r2, [r7, #16]
 8018506:	7e13      	ldrb	r3, [r2, #24]
 8018508:	f361 0302 	bfi	r3, r1, #0, #3
 801850c:	7613      	strb	r3, [r2, #24]
        ext->toggle             = copy_ext->toggle;
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	7e1b      	ldrb	r3, [r3, #24]
 8018512:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018516:	b2d9      	uxtb	r1, r3
 8018518:	693a      	ldr	r2, [r7, #16]
 801851a:	7e13      	ldrb	r3, [r2, #24]
 801851c:	f361 03c3 	bfi	r3, r1, #3, #1
 8018520:	7613      	strb	r3, [r2, #24]
#if LV_USE_ANIMATION && LV_BTN_INK_EFFECT
        ext->ink_in_time   = copy_ext->ink_in_time;
        ext->ink_wait_time = copy_ext->ink_wait_time;
        ext->ink_out_time  = copy_ext->ink_out_time;
#endif
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 8018522:	693b      	ldr	r3, [r7, #16]
 8018524:	1d18      	adds	r0, r3, #4
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	3304      	adds	r3, #4
 801852a:	2214      	movs	r2, #20
 801852c:	4619      	mov	r1, r3
 801852e:	f011 fc41 	bl	8029db4 <memcpy>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_btn);
 8018532:	6978      	ldr	r0, [r7, #20]
 8018534:	f7f1 f953 	bl	80097de <lv_obj_refresh_style>
    }

    LV_LOG_INFO("button created");

    return new_btn;
 8018538:	697b      	ldr	r3, [r7, #20]
}
 801853a:	4618      	mov	r0, r3
 801853c:	3718      	adds	r7, #24
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}
 8018542:	bf00      	nop
 8018544:	200177b8 	.word	0x200177b8
 8018548:	200177bc 	.word	0x200177bc
 801854c:	2001b8a8 	.word	0x2001b8a8
 8018550:	2001b8e4 	.word	0x2001b8e4
 8018554:	2001ba4c 	.word	0x2001ba4c
 8018558:	2001bac4 	.word	0x2001bac4
 801855c:	2001b998 	.word	0x2001b998
 8018560:	08018705 	.word	0x08018705
 8018564:	080186b9 	.word	0x080186b9

08018568 <lv_btn_set_toggle>:
 * Enable the toggled states
 * @param btn pointer to a button object
 * @param tgl true: enable toggled states, false: disable
 */
void lv_btn_set_toggle(lv_obj_t * btn, bool tgl)
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b084      	sub	sp, #16
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
 8018570:	460b      	mov	r3, r1
 8018572:	70fb      	strb	r3, [r7, #3]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8018574:	6878      	ldr	r0, [r7, #4]
 8018576:	f7f1 fc50 	bl	8009e1a <lv_obj_get_ext_attr>
 801857a:	60f8      	str	r0, [r7, #12]

    ext->toggle = tgl != false ? 1 : 0;
 801857c:	78f9      	ldrb	r1, [r7, #3]
 801857e:	68fa      	ldr	r2, [r7, #12]
 8018580:	7e13      	ldrb	r3, [r2, #24]
 8018582:	f361 03c3 	bfi	r3, r1, #3, #1
 8018586:	7613      	strb	r3, [r2, #24]
}
 8018588:	bf00      	nop
 801858a:	3710      	adds	r7, #16
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <lv_btn_set_state>:
 * Set the state of the button
 * @param btn pointer to a button object
 * @param state the new state of the button (from lv_btn_state_t enum)
 */
void lv_btn_set_state(lv_obj_t * btn, lv_btn_state_t state)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b084      	sub	sp, #16
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
 8018598:	460b      	mov	r3, r1
 801859a:	70fb      	strb	r3, [r7, #3]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	f7f1 fc3c 	bl	8009e1a <lv_obj_get_ext_attr>
 80185a2:	60f8      	str	r0, [r7, #12]
    if(ext->state != state) {
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	7e1b      	ldrb	r3, [r3, #24]
 80185a8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80185ac:	b2db      	uxtb	r3, r3
 80185ae:	461a      	mov	r2, r3
 80185b0:	78fb      	ldrb	r3, [r7, #3]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d011      	beq.n	80185da <lv_btn_set_state+0x4a>
        ext->state = state;
 80185b6:	78fb      	ldrb	r3, [r7, #3]
 80185b8:	f003 0307 	and.w	r3, r3, #7
 80185bc:	b2d9      	uxtb	r1, r3
 80185be:	68fa      	ldr	r2, [r7, #12]
 80185c0:	7e13      	ldrb	r3, [r2, #24]
 80185c2:	f361 0302 	bfi	r3, r1, #0, #3
 80185c6:	7613      	strb	r3, [r2, #24]
        lv_obj_set_style(btn, ext->styles[state]);
 80185c8:	78fb      	ldrb	r3, [r7, #3]
 80185ca:	68fa      	ldr	r2, [r7, #12]
 80185cc:	009b      	lsls	r3, r3, #2
 80185ce:	4413      	add	r3, r2
 80185d0:	685b      	ldr	r3, [r3, #4]
 80185d2:	4619      	mov	r1, r3
 80185d4:	6878      	ldr	r0, [r7, #4]
 80185d6:	f7f1 f8f0 	bl	80097ba <lv_obj_set_style>
    }
}
 80185da:	bf00      	nop
 80185dc:	3710      	adds	r7, #16
 80185de:	46bd      	mov	sp, r7
 80185e0:	bd80      	pop	{r7, pc}
	...

080185e4 <lv_btn_set_style>:
 * @param btn pointer to a button object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_btn_set_style(lv_obj_t * btn, lv_btn_style_t type, const lv_style_t * style)
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b086      	sub	sp, #24
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	60f8      	str	r0, [r7, #12]
 80185ec:	460b      	mov	r3, r1
 80185ee:	607a      	str	r2, [r7, #4]
 80185f0:	72fb      	strb	r3, [r7, #11]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80185f2:	68f8      	ldr	r0, [r7, #12]
 80185f4:	f7f1 fc11 	bl	8009e1a <lv_obj_get_ext_attr>
 80185f8:	6178      	str	r0, [r7, #20]

    switch(type) {
 80185fa:	7afb      	ldrb	r3, [r7, #11]
 80185fc:	2b04      	cmp	r3, #4
 80185fe:	d821      	bhi.n	8018644 <lv_btn_set_style+0x60>
 8018600:	a201      	add	r2, pc, #4	; (adr r2, 8018608 <lv_btn_set_style+0x24>)
 8018602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018606:	bf00      	nop
 8018608:	0801861d 	.word	0x0801861d
 801860c:	08018625 	.word	0x08018625
 8018610:	0801862d 	.word	0x0801862d
 8018614:	08018635 	.word	0x08018635
 8018618:	0801863d 	.word	0x0801863d
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	687a      	ldr	r2, [r7, #4]
 8018620:	605a      	str	r2, [r3, #4]
 8018622:	e00f      	b.n	8018644 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
 8018624:	697b      	ldr	r3, [r7, #20]
 8018626:	687a      	ldr	r2, [r7, #4]
 8018628:	609a      	str	r2, [r3, #8]
 801862a:	e00b      	b.n	8018644 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
 801862c:	697b      	ldr	r3, [r7, #20]
 801862e:	687a      	ldr	r2, [r7, #4]
 8018630:	60da      	str	r2, [r3, #12]
 8018632:	e007      	b.n	8018644 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	687a      	ldr	r2, [r7, #4]
 8018638:	611a      	str	r2, [r3, #16]
 801863a:	e003      	b.n	8018644 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
 801863c:	697b      	ldr	r3, [r7, #20]
 801863e:	687a      	ldr	r2, [r7, #4]
 8018640:	615a      	str	r2, [r3, #20]
 8018642:	bf00      	nop
    }

    /*Refresh the object with the new style*/
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	7e1b      	ldrb	r3, [r3, #24]
 8018648:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801864c:	b2db      	uxtb	r3, r3
 801864e:	697a      	ldr	r2, [r7, #20]
 8018650:	009b      	lsls	r3, r3, #2
 8018652:	4413      	add	r3, r2
 8018654:	685b      	ldr	r3, [r3, #4]
 8018656:	4619      	mov	r1, r3
 8018658:	68f8      	ldr	r0, [r7, #12]
 801865a:	f7f1 f8ae 	bl	80097ba <lv_obj_set_style>
}
 801865e:	bf00      	nop
 8018660:	3718      	adds	r7, #24
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}
 8018666:	bf00      	nop

08018668 <lv_btn_get_state>:
 * Get the current state of the button
 * @param btn pointer to a button object
 * @return the state of the button (from lv_btn_state_t enum)
 */
lv_btn_state_t lv_btn_get_state(const lv_obj_t * btn)
{
 8018668:	b580      	push	{r7, lr}
 801866a:	b084      	sub	sp, #16
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8018670:	6878      	ldr	r0, [r7, #4]
 8018672:	f7f1 fbd2 	bl	8009e1a <lv_obj_get_ext_attr>
 8018676:	60f8      	str	r0, [r7, #12]
    return ext->state;
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	7e1b      	ldrb	r3, [r3, #24]
 801867c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8018680:	b2db      	uxtb	r3, r3
}
 8018682:	4618      	mov	r0, r3
 8018684:	3710      	adds	r7, #16
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}

0801868a <lv_btn_get_toggle>:
 * Get the toggle enable attribute of the button
 * @param btn pointer to a button object
 * @return ture: toggle enabled, false: disabled
 */
bool lv_btn_get_toggle(const lv_obj_t * btn)
{
 801868a:	b580      	push	{r7, lr}
 801868c:	b084      	sub	sp, #16
 801868e:	af00      	add	r7, sp, #0
 8018690:	6078      	str	r0, [r7, #4]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8018692:	6878      	ldr	r0, [r7, #4]
 8018694:	f7f1 fbc1 	bl	8009e1a <lv_obj_get_ext_attr>
 8018698:	60f8      	str	r0, [r7, #12]

    return ext->toggle != 0 ? true : false;
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	7e1b      	ldrb	r3, [r3, #24]
 801869e:	08db      	lsrs	r3, r3, #3
 80186a0:	b2db      	uxtb	r3, r3
 80186a2:	f003 0301 	and.w	r3, r3, #1
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	bf14      	ite	ne
 80186aa:	2301      	movne	r3, #1
 80186ac:	2300      	moveq	r3, #0
 80186ae:	b2db      	uxtb	r3, r3
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3710      	adds	r7, #16
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}

080186b8 <lv_btn_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b084      	sub	sp, #16
 80186bc:	af00      	add	r7, sp, #0
 80186be:	60f8      	str	r0, [r7, #12]
 80186c0:	60b9      	str	r1, [r7, #8]
 80186c2:	4613      	mov	r3, r2
 80186c4:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 80186c6:	79fb      	ldrb	r3, [r7, #7]
 80186c8:	2b02      	cmp	r3, #2
 80186ca:	d101      	bne.n	80186d0 <lv_btn_design+0x18>
        return false;
 80186cc:	2300      	movs	r3, #0
 80186ce:	e013      	b.n	80186f8 <lv_btn_design+0x40>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80186d0:	79fb      	ldrb	r3, [r7, #7]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d106      	bne.n	80186e4 <lv_btn_design+0x2c>
                lv_style_mix(ext->styles[ink_bg_state], ext->styles[ink_top_state], &res, ink_act_value);
                lv_draw_rect(&btn->coords, mask, &res, opa_scale);
            }
        }
#else
        ancestor_design(btn, mask, mode);
 80186d6:	4b0a      	ldr	r3, [pc, #40]	; (8018700 <lv_btn_design+0x48>)
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	79fa      	ldrb	r2, [r7, #7]
 80186dc:	68b9      	ldr	r1, [r7, #8]
 80186de:	68f8      	ldr	r0, [r7, #12]
 80186e0:	4798      	blx	r3
 80186e2:	e008      	b.n	80186f6 <lv_btn_design+0x3e>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 80186e4:	79fb      	ldrb	r3, [r7, #7]
 80186e6:	2b01      	cmp	r3, #1
 80186e8:	d105      	bne.n	80186f6 <lv_btn_design+0x3e>
        ancestor_design(btn, mask, mode);
 80186ea:	4b05      	ldr	r3, [pc, #20]	; (8018700 <lv_btn_design+0x48>)
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	79fa      	ldrb	r2, [r7, #7]
 80186f0:	68b9      	ldr	r1, [r7, #8]
 80186f2:	68f8      	ldr	r0, [r7, #12]
 80186f4:	4798      	blx	r3
    }

    return true;
 80186f6:	2301      	movs	r3, #1
}
 80186f8:	4618      	mov	r0, r3
 80186fa:	3710      	adds	r7, #16
 80186fc:	46bd      	mov	sp, r7
 80186fe:	bd80      	pop	{r7, pc}
 8018700:	200177bc 	.word	0x200177bc

08018704 <lv_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b08c      	sub	sp, #48	; 0x30
 8018708:	af00      	add	r7, sp, #0
 801870a:	60f8      	str	r0, [r7, #12]
 801870c:	460b      	mov	r3, r1
 801870e:	607a      	str	r2, [r7, #4]
 8018710:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 8018712:	4bb4      	ldr	r3, [pc, #720]	; (80189e4 <lv_btn_signal+0x2e0>)
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	7af9      	ldrb	r1, [r7, #11]
 8018718:	687a      	ldr	r2, [r7, #4]
 801871a:	68f8      	ldr	r0, [r7, #12]
 801871c:	4798      	blx	r3
 801871e:	4603      	mov	r3, r0
 8018720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(res != LV_RES_OK) return res;
 8018724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018728:	2b01      	cmp	r3, #1
 801872a:	d002      	beq.n	8018732 <lv_btn_signal+0x2e>
 801872c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018730:	e165      	b.n	80189fe <lv_btn_signal+0x2fa>

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8018732:	68f8      	ldr	r0, [r7, #12]
 8018734:	f7f1 fb71 	bl	8009e1a <lv_obj_get_ext_attr>
 8018738:	62b8      	str	r0, [r7, #40]	; 0x28
    bool tgl           = lv_btn_get_toggle(btn);
 801873a:	68f8      	ldr	r0, [r7, #12]
 801873c:	f7ff ffa5 	bl	801868a <lv_btn_get_toggle>
 8018740:	4603      	mov	r3, r0
 8018742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(sign == LV_SIGNAL_PRESSED) {
 8018746:	7afb      	ldrb	r3, [r7, #11]
 8018748:	2b07      	cmp	r3, #7
 801874a:	d118      	bne.n	801877e <lv_btn_signal+0x7a>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_REL) {
 801874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801874e:	7e1b      	ldrb	r3, [r3, #24]
 8018750:	f003 0307 	and.w	r3, r3, #7
 8018754:	b2db      	uxtb	r3, r3
 8018756:	2b00      	cmp	r3, #0
 8018758:	d104      	bne.n	8018764 <lv_btn_signal+0x60>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 801875a:	2101      	movs	r1, #1
 801875c:	68f8      	ldr	r0, [r7, #12]
 801875e:	f7ff ff17 	bl	8018590 <lv_btn_set_state>
 8018762:	e14a      	b.n	80189fa <lv_btn_signal+0x2f6>
#if LV_USE_ANIMATION && LV_BTN_INK_EFFECT
            ink_bg_state  = LV_BTN_STATE_REL;
            ink_top_state = LV_BTN_STATE_PR;
#endif
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 8018764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018766:	7e1b      	ldrb	r3, [r3, #24]
 8018768:	f003 0307 	and.w	r3, r3, #7
 801876c:	b2db      	uxtb	r3, r3
 801876e:	2b02      	cmp	r3, #2
 8018770:	f040 8143 	bne.w	80189fa <lv_btn_signal+0x2f6>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 8018774:	2103      	movs	r1, #3
 8018776:	68f8      	ldr	r0, [r7, #12]
 8018778:	f7ff ff0a 	bl	8018590 <lv_btn_set_state>
 801877c:	e13d      	b.n	80189fa <lv_btn_signal+0x2f6>
            a.repeat         = 0;
            a.repeat_pause   = 0;
            lv_anim_create(&a);
        }
#endif
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 801877e:	7afb      	ldrb	r3, [r7, #11]
 8018780:	2b09      	cmp	r3, #9
 8018782:	d118      	bne.n	80187b6 <lv_btn_signal+0xb2>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_PR)
 8018784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018786:	7e1b      	ldrb	r3, [r3, #24]
 8018788:	f003 0307 	and.w	r3, r3, #7
 801878c:	b2db      	uxtb	r3, r3
 801878e:	2b01      	cmp	r3, #1
 8018790:	d104      	bne.n	801879c <lv_btn_signal+0x98>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8018792:	2100      	movs	r1, #0
 8018794:	68f8      	ldr	r0, [r7, #12]
 8018796:	f7ff fefb 	bl	8018590 <lv_btn_set_state>
 801879a:	e12e      	b.n	80189fa <lv_btn_signal+0x2f6>
        else if(ext->state == LV_BTN_STATE_TGL_PR)
 801879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801879e:	7e1b      	ldrb	r3, [r3, #24]
 80187a0:	f003 0307 	and.w	r3, r3, #7
 80187a4:	b2db      	uxtb	r3, r3
 80187a6:	2b03      	cmp	r3, #3
 80187a8:	f040 8127 	bne.w	80189fa <lv_btn_signal+0x2f6>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 80187ac:	2102      	movs	r1, #2
 80187ae:	68f8      	ldr	r0, [r7, #12]
 80187b0:	f7ff feee 	bl	8018590 <lv_btn_set_state>
 80187b4:	e121      	b.n	80189fa <lv_btn_signal+0x2f6>
    } else if(sign == LV_SIGNAL_PRESSING) {
 80187b6:	7afb      	ldrb	r3, [r7, #11]
 80187b8:	2b08      	cmp	r3, #8
 80187ba:	d11f      	bne.n	80187fc <lv_btn_signal+0xf8>
        /*When the button begins to drag revert pressed states to released*/
        if(lv_indev_is_dragging(param) != false) {
 80187bc:	6878      	ldr	r0, [r7, #4]
 80187be:	f7ef fcf9 	bl	80081b4 <lv_indev_is_dragging>
 80187c2:	4603      	mov	r3, r0
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	f000 8118 	beq.w	80189fa <lv_btn_signal+0x2f6>
            if(ext->state == LV_BTN_STATE_PR)
 80187ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187cc:	7e1b      	ldrb	r3, [r3, #24]
 80187ce:	f003 0307 	and.w	r3, r3, #7
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	2b01      	cmp	r3, #1
 80187d6:	d104      	bne.n	80187e2 <lv_btn_signal+0xde>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80187d8:	2100      	movs	r1, #0
 80187da:	68f8      	ldr	r0, [r7, #12]
 80187dc:	f7ff fed8 	bl	8018590 <lv_btn_set_state>
 80187e0:	e10b      	b.n	80189fa <lv_btn_signal+0x2f6>
            else if(ext->state == LV_BTN_STATE_TGL_PR)
 80187e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e4:	7e1b      	ldrb	r3, [r3, #24]
 80187e6:	f003 0307 	and.w	r3, r3, #7
 80187ea:	b2db      	uxtb	r3, r3
 80187ec:	2b03      	cmp	r3, #3
 80187ee:	f040 8104 	bne.w	80189fa <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 80187f2:	2102      	movs	r1, #2
 80187f4:	68f8      	ldr	r0, [r7, #12]
 80187f6:	f7ff fecb 	bl	8018590 <lv_btn_set_state>
 80187fa:	e0fe      	b.n	80189fa <lv_btn_signal+0x2f6>
        }
    } else if(sign == LV_SIGNAL_RELEASED) {
 80187fc:	7afb      	ldrb	r3, [r7, #11]
 80187fe:	2b0a      	cmp	r3, #10
 8018800:	f040 8087 	bne.w	8018912 <lv_btn_signal+0x20e>
        /*If not dragged and it was not long press action then
         *change state and run the action*/
        if(lv_indev_is_dragging(param) == false) {
 8018804:	6878      	ldr	r0, [r7, #4]
 8018806:	f7ef fcd5 	bl	80081b4 <lv_indev_is_dragging>
 801880a:	4603      	mov	r3, r0
 801880c:	f083 0301 	eor.w	r3, r3, #1
 8018810:	b2db      	uxtb	r3, r3
 8018812:	2b00      	cmp	r3, #0
 8018814:	d065      	beq.n	80188e2 <lv_btn_signal+0x1de>
            uint32_t toggled = 0;
 8018816:	2300      	movs	r3, #0
 8018818:	61bb      	str	r3, [r7, #24]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 801881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801881c:	7e1b      	ldrb	r3, [r3, #24]
 801881e:	f003 0307 	and.w	r3, r3, #7
 8018822:	b2db      	uxtb	r3, r3
 8018824:	2b01      	cmp	r3, #1
 8018826:	d10d      	bne.n	8018844 <lv_btn_signal+0x140>
 8018828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801882c:	f083 0301 	eor.w	r3, r3, #1
 8018830:	b2db      	uxtb	r3, r3
 8018832:	2b00      	cmp	r3, #0
 8018834:	d006      	beq.n	8018844 <lv_btn_signal+0x140>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8018836:	2100      	movs	r1, #0
 8018838:	68f8      	ldr	r0, [r7, #12]
 801883a:	f7ff fea9 	bl	8018590 <lv_btn_set_state>
                toggled = 0;
 801883e:	2300      	movs	r3, #0
 8018840:	61bb      	str	r3, [r7, #24]
 8018842:	e037      	b.n	80188b4 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 8018844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018846:	7e1b      	ldrb	r3, [r3, #24]
 8018848:	f003 0307 	and.w	r3, r3, #7
 801884c:	b2db      	uxtb	r3, r3
 801884e:	2b03      	cmp	r3, #3
 8018850:	d10d      	bne.n	801886e <lv_btn_signal+0x16a>
 8018852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018856:	f083 0301 	eor.w	r3, r3, #1
 801885a:	b2db      	uxtb	r3, r3
 801885c:	2b00      	cmp	r3, #0
 801885e:	d006      	beq.n	801886e <lv_btn_signal+0x16a>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8018860:	2102      	movs	r1, #2
 8018862:	68f8      	ldr	r0, [r7, #12]
 8018864:	f7ff fe94 	bl	8018590 <lv_btn_set_state>
                toggled = 1;
 8018868:	2301      	movs	r3, #1
 801886a:	61bb      	str	r3, [r7, #24]
 801886c:	e022      	b.n	80188b4 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_PR && tgl == true) {
 801886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018870:	7e1b      	ldrb	r3, [r3, #24]
 8018872:	f003 0307 	and.w	r3, r3, #7
 8018876:	b2db      	uxtb	r3, r3
 8018878:	2b01      	cmp	r3, #1
 801887a:	d10a      	bne.n	8018892 <lv_btn_signal+0x18e>
 801887c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018880:	2b00      	cmp	r3, #0
 8018882:	d006      	beq.n	8018892 <lv_btn_signal+0x18e>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8018884:	2102      	movs	r1, #2
 8018886:	68f8      	ldr	r0, [r7, #12]
 8018888:	f7ff fe82 	bl	8018590 <lv_btn_set_state>
                toggled = 1;
 801888c:	2301      	movs	r3, #1
 801888e:	61bb      	str	r3, [r7, #24]
 8018890:	e010      	b.n	80188b4 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == true) {
 8018892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018894:	7e1b      	ldrb	r3, [r3, #24]
 8018896:	f003 0307 	and.w	r3, r3, #7
 801889a:	b2db      	uxtb	r3, r3
 801889c:	2b03      	cmp	r3, #3
 801889e:	d109      	bne.n	80188b4 <lv_btn_signal+0x1b0>
 80188a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d005      	beq.n	80188b4 <lv_btn_signal+0x1b0>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80188a8:	2100      	movs	r1, #0
 80188aa:	68f8      	ldr	r0, [r7, #12]
 80188ac:	f7ff fe70 	bl	8018590 <lv_btn_set_state>
                toggled = 0;
 80188b0:	2300      	movs	r3, #0
 80188b2:	61bb      	str	r3, [r7, #24]
            }

            if(tgl) {
 80188b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	f000 809e 	beq.w	80189fa <lv_btn_signal+0x2f6>
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 80188be:	f107 0318 	add.w	r3, r7, #24
 80188c2:	461a      	mov	r2, r3
 80188c4:	210e      	movs	r1, #14
 80188c6:	68f8      	ldr	r0, [r7, #12]
 80188c8:	f7f1 f82d 	bl	8009926 <lv_event_send>
 80188cc:	4603      	mov	r3, r0
 80188ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 80188d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188d6:	2b01      	cmp	r3, #1
 80188d8:	f000 808f 	beq.w	80189fa <lv_btn_signal+0x2f6>
 80188dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188e0:	e08d      	b.n	80189fe <lv_btn_signal+0x2fa>
            }

        } else { /*If dragged change back the state*/
            if(ext->state == LV_BTN_STATE_PR) {
 80188e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188e4:	7e1b      	ldrb	r3, [r3, #24]
 80188e6:	f003 0307 	and.w	r3, r3, #7
 80188ea:	b2db      	uxtb	r3, r3
 80188ec:	2b01      	cmp	r3, #1
 80188ee:	d104      	bne.n	80188fa <lv_btn_signal+0x1f6>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80188f0:	2100      	movs	r1, #0
 80188f2:	68f8      	ldr	r0, [r7, #12]
 80188f4:	f7ff fe4c 	bl	8018590 <lv_btn_set_state>
 80188f8:	e07f      	b.n	80189fa <lv_btn_signal+0x2f6>
            } else if(ext->state == LV_BTN_STATE_TGL_PR) {
 80188fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188fc:	7e1b      	ldrb	r3, [r3, #24]
 80188fe:	f003 0307 	and.w	r3, r3, #7
 8018902:	b2db      	uxtb	r3, r3
 8018904:	2b03      	cmp	r3, #3
 8018906:	d178      	bne.n	80189fa <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8018908:	2102      	movs	r1, #2
 801890a:	68f8      	ldr	r0, [r7, #12]
 801890c:	f7ff fe40 	bl	8018590 <lv_btn_set_state>
 8018910:	e073      	b.n	80189fa <lv_btn_signal+0x2f6>
            a.repeat         = 0;
            a.repeat_pause   = 0;
            lv_anim_create(&a);
        }
#endif
    } else if(sign == LV_SIGNAL_CONTROL) {
 8018912:	7afb      	ldrb	r3, [r7, #11]
 8018914:	2b11      	cmp	r3, #17
 8018916:	d148      	bne.n	80189aa <lv_btn_signal+0x2a6>
        char c = *((char *)param);
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	781b      	ldrb	r3, [r3, #0]
 801891c:	77fb      	strb	r3, [r7, #31]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801891e:	7ffb      	ldrb	r3, [r7, #31]
 8018920:	2b13      	cmp	r3, #19
 8018922:	d002      	beq.n	801892a <lv_btn_signal+0x226>
 8018924:	7ffb      	ldrb	r3, [r7, #31]
 8018926:	2b11      	cmp	r3, #17
 8018928:	d11c      	bne.n	8018964 <lv_btn_signal+0x260>
            if(lv_btn_get_toggle(btn)) {
 801892a:	68f8      	ldr	r0, [r7, #12]
 801892c:	f7ff fead 	bl	801868a <lv_btn_get_toggle>
 8018930:	4603      	mov	r3, r0
 8018932:	2b00      	cmp	r3, #0
 8018934:	d060      	beq.n	80189f8 <lv_btn_signal+0x2f4>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8018936:	2102      	movs	r1, #2
 8018938:	68f8      	ldr	r0, [r7, #12]
 801893a:	f7ff fe29 	bl	8018590 <lv_btn_set_state>

                uint32_t state = 1;
 801893e:	2301      	movs	r3, #1
 8018940:	617b      	str	r3, [r7, #20]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8018942:	f107 0314 	add.w	r3, r7, #20
 8018946:	461a      	mov	r2, r3
 8018948:	210e      	movs	r1, #14
 801894a:	68f8      	ldr	r0, [r7, #12]
 801894c:	f7f0 ffeb 	bl	8009926 <lv_event_send>
 8018950:	4603      	mov	r3, r0
 8018952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 8018956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801895a:	2b01      	cmp	r3, #1
 801895c:	d04c      	beq.n	80189f8 <lv_btn_signal+0x2f4>
 801895e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018962:	e04c      	b.n	80189fe <lv_btn_signal+0x2fa>
            }

        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8018964:	7ffb      	ldrb	r3, [r7, #31]
 8018966:	2b14      	cmp	r3, #20
 8018968:	d002      	beq.n	8018970 <lv_btn_signal+0x26c>
 801896a:	7ffb      	ldrb	r3, [r7, #31]
 801896c:	2b12      	cmp	r3, #18
 801896e:	d144      	bne.n	80189fa <lv_btn_signal+0x2f6>
            if(lv_btn_get_toggle(btn)) {
 8018970:	68f8      	ldr	r0, [r7, #12]
 8018972:	f7ff fe8a 	bl	801868a <lv_btn_get_toggle>
 8018976:	4603      	mov	r3, r0
 8018978:	2b00      	cmp	r3, #0
 801897a:	d03e      	beq.n	80189fa <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 801897c:	2100      	movs	r1, #0
 801897e:	68f8      	ldr	r0, [r7, #12]
 8018980:	f7ff fe06 	bl	8018590 <lv_btn_set_state>

                uint32_t state = 0;
 8018984:	2300      	movs	r3, #0
 8018986:	613b      	str	r3, [r7, #16]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8018988:	f107 0310 	add.w	r3, r7, #16
 801898c:	461a      	mov	r2, r3
 801898e:	210e      	movs	r1, #14
 8018990:	68f8      	ldr	r0, [r7, #12]
 8018992:	f7f0 ffc8 	bl	8009926 <lv_event_send>
 8018996:	4603      	mov	r3, r0
 8018998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 801899c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80189a0:	2b01      	cmp	r3, #1
 80189a2:	d02a      	beq.n	80189fa <lv_btn_signal+0x2f6>
 80189a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80189a8:	e029      	b.n	80189fe <lv_btn_signal+0x2fa>
            }
        }
    } else if(sign == LV_SIGNAL_CLEANUP) {
 80189aa:	7afb      	ldrb	r3, [r7, #11]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d024      	beq.n	80189fa <lv_btn_signal+0x2f6>
        if(btn == ink_obj) {
            lv_anim_del(ink_obj, (lv_anim_exec_xcb_t)lv_btn_ink_effect_anim);
            ink_obj = NULL;
        }
#endif
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80189b0:	7afb      	ldrb	r3, [r7, #11]
 80189b2:	2b06      	cmp	r3, #6
 80189b4:	d121      	bne.n	80189fa <lv_btn_signal+0x2f6>
        lv_obj_type_t * buf = param;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	623b      	str	r3, [r7, #32]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80189ba:	2300      	movs	r3, #0
 80189bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80189c0:	e00b      	b.n	80189da <lv_btn_signal+0x2d6>
            if(buf->type[i] == NULL) break;
 80189c2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80189c6:	6a3b      	ldr	r3, [r7, #32]
 80189c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d00b      	beq.n	80189e8 <lv_btn_signal+0x2e4>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80189d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80189d4:	3301      	adds	r3, #1
 80189d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80189da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80189de:	2b06      	cmp	r3, #6
 80189e0:	d9ef      	bls.n	80189c2 <lv_btn_signal+0x2be>
 80189e2:	e002      	b.n	80189ea <lv_btn_signal+0x2e6>
 80189e4:	200177b8 	.word	0x200177b8
            if(buf->type[i] == NULL) break;
 80189e8:	bf00      	nop
        }
        buf->type[i] = "lv_btn";
 80189ea:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80189ee:	6a3b      	ldr	r3, [r7, #32]
 80189f0:	4905      	ldr	r1, [pc, #20]	; (8018a08 <lv_btn_signal+0x304>)
 80189f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80189f6:	e000      	b.n	80189fa <lv_btn_signal+0x2f6>
            if(lv_btn_get_toggle(btn)) {
 80189f8:	bf00      	nop
    }

    return res;
 80189fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80189fe:	4618      	mov	r0, r3
 8018a00:	3730      	adds	r7, #48	; 0x30
 8018a02:	46bd      	mov	sp, r7
 8018a04:	bd80      	pop	{r7, pc}
 8018a06:	bf00      	nop
 8018a08:	0802c8c8 	.word	0x0802c8c8

08018a0c <lv_area_copy>:
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b082      	sub	sp, #8
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
 8018a14:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8018a16:	2208      	movs	r2, #8
 8018a18:	6839      	ldr	r1, [r7, #0]
 8018a1a:	6878      	ldr	r0, [r7, #4]
 8018a1c:	f011 f9ca 	bl	8029db4 <memcpy>
}
 8018a20:	bf00      	nop
 8018a22:	3708      	adds	r7, #8
 8018a24:	46bd      	mov	sp, r7
 8018a26:	bd80      	pop	{r7, pc}

08018a28 <lv_area_get_width>:
{
 8018a28:	b480      	push	{r7}
 8018a2a:	b083      	sub	sp, #12
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018a36:	b29a      	uxth	r2, r3
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	1ad3      	subs	r3, r2, r3
 8018a42:	b29b      	uxth	r3, r3
 8018a44:	3301      	adds	r3, #1
 8018a46:	b29b      	uxth	r3, r3
 8018a48:	b21b      	sxth	r3, r3
}
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	370c      	adds	r7, #12
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a54:	4770      	bx	lr

08018a56 <lv_area_get_height>:
{
 8018a56:	b480      	push	{r7}
 8018a58:	b083      	sub	sp, #12
 8018a5a:	af00      	add	r7, sp, #0
 8018a5c:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018a64:	b29a      	uxth	r2, r3
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018a6c:	b29b      	uxth	r3, r3
 8018a6e:	1ad3      	subs	r3, r2, r3
 8018a70:	b29b      	uxth	r3, r3
 8018a72:	3301      	adds	r3, #1
 8018a74:	b29b      	uxth	r3, r3
 8018a76:	b21b      	sxth	r3, r3
}
 8018a78:	4618      	mov	r0, r3
 8018a7a:	370c      	adds	r7, #12
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a82:	4770      	bx	lr

08018a84 <lv_btnm_create>:
 * @param copy pointer to a button matrix object, if not NULL then the new object will be copied
 * from it
 * @return pointer to the created button matrix
 */
lv_obj_t * lv_btnm_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8018a84:	b580      	push	{r7, lr}
 8018a86:	b086      	sub	sp, #24
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	6078      	str	r0, [r7, #4]
 8018a8c:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("button matrix create started");

    /*Create the ancestor object*/
    lv_obj_t * new_btnm = lv_obj_create(par, copy);
 8018a8e:	6839      	ldr	r1, [r7, #0]
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	f7ef fc59 	bl	8008348 <lv_obj_create>
 8018a96:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_btnm);
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d100      	bne.n	8018aa0 <lv_btnm_create+0x1c>
 8018a9e:	e7fe      	b.n	8018a9e <lv_btnm_create+0x1a>
    if(new_btnm == NULL) return NULL;
 8018aa0:	697b      	ldr	r3, [r7, #20]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d101      	bne.n	8018aaa <lv_btnm_create+0x26>
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	e0b9      	b.n	8018c1e <lv_btnm_create+0x19a>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btnm);
 8018aaa:	4b5f      	ldr	r3, [pc, #380]	; (8018c28 <lv_btnm_create+0x1a4>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d105      	bne.n	8018abe <lv_btnm_create+0x3a>
 8018ab2:	6978      	ldr	r0, [r7, #20]
 8018ab4:	f7f1 f999 	bl	8009dea <lv_obj_get_signal_cb>
 8018ab8:	4602      	mov	r2, r0
 8018aba:	4b5b      	ldr	r3, [pc, #364]	; (8018c28 <lv_btnm_create+0x1a4>)
 8018abc:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_btnm_ext_t * ext = lv_obj_allocate_ext_attr(new_btnm, sizeof(lv_btnm_ext_t));
 8018abe:	2128      	movs	r1, #40	; 0x28
 8018ac0:	6978      	ldr	r0, [r7, #20]
 8018ac2:	f7f0 ffdd 	bl	8009a80 <lv_obj_allocate_ext_attr>
 8018ac6:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8018ac8:	693b      	ldr	r3, [r7, #16]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d100      	bne.n	8018ad0 <lv_btnm_create+0x4c>
 8018ace:	e7fe      	b.n	8018ace <lv_btnm_create+0x4a>
    if(ext == NULL) return NULL;
 8018ad0:	693b      	ldr	r3, [r7, #16]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d101      	bne.n	8018ada <lv_btnm_create+0x56>
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	e0a1      	b.n	8018c1e <lv_btnm_create+0x19a>

    ext->btn_cnt                          = 0;
 8018ada:	693b      	ldr	r3, [r7, #16]
 8018adc:	2200      	movs	r2, #0
 8018ade:	841a      	strh	r2, [r3, #32]
    ext->btn_id_pr                        = LV_BTNM_BTN_NONE;
 8018ae0:	693b      	ldr	r3, [r7, #16]
 8018ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ae6:	845a      	strh	r2, [r3, #34]	; 0x22
    ext->btn_id_act                       = LV_BTNM_BTN_NONE;
 8018ae8:	693b      	ldr	r3, [r7, #16]
 8018aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018aee:	849a      	strh	r2, [r3, #36]	; 0x24
    ext->button_areas                     = NULL;
 8018af0:	693b      	ldr	r3, [r7, #16]
 8018af2:	2200      	movs	r2, #0
 8018af4:	605a      	str	r2, [r3, #4]
    ext->ctrl_bits                        = NULL;
 8018af6:	693b      	ldr	r3, [r7, #16]
 8018af8:	2200      	movs	r2, #0
 8018afa:	609a      	str	r2, [r3, #8]
    ext->map_p                            = NULL;
 8018afc:	693b      	ldr	r3, [r7, #16]
 8018afe:	2200      	movs	r2, #0
 8018b00:	601a      	str	r2, [r3, #0]
    ext->recolor                          = 0;
 8018b02:	693a      	ldr	r2, [r7, #16]
 8018b04:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8018b08:	f36f 0300 	bfc	r3, #0, #1
 8018b0c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    ext->one_toggle                       = 0;
 8018b10:	693a      	ldr	r2, [r7, #16]
 8018b12:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8018b16:	f36f 0341 	bfc	r3, #1, #1
 8018b1a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    ext->styles_btn[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 8018b1e:	693b      	ldr	r3, [r7, #16]
 8018b20:	4a42      	ldr	r2, [pc, #264]	; (8018c2c <lv_btnm_create+0x1a8>)
 8018b22:	60da      	str	r2, [r3, #12]
    ext->styles_btn[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 8018b24:	693b      	ldr	r3, [r7, #16]
 8018b26:	4a42      	ldr	r2, [pc, #264]	; (8018c30 <lv_btnm_create+0x1ac>)
 8018b28:	611a      	str	r2, [r3, #16]
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8018b2a:	693b      	ldr	r3, [r7, #16]
 8018b2c:	4a41      	ldr	r2, [pc, #260]	; (8018c34 <lv_btnm_create+0x1b0>)
 8018b2e:	615a      	str	r2, [r3, #20]
    ext->styles_btn[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 8018b30:	693b      	ldr	r3, [r7, #16]
 8018b32:	4a41      	ldr	r2, [pc, #260]	; (8018c38 <lv_btnm_create+0x1b4>)
 8018b34:	619a      	str	r2, [r3, #24]
    ext->styles_btn[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 8018b36:	693b      	ldr	r3, [r7, #16]
 8018b38:	4a40      	ldr	r2, [pc, #256]	; (8018c3c <lv_btnm_create+0x1b8>)
 8018b3a:	61da      	str	r2, [r3, #28]

    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_btnm);
 8018b3c:	4b40      	ldr	r3, [pc, #256]	; (8018c40 <lv_btnm_create+0x1bc>)
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d105      	bne.n	8018b50 <lv_btnm_create+0xcc>
 8018b44:	6978      	ldr	r0, [r7, #20]
 8018b46:	f7f1 f95c 	bl	8009e02 <lv_obj_get_design_cb>
 8018b4a:	4602      	mov	r2, r0
 8018b4c:	4b3c      	ldr	r3, [pc, #240]	; (8018c40 <lv_btnm_create+0x1bc>)
 8018b4e:	601a      	str	r2, [r3, #0]

    lv_obj_set_signal_cb(new_btnm, lv_btnm_signal);
 8018b50:	493c      	ldr	r1, [pc, #240]	; (8018c44 <lv_btnm_create+0x1c0>)
 8018b52:	6978      	ldr	r0, [r7, #20]
 8018b54:	f7f0 ff78 	bl	8009a48 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btnm, lv_btnm_design);
 8018b58:	493b      	ldr	r1, [pc, #236]	; (8018c48 <lv_btnm_create+0x1c4>)
 8018b5a:	6978      	ldr	r0, [r7, #20]
 8018b5c:	f7f0 ff82 	bl	8009a64 <lv_obj_set_design_cb>

    /*Init the new button matrix object*/
    if(copy == NULL) {
 8018b60:	683b      	ldr	r3, [r7, #0]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d145      	bne.n	8018bf2 <lv_btnm_create+0x16e>
        lv_obj_set_size(new_btnm, LV_DPI * 3, LV_DPI * 2);
 8018b66:	22c8      	movs	r2, #200	; 0xc8
 8018b68:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8018b6c:	6978      	ldr	r0, [r7, #20]
 8018b6e:	f7f0 f8dc 	bl	8008d2a <lv_obj_set_size>
        lv_btnm_set_map(new_btnm, lv_btnm_def_map);
 8018b72:	4936      	ldr	r1, [pc, #216]	; (8018c4c <lv_btnm_create+0x1c8>)
 8018b74:	6978      	ldr	r0, [r7, #20]
 8018b76:	f000 f86d 	bl	8018c54 <lv_btnm_set_map>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8018b7a:	f008 ffd1 	bl	8021b20 <lv_theme_get_current>
 8018b7e:	60b8      	str	r0, [r7, #8]
        if(th) {
 8018b80:	68bb      	ldr	r3, [r7, #8]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d030      	beq.n	8018be8 <lv_btnm_create+0x164>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BG, th->style.btnm.bg);
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018b8c:	461a      	mov	r2, r3
 8018b8e:	2100      	movs	r1, #0
 8018b90:	6978      	ldr	r0, [r7, #20]
 8018b92:	f000 fa09 	bl	8018fa8 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_REL, th->style.btnm.btn.rel);
 8018b96:	68bb      	ldr	r3, [r7, #8]
 8018b98:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8018b9c:	461a      	mov	r2, r3
 8018b9e:	2101      	movs	r1, #1
 8018ba0:	6978      	ldr	r0, [r7, #20]
 8018ba2:	f000 fa01 	bl	8018fa8 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_PR, th->style.btnm.btn.pr);
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8018bac:	461a      	mov	r2, r3
 8018bae:	2102      	movs	r1, #2
 8018bb0:	6978      	ldr	r0, [r7, #20]
 8018bb2:	f000 f9f9 	bl	8018fa8 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_REL, th->style.btnm.btn.tgl_rel);
 8018bb6:	68bb      	ldr	r3, [r7, #8]
 8018bb8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8018bbc:	461a      	mov	r2, r3
 8018bbe:	2103      	movs	r1, #3
 8018bc0:	6978      	ldr	r0, [r7, #20]
 8018bc2:	f000 f9f1 	bl	8018fa8 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_PR, th->style.btnm.btn.tgl_pr);
 8018bc6:	68bb      	ldr	r3, [r7, #8]
 8018bc8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8018bcc:	461a      	mov	r2, r3
 8018bce:	2104      	movs	r1, #4
 8018bd0:	6978      	ldr	r0, [r7, #20]
 8018bd2:	f000 f9e9 	bl	8018fa8 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_INA, th->style.btnm.btn.ina);
 8018bd6:	68bb      	ldr	r3, [r7, #8]
 8018bd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8018bdc:	461a      	mov	r2, r3
 8018bde:	2105      	movs	r1, #5
 8018be0:	6978      	ldr	r0, [r7, #20]
 8018be2:	f000 f9e1 	bl	8018fa8 <lv_btnm_set_style>
 8018be6:	e019      	b.n	8018c1c <lv_btnm_create+0x198>
        } else {
            lv_obj_set_style(new_btnm, &lv_style_pretty);
 8018be8:	4919      	ldr	r1, [pc, #100]	; (8018c50 <lv_btnm_create+0x1cc>)
 8018bea:	6978      	ldr	r0, [r7, #20]
 8018bec:	f7f0 fde5 	bl	80097ba <lv_obj_set_style>
 8018bf0:	e014      	b.n	8018c1c <lv_btnm_create+0x198>
        }
    }
    /*Copy an existing object*/
    else {
        lv_btnm_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018bf2:	6838      	ldr	r0, [r7, #0]
 8018bf4:	f7f1 f911 	bl	8009e1a <lv_obj_get_ext_attr>
 8018bf8:	60f8      	str	r0, [r7, #12]
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 8018bfa:	693b      	ldr	r3, [r7, #16]
 8018bfc:	f103 000c 	add.w	r0, r3, #12
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	330c      	adds	r3, #12
 8018c04:	2214      	movs	r2, #20
 8018c06:	4619      	mov	r1, r3
 8018c08:	f011 f8d4 	bl	8029db4 <memcpy>
        lv_btnm_set_map(new_btnm, lv_btnm_get_map_array(copy));
 8018c0c:	6838      	ldr	r0, [r7, #0]
 8018c0e:	f000 faac 	bl	801916a <lv_btnm_get_map_array>
 8018c12:	4603      	mov	r3, r0
 8018c14:	4619      	mov	r1, r3
 8018c16:	6978      	ldr	r0, [r7, #20]
 8018c18:	f000 f81c 	bl	8018c54 <lv_btnm_set_map>
    }

    LV_LOG_INFO("button matrix created");

    return new_btnm;
 8018c1c:	697b      	ldr	r3, [r7, #20]
}
 8018c1e:	4618      	mov	r0, r3
 8018c20:	3718      	adds	r7, #24
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bd80      	pop	{r7, pc}
 8018c26:	bf00      	nop
 8018c28:	200177c4 	.word	0x200177c4
 8018c2c:	2001b8a8 	.word	0x2001b8a8
 8018c30:	2001b8e4 	.word	0x2001b8e4
 8018c34:	2001ba4c 	.word	0x2001ba4c
 8018c38:	2001bac4 	.word	0x2001bac4
 8018c3c:	2001b998 	.word	0x2001b998
 8018c40:	200177c0 	.word	0x200177c0
 8018c44:	080196d5 	.word	0x080196d5
 8018c48:	0801926d 	.word	0x0801926d
 8018c4c:	200027b4 	.word	0x200027b4
 8018c50:	2001b920 	.word	0x2001b920

08018c54 <lv_btnm_set_map>:
 * be deallocated during the life of the matrix.
 * @param btnm pointer to a button matrix object
 * @param map pointer a string array. The last string has to be: "". Use "\n" to make a line break.
 */
void lv_btnm_set_map(const lv_obj_t * btnm, const char * map[])
{
 8018c54:	b590      	push	{r4, r7, lr}
 8018c56:	b091      	sub	sp, #68	; 0x44
 8018c58:	af02      	add	r7, sp, #8
 8018c5a:	6078      	str	r0, [r7, #4]
 8018c5c:	6039      	str	r1, [r7, #0]
    if(map == NULL) return;
 8018c5e:	683b      	ldr	r3, [r7, #0]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	f000 819a 	beq.w	8018f9a <lv_btnm_set_map+0x346>
     * to hidden/longpress/disabled states after the map was originally set.
     *
     * TODO: separate all map set/allocation from layout code below and skip
     * set/allocation when map hasn't changed.
     */
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8018c66:	6878      	ldr	r0, [r7, #4]
 8018c68:	f7f1 f8d7 	bl	8009e1a <lv_obj_get_ext_attr>
 8018c6c:	61f8      	str	r0, [r7, #28]
    if(!maps_are_identical(ext->map_p, map)) {
 8018c6e:	69fb      	ldr	r3, [r7, #28]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	6839      	ldr	r1, [r7, #0]
 8018c74:	4618      	mov	r0, r3
 8018c76:	f001 fab3 	bl	801a1e0 <maps_are_identical>
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	f083 0301 	eor.w	r3, r3, #1
 8018c80:	b2db      	uxtb	r3, r3
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d003      	beq.n	8018c8e <lv_btnm_set_map+0x3a>

        /*Analyze the map and create the required number of buttons*/
        allocate_btn_areas_and_controls(btnm, map);
 8018c86:	6839      	ldr	r1, [r7, #0]
 8018c88:	6878      	ldr	r0, [r7, #4]
 8018c8a:	f001 f8e9 	bl	8019e60 <allocate_btn_areas_and_controls>
    }
    ext->map_p = map;
 8018c8e:	69fb      	ldr	r3, [r7, #28]
 8018c90:	683a      	ldr	r2, [r7, #0]
 8018c92:	601a      	str	r2, [r3, #0]

    /*Set size and positions of the buttons*/
    const lv_style_t * style_bg = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8018c94:	2100      	movs	r1, #0
 8018c96:	6878      	ldr	r0, [r7, #4]
 8018c98:	f000 faa8 	bl	80191ec <lv_btnm_get_style>
 8018c9c:	61b8      	str	r0, [r7, #24]
    lv_coord_t max_w            = lv_obj_get_width(btnm) - style_bg->body.padding.left - style_bg->body.padding.right;
 8018c9e:	6878      	ldr	r0, [r7, #4]
 8018ca0:	f7f0 ffd0 	bl	8009c44 <lv_obj_get_width>
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	b29a      	uxth	r2, r3
 8018ca8:	69bb      	ldr	r3, [r7, #24]
 8018caa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8018cae:	b29b      	uxth	r3, r3
 8018cb0:	1ad3      	subs	r3, r2, r3
 8018cb2:	b29a      	uxth	r2, r3
 8018cb4:	69bb      	ldr	r3, [r7, #24]
 8018cb6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8018cba:	b29b      	uxth	r3, r3
 8018cbc:	1ad3      	subs	r3, r2, r3
 8018cbe:	b29b      	uxth	r3, r3
 8018cc0:	82fb      	strh	r3, [r7, #22]
    lv_coord_t max_h            = lv_obj_get_height(btnm) - style_bg->body.padding.top - style_bg->body.padding.bottom;
 8018cc2:	6878      	ldr	r0, [r7, #4]
 8018cc4:	f7f0 ffcc 	bl	8009c60 <lv_obj_get_height>
 8018cc8:	4603      	mov	r3, r0
 8018cca:	b29a      	uxth	r2, r3
 8018ccc:	69bb      	ldr	r3, [r7, #24]
 8018cce:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018cd2:	b29b      	uxth	r3, r3
 8018cd4:	1ad3      	subs	r3, r2, r3
 8018cd6:	b29a      	uxth	r2, r3
 8018cd8:	69bb      	ldr	r3, [r7, #24]
 8018cda:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8018cde:	b29b      	uxth	r3, r3
 8018ce0:	1ad3      	subs	r3, r2, r3
 8018ce2:	b29b      	uxth	r3, r3
 8018ce4:	82bb      	strh	r3, [r7, #20]
    lv_coord_t act_y            = style_bg->body.padding.top;
 8018ce6:	69bb      	ldr	r3, [r7, #24]
 8018ce8:	8adb      	ldrh	r3, [r3, #22]
 8018cea:	86fb      	strh	r3, [r7, #54]	; 0x36

    /*Count the lines to calculate button height*/
    uint8_t line_cnt = 1;
 8018cec:	2301      	movs	r3, #1
 8018cee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t li;
    for(li = 0; strlen(map[li]) != 0; li++) {
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8018cf8:	e016      	b.n	8018d28 <lv_btnm_set_map+0xd4>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
 8018cfa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018cfe:	009b      	lsls	r3, r3, #2
 8018d00:	683a      	ldr	r2, [r7, #0]
 8018d02:	4413      	add	r3, r2
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	49a7      	ldr	r1, [pc, #668]	; (8018fa4 <lv_btnm_set_map+0x350>)
 8018d08:	4618      	mov	r0, r3
 8018d0a:	f7e7 fa61 	bl	80001d0 <strcmp>
 8018d0e:	4603      	mov	r3, r0
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d104      	bne.n	8018d1e <lv_btnm_set_map+0xca>
 8018d14:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8018d18:	3301      	adds	r3, #1
 8018d1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    for(li = 0; strlen(map[li]) != 0; li++) {
 8018d1e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018d22:	3301      	adds	r3, #1
 8018d24:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8018d28:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018d2c:	009b      	lsls	r3, r3, #2
 8018d2e:	683a      	ldr	r2, [r7, #0]
 8018d30:	4413      	add	r3, r2
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	781b      	ldrb	r3, [r3, #0]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d1df      	bne.n	8018cfa <lv_btnm_set_map+0xa6>
    }

    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 8018d3a:	8aba      	ldrh	r2, [r7, #20]
 8018d3c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8018d40:	3b01      	subs	r3, #1
 8018d42:	b299      	uxth	r1, r3
 8018d44:	69bb      	ldr	r3, [r7, #24]
 8018d46:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018d4a:	b29b      	uxth	r3, r3
 8018d4c:	fb11 f303 	smulbb	r3, r1, r3
 8018d50:	b29b      	uxth	r3, r3
 8018d52:	1ad3      	subs	r3, r2, r3
 8018d54:	b29b      	uxth	r3, r3
 8018d56:	867b      	strh	r3, [r7, #50]	; 0x32
    btn_h            = btn_h / line_cnt;
 8018d58:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8018d5c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8018d60:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d64:	867b      	strh	r3, [r7, #50]	; 0x32
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 8018d66:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8018d6a:	b29b      	uxth	r3, r3
 8018d6c:	3b01      	subs	r3, #1
 8018d6e:	b29b      	uxth	r3, r3
 8018d70:	867b      	strh	r3, [r7, #50]	; 0x32
    /* Count the units and the buttons in a line
     * (A button can be 1,2,3... unit wide)*/
    uint16_t unit_cnt;           /*Number of units in a row*/
    uint16_t unit_act_cnt;       /*Number of units currently put in a row*/
    uint16_t btn_cnt;            /*Number of buttons in a row*/
    uint16_t i_tot          = 0; /*Act. index in the str map*/
 8018d72:	2300      	movs	r3, #0
 8018d74:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t btn_i          = 0; /*Act. index of button areas*/
 8018d76:	2300      	movs	r3, #0
 8018d78:	853b      	strh	r3, [r7, #40]	; 0x28
    const char ** map_p_tmp = map;
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	627b      	str	r3, [r7, #36]	; 0x24

    /*Count the units and the buttons in a line*/
    while(1) {
        unit_cnt = 0;
 8018d7e:	2300      	movs	r3, #0
 8018d80:	863b      	strh	r3, [r7, #48]	; 0x30
        btn_cnt  = 0;
 8018d82:	2300      	movs	r3, #0
 8018d84:	85bb      	strh	r3, [r7, #44]	; 0x2c
        /*Count the buttons in a line*/
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 8018d86:	e012      	b.n	8018dae <lv_btnm_set_map+0x15a>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
 8018d88:	69fb      	ldr	r3, [r7, #28]
 8018d8a:	689a      	ldr	r2, [r3, #8]
 8018d8c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8018d8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018d90:	440b      	add	r3, r1
 8018d92:	005b      	lsls	r3, r3, #1
 8018d94:	4413      	add	r3, r2
 8018d96:	881b      	ldrh	r3, [r3, #0]
 8018d98:	4618      	mov	r0, r3
 8018d9a:	f001 f8d7 	bl	8019f4c <get_button_width>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	b29a      	uxth	r2, r3
 8018da2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018da4:	4413      	add	r3, r2
 8018da6:	863b      	strh	r3, [r7, #48]	; 0x30
            btn_cnt++;
 8018da8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018daa:	3301      	adds	r3, #1
 8018dac:	85bb      	strh	r3, [r7, #44]	; 0x2c
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 8018dae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018db0:	009b      	lsls	r3, r3, #2
 8018db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018db4:	4413      	add	r3, r2
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	497a      	ldr	r1, [pc, #488]	; (8018fa4 <lv_btnm_set_map+0x350>)
 8018dba:	4618      	mov	r0, r3
 8018dbc:	f7e7 fa08 	bl	80001d0 <strcmp>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d007      	beq.n	8018dd6 <lv_btnm_set_map+0x182>
 8018dc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018dc8:	009b      	lsls	r3, r3, #2
 8018dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018dcc:	4413      	add	r3, r2
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	781b      	ldrb	r3, [r3, #0]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d1d8      	bne.n	8018d88 <lv_btnm_set_map+0x134>
        }

        /*Make sure the last row is at the bottom of 'btnm'*/
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
 8018dd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018dd8:	009b      	lsls	r3, r3, #2
 8018dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ddc:	4413      	add	r3, r2
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	781b      	ldrb	r3, [r3, #0]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d10c      	bne.n	8018e00 <lv_btnm_set_map+0x1ac>
            btn_h = max_h - act_y + style_bg->body.padding.bottom - 1;
 8018de6:	8aba      	ldrh	r2, [r7, #20]
 8018de8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018dea:	1ad3      	subs	r3, r2, r3
 8018dec:	b29a      	uxth	r2, r3
 8018dee:	69bb      	ldr	r3, [r7, #24]
 8018df0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8018df4:	b29b      	uxth	r3, r3
 8018df6:	4413      	add	r3, r2
 8018df8:	b29b      	uxth	r3, r3
 8018dfa:	3b01      	subs	r3, #1
 8018dfc:	b29b      	uxth	r3, r3
 8018dfe:	867b      	strh	r3, [r7, #50]	; 0x32
        }

        /*Only deal with the non empty lines*/
        if(btn_cnt != 0) {
 8018e00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	f000 80a7 	beq.w	8018f56 <lv_btnm_set_map+0x302>
            /*Calculate the width of all units*/
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 8018e08:	8afa      	ldrh	r2, [r7, #22]
 8018e0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018e0c:	3b01      	subs	r3, #1
 8018e0e:	b299      	uxth	r1, r3
 8018e10:	69bb      	ldr	r3, [r7, #24]
 8018e12:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018e16:	b29b      	uxth	r3, r3
 8018e18:	fb11 f303 	smulbb	r3, r1, r3
 8018e1c:	b29b      	uxth	r3, r3
 8018e1e:	1ad3      	subs	r3, r2, r3
 8018e20:	b29b      	uxth	r3, r3
 8018e22:	827b      	strh	r3, [r7, #18]

            /*Set the button size and positions and set the texts*/
            uint16_t i;
            lv_coord_t act_x = style_bg->body.padding.left;
 8018e24:	69bb      	ldr	r3, [r7, #24]
 8018e26:	8b5b      	ldrh	r3, [r3, #26]
 8018e28:	823b      	strh	r3, [r7, #16]
            lv_coord_t act_unit_w;
            unit_act_cnt = 0;
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
            for(i = 0; i < btn_cnt; i++) {
 8018e2e:	2300      	movs	r3, #0
 8018e30:	847b      	strh	r3, [r7, #34]	; 0x22
 8018e32:	e08b      	b.n	8018f4c <lv_btnm_set_map+0x2f8>
                /* one_unit_w = all_unit_w / unit_cnt
                 * act_unit_w = one_unit_w * button_width
                 * do this two operations but the multiply first to divide a greater number */
                act_unit_w = (all_unit_w * get_button_width(ext->ctrl_bits[btn_i])) / unit_cnt;
 8018e34:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
 8018e38:	69fb      	ldr	r3, [r7, #28]
 8018e3a:	689a      	ldr	r2, [r3, #8]
 8018e3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018e3e:	005b      	lsls	r3, r3, #1
 8018e40:	4413      	add	r3, r2
 8018e42:	881b      	ldrh	r3, [r3, #0]
 8018e44:	4618      	mov	r0, r3
 8018e46:	f001 f881 	bl	8019f4c <get_button_width>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	fb03 f204 	mul.w	r2, r3, r4
 8018e50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e56:	81fb      	strh	r3, [r7, #14]
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 8018e58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018e5c:	b29b      	uxth	r3, r3
 8018e5e:	3b01      	subs	r3, #1
 8018e60:	b29b      	uxth	r3, r3
 8018e62:	81fb      	strh	r3, [r7, #14]

                /*Always recalculate act_x because of rounding errors */
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8018e64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018e66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8018e6a:	fb02 f203 	mul.w	r2, r2, r3
 8018e6e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018e70:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e74:	b29a      	uxth	r2, r3
 8018e76:	69bb      	ldr	r3, [r7, #24]
 8018e78:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018e7c:	b29b      	uxth	r3, r3
 8018e7e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8018e80:	fb11 f303 	smulbb	r3, r1, r3
 8018e84:	b29b      	uxth	r3, r3
 8018e86:	4413      	add	r3, r2
 8018e88:	b29a      	uxth	r2, r3
                        style_bg->body.padding.left;
 8018e8a:	69bb      	ldr	r3, [r7, #24]
 8018e8c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8018e90:	b29b      	uxth	r3, r3
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8018e92:	4413      	add	r3, r2
 8018e94:	b29b      	uxth	r3, r3
 8018e96:	823b      	strh	r3, [r7, #16]

                /* Set the button's area.
                 * If inner padding is zero then use the prev. button x2 as x1 to avoid rounding
                 * errors*/
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.left) {
 8018e98:	69bb      	ldr	r3, [r7, #24]
 8018e9a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d126      	bne.n	8018ef0 <lv_btnm_set_map+0x29c>
 8018ea2:	69bb      	ldr	r3, [r7, #24]
 8018ea4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8018ea8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8018eac:	429a      	cmp	r2, r3
 8018eae:	d01f      	beq.n	8018ef0 <lv_btnm_set_map+0x29c>
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 8018eb0:	69fb      	ldr	r3, [r7, #28]
 8018eb2:	685a      	ldr	r2, [r3, #4]
 8018eb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018eb6:	00db      	lsls	r3, r3, #3
 8018eb8:	18d0      	adds	r0, r2, r3
 8018eba:	69fb      	ldr	r3, [r7, #28]
 8018ebc:	685a      	ldr	r2, [r3, #4]
 8018ebe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018ec0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8018ec4:	3b01      	subs	r3, #1
 8018ec6:	00db      	lsls	r3, r3, #3
 8018ec8:	4413      	add	r3, r2
 8018eca:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018ece:	8a3a      	ldrh	r2, [r7, #16]
 8018ed0:	89fb      	ldrh	r3, [r7, #14]
 8018ed2:	4413      	add	r3, r2
 8018ed4:	b29b      	uxth	r3, r3
 8018ed6:	b21c      	sxth	r4, r3
                                act_y + btn_h);
 8018ed8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018eda:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018edc:	4413      	add	r3, r2
 8018ede:	b29b      	uxth	r3, r3
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 8018ee0:	b21b      	sxth	r3, r3
 8018ee2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8018ee6:	9300      	str	r3, [sp, #0]
 8018ee8:	4623      	mov	r3, r4
 8018eea:	f7fc fc85 	bl	80157f8 <lv_area_set>
 8018eee:	e016      	b.n	8018f1e <lv_btnm_set_map+0x2ca>
                } else {
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
 8018ef0:	69fb      	ldr	r3, [r7, #28]
 8018ef2:	685a      	ldr	r2, [r3, #4]
 8018ef4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018ef6:	00db      	lsls	r3, r3, #3
 8018ef8:	18d0      	adds	r0, r2, r3
 8018efa:	8a3a      	ldrh	r2, [r7, #16]
 8018efc:	89fb      	ldrh	r3, [r7, #14]
 8018efe:	4413      	add	r3, r2
 8018f00:	b29b      	uxth	r3, r3
 8018f02:	b21c      	sxth	r4, r3
 8018f04:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018f06:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018f08:	4413      	add	r3, r2
 8018f0a:	b29b      	uxth	r3, r3
 8018f0c:	b21b      	sxth	r3, r3
 8018f0e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8018f12:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8018f16:	9300      	str	r3, [sp, #0]
 8018f18:	4623      	mov	r3, r4
 8018f1a:	f7fc fc6d 	bl	80157f8 <lv_area_set>
                }

                unit_act_cnt += get_button_width(ext->ctrl_bits[btn_i]);
 8018f1e:	69fb      	ldr	r3, [r7, #28]
 8018f20:	689a      	ldr	r2, [r3, #8]
 8018f22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018f24:	005b      	lsls	r3, r3, #1
 8018f26:	4413      	add	r3, r2
 8018f28:	881b      	ldrh	r3, [r3, #0]
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	f001 f80e 	bl	8019f4c <get_button_width>
 8018f30:	4603      	mov	r3, r0
 8018f32:	b29a      	uxth	r2, r3
 8018f34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018f36:	4413      	add	r3, r2
 8018f38:	85fb      	strh	r3, [r7, #46]	; 0x2e

                i_tot++;
 8018f3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018f3c:	3301      	adds	r3, #1
 8018f3e:	857b      	strh	r3, [r7, #42]	; 0x2a
                btn_i++;
 8018f40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018f42:	3301      	adds	r3, #1
 8018f44:	853b      	strh	r3, [r7, #40]	; 0x28
            for(i = 0; i < btn_cnt; i++) {
 8018f46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f48:	3301      	adds	r3, #1
 8018f4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8018f4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018f4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018f50:	429a      	cmp	r2, r3
 8018f52:	f4ff af6f 	bcc.w	8018e34 <lv_btnm_set_map+0x1e0>
            }
        }
        act_y += btn_h + style_bg->body.padding.inner;
 8018f56:	69bb      	ldr	r3, [r7, #24]
 8018f58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018f5c:	b29a      	uxth	r2, r3
 8018f5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018f60:	4413      	add	r3, r2
 8018f62:	b29a      	uxth	r2, r3
 8018f64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018f66:	4413      	add	r3, r2
 8018f68:	b29b      	uxth	r3, r3
 8018f6a:	86fb      	strh	r3, [r7, #54]	; 0x36

        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 8018f6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018f6e:	009b      	lsls	r3, r3, #2
 8018f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f72:	4413      	add	r3, r2
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	781b      	ldrb	r3, [r3, #0]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d009      	beq.n	8018f90 <lv_btnm_set_map+0x33c>
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
 8018f7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018f7e:	3301      	adds	r3, #1
 8018f80:	009b      	lsls	r3, r3, #2
 8018f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f84:	4413      	add	r3, r2
 8018f86:	627b      	str	r3, [r7, #36]	; 0x24
        i_tot++;                                   /*Skip the '\n'*/
 8018f88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018f8a:	3301      	adds	r3, #1
 8018f8c:	857b      	strh	r3, [r7, #42]	; 0x2a
        unit_cnt = 0;
 8018f8e:	e6f6      	b.n	8018d7e <lv_btnm_set_map+0x12a>
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 8018f90:	bf00      	nop
    }

    lv_obj_invalidate(btnm);
 8018f92:	6878      	ldr	r0, [r7, #4]
 8018f94:	f7ef fd15 	bl	80089c2 <lv_obj_invalidate>
 8018f98:	e000      	b.n	8018f9c <lv_btnm_set_map+0x348>
    if(map == NULL) return;
 8018f9a:	bf00      	nop
}
 8018f9c:	373c      	adds	r7, #60	; 0x3c
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	bd90      	pop	{r4, r7, pc}
 8018fa2:	bf00      	nop
 8018fa4:	0802c8e8 	.word	0x0802c8e8

08018fa8 <lv_btnm_set_style>:
 * @param btnm pointer to a button matrix object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_btnm_set_style(lv_obj_t * btnm, lv_btnm_style_t type, const lv_style_t * style)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b086      	sub	sp, #24
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	60f8      	str	r0, [r7, #12]
 8018fb0:	460b      	mov	r3, r1
 8018fb2:	607a      	str	r2, [r7, #4]
 8018fb4:	72fb      	strb	r3, [r7, #11]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8018fb6:	68f8      	ldr	r0, [r7, #12]
 8018fb8:	f7f0 ff2f 	bl	8009e1a <lv_obj_get_ext_attr>
 8018fbc:	6178      	str	r0, [r7, #20]

    switch(type) {
 8018fbe:	7afb      	ldrb	r3, [r7, #11]
 8018fc0:	2b05      	cmp	r3, #5
 8018fc2:	d837      	bhi.n	8019034 <lv_btnm_set_style+0x8c>
 8018fc4:	a201      	add	r2, pc, #4	; (adr r2, 8018fcc <lv_btnm_set_style+0x24>)
 8018fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fca:	bf00      	nop
 8018fcc:	08018fe5 	.word	0x08018fe5
 8018fd0:	08018fef 	.word	0x08018fef
 8018fd4:	08018ffd 	.word	0x08018ffd
 8018fd8:	0801900b 	.word	0x0801900b
 8018fdc:	08019019 	.word	0x08019019
 8018fe0:	08019027 	.word	0x08019027
        case LV_BTNM_STYLE_BG: lv_obj_set_style(btnm, style); break;
 8018fe4:	6879      	ldr	r1, [r7, #4]
 8018fe6:	68f8      	ldr	r0, [r7, #12]
 8018fe8:	f7f0 fbe7 	bl	80097ba <lv_obj_set_style>
 8018fec:	e022      	b.n	8019034 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_REL:
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 8018fee:	697b      	ldr	r3, [r7, #20]
 8018ff0:	687a      	ldr	r2, [r7, #4]
 8018ff2:	60da      	str	r2, [r3, #12]
            lv_obj_invalidate(btnm);
 8018ff4:	68f8      	ldr	r0, [r7, #12]
 8018ff6:	f7ef fce4 	bl	80089c2 <lv_obj_invalidate>
            break;
 8018ffa:	e01b      	b.n	8019034 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_PR:
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 8018ffc:	697b      	ldr	r3, [r7, #20]
 8018ffe:	687a      	ldr	r2, [r7, #4]
 8019000:	611a      	str	r2, [r3, #16]
            lv_obj_invalidate(btnm);
 8019002:	68f8      	ldr	r0, [r7, #12]
 8019004:	f7ef fcdd 	bl	80089c2 <lv_obj_invalidate>
            break;
 8019008:	e014      	b.n	8019034 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_TGL_REL:
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 801900a:	697b      	ldr	r3, [r7, #20]
 801900c:	687a      	ldr	r2, [r7, #4]
 801900e:	615a      	str	r2, [r3, #20]
            lv_obj_invalidate(btnm);
 8019010:	68f8      	ldr	r0, [r7, #12]
 8019012:	f7ef fcd6 	bl	80089c2 <lv_obj_invalidate>
            break;
 8019016:	e00d      	b.n	8019034 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_TGL_PR:
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 8019018:	697b      	ldr	r3, [r7, #20]
 801901a:	687a      	ldr	r2, [r7, #4]
 801901c:	619a      	str	r2, [r3, #24]
            lv_obj_invalidate(btnm);
 801901e:	68f8      	ldr	r0, [r7, #12]
 8019020:	f7ef fccf 	bl	80089c2 <lv_obj_invalidate>
            break;
 8019024:	e006      	b.n	8019034 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_INA:
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 8019026:	697b      	ldr	r3, [r7, #20]
 8019028:	687a      	ldr	r2, [r7, #4]
 801902a:	61da      	str	r2, [r3, #28]
            lv_obj_invalidate(btnm);
 801902c:	68f8      	ldr	r0, [r7, #12]
 801902e:	f7ef fcc8 	bl	80089c2 <lv_obj_invalidate>
            break;
 8019032:	bf00      	nop
    }
}
 8019034:	bf00      	nop
 8019036:	3718      	adds	r7, #24
 8019038:	46bd      	mov	sp, r7
 801903a:	bd80      	pop	{r7, pc}

0801903c <lv_btnm_set_btn_ctrl>:
 * Set the attributes of a button of the button matrix
 * @param btnm pointer to button matrix object
 * @param btn_id 0 based index of the button to modify. (Not counting new lines)
 */
void lv_btnm_set_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b084      	sub	sp, #16
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
 8019044:	460b      	mov	r3, r1
 8019046:	807b      	strh	r3, [r7, #2]
 8019048:	4613      	mov	r3, r2
 801904a:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	f7f0 fee4 	bl	8009e1a <lv_obj_get_ext_attr>
 8019052:	60f8      	str	r0, [r7, #12]

    if(btn_id >= ext->btn_cnt) return;
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	8c1b      	ldrh	r3, [r3, #32]
 8019058:	887a      	ldrh	r2, [r7, #2]
 801905a:	429a      	cmp	r2, r3
 801905c:	d214      	bcs.n	8019088 <lv_btnm_set_btn_ctrl+0x4c>

    ext->ctrl_bits[btn_id] |= ctrl;
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	689a      	ldr	r2, [r3, #8]
 8019062:	887b      	ldrh	r3, [r7, #2]
 8019064:	005b      	lsls	r3, r3, #1
 8019066:	4413      	add	r3, r2
 8019068:	8819      	ldrh	r1, [r3, #0]
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	689a      	ldr	r2, [r3, #8]
 801906e:	887b      	ldrh	r3, [r7, #2]
 8019070:	005b      	lsls	r3, r3, #1
 8019072:	4413      	add	r3, r2
 8019074:	883a      	ldrh	r2, [r7, #0]
 8019076:	430a      	orrs	r2, r1
 8019078:	b292      	uxth	r2, r2
 801907a:	801a      	strh	r2, [r3, #0]
    invalidate_button_area(btnm, btn_id);
 801907c:	887b      	ldrh	r3, [r7, #2]
 801907e:	4619      	mov	r1, r3
 8019080:	6878      	ldr	r0, [r7, #4]
 8019082:	f001 f856 	bl	801a132 <invalidate_button_area>
 8019086:	e000      	b.n	801908a <lv_btnm_set_btn_ctrl+0x4e>
    if(btn_id >= ext->btn_cnt) return;
 8019088:	bf00      	nop
}
 801908a:	3710      	adds	r7, #16
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}

08019090 <lv_btnm_clear_btn_ctrl>:
 * Clear the attributes of a button of the button matrix
 * @param btnm pointer to button matrix object
 * @param btn_id 0 based index of the button to modify. (Not counting new lines)
 */
void lv_btnm_clear_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b084      	sub	sp, #16
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
 8019098:	460b      	mov	r3, r1
 801909a:	807b      	strh	r3, [r7, #2]
 801909c:	4613      	mov	r3, r2
 801909e:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80190a0:	6878      	ldr	r0, [r7, #4]
 80190a2:	f7f0 feba 	bl	8009e1a <lv_obj_get_ext_attr>
 80190a6:	60f8      	str	r0, [r7, #12]

    if(btn_id >= ext->btn_cnt) return;
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	8c1b      	ldrh	r3, [r3, #32]
 80190ac:	887a      	ldrh	r2, [r7, #2]
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d219      	bcs.n	80190e6 <lv_btnm_clear_btn_ctrl+0x56>

    ext->ctrl_bits[btn_id] &= (~ctrl);
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	689a      	ldr	r2, [r3, #8]
 80190b6:	887b      	ldrh	r3, [r7, #2]
 80190b8:	005b      	lsls	r3, r3, #1
 80190ba:	4413      	add	r3, r2
 80190bc:	881b      	ldrh	r3, [r3, #0]
 80190be:	b21a      	sxth	r2, r3
 80190c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80190c4:	43db      	mvns	r3, r3
 80190c6:	b21b      	sxth	r3, r3
 80190c8:	4013      	ands	r3, r2
 80190ca:	b219      	sxth	r1, r3
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	689a      	ldr	r2, [r3, #8]
 80190d0:	887b      	ldrh	r3, [r7, #2]
 80190d2:	005b      	lsls	r3, r3, #1
 80190d4:	4413      	add	r3, r2
 80190d6:	b28a      	uxth	r2, r1
 80190d8:	801a      	strh	r2, [r3, #0]
    invalidate_button_area(btnm, btn_id);
 80190da:	887b      	ldrh	r3, [r7, #2]
 80190dc:	4619      	mov	r1, r3
 80190de:	6878      	ldr	r0, [r7, #4]
 80190e0:	f001 f827 	bl	801a132 <invalidate_button_area>
 80190e4:	e000      	b.n	80190e8 <lv_btnm_clear_btn_ctrl+0x58>
    if(btn_id >= ext->btn_cnt) return;
 80190e6:	bf00      	nop
}
 80190e8:	3710      	adds	r7, #16
 80190ea:	46bd      	mov	sp, r7
 80190ec:	bd80      	pop	{r7, pc}

080190ee <lv_btnm_set_btn_ctrl_all>:
 * Set the attributes of all buttons of a button matrix
 * @param btnm pointer to a button matrix object
 * @param ctrl attribute(s) to set from `lv_btnm_ctrl_t`. Values can be ORed.
 */
void lv_btnm_set_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl)
{
 80190ee:	b580      	push	{r7, lr}
 80190f0:	b084      	sub	sp, #16
 80190f2:	af00      	add	r7, sp, #0
 80190f4:	6078      	str	r0, [r7, #4]
 80190f6:	460b      	mov	r3, r1
 80190f8:	807b      	strh	r3, [r7, #2]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80190fa:	6878      	ldr	r0, [r7, #4]
 80190fc:	f7f0 fe8d 	bl	8009e1a <lv_obj_get_ext_attr>
 8019100:	60b8      	str	r0, [r7, #8]
    uint16_t i;
    for(i = 0; i < ext->btn_cnt; i++) {
 8019102:	2300      	movs	r3, #0
 8019104:	81fb      	strh	r3, [r7, #14]
 8019106:	e008      	b.n	801911a <lv_btnm_set_btn_ctrl_all+0x2c>
        lv_btnm_set_btn_ctrl(btnm, i, ctrl);
 8019108:	887a      	ldrh	r2, [r7, #2]
 801910a:	89fb      	ldrh	r3, [r7, #14]
 801910c:	4619      	mov	r1, r3
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	f7ff ff94 	bl	801903c <lv_btnm_set_btn_ctrl>
    for(i = 0; i < ext->btn_cnt; i++) {
 8019114:	89fb      	ldrh	r3, [r7, #14]
 8019116:	3301      	adds	r3, #1
 8019118:	81fb      	strh	r3, [r7, #14]
 801911a:	68bb      	ldr	r3, [r7, #8]
 801911c:	8c1b      	ldrh	r3, [r3, #32]
 801911e:	89fa      	ldrh	r2, [r7, #14]
 8019120:	429a      	cmp	r2, r3
 8019122:	d3f1      	bcc.n	8019108 <lv_btnm_set_btn_ctrl_all+0x1a>
    }
}
 8019124:	bf00      	nop
 8019126:	3710      	adds	r7, #16
 8019128:	46bd      	mov	sp, r7
 801912a:	bd80      	pop	{r7, pc}

0801912c <lv_btnm_clear_btn_ctrl_all>:
 * @param btnm pointer to a button matrix object
 * @param ctrl attribute(s) to set from `lv_btnm_ctrl_t`. Values can be ORed.
 * @param en true: set the attributes; false: clear the attributes
 */
void lv_btnm_clear_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl)
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b084      	sub	sp, #16
 8019130:	af00      	add	r7, sp, #0
 8019132:	6078      	str	r0, [r7, #4]
 8019134:	460b      	mov	r3, r1
 8019136:	807b      	strh	r3, [r7, #2]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019138:	6878      	ldr	r0, [r7, #4]
 801913a:	f7f0 fe6e 	bl	8009e1a <lv_obj_get_ext_attr>
 801913e:	60b8      	str	r0, [r7, #8]
    uint16_t i;
    for(i = 0; i < ext->btn_cnt; i++) {
 8019140:	2300      	movs	r3, #0
 8019142:	81fb      	strh	r3, [r7, #14]
 8019144:	e008      	b.n	8019158 <lv_btnm_clear_btn_ctrl_all+0x2c>
        lv_btnm_clear_btn_ctrl(btnm, i, ctrl);
 8019146:	887a      	ldrh	r2, [r7, #2]
 8019148:	89fb      	ldrh	r3, [r7, #14]
 801914a:	4619      	mov	r1, r3
 801914c:	6878      	ldr	r0, [r7, #4]
 801914e:	f7ff ff9f 	bl	8019090 <lv_btnm_clear_btn_ctrl>
    for(i = 0; i < ext->btn_cnt; i++) {
 8019152:	89fb      	ldrh	r3, [r7, #14]
 8019154:	3301      	adds	r3, #1
 8019156:	81fb      	strh	r3, [r7, #14]
 8019158:	68bb      	ldr	r3, [r7, #8]
 801915a:	8c1b      	ldrh	r3, [r3, #32]
 801915c:	89fa      	ldrh	r2, [r7, #14]
 801915e:	429a      	cmp	r2, r3
 8019160:	d3f1      	bcc.n	8019146 <lv_btnm_clear_btn_ctrl_all+0x1a>
    }
}
 8019162:	bf00      	nop
 8019164:	3710      	adds	r7, #16
 8019166:	46bd      	mov	sp, r7
 8019168:	bd80      	pop	{r7, pc}

0801916a <lv_btnm_get_map_array>:
 * Get the current map of a button matrix
 * @param btnm pointer to a button matrix object
 * @return the current map
 */
const char ** lv_btnm_get_map_array(const lv_obj_t * btnm)
{
 801916a:	b580      	push	{r7, lr}
 801916c:	b084      	sub	sp, #16
 801916e:	af00      	add	r7, sp, #0
 8019170:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019172:	6878      	ldr	r0, [r7, #4]
 8019174:	f7f0 fe51 	bl	8009e1a <lv_obj_get_ext_attr>
 8019178:	60f8      	str	r0, [r7, #12]
    return ext->map_p;
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	681b      	ldr	r3, [r3, #0]
}
 801917e:	4618      	mov	r0, r3
 8019180:	3710      	adds	r7, #16
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}

08019186 <lv_btnm_get_active_btn>:
 * Useful in the the `event_cb` to get the text of the button, check if hidden etc.
 * @param btnm pointer to button matrix object
 * @return  index of the last released button (LV_BTNM_BTN_NONE: if unset)
 */
uint16_t lv_btnm_get_active_btn(const lv_obj_t * btnm)
{
 8019186:	b580      	push	{r7, lr}
 8019188:	b084      	sub	sp, #16
 801918a:	af00      	add	r7, sp, #0
 801918c:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801918e:	6878      	ldr	r0, [r7, #4]
 8019190:	f7f0 fe43 	bl	8009e1a <lv_obj_get_ext_attr>
 8019194:	60f8      	str	r0, [r7, #12]
    return ext->btn_id_act;
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
 801919a:	4618      	mov	r0, r3
 801919c:	3710      	adds	r7, #16
 801919e:	46bd      	mov	sp, r7
 80191a0:	bd80      	pop	{r7, pc}

080191a2 <lv_btnm_get_btn_ctrl>:
 * lv_btnm_get_pressed/released)
 * @param ctrl control values to check (ORed value can be used)
 * @return true: long press repeat is disabled; false: long press repeat enabled
 */
bool lv_btnm_get_btn_ctrl(lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 80191a2:	b580      	push	{r7, lr}
 80191a4:	b084      	sub	sp, #16
 80191a6:	af00      	add	r7, sp, #0
 80191a8:	6078      	str	r0, [r7, #4]
 80191aa:	460b      	mov	r3, r1
 80191ac:	807b      	strh	r3, [r7, #2]
 80191ae:	4613      	mov	r3, r2
 80191b0:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80191b2:	6878      	ldr	r0, [r7, #4]
 80191b4:	f7f0 fe31 	bl	8009e1a <lv_obj_get_ext_attr>
 80191b8:	60f8      	str	r0, [r7, #12]
    if(btn_id >= ext->btn_cnt) return false;
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	8c1b      	ldrh	r3, [r3, #32]
 80191be:	887a      	ldrh	r2, [r7, #2]
 80191c0:	429a      	cmp	r2, r3
 80191c2:	d301      	bcc.n	80191c8 <lv_btnm_get_btn_ctrl+0x26>
 80191c4:	2300      	movs	r3, #0
 80191c6:	e00d      	b.n	80191e4 <lv_btnm_get_btn_ctrl+0x42>

    return ext->ctrl_bits[btn_id] & ctrl ? true : false;
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	689a      	ldr	r2, [r3, #8]
 80191cc:	887b      	ldrh	r3, [r7, #2]
 80191ce:	005b      	lsls	r3, r3, #1
 80191d0:	4413      	add	r3, r2
 80191d2:	881a      	ldrh	r2, [r3, #0]
 80191d4:	883b      	ldrh	r3, [r7, #0]
 80191d6:	4013      	ands	r3, r2
 80191d8:	b29b      	uxth	r3, r3
 80191da:	2b00      	cmp	r3, #0
 80191dc:	bf14      	ite	ne
 80191de:	2301      	movne	r3, #1
 80191e0:	2300      	moveq	r3, #0
 80191e2:	b2db      	uxtb	r3, r3
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3710      	adds	r7, #16
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}

080191ec <lv_btnm_get_style>:
 * @param btnm pointer to a button matrix object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_btnm_get_style(const lv_obj_t * btnm, lv_btnm_style_t type)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b084      	sub	sp, #16
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
 80191f4:	460b      	mov	r3, r1
 80191f6:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 80191f8:	2300      	movs	r3, #0
 80191fa:	60fb      	str	r3, [r7, #12]
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f7f0 fe0c 	bl	8009e1a <lv_obj_get_ext_attr>
 8019202:	60b8      	str	r0, [r7, #8]

    switch(type) {
 8019204:	78fb      	ldrb	r3, [r7, #3]
 8019206:	2b05      	cmp	r3, #5
 8019208:	d827      	bhi.n	801925a <lv_btnm_get_style+0x6e>
 801920a:	a201      	add	r2, pc, #4	; (adr r2, 8019210 <lv_btnm_get_style+0x24>)
 801920c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019210:	08019229 	.word	0x08019229
 8019214:	08019233 	.word	0x08019233
 8019218:	0801923b 	.word	0x0801923b
 801921c:	08019243 	.word	0x08019243
 8019220:	0801924b 	.word	0x0801924b
 8019224:	08019253 	.word	0x08019253
        case LV_BTNM_STYLE_BG: style = lv_obj_get_style(btnm); break;
 8019228:	6878      	ldr	r0, [r7, #4]
 801922a:	f7f0 fd3b 	bl	8009ca4 <lv_obj_get_style>
 801922e:	60f8      	str	r0, [r7, #12]
 8019230:	e016      	b.n	8019260 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_REL: style = ext->styles_btn[LV_BTN_STATE_REL]; break;
 8019232:	68bb      	ldr	r3, [r7, #8]
 8019234:	68db      	ldr	r3, [r3, #12]
 8019236:	60fb      	str	r3, [r7, #12]
 8019238:	e012      	b.n	8019260 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_PR: style = ext->styles_btn[LV_BTN_STATE_PR]; break;
 801923a:	68bb      	ldr	r3, [r7, #8]
 801923c:	691b      	ldr	r3, [r3, #16]
 801923e:	60fb      	str	r3, [r7, #12]
 8019240:	e00e      	b.n	8019260 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_TGL_REL: style = ext->styles_btn[LV_BTN_STATE_TGL_REL]; break;
 8019242:	68bb      	ldr	r3, [r7, #8]
 8019244:	695b      	ldr	r3, [r3, #20]
 8019246:	60fb      	str	r3, [r7, #12]
 8019248:	e00a      	b.n	8019260 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_TGL_PR: style = ext->styles_btn[LV_BTN_STATE_TGL_PR]; break;
 801924a:	68bb      	ldr	r3, [r7, #8]
 801924c:	699b      	ldr	r3, [r3, #24]
 801924e:	60fb      	str	r3, [r7, #12]
 8019250:	e006      	b.n	8019260 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_INA: style = ext->styles_btn[LV_BTN_STATE_INA]; break;
 8019252:	68bb      	ldr	r3, [r7, #8]
 8019254:	69db      	ldr	r3, [r3, #28]
 8019256:	60fb      	str	r3, [r7, #12]
 8019258:	e002      	b.n	8019260 <lv_btnm_get_style+0x74>
        default: style = NULL; break;
 801925a:	2300      	movs	r3, #0
 801925c:	60fb      	str	r3, [r7, #12]
 801925e:	bf00      	nop
    }

    return style;
 8019260:	68fb      	ldr	r3, [r7, #12]
}
 8019262:	4618      	mov	r0, r3
 8019264:	3710      	adds	r7, #16
 8019266:	46bd      	mov	sp, r7
 8019268:	bd80      	pop	{r7, pc}
 801926a:	bf00      	nop

0801926c <lv_btnm_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btnm_design(lv_obj_t * btnm, const lv_area_t * mask, lv_design_mode_t mode)
{
 801926c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801926e:	b0a7      	sub	sp, #156	; 0x9c
 8019270:	af06      	add	r7, sp, #24
 8019272:	60f8      	str	r0, [r7, #12]
 8019274:	60b9      	str	r1, [r7, #8]
 8019276:	4613      	mov	r3, r2
 8019278:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801927a:	79fb      	ldrb	r3, [r7, #7]
 801927c:	2b02      	cmp	r3, #2
 801927e:	d107      	bne.n	8019290 <lv_btnm_design+0x24>
        return ancestor_design_f(btnm, mask, mode);
 8019280:	4ba5      	ldr	r3, [pc, #660]	; (8019518 <lv_btnm_design+0x2ac>)
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	79fa      	ldrb	r2, [r7, #7]
 8019286:	68b9      	ldr	r1, [r7, #8]
 8019288:	68f8      	ldr	r0, [r7, #12]
 801928a:	4798      	blx	r3
 801928c:	4603      	mov	r3, r0
 801928e:	e21b      	b.n	80196c8 <lv_btnm_design+0x45c>
        /*Return false if the object is not covers the mask_p area*/
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8019290:	79fb      	ldrb	r3, [r7, #7]
 8019292:	2b00      	cmp	r3, #0
 8019294:	f040 8217 	bne.w	80196c6 <lv_btnm_design+0x45a>

        ancestor_design_f(btnm, mask, mode);
 8019298:	4b9f      	ldr	r3, [pc, #636]	; (8019518 <lv_btnm_design+0x2ac>)
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	79fa      	ldrb	r2, [r7, #7]
 801929e:	68b9      	ldr	r1, [r7, #8]
 80192a0:	68f8      	ldr	r0, [r7, #12]
 80192a2:	4798      	blx	r3

        lv_btnm_ext_t * ext         = lv_obj_get_ext_attr(btnm);
 80192a4:	68f8      	ldr	r0, [r7, #12]
 80192a6:	f7f0 fdb8 	bl	8009e1a <lv_obj_get_ext_attr>
 80192aa:	6738      	str	r0, [r7, #112]	; 0x70
        const lv_style_t * bg_style = lv_obj_get_style(btnm);
 80192ac:	68f8      	ldr	r0, [r7, #12]
 80192ae:	f7f0 fcf9 	bl	8009ca4 <lv_obj_get_style>
 80192b2:	66f8      	str	r0, [r7, #108]	; 0x6c
        const lv_style_t * btn_style;
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 80192b4:	68f8      	ldr	r0, [r7, #12]
 80192b6:	f7f0 fd62 	bl	8009d7e <lv_obj_get_opa_scale>
 80192ba:	4603      	mov	r3, r0
 80192bc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

        lv_area_t area_btnm;
        lv_obj_get_coords(btnm, &area_btnm);
 80192c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80192c4:	4619      	mov	r1, r3
 80192c6:	68f8      	ldr	r0, [r7, #12]
 80192c8:	f7f0 fc7b 	bl	8009bc2 <lv_obj_get_coords>

        lv_area_t area_tmp;
        lv_coord_t btn_w;
        lv_coord_t btn_h;

        uint16_t btn_i = 0;
 80192cc:	2300      	movs	r3, #0
 80192ce:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        uint16_t txt_i = 0;
 80192d2:	2300      	movs	r3, #0
 80192d4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        lv_style_t style_tmp;
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
 80192d8:	2300      	movs	r3, #0
 80192da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        if(ext->recolor) txt_flag = LV_TXT_FLAG_RECOLOR;
 80192de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80192e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80192e4:	f003 0301 	and.w	r3, r3, #1
 80192e8:	b2db      	uxtb	r3, r3
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d002      	beq.n	80192f4 <lv_btnm_design+0x88>
 80192ee:	2301      	movs	r3, #1
 80192f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 80192f4:	2300      	movs	r3, #0
 80192f6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80192fa:	e1dd      	b.n	80196b8 <lv_btnm_design+0x44c>
            /*Search the next valid text in the map*/
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
                txt_i++;
 80192fc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019300:	3301      	adds	r3, #1
 8019302:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 8019306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019308:	681a      	ldr	r2, [r3, #0]
 801930a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801930e:	009b      	lsls	r3, r3, #2
 8019310:	4413      	add	r3, r2
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	4981      	ldr	r1, [pc, #516]	; (801951c <lv_btnm_design+0x2b0>)
 8019316:	4618      	mov	r0, r3
 8019318:	f7e6 ff5a 	bl	80001d0 <strcmp>
 801931c:	4603      	mov	r3, r0
 801931e:	2b00      	cmp	r3, #0
 8019320:	d0ec      	beq.n	80192fc <lv_btnm_design+0x90>
            }

            /*Skip hidden buttons*/
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 8019322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019324:	689a      	ldr	r2, [r3, #8]
 8019326:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801932a:	005b      	lsls	r3, r3, #1
 801932c:	4413      	add	r3, r2
 801932e:	881b      	ldrh	r3, [r3, #0]
 8019330:	4618      	mov	r0, r3
 8019332:	f000 fe21 	bl	8019f78 <button_is_hidden>
 8019336:	4603      	mov	r3, r0
 8019338:	2b00      	cmp	r3, #0
 801933a:	f040 81b2 	bne.w	80196a2 <lv_btnm_design+0x436>

            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 801933e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019340:	685a      	ldr	r2, [r3, #4]
 8019342:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8019346:	00db      	lsls	r3, r3, #3
 8019348:	441a      	add	r2, r3
 801934a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801934e:	4611      	mov	r1, r2
 8019350:	4618      	mov	r0, r3
 8019352:	f7ff fb5b 	bl	8018a0c <lv_area_copy>
            area_tmp.x1 += area_btnm.x1;
 8019356:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801935a:	b29a      	uxth	r2, r3
 801935c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019360:	b29b      	uxth	r3, r3
 8019362:	4413      	add	r3, r2
 8019364:	b29b      	uxth	r3, r3
 8019366:	b21b      	sxth	r3, r3
 8019368:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            area_tmp.y1 += area_btnm.y1;
 801936c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8019370:	b29a      	uxth	r2, r3
 8019372:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019376:	b29b      	uxth	r3, r3
 8019378:	4413      	add	r3, r2
 801937a:	b29b      	uxth	r3, r3
 801937c:	b21b      	sxth	r3, r3
 801937e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            area_tmp.x2 += area_btnm.x1;
 8019382:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8019386:	b29a      	uxth	r2, r3
 8019388:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801938c:	b29b      	uxth	r3, r3
 801938e:	4413      	add	r3, r2
 8019390:	b29b      	uxth	r3, r3
 8019392:	b21b      	sxth	r3, r3
 8019394:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            area_tmp.y2 += area_btnm.y1;
 8019398:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801939c:	b29a      	uxth	r2, r3
 801939e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80193a2:	b29b      	uxth	r3, r3
 80193a4:	4413      	add	r3, r2
 80193a6:	b29b      	uxth	r3, r3
 80193a8:	b21b      	sxth	r3, r3
 80193aa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            btn_w = lv_area_get_width(&area_tmp);
 80193ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80193b2:	4618      	mov	r0, r3
 80193b4:	f7ff fb38 	bl	8018a28 <lv_area_get_width>
 80193b8:	4603      	mov	r3, r0
 80193ba:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
            btn_h = lv_area_get_height(&area_tmp);
 80193be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80193c2:	4618      	mov	r0, r3
 80193c4:	f7ff fb47 	bl	8018a56 <lv_area_get_height>
 80193c8:	4603      	mov	r3, r0
 80193ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

            /*Load the style*/
            bool tgl_state = button_get_tgl_state(ext->ctrl_bits[btn_i]);
 80193ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80193d0:	689a      	ldr	r2, [r3, #8]
 80193d2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80193d6:	005b      	lsls	r3, r3, #1
 80193d8:	4413      	add	r3, r2
 80193da:	881b      	ldrh	r3, [r3, #0]
 80193dc:	4618      	mov	r0, r3
 80193de:	f000 fe2f 	bl	801a040 <button_get_tgl_state>
 80193e2:	4603      	mov	r3, r0
 80193e4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            if(button_is_inactive(ext->ctrl_bits[btn_i]))
 80193e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80193ea:	689a      	ldr	r2, [r3, #8]
 80193ec:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80193f0:	005b      	lsls	r3, r3, #1
 80193f2:	4413      	add	r3, r2
 80193f4:	881b      	ldrh	r3, [r3, #0]
 80193f6:	4618      	mov	r0, r3
 80193f8:	f000 fde6 	bl	8019fc8 <button_is_inactive>
 80193fc:	4603      	mov	r3, r0
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d005      	beq.n	801940e <lv_btnm_design+0x1a2>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_INA);
 8019402:	2105      	movs	r1, #5
 8019404:	68f8      	ldr	r0, [r7, #12]
 8019406:	f7ff fef1 	bl	80191ec <lv_btnm_get_style>
 801940a:	67f8      	str	r0, [r7, #124]	; 0x7c
 801940c:	e04a      	b.n	80194a4 <lv_btnm_design+0x238>
            else if(btn_i != ext->btn_id_pr && tgl_state == false)
 801940e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019410:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019412:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8019416:	429a      	cmp	r2, r3
 8019418:	d00c      	beq.n	8019434 <lv_btnm_design+0x1c8>
 801941a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801941e:	f083 0301 	eor.w	r3, r3, #1
 8019422:	b2db      	uxtb	r3, r3
 8019424:	2b00      	cmp	r3, #0
 8019426:	d005      	beq.n	8019434 <lv_btnm_design+0x1c8>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 8019428:	2101      	movs	r1, #1
 801942a:	68f8      	ldr	r0, [r7, #12]
 801942c:	f7ff fede 	bl	80191ec <lv_btnm_get_style>
 8019430:	67f8      	str	r0, [r7, #124]	; 0x7c
 8019432:	e037      	b.n	80194a4 <lv_btnm_design+0x238>
            else if(btn_i == ext->btn_id_pr && tgl_state == false)
 8019434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019436:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019438:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801943c:	429a      	cmp	r2, r3
 801943e:	d10c      	bne.n	801945a <lv_btnm_design+0x1ee>
 8019440:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8019444:	f083 0301 	eor.w	r3, r3, #1
 8019448:	b2db      	uxtb	r3, r3
 801944a:	2b00      	cmp	r3, #0
 801944c:	d005      	beq.n	801945a <lv_btnm_design+0x1ee>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 801944e:	2102      	movs	r1, #2
 8019450:	68f8      	ldr	r0, [r7, #12]
 8019452:	f7ff fecb 	bl	80191ec <lv_btnm_get_style>
 8019456:	67f8      	str	r0, [r7, #124]	; 0x7c
 8019458:	e024      	b.n	80194a4 <lv_btnm_design+0x238>
            else if(btn_i != ext->btn_id_pr && tgl_state == true)
 801945a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801945c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801945e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8019462:	429a      	cmp	r2, r3
 8019464:	d009      	beq.n	801947a <lv_btnm_design+0x20e>
 8019466:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801946a:	2b00      	cmp	r3, #0
 801946c:	d005      	beq.n	801947a <lv_btnm_design+0x20e>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_TGL_REL);
 801946e:	2103      	movs	r1, #3
 8019470:	68f8      	ldr	r0, [r7, #12]
 8019472:	f7ff febb 	bl	80191ec <lv_btnm_get_style>
 8019476:	67f8      	str	r0, [r7, #124]	; 0x7c
 8019478:	e014      	b.n	80194a4 <lv_btnm_design+0x238>
            else if(btn_i == ext->btn_id_pr && tgl_state == true)
 801947a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801947c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801947e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8019482:	429a      	cmp	r2, r3
 8019484:	d109      	bne.n	801949a <lv_btnm_design+0x22e>
 8019486:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801948a:	2b00      	cmp	r3, #0
 801948c:	d005      	beq.n	801949a <lv_btnm_design+0x22e>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_TGL_PR);
 801948e:	2104      	movs	r1, #4
 8019490:	68f8      	ldr	r0, [r7, #12]
 8019492:	f7ff feab 	bl	80191ec <lv_btnm_get_style>
 8019496:	67f8      	str	r0, [r7, #124]	; 0x7c
 8019498:	e004      	b.n	80194a4 <lv_btnm_design+0x238>
            else
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL); /*Not possible option, just to be sure*/
 801949a:	2101      	movs	r1, #1
 801949c:	68f8      	ldr	r0, [r7, #12]
 801949e:	f7ff fea5 	bl	80191ec <lv_btnm_get_style>
 80194a2:	67f8      	str	r0, [r7, #124]	; 0x7c

            lv_style_copy(&style_tmp, btn_style);
 80194a4:	f107 0310 	add.w	r3, r7, #16
 80194a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80194aa:	4618      	mov	r0, r3
 80194ac:	f7f1 ff24 	bl	800b2f8 <lv_style_copy>

            /*Remove borders on the edges if `LV_BORDER_INTERNAL`*/
            if(style_tmp.body.border.part & LV_BORDER_INTERNAL) {
 80194b0:	7fbb      	ldrb	r3, [r7, #30]
 80194b2:	f003 0310 	and.w	r3, r3, #16
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d067      	beq.n	801958a <lv_btnm_design+0x31e>
                if(area_tmp.y1 == btnm->coords.y1 + bg_style->body.padding.top) {
 80194ba:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80194be:	461a      	mov	r2, r3
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80194c6:	4619      	mov	r1, r3
 80194c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80194ca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80194ce:	440b      	add	r3, r1
 80194d0:	429a      	cmp	r2, r3
 80194d2:	d104      	bne.n	80194de <lv_btnm_design+0x272>
                    style_tmp.body.border.part &= ~LV_BORDER_TOP;
 80194d4:	7fbb      	ldrb	r3, [r7, #30]
 80194d6:	f023 0302 	bic.w	r3, r3, #2
 80194da:	b2db      	uxtb	r3, r3
 80194dc:	77bb      	strb	r3, [r7, #30]
                }
                if(area_tmp.y2 == btnm->coords.y2 - bg_style->body.padding.bottom) {
 80194de:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80194e2:	461a      	mov	r2, r3
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80194ea:	4619      	mov	r1, r3
 80194ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80194ee:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80194f2:	1acb      	subs	r3, r1, r3
 80194f4:	429a      	cmp	r2, r3
 80194f6:	d104      	bne.n	8019502 <lv_btnm_design+0x296>
                    style_tmp.body.border.part &= ~LV_BORDER_BOTTOM;
 80194f8:	7fbb      	ldrb	r3, [r7, #30]
 80194fa:	f023 0301 	bic.w	r3, r3, #1
 80194fe:	b2db      	uxtb	r3, r3
 8019500:	77bb      	strb	r3, [r7, #30]
                }

                if(txt_i == 0) {
 8019502:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019506:	2b00      	cmp	r3, #0
 8019508:	d10a      	bne.n	8019520 <lv_btnm_design+0x2b4>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 801950a:	7fbb      	ldrb	r3, [r7, #30]
 801950c:	f023 0304 	bic.w	r3, r3, #4
 8019510:	b2db      	uxtb	r3, r3
 8019512:	77bb      	strb	r3, [r7, #30]
 8019514:	e01a      	b.n	801954c <lv_btnm_design+0x2e0>
 8019516:	bf00      	nop
 8019518:	200177c0 	.word	0x200177c0
 801951c:	0802c8e8 	.word	0x0802c8e8
                } else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
 8019520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019522:	681a      	ldr	r2, [r3, #0]
 8019524:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019528:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801952c:	3b01      	subs	r3, #1
 801952e:	009b      	lsls	r3, r3, #2
 8019530:	4413      	add	r3, r2
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	4966      	ldr	r1, [pc, #408]	; (80196d0 <lv_btnm_design+0x464>)
 8019536:	4618      	mov	r0, r3
 8019538:	f7e6 fe4a 	bl	80001d0 <strcmp>
 801953c:	4603      	mov	r3, r0
 801953e:	2b00      	cmp	r3, #0
 8019540:	d104      	bne.n	801954c <lv_btnm_design+0x2e0>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 8019542:	7fbb      	ldrb	r3, [r7, #30]
 8019544:	f023 0304 	bic.w	r3, r3, #4
 8019548:	b2db      	uxtb	r3, r3
 801954a:	77bb      	strb	r3, [r7, #30]
                }

                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
 801954c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801954e:	681a      	ldr	r2, [r3, #0]
 8019550:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8019554:	3301      	adds	r3, #1
 8019556:	009b      	lsls	r3, r3, #2
 8019558:	4413      	add	r3, r2
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	781b      	ldrb	r3, [r3, #0]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d00e      	beq.n	8019580 <lv_btnm_design+0x314>
 8019562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019564:	681a      	ldr	r2, [r3, #0]
 8019566:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801956a:	3301      	adds	r3, #1
 801956c:	009b      	lsls	r3, r3, #2
 801956e:	4413      	add	r3, r2
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	4957      	ldr	r1, [pc, #348]	; (80196d0 <lv_btnm_design+0x464>)
 8019574:	4618      	mov	r0, r3
 8019576:	f7e6 fe2b 	bl	80001d0 <strcmp>
 801957a:	4603      	mov	r3, r0
 801957c:	2b00      	cmp	r3, #0
 801957e:	d104      	bne.n	801958a <lv_btnm_design+0x31e>
                    style_tmp.body.border.part &= ~LV_BORDER_RIGHT;
 8019580:	7fbb      	ldrb	r3, [r7, #30]
 8019582:	f023 0308 	bic.w	r3, r3, #8
 8019586:	b2db      	uxtb	r3, r3
 8019588:	77bb      	strb	r3, [r7, #30]
                }
            }
            lv_draw_rect(&area_tmp, mask, &style_tmp, opa_scale);
 801958a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801958e:	f107 0210 	add.w	r2, r7, #16
 8019592:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8019596:	68b9      	ldr	r1, [r7, #8]
 8019598:	f7f6 f8f3 	bl	800f782 <lv_draw_rect>

            /*Calculate the size of the text*/
            if(btn_style->glass) btn_style = bg_style;
 801959c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801959e:	781b      	ldrb	r3, [r3, #0]
 80195a0:	f003 0301 	and.w	r3, r3, #1
 80195a4:	b2db      	uxtb	r3, r3
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d001      	beq.n	80195ae <lv_btnm_design+0x342>
 80195aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80195ac:	67fb      	str	r3, [r7, #124]	; 0x7c
            const lv_font_t * font = btn_style->text.font;
 80195ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80195b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195b2:	663b      	str	r3, [r7, #96]	; 0x60
            lv_point_t txt_size;
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font, btn_style->text.letter_space,
 80195b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80195b6:	681a      	ldr	r2, [r3, #0]
 80195b8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80195bc:	009b      	lsls	r3, r3, #2
 80195be:	4413      	add	r3, r2
 80195c0:	681d      	ldr	r5, [r3, #0]
 80195c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80195c4:	f9b3 6028 	ldrsh.w	r6, [r3, #40]	; 0x28
 80195c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80195ca:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 80195ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80195d2:	4618      	mov	r0, r3
 80195d4:	f7ff fa28 	bl	8018a28 <lv_area_get_width>
 80195d8:	4603      	mov	r3, r0
 80195da:	461a      	mov	r2, r3
 80195dc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80195e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80195e4:	9302      	str	r3, [sp, #8]
 80195e6:	9201      	str	r2, [sp, #4]
 80195e8:	9400      	str	r4, [sp, #0]
 80195ea:	4633      	mov	r3, r6
 80195ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80195ee:	4629      	mov	r1, r5
 80195f0:	f7fd fb00 	bl	8016bf4 <lv_txt_get_size>
                            btn_style->text.line_space, lv_area_get_width(&area_btnm), txt_flag);

            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 80195f4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80195f8:	b29a      	uxth	r2, r3
 80195fa:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 80195fe:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
 8019602:	1a5b      	subs	r3, r3, r1
 8019604:	0fd9      	lsrs	r1, r3, #31
 8019606:	440b      	add	r3, r1
 8019608:	105b      	asrs	r3, r3, #1
 801960a:	b29b      	uxth	r3, r3
 801960c:	4413      	add	r3, r2
 801960e:	b29b      	uxth	r3, r3
 8019610:	b21b      	sxth	r3, r3
 8019612:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8019616:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801961a:	b29a      	uxth	r2, r3
 801961c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8019620:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 8019624:	1a5b      	subs	r3, r3, r1
 8019626:	0fd9      	lsrs	r1, r3, #31
 8019628:	440b      	add	r3, r1
 801962a:	105b      	asrs	r3, r3, #1
 801962c:	b29b      	uxth	r3, r3
 801962e:	4413      	add	r3, r2
 8019630:	b29b      	uxth	r3, r3
 8019632:	b21b      	sxth	r3, r3
 8019634:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 8019638:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801963c:	b29a      	uxth	r2, r3
 801963e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8019642:	b29b      	uxth	r3, r3
 8019644:	4413      	add	r3, r2
 8019646:	b29b      	uxth	r3, r3
 8019648:	b21b      	sxth	r3, r3
 801964a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 801964e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8019652:	b29a      	uxth	r2, r3
 8019654:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019658:	b29b      	uxth	r3, r3
 801965a:	4413      	add	r3, r2
 801965c:	b29b      	uxth	r3, r3
 801965e:	b21b      	sxth	r3, r3
 8019660:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_label(&area_tmp, mask, btn_style, opa_scale, ext->map_p[txt_i], txt_flag, NULL, -1, -1, NULL);
 8019664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019666:	681a      	ldr	r2, [r3, #0]
 8019668:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801966c:	009b      	lsls	r3, r3, #2
 801966e:	4413      	add	r3, r2
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 8019676:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801967a:	2200      	movs	r2, #0
 801967c:	9205      	str	r2, [sp, #20]
 801967e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019682:	9204      	str	r2, [sp, #16]
 8019684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019688:	9203      	str	r2, [sp, #12]
 801968a:	2200      	movs	r2, #0
 801968c:	9202      	str	r2, [sp, #8]
 801968e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8019692:	9201      	str	r2, [sp, #4]
 8019694:	9300      	str	r3, [sp, #0]
 8019696:	460b      	mov	r3, r1
 8019698:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801969a:	68b9      	ldr	r1, [r7, #8]
 801969c:	f7f3 fdd8 	bl	800d250 <lv_draw_label>
 80196a0:	e000      	b.n	80196a4 <lv_btnm_design+0x438>
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 80196a2:	bf00      	nop
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 80196a4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80196a8:	3301      	adds	r3, #1
 80196aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80196ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80196b2:	3301      	adds	r3, #1
 80196b4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80196b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80196ba:	8c1b      	ldrh	r3, [r3, #32]
 80196bc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80196c0:	429a      	cmp	r2, r3
 80196c2:	f4ff ae20 	bcc.w	8019306 <lv_btnm_design+0x9a>
        }
    }
    return true;
 80196c6:	2301      	movs	r3, #1
}
 80196c8:	4618      	mov	r0, r3
 80196ca:	3784      	adds	r7, #132	; 0x84
 80196cc:	46bd      	mov	sp, r7
 80196ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196d0:	0802c8e8 	.word	0x0802c8e8

080196d4 <lv_btnm_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btnm_signal(lv_obj_t * btnm, lv_signal_t sign, void * param)
{
 80196d4:	b590      	push	{r4, r7, lr}
 80196d6:	b09b      	sub	sp, #108	; 0x6c
 80196d8:	af00      	add	r7, sp, #0
 80196da:	60f8      	str	r0, [r7, #12]
 80196dc:	460b      	mov	r3, r1
 80196de:	607a      	str	r2, [r7, #4]
 80196e0:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btnm, sign, param);
 80196e2:	4b93      	ldr	r3, [pc, #588]	; (8019930 <lv_btnm_signal+0x25c>)
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	7af9      	ldrb	r1, [r7, #11]
 80196e8:	687a      	ldr	r2, [r7, #4]
 80196ea:	68f8      	ldr	r0, [r7, #12]
 80196ec:	4798      	blx	r3
 80196ee:	4603      	mov	r3, r0
 80196f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(res != LV_RES_OK) return res;
 80196f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80196f8:	2b01      	cmp	r3, #1
 80196fa:	d002      	beq.n	8019702 <lv_btnm_signal+0x2e>
 80196fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019700:	e3a7      	b.n	8019e52 <lv_btnm_signal+0x77e>

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019702:	68f8      	ldr	r0, [r7, #12]
 8019704:	f7f0 fb89 	bl	8009e1a <lv_obj_get_ext_attr>
 8019708:	65f8      	str	r0, [r7, #92]	; 0x5c
    lv_point_t p;
    if(sign == LV_SIGNAL_CLEANUP) {
 801970a:	7afb      	ldrb	r3, [r7, #11]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d10a      	bne.n	8019726 <lv_btnm_signal+0x52>
        lv_mem_free(ext->button_areas);
 8019710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019712:	685b      	ldr	r3, [r3, #4]
 8019714:	4618      	mov	r0, r3
 8019716:	f7fc ff61 	bl	80165dc <lv_mem_free>
        lv_mem_free(ext->ctrl_bits);
 801971a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801971c:	689b      	ldr	r3, [r3, #8]
 801971e:	4618      	mov	r0, r3
 8019720:	f7fc ff5c 	bl	80165dc <lv_mem_free>
 8019724:	e393      	b.n	8019e4e <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_STYLE_CHG || sign == LV_SIGNAL_CORD_CHG) {
 8019726:	7afb      	ldrb	r3, [r7, #11]
 8019728:	2b04      	cmp	r3, #4
 801972a:	d002      	beq.n	8019732 <lv_btnm_signal+0x5e>
 801972c:	7afb      	ldrb	r3, [r7, #11]
 801972e:	2b02      	cmp	r3, #2
 8019730:	d106      	bne.n	8019740 <lv_btnm_signal+0x6c>
        lv_btnm_set_map(btnm, ext->map_p);
 8019732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	4619      	mov	r1, r3
 8019738:	68f8      	ldr	r0, [r7, #12]
 801973a:	f7ff fa8b 	bl	8018c54 <lv_btnm_set_map>
 801973e:	e386      	b.n	8019e4e <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_PRESSED) {
 8019740:	7afb      	ldrb	r3, [r7, #11]
 8019742:	2b07      	cmp	r3, #7
 8019744:	d176      	bne.n	8019834 <lv_btnm_signal+0x160>
        lv_indev_t * indev = lv_indev_get_act();
 8019746:	f7ee fcb3 	bl	80080b0 <lv_indev_get_act>
 801974a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801974c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801974e:	f7ee fcbb 	bl	80080c8 <lv_indev_get_type>
 8019752:	4603      	mov	r3, r0
 8019754:	2b01      	cmp	r3, #1
 8019756:	d005      	beq.n	8019764 <lv_btnm_signal+0x90>
 8019758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801975a:	f7ee fcb5 	bl	80080c8 <lv_indev_get_type>
 801975e:	4603      	mov	r3, r0
 8019760:	2b03      	cmp	r3, #3
 8019762:	d11f      	bne.n	80197a4 <lv_btnm_signal+0xd0>
            uint16_t btn_pr;
            /*Search the pressed area*/
            lv_indev_get_point(param, &p);
 8019764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019768:	4619      	mov	r1, r3
 801976a:	6878      	ldr	r0, [r7, #4]
 801976c:	f7ee fcfc 	bl	8008168 <lv_indev_get_point>
            btn_pr = get_button_from_point(btnm, &p);
 8019770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019774:	4619      	mov	r1, r3
 8019776:	68f8      	ldr	r0, [r7, #12]
 8019778:	f000 fc76 	bl	801a068 <get_button_from_point>
 801977c:	4603      	mov	r3, r0
 801977e:	857b      	strh	r3, [r7, #42]	; 0x2a

            invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
 8019780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019782:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019784:	4619      	mov	r1, r3
 8019786:	68f8      	ldr	r0, [r7, #12]
 8019788:	f000 fcd3 	bl	801a132 <invalidate_button_area>
            ext->btn_id_pr  = btn_pr;
 801978c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801978e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8019790:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = btn_pr;
 8019792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019794:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8019796:	849a      	strh	r2, [r3, #36]	; 0x24
            invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
 8019798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801979a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801979c:	4619      	mov	r1, r3
 801979e:	68f8      	ldr	r0, [r7, #12]
 80197a0:	f000 fcc7 	bl	801a132 <invalidate_button_area>
        }
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 80197a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80197a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197ac:	4293      	cmp	r3, r2
 80197ae:	f000 834e 	beq.w	8019e4e <lv_btnm_signal+0x77a>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 80197b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197b4:	689a      	ldr	r2, [r3, #8]
 80197b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80197ba:	005b      	lsls	r3, r3, #1
 80197bc:	4413      	add	r3, r2
 80197be:	881b      	ldrh	r3, [r3, #0]
 80197c0:	4618      	mov	r0, r3
 80197c2:	f000 fc15 	bl	8019ff0 <button_is_click_trig>
 80197c6:	4603      	mov	r3, r0
 80197c8:	f083 0301 	eor.w	r3, r3, #1
 80197cc:	b2db      	uxtb	r3, r3
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	f000 833d 	beq.w	8019e4e <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 80197d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197d6:	689a      	ldr	r2, [r3, #8]
 80197d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80197dc:	005b      	lsls	r3, r3, #1
 80197de:	4413      	add	r3, r2
 80197e0:	881b      	ldrh	r3, [r3, #0]
 80197e2:	4618      	mov	r0, r3
 80197e4:	f000 fbf0 	bl	8019fc8 <button_is_inactive>
 80197e8:	4603      	mov	r3, r0
 80197ea:	f083 0301 	eor.w	r3, r3, #1
 80197ee:	b2db      	uxtb	r3, r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	f000 832c 	beq.w	8019e4e <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 80197f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197f8:	689a      	ldr	r2, [r3, #8]
 80197fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80197fe:	005b      	lsls	r3, r3, #1
 8019800:	4413      	add	r3, r2
 8019802:	881b      	ldrh	r3, [r3, #0]
 8019804:	4618      	mov	r0, r3
 8019806:	f000 fbb7 	bl	8019f78 <button_is_hidden>
 801980a:	4603      	mov	r3, r0
 801980c:	f083 0301 	eor.w	r3, r3, #1
 8019810:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8019812:	2b00      	cmp	r3, #0
 8019814:	f000 831b 	beq.w	8019e4e <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 8019818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801981a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801981c:	623b      	str	r3, [r7, #32]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 801981e:	f107 0320 	add.w	r3, r7, #32
 8019822:	461a      	mov	r2, r3
 8019824:	210e      	movs	r1, #14
 8019826:	68f8      	ldr	r0, [r7, #12]
 8019828:	f7f0 f87d 	bl	8009926 <lv_event_send>
 801982c:	4603      	mov	r3, r0
 801982e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019832:	e30c      	b.n	8019e4e <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_PRESSING) {
 8019834:	7afb      	ldrb	r3, [r7, #11]
 8019836:	2b08      	cmp	r3, #8
 8019838:	d143      	bne.n	80198c2 <lv_btnm_signal+0x1ee>
        uint16_t btn_pr;
        /*Search the pressed area*/
        lv_indev_get_point(param, &p);
 801983a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801983e:	4619      	mov	r1, r3
 8019840:	6878      	ldr	r0, [r7, #4]
 8019842:	f7ee fc91 	bl	8008168 <lv_indev_get_point>
        btn_pr = get_button_from_point(btnm, &p);
 8019846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801984a:	4619      	mov	r1, r3
 801984c:	68f8      	ldr	r0, [r7, #12]
 801984e:	f000 fc0b 	bl	801a068 <get_button_from_point>
 8019852:	4603      	mov	r3, r0
 8019854:	867b      	strh	r3, [r7, #50]	; 0x32
        /*Invalidate to old and the new areas*/;
        if(btn_pr != ext->btn_id_pr) {
 8019856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019858:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801985a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801985c:	429a      	cmp	r2, r3
 801985e:	d029      	beq.n	80198b4 <lv_btnm_signal+0x1e0>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 8019860:	6878      	ldr	r0, [r7, #4]
 8019862:	f7ee fc68 	bl	8008136 <lv_indev_reset_long_press>
            if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 8019866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019868:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801986a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801986e:	4293      	cmp	r3, r2
 8019870:	d005      	beq.n	801987e <lv_btnm_signal+0x1aa>
                invalidate_button_area(btnm, ext->btn_id_pr);
 8019872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019874:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019876:	4619      	mov	r1, r3
 8019878:	68f8      	ldr	r0, [r7, #12]
 801987a:	f000 fc5a 	bl	801a132 <invalidate_button_area>
            }
            if(btn_pr != LV_BTNM_BTN_NONE) {
 801987e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8019880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019884:	4293      	cmp	r3, r2
 8019886:	d015      	beq.n	80198b4 <lv_btnm_signal+0x1e0>
                uint32_t b = ext->btn_id_act;
 8019888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801988a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801988c:	61fb      	str	r3, [r7, #28]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 801988e:	f107 031c 	add.w	r3, r7, #28
 8019892:	461a      	mov	r2, r3
 8019894:	210e      	movs	r1, #14
 8019896:	68f8      	ldr	r0, [r7, #12]
 8019898:	f7f0 f845 	bl	8009926 <lv_event_send>
 801989c:	4603      	mov	r3, r0
 801989e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                if(res == LV_RES_OK) {
 80198a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198a6:	2b01      	cmp	r3, #1
 80198a8:	d104      	bne.n	80198b4 <lv_btnm_signal+0x1e0>
                    invalidate_button_area(btnm, btn_pr);
 80198aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80198ac:	4619      	mov	r1, r3
 80198ae:	68f8      	ldr	r0, [r7, #12]
 80198b0:	f000 fc3f 	bl	801a132 <invalidate_button_area>
                }
            }
        }

        ext->btn_id_pr  = btn_pr;
 80198b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80198b6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80198b8:	845a      	strh	r2, [r3, #34]	; 0x22
        ext->btn_id_act = btn_pr;
 80198ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80198bc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80198be:	849a      	strh	r2, [r3, #36]	; 0x24
 80198c0:	e2c5      	b.n	8019e4e <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_RELEASED) {
 80198c2:	7afb      	ldrb	r3, [r7, #11]
 80198c4:	2b0a      	cmp	r3, #10
 80198c6:	f040 80a7 	bne.w	8019a18 <lv_btnm_signal+0x344>
        if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 80198ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80198cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80198ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198d2:	4293      	cmp	r3, r2
 80198d4:	f000 82bb 	beq.w	8019e4e <lv_btnm_signal+0x77a>
            /*Toggle the button if enabled*/
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr])) {
 80198d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80198da:	689a      	ldr	r2, [r3, #8]
 80198dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80198de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80198e0:	005b      	lsls	r3, r3, #1
 80198e2:	4413      	add	r3, r2
 80198e4:	881b      	ldrh	r3, [r3, #0]
 80198e6:	4618      	mov	r0, r3
 80198e8:	f000 fb96 	bl	801a018 <button_is_tgl_enabled>
 80198ec:	4603      	mov	r3, r0
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d03f      	beq.n	8019972 <lv_btnm_signal+0x29e>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr])) {
 80198f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80198f4:	689a      	ldr	r2, [r3, #8]
 80198f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80198f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80198fa:	005b      	lsls	r3, r3, #1
 80198fc:	4413      	add	r3, r2
 80198fe:	881b      	ldrh	r3, [r3, #0]
 8019900:	4618      	mov	r0, r3
 8019902:	f000 fb9d 	bl	801a040 <button_get_tgl_state>
 8019906:	4603      	mov	r3, r0
 8019908:	2b00      	cmp	r3, #0
 801990a:	d013      	beq.n	8019934 <lv_btnm_signal+0x260>
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNM_CTRL_TGL_STATE);
 801990c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801990e:	689a      	ldr	r2, [r3, #8]
 8019910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019912:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019914:	005b      	lsls	r3, r3, #1
 8019916:	4413      	add	r3, r2
 8019918:	881a      	ldrh	r2, [r3, #0]
 801991a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801991c:	6899      	ldr	r1, [r3, #8]
 801991e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019920:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019922:	005b      	lsls	r3, r3, #1
 8019924:	440b      	add	r3, r1
 8019926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801992a:	b292      	uxth	r2, r2
 801992c:	801a      	strh	r2, [r3, #0]
 801992e:	e012      	b.n	8019956 <lv_btnm_signal+0x282>
 8019930:	200177c4 	.word	0x200177c4
                } else {
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNM_CTRL_TGL_STATE;
 8019934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019936:	689a      	ldr	r2, [r3, #8]
 8019938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801993a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801993c:	005b      	lsls	r3, r3, #1
 801993e:	4413      	add	r3, r2
 8019940:	881a      	ldrh	r2, [r3, #0]
 8019942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019944:	6899      	ldr	r1, [r3, #8]
 8019946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019948:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801994a:	005b      	lsls	r3, r3, #1
 801994c:	440b      	add	r3, r1
 801994e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019952:	b292      	uxth	r2, r2
 8019954:	801a      	strh	r2, [r3, #0]
                }
                if(ext->one_toggle) make_one_button_toggled(btnm, ext->btn_id_pr);
 8019956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019958:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801995c:	f003 0302 	and.w	r3, r3, #2
 8019960:	b2db      	uxtb	r3, r3
 8019962:	2b00      	cmp	r3, #0
 8019964:	d005      	beq.n	8019972 <lv_btnm_signal+0x29e>
 8019966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019968:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801996a:	4619      	mov	r1, r3
 801996c:	68f8      	ldr	r0, [r7, #12]
 801996e:	f000 fc92 	bl	801a296 <make_one_button_toggled>
            }

            /*Invalidate to old pressed area*/;
            invalidate_button_area(btnm, ext->btn_id_pr);
 8019972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019974:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019976:	4619      	mov	r1, r3
 8019978:	68f8      	ldr	r0, [r7, #12]
 801997a:	f000 fbda 	bl	801a132 <invalidate_button_area>

#if LV_USE_GROUP
            /*Leave the clicked button when releases if this not the focused object in a group*/
            lv_group_t * g = lv_obj_get_group(btnm);
 801997e:	68f8      	ldr	r0, [r7, #12]
 8019980:	f7f0 fa57 	bl	8009e32 <lv_obj_get_group>
 8019984:	6378      	str	r0, [r7, #52]	; 0x34
            if(lv_group_get_focused(g) != btnm) {
 8019986:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019988:	f7ee fa35 	bl	8007df6 <lv_group_get_focused>
 801998c:	4602      	mov	r2, r0
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	4293      	cmp	r3, r2
 8019992:	d003      	beq.n	801999c <lv_btnm_signal+0x2c8>
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 8019994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801999a:	845a      	strh	r2, [r3, #34]	; 0x22
            }
#else
            ext->btn_id_pr = LV_BTNM_BTN_NONE;
#endif

            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 801999c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801999e:	689a      	ldr	r2, [r3, #8]
 80199a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80199a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80199a4:	005b      	lsls	r3, r3, #1
 80199a6:	4413      	add	r3, r2
 80199a8:	881b      	ldrh	r3, [r3, #0]
 80199aa:	4618      	mov	r0, r3
 80199ac:	f000 fb20 	bl	8019ff0 <button_is_click_trig>
 80199b0:	4603      	mov	r3, r0
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	f000 824b 	beq.w	8019e4e <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 80199b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80199ba:	689a      	ldr	r2, [r3, #8]
 80199bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80199be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80199c0:	005b      	lsls	r3, r3, #1
 80199c2:	4413      	add	r3, r2
 80199c4:	881b      	ldrh	r3, [r3, #0]
 80199c6:	4618      	mov	r0, r3
 80199c8:	f000 fafe 	bl	8019fc8 <button_is_inactive>
 80199cc:	4603      	mov	r3, r0
 80199ce:	f083 0301 	eor.w	r3, r3, #1
 80199d2:	b2db      	uxtb	r3, r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	f000 823a 	beq.w	8019e4e <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 80199da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80199dc:	689a      	ldr	r2, [r3, #8]
 80199de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80199e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80199e2:	005b      	lsls	r3, r3, #1
 80199e4:	4413      	add	r3, r2
 80199e6:	881b      	ldrh	r3, [r3, #0]
 80199e8:	4618      	mov	r0, r3
 80199ea:	f000 fac5 	bl	8019f78 <button_is_hidden>
 80199ee:	4603      	mov	r3, r0
 80199f0:	f083 0301 	eor.w	r3, r3, #1
 80199f4:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	f000 8229 	beq.w	8019e4e <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 80199fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80199fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019a00:	61bb      	str	r3, [r7, #24]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8019a02:	f107 0318 	add.w	r3, r7, #24
 8019a06:	461a      	mov	r2, r3
 8019a08:	210e      	movs	r1, #14
 8019a0a:	68f8      	ldr	r0, [r7, #12]
 8019a0c:	f7ef ff8b 	bl	8009926 <lv_event_send>
 8019a10:	4603      	mov	r3, r0
 8019a12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019a16:	e21a      	b.n	8019e4e <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 8019a18:	7afb      	ldrb	r3, [r7, #11]
 8019a1a:	2b0c      	cmp	r3, #12
 8019a1c:	d147      	bne.n	8019aae <lv_btnm_signal+0x3da>
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 8019a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a26:	4293      	cmp	r3, r2
 8019a28:	f000 8211 	beq.w	8019e4e <lv_btnm_signal+0x77a>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8019a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a2e:	689a      	ldr	r2, [r3, #8]
 8019a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019a34:	005b      	lsls	r3, r3, #1
 8019a36:	4413      	add	r3, r2
 8019a38:	881b      	ldrh	r3, [r3, #0]
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f000 fab0 	bl	8019fa0 <button_is_repeat_disabled>
 8019a40:	4603      	mov	r3, r0
 8019a42:	f083 0301 	eor.w	r3, r3, #1
 8019a46:	b2db      	uxtb	r3, r3
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	f000 8200 	beq.w	8019e4e <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8019a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a50:	689a      	ldr	r2, [r3, #8]
 8019a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019a56:	005b      	lsls	r3, r3, #1
 8019a58:	4413      	add	r3, r2
 8019a5a:	881b      	ldrh	r3, [r3, #0]
 8019a5c:	4618      	mov	r0, r3
 8019a5e:	f000 fab3 	bl	8019fc8 <button_is_inactive>
 8019a62:	4603      	mov	r3, r0
 8019a64:	f083 0301 	eor.w	r3, r3, #1
 8019a68:	b2db      	uxtb	r3, r3
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	f000 81ef 	beq.w	8019e4e <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 8019a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a72:	689a      	ldr	r2, [r3, #8]
 8019a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019a78:	005b      	lsls	r3, r3, #1
 8019a7a:	4413      	add	r3, r2
 8019a7c:	881b      	ldrh	r3, [r3, #0]
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f000 fa7a 	bl	8019f78 <button_is_hidden>
 8019a84:	4603      	mov	r3, r0
 8019a86:	f083 0301 	eor.w	r3, r3, #1
 8019a8a:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	f000 81de 	beq.w	8019e4e <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 8019a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019a96:	617b      	str	r3, [r7, #20]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8019a98:	f107 0314 	add.w	r3, r7, #20
 8019a9c:	461a      	mov	r2, r3
 8019a9e:	210e      	movs	r1, #14
 8019aa0:	68f8      	ldr	r0, [r7, #12]
 8019aa2:	f7ef ff40 	bl	8009926 <lv_event_send>
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019aac:	e1cf      	b.n	8019e4e <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_PRESS_LOST || sign == LV_SIGNAL_DEFOCUS) {
 8019aae:	7afb      	ldrb	r3, [r7, #11]
 8019ab0:	2b09      	cmp	r3, #9
 8019ab2:	d002      	beq.n	8019aba <lv_btnm_signal+0x3e6>
 8019ab4:	7afb      	ldrb	r3, [r7, #11]
 8019ab6:	2b10      	cmp	r3, #16
 8019ab8:	d10b      	bne.n	8019ad2 <lv_btnm_signal+0x3fe>
        ext->btn_id_pr  = LV_BTNM_BTN_NONE;
 8019aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ac0:	845a      	strh	r2, [r3, #34]	; 0x22
        ext->btn_id_act = LV_BTNM_BTN_NONE;
 8019ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ac8:	849a      	strh	r2, [r3, #36]	; 0x24
        lv_obj_invalidate(btnm);
 8019aca:	68f8      	ldr	r0, [r7, #12]
 8019acc:	f7ee ff79 	bl	80089c2 <lv_obj_invalidate>
 8019ad0:	e1bd      	b.n	8019e4e <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8019ad2:	7afb      	ldrb	r3, [r7, #11]
 8019ad4:	2b0f      	cmp	r3, #15
 8019ad6:	d140      	bne.n	8019b5a <lv_btnm_signal+0x486>
#if LV_USE_GROUP
        lv_indev_t * indev         = lv_indev_get_act();
 8019ad8:	f7ee faea 	bl	80080b0 <lv_indev_get_act>
 8019adc:	63f8      	str	r0, [r7, #60]	; 0x3c
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8019ade:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019ae0:	f7ee faf2 	bl	80080c8 <lv_indev_get_type>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(indev_type == LV_INDEV_TYPE_POINTER) {
 8019aea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019aee:	2b01      	cmp	r3, #1
 8019af0:	d111      	bne.n	8019b16 <lv_btnm_signal+0x442>
            /*Select the clicked button*/
            lv_point_t p1;
            lv_indev_get_point(indev, &p1);
 8019af2:	f107 0310 	add.w	r3, r7, #16
 8019af6:	4619      	mov	r1, r3
 8019af8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019afa:	f7ee fb35 	bl	8008168 <lv_indev_get_point>
            uint16_t btn_i = get_button_from_point(btnm, &p1);
 8019afe:	f107 0310 	add.w	r3, r7, #16
 8019b02:	4619      	mov	r1, r3
 8019b04:	68f8      	ldr	r0, [r7, #12]
 8019b06:	f000 faaf 	bl	801a068 <get_button_from_point>
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	873b      	strh	r3, [r7, #56]	; 0x38
            ext->btn_id_pr = btn_i;
 8019b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b10:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8019b12:	845a      	strh	r2, [r3, #34]	; 0x22
 8019b14:	e019      	b.n	8019b4a <lv_btnm_signal+0x476>

        } else if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8019b16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019b1a:	2b04      	cmp	r3, #4
 8019b1c:	d112      	bne.n	8019b44 <lv_btnm_signal+0x470>
            /*In navigation mode don't select any button but in edit mode select the fist*/
            if(lv_group_get_editing(lv_obj_get_group(btnm)))
 8019b1e:	68f8      	ldr	r0, [r7, #12]
 8019b20:	f7f0 f987 	bl	8009e32 <lv_obj_get_group>
 8019b24:	4603      	mov	r3, r0
 8019b26:	4618      	mov	r0, r3
 8019b28:	f7ee f97d 	bl	8007e26 <lv_group_get_editing>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d003      	beq.n	8019b3a <lv_btnm_signal+0x466>
                ext->btn_id_pr = 0;
 8019b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b34:	2200      	movs	r2, #0
 8019b36:	845a      	strh	r2, [r3, #34]	; 0x22
 8019b38:	e007      	b.n	8019b4a <lv_btnm_signal+0x476>
            else
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 8019b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b40:	845a      	strh	r2, [r3, #34]	; 0x22
 8019b42:	e002      	b.n	8019b4a <lv_btnm_signal+0x476>
        } else {
            ext->btn_id_pr = 0;
 8019b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b46:	2200      	movs	r2, #0
 8019b48:	845a      	strh	r2, [r3, #34]	; 0x22
        }
#else
        ext->btn_id_pr = 0;
#endif

        ext->btn_id_act = ext->btn_id_pr;
 8019b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b4c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8019b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b50:	849a      	strh	r2, [r3, #36]	; 0x24
        lv_obj_invalidate(btnm);
 8019b52:	68f8      	ldr	r0, [r7, #12]
 8019b54:	f7ee ff35 	bl	80089c2 <lv_obj_invalidate>
 8019b58:	e179      	b.n	8019e4e <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8019b5a:	7afb      	ldrb	r3, [r7, #11]
 8019b5c:	2b11      	cmp	r3, #17
 8019b5e:	f040 814c 	bne.w	8019dfa <lv_btnm_signal+0x726>
        char c = *((char *)param);
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	781b      	ldrb	r3, [r3, #0]
 8019b66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if(c == LV_KEY_RIGHT) {
 8019b6a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8019b6e:	2b13      	cmp	r3, #19
 8019b70:	d125      	bne.n	8019bbe <lv_btnm_signal+0x4ea>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE)
 8019b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b74:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b7a:	4293      	cmp	r3, r2
 8019b7c:	d103      	bne.n	8019b86 <lv_btnm_signal+0x4b2>
                ext->btn_id_pr = 0;
 8019b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b80:	2200      	movs	r2, #0
 8019b82:	845a      	strh	r2, [r3, #34]	; 0x22
 8019b84:	e005      	b.n	8019b92 <lv_btnm_signal+0x4be>
            else
                ext->btn_id_pr++;
 8019b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b88:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019b8a:	3301      	adds	r3, #1
 8019b8c:	b29a      	uxth	r2, r3
 8019b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b90:	845a      	strh	r2, [r3, #34]	; 0x22
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 8019b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b94:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019b96:	461a      	mov	r2, r3
 8019b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b9a:	8c1b      	ldrh	r3, [r3, #32]
 8019b9c:	3b01      	subs	r3, #1
 8019b9e:	429a      	cmp	r2, r3
 8019ba0:	db05      	blt.n	8019bae <lv_btnm_signal+0x4da>
 8019ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019ba4:	8c1b      	ldrh	r3, [r3, #32]
 8019ba6:	3b01      	subs	r3, #1
 8019ba8:	b29a      	uxth	r2, r3
 8019baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bac:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 8019bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bb0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8019bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bb4:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8019bb6:	68f8      	ldr	r0, [r7, #12]
 8019bb8:	f7ee ff03 	bl	80089c2 <lv_obj_invalidate>
 8019bbc:	e147      	b.n	8019e4e <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_LEFT) {
 8019bbe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8019bc2:	2b14      	cmp	r3, #20
 8019bc4:	d11a      	bne.n	8019bfc <lv_btnm_signal+0x528>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) ext->btn_id_pr = 0;
 8019bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bc8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019bce:	4293      	cmp	r3, r2
 8019bd0:	d102      	bne.n	8019bd8 <lv_btnm_signal+0x504>
 8019bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bd4:	2200      	movs	r2, #0
 8019bd6:	845a      	strh	r2, [r3, #34]	; 0x22
            if(ext->btn_id_pr > 0) ext->btn_id_pr--;
 8019bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bda:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d005      	beq.n	8019bec <lv_btnm_signal+0x518>
 8019be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019be2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019be4:	3b01      	subs	r3, #1
 8019be6:	b29a      	uxth	r2, r3
 8019be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bea:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 8019bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bee:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8019bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019bf2:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8019bf4:	68f8      	ldr	r0, [r7, #12]
 8019bf6:	f7ee fee4 	bl	80089c2 <lv_obj_invalidate>
 8019bfa:	e128      	b.n	8019e4e <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_DOWN) {
 8019bfc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8019c00:	2b12      	cmp	r3, #18
 8019c02:	d17b      	bne.n	8019cfc <lv_btnm_signal+0x628>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8019c04:	2100      	movs	r1, #0
 8019c06:	68f8      	ldr	r0, [r7, #12]
 8019c08:	f7ff faf0 	bl	80191ec <lv_btnm_get_style>
 8019c0c:	6478      	str	r0, [r7, #68]	; 0x44
            /*Find the area below the the current*/
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 8019c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c10:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019c16:	4293      	cmp	r3, r2
 8019c18:	d103      	bne.n	8019c22 <lv_btnm_signal+0x54e>
                ext->btn_id_pr = 0;
 8019c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c1c:	2200      	movs	r2, #0
 8019c1e:	845a      	strh	r2, [r3, #34]	; 0x22
 8019c20:	e064      	b.n	8019cec <lv_btnm_signal+0x618>
            } else {
                uint16_t area_below;
                lv_coord_t pr_center =
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8019c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c24:	685a      	ldr	r2, [r3, #4]
 8019c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c28:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019c2a:	00db      	lsls	r3, r3, #3
 8019c2c:	4413      	add	r3, r2
 8019c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c32:	b29c      	uxth	r4, r3
 8019c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c36:	685a      	ldr	r2, [r3, #4]
 8019c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c3a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019c3c:	00db      	lsls	r3, r3, #3
 8019c3e:	4413      	add	r3, r2
 8019c40:	4618      	mov	r0, r3
 8019c42:	f7fe fef1 	bl	8018a28 <lv_area_get_width>
 8019c46:	4603      	mov	r3, r0
 8019c48:	105b      	asrs	r3, r3, #1
 8019c4a:	b21b      	sxth	r3, r3
 8019c4c:	b29b      	uxth	r3, r3
 8019c4e:	4423      	add	r3, r4
 8019c50:	b29b      	uxth	r3, r3
                lv_coord_t pr_center =
 8019c52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 8019c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c58:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8019c5e:	e033      	b.n	8019cc8 <lv_btnm_signal+0x5f4>
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 8019c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c62:	685a      	ldr	r2, [r3, #4]
 8019c64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019c68:	00db      	lsls	r3, r3, #3
 8019c6a:	4413      	add	r3, r2
 8019c6c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c72:	6859      	ldr	r1, [r3, #4]
 8019c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c76:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019c78:	00db      	lsls	r3, r3, #3
 8019c7a:	440b      	add	r3, r1
 8019c7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c80:	429a      	cmp	r2, r3
 8019c82:	dd1c      	ble.n	8019cbe <lv_btnm_signal+0x5ea>
                       pr_center >= ext->button_areas[area_below].x1 &&
 8019c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c86:	685a      	ldr	r2, [r3, #4]
 8019c88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019c8c:	00db      	lsls	r3, r3, #3
 8019c8e:	4413      	add	r3, r2
 8019c90:	f9b3 3000 	ldrsh.w	r3, [r3]
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 8019c94:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8019c98:	429a      	cmp	r2, r3
 8019c9a:	db10      	blt.n	8019cbe <lv_btnm_signal+0x5ea>
                       pr_center <= ext->button_areas[area_below].x2 + style->body.padding.left) {
 8019c9c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8019ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019ca2:	6859      	ldr	r1, [r3, #4]
 8019ca4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019ca8:	00db      	lsls	r3, r3, #3
 8019caa:	440b      	add	r3, r1
 8019cac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019cb0:	4619      	mov	r1, r3
 8019cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cb4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8019cb8:	440b      	add	r3, r1
                       pr_center >= ext->button_areas[area_below].x1 &&
 8019cba:	429a      	cmp	r2, r3
 8019cbc:	dd0b      	ble.n	8019cd6 <lv_btnm_signal+0x602>
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 8019cbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019cc2:	3301      	adds	r3, #1
 8019cc4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8019cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019cca:	8c1b      	ldrh	r3, [r3, #32]
 8019ccc:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8019cd0:	429a      	cmp	r2, r3
 8019cd2:	d3c5      	bcc.n	8019c60 <lv_btnm_signal+0x58c>
 8019cd4:	e000      	b.n	8019cd8 <lv_btnm_signal+0x604>
                        break;
 8019cd6:	bf00      	nop
                    }
                }

                if(area_below < ext->btn_cnt) ext->btn_id_pr = area_below;
 8019cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019cda:	8c1b      	ldrh	r3, [r3, #32]
 8019cdc:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8019ce0:	429a      	cmp	r2, r3
 8019ce2:	d203      	bcs.n	8019cec <lv_btnm_signal+0x618>
 8019ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019ce6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8019cea:	845a      	strh	r2, [r3, #34]	; 0x22
            }
            ext->btn_id_act = ext->btn_id_pr;
 8019cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019cee:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8019cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019cf2:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8019cf4:	68f8      	ldr	r0, [r7, #12]
 8019cf6:	f7ee fe64 	bl	80089c2 <lv_obj_invalidate>
 8019cfa:	e0a8      	b.n	8019e4e <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_UP) {
 8019cfc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8019d00:	2b11      	cmp	r3, #17
 8019d02:	f040 80a4 	bne.w	8019e4e <lv_btnm_signal+0x77a>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8019d06:	2100      	movs	r1, #0
 8019d08:	68f8      	ldr	r0, [r7, #12]
 8019d0a:	f7ff fa6f 	bl	80191ec <lv_btnm_get_style>
 8019d0e:	64f8      	str	r0, [r7, #76]	; 0x4c
            /*Find the area below the the current*/
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 8019d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d12:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019d18:	4293      	cmp	r3, r2
 8019d1a:	d103      	bne.n	8019d24 <lv_btnm_signal+0x650>
                ext->btn_id_pr = 0;
 8019d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d1e:	2200      	movs	r2, #0
 8019d20:	845a      	strh	r2, [r3, #34]	; 0x22
 8019d22:	e062      	b.n	8019dea <lv_btnm_signal+0x716>
            } else {
                int16_t area_above;
                lv_coord_t pr_center =
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8019d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d26:	685a      	ldr	r2, [r3, #4]
 8019d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d2a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019d2c:	00db      	lsls	r3, r3, #3
 8019d2e:	4413      	add	r3, r2
 8019d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d34:	b29c      	uxth	r4, r3
 8019d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d38:	685a      	ldr	r2, [r3, #4]
 8019d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d3c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019d3e:	00db      	lsls	r3, r3, #3
 8019d40:	4413      	add	r3, r2
 8019d42:	4618      	mov	r0, r3
 8019d44:	f7fe fe70 	bl	8018a28 <lv_area_get_width>
 8019d48:	4603      	mov	r3, r0
 8019d4a:	105b      	asrs	r3, r3, #1
 8019d4c:	b21b      	sxth	r3, r3
 8019d4e:	b29b      	uxth	r3, r3
 8019d50:	4423      	add	r3, r4
 8019d52:	b29b      	uxth	r3, r3
                lv_coord_t pr_center =
 8019d54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 8019d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d5a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019d5c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8019d60:	e035      	b.n	8019dce <lv_btnm_signal+0x6fa>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 8019d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d64:	685a      	ldr	r2, [r3, #4]
 8019d66:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8019d6a:	00db      	lsls	r3, r3, #3
 8019d6c:	4413      	add	r3, r2
 8019d6e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d74:	6859      	ldr	r1, [r3, #4]
 8019d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d78:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019d7a:	00db      	lsls	r3, r3, #3
 8019d7c:	440b      	add	r3, r1
 8019d7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019d82:	429a      	cmp	r2, r3
 8019d84:	da1c      	bge.n	8019dc0 <lv_btnm_signal+0x6ec>
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 8019d86:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8019d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d8c:	6859      	ldr	r1, [r3, #4]
 8019d8e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8019d92:	00db      	lsls	r3, r3, #3
 8019d94:	440b      	add	r3, r1
 8019d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d9a:	4619      	mov	r1, r3
 8019d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d9e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8019da2:	1acb      	subs	r3, r1, r3
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 8019da4:	429a      	cmp	r2, r3
 8019da6:	db0b      	blt.n	8019dc0 <lv_btnm_signal+0x6ec>
                       pr_center <= ext->button_areas[area_above].x2) {
 8019da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019daa:	685a      	ldr	r2, [r3, #4]
 8019dac:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8019db0:	00db      	lsls	r3, r3, #3
 8019db2:	4413      	add	r3, r2
 8019db4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 8019db8:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8019dbc:	429a      	cmp	r2, r3
 8019dbe:	dd0b      	ble.n	8019dd8 <lv_btnm_signal+0x704>
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 8019dc0:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8019dc4:	b29b      	uxth	r3, r3
 8019dc6:	3b01      	subs	r3, #1
 8019dc8:	b29b      	uxth	r3, r3
 8019dca:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8019dce:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	dac5      	bge.n	8019d62 <lv_btnm_signal+0x68e>
 8019dd6:	e000      	b.n	8019dda <lv_btnm_signal+0x706>
                        break;
 8019dd8:	bf00      	nop
                    }
                }
                if(area_above >= 0) ext->btn_id_pr = area_above;
 8019dda:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	db03      	blt.n	8019dea <lv_btnm_signal+0x716>
 8019de2:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8019de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019de8:	845a      	strh	r2, [r3, #34]	; 0x22
            }
            ext->btn_id_act = ext->btn_id_pr;
 8019dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019dec:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8019dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019df0:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8019df2:	68f8      	ldr	r0, [r7, #12]
 8019df4:	f7ee fde5 	bl	80089c2 <lv_obj_invalidate>
 8019df8:	e029      	b.n	8019e4e <lv_btnm_signal+0x77a>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8019dfa:	7afb      	ldrb	r3, [r7, #11]
 8019dfc:	2b12      	cmp	r3, #18
 8019dfe:	d105      	bne.n	8019e0c <lv_btnm_signal+0x738>
        bool * editable = (bool *)param;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	657b      	str	r3, [r7, #84]	; 0x54
        *editable       = true;
 8019e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e06:	2201      	movs	r2, #1
 8019e08:	701a      	strb	r2, [r3, #0]
 8019e0a:	e020      	b.n	8019e4e <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8019e0c:	7afb      	ldrb	r3, [r7, #11]
 8019e0e:	2b06      	cmp	r3, #6
 8019e10:	d11d      	bne.n	8019e4e <lv_btnm_signal+0x77a>
        lv_obj_type_t * buf = param;
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	65bb      	str	r3, [r7, #88]	; 0x58
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8019e16:	2300      	movs	r3, #0
 8019e18:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8019e1c:	e00b      	b.n	8019e36 <lv_btnm_signal+0x762>
            if(buf->type[i] == NULL) break;
 8019e1e:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8019e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d009      	beq.n	8019e40 <lv_btnm_signal+0x76c>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8019e2c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8019e30:	3301      	adds	r3, #1
 8019e32:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8019e36:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8019e3a:	2b06      	cmp	r3, #6
 8019e3c:	d9ef      	bls.n	8019e1e <lv_btnm_signal+0x74a>
 8019e3e:	e000      	b.n	8019e42 <lv_btnm_signal+0x76e>
            if(buf->type[i] == NULL) break;
 8019e40:	bf00      	nop
        }
        buf->type[i] = "lv_btnm";
 8019e42:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8019e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019e48:	4904      	ldr	r1, [pc, #16]	; (8019e5c <lv_btnm_signal+0x788>)
 8019e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8019e4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019e52:	4618      	mov	r0, r3
 8019e54:	376c      	adds	r7, #108	; 0x6c
 8019e56:	46bd      	mov	sp, r7
 8019e58:	bd90      	pop	{r4, r7, pc}
 8019e5a:	bf00      	nop
 8019e5c:	0802c900 	.word	0x0802c900

08019e60 <allocate_btn_areas_and_controls>:
 * Create the required number of buttons and control bytes according to a map
 * @param btnm pointer to button matrix object
 * @param map_p pointer to a string array
 */
static void allocate_btn_areas_and_controls(const lv_obj_t * btnm, const char ** map)
{
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b084      	sub	sp, #16
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	6078      	str	r0, [r7, #4]
 8019e68:	6039      	str	r1, [r7, #0]
    /*Count the buttons in the map*/
    uint16_t btn_cnt = 0;
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	81fb      	strh	r3, [r7, #14]
    uint16_t i       = 0;
 8019e6e:	2300      	movs	r3, #0
 8019e70:	81bb      	strh	r3, [r7, #12]
    while(strlen(map[i]) != 0) {
 8019e72:	e011      	b.n	8019e98 <allocate_btn_areas_and_controls+0x38>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8019e74:	89bb      	ldrh	r3, [r7, #12]
 8019e76:	009b      	lsls	r3, r3, #2
 8019e78:	683a      	ldr	r2, [r7, #0]
 8019e7a:	4413      	add	r3, r2
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	4932      	ldr	r1, [pc, #200]	; (8019f48 <allocate_btn_areas_and_controls+0xe8>)
 8019e80:	4618      	mov	r0, r3
 8019e82:	f7e6 f9a5 	bl	80001d0 <strcmp>
 8019e86:	4603      	mov	r3, r0
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d002      	beq.n	8019e92 <allocate_btn_areas_and_controls+0x32>
            btn_cnt++;
 8019e8c:	89fb      	ldrh	r3, [r7, #14]
 8019e8e:	3301      	adds	r3, #1
 8019e90:	81fb      	strh	r3, [r7, #14]
        }
        i++;
 8019e92:	89bb      	ldrh	r3, [r7, #12]
 8019e94:	3301      	adds	r3, #1
 8019e96:	81bb      	strh	r3, [r7, #12]
    while(strlen(map[i]) != 0) {
 8019e98:	89bb      	ldrh	r3, [r7, #12]
 8019e9a:	009b      	lsls	r3, r3, #2
 8019e9c:	683a      	ldr	r2, [r7, #0]
 8019e9e:	4413      	add	r3, r2
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	781b      	ldrb	r3, [r3, #0]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d1e5      	bne.n	8019e74 <allocate_btn_areas_and_controls+0x14>
    }

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019ea8:	6878      	ldr	r0, [r7, #4]
 8019eaa:	f7ef ffb6 	bl	8009e1a <lv_obj_get_ext_attr>
 8019eae:	60b8      	str	r0, [r7, #8]

    if(ext->button_areas != NULL) {
 8019eb0:	68bb      	ldr	r3, [r7, #8]
 8019eb2:	685b      	ldr	r3, [r3, #4]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d007      	beq.n	8019ec8 <allocate_btn_areas_and_controls+0x68>
        lv_mem_free(ext->button_areas);
 8019eb8:	68bb      	ldr	r3, [r7, #8]
 8019eba:	685b      	ldr	r3, [r3, #4]
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f7fc fb8d 	bl	80165dc <lv_mem_free>
        ext->button_areas = NULL;
 8019ec2:	68bb      	ldr	r3, [r7, #8]
 8019ec4:	2200      	movs	r2, #0
 8019ec6:	605a      	str	r2, [r3, #4]
    }
    if(ext->ctrl_bits != NULL) {
 8019ec8:	68bb      	ldr	r3, [r7, #8]
 8019eca:	689b      	ldr	r3, [r3, #8]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d007      	beq.n	8019ee0 <allocate_btn_areas_and_controls+0x80>
        lv_mem_free(ext->ctrl_bits);
 8019ed0:	68bb      	ldr	r3, [r7, #8]
 8019ed2:	689b      	ldr	r3, [r3, #8]
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	f7fc fb81 	bl	80165dc <lv_mem_free>
        ext->ctrl_bits = NULL;
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	2200      	movs	r2, #0
 8019ede:	609a      	str	r2, [r3, #8]
    }

    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 8019ee0:	89fb      	ldrh	r3, [r7, #14]
 8019ee2:	00db      	lsls	r3, r3, #3
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	f7fc fb39 	bl	801655c <lv_mem_alloc>
 8019eea:	4602      	mov	r2, r0
 8019eec:	68bb      	ldr	r3, [r7, #8]
 8019eee:	605a      	str	r2, [r3, #4]
    lv_mem_assert(ext->button_areas);
 8019ef0:	68bb      	ldr	r3, [r7, #8]
 8019ef2:	685b      	ldr	r3, [r3, #4]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d100      	bne.n	8019efa <allocate_btn_areas_and_controls+0x9a>
 8019ef8:	e7fe      	b.n	8019ef8 <allocate_btn_areas_and_controls+0x98>
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnm_ctrl_t) * btn_cnt);
 8019efa:	89fb      	ldrh	r3, [r7, #14]
 8019efc:	005b      	lsls	r3, r3, #1
 8019efe:	4618      	mov	r0, r3
 8019f00:	f7fc fb2c 	bl	801655c <lv_mem_alloc>
 8019f04:	4602      	mov	r2, r0
 8019f06:	68bb      	ldr	r3, [r7, #8]
 8019f08:	609a      	str	r2, [r3, #8]
    lv_mem_assert(ext->ctrl_bits);
 8019f0a:	68bb      	ldr	r3, [r7, #8]
 8019f0c:	689b      	ldr	r3, [r3, #8]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d100      	bne.n	8019f14 <allocate_btn_areas_and_controls+0xb4>
 8019f12:	e7fe      	b.n	8019f12 <allocate_btn_areas_and_controls+0xb2>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
 8019f14:	68bb      	ldr	r3, [r7, #8]
 8019f16:	685b      	ldr	r3, [r3, #4]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d003      	beq.n	8019f24 <allocate_btn_areas_and_controls+0xc4>
 8019f1c:	68bb      	ldr	r3, [r7, #8]
 8019f1e:	689b      	ldr	r3, [r3, #8]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d101      	bne.n	8019f28 <allocate_btn_areas_and_controls+0xc8>
 8019f24:	2300      	movs	r3, #0
 8019f26:	81fb      	strh	r3, [r7, #14]

    memset(ext->ctrl_bits, 0, sizeof(lv_btnm_ctrl_t) * btn_cnt);
 8019f28:	68bb      	ldr	r3, [r7, #8]
 8019f2a:	6898      	ldr	r0, [r3, #8]
 8019f2c:	89fb      	ldrh	r3, [r7, #14]
 8019f2e:	005b      	lsls	r3, r3, #1
 8019f30:	461a      	mov	r2, r3
 8019f32:	2100      	movs	r1, #0
 8019f34:	f00f ff49 	bl	8029dca <memset>

    ext->btn_cnt = btn_cnt;
 8019f38:	68bb      	ldr	r3, [r7, #8]
 8019f3a:	89fa      	ldrh	r2, [r7, #14]
 8019f3c:	841a      	strh	r2, [r3, #32]
}
 8019f3e:	bf00      	nop
 8019f40:	3710      	adds	r7, #16
 8019f42:	46bd      	mov	sp, r7
 8019f44:	bd80      	pop	{r7, pc}
 8019f46:	bf00      	nop
 8019f48:	0802c8e8 	.word	0x0802c8e8

08019f4c <get_button_width>:
 * Get the width of a button in units (default is 1).
 * @param ctrl_bits least significant 3 bits used (1..7 valid values)
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnm_ctrl_t ctrl_bits)
{
 8019f4c:	b480      	push	{r7}
 8019f4e:	b085      	sub	sp, #20
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	4603      	mov	r3, r0
 8019f54:	80fb      	strh	r3, [r7, #6]
    uint8_t w = ctrl_bits & LV_BTNM_WIDTH_MASK;
 8019f56:	88fb      	ldrh	r3, [r7, #6]
 8019f58:	b2db      	uxtb	r3, r3
 8019f5a:	f003 0307 	and.w	r3, r3, #7
 8019f5e:	73fb      	strb	r3, [r7, #15]
    return w != 0 ? w : 1;
 8019f60:	7bfb      	ldrb	r3, [r7, #15]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d001      	beq.n	8019f6a <get_button_width+0x1e>
 8019f66:	7bfb      	ldrb	r3, [r7, #15]
 8019f68:	e000      	b.n	8019f6c <get_button_width+0x20>
 8019f6a:	2301      	movs	r3, #1
}
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	3714      	adds	r7, #20
 8019f70:	46bd      	mov	sp, r7
 8019f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f76:	4770      	bx	lr

08019f78 <button_is_hidden>:

static bool button_is_hidden(lv_btnm_ctrl_t ctrl_bits)
{
 8019f78:	b480      	push	{r7}
 8019f7a:	b083      	sub	sp, #12
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	4603      	mov	r3, r0
 8019f80:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_HIDDEN ? true : false;
 8019f82:	88fb      	ldrh	r3, [r7, #6]
 8019f84:	10db      	asrs	r3, r3, #3
 8019f86:	f003 0301 	and.w	r3, r3, #1
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	bf14      	ite	ne
 8019f8e:	2301      	movne	r3, #1
 8019f90:	2300      	moveq	r3, #0
 8019f92:	b2db      	uxtb	r3, r3
}
 8019f94:	4618      	mov	r0, r3
 8019f96:	370c      	adds	r7, #12
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f9e:	4770      	bx	lr

08019fa0 <button_is_repeat_disabled>:

static bool button_is_repeat_disabled(lv_btnm_ctrl_t ctrl_bits)
{
 8019fa0:	b480      	push	{r7}
 8019fa2:	b083      	sub	sp, #12
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_NO_REPEAT ? true : false;
 8019faa:	88fb      	ldrh	r3, [r7, #6]
 8019fac:	111b      	asrs	r3, r3, #4
 8019fae:	f003 0301 	and.w	r3, r3, #1
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	bf14      	ite	ne
 8019fb6:	2301      	movne	r3, #1
 8019fb8:	2300      	moveq	r3, #0
 8019fba:	b2db      	uxtb	r3, r3
}
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	370c      	adds	r7, #12
 8019fc0:	46bd      	mov	sp, r7
 8019fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc6:	4770      	bx	lr

08019fc8 <button_is_inactive>:

static bool button_is_inactive(lv_btnm_ctrl_t ctrl_bits)
{
 8019fc8:	b480      	push	{r7}
 8019fca:	b083      	sub	sp, #12
 8019fcc:	af00      	add	r7, sp, #0
 8019fce:	4603      	mov	r3, r0
 8019fd0:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_INACTIVE ? true : false;
 8019fd2:	88fb      	ldrh	r3, [r7, #6]
 8019fd4:	115b      	asrs	r3, r3, #5
 8019fd6:	f003 0301 	and.w	r3, r3, #1
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	bf14      	ite	ne
 8019fde:	2301      	movne	r3, #1
 8019fe0:	2300      	moveq	r3, #0
 8019fe2:	b2db      	uxtb	r3, r3
}
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	370c      	adds	r7, #12
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fee:	4770      	bx	lr

08019ff0 <button_is_click_trig>:

static bool button_is_click_trig(lv_btnm_ctrl_t ctrl_bits)
{
 8019ff0:	b480      	push	{r7}
 8019ff2:	b083      	sub	sp, #12
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	4603      	mov	r3, r0
 8019ff8:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_CLICK_TRIG ? true : false;
 8019ffa:	88fb      	ldrh	r3, [r7, #6]
 8019ffc:	121b      	asrs	r3, r3, #8
 8019ffe:	f003 0301 	and.w	r3, r3, #1
 801a002:	2b00      	cmp	r3, #0
 801a004:	bf14      	ite	ne
 801a006:	2301      	movne	r3, #1
 801a008:	2300      	moveq	r3, #0
 801a00a:	b2db      	uxtb	r3, r3
}
 801a00c:	4618      	mov	r0, r3
 801a00e:	370c      	adds	r7, #12
 801a010:	46bd      	mov	sp, r7
 801a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a016:	4770      	bx	lr

0801a018 <button_is_tgl_enabled>:

static bool button_is_tgl_enabled(lv_btnm_ctrl_t ctrl_bits)
{
 801a018:	b480      	push	{r7}
 801a01a:	b083      	sub	sp, #12
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	4603      	mov	r3, r0
 801a020:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_TGL_ENABLE ? true : false;
 801a022:	88fb      	ldrh	r3, [r7, #6]
 801a024:	119b      	asrs	r3, r3, #6
 801a026:	f003 0301 	and.w	r3, r3, #1
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	bf14      	ite	ne
 801a02e:	2301      	movne	r3, #1
 801a030:	2300      	moveq	r3, #0
 801a032:	b2db      	uxtb	r3, r3
}
 801a034:	4618      	mov	r0, r3
 801a036:	370c      	adds	r7, #12
 801a038:	46bd      	mov	sp, r7
 801a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a03e:	4770      	bx	lr

0801a040 <button_get_tgl_state>:

static bool button_get_tgl_state(lv_btnm_ctrl_t ctrl_bits)
{
 801a040:	b480      	push	{r7}
 801a042:	b083      	sub	sp, #12
 801a044:	af00      	add	r7, sp, #0
 801a046:	4603      	mov	r3, r0
 801a048:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_TGL_STATE ? true : false;
 801a04a:	88fb      	ldrh	r3, [r7, #6]
 801a04c:	11db      	asrs	r3, r3, #7
 801a04e:	f003 0301 	and.w	r3, r3, #1
 801a052:	2b00      	cmp	r3, #0
 801a054:	bf14      	ite	ne
 801a056:	2301      	movne	r3, #1
 801a058:	2300      	moveq	r3, #0
 801a05a:	b2db      	uxtb	r3, r3
}
 801a05c:	4618      	mov	r0, r3
 801a05e:	370c      	adds	r7, #12
 801a060:	46bd      	mov	sp, r7
 801a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a066:	4770      	bx	lr

0801a068 <get_button_from_point>:
 * @param btnm pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNM_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * btnm, lv_point_t * p)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b088      	sub	sp, #32
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	6078      	str	r0, [r7, #4]
 801a070:	6039      	str	r1, [r7, #0]
    lv_area_t btnm_cords;
    lv_area_t btn_area;
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a072:	6878      	ldr	r0, [r7, #4]
 801a074:	f7ef fed1 	bl	8009e1a <lv_obj_get_ext_attr>
 801a078:	61b8      	str	r0, [r7, #24]
    uint16_t i;
    lv_obj_get_coords(btnm, &btnm_cords);
 801a07a:	f107 0310 	add.w	r3, r7, #16
 801a07e:	4619      	mov	r1, r3
 801a080:	6878      	ldr	r0, [r7, #4]
 801a082:	f7ef fd9e 	bl	8009bc2 <lv_obj_get_coords>

    for(i = 0; i < ext->btn_cnt; i++) {
 801a086:	2300      	movs	r3, #0
 801a088:	83fb      	strh	r3, [r7, #30]
 801a08a:	e03e      	b.n	801a10a <get_button_from_point+0xa2>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 801a08c:	69bb      	ldr	r3, [r7, #24]
 801a08e:	685a      	ldr	r2, [r3, #4]
 801a090:	8bfb      	ldrh	r3, [r7, #30]
 801a092:	00db      	lsls	r3, r3, #3
 801a094:	441a      	add	r2, r3
 801a096:	f107 0308 	add.w	r3, r7, #8
 801a09a:	4611      	mov	r1, r2
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7fe fcb5 	bl	8018a0c <lv_area_copy>
        btn_area.x1 += btnm_cords.x1;
 801a0a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a0a6:	b29a      	uxth	r2, r3
 801a0a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801a0ac:	b29b      	uxth	r3, r3
 801a0ae:	4413      	add	r3, r2
 801a0b0:	b29b      	uxth	r3, r3
 801a0b2:	b21b      	sxth	r3, r3
 801a0b4:	813b      	strh	r3, [r7, #8]
        btn_area.y1 += btnm_cords.y1;
 801a0b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a0ba:	b29a      	uxth	r2, r3
 801a0bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a0c0:	b29b      	uxth	r3, r3
 801a0c2:	4413      	add	r3, r2
 801a0c4:	b29b      	uxth	r3, r3
 801a0c6:	b21b      	sxth	r3, r3
 801a0c8:	817b      	strh	r3, [r7, #10]
        btn_area.x2 += btnm_cords.x1;
 801a0ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801a0ce:	b29a      	uxth	r2, r3
 801a0d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801a0d4:	b29b      	uxth	r3, r3
 801a0d6:	4413      	add	r3, r2
 801a0d8:	b29b      	uxth	r3, r3
 801a0da:	b21b      	sxth	r3, r3
 801a0dc:	81bb      	strh	r3, [r7, #12]
        btn_area.y2 += btnm_cords.y1;
 801a0de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a0e2:	b29a      	uxth	r2, r3
 801a0e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a0e8:	b29b      	uxth	r3, r3
 801a0ea:	4413      	add	r3, r2
 801a0ec:	b29b      	uxth	r3, r3
 801a0ee:	b21b      	sxth	r3, r3
 801a0f0:	81fb      	strh	r3, [r7, #14]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 801a0f2:	f107 0308 	add.w	r3, r7, #8
 801a0f6:	6839      	ldr	r1, [r7, #0]
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f7fb fca2 	bl	8015a42 <lv_area_is_point_on>
 801a0fe:	4603      	mov	r3, r0
 801a100:	2b00      	cmp	r3, #0
 801a102:	d108      	bne.n	801a116 <get_button_from_point+0xae>
    for(i = 0; i < ext->btn_cnt; i++) {
 801a104:	8bfb      	ldrh	r3, [r7, #30]
 801a106:	3301      	adds	r3, #1
 801a108:	83fb      	strh	r3, [r7, #30]
 801a10a:	69bb      	ldr	r3, [r7, #24]
 801a10c:	8c1b      	ldrh	r3, [r3, #32]
 801a10e:	8bfa      	ldrh	r2, [r7, #30]
 801a110:	429a      	cmp	r2, r3
 801a112:	d3bb      	bcc.n	801a08c <get_button_from_point+0x24>
 801a114:	e000      	b.n	801a118 <get_button_from_point+0xb0>
            break;
 801a116:	bf00      	nop
        }
    }

    if(i == ext->btn_cnt) i = LV_BTNM_BTN_NONE;
 801a118:	69bb      	ldr	r3, [r7, #24]
 801a11a:	8c1b      	ldrh	r3, [r3, #32]
 801a11c:	8bfa      	ldrh	r2, [r7, #30]
 801a11e:	429a      	cmp	r2, r3
 801a120:	d102      	bne.n	801a128 <get_button_from_point+0xc0>
 801a122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a126:	83fb      	strh	r3, [r7, #30]

    return i;
 801a128:	8bfb      	ldrh	r3, [r7, #30]
}
 801a12a:	4618      	mov	r0, r3
 801a12c:	3720      	adds	r7, #32
 801a12e:	46bd      	mov	sp, r7
 801a130:	bd80      	pop	{r7, pc}

0801a132 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)
{
 801a132:	b580      	push	{r7, lr}
 801a134:	b088      	sub	sp, #32
 801a136:	af00      	add	r7, sp, #0
 801a138:	6078      	str	r0, [r7, #4]
 801a13a:	460b      	mov	r3, r1
 801a13c:	807b      	strh	r3, [r7, #2]
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 801a13e:	887b      	ldrh	r3, [r7, #2]
 801a140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a144:	4293      	cmp	r3, r2
 801a146:	d047      	beq.n	801a1d8 <invalidate_button_area+0xa6>

    lv_area_t btn_area;
    lv_area_t btnm_area;

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a148:	6878      	ldr	r0, [r7, #4]
 801a14a:	f7ef fe66 	bl	8009e1a <lv_obj_get_ext_attr>
 801a14e:	61f8      	str	r0, [r7, #28]
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
 801a150:	69fb      	ldr	r3, [r7, #28]
 801a152:	685a      	ldr	r2, [r3, #4]
 801a154:	887b      	ldrh	r3, [r7, #2]
 801a156:	00db      	lsls	r3, r3, #3
 801a158:	441a      	add	r2, r3
 801a15a:	f107 0314 	add.w	r3, r7, #20
 801a15e:	4611      	mov	r1, r2
 801a160:	4618      	mov	r0, r3
 801a162:	f7fe fc53 	bl	8018a0c <lv_area_copy>
    lv_obj_get_coords(btnm, &btnm_area);
 801a166:	f107 030c 	add.w	r3, r7, #12
 801a16a:	4619      	mov	r1, r3
 801a16c:	6878      	ldr	r0, [r7, #4]
 801a16e:	f7ef fd28 	bl	8009bc2 <lv_obj_get_coords>

    /* Convert relative coordinates to absolute */
    btn_area.x1 += btnm_area.x1;
 801a172:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a176:	b29a      	uxth	r2, r3
 801a178:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801a17c:	b29b      	uxth	r3, r3
 801a17e:	4413      	add	r3, r2
 801a180:	b29b      	uxth	r3, r3
 801a182:	b21b      	sxth	r3, r3
 801a184:	82bb      	strh	r3, [r7, #20]
    btn_area.y1 += btnm_area.y1;
 801a186:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a18a:	b29a      	uxth	r2, r3
 801a18c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a190:	b29b      	uxth	r3, r3
 801a192:	4413      	add	r3, r2
 801a194:	b29b      	uxth	r3, r3
 801a196:	b21b      	sxth	r3, r3
 801a198:	82fb      	strh	r3, [r7, #22]
    btn_area.x2 += btnm_area.x1;
 801a19a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801a19e:	b29a      	uxth	r2, r3
 801a1a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801a1a4:	b29b      	uxth	r3, r3
 801a1a6:	4413      	add	r3, r2
 801a1a8:	b29b      	uxth	r3, r3
 801a1aa:	b21b      	sxth	r3, r3
 801a1ac:	833b      	strh	r3, [r7, #24]
    btn_area.y2 += btnm_area.y1;
 801a1ae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801a1b2:	b29a      	uxth	r2, r3
 801a1b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a1b8:	b29b      	uxth	r3, r3
 801a1ba:	4413      	add	r3, r2
 801a1bc:	b29b      	uxth	r3, r3
 801a1be:	b21b      	sxth	r3, r3
 801a1c0:	837b      	strh	r3, [r7, #26]

    lv_inv_area(lv_obj_get_disp(btnm), &btn_area);
 801a1c2:	6878      	ldr	r0, [r7, #4]
 801a1c4:	f7ef fc9a 	bl	8009afc <lv_obj_get_disp>
 801a1c8:	4602      	mov	r2, r0
 801a1ca:	f107 0314 	add.w	r3, r7, #20
 801a1ce:	4619      	mov	r1, r3
 801a1d0:	4610      	mov	r0, r2
 801a1d2:	f7f0 f87b 	bl	800a2cc <lv_inv_area>
 801a1d6:	e000      	b.n	801a1da <invalidate_button_area+0xa8>
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 801a1d8:	bf00      	nop
}
 801a1da:	3720      	adds	r7, #32
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	bd80      	pop	{r7, pc}

0801a1e0 <maps_are_identical>:
 * @param map1 map to compare
 * @param map2 map to compare
 * @return true if maps are identical in length and content
 */
static bool maps_are_identical(const char ** map1, const char ** map2)
{
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	b084      	sub	sp, #16
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
 801a1e8:	6039      	str	r1, [r7, #0]
    if(map1 == map2) return true;
 801a1ea:	687a      	ldr	r2, [r7, #4]
 801a1ec:	683b      	ldr	r3, [r7, #0]
 801a1ee:	429a      	cmp	r2, r3
 801a1f0:	d101      	bne.n	801a1f6 <maps_are_identical+0x16>
 801a1f2:	2301      	movs	r3, #1
 801a1f4:	e04b      	b.n	801a28e <maps_are_identical+0xae>
    if(map1 == NULL || map2 == NULL) return map1 == map2;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d002      	beq.n	801a202 <maps_are_identical+0x22>
 801a1fc:	683b      	ldr	r3, [r7, #0]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d107      	bne.n	801a212 <maps_are_identical+0x32>
 801a202:	687a      	ldr	r2, [r7, #4]
 801a204:	683b      	ldr	r3, [r7, #0]
 801a206:	429a      	cmp	r2, r3
 801a208:	bf0c      	ite	eq
 801a20a:	2301      	moveq	r3, #1
 801a20c:	2300      	movne	r3, #0
 801a20e:	b2db      	uxtb	r3, r3
 801a210:	e03d      	b.n	801a28e <maps_are_identical+0xae>

    uint16_t i = 0;
 801a212:	2300      	movs	r3, #0
 801a214:	81fb      	strh	r3, [r7, #14]
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 801a216:	e014      	b.n	801a242 <maps_are_identical+0x62>
        if(strcmp(map1[i], map2[i]) != 0) return false;
 801a218:	89fb      	ldrh	r3, [r7, #14]
 801a21a:	009b      	lsls	r3, r3, #2
 801a21c:	687a      	ldr	r2, [r7, #4]
 801a21e:	4413      	add	r3, r2
 801a220:	6818      	ldr	r0, [r3, #0]
 801a222:	89fb      	ldrh	r3, [r7, #14]
 801a224:	009b      	lsls	r3, r3, #2
 801a226:	683a      	ldr	r2, [r7, #0]
 801a228:	4413      	add	r3, r2
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	4619      	mov	r1, r3
 801a22e:	f7e5 ffcf 	bl	80001d0 <strcmp>
 801a232:	4603      	mov	r3, r0
 801a234:	2b00      	cmp	r3, #0
 801a236:	d001      	beq.n	801a23c <maps_are_identical+0x5c>
 801a238:	2300      	movs	r3, #0
 801a23a:	e028      	b.n	801a28e <maps_are_identical+0xae>
        i++;
 801a23c:	89fb      	ldrh	r3, [r7, #14]
 801a23e:	3301      	adds	r3, #1
 801a240:	81fb      	strh	r3, [r7, #14]
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 801a242:	89fb      	ldrh	r3, [r7, #14]
 801a244:	009b      	lsls	r3, r3, #2
 801a246:	687a      	ldr	r2, [r7, #4]
 801a248:	4413      	add	r3, r2
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	781b      	ldrb	r3, [r3, #0]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d007      	beq.n	801a262 <maps_are_identical+0x82>
 801a252:	89fb      	ldrh	r3, [r7, #14]
 801a254:	009b      	lsls	r3, r3, #2
 801a256:	683a      	ldr	r2, [r7, #0]
 801a258:	4413      	add	r3, r2
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	781b      	ldrb	r3, [r3, #0]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d1da      	bne.n	801a218 <maps_are_identical+0x38>
    }
    return map1[i][0] == '\0' && map2[i][0] == '\0';
 801a262:	89fb      	ldrh	r3, [r7, #14]
 801a264:	009b      	lsls	r3, r3, #2
 801a266:	687a      	ldr	r2, [r7, #4]
 801a268:	4413      	add	r3, r2
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	781b      	ldrb	r3, [r3, #0]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d109      	bne.n	801a286 <maps_are_identical+0xa6>
 801a272:	89fb      	ldrh	r3, [r7, #14]
 801a274:	009b      	lsls	r3, r3, #2
 801a276:	683a      	ldr	r2, [r7, #0]
 801a278:	4413      	add	r3, r2
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	781b      	ldrb	r3, [r3, #0]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d101      	bne.n	801a286 <maps_are_identical+0xa6>
 801a282:	2301      	movs	r3, #1
 801a284:	e000      	b.n	801a288 <maps_are_identical+0xa8>
 801a286:	2300      	movs	r3, #0
 801a288:	f003 0301 	and.w	r3, r3, #1
 801a28c:	b2db      	uxtb	r3, r3
}
 801a28e:	4618      	mov	r0, r3
 801a290:	3710      	adds	r7, #16
 801a292:	46bd      	mov	sp, r7
 801a294:	bd80      	pop	{r7, pc}

0801a296 <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
 801a296:	b580      	push	{r7, lr}
 801a298:	b084      	sub	sp, #16
 801a29a:	af00      	add	r7, sp, #0
 801a29c:	6078      	str	r0, [r7, #4]
 801a29e:	460b      	mov	r3, r1
 801a2a0:	807b      	strh	r3, [r7, #2]
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnm_get_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 801a2a2:	887b      	ldrh	r3, [r7, #2]
 801a2a4:	2280      	movs	r2, #128	; 0x80
 801a2a6:	4619      	mov	r1, r3
 801a2a8:	6878      	ldr	r0, [r7, #4]
 801a2aa:	f7fe ff7a 	bl	80191a2 <lv_btnm_get_btn_ctrl>
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	73fb      	strb	r3, [r7, #15]

    lv_btnm_clear_btn_ctrl_all(btnm, LV_BTNM_CTRL_TGL_STATE);
 801a2b2:	2180      	movs	r1, #128	; 0x80
 801a2b4:	6878      	ldr	r0, [r7, #4]
 801a2b6:	f7fe ff39 	bl	801912c <lv_btnm_clear_btn_ctrl_all>

    if(was_toggled) lv_btnm_set_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 801a2ba:	7bfb      	ldrb	r3, [r7, #15]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d005      	beq.n	801a2cc <make_one_button_toggled+0x36>
 801a2c0:	887b      	ldrh	r3, [r7, #2]
 801a2c2:	2280      	movs	r2, #128	; 0x80
 801a2c4:	4619      	mov	r1, r3
 801a2c6:	6878      	ldr	r0, [r7, #4]
 801a2c8:	f7fe feb8 	bl	801903c <lv_btnm_set_btn_ctrl>
}
 801a2cc:	bf00      	nop
 801a2ce:	3710      	adds	r7, #16
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	bd80      	pop	{r7, pc}

0801a2d4 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 801a2d4:	b480      	push	{r7}
 801a2d6:	b083      	sub	sp, #12
 801a2d8:	af00      	add	r7, sp, #0
 801a2da:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	7a1b      	ldrb	r3, [r3, #8]
}
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	370c      	adds	r7, #12
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ea:	4770      	bx	lr

0801a2ec <lv_cont_set_fit>:
 * It tell how to change the container's size automatically.
 * @param cont pointer to a container object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b084      	sub	sp, #16
 801a2f0:	af02      	add	r7, sp, #8
 801a2f2:	6078      	str	r0, [r7, #4]
 801a2f4:	460b      	mov	r3, r1
 801a2f6:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 801a2f8:	78f8      	ldrb	r0, [r7, #3]
 801a2fa:	78fa      	ldrb	r2, [r7, #3]
 801a2fc:	78f9      	ldrb	r1, [r7, #3]
 801a2fe:	78fb      	ldrb	r3, [r7, #3]
 801a300:	9300      	str	r3, [sp, #0]
 801a302:	4603      	mov	r3, r0
 801a304:	6878      	ldr	r0, [r7, #4]
 801a306:	f000 fbf4 	bl	801aaf2 <lv_cont_set_fit4>
}
 801a30a:	bf00      	nop
 801a30c:	3708      	adds	r7, #8
 801a30e:	46bd      	mov	sp, r7
 801a310:	bd80      	pop	{r7, pc}

0801a312 <lv_btn_set_layout>:
{
 801a312:	b580      	push	{r7, lr}
 801a314:	b082      	sub	sp, #8
 801a316:	af00      	add	r7, sp, #0
 801a318:	6078      	str	r0, [r7, #4]
 801a31a:	460b      	mov	r3, r1
 801a31c:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_layout(btn, layout);
 801a31e:	78fb      	ldrb	r3, [r7, #3]
 801a320:	4619      	mov	r1, r3
 801a322:	6878      	ldr	r0, [r7, #4]
 801a324:	f000 fbbe 	bl	801aaa4 <lv_cont_set_layout>
}
 801a328:	bf00      	nop
 801a32a:	3708      	adds	r7, #8
 801a32c:	46bd      	mov	sp, r7
 801a32e:	bd80      	pop	{r7, pc}

0801a330 <lv_btn_set_fit>:
 * It tell how to change the button size automatically.
 * @param btn pointer to a button object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_btn_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b082      	sub	sp, #8
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
 801a338:	460b      	mov	r3, r1
 801a33a:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit(cont, fit);
 801a33c:	78fb      	ldrb	r3, [r7, #3]
 801a33e:	4619      	mov	r1, r3
 801a340:	6878      	ldr	r0, [r7, #4]
 801a342:	f7ff ffd3 	bl	801a2ec <lv_cont_set_fit>
}
 801a346:	bf00      	nop
 801a348:	3708      	adds	r7, #8
 801a34a:	46bd      	mov	sp, r7
 801a34c:	bd80      	pop	{r7, pc}

0801a34e <lv_label_get_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
 801a34e:	b580      	push	{r7, lr}
 801a350:	b082      	sub	sp, #8
 801a352:	af00      	add	r7, sp, #0
 801a354:	6078      	str	r0, [r7, #4]
 801a356:	460b      	mov	r3, r1
 801a358:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 801a35a:	6878      	ldr	r0, [r7, #4]
 801a35c:	f7ef fca2 	bl	8009ca4 <lv_obj_get_style>
 801a360:	4603      	mov	r3, r0
}
 801a362:	4618      	mov	r0, r3
 801a364:	3708      	adds	r7, #8
 801a366:	46bd      	mov	sp, r7
 801a368:	bd80      	pop	{r7, pc}
	...

0801a36c <lv_cb_create>:
 * @param par pointer to an object, it will be the parent of the new check box
 * @param copy pointer to a check box object, if not NULL then the new object will be copied from it
 * @return pointer to the created check box
 */
lv_obj_t * lv_cb_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	b086      	sub	sp, #24
 801a370:	af00      	add	r7, sp, #0
 801a372:	6078      	str	r0, [r7, #4]
 801a374:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("check box create started");

    /*Create the ancestor basic object*/
    lv_obj_t * new_cb = lv_btn_create(par, copy);
 801a376:	6839      	ldr	r1, [r7, #0]
 801a378:	6878      	ldr	r0, [r7, #4]
 801a37a:	f7fe f825 	bl	80183c8 <lv_btn_create>
 801a37e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_cb);
 801a380:	697b      	ldr	r3, [r7, #20]
 801a382:	2b00      	cmp	r3, #0
 801a384:	d100      	bne.n	801a388 <lv_cb_create+0x1c>
 801a386:	e7fe      	b.n	801a386 <lv_cb_create+0x1a>
    if(new_cb == NULL) return NULL;
 801a388:	697b      	ldr	r3, [r7, #20]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d101      	bne.n	801a392 <lv_cb_create+0x26>
 801a38e:	2300      	movs	r3, #0
 801a390:	e0c8      	b.n	801a524 <lv_cb_create+0x1b8>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cb);
 801a392:	4b66      	ldr	r3, [pc, #408]	; (801a52c <lv_cb_create+0x1c0>)
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	2b00      	cmp	r3, #0
 801a398:	d105      	bne.n	801a3a6 <lv_cb_create+0x3a>
 801a39a:	6978      	ldr	r0, [r7, #20]
 801a39c:	f7ef fd25 	bl	8009dea <lv_obj_get_signal_cb>
 801a3a0:	4602      	mov	r2, r0
 801a3a2:	4b62      	ldr	r3, [pc, #392]	; (801a52c <lv_cb_create+0x1c0>)
 801a3a4:	601a      	str	r2, [r3, #0]
    if(ancestor_bg_design == NULL) ancestor_bg_design = lv_obj_get_design_cb(new_cb);
 801a3a6:	4b62      	ldr	r3, [pc, #392]	; (801a530 <lv_cb_create+0x1c4>)
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d105      	bne.n	801a3ba <lv_cb_create+0x4e>
 801a3ae:	6978      	ldr	r0, [r7, #20]
 801a3b0:	f7ef fd27 	bl	8009e02 <lv_obj_get_design_cb>
 801a3b4:	4602      	mov	r2, r0
 801a3b6:	4b5e      	ldr	r3, [pc, #376]	; (801a530 <lv_cb_create+0x1c4>)
 801a3b8:	601a      	str	r2, [r3, #0]

    lv_cb_ext_t * ext = lv_obj_allocate_ext_attr(new_cb, sizeof(lv_cb_ext_t));
 801a3ba:	2124      	movs	r1, #36	; 0x24
 801a3bc:	6978      	ldr	r0, [r7, #20]
 801a3be:	f7ef fb5f 	bl	8009a80 <lv_obj_allocate_ext_attr>
 801a3c2:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801a3c4:	693b      	ldr	r3, [r7, #16]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d100      	bne.n	801a3cc <lv_cb_create+0x60>
 801a3ca:	e7fe      	b.n	801a3ca <lv_cb_create+0x5e>
    if(ext == NULL) return NULL;
 801a3cc:	693b      	ldr	r3, [r7, #16]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d101      	bne.n	801a3d6 <lv_cb_create+0x6a>
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	e0a6      	b.n	801a524 <lv_cb_create+0x1b8>

    ext->bullet = NULL;
 801a3d6:	693b      	ldr	r3, [r7, #16]
 801a3d8:	2200      	movs	r2, #0
 801a3da:	61da      	str	r2, [r3, #28]
    ext->label  = NULL;
 801a3dc:	693b      	ldr	r3, [r7, #16]
 801a3de:	2200      	movs	r2, #0
 801a3e0:	621a      	str	r2, [r3, #32]

    lv_obj_set_signal_cb(new_cb, lv_cb_signal);
 801a3e2:	4954      	ldr	r1, [pc, #336]	; (801a534 <lv_cb_create+0x1c8>)
 801a3e4:	6978      	ldr	r0, [r7, #20]
 801a3e6:	f7ef fb2f 	bl	8009a48 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_cb, lv_cb_design);
 801a3ea:	4953      	ldr	r1, [pc, #332]	; (801a538 <lv_cb_create+0x1cc>)
 801a3ec:	6978      	ldr	r0, [r7, #20]
 801a3ee:	f7ef fb39 	bl	8009a64 <lv_obj_set_design_cb>

    /*Init the new checkbox object*/
    if(copy == NULL) {
 801a3f2:	683b      	ldr	r3, [r7, #0]
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d175      	bne.n	801a4e4 <lv_cb_create+0x178>
        ext->bullet = lv_btn_create(new_cb, NULL);
 801a3f8:	2100      	movs	r1, #0
 801a3fa:	6978      	ldr	r0, [r7, #20]
 801a3fc:	f7fd ffe4 	bl	80183c8 <lv_btn_create>
 801a400:	4602      	mov	r2, r0
 801a402:	693b      	ldr	r3, [r7, #16]
 801a404:	61da      	str	r2, [r3, #28]
        if(ancestor_bullet_design == NULL) ancestor_bullet_design = lv_obj_get_design_cb(ext->bullet);
 801a406:	4b4d      	ldr	r3, [pc, #308]	; (801a53c <lv_cb_create+0x1d0>)
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d107      	bne.n	801a41e <lv_cb_create+0xb2>
 801a40e:	693b      	ldr	r3, [r7, #16]
 801a410:	69db      	ldr	r3, [r3, #28]
 801a412:	4618      	mov	r0, r3
 801a414:	f7ef fcf5 	bl	8009e02 <lv_obj_get_design_cb>
 801a418:	4602      	mov	r2, r0
 801a41a:	4b48      	ldr	r3, [pc, #288]	; (801a53c <lv_cb_create+0x1d0>)
 801a41c:	601a      	str	r2, [r3, #0]
        lv_obj_set_click(ext->bullet, false);
 801a41e:	693b      	ldr	r3, [r7, #16]
 801a420:	69db      	ldr	r3, [r3, #28]
 801a422:	2100      	movs	r1, #0
 801a424:	4618      	mov	r0, r3
 801a426:	f7ef f9ee 	bl	8009806 <lv_obj_set_click>

        ext->label = lv_label_create(new_cb, NULL);
 801a42a:	2100      	movs	r1, #0
 801a42c:	6978      	ldr	r0, [r7, #20]
 801a42e:	f001 fe37 	bl	801c0a0 <lv_label_create>
 801a432:	4602      	mov	r2, r0
 801a434:	693b      	ldr	r3, [r7, #16]
 801a436:	621a      	str	r2, [r3, #32]

        lv_cb_set_text(new_cb, "Check box");
 801a438:	4941      	ldr	r1, [pc, #260]	; (801a540 <lv_cb_create+0x1d4>)
 801a43a:	6978      	ldr	r0, [r7, #20]
 801a43c:	f000 f888 	bl	801a550 <lv_cb_set_text>
        lv_btn_set_layout(new_cb, LV_LAYOUT_ROW_M);
 801a440:	2106      	movs	r1, #6
 801a442:	6978      	ldr	r0, [r7, #20]
 801a444:	f7ff ff65 	bl	801a312 <lv_btn_set_layout>
        lv_btn_set_fit(new_cb, LV_FIT_TIGHT);
 801a448:	2101      	movs	r1, #1
 801a44a:	6978      	ldr	r0, [r7, #20]
 801a44c:	f7ff ff70 	bl	801a330 <lv_btn_set_fit>
        lv_btn_set_toggle(new_cb, true);
 801a450:	2101      	movs	r1, #1
 801a452:	6978      	ldr	r0, [r7, #20]
 801a454:	f7fe f888 	bl	8018568 <lv_btn_set_toggle>
        lv_obj_set_protect(new_cb, LV_PROTECT_PRESS_LOST);
 801a458:	2110      	movs	r1, #16
 801a45a:	6978      	ldr	r0, [r7, #20]
 801a45c:	f7ef fa28 	bl	80098b0 <lv_obj_set_protect>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801a460:	f007 fb5e 	bl	8021b20 <lv_theme_get_current>
 801a464:	60b8      	str	r0, [r7, #8]
        if(th) {
 801a466:	68bb      	ldr	r3, [r7, #8]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d030      	beq.n	801a4ce <lv_cb_create+0x162>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BG, th->style.cb.bg);
 801a46c:	68bb      	ldr	r3, [r7, #8]
 801a46e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801a472:	461a      	mov	r2, r3
 801a474:	2100      	movs	r1, #0
 801a476:	6978      	ldr	r0, [r7, #20]
 801a478:	f000 f87e 	bl	801a578 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_REL, th->style.cb.box.rel);
 801a47c:	68bb      	ldr	r3, [r7, #8]
 801a47e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801a482:	461a      	mov	r2, r3
 801a484:	2101      	movs	r1, #1
 801a486:	6978      	ldr	r0, [r7, #20]
 801a488:	f000 f876 	bl	801a578 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_PR, th->style.cb.box.pr);
 801a48c:	68bb      	ldr	r3, [r7, #8]
 801a48e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a492:	461a      	mov	r2, r3
 801a494:	2102      	movs	r1, #2
 801a496:	6978      	ldr	r0, [r7, #20]
 801a498:	f000 f86e 	bl	801a578 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_TGL_REL, th->style.cb.box.tgl_rel);
 801a49c:	68bb      	ldr	r3, [r7, #8]
 801a49e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a4a2:	461a      	mov	r2, r3
 801a4a4:	2103      	movs	r1, #3
 801a4a6:	6978      	ldr	r0, [r7, #20]
 801a4a8:	f000 f866 	bl	801a578 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_TGL_PR, th->style.cb.box.tgl_pr);
 801a4ac:	68bb      	ldr	r3, [r7, #8]
 801a4ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a4b2:	461a      	mov	r2, r3
 801a4b4:	2104      	movs	r1, #4
 801a4b6:	6978      	ldr	r0, [r7, #20]
 801a4b8:	f000 f85e 	bl	801a578 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_INA, th->style.cb.box.ina);
 801a4bc:	68bb      	ldr	r3, [r7, #8]
 801a4be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a4c2:	461a      	mov	r2, r3
 801a4c4:	2105      	movs	r1, #5
 801a4c6:	6978      	ldr	r0, [r7, #20]
 801a4c8:	f000 f856 	bl	801a578 <lv_cb_set_style>
 801a4cc:	e023      	b.n	801a516 <lv_cb_create+0x1aa>
        } else {
            lv_cb_set_style(new_cb, LV_CB_STYLE_BG, &lv_style_transp);
 801a4ce:	4a1d      	ldr	r2, [pc, #116]	; (801a544 <lv_cb_create+0x1d8>)
 801a4d0:	2100      	movs	r1, #0
 801a4d2:	6978      	ldr	r0, [r7, #20]
 801a4d4:	f000 f850 	bl	801a578 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_REL, &lv_style_pretty);
 801a4d8:	4a1b      	ldr	r2, [pc, #108]	; (801a548 <lv_cb_create+0x1dc>)
 801a4da:	2101      	movs	r1, #1
 801a4dc:	6978      	ldr	r0, [r7, #20]
 801a4de:	f000 f84b 	bl	801a578 <lv_cb_set_style>
 801a4e2:	e018      	b.n	801a516 <lv_cb_create+0x1aa>
        }
    } else {
        lv_cb_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801a4e4:	6838      	ldr	r0, [r7, #0]
 801a4e6:	f7ef fc98 	bl	8009e1a <lv_obj_get_ext_attr>
 801a4ea:	60f8      	str	r0, [r7, #12]
        ext->bullet            = lv_btn_create(new_cb, copy_ext->bullet);
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	69db      	ldr	r3, [r3, #28]
 801a4f0:	4619      	mov	r1, r3
 801a4f2:	6978      	ldr	r0, [r7, #20]
 801a4f4:	f7fd ff68 	bl	80183c8 <lv_btn_create>
 801a4f8:	4602      	mov	r2, r0
 801a4fa:	693b      	ldr	r3, [r7, #16]
 801a4fc:	61da      	str	r2, [r3, #28]
        ext->label             = lv_label_create(new_cb, copy_ext->label);
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	6a1b      	ldr	r3, [r3, #32]
 801a502:	4619      	mov	r1, r3
 801a504:	6978      	ldr	r0, [r7, #20]
 801a506:	f001 fdcb 	bl	801c0a0 <lv_label_create>
 801a50a:	4602      	mov	r2, r0
 801a50c:	693b      	ldr	r3, [r7, #16]
 801a50e:	621a      	str	r2, [r3, #32]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_cb);
 801a510:	6978      	ldr	r0, [r7, #20]
 801a512:	f7ef f964 	bl	80097de <lv_obj_refresh_style>
    }

    lv_obj_set_design_cb(ext->bullet, lv_bullet_design);
 801a516:	693b      	ldr	r3, [r7, #16]
 801a518:	69db      	ldr	r3, [r3, #28]
 801a51a:	490c      	ldr	r1, [pc, #48]	; (801a54c <lv_cb_create+0x1e0>)
 801a51c:	4618      	mov	r0, r3
 801a51e:	f7ef faa1 	bl	8009a64 <lv_obj_set_design_cb>

    LV_LOG_INFO("check box created");

    return new_cb;
 801a522:	697b      	ldr	r3, [r7, #20]
}
 801a524:	4618      	mov	r0, r3
 801a526:	3718      	adds	r7, #24
 801a528:	46bd      	mov	sp, r7
 801a52a:	bd80      	pop	{r7, pc}
 801a52c:	200177d0 	.word	0x200177d0
 801a530:	200177c8 	.word	0x200177c8
 801a534:	0801a775 	.word	0x0801a775
 801a538:	0801a641 	.word	0x0801a641
 801a53c:	200177cc 	.word	0x200177cc
 801a540:	0802c908 	.word	0x0802c908
 801a544:	2001b86c 	.word	0x2001b86c
 801a548:	2001b920 	.word	0x2001b920
 801a54c:	0801a6d1 	.word	0x0801a6d1

0801a550 <lv_cb_set_text>:
 * after this function returns.
 * @param cb pointer to a check box
 * @param txt the text of the check box. NULL to refresh with the current text.
 */
void lv_cb_set_text(lv_obj_t * cb, const char * txt)
{
 801a550:	b580      	push	{r7, lr}
 801a552:	b084      	sub	sp, #16
 801a554:	af00      	add	r7, sp, #0
 801a556:	6078      	str	r0, [r7, #4]
 801a558:	6039      	str	r1, [r7, #0]
    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 801a55a:	6878      	ldr	r0, [r7, #4]
 801a55c:	f7ef fc5d 	bl	8009e1a <lv_obj_get_ext_attr>
 801a560:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(ext->label, txt);
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	6a1b      	ldr	r3, [r3, #32]
 801a566:	6839      	ldr	r1, [r7, #0]
 801a568:	4618      	mov	r0, r3
 801a56a:	f001 fecb 	bl	801c304 <lv_label_set_text>
}
 801a56e:	bf00      	nop
 801a570:	3710      	adds	r7, #16
 801a572:	46bd      	mov	sp, r7
 801a574:	bd80      	pop	{r7, pc}
	...

0801a578 <lv_cb_set_style>:
 * @param cb pointer to check box object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_cb_set_style(lv_obj_t * cb, lv_cb_style_t type, const lv_style_t * style)
{
 801a578:	b580      	push	{r7, lr}
 801a57a:	b086      	sub	sp, #24
 801a57c:	af00      	add	r7, sp, #0
 801a57e:	60f8      	str	r0, [r7, #12]
 801a580:	460b      	mov	r3, r1
 801a582:	607a      	str	r2, [r7, #4]
 801a584:	72fb      	strb	r3, [r7, #11]
    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 801a586:	68f8      	ldr	r0, [r7, #12]
 801a588:	f7ef fc47 	bl	8009e1a <lv_obj_get_ext_attr>
 801a58c:	6178      	str	r0, [r7, #20]

    switch(type) {
 801a58e:	7afb      	ldrb	r3, [r7, #11]
 801a590:	2b05      	cmp	r3, #5
 801a592:	d851      	bhi.n	801a638 <lv_cb_set_style+0xc0>
 801a594:	a201      	add	r2, pc, #4	; (adr r2, 801a59c <lv_cb_set_style+0x24>)
 801a596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a59a:	bf00      	nop
 801a59c:	0801a5b5 	.word	0x0801a5b5
 801a5a0:	0801a5e9 	.word	0x0801a5e9
 801a5a4:	0801a5f9 	.word	0x0801a5f9
 801a5a8:	0801a609 	.word	0x0801a609
 801a5ac:	0801a619 	.word	0x0801a619
 801a5b0:	0801a629 	.word	0x0801a629
        case LV_CB_STYLE_BG:
            lv_btn_set_style(cb, LV_BTN_STYLE_REL, style);
 801a5b4:	687a      	ldr	r2, [r7, #4]
 801a5b6:	2100      	movs	r1, #0
 801a5b8:	68f8      	ldr	r0, [r7, #12]
 801a5ba:	f7fe f813 	bl	80185e4 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_PR, style);
 801a5be:	687a      	ldr	r2, [r7, #4]
 801a5c0:	2101      	movs	r1, #1
 801a5c2:	68f8      	ldr	r0, [r7, #12]
 801a5c4:	f7fe f80e 	bl	80185e4 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_TGL_REL, style);
 801a5c8:	687a      	ldr	r2, [r7, #4]
 801a5ca:	2102      	movs	r1, #2
 801a5cc:	68f8      	ldr	r0, [r7, #12]
 801a5ce:	f7fe f809 	bl	80185e4 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_TGL_PR, style);
 801a5d2:	687a      	ldr	r2, [r7, #4]
 801a5d4:	2103      	movs	r1, #3
 801a5d6:	68f8      	ldr	r0, [r7, #12]
 801a5d8:	f7fe f804 	bl	80185e4 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_INA, style);
 801a5dc:	687a      	ldr	r2, [r7, #4]
 801a5de:	2104      	movs	r1, #4
 801a5e0:	68f8      	ldr	r0, [r7, #12]
 801a5e2:	f7fd ffff 	bl	80185e4 <lv_btn_set_style>
            break;
 801a5e6:	e027      	b.n	801a638 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_REL: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_REL, style); break;
 801a5e8:	697b      	ldr	r3, [r7, #20]
 801a5ea:	69db      	ldr	r3, [r3, #28]
 801a5ec:	687a      	ldr	r2, [r7, #4]
 801a5ee:	2100      	movs	r1, #0
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f7fd fff7 	bl	80185e4 <lv_btn_set_style>
 801a5f6:	e01f      	b.n	801a638 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_PR: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_PR, style); break;
 801a5f8:	697b      	ldr	r3, [r7, #20]
 801a5fa:	69db      	ldr	r3, [r3, #28]
 801a5fc:	687a      	ldr	r2, [r7, #4]
 801a5fe:	2101      	movs	r1, #1
 801a600:	4618      	mov	r0, r3
 801a602:	f7fd ffef 	bl	80185e4 <lv_btn_set_style>
 801a606:	e017      	b.n	801a638 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_TGL_REL: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_TGL_REL, style); break;
 801a608:	697b      	ldr	r3, [r7, #20]
 801a60a:	69db      	ldr	r3, [r3, #28]
 801a60c:	687a      	ldr	r2, [r7, #4]
 801a60e:	2102      	movs	r1, #2
 801a610:	4618      	mov	r0, r3
 801a612:	f7fd ffe7 	bl	80185e4 <lv_btn_set_style>
 801a616:	e00f      	b.n	801a638 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_TGL_PR: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_TGL_PR, style); break;
 801a618:	697b      	ldr	r3, [r7, #20]
 801a61a:	69db      	ldr	r3, [r3, #28]
 801a61c:	687a      	ldr	r2, [r7, #4]
 801a61e:	2103      	movs	r1, #3
 801a620:	4618      	mov	r0, r3
 801a622:	f7fd ffdf 	bl	80185e4 <lv_btn_set_style>
 801a626:	e007      	b.n	801a638 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_INA: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_INA, style); break;
 801a628:	697b      	ldr	r3, [r7, #20]
 801a62a:	69db      	ldr	r3, [r3, #28]
 801a62c:	687a      	ldr	r2, [r7, #4]
 801a62e:	2104      	movs	r1, #4
 801a630:	4618      	mov	r0, r3
 801a632:	f7fd ffd7 	bl	80185e4 <lv_btn_set_style>
 801a636:	bf00      	nop
    }
}
 801a638:	bf00      	nop
 801a63a:	3718      	adds	r7, #24
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd80      	pop	{r7, pc}

0801a640 <lv_cb_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_cb_design(lv_obj_t * cb, const lv_area_t * mask, lv_design_mode_t mode)
{
 801a640:	b580      	push	{r7, lr}
 801a642:	b088      	sub	sp, #32
 801a644:	af00      	add	r7, sp, #0
 801a646:	60f8      	str	r0, [r7, #12]
 801a648:	60b9      	str	r1, [r7, #8]
 801a64a:	4613      	mov	r3, r2
 801a64c:	71fb      	strb	r3, [r7, #7]
    bool result = true;
 801a64e:	2301      	movs	r3, #1
 801a650:	77fb      	strb	r3, [r7, #31]

    if(mode == LV_DESIGN_COVER_CHK) {
 801a652:	79fb      	ldrb	r3, [r7, #7]
 801a654:	2b02      	cmp	r3, #2
 801a656:	d108      	bne.n	801a66a <lv_cb_design+0x2a>
        /*Return false if the object is not covers the mask_p area*/
        result = ancestor_bg_design(cb, mask, mode);
 801a658:	4b1c      	ldr	r3, [pc, #112]	; (801a6cc <lv_cb_design+0x8c>)
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	79fa      	ldrb	r2, [r7, #7]
 801a65e:	68b9      	ldr	r1, [r7, #8]
 801a660:	68f8      	ldr	r0, [r7, #12]
 801a662:	4798      	blx	r3
 801a664:	4603      	mov	r3, r0
 801a666:	77fb      	strb	r3, [r7, #31]
 801a668:	e02a      	b.n	801a6c0 <lv_cb_design+0x80>
    } else if(mode == LV_DESIGN_DRAW_MAIN || mode == LV_DESIGN_DRAW_POST) {
 801a66a:	79fb      	ldrb	r3, [r7, #7]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d002      	beq.n	801a676 <lv_cb_design+0x36>
 801a670:	79fb      	ldrb	r3, [r7, #7]
 801a672:	2b01      	cmp	r3, #1
 801a674:	d11c      	bne.n	801a6b0 <lv_cb_design+0x70>
        lv_cb_ext_t * cb_ext      = lv_obj_get_ext_attr(cb);
 801a676:	68f8      	ldr	r0, [r7, #12]
 801a678:	f7ef fbcf 	bl	8009e1a <lv_obj_get_ext_attr>
 801a67c:	61b8      	str	r0, [r7, #24]
        lv_btn_ext_t * bullet_ext = lv_obj_get_ext_attr(cb_ext->bullet);
 801a67e:	69bb      	ldr	r3, [r7, #24]
 801a680:	69db      	ldr	r3, [r3, #28]
 801a682:	4618      	mov	r0, r3
 801a684:	f7ef fbc9 	bl	8009e1a <lv_obj_get_ext_attr>
 801a688:	6178      	str	r0, [r7, #20]

        /*Be sure the state of the bullet is the same as the parent button*/
        bullet_ext->state = cb_ext->bg_btn.state;
 801a68a:	69bb      	ldr	r3, [r7, #24]
 801a68c:	7e1b      	ldrb	r3, [r3, #24]
 801a68e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801a692:	b2d9      	uxtb	r1, r3
 801a694:	697a      	ldr	r2, [r7, #20]
 801a696:	7e13      	ldrb	r3, [r2, #24]
 801a698:	f361 0302 	bfi	r3, r1, #0, #3
 801a69c:	7613      	strb	r3, [r2, #24]

        result = ancestor_bg_design(cb, mask, mode);
 801a69e:	4b0b      	ldr	r3, [pc, #44]	; (801a6cc <lv_cb_design+0x8c>)
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	79fa      	ldrb	r2, [r7, #7]
 801a6a4:	68b9      	ldr	r1, [r7, #8]
 801a6a6:	68f8      	ldr	r0, [r7, #12]
 801a6a8:	4798      	blx	r3
 801a6aa:	4603      	mov	r3, r0
 801a6ac:	77fb      	strb	r3, [r7, #31]
    } else if(mode == LV_DESIGN_DRAW_MAIN || mode == LV_DESIGN_DRAW_POST) {
 801a6ae:	e007      	b.n	801a6c0 <lv_cb_design+0x80>

    } else {
        result = ancestor_bg_design(cb, mask, mode);
 801a6b0:	4b06      	ldr	r3, [pc, #24]	; (801a6cc <lv_cb_design+0x8c>)
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	79fa      	ldrb	r2, [r7, #7]
 801a6b6:	68b9      	ldr	r1, [r7, #8]
 801a6b8:	68f8      	ldr	r0, [r7, #12]
 801a6ba:	4798      	blx	r3
 801a6bc:	4603      	mov	r3, r0
 801a6be:	77fb      	strb	r3, [r7, #31]
    }

    return result;
 801a6c0:	7ffb      	ldrb	r3, [r7, #31]
}
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	3720      	adds	r7, #32
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	bd80      	pop	{r7, pc}
 801a6ca:	bf00      	nop
 801a6cc:	200177c8 	.word	0x200177c8

0801a6d0 <lv_bullet_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_bullet_design(lv_obj_t * bullet, const lv_area_t * mask, lv_design_mode_t mode)
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b08a      	sub	sp, #40	; 0x28
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	60f8      	str	r0, [r7, #12]
 801a6d8:	60b9      	str	r1, [r7, #8]
 801a6da:	4613      	mov	r3, r2
 801a6dc:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801a6de:	79fb      	ldrb	r3, [r7, #7]
 801a6e0:	2b02      	cmp	r3, #2
 801a6e2:	d107      	bne.n	801a6f4 <lv_bullet_design+0x24>
        return ancestor_bullet_design(bullet, mask, mode);
 801a6e4:	4b22      	ldr	r3, [pc, #136]	; (801a770 <lv_bullet_design+0xa0>)
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	79fa      	ldrb	r2, [r7, #7]
 801a6ea:	68b9      	ldr	r1, [r7, #8]
 801a6ec:	68f8      	ldr	r0, [r7, #12]
 801a6ee:	4798      	blx	r3
 801a6f0:	4603      	mov	r3, r0
 801a6f2:	e039      	b.n	801a768 <lv_bullet_design+0x98>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801a6f4:	79fb      	ldrb	r3, [r7, #7]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d12c      	bne.n	801a754 <lv_bullet_design+0x84>
#if LV_USE_GROUP
        /* If the check box is the active in a group and
         * the background is not visible (transparent)
         * then activate the style of the bullet*/
        const lv_style_t * style_ori  = lv_obj_get_style(bullet);
 801a6fa:	68f8      	ldr	r0, [r7, #12]
 801a6fc:	f7ef fad2 	bl	8009ca4 <lv_obj_get_style>
 801a700:	6278      	str	r0, [r7, #36]	; 0x24
        lv_obj_t * bg                 = lv_obj_get_parent(bullet);
 801a702:	68f8      	ldr	r0, [r7, #12]
 801a704:	f7ef fa34 	bl	8009b70 <lv_obj_get_parent>
 801a708:	6238      	str	r0, [r7, #32]
        const lv_style_t * style_page = lv_obj_get_style(bg);
 801a70a:	6a38      	ldr	r0, [r7, #32]
 801a70c:	f7ef faca 	bl	8009ca4 <lv_obj_get_style>
 801a710:	61f8      	str	r0, [r7, #28]
        lv_group_t * g                = lv_obj_get_group(bg);
 801a712:	6a38      	ldr	r0, [r7, #32]
 801a714:	f7ef fb8d 	bl	8009e32 <lv_obj_get_group>
 801a718:	61b8      	str	r0, [r7, #24]
        if(style_page->body.opa == LV_OPA_TRANSP) { /*Is the Background visible?*/
 801a71a:	69fb      	ldr	r3, [r7, #28]
 801a71c:	7a1b      	ldrb	r3, [r3, #8]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d10e      	bne.n	801a740 <lv_bullet_design+0x70>
            if(lv_group_get_focused(g) == bg) {
 801a722:	69b8      	ldr	r0, [r7, #24]
 801a724:	f7ed fb67 	bl	8007df6 <lv_group_get_focused>
 801a728:	4602      	mov	r2, r0
 801a72a:	6a3b      	ldr	r3, [r7, #32]
 801a72c:	4293      	cmp	r3, r2
 801a72e:	d107      	bne.n	801a740 <lv_bullet_design+0x70>
                lv_style_t * style_mod;
                style_mod       = lv_group_mod_style(g, style_ori);
 801a730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a732:	69b8      	ldr	r0, [r7, #24]
 801a734:	f7ed fb2f 	bl	8007d96 <lv_group_mod_style>
 801a738:	6178      	str	r0, [r7, #20]
                bullet->style_p = style_mod; /*Temporally change the style to the activated */
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	697a      	ldr	r2, [r7, #20]
 801a73e:	629a      	str	r2, [r3, #40]	; 0x28
            }
        }
#endif
        ancestor_bullet_design(bullet, mask, mode);
 801a740:	4b0b      	ldr	r3, [pc, #44]	; (801a770 <lv_bullet_design+0xa0>)
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	79fa      	ldrb	r2, [r7, #7]
 801a746:	68b9      	ldr	r1, [r7, #8]
 801a748:	68f8      	ldr	r0, [r7, #12]
 801a74a:	4798      	blx	r3

#if LV_USE_GROUP
        bullet->style_p = style_ori; /*Revert the style*/
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a750:	629a      	str	r2, [r3, #40]	; 0x28
 801a752:	e008      	b.n	801a766 <lv_bullet_design+0x96>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 801a754:	79fb      	ldrb	r3, [r7, #7]
 801a756:	2b01      	cmp	r3, #1
 801a758:	d105      	bne.n	801a766 <lv_bullet_design+0x96>
        ancestor_bullet_design(bullet, mask, mode);
 801a75a:	4b05      	ldr	r3, [pc, #20]	; (801a770 <lv_bullet_design+0xa0>)
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	79fa      	ldrb	r2, [r7, #7]
 801a760:	68b9      	ldr	r1, [r7, #8]
 801a762:	68f8      	ldr	r0, [r7, #12]
 801a764:	4798      	blx	r3
    }

    return true;
 801a766:	2301      	movs	r3, #1
}
 801a768:	4618      	mov	r0, r3
 801a76a:	3728      	adds	r7, #40	; 0x28
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}
 801a770:	200177cc 	.word	0x200177cc

0801a774 <lv_cb_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_cb_signal(lv_obj_t * cb, lv_signal_t sign, void * param)
{
 801a774:	b5b0      	push	{r4, r5, r7, lr}
 801a776:	b08a      	sub	sp, #40	; 0x28
 801a778:	af00      	add	r7, sp, #0
 801a77a:	60f8      	str	r0, [r7, #12]
 801a77c:	460b      	mov	r3, r1
 801a77e:	607a      	str	r2, [r7, #4]
 801a780:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(cb, sign, param);
 801a782:	4b4b      	ldr	r3, [pc, #300]	; (801a8b0 <lv_cb_signal+0x13c>)
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	7af9      	ldrb	r1, [r7, #11]
 801a788:	687a      	ldr	r2, [r7, #4]
 801a78a:	68f8      	ldr	r0, [r7, #12]
 801a78c:	4798      	blx	r3
 801a78e:	4603      	mov	r3, r0
 801a790:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if(res != LV_RES_OK) return res;
 801a794:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a798:	2b01      	cmp	r3, #1
 801a79a:	d002      	beq.n	801a7a2 <lv_cb_signal+0x2e>
 801a79c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a7a0:	e081      	b.n	801a8a6 <lv_cb_signal+0x132>

    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 801a7a2:	68f8      	ldr	r0, [r7, #12]
 801a7a4:	f7ef fb39 	bl	8009e1a <lv_obj_get_ext_attr>
 801a7a8:	6238      	str	r0, [r7, #32]

    if(sign == LV_SIGNAL_STYLE_CHG) {
 801a7aa:	7afb      	ldrb	r3, [r7, #11]
 801a7ac:	2b04      	cmp	r3, #4
 801a7ae:	d126      	bne.n	801a7fe <lv_cb_signal+0x8a>
        const lv_style_t * label_style = lv_label_get_style(ext->label, LV_LABEL_STYLE_MAIN);
 801a7b0:	6a3b      	ldr	r3, [r7, #32]
 801a7b2:	6a1b      	ldr	r3, [r3, #32]
 801a7b4:	2100      	movs	r1, #0
 801a7b6:	4618      	mov	r0, r3
 801a7b8:	f7ff fdc9 	bl	801a34e <lv_label_get_style>
 801a7bc:	6178      	str	r0, [r7, #20]
        lv_obj_set_size(ext->bullet, lv_font_get_line_height(label_style->text.font),
 801a7be:	6a3b      	ldr	r3, [r7, #32]
 801a7c0:	69dc      	ldr	r4, [r3, #28]
 801a7c2:	697b      	ldr	r3, [r7, #20]
 801a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f7ff fd84 	bl	801a2d4 <lv_font_get_line_height>
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	b21d      	sxth	r5, r3
                        lv_font_get_line_height(label_style->text.font));
 801a7d0:	697b      	ldr	r3, [r7, #20]
 801a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7d4:	4618      	mov	r0, r3
 801a7d6:	f7ff fd7d 	bl	801a2d4 <lv_font_get_line_height>
 801a7da:	4603      	mov	r3, r0
        lv_obj_set_size(ext->bullet, lv_font_get_line_height(label_style->text.font),
 801a7dc:	b21b      	sxth	r3, r3
 801a7de:	461a      	mov	r2, r3
 801a7e0:	4629      	mov	r1, r5
 801a7e2:	4620      	mov	r0, r4
 801a7e4:	f7ee faa1 	bl	8008d2a <lv_obj_set_size>
        lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 801a7e8:	6a3b      	ldr	r3, [r7, #32]
 801a7ea:	69dc      	ldr	r4, [r3, #28]
 801a7ec:	68f8      	ldr	r0, [r7, #12]
 801a7ee:	f7fd ff3b 	bl	8018668 <lv_btn_get_state>
 801a7f2:	4603      	mov	r3, r0
 801a7f4:	4619      	mov	r1, r3
 801a7f6:	4620      	mov	r0, r4
 801a7f8:	f7fd feca 	bl	8018590 <lv_btn_set_state>
 801a7fc:	e051      	b.n	801a8a2 <lv_cb_signal+0x12e>
    } else if(sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801a7fe:	7afb      	ldrb	r3, [r7, #11]
 801a800:	2b07      	cmp	r3, #7
 801a802:	d005      	beq.n	801a810 <lv_cb_signal+0x9c>
 801a804:	7afb      	ldrb	r3, [r7, #11]
 801a806:	2b0a      	cmp	r3, #10
 801a808:	d002      	beq.n	801a810 <lv_cb_signal+0x9c>
 801a80a:	7afb      	ldrb	r3, [r7, #11]
 801a80c:	2b09      	cmp	r3, #9
 801a80e:	d10a      	bne.n	801a826 <lv_cb_signal+0xb2>
        lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 801a810:	6a3b      	ldr	r3, [r7, #32]
 801a812:	69dc      	ldr	r4, [r3, #28]
 801a814:	68f8      	ldr	r0, [r7, #12]
 801a816:	f7fd ff27 	bl	8018668 <lv_btn_get_state>
 801a81a:	4603      	mov	r3, r0
 801a81c:	4619      	mov	r1, r3
 801a81e:	4620      	mov	r0, r4
 801a820:	f7fd feb6 	bl	8018590 <lv_btn_set_state>
 801a824:	e03d      	b.n	801a8a2 <lv_cb_signal+0x12e>
    } else if(sign == LV_SIGNAL_CONTROL) {
 801a826:	7afb      	ldrb	r3, [r7, #11]
 801a828:	2b11      	cmp	r3, #17
 801a82a:	d119      	bne.n	801a860 <lv_cb_signal+0xec>
        char c = *((char *)param);
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	781b      	ldrb	r3, [r3, #0]
 801a830:	76fb      	strb	r3, [r7, #27]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN || c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801a832:	7efb      	ldrb	r3, [r7, #27]
 801a834:	2b13      	cmp	r3, #19
 801a836:	d008      	beq.n	801a84a <lv_cb_signal+0xd6>
 801a838:	7efb      	ldrb	r3, [r7, #27]
 801a83a:	2b12      	cmp	r3, #18
 801a83c:	d005      	beq.n	801a84a <lv_cb_signal+0xd6>
 801a83e:	7efb      	ldrb	r3, [r7, #27]
 801a840:	2b14      	cmp	r3, #20
 801a842:	d002      	beq.n	801a84a <lv_cb_signal+0xd6>
 801a844:	7efb      	ldrb	r3, [r7, #27]
 801a846:	2b11      	cmp	r3, #17
 801a848:	d12b      	bne.n	801a8a2 <lv_cb_signal+0x12e>
            /*Follow the backgrounds state with the bullet*/
            lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 801a84a:	6a3b      	ldr	r3, [r7, #32]
 801a84c:	69dc      	ldr	r4, [r3, #28]
 801a84e:	68f8      	ldr	r0, [r7, #12]
 801a850:	f7fd ff0a 	bl	8018668 <lv_btn_get_state>
 801a854:	4603      	mov	r3, r0
 801a856:	4619      	mov	r1, r3
 801a858:	4620      	mov	r0, r4
 801a85a:	f7fd fe99 	bl	8018590 <lv_btn_set_state>
 801a85e:	e020      	b.n	801a8a2 <lv_cb_signal+0x12e>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801a860:	7afb      	ldrb	r3, [r7, #11]
 801a862:	2b06      	cmp	r3, #6
 801a864:	d11d      	bne.n	801a8a2 <lv_cb_signal+0x12e>
        lv_obj_type_t * buf = param;
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	61fb      	str	r3, [r7, #28]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801a86a:	2300      	movs	r3, #0
 801a86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a870:	e00b      	b.n	801a88a <lv_cb_signal+0x116>
            if(buf->type[i] == NULL) break;
 801a872:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a876:	69fb      	ldr	r3, [r7, #28]
 801a878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d009      	beq.n	801a894 <lv_cb_signal+0x120>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801a880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a884:	3301      	adds	r3, #1
 801a886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a88a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a88e:	2b06      	cmp	r3, #6
 801a890:	d9ef      	bls.n	801a872 <lv_cb_signal+0xfe>
 801a892:	e000      	b.n	801a896 <lv_cb_signal+0x122>
            if(buf->type[i] == NULL) break;
 801a894:	bf00      	nop
        }
        buf->type[i] = "lv_cb";
 801a896:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a89a:	69fb      	ldr	r3, [r7, #28]
 801a89c:	4905      	ldr	r1, [pc, #20]	; (801a8b4 <lv_cb_signal+0x140>)
 801a89e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801a8a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 801a8a6:	4618      	mov	r0, r3
 801a8a8:	3728      	adds	r7, #40	; 0x28
 801a8aa:	46bd      	mov	sp, r7
 801a8ac:	bdb0      	pop	{r4, r5, r7, pc}
 801a8ae:	bf00      	nop
 801a8b0:	200177d0 	.word	0x200177d0
 801a8b4:	0802c914 	.word	0x0802c914

0801a8b8 <lv_area_copy>:
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b082      	sub	sp, #8
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	6078      	str	r0, [r7, #4]
 801a8c0:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 801a8c2:	2208      	movs	r2, #8
 801a8c4:	6839      	ldr	r1, [r7, #0]
 801a8c6:	6878      	ldr	r0, [r7, #4]
 801a8c8:	f00f fa74 	bl	8029db4 <memcpy>
}
 801a8cc:	bf00      	nop
 801a8ce:	3708      	adds	r7, #8
 801a8d0:	46bd      	mov	sp, r7
 801a8d2:	bd80      	pop	{r7, pc}

0801a8d4 <lv_area_get_width>:
{
 801a8d4:	b480      	push	{r7}
 801a8d6:	b083      	sub	sp, #12
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a8e2:	b29a      	uxth	r2, r3
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8ea:	b29b      	uxth	r3, r3
 801a8ec:	1ad3      	subs	r3, r2, r3
 801a8ee:	b29b      	uxth	r3, r3
 801a8f0:	3301      	adds	r3, #1
 801a8f2:	b29b      	uxth	r3, r3
 801a8f4:	b21b      	sxth	r3, r3
}
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	370c      	adds	r7, #12
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a900:	4770      	bx	lr

0801a902 <lv_area_get_height>:
{
 801a902:	b480      	push	{r7}
 801a904:	b083      	sub	sp, #12
 801a906:	af00      	add	r7, sp, #0
 801a908:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a910:	b29a      	uxth	r2, r3
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a918:	b29b      	uxth	r3, r3
 801a91a:	1ad3      	subs	r3, r2, r3
 801a91c:	b29b      	uxth	r3, r3
 801a91e:	3301      	adds	r3, #1
 801a920:	b29b      	uxth	r3, r3
 801a922:	b21b      	sxth	r3, r3
}
 801a924:	4618      	mov	r0, r3
 801a926:	370c      	adds	r7, #12
 801a928:	46bd      	mov	sp, r7
 801a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a92e:	4770      	bx	lr

0801a930 <lv_cont_set_style>:
 * @param cont pointer to a container object
 * @param type which style should be set (can be only `LV_CONT_STYLE_MAIN`)
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b084      	sub	sp, #16
 801a934:	af00      	add	r7, sp, #0
 801a936:	60f8      	str	r0, [r7, #12]
 801a938:	460b      	mov	r3, r1
 801a93a:	607a      	str	r2, [r7, #4]
 801a93c:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 801a93e:	6879      	ldr	r1, [r7, #4]
 801a940:	68f8      	ldr	r0, [r7, #12]
 801a942:	f7ee ff3a 	bl	80097ba <lv_obj_set_style>
}
 801a946:	bf00      	nop
 801a948:	3710      	adds	r7, #16
 801a94a:	46bd      	mov	sp, r7
 801a94c:	bd80      	pop	{r7, pc}
	...

0801a950 <lv_cont_create>:
 * @param par pointer to an object, it will be the parent of the new container
 * @param copy pointer to a container object, if not NULL then the new object will be copied from it
 * @return pointer to the created container
 */
lv_obj_t * lv_cont_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801a950:	b580      	push	{r7, lr}
 801a952:	b086      	sub	sp, #24
 801a954:	af00      	add	r7, sp, #0
 801a956:	6078      	str	r0, [r7, #4]
 801a958:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("container create started");

    /*Create a basic object*/
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 801a95a:	6839      	ldr	r1, [r7, #0]
 801a95c:	6878      	ldr	r0, [r7, #4]
 801a95e:	f7ed fcf3 	bl	8008348 <lv_obj_create>
 801a962:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_cont);
 801a964:	697b      	ldr	r3, [r7, #20]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d100      	bne.n	801a96c <lv_cont_create+0x1c>
 801a96a:	e7fe      	b.n	801a96a <lv_cont_create+0x1a>
    if(new_cont == NULL) return NULL;
 801a96c:	697b      	ldr	r3, [r7, #20]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d101      	bne.n	801a976 <lv_cont_create+0x26>
 801a972:	2300      	movs	r3, #0
 801a974:	e08b      	b.n	801aa8e <lv_cont_create+0x13e>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 801a976:	4b48      	ldr	r3, [pc, #288]	; (801aa98 <lv_cont_create+0x148>)
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d105      	bne.n	801a98a <lv_cont_create+0x3a>
 801a97e:	6978      	ldr	r0, [r7, #20]
 801a980:	f7ef fa33 	bl	8009dea <lv_obj_get_signal_cb>
 801a984:	4602      	mov	r2, r0
 801a986:	4b44      	ldr	r3, [pc, #272]	; (801aa98 <lv_cont_create+0x148>)
 801a988:	601a      	str	r2, [r3, #0]

    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 801a98a:	2102      	movs	r1, #2
 801a98c:	6978      	ldr	r0, [r7, #20]
 801a98e:	f7ef f877 	bl	8009a80 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 801a992:	6978      	ldr	r0, [r7, #20]
 801a994:	f7ef fa41 	bl	8009e1a <lv_obj_get_ext_attr>
 801a998:	6138      	str	r0, [r7, #16]
    if(ext == NULL) return NULL;
 801a99a:	693b      	ldr	r3, [r7, #16]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d101      	bne.n	801a9a4 <lv_cont_create+0x54>
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	e074      	b.n	801aa8e <lv_cont_create+0x13e>

    lv_mem_assert(ext);
 801a9a4:	693b      	ldr	r3, [r7, #16]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d100      	bne.n	801a9ac <lv_cont_create+0x5c>
 801a9aa:	e7fe      	b.n	801a9aa <lv_cont_create+0x5a>
    ext->fit_left   = LV_FIT_NONE;
 801a9ac:	693a      	ldr	r2, [r7, #16]
 801a9ae:	7813      	ldrb	r3, [r2, #0]
 801a9b0:	f36f 1305 	bfc	r3, #4, #2
 801a9b4:	7013      	strb	r3, [r2, #0]
    ext->fit_right  = LV_FIT_NONE;
 801a9b6:	693a      	ldr	r2, [r7, #16]
 801a9b8:	7813      	ldrb	r3, [r2, #0]
 801a9ba:	f36f 1387 	bfc	r3, #6, #2
 801a9be:	7013      	strb	r3, [r2, #0]
    ext->fit_top    = LV_FIT_NONE;
 801a9c0:	693a      	ldr	r2, [r7, #16]
 801a9c2:	7853      	ldrb	r3, [r2, #1]
 801a9c4:	f36f 0301 	bfc	r3, #0, #2
 801a9c8:	7053      	strb	r3, [r2, #1]
    ext->fit_bottom = LV_FIT_NONE;
 801a9ca:	693a      	ldr	r2, [r7, #16]
 801a9cc:	7853      	ldrb	r3, [r2, #1]
 801a9ce:	f36f 0383 	bfc	r3, #2, #2
 801a9d2:	7053      	strb	r3, [r2, #1]
    ext->layout     = LV_LAYOUT_OFF;
 801a9d4:	693a      	ldr	r2, [r7, #16]
 801a9d6:	7813      	ldrb	r3, [r2, #0]
 801a9d8:	f36f 0303 	bfc	r3, #0, #4
 801a9dc:	7013      	strb	r3, [r2, #0]

    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 801a9de:	492f      	ldr	r1, [pc, #188]	; (801aa9c <lv_cont_create+0x14c>)
 801a9e0:	6978      	ldr	r0, [r7, #20]
 801a9e2:	f7ef f831 	bl	8009a48 <lv_obj_set_signal_cb>

    /*Init the new container*/
    if(copy == NULL) {
 801a9e6:	683b      	ldr	r3, [r7, #0]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d116      	bne.n	801aa1a <lv_cont_create+0xca>
        /*Set the default styles if it's not screen*/
        if(par != NULL) {
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d04c      	beq.n	801aa8c <lv_cont_create+0x13c>
            lv_theme_t * th = lv_theme_get_current();
 801a9f2:	f007 f895 	bl	8021b20 <lv_theme_get_current>
 801a9f6:	60b8      	str	r0, [r7, #8]
            if(th) {
 801a9f8:	68bb      	ldr	r3, [r7, #8]
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d007      	beq.n	801aa0e <lv_cont_create+0xbe>
                lv_cont_set_style(new_cont, LV_CONT_STYLE_MAIN, th->style.cont);
 801a9fe:	68bb      	ldr	r3, [r7, #8]
 801aa00:	68db      	ldr	r3, [r3, #12]
 801aa02:	461a      	mov	r2, r3
 801aa04:	2100      	movs	r1, #0
 801aa06:	6978      	ldr	r0, [r7, #20]
 801aa08:	f7ff ff92 	bl	801a930 <lv_cont_set_style>
 801aa0c:	e03e      	b.n	801aa8c <lv_cont_create+0x13c>
            } else {
                lv_cont_set_style(new_cont, LV_CONT_STYLE_MAIN, &lv_style_pretty);
 801aa0e:	4a24      	ldr	r2, [pc, #144]	; (801aaa0 <lv_cont_create+0x150>)
 801aa10:	2100      	movs	r1, #0
 801aa12:	6978      	ldr	r0, [r7, #20]
 801aa14:	f7ff ff8c 	bl	801a930 <lv_cont_set_style>
 801aa18:	e038      	b.n	801aa8c <lv_cont_create+0x13c>
            }
        }
    }
    /*Copy an existing object*/
    else {
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801aa1a:	6838      	ldr	r0, [r7, #0]
 801aa1c:	f7ef f9fd 	bl	8009e1a <lv_obj_get_ext_attr>
 801aa20:	60f8      	str	r0, [r7, #12]
        ext->fit_left            = copy_ext->fit_left;
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	781b      	ldrb	r3, [r3, #0]
 801aa26:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801aa2a:	b2d9      	uxtb	r1, r3
 801aa2c:	693a      	ldr	r2, [r7, #16]
 801aa2e:	7813      	ldrb	r3, [r2, #0]
 801aa30:	f361 1305 	bfi	r3, r1, #4, #2
 801aa34:	7013      	strb	r3, [r2, #0]
        ext->fit_right           = copy_ext->fit_right;
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	781b      	ldrb	r3, [r3, #0]
 801aa3a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801aa3e:	b2d9      	uxtb	r1, r3
 801aa40:	693a      	ldr	r2, [r7, #16]
 801aa42:	7813      	ldrb	r3, [r2, #0]
 801aa44:	f361 1387 	bfi	r3, r1, #6, #2
 801aa48:	7013      	strb	r3, [r2, #0]
        ext->fit_top             = copy_ext->fit_top;
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	785b      	ldrb	r3, [r3, #1]
 801aa4e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801aa52:	b2d9      	uxtb	r1, r3
 801aa54:	693a      	ldr	r2, [r7, #16]
 801aa56:	7853      	ldrb	r3, [r2, #1]
 801aa58:	f361 0301 	bfi	r3, r1, #0, #2
 801aa5c:	7053      	strb	r3, [r2, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	785b      	ldrb	r3, [r3, #1]
 801aa62:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801aa66:	b2d9      	uxtb	r1, r3
 801aa68:	693a      	ldr	r2, [r7, #16]
 801aa6a:	7853      	ldrb	r3, [r2, #1]
 801aa6c:	f361 0383 	bfi	r3, r1, #2, #2
 801aa70:	7053      	strb	r3, [r2, #1]
        ext->layout              = copy_ext->layout;
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	781b      	ldrb	r3, [r3, #0]
 801aa76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801aa7a:	b2d9      	uxtb	r1, r3
 801aa7c:	693a      	ldr	r2, [r7, #16]
 801aa7e:	7813      	ldrb	r3, [r2, #0]
 801aa80:	f361 0303 	bfi	r3, r1, #0, #4
 801aa84:	7013      	strb	r3, [r2, #0]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_cont);
 801aa86:	6978      	ldr	r0, [r7, #20]
 801aa88:	f7ee fea9 	bl	80097de <lv_obj_refresh_style>
    }

    LV_LOG_INFO("container created");

    return new_cont;
 801aa8c:	697b      	ldr	r3, [r7, #20]
}
 801aa8e:	4618      	mov	r0, r3
 801aa90:	3718      	adds	r7, #24
 801aa92:	46bd      	mov	sp, r7
 801aa94:	bd80      	pop	{r7, pc}
 801aa96:	bf00      	nop
 801aa98:	200177d4 	.word	0x200177d4
 801aa9c:	0801ac29 	.word	0x0801ac29
 801aaa0:	2001b920 	.word	0x2001b920

0801aaa4 <lv_cont_set_layout>:
 * Set a layout on a container
 * @param cont pointer to a container object
 * @param layout a layout from 'lv_cont_layout_t'
 */
void lv_cont_set_layout(lv_obj_t * cont, lv_layout_t layout)
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b084      	sub	sp, #16
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
 801aaac:	460b      	mov	r3, r1
 801aaae:	70fb      	strb	r3, [r7, #3]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801aab0:	6878      	ldr	r0, [r7, #4]
 801aab2:	f7ef f9b2 	bl	8009e1a <lv_obj_get_ext_attr>
 801aab6:	60f8      	str	r0, [r7, #12]
    if(ext->layout == layout) return;
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	781b      	ldrb	r3, [r3, #0]
 801aabc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801aac0:	b2db      	uxtb	r3, r3
 801aac2:	461a      	mov	r2, r3
 801aac4:	78fb      	ldrb	r3, [r7, #3]
 801aac6:	429a      	cmp	r2, r3
 801aac8:	d00f      	beq.n	801aaea <lv_cont_set_layout+0x46>

    ext->layout = layout;
 801aaca:	78fb      	ldrb	r3, [r7, #3]
 801aacc:	f003 030f 	and.w	r3, r3, #15
 801aad0:	b2d9      	uxtb	r1, r3
 801aad2:	68fa      	ldr	r2, [r7, #12]
 801aad4:	7813      	ldrb	r3, [r2, #0]
 801aad6:	f361 0303 	bfi	r3, r1, #0, #4
 801aada:	7013      	strb	r3, [r2, #0]

    /*Send a signal to refresh the layout*/
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	69db      	ldr	r3, [r3, #28]
 801aae0:	2200      	movs	r2, #0
 801aae2:	2101      	movs	r1, #1
 801aae4:	6878      	ldr	r0, [r7, #4]
 801aae6:	4798      	blx	r3
 801aae8:	e000      	b.n	801aaec <lv_cont_set_layout+0x48>
    if(ext->layout == layout) return;
 801aaea:	bf00      	nop
}
 801aaec:	3710      	adds	r7, #16
 801aaee:	46bd      	mov	sp, r7
 801aaf0:	bd80      	pop	{r7, pc}

0801aaf2 <lv_cont_set_fit4>:
 * @param right right fit policy from `lv_fit_t`
 * @param top bottom fit policy from `lv_fit_t`
 * @param bottom bottom fit policy from `lv_fit_t`
 */
void lv_cont_set_fit4(lv_obj_t * cont, lv_fit_t left, lv_fit_t right, lv_fit_t top, lv_fit_t bottom)
{
 801aaf2:	b580      	push	{r7, lr}
 801aaf4:	b084      	sub	sp, #16
 801aaf6:	af00      	add	r7, sp, #0
 801aaf8:	6078      	str	r0, [r7, #4]
 801aafa:	4608      	mov	r0, r1
 801aafc:	4611      	mov	r1, r2
 801aafe:	461a      	mov	r2, r3
 801ab00:	4603      	mov	r3, r0
 801ab02:	70fb      	strb	r3, [r7, #3]
 801ab04:	460b      	mov	r3, r1
 801ab06:	70bb      	strb	r3, [r7, #2]
 801ab08:	4613      	mov	r3, r2
 801ab0a:	707b      	strb	r3, [r7, #1]
    lv_obj_invalidate(cont);
 801ab0c:	6878      	ldr	r0, [r7, #4]
 801ab0e:	f7ed ff58 	bl	80089c2 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801ab12:	6878      	ldr	r0, [r7, #4]
 801ab14:	f7ef f981 	bl	8009e1a <lv_obj_get_ext_attr>
 801ab18:	60f8      	str	r0, [r7, #12]
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	781b      	ldrb	r3, [r3, #0]
 801ab1e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801ab22:	b2db      	uxtb	r3, r3
 801ab24:	461a      	mov	r2, r3
 801ab26:	78fb      	ldrb	r3, [r7, #3]
 801ab28:	429a      	cmp	r2, r3
 801ab2a:	d11a      	bne.n	801ab62 <lv_cont_set_fit4+0x70>
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	781b      	ldrb	r3, [r3, #0]
 801ab30:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801ab34:	b2db      	uxtb	r3, r3
 801ab36:	461a      	mov	r2, r3
 801ab38:	78bb      	ldrb	r3, [r7, #2]
 801ab3a:	429a      	cmp	r2, r3
 801ab3c:	d111      	bne.n	801ab62 <lv_cont_set_fit4+0x70>
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	785b      	ldrb	r3, [r3, #1]
 801ab42:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801ab46:	b2db      	uxtb	r3, r3
 801ab48:	461a      	mov	r2, r3
 801ab4a:	787b      	ldrb	r3, [r7, #1]
 801ab4c:	429a      	cmp	r2, r3
 801ab4e:	d108      	bne.n	801ab62 <lv_cont_set_fit4+0x70>
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	785b      	ldrb	r3, [r3, #1]
 801ab54:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801ab58:	b2db      	uxtb	r3, r3
 801ab5a:	461a      	mov	r2, r3
 801ab5c:	7e3b      	ldrb	r3, [r7, #24]
 801ab5e:	429a      	cmp	r2, r3
 801ab60:	d02a      	beq.n	801abb8 <lv_cont_set_fit4+0xc6>
        return;
    }

    ext->fit_left   = left;
 801ab62:	78fb      	ldrb	r3, [r7, #3]
 801ab64:	f003 0303 	and.w	r3, r3, #3
 801ab68:	b2d9      	uxtb	r1, r3
 801ab6a:	68fa      	ldr	r2, [r7, #12]
 801ab6c:	7813      	ldrb	r3, [r2, #0]
 801ab6e:	f361 1305 	bfi	r3, r1, #4, #2
 801ab72:	7013      	strb	r3, [r2, #0]
    ext->fit_right  = right;
 801ab74:	78bb      	ldrb	r3, [r7, #2]
 801ab76:	f003 0303 	and.w	r3, r3, #3
 801ab7a:	b2d9      	uxtb	r1, r3
 801ab7c:	68fa      	ldr	r2, [r7, #12]
 801ab7e:	7813      	ldrb	r3, [r2, #0]
 801ab80:	f361 1387 	bfi	r3, r1, #6, #2
 801ab84:	7013      	strb	r3, [r2, #0]
    ext->fit_top    = top;
 801ab86:	787b      	ldrb	r3, [r7, #1]
 801ab88:	f003 0303 	and.w	r3, r3, #3
 801ab8c:	b2d9      	uxtb	r1, r3
 801ab8e:	68fa      	ldr	r2, [r7, #12]
 801ab90:	7853      	ldrb	r3, [r2, #1]
 801ab92:	f361 0301 	bfi	r3, r1, #0, #2
 801ab96:	7053      	strb	r3, [r2, #1]
    ext->fit_bottom = bottom;
 801ab98:	7e3b      	ldrb	r3, [r7, #24]
 801ab9a:	f003 0303 	and.w	r3, r3, #3
 801ab9e:	b2d9      	uxtb	r1, r3
 801aba0:	68fa      	ldr	r2, [r7, #12]
 801aba2:	7853      	ldrb	r3, [r2, #1]
 801aba4:	f361 0383 	bfi	r3, r1, #2, #2
 801aba8:	7053      	strb	r3, [r2, #1]

    /*Send a signal to refresh the layout*/
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	69db      	ldr	r3, [r3, #28]
 801abae:	2200      	movs	r2, #0
 801abb0:	2101      	movs	r1, #1
 801abb2:	6878      	ldr	r0, [r7, #4]
 801abb4:	4798      	blx	r3
 801abb6:	e000      	b.n	801abba <lv_cont_set_fit4+0xc8>
        return;
 801abb8:	bf00      	nop
}
 801abba:	3710      	adds	r7, #16
 801abbc:	46bd      	mov	sp, r7
 801abbe:	bd80      	pop	{r7, pc}

0801abc0 <lv_cont_get_layout>:
 * Get the layout of a container
 * @param cont pointer to container object
 * @return the layout from 'lv_cont_layout_t'
 */
lv_layout_t lv_cont_get_layout(const lv_obj_t * cont)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b084      	sub	sp, #16
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801abc8:	6878      	ldr	r0, [r7, #4]
 801abca:	f7ef f926 	bl	8009e1a <lv_obj_get_ext_attr>
 801abce:	60f8      	str	r0, [r7, #12]
    return ext->layout;
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	781b      	ldrb	r3, [r3, #0]
 801abd4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801abd8:	b2db      	uxtb	r3, r3
}
 801abda:	4618      	mov	r0, r3
 801abdc:	3710      	adds	r7, #16
 801abde:	46bd      	mov	sp, r7
 801abe0:	bd80      	pop	{r7, pc}

0801abe2 <lv_cont_get_fit_left>:
 * Get left fit mode of a container
 * @param cont pointer to a container object
 * @return an element of `lv_fit_t`
 */
lv_fit_t lv_cont_get_fit_left(const lv_obj_t * cont)
{
 801abe2:	b580      	push	{r7, lr}
 801abe4:	b084      	sub	sp, #16
 801abe6:	af00      	add	r7, sp, #0
 801abe8:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801abea:	6878      	ldr	r0, [r7, #4]
 801abec:	f7ef f915 	bl	8009e1a <lv_obj_get_ext_attr>
 801abf0:	60f8      	str	r0, [r7, #12]
    return ext->fit_left;
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	781b      	ldrb	r3, [r3, #0]
 801abf6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801abfa:	b2db      	uxtb	r3, r3
}
 801abfc:	4618      	mov	r0, r3
 801abfe:	3710      	adds	r7, #16
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd80      	pop	{r7, pc}

0801ac04 <lv_cont_get_fit_top>:
 * Get top fit mode of a container
 * @param cont pointer to a container object
 * @return an element of `lv_fit_t`
 */
lv_fit_t lv_cont_get_fit_top(const lv_obj_t * cont)
{
 801ac04:	b580      	push	{r7, lr}
 801ac06:	b084      	sub	sp, #16
 801ac08:	af00      	add	r7, sp, #0
 801ac0a:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801ac0c:	6878      	ldr	r0, [r7, #4]
 801ac0e:	f7ef f904 	bl	8009e1a <lv_obj_get_ext_attr>
 801ac12:	60f8      	str	r0, [r7, #12]
    return ext->fit_top;
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	785b      	ldrb	r3, [r3, #1]
 801ac18:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801ac1c:	b2db      	uxtb	r3, r3
}
 801ac1e:	4618      	mov	r0, r3
 801ac20:	3710      	adds	r7, #16
 801ac22:	46bd      	mov	sp, r7
 801ac24:	bd80      	pop	{r7, pc}
	...

0801ac28 <lv_cont_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_cont_signal(lv_obj_t * cont, lv_signal_t sign, void * param)
{
 801ac28:	b590      	push	{r4, r7, lr}
 801ac2a:	b087      	sub	sp, #28
 801ac2c:	af00      	add	r7, sp, #0
 801ac2e:	60f8      	str	r0, [r7, #12]
 801ac30:	460b      	mov	r3, r1
 801ac32:	607a      	str	r2, [r7, #4]
 801ac34:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(cont, sign, param);
 801ac36:	4b34      	ldr	r3, [pc, #208]	; (801ad08 <lv_cont_signal+0xe0>)
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	7af9      	ldrb	r1, [r7, #11]
 801ac3c:	687a      	ldr	r2, [r7, #4]
 801ac3e:	68f8      	ldr	r0, [r7, #12]
 801ac40:	4798      	blx	r3
 801ac42:	4603      	mov	r3, r0
 801ac44:	75bb      	strb	r3, [r7, #22]
    if(res != LV_RES_OK) return res;
 801ac46:	7dbb      	ldrb	r3, [r7, #22]
 801ac48:	2b01      	cmp	r3, #1
 801ac4a:	d001      	beq.n	801ac50 <lv_cont_signal+0x28>
 801ac4c:	7dbb      	ldrb	r3, [r7, #22]
 801ac4e:	e056      	b.n	801acfe <lv_cont_signal+0xd6>

    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 801ac50:	7afb      	ldrb	r3, [r7, #11]
 801ac52:	2b04      	cmp	r3, #4
 801ac54:	d106      	bne.n	801ac64 <lv_cont_signal+0x3c>
        lv_cont_refr_layout(cont);
 801ac56:	68f8      	ldr	r0, [r7, #12]
 801ac58:	f000 f85a 	bl	801ad10 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 801ac5c:	68f8      	ldr	r0, [r7, #12]
 801ac5e:	f000 fc94 	bl	801b58a <lv_cont_refr_autofit>
 801ac62:	e04b      	b.n	801acfc <lv_cont_signal+0xd4>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 801ac64:	7afb      	ldrb	r3, [r7, #11]
 801ac66:	2b01      	cmp	r3, #1
 801ac68:	d106      	bne.n	801ac78 <lv_cont_signal+0x50>
        lv_cont_refr_layout(cont);
 801ac6a:	68f8      	ldr	r0, [r7, #12]
 801ac6c:	f000 f850 	bl	801ad10 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 801ac70:	68f8      	ldr	r0, [r7, #12]
 801ac72:	f000 fc8a 	bl	801b58a <lv_cont_refr_autofit>
 801ac76:	e041      	b.n	801acfc <lv_cont_signal+0xd4>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801ac78:	7afb      	ldrb	r3, [r7, #11]
 801ac7a:	2b02      	cmp	r3, #2
 801ac7c:	d11c      	bne.n	801acb8 <lv_cont_signal+0x90>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 801ac7e:	68f8      	ldr	r0, [r7, #12]
 801ac80:	f7ee ffe0 	bl	8009c44 <lv_obj_get_width>
 801ac84:	4603      	mov	r3, r0
 801ac86:	461c      	mov	r4, r3
 801ac88:	6878      	ldr	r0, [r7, #4]
 801ac8a:	f7ff fe23 	bl	801a8d4 <lv_area_get_width>
 801ac8e:	4603      	mov	r3, r0
 801ac90:	429c      	cmp	r4, r3
 801ac92:	d10a      	bne.n	801acaa <lv_cont_signal+0x82>
 801ac94:	68f8      	ldr	r0, [r7, #12]
 801ac96:	f7ee ffe3 	bl	8009c60 <lv_obj_get_height>
 801ac9a:	4603      	mov	r3, r0
 801ac9c:	461c      	mov	r4, r3
 801ac9e:	6878      	ldr	r0, [r7, #4]
 801aca0:	f7ff fe2f 	bl	801a902 <lv_area_get_height>
 801aca4:	4603      	mov	r3, r0
 801aca6:	429c      	cmp	r4, r3
 801aca8:	d028      	beq.n	801acfc <lv_cont_signal+0xd4>
            lv_cont_refr_layout(cont);
 801acaa:	68f8      	ldr	r0, [r7, #12]
 801acac:	f000 f830 	bl	801ad10 <lv_cont_refr_layout>
            lv_cont_refr_autofit(cont);
 801acb0:	68f8      	ldr	r0, [r7, #12]
 801acb2:	f000 fc6a 	bl	801b58a <lv_cont_refr_autofit>
 801acb6:	e021      	b.n	801acfc <lv_cont_signal+0xd4>
        }
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 801acb8:	7afb      	ldrb	r3, [r7, #11]
 801acba:	2b03      	cmp	r3, #3
 801acbc:	d103      	bne.n	801acc6 <lv_cont_signal+0x9e>
        /*FLOOD and FILL fit needs to be refreshed if the parent size has changed*/
        lv_cont_refr_autofit(cont);
 801acbe:	68f8      	ldr	r0, [r7, #12]
 801acc0:	f000 fc63 	bl	801b58a <lv_cont_refr_autofit>
 801acc4:	e01a      	b.n	801acfc <lv_cont_signal+0xd4>

    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801acc6:	7afb      	ldrb	r3, [r7, #11]
 801acc8:	2b06      	cmp	r3, #6
 801acca:	d117      	bne.n	801acfc <lv_cont_signal+0xd4>
        lv_obj_type_t * buf = param;
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	613b      	str	r3, [r7, #16]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801acd0:	2300      	movs	r3, #0
 801acd2:	75fb      	strb	r3, [r7, #23]
 801acd4:	e008      	b.n	801ace8 <lv_cont_signal+0xc0>
            if(buf->type[i] == NULL) break;
 801acd6:	7dfa      	ldrb	r2, [r7, #23]
 801acd8:	693b      	ldr	r3, [r7, #16]
 801acda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d006      	beq.n	801acf0 <lv_cont_signal+0xc8>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ace2:	7dfb      	ldrb	r3, [r7, #23]
 801ace4:	3301      	adds	r3, #1
 801ace6:	75fb      	strb	r3, [r7, #23]
 801ace8:	7dfb      	ldrb	r3, [r7, #23]
 801acea:	2b06      	cmp	r3, #6
 801acec:	d9f3      	bls.n	801acd6 <lv_cont_signal+0xae>
 801acee:	e000      	b.n	801acf2 <lv_cont_signal+0xca>
            if(buf->type[i] == NULL) break;
 801acf0:	bf00      	nop
        }
        buf->type[i] = "lv_cont";
 801acf2:	7dfa      	ldrb	r2, [r7, #23]
 801acf4:	693b      	ldr	r3, [r7, #16]
 801acf6:	4905      	ldr	r1, [pc, #20]	; (801ad0c <lv_cont_signal+0xe4>)
 801acf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801acfc:	7dbb      	ldrb	r3, [r7, #22]
}
 801acfe:	4618      	mov	r0, r3
 801ad00:	371c      	adds	r7, #28
 801ad02:	46bd      	mov	sp, r7
 801ad04:	bd90      	pop	{r4, r7, pc}
 801ad06:	bf00      	nop
 801ad08:	200177d4 	.word	0x200177d4
 801ad0c:	0802c91c 	.word	0x0802c91c

0801ad10 <lv_cont_refr_layout>:
/**
 * Refresh the layout of a container
 * @param cont pointer to an object which layout should be refreshed
 */
static void lv_cont_refr_layout(lv_obj_t * cont)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b084      	sub	sp, #16
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 801ad18:	6878      	ldr	r0, [r7, #4]
 801ad1a:	f7ff ff51 	bl	801abc0 <lv_cont_get_layout>
 801ad1e:	4603      	mov	r3, r0
 801ad20:	73fb      	strb	r3, [r7, #15]

    /*'cont' has to be at least 1 child*/
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801ad22:	2100      	movs	r1, #0
 801ad24:	6878      	ldr	r0, [r7, #4]
 801ad26:	f7ee ff2f 	bl	8009b88 <lv_obj_get_child>
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d031      	beq.n	801ad94 <lv_cont_refr_layout+0x84>

    if(type == LV_LAYOUT_OFF) return;
 801ad30:	7bfb      	ldrb	r3, [r7, #15]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d030      	beq.n	801ad98 <lv_cont_refr_layout+0x88>

    if(type == LV_LAYOUT_CENTER) {
 801ad36:	7bfb      	ldrb	r3, [r7, #15]
 801ad38:	2b01      	cmp	r3, #1
 801ad3a:	d103      	bne.n	801ad44 <lv_cont_refr_layout+0x34>
        lv_cont_layout_center(cont);
 801ad3c:	6878      	ldr	r0, [r7, #4]
 801ad3e:	f000 f91b 	bl	801af78 <lv_cont_layout_center>
 801ad42:	e02a      	b.n	801ad9a <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 801ad44:	7bfb      	ldrb	r3, [r7, #15]
 801ad46:	2b02      	cmp	r3, #2
 801ad48:	d005      	beq.n	801ad56 <lv_cont_refr_layout+0x46>
 801ad4a:	7bfb      	ldrb	r3, [r7, #15]
 801ad4c:	2b03      	cmp	r3, #3
 801ad4e:	d002      	beq.n	801ad56 <lv_cont_refr_layout+0x46>
 801ad50:	7bfb      	ldrb	r3, [r7, #15]
 801ad52:	2b04      	cmp	r3, #4
 801ad54:	d103      	bne.n	801ad5e <lv_cont_refr_layout+0x4e>
        lv_cont_layout_col(cont);
 801ad56:	6878      	ldr	r0, [r7, #4]
 801ad58:	f000 f822 	bl	801ada0 <lv_cont_layout_col>
 801ad5c:	e01d      	b.n	801ad9a <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 801ad5e:	7bfb      	ldrb	r3, [r7, #15]
 801ad60:	2b05      	cmp	r3, #5
 801ad62:	d005      	beq.n	801ad70 <lv_cont_refr_layout+0x60>
 801ad64:	7bfb      	ldrb	r3, [r7, #15]
 801ad66:	2b06      	cmp	r3, #6
 801ad68:	d002      	beq.n	801ad70 <lv_cont_refr_layout+0x60>
 801ad6a:	7bfb      	ldrb	r3, [r7, #15]
 801ad6c:	2b07      	cmp	r3, #7
 801ad6e:	d103      	bne.n	801ad78 <lv_cont_refr_layout+0x68>
        lv_cont_layout_row(cont);
 801ad70:	6878      	ldr	r0, [r7, #4]
 801ad72:	f000 f88b 	bl	801ae8c <lv_cont_layout_row>
 801ad76:	e010      	b.n	801ad9a <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_PRETTY) {
 801ad78:	7bfb      	ldrb	r3, [r7, #15]
 801ad7a:	2b08      	cmp	r3, #8
 801ad7c:	d103      	bne.n	801ad86 <lv_cont_refr_layout+0x76>
        lv_cont_layout_pretty(cont);
 801ad7e:	6878      	ldr	r0, [r7, #4]
 801ad80:	f000 f99c 	bl	801b0bc <lv_cont_layout_pretty>
 801ad84:	e009      	b.n	801ad9a <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_GRID) {
 801ad86:	7bfb      	ldrb	r3, [r7, #15]
 801ad88:	2b09      	cmp	r3, #9
 801ad8a:	d106      	bne.n	801ad9a <lv_cont_refr_layout+0x8a>
        lv_cont_layout_grid(cont);
 801ad8c:	6878      	ldr	r0, [r7, #4]
 801ad8e:	f000 fb35 	bl	801b3fc <lv_cont_layout_grid>
 801ad92:	e002      	b.n	801ad9a <lv_cont_refr_layout+0x8a>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801ad94:	bf00      	nop
 801ad96:	e000      	b.n	801ad9a <lv_cont_refr_layout+0x8a>
    if(type == LV_LAYOUT_OFF) return;
 801ad98:	bf00      	nop
    }
}
 801ad9a:	3710      	adds	r7, #16
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	bd80      	pop	{r7, pc}

0801ada0 <lv_cont_layout_col>:
/**
 * Handle column type layouts
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_col(lv_obj_t * cont)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b088      	sub	sp, #32
 801ada4:	af02      	add	r7, sp, #8
 801ada6:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 801ada8:	6878      	ldr	r0, [r7, #4]
 801adaa:	f7ff ff09 	bl	801abc0 <lv_cont_get_layout>
 801adae:	4603      	mov	r3, r0
 801adb0:	737b      	strb	r3, [r7, #13]
    lv_obj_t * child;

    /*Adjust margin and get the alignment type*/
    lv_align_t align;
    const lv_style_t * style = lv_obj_get_style(cont);
 801adb2:	6878      	ldr	r0, [r7, #4]
 801adb4:	f7ee ff76 	bl	8009ca4 <lv_obj_get_style>
 801adb8:	60b8      	str	r0, [r7, #8]
    lv_coord_t hpad_corr;

    switch(type) {
 801adba:	7b7b      	ldrb	r3, [r7, #13]
 801adbc:	2b03      	cmp	r3, #3
 801adbe:	d009      	beq.n	801add4 <lv_cont_layout_col+0x34>
 801adc0:	2b04      	cmp	r3, #4
 801adc2:	d00c      	beq.n	801adde <lv_cont_layout_col+0x3e>
 801adc4:	2b02      	cmp	r3, #2
 801adc6:	d114      	bne.n	801adf2 <lv_cont_layout_col+0x52>
        case LV_LAYOUT_COL_L:
            hpad_corr = style->body.padding.left;
 801adc8:	68bb      	ldr	r3, [r7, #8]
 801adca:	8b5b      	ldrh	r3, [r3, #26]
 801adcc:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801adce:	2301      	movs	r3, #1
 801add0:	74fb      	strb	r3, [r7, #19]
            break;
 801add2:	e013      	b.n	801adfc <lv_cont_layout_col+0x5c>
        case LV_LAYOUT_COL_M:
            hpad_corr = 0;
 801add4:	2300      	movs	r3, #0
 801add6:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_MID;
 801add8:	2302      	movs	r3, #2
 801adda:	74fb      	strb	r3, [r7, #19]
            break;
 801addc:	e00e      	b.n	801adfc <lv_cont_layout_col+0x5c>
        case LV_LAYOUT_COL_R:
            hpad_corr = -style->body.padding.right;
 801adde:	68bb      	ldr	r3, [r7, #8]
 801ade0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801ade4:	b29b      	uxth	r3, r3
 801ade6:	425b      	negs	r3, r3
 801ade8:	b29b      	uxth	r3, r3
 801adea:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_RIGHT;
 801adec:	2303      	movs	r3, #3
 801adee:	74fb      	strb	r3, [r7, #19]
            break;
 801adf0:	e004      	b.n	801adfc <lv_cont_layout_col+0x5c>
        default:
            hpad_corr = 0;
 801adf2:	2300      	movs	r3, #0
 801adf4:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801adf6:	2301      	movs	r3, #1
 801adf8:	74fb      	strb	r3, [r7, #19]
            break;
 801adfa:	bf00      	nop
    }

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801adfc:	2101      	movs	r1, #1
 801adfe:	6878      	ldr	r0, [r7, #4]
 801ae00:	f7ee fd56 	bl	80098b0 <lv_obj_set_protect>
    /* Align the children */
    lv_coord_t last_cord = style->body.padding.top;
 801ae04:	68bb      	ldr	r3, [r7, #8]
 801ae06:	8adb      	ldrh	r3, [r3, #22]
 801ae08:	81fb      	strh	r3, [r7, #14]
    LV_LL_READ_BACK(cont->child_ll, child)
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	3304      	adds	r3, #4
 801ae0e:	4618      	mov	r0, r3
 801ae10:	f7fb fa37 	bl	8016282 <lv_ll_get_tail>
 801ae14:	6178      	str	r0, [r7, #20]
 801ae16:	e02e      	b.n	801ae76 <lv_cont_layout_col+0xd6>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801ae18:	6978      	ldr	r0, [r7, #20]
 801ae1a:	f7ee ff9b 	bl	8009d54 <lv_obj_get_hidden>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d120      	bne.n	801ae66 <lv_cont_layout_col+0xc6>
 801ae24:	2104      	movs	r1, #4
 801ae26:	6978      	ldr	r0, [r7, #20]
 801ae28:	f7ee ffc8 	bl	8009dbc <lv_obj_is_protected>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d119      	bne.n	801ae66 <lv_cont_layout_col+0xc6>

        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 801ae32:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 801ae36:	7cfa      	ldrb	r2, [r7, #19]
 801ae38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ae3c:	9300      	str	r3, [sp, #0]
 801ae3e:	460b      	mov	r3, r1
 801ae40:	6879      	ldr	r1, [r7, #4]
 801ae42:	6978      	ldr	r0, [r7, #20]
 801ae44:	f7ee f814 	bl	8008e70 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 801ae48:	6978      	ldr	r0, [r7, #20]
 801ae4a:	f7ee ff09 	bl	8009c60 <lv_obj_get_height>
 801ae4e:	4603      	mov	r3, r0
 801ae50:	461a      	mov	r2, r3
 801ae52:	68bb      	ldr	r3, [r7, #8]
 801ae54:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801ae58:	4413      	add	r3, r2
 801ae5a:	b29a      	uxth	r2, r3
 801ae5c:	89fb      	ldrh	r3, [r7, #14]
 801ae5e:	4413      	add	r3, r2
 801ae60:	b29b      	uxth	r3, r3
 801ae62:	81fb      	strh	r3, [r7, #14]
 801ae64:	e000      	b.n	801ae68 <lv_cont_layout_col+0xc8>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801ae66:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	3304      	adds	r3, #4
 801ae6c:	6979      	ldr	r1, [r7, #20]
 801ae6e:	4618      	mov	r0, r3
 801ae70:	f7fb fa34 	bl	80162dc <lv_ll_get_prev>
 801ae74:	6178      	str	r0, [r7, #20]
 801ae76:	697b      	ldr	r3, [r7, #20]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	d1cd      	bne.n	801ae18 <lv_cont_layout_col+0x78>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801ae7c:	2101      	movs	r1, #1
 801ae7e:	6878      	ldr	r0, [r7, #4]
 801ae80:	f7ee fd2b 	bl	80098da <lv_obj_clear_protect>
}
 801ae84:	bf00      	nop
 801ae86:	3718      	adds	r7, #24
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	bd80      	pop	{r7, pc}

0801ae8c <lv_cont_layout_row>:
/**
 * Handle row type layouts
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_row(lv_obj_t * cont)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b088      	sub	sp, #32
 801ae90:	af02      	add	r7, sp, #8
 801ae92:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f7ff fe93 	bl	801abc0 <lv_cont_get_layout>
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	737b      	strb	r3, [r7, #13]
    lv_obj_t * child;

    /*Adjust margin and get the alignment type*/
    lv_align_t align;
    const lv_style_t * style = lv_obj_get_style(cont);
 801ae9e:	6878      	ldr	r0, [r7, #4]
 801aea0:	f7ee ff00 	bl	8009ca4 <lv_obj_get_style>
 801aea4:	60b8      	str	r0, [r7, #8]
    lv_coord_t vpad_corr;

    switch(type) {
 801aea6:	7b7b      	ldrb	r3, [r7, #13]
 801aea8:	2b06      	cmp	r3, #6
 801aeaa:	d009      	beq.n	801aec0 <lv_cont_layout_row+0x34>
 801aeac:	2b07      	cmp	r3, #7
 801aeae:	d00c      	beq.n	801aeca <lv_cont_layout_row+0x3e>
 801aeb0:	2b05      	cmp	r3, #5
 801aeb2:	d114      	bne.n	801aede <lv_cont_layout_row+0x52>
        case LV_LAYOUT_ROW_T:
            vpad_corr = style->body.padding.top;
 801aeb4:	68bb      	ldr	r3, [r7, #8]
 801aeb6:	8adb      	ldrh	r3, [r3, #22]
 801aeb8:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801aeba:	2301      	movs	r3, #1
 801aebc:	74fb      	strb	r3, [r7, #19]
            break;
 801aebe:	e013      	b.n	801aee8 <lv_cont_layout_row+0x5c>
        case LV_LAYOUT_ROW_M:
            vpad_corr = 0;
 801aec0:	2300      	movs	r3, #0
 801aec2:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_LEFT_MID;
 801aec4:	2307      	movs	r3, #7
 801aec6:	74fb      	strb	r3, [r7, #19]
            break;
 801aec8:	e00e      	b.n	801aee8 <lv_cont_layout_row+0x5c>
        case LV_LAYOUT_ROW_B:
            vpad_corr = -style->body.padding.bottom;
 801aeca:	68bb      	ldr	r3, [r7, #8]
 801aecc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801aed0:	b29b      	uxth	r3, r3
 801aed2:	425b      	negs	r3, r3
 801aed4:	b29b      	uxth	r3, r3
 801aed6:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 801aed8:	2304      	movs	r3, #4
 801aeda:	74fb      	strb	r3, [r7, #19]
            break;
 801aedc:	e004      	b.n	801aee8 <lv_cont_layout_row+0x5c>
        default:
            vpad_corr = 0;
 801aede:	2300      	movs	r3, #0
 801aee0:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801aee2:	2301      	movs	r3, #1
 801aee4:	74fb      	strb	r3, [r7, #19]
            break;
 801aee6:	bf00      	nop
    }

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801aee8:	2101      	movs	r1, #1
 801aeea:	6878      	ldr	r0, [r7, #4]
 801aeec:	f7ee fce0 	bl	80098b0 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t last_cord = style->body.padding.left;
 801aef0:	68bb      	ldr	r3, [r7, #8]
 801aef2:	8b5b      	ldrh	r3, [r3, #26]
 801aef4:	81fb      	strh	r3, [r7, #14]
    LV_LL_READ_BACK(cont->child_ll, child)
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	3304      	adds	r3, #4
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7fb f9c1 	bl	8016282 <lv_ll_get_tail>
 801af00:	6178      	str	r0, [r7, #20]
 801af02:	e02e      	b.n	801af62 <lv_cont_layout_row+0xd6>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801af04:	6978      	ldr	r0, [r7, #20]
 801af06:	f7ee ff25 	bl	8009d54 <lv_obj_get_hidden>
 801af0a:	4603      	mov	r3, r0
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d120      	bne.n	801af52 <lv_cont_layout_row+0xc6>
 801af10:	2104      	movs	r1, #4
 801af12:	6978      	ldr	r0, [r7, #20]
 801af14:	f7ee ff52 	bl	8009dbc <lv_obj_is_protected>
 801af18:	4603      	mov	r3, r0
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d119      	bne.n	801af52 <lv_cont_layout_row+0xc6>

        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 801af1e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801af22:	7cfa      	ldrb	r2, [r7, #19]
 801af24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801af28:	9300      	str	r3, [sp, #0]
 801af2a:	460b      	mov	r3, r1
 801af2c:	6879      	ldr	r1, [r7, #4]
 801af2e:	6978      	ldr	r0, [r7, #20]
 801af30:	f7ed ff9e 	bl	8008e70 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 801af34:	6978      	ldr	r0, [r7, #20]
 801af36:	f7ee fe85 	bl	8009c44 <lv_obj_get_width>
 801af3a:	4603      	mov	r3, r0
 801af3c:	461a      	mov	r2, r3
 801af3e:	68bb      	ldr	r3, [r7, #8]
 801af40:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801af44:	4413      	add	r3, r2
 801af46:	b29a      	uxth	r2, r3
 801af48:	89fb      	ldrh	r3, [r7, #14]
 801af4a:	4413      	add	r3, r2
 801af4c:	b29b      	uxth	r3, r3
 801af4e:	81fb      	strh	r3, [r7, #14]
 801af50:	e000      	b.n	801af54 <lv_cont_layout_row+0xc8>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801af52:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	3304      	adds	r3, #4
 801af58:	6979      	ldr	r1, [r7, #20]
 801af5a:	4618      	mov	r0, r3
 801af5c:	f7fb f9be 	bl	80162dc <lv_ll_get_prev>
 801af60:	6178      	str	r0, [r7, #20]
 801af62:	697b      	ldr	r3, [r7, #20]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d1cd      	bne.n	801af04 <lv_cont_layout_row+0x78>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801af68:	2101      	movs	r1, #1
 801af6a:	6878      	ldr	r0, [r7, #4]
 801af6c:	f7ee fcb5 	bl	80098da <lv_obj_clear_protect>
}
 801af70:	bf00      	nop
 801af72:	3718      	adds	r7, #24
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}

0801af78 <lv_cont_layout_center>:
/**
 * Handle the center layout
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_center(lv_obj_t * cont)
{
 801af78:	b580      	push	{r7, lr}
 801af7a:	b088      	sub	sp, #32
 801af7c:	af02      	add	r7, sp, #8
 801af7e:	6078      	str	r0, [r7, #4]
    lv_obj_t * child;
    const lv_style_t * style = lv_obj_get_style(cont);
 801af80:	6878      	ldr	r0, [r7, #4]
 801af82:	f7ee fe8f 	bl	8009ca4 <lv_obj_get_style>
 801af86:	60b8      	str	r0, [r7, #8]
    uint32_t obj_num         = 0;
 801af88:	2300      	movs	r3, #0
 801af8a:	613b      	str	r3, [r7, #16]
    lv_coord_t h_tot         = 0;
 801af8c:	2300      	movs	r3, #0
 801af8e:	81fb      	strh	r3, [r7, #14]

    LV_LL_READ(cont->child_ll, child)
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	3304      	adds	r3, #4
 801af94:	4618      	mov	r0, r3
 801af96:	f7fb f961 	bl	801625c <lv_ll_get_head>
 801af9a:	6178      	str	r0, [r7, #20]
 801af9c:	e026      	b.n	801afec <lv_cont_layout_center+0x74>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801af9e:	6978      	ldr	r0, [r7, #20]
 801afa0:	f7ee fed8 	bl	8009d54 <lv_obj_get_hidden>
 801afa4:	4603      	mov	r3, r0
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d118      	bne.n	801afdc <lv_cont_layout_center+0x64>
 801afaa:	2104      	movs	r1, #4
 801afac:	6978      	ldr	r0, [r7, #20]
 801afae:	f7ee ff05 	bl	8009dbc <lv_obj_is_protected>
 801afb2:	4603      	mov	r3, r0
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d111      	bne.n	801afdc <lv_cont_layout_center+0x64>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 801afb8:	6978      	ldr	r0, [r7, #20]
 801afba:	f7ee fe51 	bl	8009c60 <lv_obj_get_height>
 801afbe:	4603      	mov	r3, r0
 801afc0:	461a      	mov	r2, r3
 801afc2:	68bb      	ldr	r3, [r7, #8]
 801afc4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801afc8:	4413      	add	r3, r2
 801afca:	b29a      	uxth	r2, r3
 801afcc:	89fb      	ldrh	r3, [r7, #14]
 801afce:	4413      	add	r3, r2
 801afd0:	b29b      	uxth	r3, r3
 801afd2:	81fb      	strh	r3, [r7, #14]
        obj_num++;
 801afd4:	693b      	ldr	r3, [r7, #16]
 801afd6:	3301      	adds	r3, #1
 801afd8:	613b      	str	r3, [r7, #16]
 801afda:	e000      	b.n	801afde <lv_cont_layout_center+0x66>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801afdc:	bf00      	nop
    LV_LL_READ(cont->child_ll, child)
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	3304      	adds	r3, #4
 801afe2:	6979      	ldr	r1, [r7, #20]
 801afe4:	4618      	mov	r0, r3
 801afe6:	f7fb f95f 	bl	80162a8 <lv_ll_get_next>
 801afea:	6178      	str	r0, [r7, #20]
 801afec:	697b      	ldr	r3, [r7, #20]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d1d5      	bne.n	801af9e <lv_cont_layout_center+0x26>
    }

    if(obj_num == 0) return;
 801aff2:	693b      	ldr	r3, [r7, #16]
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d05c      	beq.n	801b0b2 <lv_cont_layout_center+0x13a>

    h_tot -= style->body.padding.inner;
 801aff8:	89fa      	ldrh	r2, [r7, #14]
 801affa:	68bb      	ldr	r3, [r7, #8]
 801affc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801b000:	b29b      	uxth	r3, r3
 801b002:	1ad3      	subs	r3, r2, r3
 801b004:	b29b      	uxth	r3, r3
 801b006:	81fb      	strh	r3, [r7, #14]

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801b008:	2101      	movs	r1, #1
 801b00a:	6878      	ldr	r0, [r7, #4]
 801b00c:	f7ee fc50 	bl	80098b0 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t last_cord = -(h_tot / 2);
 801b010:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b014:	0fda      	lsrs	r2, r3, #31
 801b016:	4413      	add	r3, r2
 801b018:	105b      	asrs	r3, r3, #1
 801b01a:	b21b      	sxth	r3, r3
 801b01c:	b29b      	uxth	r3, r3
 801b01e:	425b      	negs	r3, r3
 801b020:	b29b      	uxth	r3, r3
 801b022:	81bb      	strh	r3, [r7, #12]
    LV_LL_READ_BACK(cont->child_ll, child)
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	3304      	adds	r3, #4
 801b028:	4618      	mov	r0, r3
 801b02a:	f7fb f92a 	bl	8016282 <lv_ll_get_tail>
 801b02e:	6178      	str	r0, [r7, #20]
 801b030:	e037      	b.n	801b0a2 <lv_cont_layout_center+0x12a>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b032:	6978      	ldr	r0, [r7, #20]
 801b034:	f7ee fe8e 	bl	8009d54 <lv_obj_get_hidden>
 801b038:	4603      	mov	r3, r0
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d129      	bne.n	801b092 <lv_cont_layout_center+0x11a>
 801b03e:	2104      	movs	r1, #4
 801b040:	6978      	ldr	r0, [r7, #20]
 801b042:	f7ee febb 	bl	8009dbc <lv_obj_is_protected>
 801b046:	4603      	mov	r3, r0
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d122      	bne.n	801b092 <lv_cont_layout_center+0x11a>

        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 801b04c:	6978      	ldr	r0, [r7, #20]
 801b04e:	f7ee fe07 	bl	8009c60 <lv_obj_get_height>
 801b052:	4603      	mov	r3, r0
 801b054:	0fda      	lsrs	r2, r3, #31
 801b056:	4413      	add	r3, r2
 801b058:	105b      	asrs	r3, r3, #1
 801b05a:	b21b      	sxth	r3, r3
 801b05c:	b29a      	uxth	r2, r3
 801b05e:	89bb      	ldrh	r3, [r7, #12]
 801b060:	4413      	add	r3, r2
 801b062:	b29b      	uxth	r3, r3
 801b064:	b21b      	sxth	r3, r3
 801b066:	9300      	str	r3, [sp, #0]
 801b068:	2300      	movs	r3, #0
 801b06a:	2200      	movs	r2, #0
 801b06c:	6879      	ldr	r1, [r7, #4]
 801b06e:	6978      	ldr	r0, [r7, #20]
 801b070:	f7ed fefe 	bl	8008e70 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 801b074:	6978      	ldr	r0, [r7, #20]
 801b076:	f7ee fdf3 	bl	8009c60 <lv_obj_get_height>
 801b07a:	4603      	mov	r3, r0
 801b07c:	461a      	mov	r2, r3
 801b07e:	68bb      	ldr	r3, [r7, #8]
 801b080:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801b084:	4413      	add	r3, r2
 801b086:	b29a      	uxth	r2, r3
 801b088:	89bb      	ldrh	r3, [r7, #12]
 801b08a:	4413      	add	r3, r2
 801b08c:	b29b      	uxth	r3, r3
 801b08e:	81bb      	strh	r3, [r7, #12]
 801b090:	e000      	b.n	801b094 <lv_cont_layout_center+0x11c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b092:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	3304      	adds	r3, #4
 801b098:	6979      	ldr	r1, [r7, #20]
 801b09a:	4618      	mov	r0, r3
 801b09c:	f7fb f91e 	bl	80162dc <lv_ll_get_prev>
 801b0a0:	6178      	str	r0, [r7, #20]
 801b0a2:	697b      	ldr	r3, [r7, #20]
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d1c4      	bne.n	801b032 <lv_cont_layout_center+0xba>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801b0a8:	2101      	movs	r1, #1
 801b0aa:	6878      	ldr	r0, [r7, #4]
 801b0ac:	f7ee fc15 	bl	80098da <lv_obj_clear_protect>
 801b0b0:	e000      	b.n	801b0b4 <lv_cont_layout_center+0x13c>
    if(obj_num == 0) return;
 801b0b2:	bf00      	nop
}
 801b0b4:	3718      	adds	r7, #24
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	bd80      	pop	{r7, pc}
	...

0801b0bc <lv_cont_layout_pretty>:
 * Handle the pretty layout. Put as many object as possible in row
 * then begin a new row
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_pretty(lv_obj_t * cont)
{
 801b0bc:	b5b0      	push	{r4, r5, r7, lr}
 801b0be:	b090      	sub	sp, #64	; 0x40
 801b0c0:	af02      	add	r7, sp, #8
 801b0c2:	6078      	str	r0, [r7, #4]
    lv_obj_t * child_rs;  /* Row starter child */
    lv_obj_t * child_rc;  /* Row closer child */
    lv_obj_t * child_tmp; /* Temporary child */
    const lv_style_t * style = lv_obj_get_style(cont);
 801b0c4:	6878      	ldr	r0, [r7, #4]
 801b0c6:	f7ee fded 	bl	8009ca4 <lv_obj_get_style>
 801b0ca:	61b8      	str	r0, [r7, #24]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 801b0cc:	6878      	ldr	r0, [r7, #4]
 801b0ce:	f7ee fdb9 	bl	8009c44 <lv_obj_get_width>
 801b0d2:	4603      	mov	r3, r0
 801b0d4:	82fb      	strh	r3, [r7, #22]
    lv_coord_t act_y         = style->body.padding.top;
 801b0d6:	69bb      	ldr	r3, [r7, #24]
 801b0d8:	8adb      	ldrh	r3, [r3, #22]
 801b0da:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/

    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	3304      	adds	r3, #4
 801b0e0:	4618      	mov	r0, r3
 801b0e2:	f7fb f8ce 	bl	8016282 <lv_ll_get_tail>
 801b0e6:	6378      	str	r0, [r7, #52]	; 0x34
    if(child_rs == NULL) return;                /*Return if no child*/
 801b0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	f000 8180 	beq.w	801b3f0 <lv_cont_layout_pretty+0x334>

    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801b0f0:	2101      	movs	r1, #1
 801b0f2:	6878      	ldr	r0, [r7, #4]
 801b0f4:	f7ee fbdc 	bl	80098b0 <lv_obj_set_protect>

    child_rc = child_rs; /*Initially the the row starter and closer is the same*/
 801b0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b0fa:	633b      	str	r3, [r7, #48]	; 0x30
    while(child_rs != NULL) {
 801b0fc:	e16d      	b.n	801b3da <lv_cont_layout_pretty+0x31e>
        lv_coord_t h_row = 0;
 801b0fe:	2300      	movs	r3, #0
 801b100:	853b      	strh	r3, [r7, #40]	; 0x28
        lv_coord_t w_row =
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 801b102:	69bb      	ldr	r3, [r7, #24]
 801b104:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801b108:	b29a      	uxth	r2, r3
 801b10a:	69bb      	ldr	r3, [r7, #24]
 801b10c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801b110:	b29b      	uxth	r3, r3
 801b112:	4413      	add	r3, r2
 801b114:	b29b      	uxth	r3, r3
        lv_coord_t w_row =
 801b116:	84fb      	strh	r3, [r7, #38]	; 0x26
        uint32_t obj_num = 0;
 801b118:	2300      	movs	r3, #0
 801b11a:	623b      	str	r3, [r7, #32]

        /*Find the row closer object and collect some data*/
        do {
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 801b11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b11e:	f7ee fe19 	bl	8009d54 <lv_obj_get_hidden>
 801b122:	4603      	mov	r3, r0
 801b124:	f083 0301 	eor.w	r3, r3, #1
 801b128:	b2db      	uxtb	r3, r3
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d04b      	beq.n	801b1c6 <lv_cont_layout_pretty+0x10a>
 801b12e:	2104      	movs	r1, #4
 801b130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b132:	f7ee fe43 	bl	8009dbc <lv_obj_is_protected>
 801b136:	4603      	mov	r3, r0
 801b138:	f083 0301 	eor.w	r3, r3, #1
 801b13c:	b2db      	uxtb	r3, r3
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d041      	beq.n	801b1c6 <lv_cont_layout_pretty+0x10a>
                /*If this object is already not fit then break*/
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 801b142:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 801b146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b148:	f7ee fd7c 	bl	8009c44 <lv_obj_get_width>
 801b14c:	4603      	mov	r3, r0
 801b14e:	18e2      	adds	r2, r4, r3
 801b150:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b154:	429a      	cmp	r2, r3
 801b156:	dd0d      	ble.n	801b174 <lv_cont_layout_pretty+0xb8>
                    /*Step back one child because the last already not fit, so the previous is the
                     * closer*/
                    if(child_rc != NULL && obj_num != 0) {
 801b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d043      	beq.n	801b1e6 <lv_cont_layout_pretty+0x12a>
 801b15e:	6a3b      	ldr	r3, [r7, #32]
 801b160:	2b00      	cmp	r3, #0
 801b162:	d040      	beq.n	801b1e6 <lv_cont_layout_pretty+0x12a>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	3304      	adds	r3, #4
 801b168:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b16a:	4618      	mov	r0, r3
 801b16c:	f7fb f89c 	bl	80162a8 <lv_ll_get_next>
 801b170:	6338      	str	r0, [r7, #48]	; 0x30
                    }
                    break;
 801b172:	e038      	b.n	801b1e6 <lv_cont_layout_pretty+0x12a>
                }
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 801b174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b176:	f7ee fd65 	bl	8009c44 <lv_obj_get_width>
 801b17a:	4603      	mov	r3, r0
 801b17c:	461a      	mov	r2, r3
 801b17e:	69bb      	ldr	r3, [r7, #24]
 801b180:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801b184:	4413      	add	r3, r2
 801b186:	b29a      	uxth	r2, r3
 801b188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b18a:	4413      	add	r3, r2
 801b18c:	b29b      	uxth	r3, r3
 801b18e:	84fb      	strh	r3, [r7, #38]	; 0x26
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 801b190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b192:	f7ee fd65 	bl	8009c60 <lv_obj_get_height>
 801b196:	4603      	mov	r3, r0
 801b198:	461a      	mov	r2, r3
 801b19a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b19e:	4293      	cmp	r3, r2
 801b1a0:	dc04      	bgt.n	801b1ac <lv_cont_layout_pretty+0xf0>
 801b1a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b1a4:	f7ee fd5c 	bl	8009c60 <lv_obj_get_height>
 801b1a8:	4603      	mov	r3, r0
 801b1aa:	e001      	b.n	801b1b0 <lv_cont_layout_pretty+0xf4>
 801b1ac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b1b0:	853b      	strh	r3, [r7, #40]	; 0x28
                obj_num++;
 801b1b2:	6a3b      	ldr	r3, [r7, #32]
 801b1b4:	3301      	adds	r3, #1
 801b1b6:	623b      	str	r3, [r7, #32]
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 801b1b8:	2108      	movs	r1, #8
 801b1ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b1bc:	f7ee fdfe 	bl	8009dbc <lv_obj_is_protected>
 801b1c0:	4603      	mov	r3, r0
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d111      	bne.n	801b1ea <lv_cont_layout_pretty+0x12e>
                    break; /*If can not be followed by an other object then break here*/
            }
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	3304      	adds	r3, #4
 801b1ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	f7fb f885 	bl	80162dc <lv_ll_get_prev>
 801b1d2:	6338      	str	r0, [r7, #48]	; 0x30
            if(obj_num == 0)
 801b1d4:	6a3b      	ldr	r3, [r7, #32]
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d101      	bne.n	801b1de <lv_cont_layout_pretty+0x122>
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
 801b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1dc:	637b      	str	r3, [r7, #52]	; 0x34
                                        next as first */
        } while(child_rc != NULL);
 801b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d19b      	bne.n	801b11c <lv_cont_layout_pretty+0x60>
 801b1e4:	e002      	b.n	801b1ec <lv_cont_layout_pretty+0x130>
                    break;
 801b1e6:	bf00      	nop
 801b1e8:	e000      	b.n	801b1ec <lv_cont_layout_pretty+0x130>
                    break; /*If can not be followed by an other object then break here*/
 801b1ea:	bf00      	nop

        /*If the object is too long  then align it to the middle*/
        if(obj_num == 0) {
 801b1ec:	6a3b      	ldr	r3, [r7, #32]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d112      	bne.n	801b218 <lv_cont_layout_pretty+0x15c>
            if(child_rc != NULL) {
 801b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	f000 80d9 	beq.w	801b3ac <lv_cont_layout_pretty+0x2f0>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 801b1fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801b1fe:	9300      	str	r3, [sp, #0]
 801b200:	2300      	movs	r3, #0
 801b202:	2202      	movs	r2, #2
 801b204:	6879      	ldr	r1, [r7, #4]
 801b206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b208:	f7ed fe32 	bl	8008e70 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 801b20c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b20e:	f7ee fd27 	bl	8009c60 <lv_obj_get_height>
 801b212:	4603      	mov	r3, r0
 801b214:	853b      	strh	r3, [r7, #40]	; 0x28
 801b216:	e0c9      	b.n	801b3ac <lv_cont_layout_pretty+0x2f0>
            }
        }
        /*If there is only one object in the row then align it to the middle*/
        else if(obj_num == 1) {
 801b218:	6a3b      	ldr	r3, [r7, #32]
 801b21a:	2b01      	cmp	r3, #1
 801b21c:	d109      	bne.n	801b232 <lv_cont_layout_pretty+0x176>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 801b21e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801b222:	9300      	str	r3, [sp, #0]
 801b224:	2300      	movs	r3, #0
 801b226:	2202      	movs	r2, #2
 801b228:	6879      	ldr	r1, [r7, #4]
 801b22a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b22c:	f7ed fe20 	bl	8008e70 <lv_obj_align>
 801b230:	e0bc      	b.n	801b3ac <lv_cont_layout_pretty+0x2f0>
        }
        /*If there are two object in the row then align them proportionally*/
        else if(obj_num == 2) {
 801b232:	6a3b      	ldr	r3, [r7, #32]
 801b234:	2b02      	cmp	r3, #2
 801b236:	d153      	bne.n	801b2e0 <lv_cont_layout_pretty+0x224>
            lv_obj_t * obj1 = child_rs;
 801b238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b23a:	613b      	str	r3, [r7, #16]
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	3304      	adds	r3, #4
 801b240:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b242:	4618      	mov	r0, r3
 801b244:	f7fb f84a 	bl	80162dc <lv_ll_get_prev>
 801b248:	60f8      	str	r0, [r7, #12]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 801b24a:	6938      	ldr	r0, [r7, #16]
 801b24c:	f7ee fcfa 	bl	8009c44 <lv_obj_get_width>
 801b250:	4603      	mov	r3, r0
 801b252:	b29c      	uxth	r4, r3
 801b254:	68f8      	ldr	r0, [r7, #12]
 801b256:	f7ee fcf5 	bl	8009c44 <lv_obj_get_width>
 801b25a:	4603      	mov	r3, r0
 801b25c:	b29b      	uxth	r3, r3
 801b25e:	4423      	add	r3, r4
 801b260:	b29b      	uxth	r3, r3
 801b262:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_coord_t pad  = (w_obj - w_row) / 3;
 801b264:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b268:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b26c:	1ad3      	subs	r3, r2, r3
 801b26e:	4a62      	ldr	r2, [pc, #392]	; (801b3f8 <lv_cont_layout_pretty+0x33c>)
 801b270:	fb82 1203 	smull	r1, r2, r2, r3
 801b274:	17db      	asrs	r3, r3, #31
 801b276:	1ad3      	subs	r3, r2, r3
 801b278:	817b      	strh	r3, [r7, #10]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 801b27a:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 801b27e:	6938      	ldr	r0, [r7, #16]
 801b280:	f7ee fcee 	bl	8009c60 <lv_obj_get_height>
 801b284:	4603      	mov	r3, r0
 801b286:	1ae3      	subs	r3, r4, r3
 801b288:	0fda      	lsrs	r2, r3, #31
 801b28a:	4413      	add	r3, r2
 801b28c:	105b      	asrs	r3, r3, #1
 801b28e:	b29a      	uxth	r2, r3
 801b290:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b292:	4413      	add	r3, r2
 801b294:	b29b      	uxth	r3, r3
 801b296:	b21b      	sxth	r3, r3
 801b298:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801b29c:	9300      	str	r3, [sp, #0]
 801b29e:	4613      	mov	r3, r2
 801b2a0:	2201      	movs	r2, #1
 801b2a2:	6879      	ldr	r1, [r7, #4]
 801b2a4:	6938      	ldr	r0, [r7, #16]
 801b2a6:	f7ed fde3 	bl	8008e70 <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 801b2aa:	897b      	ldrh	r3, [r7, #10]
 801b2ac:	425b      	negs	r3, r3
 801b2ae:	b29b      	uxth	r3, r3
 801b2b0:	b21d      	sxth	r5, r3
 801b2b2:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 801b2b6:	68f8      	ldr	r0, [r7, #12]
 801b2b8:	f7ee fcd2 	bl	8009c60 <lv_obj_get_height>
 801b2bc:	4603      	mov	r3, r0
 801b2be:	1ae3      	subs	r3, r4, r3
 801b2c0:	0fda      	lsrs	r2, r3, #31
 801b2c2:	4413      	add	r3, r2
 801b2c4:	105b      	asrs	r3, r3, #1
 801b2c6:	b29a      	uxth	r2, r3
 801b2c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b2ca:	4413      	add	r3, r2
 801b2cc:	b29b      	uxth	r3, r3
 801b2ce:	b21b      	sxth	r3, r3
 801b2d0:	9300      	str	r3, [sp, #0]
 801b2d2:	462b      	mov	r3, r5
 801b2d4:	2203      	movs	r2, #3
 801b2d6:	6879      	ldr	r1, [r7, #4]
 801b2d8:	68f8      	ldr	r0, [r7, #12]
 801b2da:	f7ed fdc9 	bl	8008e70 <lv_obj_align>
 801b2de:	e065      	b.n	801b3ac <lv_cont_layout_pretty+0x2f0>
        }
        /* Align the children (from child_rs to child_rc)*/
        else {
            w_row -= style->body.padding.inner * obj_num;
 801b2e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b2e2:	69bb      	ldr	r3, [r7, #24]
 801b2e4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801b2e8:	b299      	uxth	r1, r3
 801b2ea:	6a3b      	ldr	r3, [r7, #32]
 801b2ec:	b29b      	uxth	r3, r3
 801b2ee:	fb11 f303 	smulbb	r3, r1, r3
 801b2f2:	b29b      	uxth	r3, r3
 801b2f4:	1ad3      	subs	r3, r2, r3
 801b2f6:	b29b      	uxth	r3, r3
 801b2f8:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 801b2fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b2fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b302:	1ad3      	subs	r3, r2, r3
 801b304:	461a      	mov	r2, r3
 801b306:	6a3b      	ldr	r3, [r7, #32]
 801b308:	3b01      	subs	r3, #1
 801b30a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b30e:	82bb      	strh	r3, [r7, #20]
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 801b310:	69bb      	ldr	r3, [r7, #24]
 801b312:	8b5b      	ldrh	r3, [r3, #26]
 801b314:	83fb      	strh	r3, [r7, #30]
            child_tmp           = child_rs;
 801b316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b318:	62fb      	str	r3, [r7, #44]	; 0x2c
            while(child_tmp != NULL) {
 801b31a:	e042      	b.n	801b3a2 <lv_cont_layout_pretty+0x2e6>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 801b31c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b31e:	f7ee fd19 	bl	8009d54 <lv_obj_get_hidden>
 801b322:	4603      	mov	r3, r0
 801b324:	f083 0301 	eor.w	r3, r3, #1
 801b328:	b2db      	uxtb	r3, r3
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d02e      	beq.n	801b38c <lv_cont_layout_pretty+0x2d0>
 801b32e:	2104      	movs	r1, #4
 801b330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b332:	f7ee fd43 	bl	8009dbc <lv_obj_is_protected>
 801b336:	4603      	mov	r3, r0
 801b338:	f083 0301 	eor.w	r3, r3, #1
 801b33c:	b2db      	uxtb	r3, r3
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d024      	beq.n	801b38c <lv_cont_layout_pretty+0x2d0>
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801b342:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 801b346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b348:	f7ee fc8a 	bl	8009c60 <lv_obj_get_height>
 801b34c:	4603      	mov	r3, r0
 801b34e:	1ae3      	subs	r3, r4, r3
 801b350:	0fda      	lsrs	r2, r3, #31
 801b352:	4413      	add	r3, r2
 801b354:	105b      	asrs	r3, r3, #1
 801b356:	b29a      	uxth	r2, r3
 801b358:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b35a:	4413      	add	r3, r2
 801b35c:	b29b      	uxth	r3, r3
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 801b35e:	b21b      	sxth	r3, r3
 801b360:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801b364:	9300      	str	r3, [sp, #0]
 801b366:	4613      	mov	r3, r2
 801b368:	2201      	movs	r2, #1
 801b36a:	6879      	ldr	r1, [r7, #4]
 801b36c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b36e:	f7ed fd7f 	bl	8008e70 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 801b372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b374:	f7ee fc66 	bl	8009c44 <lv_obj_get_width>
 801b378:	4603      	mov	r3, r0
 801b37a:	461a      	mov	r2, r3
 801b37c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b380:	4413      	add	r3, r2
 801b382:	b29a      	uxth	r2, r3
 801b384:	8bfb      	ldrh	r3, [r7, #30]
 801b386:	4413      	add	r3, r2
 801b388:	b29b      	uxth	r3, r3
 801b38a:	83fb      	strh	r3, [r7, #30]
                }
                if(child_tmp == child_rc) break;
 801b38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b390:	429a      	cmp	r2, r3
 801b392:	d00a      	beq.n	801b3aa <lv_cont_layout_pretty+0x2ee>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	3304      	adds	r3, #4
 801b398:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b39a:	4618      	mov	r0, r3
 801b39c:	f7fa ff9e 	bl	80162dc <lv_ll_get_prev>
 801b3a0:	62f8      	str	r0, [r7, #44]	; 0x2c
            while(child_tmp != NULL) {
 801b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d1b9      	bne.n	801b31c <lv_cont_layout_pretty+0x260>
 801b3a8:	e000      	b.n	801b3ac <lv_cont_layout_pretty+0x2f0>
                if(child_tmp == child_rc) break;
 801b3aa:	bf00      	nop
            }
        }

        if(child_rc == NULL) break;
 801b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d018      	beq.n	801b3e4 <lv_cont_layout_pretty+0x328>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 801b3b2:	69bb      	ldr	r3, [r7, #24]
 801b3b4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801b3b8:	b29a      	uxth	r2, r3
 801b3ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801b3bc:	4413      	add	r3, r2
 801b3be:	b29a      	uxth	r2, r3
 801b3c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b3c2:	4413      	add	r3, r2
 801b3c4:	b29b      	uxth	r3, r3
 801b3c6:	857b      	strh	r3, [r7, #42]	; 0x2a
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	3304      	adds	r3, #4
 801b3cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b3ce:	4618      	mov	r0, r3
 801b3d0:	f7fa ff84 	bl	80162dc <lv_ll_get_prev>
 801b3d4:	6378      	str	r0, [r7, #52]	; 0x34
        child_rc = child_rs;
 801b3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3d8:	633b      	str	r3, [r7, #48]	; 0x30
    while(child_rs != NULL) {
 801b3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	f47f ae8e 	bne.w	801b0fe <lv_cont_layout_pretty+0x42>
 801b3e2:	e000      	b.n	801b3e6 <lv_cont_layout_pretty+0x32a>
        if(child_rc == NULL) break;
 801b3e4:	bf00      	nop
    }
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801b3e6:	2101      	movs	r1, #1
 801b3e8:	6878      	ldr	r0, [r7, #4]
 801b3ea:	f7ee fa76 	bl	80098da <lv_obj_clear_protect>
 801b3ee:	e000      	b.n	801b3f2 <lv_cont_layout_pretty+0x336>
    if(child_rs == NULL) return;                /*Return if no child*/
 801b3f0:	bf00      	nop
}
 801b3f2:	3738      	adds	r7, #56	; 0x38
 801b3f4:	46bd      	mov	sp, r7
 801b3f6:	bdb0      	pop	{r4, r5, r7, pc}
 801b3f8:	55555556 	.word	0x55555556

0801b3fc <lv_cont_layout_grid>:
/**
 * Handle the grid layout. Align same-sized objects in a grid
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
 801b3fc:	b580      	push	{r7, lr}
 801b3fe:	b08a      	sub	sp, #40	; 0x28
 801b400:	af00      	add	r7, sp, #0
 801b402:	6078      	str	r0, [r7, #4]
    lv_obj_t * child;
    const lv_style_t * style = lv_obj_get_style(cont);
 801b404:	6878      	ldr	r0, [r7, #4]
 801b406:	f7ee fc4d 	bl	8009ca4 <lv_obj_get_style>
 801b40a:	61b8      	str	r0, [r7, #24]
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 801b40c:	6878      	ldr	r0, [r7, #4]
 801b40e:	f7ee fc19 	bl	8009c44 <lv_obj_get_width>
 801b412:	4603      	mov	r3, r0
 801b414:	82fb      	strh	r3, [r7, #22]
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 801b416:	2100      	movs	r1, #0
 801b418:	6878      	ldr	r0, [r7, #4]
 801b41a:	f7ee fbb5 	bl	8009b88 <lv_obj_get_child>
 801b41e:	4603      	mov	r3, r0
 801b420:	4618      	mov	r0, r3
 801b422:	f7ee fc0f 	bl	8009c44 <lv_obj_get_width>
 801b426:	4603      	mov	r3, r0
 801b428:	82bb      	strh	r3, [r7, #20]
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 801b42a:	2100      	movs	r1, #0
 801b42c:	6878      	ldr	r0, [r7, #4]
 801b42e:	f7ee fbab 	bl	8009b88 <lv_obj_get_child>
 801b432:	4603      	mov	r3, r0
 801b434:	4618      	mov	r0, r3
 801b436:	f7ee fc13 	bl	8009c60 <lv_obj_get_height>
 801b43a:	4603      	mov	r3, r0
 801b43c:	827b      	strh	r3, [r7, #18]
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 801b43e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b442:	69ba      	ldr	r2, [r7, #24]
 801b444:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 801b448:	1a9b      	subs	r3, r3, r2
 801b44a:	69ba      	ldr	r2, [r7, #24]
 801b44c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801b450:	1a9a      	subs	r2, r3, r2
                       (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 801b452:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b456:	69b9      	ldr	r1, [r7, #24]
 801b458:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
 801b45c:	440b      	add	r3, r1
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 801b45e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b462:	823b      	strh	r3, [r7, #16]
    lv_coord_t x_ofs;
    if(obj_row > 1) {
 801b464:	8a3b      	ldrh	r3, [r7, #16]
 801b466:	2b01      	cmp	r3, #1
 801b468:	d918      	bls.n	801b49c <lv_cont_layout_grid+0xa0>
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 801b46a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b46e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b472:	69b9      	ldr	r1, [r7, #24]
 801b474:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801b478:	1a5b      	subs	r3, r3, r1
 801b47a:	69b9      	ldr	r1, [r7, #24]
 801b47c:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 801b480:	1a5b      	subs	r3, r3, r1
 801b482:	441a      	add	r2, r3
 801b484:	8a3b      	ldrh	r3, [r7, #16]
 801b486:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 801b48a:	fb01 f303 	mul.w	r3, r1, r3
 801b48e:	1ad2      	subs	r2, r2, r3
                (obj_row - 1);
 801b490:	8a3b      	ldrh	r3, [r7, #16]
 801b492:	3b01      	subs	r3, #1
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 801b494:	fb92 f3f3 	sdiv	r3, r2, r3
 801b498:	847b      	strh	r3, [r7, #34]	; 0x22
 801b49a:	e010      	b.n	801b4be <lv_cont_layout_grid+0xc2>
    } else {
        x_ofs = w_tot / 2 - w_obj / 2;
 801b49c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b4a0:	0fda      	lsrs	r2, r3, #31
 801b4a2:	4413      	add	r3, r2
 801b4a4:	105b      	asrs	r3, r3, #1
 801b4a6:	b21b      	sxth	r3, r3
 801b4a8:	b29a      	uxth	r2, r3
 801b4aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b4ae:	0fd9      	lsrs	r1, r3, #31
 801b4b0:	440b      	add	r3, r1
 801b4b2:	105b      	asrs	r3, r3, #1
 801b4b4:	b21b      	sxth	r3, r3
 801b4b6:	b29b      	uxth	r3, r3
 801b4b8:	1ad3      	subs	r3, r2, r3
 801b4ba:	b29b      	uxth	r3, r3
 801b4bc:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 801b4be:	69bb      	ldr	r3, [r7, #24]
 801b4c0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801b4c4:	b29a      	uxth	r2, r3
 801b4c6:	8a7b      	ldrh	r3, [r7, #18]
 801b4c8:	4413      	add	r3, r2
 801b4ca:	b29b      	uxth	r3, r3
 801b4cc:	81fb      	strh	r3, [r7, #14]

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801b4ce:	2101      	movs	r1, #1
 801b4d0:	6878      	ldr	r0, [r7, #4]
 801b4d2:	f7ee f9ed 	bl	80098b0 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t act_x = style->body.padding.left;
 801b4d6:	69bb      	ldr	r3, [r7, #24]
 801b4d8:	8b5b      	ldrh	r3, [r3, #26]
 801b4da:	843b      	strh	r3, [r7, #32]
    lv_coord_t act_y = style->body.padding.top;
 801b4dc:	69bb      	ldr	r3, [r7, #24]
 801b4de:	8adb      	ldrh	r3, [r3, #22]
 801b4e0:	83fb      	strh	r3, [r7, #30]
    uint16_t obj_cnt = 0;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	83bb      	strh	r3, [r7, #28]
    LV_LL_READ_BACK(cont->child_ll, child)
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	3304      	adds	r3, #4
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	f7fa fec9 	bl	8016282 <lv_ll_get_tail>
 801b4f0:	6278      	str	r0, [r7, #36]	; 0x24
 801b4f2:	e03f      	b.n	801b574 <lv_cont_layout_grid+0x178>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b4f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b4f6:	f7ee fc2d 	bl	8009d54 <lv_obj_get_hidden>
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d131      	bne.n	801b564 <lv_cont_layout_grid+0x168>
 801b500:	2104      	movs	r1, #4
 801b502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b504:	f7ee fc5a 	bl	8009dbc <lv_obj_is_protected>
 801b508:	4603      	mov	r3, r0
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d12a      	bne.n	801b564 <lv_cont_layout_grid+0x168>

        if(obj_row > 1) {
 801b50e:	8a3b      	ldrh	r3, [r7, #16]
 801b510:	2b01      	cmp	r3, #1
 801b512:	d90d      	bls.n	801b530 <lv_cont_layout_grid+0x134>
            lv_obj_set_pos(child, act_x, act_y);
 801b514:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801b518:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b51c:	4619      	mov	r1, r3
 801b51e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b520:	f7ed fb4e 	bl	8008bc0 <lv_obj_set_pos>
            act_x += x_ofs;
 801b524:	8c3a      	ldrh	r2, [r7, #32]
 801b526:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b528:	4413      	add	r3, r2
 801b52a:	b29b      	uxth	r3, r3
 801b52c:	843b      	strh	r3, [r7, #32]
 801b52e:	e007      	b.n	801b540 <lv_cont_layout_grid+0x144>
        } else {
            lv_obj_set_pos(child, x_ofs, act_y);
 801b530:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801b534:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b538:	4619      	mov	r1, r3
 801b53a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b53c:	f7ed fb40 	bl	8008bc0 <lv_obj_set_pos>
        }
        obj_cnt++;
 801b540:	8bbb      	ldrh	r3, [r7, #28]
 801b542:	3301      	adds	r3, #1
 801b544:	83bb      	strh	r3, [r7, #28]

        if(obj_cnt >= obj_row) {
 801b546:	8bba      	ldrh	r2, [r7, #28]
 801b548:	8a3b      	ldrh	r3, [r7, #16]
 801b54a:	429a      	cmp	r2, r3
 801b54c:	d30b      	bcc.n	801b566 <lv_cont_layout_grid+0x16a>
            obj_cnt = 0;
 801b54e:	2300      	movs	r3, #0
 801b550:	83bb      	strh	r3, [r7, #28]
            act_x   = style->body.padding.left;
 801b552:	69bb      	ldr	r3, [r7, #24]
 801b554:	8b5b      	ldrh	r3, [r3, #26]
 801b556:	843b      	strh	r3, [r7, #32]
            act_y += y_ofs;
 801b558:	8bfa      	ldrh	r2, [r7, #30]
 801b55a:	89fb      	ldrh	r3, [r7, #14]
 801b55c:	4413      	add	r3, r2
 801b55e:	b29b      	uxth	r3, r3
 801b560:	83fb      	strh	r3, [r7, #30]
 801b562:	e000      	b.n	801b566 <lv_cont_layout_grid+0x16a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b564:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	3304      	adds	r3, #4
 801b56a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b56c:	4618      	mov	r0, r3
 801b56e:	f7fa feb5 	bl	80162dc <lv_ll_get_prev>
 801b572:	6278      	str	r0, [r7, #36]	; 0x24
 801b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b576:	2b00      	cmp	r3, #0
 801b578:	d1bc      	bne.n	801b4f4 <lv_cont_layout_grid+0xf8>
        }
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801b57a:	2101      	movs	r1, #1
 801b57c:	6878      	ldr	r0, [r7, #4]
 801b57e:	f7ee f9ac 	bl	80098da <lv_obj_clear_protect>
}
 801b582:	bf00      	nop
 801b584:	3728      	adds	r7, #40	; 0x28
 801b586:	46bd      	mov	sp, r7
 801b588:	bd80      	pop	{r7, pc}

0801b58a <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 801b58a:	b580      	push	{r7, lr}
 801b58c:	b090      	sub	sp, #64	; 0x40
 801b58e:	af00      	add	r7, sp, #0
 801b590:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b592:	6878      	ldr	r0, [r7, #4]
 801b594:	f7ee fc41 	bl	8009e1a <lv_obj_get_ext_attr>
 801b598:	63b8      	str	r0, [r7, #56]	; 0x38

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 801b59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b59c:	781b      	ldrb	r3, [r3, #0]
 801b59e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b5a2:	b2db      	uxtb	r3, r3
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d115      	bne.n	801b5d4 <lv_cont_refr_autofit+0x4a>
 801b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5aa:	781b      	ldrb	r3, [r3, #0]
 801b5ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801b5b0:	b2db      	uxtb	r3, r3
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d10e      	bne.n	801b5d4 <lv_cont_refr_autofit+0x4a>
 801b5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5b8:	785b      	ldrb	r3, [r3, #1]
 801b5ba:	f003 0303 	and.w	r3, r3, #3
 801b5be:	b2db      	uxtb	r3, r3
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d107      	bne.n	801b5d4 <lv_cont_refr_autofit+0x4a>
       ext->fit_bottom == LV_FIT_NONE) {
 801b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5c6:	785b      	ldrb	r3, [r3, #1]
 801b5c8:	f003 030c 	and.w	r3, r3, #12
 801b5cc:	b2db      	uxtb	r3, r3
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	f000 81c8 	beq.w	801b964 <lv_cont_refr_autofit+0x3da>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 801b5d4:	6878      	ldr	r0, [r7, #4]
 801b5d6:	f7ee fb65 	bl	8009ca4 <lv_obj_get_style>
 801b5da:	6378      	str	r0, [r7, #52]	; 0x34
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 801b5dc:	6878      	ldr	r0, [r7, #4]
 801b5de:	f7ee fac7 	bl	8009b70 <lv_obj_get_parent>
 801b5e2:	6338      	str	r0, [r7, #48]	; 0x30
    const lv_style_t * par_style = lv_obj_get_style(par);
 801b5e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b5e6:	f7ee fb5d 	bl	8009ca4 <lv_obj_get_style>
 801b5ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
 801b5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5ee:	f103 0210 	add.w	r2, r3, #16
 801b5f2:	f107 0310 	add.w	r3, r7, #16
 801b5f6:	4611      	mov	r1, r2
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	f7ff f95d 	bl	801a8b8 <lv_area_copy>
    flood_area.x1 += par_style->body.padding.left;
 801b5fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801b602:	b29a      	uxth	r2, r3
 801b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b606:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801b60a:	b29b      	uxth	r3, r3
 801b60c:	4413      	add	r3, r2
 801b60e:	b29b      	uxth	r3, r3
 801b610:	b21b      	sxth	r3, r3
 801b612:	823b      	strh	r3, [r7, #16]
    flood_area.x2 -= par_style->body.padding.right;
 801b614:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b618:	b29a      	uxth	r2, r3
 801b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b61c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801b620:	b29b      	uxth	r3, r3
 801b622:	1ad3      	subs	r3, r2, r3
 801b624:	b29b      	uxth	r3, r3
 801b626:	b21b      	sxth	r3, r3
 801b628:	82bb      	strh	r3, [r7, #20]
    flood_area.y1 += par_style->body.padding.top;
 801b62a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b62e:	b29a      	uxth	r2, r3
 801b630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b632:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801b636:	b29b      	uxth	r3, r3
 801b638:	4413      	add	r3, r2
 801b63a:	b29b      	uxth	r3, r3
 801b63c:	b21b      	sxth	r3, r3
 801b63e:	827b      	strh	r3, [r7, #18]
    flood_area.y2 -= par_style->body.padding.bottom;
 801b640:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b644:	b29a      	uxth	r2, r3
 801b646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b648:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801b64c:	b29b      	uxth	r3, r3
 801b64e:	1ad3      	subs	r3, r2, r3
 801b650:	b29b      	uxth	r3, r3
 801b652:	b21b      	sxth	r3, r3
 801b654:	82fb      	strh	r3, [r7, #22]

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 801b656:	f107 0318 	add.w	r3, r7, #24
 801b65a:	4619      	mov	r1, r3
 801b65c:	6878      	ldr	r0, [r7, #4]
 801b65e:	f7ee fab0 	bl	8009bc2 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 801b662:	f107 0320 	add.w	r3, r7, #32
 801b666:	4619      	mov	r1, r3
 801b668:	6878      	ldr	r0, [r7, #4]
 801b66a:	f7ee faaa 	bl	8009bc2 <lv_obj_get_coords>

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	3304      	adds	r3, #4
 801b672:	4618      	mov	r0, r3
 801b674:	f7fa fe91 	bl	801639a <lv_ll_is_empty>
 801b678:	4603      	mov	r3, r0
 801b67a:	f083 0301 	eor.w	r3, r3, #1
 801b67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(has_children) {
 801b682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801b686:	2b00      	cmp	r3, #0
 801b688:	d078      	beq.n	801b77c <lv_cont_refr_autofit+0x1f2>
        tight_area.x1 = LV_COORD_MAX;
 801b68a:	f647 4318 	movw	r3, #31768	; 0x7c18
 801b68e:	843b      	strh	r3, [r7, #32]
        tight_area.y1 = LV_COORD_MAX;
 801b690:	f647 4318 	movw	r3, #31768	; 0x7c18
 801b694:	847b      	strh	r3, [r7, #34]	; 0x22
        tight_area.x2 = LV_COORD_MIN;
 801b696:	f248 33e8 	movw	r3, #33768	; 0x83e8
 801b69a:	84bb      	strh	r3, [r7, #36]	; 0x24
        tight_area.y2 = LV_COORD_MIN;
 801b69c:	f248 33e8 	movw	r3, #33768	; 0x83e8
 801b6a0:	84fb      	strh	r3, [r7, #38]	; 0x26

        LV_LL_READ(cont->child_ll, child_i)
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	3304      	adds	r3, #4
 801b6a6:	4618      	mov	r0, r3
 801b6a8:	f7fa fdd8 	bl	801625c <lv_ll_get_head>
 801b6ac:	63f8      	str	r0, [r7, #60]	; 0x3c
 801b6ae:	e036      	b.n	801b71e <lv_cont_refr_autofit+0x194>
        {
            if(lv_obj_get_hidden(child_i) != false) continue;
 801b6b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801b6b2:	f7ee fb4f 	bl	8009d54 <lv_obj_get_hidden>
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d128      	bne.n	801b70e <lv_cont_refr_autofit+0x184>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 801b6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6be:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801b6c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b6c6:	4293      	cmp	r3, r2
 801b6c8:	bfa8      	it	ge
 801b6ca:	4613      	movge	r3, r2
 801b6cc:	b21b      	sxth	r3, r3
 801b6ce:	843b      	strh	r3, [r7, #32]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 801b6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6d2:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801b6d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b6da:	4293      	cmp	r3, r2
 801b6dc:	bfa8      	it	ge
 801b6de:	4613      	movge	r3, r2
 801b6e0:	b21b      	sxth	r3, r3
 801b6e2:	847b      	strh	r3, [r7, #34]	; 0x22
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 801b6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6e6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 801b6ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b6ee:	4293      	cmp	r3, r2
 801b6f0:	bfb8      	it	lt
 801b6f2:	4613      	movlt	r3, r2
 801b6f4:	b21b      	sxth	r3, r3
 801b6f6:	84bb      	strh	r3, [r7, #36]	; 0x24
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 801b6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6fa:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 801b6fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b702:	4293      	cmp	r3, r2
 801b704:	bfb8      	it	lt
 801b706:	4613      	movlt	r3, r2
 801b708:	b21b      	sxth	r3, r3
 801b70a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b70c:	e000      	b.n	801b710 <lv_cont_refr_autofit+0x186>
            if(lv_obj_get_hidden(child_i) != false) continue;
 801b70e:	bf00      	nop
        LV_LL_READ(cont->child_ll, child_i)
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	3304      	adds	r3, #4
 801b714:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b716:	4618      	mov	r0, r3
 801b718:	f7fa fdc6 	bl	80162a8 <lv_ll_get_next>
 801b71c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801b71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b720:	2b00      	cmp	r3, #0
 801b722:	d1c5      	bne.n	801b6b0 <lv_cont_refr_autofit+0x126>
        }

        tight_area.x1 -= style->body.padding.left;
 801b724:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b728:	b29a      	uxth	r2, r3
 801b72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b72c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801b730:	b29b      	uxth	r3, r3
 801b732:	1ad3      	subs	r3, r2, r3
 801b734:	b29b      	uxth	r3, r3
 801b736:	b21b      	sxth	r3, r3
 801b738:	843b      	strh	r3, [r7, #32]
        tight_area.x2 += style->body.padding.right;
 801b73a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b73e:	b29a      	uxth	r2, r3
 801b740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b742:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801b746:	b29b      	uxth	r3, r3
 801b748:	4413      	add	r3, r2
 801b74a:	b29b      	uxth	r3, r3
 801b74c:	b21b      	sxth	r3, r3
 801b74e:	84bb      	strh	r3, [r7, #36]	; 0x24
        tight_area.y1 -= style->body.padding.top;
 801b750:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b754:	b29a      	uxth	r2, r3
 801b756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b758:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801b75c:	b29b      	uxth	r3, r3
 801b75e:	1ad3      	subs	r3, r2, r3
 801b760:	b29b      	uxth	r3, r3
 801b762:	b21b      	sxth	r3, r3
 801b764:	847b      	strh	r3, [r7, #34]	; 0x22
        tight_area.y2 += style->body.padding.bottom;
 801b766:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b76a:	b29a      	uxth	r2, r3
 801b76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b76e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801b772:	b29b      	uxth	r3, r3
 801b774:	4413      	add	r3, r2
 801b776:	b29b      	uxth	r3, r3
 801b778:	b21b      	sxth	r3, r3
 801b77a:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);
 801b77c:	f107 0218 	add.w	r2, r7, #24
 801b780:	f107 0308 	add.w	r3, r7, #8
 801b784:	4611      	mov	r1, r2
 801b786:	4618      	mov	r0, r3
 801b788:	f7ff f896 	bl	801a8b8 <lv_area_copy>

    switch(ext->fit_left) {
 801b78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b78e:	781b      	ldrb	r3, [r3, #0]
 801b790:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b794:	b2db      	uxtb	r3, r3
 801b796:	2b02      	cmp	r3, #2
 801b798:	d008      	beq.n	801b7ac <lv_cont_refr_autofit+0x222>
 801b79a:	2b03      	cmp	r3, #3
 801b79c:	d00a      	beq.n	801b7b4 <lv_cont_refr_autofit+0x22a>
 801b79e:	2b01      	cmp	r3, #1
 801b7a0:	d000      	beq.n	801b7a4 <lv_cont_refr_autofit+0x21a>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
        default: break;
 801b7a2:	e018      	b.n	801b7d6 <lv_cont_refr_autofit+0x24c>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 801b7a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b7a8:	813b      	strh	r3, [r7, #8]
 801b7aa:	e014      	b.n	801b7d6 <lv_cont_refr_autofit+0x24c>
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
 801b7ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801b7b0:	813b      	strh	r3, [r7, #8]
 801b7b2:	e010      	b.n	801b7d6 <lv_cont_refr_autofit+0x24c>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 801b7b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d008      	beq.n	801b7ce <lv_cont_refr_autofit+0x244>
 801b7bc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801b7c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b7c4:	4293      	cmp	r3, r2
 801b7c6:	bfa8      	it	ge
 801b7c8:	4613      	movge	r3, r2
 801b7ca:	b21b      	sxth	r3, r3
 801b7cc:	e001      	b.n	801b7d2 <lv_cont_refr_autofit+0x248>
 801b7ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801b7d2:	813b      	strh	r3, [r7, #8]
 801b7d4:	bf00      	nop
    }

    switch(ext->fit_right) {
 801b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7d8:	781b      	ldrb	r3, [r3, #0]
 801b7da:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801b7de:	b2db      	uxtb	r3, r3
 801b7e0:	2b02      	cmp	r3, #2
 801b7e2:	d008      	beq.n	801b7f6 <lv_cont_refr_autofit+0x26c>
 801b7e4:	2b03      	cmp	r3, #3
 801b7e6:	d00a      	beq.n	801b7fe <lv_cont_refr_autofit+0x274>
 801b7e8:	2b01      	cmp	r3, #1
 801b7ea:	d000      	beq.n	801b7ee <lv_cont_refr_autofit+0x264>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
        default: break;
 801b7ec:	e018      	b.n	801b820 <lv_cont_refr_autofit+0x296>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 801b7ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b7f2:	81bb      	strh	r3, [r7, #12]
 801b7f4:	e014      	b.n	801b820 <lv_cont_refr_autofit+0x296>
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
 801b7f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b7fa:	81bb      	strh	r3, [r7, #12]
 801b7fc:	e010      	b.n	801b820 <lv_cont_refr_autofit+0x296>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 801b7fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801b802:	2b00      	cmp	r3, #0
 801b804:	d008      	beq.n	801b818 <lv_cont_refr_autofit+0x28e>
 801b806:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b80a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b80e:	4293      	cmp	r3, r2
 801b810:	bfb8      	it	lt
 801b812:	4613      	movlt	r3, r2
 801b814:	b21b      	sxth	r3, r3
 801b816:	e001      	b.n	801b81c <lv_cont_refr_autofit+0x292>
 801b818:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b81c:	81bb      	strh	r3, [r7, #12]
 801b81e:	bf00      	nop
    }

    switch(ext->fit_top) {
 801b820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b822:	785b      	ldrb	r3, [r3, #1]
 801b824:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801b828:	b2db      	uxtb	r3, r3
 801b82a:	2b02      	cmp	r3, #2
 801b82c:	d008      	beq.n	801b840 <lv_cont_refr_autofit+0x2b6>
 801b82e:	2b03      	cmp	r3, #3
 801b830:	d00a      	beq.n	801b848 <lv_cont_refr_autofit+0x2be>
 801b832:	2b01      	cmp	r3, #1
 801b834:	d000      	beq.n	801b838 <lv_cont_refr_autofit+0x2ae>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
        default: break;
 801b836:	e018      	b.n	801b86a <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 801b838:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b83c:	817b      	strh	r3, [r7, #10]
 801b83e:	e014      	b.n	801b86a <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
 801b840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b844:	817b      	strh	r3, [r7, #10]
 801b846:	e010      	b.n	801b86a <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 801b848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d008      	beq.n	801b862 <lv_cont_refr_autofit+0x2d8>
 801b850:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 801b854:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b858:	4293      	cmp	r3, r2
 801b85a:	bfa8      	it	ge
 801b85c:	4613      	movge	r3, r2
 801b85e:	b21b      	sxth	r3, r3
 801b860:	e001      	b.n	801b866 <lv_cont_refr_autofit+0x2dc>
 801b862:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b866:	817b      	strh	r3, [r7, #10]
 801b868:	bf00      	nop
    }

    switch(ext->fit_bottom) {
 801b86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b86c:	785b      	ldrb	r3, [r3, #1]
 801b86e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b872:	b2db      	uxtb	r3, r3
 801b874:	2b02      	cmp	r3, #2
 801b876:	d008      	beq.n	801b88a <lv_cont_refr_autofit+0x300>
 801b878:	2b03      	cmp	r3, #3
 801b87a:	d00a      	beq.n	801b892 <lv_cont_refr_autofit+0x308>
 801b87c:	2b01      	cmp	r3, #1
 801b87e:	d000      	beq.n	801b882 <lv_cont_refr_autofit+0x2f8>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
        default: break;
 801b880:	e018      	b.n	801b8b4 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 801b882:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b886:	81fb      	strh	r3, [r7, #14]
 801b888:	e014      	b.n	801b8b4 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
 801b88a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b88e:	81fb      	strh	r3, [r7, #14]
 801b890:	e010      	b.n	801b8b4 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 801b892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801b896:	2b00      	cmp	r3, #0
 801b898:	d008      	beq.n	801b8ac <lv_cont_refr_autofit+0x322>
 801b89a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b89e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b8a2:	4293      	cmp	r3, r2
 801b8a4:	bfb8      	it	lt
 801b8a6:	4613      	movlt	r3, r2
 801b8a8:	b21b      	sxth	r3, r3
 801b8aa:	e001      	b.n	801b8b0 <lv_cont_refr_autofit+0x326>
 801b8ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b8b0:	81fb      	strh	r3, [r7, #14]
 801b8b2:	bf00      	nop
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801b8ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b8be:	429a      	cmp	r2, r3
 801b8c0:	d114      	bne.n	801b8ec <lv_cont_refr_autofit+0x362>
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801b8c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801b8cc:	429a      	cmp	r2, r3
 801b8ce:	d10d      	bne.n	801b8ec <lv_cont_refr_autofit+0x362>
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 801b8d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801b8da:	429a      	cmp	r2, r3
 801b8dc:	d106      	bne.n	801b8ec <lv_cont_refr_autofit+0x362>
       cont->coords.y2 != new_area.y2) {
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 801b8e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 801b8e8:	429a      	cmp	r2, r3
 801b8ea:	d03c      	beq.n	801b966 <lv_cont_refr_autofit+0x3dc>

        lv_obj_invalidate(cont);
 801b8ec:	6878      	ldr	r0, [r7, #4]
 801b8ee:	f7ed f868 	bl	80089c2 <lv_obj_invalidate>
        lv_area_copy(&cont->coords, &new_area);
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	3310      	adds	r3, #16
 801b8f6:	f107 0208 	add.w	r2, r7, #8
 801b8fa:	4611      	mov	r1, r2
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	f7fe ffdb 	bl	801a8b8 <lv_area_copy>
        lv_obj_invalidate(cont);
 801b902:	6878      	ldr	r0, [r7, #4]
 801b904:	f7ed f85d 	bl	80089c2 <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	69db      	ldr	r3, [r3, #28]
 801b90c:	f107 0218 	add.w	r2, r7, #24
 801b910:	2102      	movs	r1, #2
 801b912:	6878      	ldr	r0, [r7, #4]
 801b914:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 801b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b918:	69db      	ldr	r3, [r3, #28]
 801b91a:	687a      	ldr	r2, [r7, #4]
 801b91c:	2101      	movs	r1, #1
 801b91e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b920:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 801b922:	6878      	ldr	r0, [r7, #4]
 801b924:	f7ee f9aa 	bl	8009c7c <lv_obj_get_auto_realign>
 801b928:	4603      	mov	r3, r0
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d002      	beq.n	801b934 <lv_cont_refr_autofit+0x3aa>
            lv_obj_realign(cont);
 801b92e:	6878      	ldr	r0, [r7, #4]
 801b930:	f7ed ff12 	bl	8009758 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	3304      	adds	r3, #4
 801b938:	4618      	mov	r0, r3
 801b93a:	f7fa fc8f 	bl	801625c <lv_ll_get_head>
 801b93e:	63f8      	str	r0, [r7, #60]	; 0x3c
 801b940:	e00c      	b.n	801b95c <lv_cont_refr_autofit+0x3d2>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 801b942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b944:	69db      	ldr	r3, [r3, #28]
 801b946:	2200      	movs	r2, #0
 801b948:	2103      	movs	r1, #3
 801b94a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801b94c:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	3304      	adds	r3, #4
 801b952:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b954:	4618      	mov	r0, r3
 801b956:	f7fa fca7 	bl	80162a8 <lv_ll_get_next>
 801b95a:	63f8      	str	r0, [r7, #60]	; 0x3c
 801b95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d1ef      	bne.n	801b942 <lv_cont_refr_autofit+0x3b8>
 801b962:	e000      	b.n	801b966 <lv_cont_refr_autofit+0x3dc>
        return;
 801b964:	bf00      	nop
        }
    }
}
 801b966:	3740      	adds	r7, #64	; 0x40
 801b968:	46bd      	mov	sp, r7
 801b96a:	bd80      	pop	{r7, pc}

0801b96c <lv_img_get_style>:
 * @param img pointer to an image object
 * @param type which style should be get (can be only `LV_IMG_STYLE_MAIN`)
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b082      	sub	sp, #8
 801b970:	af00      	add	r7, sp, #0
 801b972:	6078      	str	r0, [r7, #4]
 801b974:	460b      	mov	r3, r1
 801b976:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 801b978:	6878      	ldr	r0, [r7, #4]
 801b97a:	f7ee f993 	bl	8009ca4 <lv_obj_get_style>
 801b97e:	4603      	mov	r3, r0
}
 801b980:	4618      	mov	r0, r3
 801b982:	3708      	adds	r7, #8
 801b984:	46bd      	mov	sp, r7
 801b986:	bd80      	pop	{r7, pc}

0801b988 <lv_img_create>:
 * @param par pointer to an object, it will be the parent of the new button
 * @param copy pointer to a image object, if not NULL then the new object will be copied from it
 * @return pointer to the created image
 */
lv_obj_t * lv_img_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	b086      	sub	sp, #24
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
 801b990:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("image create started");

    lv_obj_t * new_img = NULL;
 801b992:	2300      	movs	r3, #0
 801b994:	617b      	str	r3, [r7, #20]

    /*Create a basic object*/
    new_img = lv_obj_create(par, copy);
 801b996:	6839      	ldr	r1, [r7, #0]
 801b998:	6878      	ldr	r0, [r7, #4]
 801b99a:	f7ec fcd5 	bl	8008348 <lv_obj_create>
 801b99e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_img);
 801b9a0:	697b      	ldr	r3, [r7, #20]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d100      	bne.n	801b9a8 <lv_img_create+0x20>
 801b9a6:	e7fe      	b.n	801b9a6 <lv_img_create+0x1e>
    if(new_img == NULL) return NULL;
 801b9a8:	697b      	ldr	r3, [r7, #20]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d101      	bne.n	801b9b2 <lv_img_create+0x2a>
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	e07b      	b.n	801baaa <lv_img_create+0x122>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 801b9b2:	4b40      	ldr	r3, [pc, #256]	; (801bab4 <lv_img_create+0x12c>)
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d105      	bne.n	801b9c6 <lv_img_create+0x3e>
 801b9ba:	6978      	ldr	r0, [r7, #20]
 801b9bc:	f7ee fa15 	bl	8009dea <lv_obj_get_signal_cb>
 801b9c0:	4602      	mov	r2, r0
 801b9c2:	4b3c      	ldr	r3, [pc, #240]	; (801bab4 <lv_img_create+0x12c>)
 801b9c4:	601a      	str	r2, [r3, #0]

    /*Extend the basic object to image object*/
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 801b9c6:	2110      	movs	r1, #16
 801b9c8:	6978      	ldr	r0, [r7, #20]
 801b9ca:	f7ee f859 	bl	8009a80 <lv_obj_allocate_ext_attr>
 801b9ce:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801b9d0:	693b      	ldr	r3, [r7, #16]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d100      	bne.n	801b9d8 <lv_img_create+0x50>
 801b9d6:	e7fe      	b.n	801b9d6 <lv_img_create+0x4e>
    if(ext == NULL) return NULL;
 801b9d8:	693b      	ldr	r3, [r7, #16]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d101      	bne.n	801b9e2 <lv_img_create+0x5a>
 801b9de:	2300      	movs	r3, #0
 801b9e0:	e063      	b.n	801baaa <lv_img_create+0x122>

    ext->src       = NULL;
 801b9e2:	693b      	ldr	r3, [r7, #16]
 801b9e4:	2200      	movs	r2, #0
 801b9e6:	601a      	str	r2, [r3, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 801b9e8:	693a      	ldr	r2, [r7, #16]
 801b9ea:	7b13      	ldrb	r3, [r2, #12]
 801b9ec:	f043 0303 	orr.w	r3, r3, #3
 801b9f0:	7313      	strb	r3, [r2, #12]
    ext->cf        = LV_IMG_CF_UNKNOWN;
 801b9f2:	693a      	ldr	r2, [r7, #16]
 801b9f4:	7b13      	ldrb	r3, [r2, #12]
 801b9f6:	f36f 03c7 	bfc	r3, #3, #5
 801b9fa:	7313      	strb	r3, [r2, #12]
    ext->w         = lv_obj_get_width(new_img);
 801b9fc:	6978      	ldr	r0, [r7, #20]
 801b9fe:	f7ee f921 	bl	8009c44 <lv_obj_get_width>
 801ba02:	4603      	mov	r3, r0
 801ba04:	461a      	mov	r2, r3
 801ba06:	693b      	ldr	r3, [r7, #16]
 801ba08:	811a      	strh	r2, [r3, #8]
    ext->h         = lv_obj_get_height(new_img);
 801ba0a:	6978      	ldr	r0, [r7, #20]
 801ba0c:	f7ee f928 	bl	8009c60 <lv_obj_get_height>
 801ba10:	4603      	mov	r3, r0
 801ba12:	461a      	mov	r2, r3
 801ba14:	693b      	ldr	r3, [r7, #16]
 801ba16:	815a      	strh	r2, [r3, #10]
    ext->auto_size = 1;
 801ba18:	693a      	ldr	r2, [r7, #16]
 801ba1a:	7b13      	ldrb	r3, [r2, #12]
 801ba1c:	f043 0304 	orr.w	r3, r3, #4
 801ba20:	7313      	strb	r3, [r2, #12]
    ext->offset.x  = 0;
 801ba22:	693b      	ldr	r3, [r7, #16]
 801ba24:	2200      	movs	r2, #0
 801ba26:	809a      	strh	r2, [r3, #4]
    ext->offset.y  = 0;
 801ba28:	693b      	ldr	r3, [r7, #16]
 801ba2a:	2200      	movs	r2, #0
 801ba2c:	80da      	strh	r2, [r3, #6]

    /*Init the new object*/
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 801ba2e:	4922      	ldr	r1, [pc, #136]	; (801bab8 <lv_img_create+0x130>)
 801ba30:	6978      	ldr	r0, [r7, #20]
 801ba32:	f7ee f809 	bl	8009a48 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 801ba36:	4921      	ldr	r1, [pc, #132]	; (801babc <lv_img_create+0x134>)
 801ba38:	6978      	ldr	r0, [r7, #20]
 801ba3a:	f7ee f813 	bl	8009a64 <lv_obj_set_design_cb>

    if(copy == NULL) {
 801ba3e:	683b      	ldr	r3, [r7, #0]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d11a      	bne.n	801ba7a <lv_img_create+0xf2>
        lv_obj_set_click(new_img, false);
 801ba44:	2100      	movs	r1, #0
 801ba46:	6978      	ldr	r0, [r7, #20]
 801ba48:	f7ed fedd 	bl	8009806 <lv_obj_set_click>
        /* Enable auto size for non screens
         * because image screens are wallpapers
         * and must be screen sized*/
        if(par != NULL) {
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d009      	beq.n	801ba66 <lv_img_create+0xde>
            ext->auto_size = 1;
 801ba52:	693a      	ldr	r2, [r7, #16]
 801ba54:	7b13      	ldrb	r3, [r2, #12]
 801ba56:	f043 0304 	orr.w	r3, r3, #4
 801ba5a:	7313      	strb	r3, [r2, #12]
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 801ba5c:	2100      	movs	r1, #0
 801ba5e:	6978      	ldr	r0, [r7, #20]
 801ba60:	f7ed feab 	bl	80097ba <lv_obj_set_style>
 801ba64:	e020      	b.n	801baa8 <lv_img_create+0x120>
        } else {
            ext->auto_size = 0;
 801ba66:	693a      	ldr	r2, [r7, #16]
 801ba68:	7b13      	ldrb	r3, [r2, #12]
 801ba6a:	f36f 0382 	bfc	r3, #2, #1
 801ba6e:	7313      	strb	r3, [r2, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 801ba70:	4913      	ldr	r1, [pc, #76]	; (801bac0 <lv_img_create+0x138>)
 801ba72:	6978      	ldr	r0, [r7, #20]
 801ba74:	f7ed fea1 	bl	80097ba <lv_obj_set_style>
 801ba78:	e016      	b.n	801baa8 <lv_img_create+0x120>
        }
    } else {
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801ba7a:	6838      	ldr	r0, [r7, #0]
 801ba7c:	f7ee f9cd 	bl	8009e1a <lv_obj_get_ext_attr>
 801ba80:	60f8      	str	r0, [r7, #12]
        ext->auto_size          = copy_ext->auto_size;
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	7b1b      	ldrb	r3, [r3, #12]
 801ba86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801ba8a:	b2d9      	uxtb	r1, r3
 801ba8c:	693a      	ldr	r2, [r7, #16]
 801ba8e:	7b13      	ldrb	r3, [r2, #12]
 801ba90:	f361 0382 	bfi	r3, r1, #2, #1
 801ba94:	7313      	strb	r3, [r2, #12]
        lv_img_set_src(new_img, copy_ext->src);
 801ba96:	68fb      	ldr	r3, [r7, #12]
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	4619      	mov	r1, r3
 801ba9c:	6978      	ldr	r0, [r7, #20]
 801ba9e:	f000 f811 	bl	801bac4 <lv_img_set_src>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_img);
 801baa2:	6978      	ldr	r0, [r7, #20]
 801baa4:	f7ed fe9b 	bl	80097de <lv_obj_refresh_style>
    }

    LV_LOG_INFO("image created");

    return new_img;
 801baa8:	697b      	ldr	r3, [r7, #20]
}
 801baaa:	4618      	mov	r0, r3
 801baac:	3718      	adds	r7, #24
 801baae:	46bd      	mov	sp, r7
 801bab0:	bd80      	pop	{r7, pc}
 801bab2:	bf00      	nop
 801bab4:	200177d8 	.word	0x200177d8
 801bab8:	0801bf19 	.word	0x0801bf19
 801babc:	0801bcc3 	.word	0x0801bcc3
 801bac0:	2001ba10 	.word	0x2001ba10

0801bac4 <lv_img_set_src>:
 * Set the pixel map to display by the image
 * @param img pointer to an image object
 * @param data the image data
 */
void lv_img_set_src(lv_obj_t * img, const void * src_img)
{
 801bac4:	b590      	push	{r4, r7, lr}
 801bac6:	b08d      	sub	sp, #52	; 0x34
 801bac8:	af04      	add	r7, sp, #16
 801baca:	6078      	str	r0, [r7, #4]
 801bacc:	6039      	str	r1, [r7, #0]
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 801bace:	6838      	ldr	r0, [r7, #0]
 801bad0:	f7f1 fa1a 	bl	800cf08 <lv_img_src_get_type>
 801bad4:	4603      	mov	r3, r0
 801bad6:	77fb      	strb	r3, [r7, #31]
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 801bad8:	6878      	ldr	r0, [r7, #4]
 801bada:	f7ee f99e 	bl	8009e1a <lv_obj_get_ext_attr>
 801bade:	61b8      	str	r0, [r7, #24]
        default: LV_LOG_WARN("lv_img_set_src: unknown type");
    }
#endif

    /*If the new source type is unknown free the memories of the old source*/
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 801bae0:	7ffb      	ldrb	r3, [r7, #31]
 801bae2:	2b03      	cmp	r3, #3
 801bae4:	d11b      	bne.n	801bb1e <lv_img_set_src+0x5a>
        LV_LOG_WARN("lv_img_set_src: unknown image type");
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 801bae6:	69bb      	ldr	r3, [r7, #24]
 801bae8:	7b1b      	ldrb	r3, [r3, #12]
 801baea:	f003 0303 	and.w	r3, r3, #3
 801baee:	b2db      	uxtb	r3, r3
 801baf0:	2b02      	cmp	r3, #2
 801baf2:	d006      	beq.n	801bb02 <lv_img_set_src+0x3e>
 801baf4:	69bb      	ldr	r3, [r7, #24]
 801baf6:	7b1b      	ldrb	r3, [r3, #12]
 801baf8:	f003 0303 	and.w	r3, r3, #3
 801bafc:	b2db      	uxtb	r3, r3
 801bafe:	2b01      	cmp	r3, #1
 801bb00:	d104      	bne.n	801bb0c <lv_img_set_src+0x48>
            lv_mem_free(ext->src);
 801bb02:	69bb      	ldr	r3, [r7, #24]
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	4618      	mov	r0, r3
 801bb08:	f7fa fd68 	bl	80165dc <lv_mem_free>
        }
        ext->src      = NULL;
 801bb0c:	69bb      	ldr	r3, [r7, #24]
 801bb0e:	2200      	movs	r2, #0
 801bb10:	601a      	str	r2, [r3, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 801bb12:	69ba      	ldr	r2, [r7, #24]
 801bb14:	7b13      	ldrb	r3, [r2, #12]
 801bb16:	f043 0303 	orr.w	r3, r3, #3
 801bb1a:	7313      	strb	r3, [r2, #12]
        return;
 801bb1c:	e0b8      	b.n	801bc90 <lv_img_set_src+0x1cc>
    }

    lv_img_header_t header;
    lv_img_decoder_get_info(src_img, &header);
 801bb1e:	f107 030c 	add.w	r3, r7, #12
 801bb22:	4619      	mov	r1, r3
 801bb24:	6838      	ldr	r0, [r7, #0]
 801bb26:	f7f7 ff3b 	bl	80139a0 <lv_img_decoder_get_info>

    /*Save the source*/
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801bb2a:	7ffb      	ldrb	r3, [r7, #31]
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d116      	bne.n	801bb5e <lv_img_set_src+0x9a>
        LV_LOG_INFO("lv_img_set_src:  `LV_IMG_SRC_VARIABLE` type found");

        /*If memory was allocated because of the previous `src_type` then free it*/
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801bb30:	69bb      	ldr	r3, [r7, #24]
 801bb32:	7b1b      	ldrb	r3, [r3, #12]
 801bb34:	f003 0303 	and.w	r3, r3, #3
 801bb38:	b2db      	uxtb	r3, r3
 801bb3a:	2b01      	cmp	r3, #1
 801bb3c:	d006      	beq.n	801bb4c <lv_img_set_src+0x88>
 801bb3e:	69bb      	ldr	r3, [r7, #24]
 801bb40:	7b1b      	ldrb	r3, [r3, #12]
 801bb42:	f003 0303 	and.w	r3, r3, #3
 801bb46:	b2db      	uxtb	r3, r3
 801bb48:	2b02      	cmp	r3, #2
 801bb4a:	d104      	bne.n	801bb56 <lv_img_set_src+0x92>
            lv_mem_free(ext->src);
 801bb4c:	69bb      	ldr	r3, [r7, #24]
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	4618      	mov	r0, r3
 801bb52:	f7fa fd43 	bl	80165dc <lv_mem_free>
        }
        ext->src = src_img;
 801bb56:	69bb      	ldr	r3, [r7, #24]
 801bb58:	683a      	ldr	r2, [r7, #0]
 801bb5a:	601a      	str	r2, [r3, #0]
 801bb5c:	e034      	b.n	801bbc8 <lv_img_set_src+0x104>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 801bb5e:	7ffb      	ldrb	r3, [r7, #31]
 801bb60:	2b01      	cmp	r3, #1
 801bb62:	d002      	beq.n	801bb6a <lv_img_set_src+0xa6>
 801bb64:	7ffb      	ldrb	r3, [r7, #31]
 801bb66:	2b02      	cmp	r3, #2
 801bb68:	d12e      	bne.n	801bbc8 <lv_img_set_src+0x104>
        /* If the new and the old src are the same then it was only a refresh.*/
        if(ext->src != src_img) {
 801bb6a:	69bb      	ldr	r3, [r7, #24]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	683a      	ldr	r2, [r7, #0]
 801bb70:	429a      	cmp	r2, r3
 801bb72:	d029      	beq.n	801bbc8 <lv_img_set_src+0x104>
            /*If memory was allocated because of the previous `src_type` then free it*/
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801bb74:	69bb      	ldr	r3, [r7, #24]
 801bb76:	7b1b      	ldrb	r3, [r3, #12]
 801bb78:	f003 0303 	and.w	r3, r3, #3
 801bb7c:	b2db      	uxtb	r3, r3
 801bb7e:	2b01      	cmp	r3, #1
 801bb80:	d006      	beq.n	801bb90 <lv_img_set_src+0xcc>
 801bb82:	69bb      	ldr	r3, [r7, #24]
 801bb84:	7b1b      	ldrb	r3, [r3, #12]
 801bb86:	f003 0303 	and.w	r3, r3, #3
 801bb8a:	b2db      	uxtb	r3, r3
 801bb8c:	2b02      	cmp	r3, #2
 801bb8e:	d104      	bne.n	801bb9a <lv_img_set_src+0xd6>
                lv_mem_free(ext->src);
 801bb90:	69bb      	ldr	r3, [r7, #24]
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	4618      	mov	r0, r3
 801bb96:	f7fa fd21 	bl	80165dc <lv_mem_free>
            }
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 801bb9a:	6838      	ldr	r0, [r7, #0]
 801bb9c:	f7e4 fb22 	bl	80001e4 <strlen>
 801bba0:	4603      	mov	r3, r0
 801bba2:	3301      	adds	r3, #1
 801bba4:	4618      	mov	r0, r3
 801bba6:	f7fa fcd9 	bl	801655c <lv_mem_alloc>
 801bbaa:	6178      	str	r0, [r7, #20]
            lv_mem_assert(new_str);
 801bbac:	697b      	ldr	r3, [r7, #20]
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d100      	bne.n	801bbb4 <lv_img_set_src+0xf0>
 801bbb2:	e7fe      	b.n	801bbb2 <lv_img_set_src+0xee>
            if(new_str == NULL) return;
 801bbb4:	697b      	ldr	r3, [r7, #20]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d069      	beq.n	801bc8e <lv_img_set_src+0x1ca>
            strcpy(new_str, src_img);
 801bbba:	6839      	ldr	r1, [r7, #0]
 801bbbc:	6978      	ldr	r0, [r7, #20]
 801bbbe:	f00e fe81 	bl	802a8c4 <strcpy>
            ext->src = new_str;
 801bbc2:	69bb      	ldr	r3, [r7, #24]
 801bbc4:	697a      	ldr	r2, [r7, #20]
 801bbc6:	601a      	str	r2, [r3, #0]
        }
    }

    if(src_type == LV_IMG_SRC_SYMBOL) {
 801bbc8:	7ffb      	ldrb	r3, [r7, #31]
 801bbca:	2b02      	cmp	r3, #2
 801bbcc:	d12b      	bne.n	801bc26 <lv_img_set_src+0x162>
        /*`lv_img_dsc_get_info` couldn't set the with and height of a font so set it here*/
        const lv_style_t * style = lv_img_get_style(img, LV_IMG_STYLE_MAIN);
 801bbce:	2100      	movs	r1, #0
 801bbd0:	6878      	ldr	r0, [r7, #4]
 801bbd2:	f7ff fecb 	bl	801b96c <lv_img_get_style>
 801bbd6:	6138      	str	r0, [r7, #16]
        lv_point_t size;
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 801bbd8:	693b      	ldr	r3, [r7, #16]
 801bbda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801bbdc:	693b      	ldr	r3, [r7, #16]
 801bbde:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 801bbe2:	693b      	ldr	r3, [r7, #16]
 801bbe4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801bbe8:	f107 0008 	add.w	r0, r7, #8
 801bbec:	2200      	movs	r2, #0
 801bbee:	9202      	str	r2, [sp, #8]
 801bbf0:	f647 4218 	movw	r2, #31768	; 0x7c18
 801bbf4:	9201      	str	r2, [sp, #4]
 801bbf6:	9300      	str	r3, [sp, #0]
 801bbf8:	4623      	mov	r3, r4
 801bbfa:	460a      	mov	r2, r1
 801bbfc:	6839      	ldr	r1, [r7, #0]
 801bbfe:	f7fa fff9 	bl	8016bf4 <lv_txt_get_size>
                        LV_COORD_MAX, LV_TXT_FLAG_NONE);
        header.w = size.x;
 801bc02:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bc06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc0a:	b29a      	uxth	r2, r3
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	f362 2394 	bfi	r3, r2, #10, #11
 801bc12:	60fb      	str	r3, [r7, #12]
        header.h = size.y;
 801bc14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801bc18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc1c:	b29a      	uxth	r2, r3
 801bc1e:	89fb      	ldrh	r3, [r7, #14]
 801bc20:	f362 134f 	bfi	r3, r2, #5, #11
 801bc24:	81fb      	strh	r3, [r7, #14]
    }

    ext->src_type = src_type;
 801bc26:	7ffb      	ldrb	r3, [r7, #31]
 801bc28:	f003 0303 	and.w	r3, r3, #3
 801bc2c:	b2d9      	uxtb	r1, r3
 801bc2e:	69ba      	ldr	r2, [r7, #24]
 801bc30:	7b13      	ldrb	r3, [r2, #12]
 801bc32:	f361 0301 	bfi	r3, r1, #0, #2
 801bc36:	7313      	strb	r3, [r2, #12]
    ext->w        = header.w;
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801bc3e:	b29b      	uxth	r3, r3
 801bc40:	b21a      	sxth	r2, r3
 801bc42:	69bb      	ldr	r3, [r7, #24]
 801bc44:	811a      	strh	r2, [r3, #8]
    ext->h        = header.h;
 801bc46:	89fb      	ldrh	r3, [r7, #14]
 801bc48:	f3c3 134a 	ubfx	r3, r3, #5, #11
 801bc4c:	b29b      	uxth	r3, r3
 801bc4e:	b21a      	sxth	r2, r3
 801bc50:	69bb      	ldr	r3, [r7, #24]
 801bc52:	815a      	strh	r2, [r3, #10]
    ext->cf       = header.cf;
 801bc54:	7b3b      	ldrb	r3, [r7, #12]
 801bc56:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801bc5a:	b2d9      	uxtb	r1, r3
 801bc5c:	69ba      	ldr	r2, [r7, #24]
 801bc5e:	7b13      	ldrb	r3, [r2, #12]
 801bc60:	f361 03c7 	bfi	r3, r1, #3, #5
 801bc64:	7313      	strb	r3, [r2, #12]

    if(lv_img_get_auto_size(img) != false) {
 801bc66:	6878      	ldr	r0, [r7, #4]
 801bc68:	f000 f815 	bl	801bc96 <lv_img_get_auto_size>
 801bc6c:	4603      	mov	r3, r0
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d009      	beq.n	801bc86 <lv_img_set_src+0x1c2>
        lv_obj_set_size(img, ext->w, ext->h);
 801bc72:	69bb      	ldr	r3, [r7, #24]
 801bc74:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bc78:	69bb      	ldr	r3, [r7, #24]
 801bc7a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801bc7e:	461a      	mov	r2, r3
 801bc80:	6878      	ldr	r0, [r7, #4]
 801bc82:	f7ed f852 	bl	8008d2a <lv_obj_set_size>
    }

    lv_obj_invalidate(img);
 801bc86:	6878      	ldr	r0, [r7, #4]
 801bc88:	f7ec fe9b 	bl	80089c2 <lv_obj_invalidate>
 801bc8c:	e000      	b.n	801bc90 <lv_img_set_src+0x1cc>
            if(new_str == NULL) return;
 801bc8e:	bf00      	nop
}
 801bc90:	3724      	adds	r7, #36	; 0x24
 801bc92:	46bd      	mov	sp, r7
 801bc94:	bd90      	pop	{r4, r7, pc}

0801bc96 <lv_img_get_auto_size>:
 * Get the auto size enable attribute
 * @param img pointer to an image
 * @return true: auto size is enabled, false: auto size is disabled
 */
bool lv_img_get_auto_size(const lv_obj_t * img)
{
 801bc96:	b580      	push	{r7, lr}
 801bc98:	b084      	sub	sp, #16
 801bc9a:	af00      	add	r7, sp, #0
 801bc9c:	6078      	str	r0, [r7, #4]
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 801bc9e:	6878      	ldr	r0, [r7, #4]
 801bca0:	f7ee f8bb 	bl	8009e1a <lv_obj_get_ext_attr>
 801bca4:	60f8      	str	r0, [r7, #12]

    return ext->auto_size == 0 ? false : true;
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	7b1b      	ldrb	r3, [r3, #12]
 801bcaa:	f003 0304 	and.w	r3, r3, #4
 801bcae:	b2db      	uxtb	r3, r3
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	bf14      	ite	ne
 801bcb4:	2301      	movne	r3, #1
 801bcb6:	2300      	moveq	r3, #0
 801bcb8:	b2db      	uxtb	r3, r3
}
 801bcba:	4618      	mov	r0, r3
 801bcbc:	3710      	adds	r7, #16
 801bcbe:	46bd      	mov	sp, r7
 801bcc0:	bd80      	pop	{r7, pc}

0801bcc2 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 801bcc2:	b590      	push	{r4, r7, lr}
 801bcc4:	b0a3      	sub	sp, #140	; 0x8c
 801bcc6:	af06      	add	r7, sp, #24
 801bcc8:	60f8      	str	r0, [r7, #12]
 801bcca:	60b9      	str	r1, [r7, #8]
 801bccc:	4613      	mov	r3, r2
 801bcce:	71fb      	strb	r3, [r7, #7]
    const lv_style_t * style = lv_obj_get_style(img);
 801bcd0:	68f8      	ldr	r0, [r7, #12]
 801bcd2:	f7ed ffe7 	bl	8009ca4 <lv_obj_get_style>
 801bcd6:	66b8      	str	r0, [r7, #104]	; 0x68
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 801bcd8:	68f8      	ldr	r0, [r7, #12]
 801bcda:	f7ee f89e 	bl	8009e1a <lv_obj_get_ext_attr>
 801bcde:	6678      	str	r0, [r7, #100]	; 0x64

    if(mode == LV_DESIGN_COVER_CHK) {
 801bce0:	79fb      	ldrb	r3, [r7, #7]
 801bce2:	2b02      	cmp	r3, #2
 801bce4:	d12c      	bne.n	801bd40 <lv_img_design+0x7e>
        bool cover = false;
 801bce6:	2300      	movs	r3, #0
 801bce8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 801bcec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bcee:	7b1b      	ldrb	r3, [r3, #12]
 801bcf0:	f003 0303 	and.w	r3, r3, #3
 801bcf4:	b2db      	uxtb	r3, r3
 801bcf6:	2b03      	cmp	r3, #3
 801bcf8:	d006      	beq.n	801bd08 <lv_img_design+0x46>
 801bcfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bcfc:	7b1b      	ldrb	r3, [r3, #12]
 801bcfe:	f003 0303 	and.w	r3, r3, #3
 801bd02:	b2db      	uxtb	r3, r3
 801bd04:	2b02      	cmp	r3, #2
 801bd06:	d101      	bne.n	801bd0c <lv_img_design+0x4a>
 801bd08:	2300      	movs	r3, #0
 801bd0a:	e101      	b.n	801bf10 <lv_img_design+0x24e>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 801bd0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd0e:	7b1b      	ldrb	r3, [r3, #12]
 801bd10:	f023 0307 	bic.w	r3, r3, #7
 801bd14:	b2db      	uxtb	r3, r3
 801bd16:	2b20      	cmp	r3, #32
 801bd18:	d006      	beq.n	801bd28 <lv_img_design+0x66>
 801bd1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd1c:	7b1b      	ldrb	r3, [r3, #12]
 801bd1e:	f023 0307 	bic.w	r3, r3, #7
 801bd22:	b2db      	uxtb	r3, r3
 801bd24:	2b08      	cmp	r3, #8
 801bd26:	d108      	bne.n	801bd3a <lv_img_design+0x78>
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	3310      	adds	r3, #16
 801bd2c:	4619      	mov	r1, r3
 801bd2e:	68b8      	ldr	r0, [r7, #8]
 801bd30:	f7f9 fee5 	bl	8015afe <lv_area_is_in>
 801bd34:	4603      	mov	r3, r0
 801bd36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        return cover;
 801bd3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801bd3e:	e0e7      	b.n	801bf10 <lv_img_design+0x24e>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801bd40:	79fb      	ldrb	r3, [r7, #7]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	f040 80e3 	bne.w	801bf0e <lv_img_design+0x24c>
        if(ext->h == 0 || ext->w == 0) return true;
 801bd48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd4a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d004      	beq.n	801bd5c <lv_img_design+0x9a>
 801bd52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d101      	bne.n	801bd60 <lv_img_design+0x9e>
 801bd5c:	2301      	movs	r3, #1
 801bd5e:	e0d7      	b.n	801bf10 <lv_img_design+0x24e>
        lv_area_t coords;
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 801bd60:	68f8      	ldr	r0, [r7, #12]
 801bd62:	f7ee f80c 	bl	8009d7e <lv_obj_get_opa_scale>
 801bd66:	4603      	mov	r3, r0
 801bd68:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

        lv_obj_get_coords(img, &coords);
 801bd6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bd70:	4619      	mov	r1, r3
 801bd72:	68f8      	ldr	r0, [r7, #12]
 801bd74:	f7ed ff25 	bl	8009bc2 <lv_obj_get_coords>

        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 801bd78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd7a:	7b1b      	ldrb	r3, [r3, #12]
 801bd7c:	f003 0303 	and.w	r3, r3, #3
 801bd80:	b2db      	uxtb	r3, r3
 801bd82:	2b01      	cmp	r3, #1
 801bd84:	d007      	beq.n	801bd96 <lv_img_design+0xd4>
 801bd86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd88:	7b1b      	ldrb	r3, [r3, #12]
 801bd8a:	f003 0303 	and.w	r3, r3, #3
 801bd8e:	b2db      	uxtb	r3, r3
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	f040 8086 	bne.w	801bea2 <lv_img_design+0x1e0>
            coords.x1 -= ext->offset.x;
 801bd96:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801bd9a:	b29a      	uxth	r2, r3
 801bd9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bda2:	b29b      	uxth	r3, r3
 801bda4:	1ad3      	subs	r3, r2, r3
 801bda6:	b29b      	uxth	r3, r3
 801bda8:	b21b      	sxth	r3, r3
 801bdaa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            coords.y1 -= ext->offset.y;
 801bdae:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801bdb2:	b29a      	uxth	r2, r3
 801bdb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bdb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801bdba:	b29b      	uxth	r3, r3
 801bdbc:	1ad3      	subs	r3, r2, r3
 801bdbe:	b29b      	uxth	r3, r3
 801bdc0:	b21b      	sxth	r3, r3
 801bdc2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            LV_LOG_TRACE("lv_img_design: start to draw image");
            lv_area_t cords_tmp;
            cords_tmp.y1 = coords.y1;
 801bdc6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801bdca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 801bdce:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801bdd2:	b29a      	uxth	r2, r3
 801bdd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bdd6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801bdda:	b29b      	uxth	r3, r3
 801bddc:	4413      	add	r3, r2
 801bdde:	b29b      	uxth	r3, r3
 801bde0:	3b01      	subs	r3, #1
 801bde2:	b29b      	uxth	r3, r3
 801bde4:	b21b      	sxth	r3, r3
 801bde6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 801bdea:	e053      	b.n	801be94 <lv_img_design+0x1d2>
                cords_tmp.x1 = coords.x1;
 801bdec:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801bdf0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 801bdf4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801bdf8:	b29a      	uxth	r2, r3
 801bdfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bdfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801be00:	b29b      	uxth	r3, r3
 801be02:	4413      	add	r3, r2
 801be04:	b29b      	uxth	r3, r3
 801be06:	3b01      	subs	r3, #1
 801be08:	b29b      	uxth	r3, r3
 801be0a:	b21b      	sxth	r3, r3
 801be0c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 801be10:	e022      	b.n	801be58 <lv_img_design+0x196>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 801be12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801be14:	681a      	ldr	r2, [r3, #0]
 801be16:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801be1a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801be1e:	9300      	str	r3, [sp, #0]
 801be20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801be22:	68b9      	ldr	r1, [r7, #8]
 801be24:	f7f0 ff7c 	bl	800cd20 <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 801be28:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801be2c:	b29a      	uxth	r2, r3
 801be2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801be30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801be34:	b29b      	uxth	r3, r3
 801be36:	4413      	add	r3, r2
 801be38:	b29b      	uxth	r3, r3
 801be3a:	b21b      	sxth	r3, r3
 801be3c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 801be40:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801be44:	b29a      	uxth	r2, r3
 801be46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801be48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801be4c:	b29b      	uxth	r3, r3
 801be4e:	4413      	add	r3, r2
 801be50:	b29b      	uxth	r3, r3
 801be52:	b21b      	sxth	r3, r3
 801be54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801be58:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 801be5c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801be60:	429a      	cmp	r2, r3
 801be62:	dbd6      	blt.n	801be12 <lv_img_design+0x150>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 801be64:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801be68:	b29a      	uxth	r2, r3
 801be6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801be6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801be70:	b29b      	uxth	r3, r3
 801be72:	4413      	add	r3, r2
 801be74:	b29b      	uxth	r3, r3
 801be76:	b21b      	sxth	r3, r3
 801be78:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801be7c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801be80:	b29a      	uxth	r2, r3
 801be82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801be84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801be88:	b29b      	uxth	r3, r3
 801be8a:	4413      	add	r3, r2
 801be8c:	b29b      	uxth	r3, r3
 801be8e:	b21b      	sxth	r3, r3
 801be90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801be94:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 801be98:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801be9c:	429a      	cmp	r2, r3
 801be9e:	dba5      	blt.n	801bdec <lv_img_design+0x12a>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 801bea0:	e035      	b.n	801bf0e <lv_img_design+0x24c>
                }
            }
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 801bea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bea4:	7b1b      	ldrb	r3, [r3, #12]
 801bea6:	f003 0303 	and.w	r3, r3, #3
 801beaa:	b2db      	uxtb	r3, r3
 801beac:	2b02      	cmp	r3, #2
 801beae:	d123      	bne.n	801bef8 <lv_img_design+0x236>
            LV_LOG_TRACE("lv_img_design: start to draw symbol");
            lv_style_t style_mod;
            lv_style_copy(&style_mod, style);
 801beb0:	f107 0314 	add.w	r3, r7, #20
 801beb4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801beb6:	4618      	mov	r0, r3
 801beb8:	f7ef fa1e 	bl	800b2f8 <lv_style_copy>
            style_mod.text.color = style->image.color;
 801bebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bebe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801bec0:	86bb      	strh	r3, [r7, #52]	; 0x34
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 801bec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	f897 4063 	ldrb.w	r4, [r7, #99]	; 0x63
 801beca:	f107 0114 	add.w	r1, r7, #20
 801bece:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801bed2:	2200      	movs	r2, #0
 801bed4:	9205      	str	r2, [sp, #20]
 801bed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801beda:	9204      	str	r2, [sp, #16]
 801bedc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bee0:	9203      	str	r2, [sp, #12]
 801bee2:	2200      	movs	r2, #0
 801bee4:	9202      	str	r2, [sp, #8]
 801bee6:	2200      	movs	r2, #0
 801bee8:	9201      	str	r2, [sp, #4]
 801beea:	9300      	str	r3, [sp, #0]
 801beec:	4623      	mov	r3, r4
 801beee:	460a      	mov	r2, r1
 801bef0:	68b9      	ldr	r1, [r7, #8]
 801bef2:	f7f1 f9ad 	bl	800d250 <lv_draw_label>
 801bef6:	e00a      	b.n	801bf0e <lv_img_design+0x24c>
        } else {
            /*Trigger the error handler of image drawer*/
            LV_LOG_WARN("lv_img_design: image source type is unknown");
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	f103 0010 	add.w	r0, r3, #16
 801befe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801bf02:	9300      	str	r3, [sp, #0]
 801bf04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bf06:	2200      	movs	r2, #0
 801bf08:	68b9      	ldr	r1, [r7, #8]
 801bf0a:	f7f0 ff09 	bl	800cd20 <lv_draw_img>
        }
    }

    return true;
 801bf0e:	2301      	movs	r3, #1
}
 801bf10:	4618      	mov	r0, r3
 801bf12:	3774      	adds	r7, #116	; 0x74
 801bf14:	46bd      	mov	sp, r7
 801bf16:	bd90      	pop	{r4, r7, pc}

0801bf18 <lv_img_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
 801bf18:	b580      	push	{r7, lr}
 801bf1a:	b088      	sub	sp, #32
 801bf1c:	af00      	add	r7, sp, #0
 801bf1e:	60f8      	str	r0, [r7, #12]
 801bf20:	460b      	mov	r3, r1
 801bf22:	607a      	str	r2, [r7, #4]
 801bf24:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 801bf26:	4b30      	ldr	r3, [pc, #192]	; (801bfe8 <lv_img_signal+0xd0>)
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	7af9      	ldrb	r1, [r7, #11]
 801bf2c:	687a      	ldr	r2, [r7, #4]
 801bf2e:	68f8      	ldr	r0, [r7, #12]
 801bf30:	4798      	blx	r3
 801bf32:	4603      	mov	r3, r0
 801bf34:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801bf36:	7fbb      	ldrb	r3, [r7, #30]
 801bf38:	2b01      	cmp	r3, #1
 801bf3a:	d001      	beq.n	801bf40 <lv_img_signal+0x28>
 801bf3c:	7fbb      	ldrb	r3, [r7, #30]
 801bf3e:	e04f      	b.n	801bfe0 <lv_img_signal+0xc8>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 801bf40:	68f8      	ldr	r0, [r7, #12]
 801bf42:	f7ed ff6a 	bl	8009e1a <lv_obj_get_ext_attr>
 801bf46:	61b8      	str	r0, [r7, #24]
    if(sign == LV_SIGNAL_CLEANUP) {
 801bf48:	7afb      	ldrb	r3, [r7, #11]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d11b      	bne.n	801bf86 <lv_img_signal+0x6e>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801bf4e:	69bb      	ldr	r3, [r7, #24]
 801bf50:	7b1b      	ldrb	r3, [r3, #12]
 801bf52:	f003 0303 	and.w	r3, r3, #3
 801bf56:	b2db      	uxtb	r3, r3
 801bf58:	2b01      	cmp	r3, #1
 801bf5a:	d006      	beq.n	801bf6a <lv_img_signal+0x52>
 801bf5c:	69bb      	ldr	r3, [r7, #24]
 801bf5e:	7b1b      	ldrb	r3, [r3, #12]
 801bf60:	f003 0303 	and.w	r3, r3, #3
 801bf64:	b2db      	uxtb	r3, r3
 801bf66:	2b02      	cmp	r3, #2
 801bf68:	d139      	bne.n	801bfde <lv_img_signal+0xc6>
            lv_mem_free(ext->src);
 801bf6a:	69bb      	ldr	r3, [r7, #24]
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f7fa fb34 	bl	80165dc <lv_mem_free>
            ext->src      = NULL;
 801bf74:	69bb      	ldr	r3, [r7, #24]
 801bf76:	2200      	movs	r2, #0
 801bf78:	601a      	str	r2, [r3, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 801bf7a:	69ba      	ldr	r2, [r7, #24]
 801bf7c:	7b13      	ldrb	r3, [r2, #12]
 801bf7e:	f043 0303 	orr.w	r3, r3, #3
 801bf82:	7313      	strb	r3, [r2, #12]
 801bf84:	e02b      	b.n	801bfde <lv_img_signal+0xc6>
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801bf86:	7afb      	ldrb	r3, [r7, #11]
 801bf88:	2b04      	cmp	r3, #4
 801bf8a:	d10d      	bne.n	801bfa8 <lv_img_signal+0x90>
        /*Refresh the file name to refresh the symbol text size*/
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 801bf8c:	69bb      	ldr	r3, [r7, #24]
 801bf8e:	7b1b      	ldrb	r3, [r3, #12]
 801bf90:	f003 0303 	and.w	r3, r3, #3
 801bf94:	b2db      	uxtb	r3, r3
 801bf96:	2b02      	cmp	r3, #2
 801bf98:	d121      	bne.n	801bfde <lv_img_signal+0xc6>
            lv_img_set_src(img, ext->src);
 801bf9a:	69bb      	ldr	r3, [r7, #24]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	4619      	mov	r1, r3
 801bfa0:	68f8      	ldr	r0, [r7, #12]
 801bfa2:	f7ff fd8f 	bl	801bac4 <lv_img_set_src>
 801bfa6:	e01a      	b.n	801bfde <lv_img_signal+0xc6>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801bfa8:	7afb      	ldrb	r3, [r7, #11]
 801bfaa:	2b06      	cmp	r3, #6
 801bfac:	d117      	bne.n	801bfde <lv_img_signal+0xc6>
        lv_obj_type_t * buf = param;
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	617b      	str	r3, [r7, #20]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801bfb2:	2300      	movs	r3, #0
 801bfb4:	77fb      	strb	r3, [r7, #31]
 801bfb6:	e008      	b.n	801bfca <lv_img_signal+0xb2>
            if(buf->type[i] == NULL) break;
 801bfb8:	7ffa      	ldrb	r2, [r7, #31]
 801bfba:	697b      	ldr	r3, [r7, #20]
 801bfbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d006      	beq.n	801bfd2 <lv_img_signal+0xba>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801bfc4:	7ffb      	ldrb	r3, [r7, #31]
 801bfc6:	3301      	adds	r3, #1
 801bfc8:	77fb      	strb	r3, [r7, #31]
 801bfca:	7ffb      	ldrb	r3, [r7, #31]
 801bfcc:	2b06      	cmp	r3, #6
 801bfce:	d9f3      	bls.n	801bfb8 <lv_img_signal+0xa0>
 801bfd0:	e000      	b.n	801bfd4 <lv_img_signal+0xbc>
            if(buf->type[i] == NULL) break;
 801bfd2:	bf00      	nop
        }
        buf->type[i] = "lv_img";
 801bfd4:	7ffa      	ldrb	r2, [r7, #31]
 801bfd6:	697b      	ldr	r3, [r7, #20]
 801bfd8:	4904      	ldr	r1, [pc, #16]	; (801bfec <lv_img_signal+0xd4>)
 801bfda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801bfde:	7fbb      	ldrb	r3, [r7, #30]
}
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	3720      	adds	r7, #32
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	bd80      	pop	{r7, pc}
 801bfe8:	200177d8 	.word	0x200177d8
 801bfec:	0802c928 	.word	0x0802c928

0801bff0 <lv_font_get_line_height>:
{
 801bff0:	b480      	push	{r7}
 801bff2:	b083      	sub	sp, #12
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	7a1b      	ldrb	r3, [r3, #8]
}
 801bffc:	4618      	mov	r0, r3
 801bffe:	370c      	adds	r7, #12
 801c000:	46bd      	mov	sp, r7
 801c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c006:	4770      	bx	lr

0801c008 <lv_area_get_width>:
{
 801c008:	b480      	push	{r7}
 801c00a:	b083      	sub	sp, #12
 801c00c:	af00      	add	r7, sp, #0
 801c00e:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c016:	b29a      	uxth	r2, r3
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c01e:	b29b      	uxth	r3, r3
 801c020:	1ad3      	subs	r3, r2, r3
 801c022:	b29b      	uxth	r3, r3
 801c024:	3301      	adds	r3, #1
 801c026:	b29b      	uxth	r3, r3
 801c028:	b21b      	sxth	r3, r3
}
 801c02a:	4618      	mov	r0, r3
 801c02c:	370c      	adds	r7, #12
 801c02e:	46bd      	mov	sp, r7
 801c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c034:	4770      	bx	lr

0801c036 <lv_area_get_height>:
{
 801c036:	b480      	push	{r7}
 801c038:	b083      	sub	sp, #12
 801c03a:	af00      	add	r7, sp, #0
 801c03c:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c044:	b29a      	uxth	r2, r3
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c04c:	b29b      	uxth	r3, r3
 801c04e:	1ad3      	subs	r3, r2, r3
 801c050:	b29b      	uxth	r3, r3
 801c052:	3301      	adds	r3, #1
 801c054:	b29b      	uxth	r3, r3
 801c056:	b21b      	sxth	r3, r3
}
 801c058:	4618      	mov	r0, r3
 801c05a:	370c      	adds	r7, #12
 801c05c:	46bd      	mov	sp, r7
 801c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c062:	4770      	bx	lr

0801c064 <lv_label_set_style>:
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b084      	sub	sp, #16
 801c068:	af00      	add	r7, sp, #0
 801c06a:	60f8      	str	r0, [r7, #12]
 801c06c:	460b      	mov	r3, r1
 801c06e:	607a      	str	r2, [r7, #4]
 801c070:	72fb      	strb	r3, [r7, #11]
    lv_obj_set_style(label, style);
 801c072:	6879      	ldr	r1, [r7, #4]
 801c074:	68f8      	ldr	r0, [r7, #12]
 801c076:	f7ed fba0 	bl	80097ba <lv_obj_set_style>
}
 801c07a:	bf00      	nop
 801c07c:	3710      	adds	r7, #16
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd80      	pop	{r7, pc}

0801c082 <lv_label_get_style>:
{
 801c082:	b580      	push	{r7, lr}
 801c084:	b082      	sub	sp, #8
 801c086:	af00      	add	r7, sp, #0
 801c088:	6078      	str	r0, [r7, #4]
 801c08a:	460b      	mov	r3, r1
 801c08c:	70fb      	strb	r3, [r7, #3]
    return lv_obj_get_style(label);
 801c08e:	6878      	ldr	r0, [r7, #4]
 801c090:	f7ed fe08 	bl	8009ca4 <lv_obj_get_style>
 801c094:	4603      	mov	r3, r0
}
 801c096:	4618      	mov	r0, r3
 801c098:	3708      	adds	r7, #8
 801c09a:	46bd      	mov	sp, r7
 801c09c:	bd80      	pop	{r7, pc}
	...

0801c0a0 <lv_label_create>:
 * @param par pointer to an object, it will be the parent of the new label
 * @param copy pointer to a button object, if not NULL then the new object will be copied from it
 * @return pointer to the created button
 */
lv_obj_t * lv_label_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801c0a0:	b5b0      	push	{r4, r5, r7, lr}
 801c0a2:	b086      	sub	sp, #24
 801c0a4:	af00      	add	r7, sp, #0
 801c0a6:	6078      	str	r0, [r7, #4]
 801c0a8:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("label create started");

    /*Create a basic object*/
    lv_obj_t * new_label = lv_obj_create(par, copy);
 801c0aa:	6839      	ldr	r1, [r7, #0]
 801c0ac:	6878      	ldr	r0, [r7, #4]
 801c0ae:	f7ec f94b 	bl	8008348 <lv_obj_create>
 801c0b2:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_label);
 801c0b4:	697b      	ldr	r3, [r7, #20]
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d100      	bne.n	801c0bc <lv_label_create+0x1c>
 801c0ba:	e7fe      	b.n	801c0ba <lv_label_create+0x1a>
    if(new_label == NULL) return NULL;
 801c0bc:	697b      	ldr	r3, [r7, #20]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d101      	bne.n	801c0c6 <lv_label_create+0x26>
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	e111      	b.n	801c2ea <lv_label_create+0x24a>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 801c0c6:	4b8b      	ldr	r3, [pc, #556]	; (801c2f4 <lv_label_create+0x254>)
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d105      	bne.n	801c0da <lv_label_create+0x3a>
 801c0ce:	6978      	ldr	r0, [r7, #20]
 801c0d0:	f7ed fe8b 	bl	8009dea <lv_obj_get_signal_cb>
 801c0d4:	4602      	mov	r2, r0
 801c0d6:	4b87      	ldr	r3, [pc, #540]	; (801c2f4 <lv_label_create+0x254>)
 801c0d8:	601a      	str	r2, [r3, #0]

    /*Extend the basic object to a label object*/
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 801c0da:	2120      	movs	r1, #32
 801c0dc:	6978      	ldr	r0, [r7, #20]
 801c0de:	f7ed fccf 	bl	8009a80 <lv_obj_allocate_ext_attr>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 801c0e2:	6978      	ldr	r0, [r7, #20]
 801c0e4:	f7ed fe99 	bl	8009e1a <lv_obj_get_ext_attr>
 801c0e8:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801c0ea:	693b      	ldr	r3, [r7, #16]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d100      	bne.n	801c0f2 <lv_label_create+0x52>
 801c0f0:	e7fe      	b.n	801c0f0 <lv_label_create+0x50>
    if(ext == NULL) return NULL;
 801c0f2:	693b      	ldr	r3, [r7, #16]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d101      	bne.n	801c0fc <lv_label_create+0x5c>
 801c0f8:	2300      	movs	r3, #0
 801c0fa:	e0f6      	b.n	801c2ea <lv_label_create+0x24a>

    ext->text       = NULL;
 801c0fc:	693b      	ldr	r3, [r7, #16]
 801c0fe:	2200      	movs	r2, #0
 801c100:	601a      	str	r2, [r3, #0]
    ext->static_txt = 0;
 801c102:	693a      	ldr	r2, [r7, #16]
 801c104:	7f93      	ldrb	r3, [r2, #30]
 801c106:	f36f 03c3 	bfc	r3, #3, #1
 801c10a:	7793      	strb	r3, [r2, #30]
    ext->recolor    = 0;
 801c10c:	693a      	ldr	r2, [r7, #16]
 801c10e:	7f93      	ldrb	r3, [r2, #30]
 801c110:	f36f 1386 	bfc	r3, #6, #1
 801c114:	7793      	strb	r3, [r2, #30]
    ext->body_draw  = 0;
 801c116:	693a      	ldr	r2, [r7, #16]
 801c118:	7fd3      	ldrb	r3, [r2, #31]
 801c11a:	f36f 0300 	bfc	r3, #0, #1
 801c11e:	77d3      	strb	r3, [r2, #31]
    ext->align      = LV_LABEL_ALIGN_LEFT;
 801c120:	693a      	ldr	r2, [r7, #16]
 801c122:	7f93      	ldrb	r3, [r2, #30]
 801c124:	f36f 1305 	bfc	r3, #4, #2
 801c128:	7793      	strb	r3, [r2, #30]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 801c12a:	693b      	ldr	r3, [r7, #16]
 801c12c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c130:	811a      	strh	r2, [r3, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 801c132:	693a      	ldr	r2, [r7, #16]
 801c134:	7f93      	ldrb	r3, [r2, #30]
 801c136:	f36f 0302 	bfc	r3, #0, #3
 801c13a:	7793      	strb	r3, [r2, #30]
#if LV_USE_ANIMATION
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801c13c:	693b      	ldr	r3, [r7, #16]
 801c13e:	2219      	movs	r2, #25
 801c140:	839a      	strh	r2, [r3, #28]
#endif
    ext->offset.x = 0;
 801c142:	693b      	ldr	r3, [r7, #16]
 801c144:	2200      	movs	r2, #0
 801c146:	815a      	strh	r2, [r3, #10]
    ext->offset.y = 0;
 801c148:	693b      	ldr	r3, [r7, #16]
 801c14a:	2200      	movs	r2, #0
 801c14c:	819a      	strh	r2, [r3, #12]

    ext->hint.line_start = -1;
 801c14e:	693b      	ldr	r3, [r7, #16]
 801c150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c154:	611a      	str	r2, [r3, #16]
    ext->hint.coord_y    = 0;
 801c156:	693b      	ldr	r3, [r7, #16]
 801c158:	2200      	movs	r2, #0
 801c15a:	619a      	str	r2, [r3, #24]
    ext->hint.y          = 0;
 801c15c:	693b      	ldr	r3, [r7, #16]
 801c15e:	2200      	movs	r2, #0
 801c160:	615a      	str	r2, [r3, #20]

#if LV_LABEL_TEXT_SEL
    ext->txt_sel_start = LV_LABEL_TEXT_SEL_OFF;
    ext->txt_sel_end   = LV_LABEL_TEXT_SEL_OFF;
#endif
    ext->dot.tmp_ptr   = NULL;
 801c162:	693b      	ldr	r3, [r7, #16]
 801c164:	2200      	movs	r2, #0
 801c166:	605a      	str	r2, [r3, #4]
    ext->dot_tmp_alloc = 0;
 801c168:	693a      	ldr	r2, [r7, #16]
 801c16a:	7fd3      	ldrb	r3, [r2, #31]
 801c16c:	f36f 0341 	bfc	r3, #1, #1
 801c170:	77d3      	strb	r3, [r2, #31]

    lv_obj_set_design_cb(new_label, lv_label_design);
 801c172:	4961      	ldr	r1, [pc, #388]	; (801c2f8 <lv_label_create+0x258>)
 801c174:	6978      	ldr	r0, [r7, #20]
 801c176:	f7ed fc75 	bl	8009a64 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 801c17a:	4960      	ldr	r1, [pc, #384]	; (801c2fc <lv_label_create+0x25c>)
 801c17c:	6978      	ldr	r0, [r7, #20]
 801c17e:	f7ed fc63 	bl	8009a48 <lv_obj_set_signal_cb>

    /*Init the new label*/
    if(copy == NULL) {
 801c182:	683b      	ldr	r3, [r7, #0]
 801c184:	2b00      	cmp	r3, #0
 801c186:	d111      	bne.n	801c1ac <lv_label_create+0x10c>
        lv_obj_set_click(new_label, false);
 801c188:	2100      	movs	r1, #0
 801c18a:	6978      	ldr	r0, [r7, #20]
 801c18c:	f7ed fb3b 	bl	8009806 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 801c190:	2100      	movs	r1, #0
 801c192:	6978      	ldr	r0, [r7, #20]
 801c194:	f000 f952 	bl	801c43c <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 801c198:	4959      	ldr	r1, [pc, #356]	; (801c300 <lv_label_create+0x260>)
 801c19a:	6978      	ldr	r0, [r7, #20]
 801c19c:	f000 f8b2 	bl	801c304 <lv_label_set_text>
        lv_label_set_style(new_label, LV_LABEL_STYLE_MAIN, NULL); /*Inherit parent's style*/
 801c1a0:	2200      	movs	r2, #0
 801c1a2:	2100      	movs	r1, #0
 801c1a4:	6978      	ldr	r0, [r7, #20]
 801c1a6:	f7ff ff5d 	bl	801c064 <lv_label_set_style>
 801c1aa:	e09d      	b.n	801c2e8 <lv_label_create+0x248>
    }
    /*Copy 'copy' if not NULL*/
    else {
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801c1ac:	6838      	ldr	r0, [r7, #0]
 801c1ae:	f7ed fe34 	bl	8009e1a <lv_obj_get_ext_attr>
 801c1b2:	60f8      	str	r0, [r7, #12]
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 801c1b4:	6838      	ldr	r0, [r7, #0]
 801c1b6:	f000 fa22 	bl	801c5fe <lv_label_get_long_mode>
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	4619      	mov	r1, r3
 801c1be:	6978      	ldr	r0, [r7, #20]
 801c1c0:	f000 f93c 	bl	801c43c <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 801c1c4:	6838      	ldr	r0, [r7, #0]
 801c1c6:	f000 fa3c 	bl	801c642 <lv_label_get_recolor>
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	4619      	mov	r1, r3
 801c1ce:	6978      	ldr	r0, [r7, #20]
 801c1d0:	f000 f9b4 	bl	801c53c <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 801c1d4:	6838      	ldr	r0, [r7, #0]
 801c1d6:	f000 fa4a 	bl	801c66e <lv_label_get_body_draw>
 801c1da:	4603      	mov	r3, r0
 801c1dc:	4619      	mov	r1, r3
 801c1de:	6978      	ldr	r0, [r7, #20]
 801c1e0:	f000 f9d4 	bl	801c58c <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 801c1e4:	6838      	ldr	r0, [r7, #0]
 801c1e6:	f000 fa1b 	bl	801c620 <lv_label_get_align>
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	4619      	mov	r1, r3
 801c1ee:	6978      	ldr	r0, [r7, #20]
 801c1f0:	f000 f980 	bl	801c4f4 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	7f9b      	ldrb	r3, [r3, #30]
 801c1f8:	f003 0308 	and.w	r3, r3, #8
 801c1fc:	b2db      	uxtb	r3, r3
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d108      	bne.n	801c214 <lv_label_create+0x174>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 801c202:	6838      	ldr	r0, [r7, #0]
 801c204:	f000 f9ed 	bl	801c5e2 <lv_label_get_text>
 801c208:	4603      	mov	r3, r0
 801c20a:	4619      	mov	r1, r3
 801c20c:	6978      	ldr	r0, [r7, #20]
 801c20e:	f000 f879 	bl	801c304 <lv_label_set_text>
 801c212:	e007      	b.n	801c224 <lv_label_create+0x184>
        else
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 801c214:	6838      	ldr	r0, [r7, #0]
 801c216:	f000 f9e4 	bl	801c5e2 <lv_label_get_text>
 801c21a:	4603      	mov	r3, r0
 801c21c:	4619      	mov	r1, r3
 801c21e:	6978      	ldr	r0, [r7, #20]
 801c220:	f000 f8dd 	bl	801c3de <lv_label_set_static_text>

        /*In DOT mode save the text byte-to-byte because a '\0' can be in the middle*/
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	7f9b      	ldrb	r3, [r3, #30]
 801c228:	f003 0307 	and.w	r3, r3, #7
 801c22c:	b2db      	uxtb	r3, r3
 801c22e:	2b02      	cmp	r3, #2
 801c230:	d128      	bne.n	801c284 <lv_label_create+0x1e4>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 801c232:	693b      	ldr	r3, [r7, #16]
 801c234:	681c      	ldr	r4, [r3, #0]
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	4618      	mov	r0, r3
 801c23c:	f7fa fa34 	bl	80166a8 <lv_mem_get_size>
 801c240:	4603      	mov	r3, r0
 801c242:	4619      	mov	r1, r3
 801c244:	4620      	mov	r0, r4
 801c246:	f7fa f9f1 	bl	801662c <lv_mem_realloc>
 801c24a:	4602      	mov	r2, r0
 801c24c:	693b      	ldr	r3, [r7, #16]
 801c24e:	601a      	str	r2, [r3, #0]
            lv_mem_assert(ext->text);
 801c250:	693b      	ldr	r3, [r7, #16]
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d100      	bne.n	801c25a <lv_label_create+0x1ba>
 801c258:	e7fe      	b.n	801c258 <lv_label_create+0x1b8>
            if(ext->text == NULL) return NULL;
 801c25a:	693b      	ldr	r3, [r7, #16]
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d101      	bne.n	801c266 <lv_label_create+0x1c6>
 801c262:	2300      	movs	r3, #0
 801c264:	e041      	b.n	801c2ea <lv_label_create+0x24a>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 801c266:	693b      	ldr	r3, [r7, #16]
 801c268:	681c      	ldr	r4, [r3, #0]
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	681d      	ldr	r5, [r3, #0]
 801c26e:	68fb      	ldr	r3, [r7, #12]
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	4618      	mov	r0, r3
 801c274:	f7fa fa18 	bl	80166a8 <lv_mem_get_size>
 801c278:	4603      	mov	r3, r0
 801c27a:	461a      	mov	r2, r3
 801c27c:	4629      	mov	r1, r5
 801c27e:	4620      	mov	r0, r4
 801c280:	f00d fd98 	bl	8029db4 <memcpy>
        }

        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	7fdb      	ldrb	r3, [r3, #31]
 801c288:	f003 0302 	and.w	r3, r3, #2
 801c28c:	b2db      	uxtb	r3, r3
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d013      	beq.n	801c2ba <lv_label_create+0x21a>
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	685b      	ldr	r3, [r3, #4]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d00f      	beq.n	801c2ba <lv_label_create+0x21a>
            int len = strlen(copy_ext->dot.tmp_ptr);
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	685b      	ldr	r3, [r3, #4]
 801c29e:	4618      	mov	r0, r3
 801c2a0:	f7e3 ffa0 	bl	80001e4 <strlen>
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	60bb      	str	r3, [r7, #8]
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 801c2a8:	693b      	ldr	r3, [r7, #16]
 801c2aa:	685b      	ldr	r3, [r3, #4]
 801c2ac:	68ba      	ldr	r2, [r7, #8]
 801c2ae:	b292      	uxth	r2, r2
 801c2b0:	4619      	mov	r1, r3
 801c2b2:	6978      	ldr	r0, [r7, #20]
 801c2b4:	f001 f8ec 	bl	801d490 <lv_label_set_dot_tmp>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 801c2b8:	e005      	b.n	801c2c6 <lv_label_create+0x226>
        } else {
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 801c2ba:	693b      	ldr	r3, [r7, #16]
 801c2bc:	3304      	adds	r3, #4
 801c2be:	68fa      	ldr	r2, [r7, #12]
 801c2c0:	3204      	adds	r2, #4
 801c2c2:	6812      	ldr	r2, [r2, #0]
 801c2c4:	601a      	str	r2, [r3, #0]
        }
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	7fdb      	ldrb	r3, [r3, #31]
 801c2ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c2ce:	b2d9      	uxtb	r1, r3
 801c2d0:	693a      	ldr	r2, [r7, #16]
 801c2d2:	7fd3      	ldrb	r3, [r2, #31]
 801c2d4:	f361 0341 	bfi	r3, r1, #1, #1
 801c2d8:	77d3      	strb	r3, [r2, #31]
        ext->dot_end       = copy_ext->dot_end;
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	891a      	ldrh	r2, [r3, #8]
 801c2de:	693b      	ldr	r3, [r7, #16]
 801c2e0:	811a      	strh	r2, [r3, #8]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_label);
 801c2e2:	6978      	ldr	r0, [r7, #20]
 801c2e4:	f7ed fa7b 	bl	80097de <lv_obj_refresh_style>
    }

    LV_LOG_INFO("label created");

    return new_label;
 801c2e8:	697b      	ldr	r3, [r7, #20]
}
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	3718      	adds	r7, #24
 801c2ee:	46bd      	mov	sp, r7
 801c2f0:	bdb0      	pop	{r4, r5, r7, pc}
 801c2f2:	bf00      	nop
 801c2f4:	200177dc 	.word	0x200177dc
 801c2f8:	0801c915 	.word	0x0801c915
 801c2fc:	0801ccc1 	.word	0x0801ccc1
 801c300:	0802c930 	.word	0x0802c930

0801c304 <lv_label_set_text>:
 * Set a new text for a label. Memory will be allocated to store the text by the label.
 * @param label pointer to a label object
 * @param text '\0' terminated character string. NULL to refresh with the current text.
 */
void lv_label_set_text(lv_obj_t * label, const char * text)
{
 801c304:	b590      	push	{r4, r7, lr}
 801c306:	b085      	sub	sp, #20
 801c308:	af00      	add	r7, sp, #0
 801c30a:	6078      	str	r0, [r7, #4]
 801c30c:	6039      	str	r1, [r7, #0]
    lv_obj_invalidate(label);
 801c30e:	6878      	ldr	r0, [r7, #4]
 801c310:	f7ec fb57 	bl	80089c2 <lv_obj_invalidate>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c314:	6878      	ldr	r0, [r7, #4]
 801c316:	f7ed fd80 	bl	8009e1a <lv_obj_get_ext_attr>
 801c31a:	60f8      	str	r0, [r7, #12]

    /*If text is NULL then refresh */
    if(text == NULL) {
 801c31c:	683b      	ldr	r3, [r7, #0]
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d103      	bne.n	801c32a <lv_label_set_text+0x26>
        lv_label_refr_text(label);
 801c322:	6878      	ldr	r0, [r7, #4]
 801c324:	f000 fd8c 	bl	801ce40 <lv_label_refr_text>
        return;
 801c328:	e056      	b.n	801c3d8 <lv_label_set_text+0xd4>
    }

    if(ext->text == text) {
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	683a      	ldr	r2, [r7, #0]
 801c330:	429a      	cmp	r2, r3
 801c332:	d119      	bne.n	801c368 <lv_label_set_text+0x64>
        /*If set its own text then reallocate it (maybe its size changed)*/
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	681c      	ldr	r4, [r3, #0]
 801c338:	68fb      	ldr	r3, [r7, #12]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	4618      	mov	r0, r3
 801c33e:	f7e3 ff51 	bl	80001e4 <strlen>
 801c342:	4603      	mov	r3, r0
 801c344:	3301      	adds	r3, #1
 801c346:	4619      	mov	r1, r3
 801c348:	4620      	mov	r0, r4
 801c34a:	f7fa f96f 	bl	801662c <lv_mem_realloc>
 801c34e:	4602      	mov	r2, r0
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	601a      	str	r2, [r3, #0]
        lv_mem_assert(ext->text);
 801c354:	68fb      	ldr	r3, [r7, #12]
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d100      	bne.n	801c35e <lv_label_set_text+0x5a>
 801c35c:	e7fe      	b.n	801c35c <lv_label_set_text+0x58>
        if(ext->text == NULL) return;
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d133      	bne.n	801c3ce <lv_label_set_text+0xca>
 801c366:	e037      	b.n	801c3d8 <lv_label_set_text+0xd4>
    } else {
        /*Allocate space for the new text*/
        uint32_t len = strlen(text) + 1;
 801c368:	6838      	ldr	r0, [r7, #0]
 801c36a:	f7e3 ff3b 	bl	80001e4 <strlen>
 801c36e:	4603      	mov	r3, r0
 801c370:	3301      	adds	r3, #1
 801c372:	60bb      	str	r3, [r7, #8]
        if(ext->text != NULL && ext->static_txt == 0) {
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d00e      	beq.n	801c39a <lv_label_set_text+0x96>
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	7f9b      	ldrb	r3, [r3, #30]
 801c380:	f003 0308 	and.w	r3, r3, #8
 801c384:	b2db      	uxtb	r3, r3
 801c386:	2b00      	cmp	r3, #0
 801c388:	d107      	bne.n	801c39a <lv_label_set_text+0x96>
            lv_mem_free(ext->text);
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	4618      	mov	r0, r3
 801c390:	f7fa f924 	bl	80165dc <lv_mem_free>
            ext->text = NULL;
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	2200      	movs	r2, #0
 801c398:	601a      	str	r2, [r3, #0]
        }

        ext->text = lv_mem_alloc(len);
 801c39a:	68b8      	ldr	r0, [r7, #8]
 801c39c:	f7fa f8de 	bl	801655c <lv_mem_alloc>
 801c3a0:	4602      	mov	r2, r0
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	601a      	str	r2, [r3, #0]
        lv_mem_assert(ext->text);
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d100      	bne.n	801c3b0 <lv_label_set_text+0xac>
 801c3ae:	e7fe      	b.n	801c3ae <lv_label_set_text+0xaa>
        if(ext->text == NULL) return;
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d00e      	beq.n	801c3d6 <lv_label_set_text+0xd2>

        strcpy(ext->text, text);
 801c3b8:	68fb      	ldr	r3, [r7, #12]
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	6839      	ldr	r1, [r7, #0]
 801c3be:	4618      	mov	r0, r3
 801c3c0:	f00e fa80 	bl	802a8c4 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 801c3c4:	68fa      	ldr	r2, [r7, #12]
 801c3c6:	7f93      	ldrb	r3, [r2, #30]
 801c3c8:	f36f 03c3 	bfc	r3, #3, #1
 801c3cc:	7793      	strb	r3, [r2, #30]
    }

    lv_label_refr_text(label);
 801c3ce:	6878      	ldr	r0, [r7, #4]
 801c3d0:	f000 fd36 	bl	801ce40 <lv_label_refr_text>
 801c3d4:	e000      	b.n	801c3d8 <lv_label_set_text+0xd4>
        if(ext->text == NULL) return;
 801c3d6:	bf00      	nop
}
 801c3d8:	3714      	adds	r7, #20
 801c3da:	46bd      	mov	sp, r7
 801c3dc:	bd90      	pop	{r4, r7, pc}

0801c3de <lv_label_set_static_text>:
 * has to be 'alive' while the label exist.
 * @param label pointer to a label object
 * @param text pointer to a text. NULL to refresh with the current text.
 */
void lv_label_set_static_text(lv_obj_t * label, const char * text)
{
 801c3de:	b580      	push	{r7, lr}
 801c3e0:	b084      	sub	sp, #16
 801c3e2:	af00      	add	r7, sp, #0
 801c3e4:	6078      	str	r0, [r7, #4]
 801c3e6:	6039      	str	r1, [r7, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c3e8:	6878      	ldr	r0, [r7, #4]
 801c3ea:	f7ed fd16 	bl	8009e1a <lv_obj_get_ext_attr>
 801c3ee:	60f8      	str	r0, [r7, #12]
    if(ext->static_txt == 0 && ext->text != NULL) {
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	7f9b      	ldrb	r3, [r3, #30]
 801c3f4:	f003 0308 	and.w	r3, r3, #8
 801c3f8:	b2db      	uxtb	r3, r3
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d10b      	bne.n	801c416 <lv_label_set_static_text+0x38>
 801c3fe:	68fb      	ldr	r3, [r7, #12]
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	2b00      	cmp	r3, #0
 801c404:	d007      	beq.n	801c416 <lv_label_set_static_text+0x38>
        lv_mem_free(ext->text);
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	4618      	mov	r0, r3
 801c40c:	f7fa f8e6 	bl	80165dc <lv_mem_free>
        ext->text = NULL;
 801c410:	68fb      	ldr	r3, [r7, #12]
 801c412:	2200      	movs	r2, #0
 801c414:	601a      	str	r2, [r3, #0]
    }

    if(text != NULL) {
 801c416:	683b      	ldr	r3, [r7, #0]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d007      	beq.n	801c42c <lv_label_set_static_text+0x4e>
        ext->static_txt = 1;
 801c41c:	68fa      	ldr	r2, [r7, #12]
 801c41e:	7f93      	ldrb	r3, [r2, #30]
 801c420:	f043 0308 	orr.w	r3, r3, #8
 801c424:	7793      	strb	r3, [r2, #30]
        ext->text       = (char *)text;
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	683a      	ldr	r2, [r7, #0]
 801c42a:	601a      	str	r2, [r3, #0]
    }

    lv_label_refr_text(label);
 801c42c:	6878      	ldr	r0, [r7, #4]
 801c42e:	f000 fd07 	bl	801ce40 <lv_label_refr_text>
}
 801c432:	bf00      	nop
 801c434:	3710      	adds	r7, #16
 801c436:	46bd      	mov	sp, r7
 801c438:	bd80      	pop	{r7, pc}
	...

0801c43c <lv_label_set_long_mode>:
 * @param long_mode the new mode from 'lv_label_long_mode' enum.
 *                  In LV_LONG_BREAK/LONG/ROLL the size of the label should be set AFTER this
 * function
 */
void lv_label_set_long_mode(lv_obj_t * label, lv_label_long_mode_t long_mode)
{
 801c43c:	b580      	push	{r7, lr}
 801c43e:	b084      	sub	sp, #16
 801c440:	af00      	add	r7, sp, #0
 801c442:	6078      	str	r0, [r7, #4]
 801c444:	460b      	mov	r3, r1
 801c446:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c448:	6878      	ldr	r0, [r7, #4]
 801c44a:	f7ed fce6 	bl	8009e1a <lv_obj_get_ext_attr>
 801c44e:	60f8      	str	r0, [r7, #12]

#if LV_USE_ANIMATION
    /*Delete the old animation (if exists)*/
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 801c450:	4924      	ldr	r1, [pc, #144]	; (801c4e4 <lv_label_set_long_mode+0xa8>)
 801c452:	6878      	ldr	r0, [r7, #4]
 801c454:	f7f8 ffec 	bl	8015430 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 801c458:	4923      	ldr	r1, [pc, #140]	; (801c4e8 <lv_label_set_long_mode+0xac>)
 801c45a:	6878      	ldr	r0, [r7, #4]
 801c45c:	f7f8 ffe8 	bl	8015430 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801c460:	4922      	ldr	r1, [pc, #136]	; (801c4ec <lv_label_set_long_mode+0xb0>)
 801c462:	6878      	ldr	r0, [r7, #4]
 801c464:	f7f8 ffe4 	bl	8015430 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801c468:	4921      	ldr	r1, [pc, #132]	; (801c4f0 <lv_label_set_long_mode+0xb4>)
 801c46a:	6878      	ldr	r0, [r7, #4]
 801c46c:	f7f8 ffe0 	bl	8015430 <lv_anim_del>
#endif
    ext->offset.x = 0;
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	2200      	movs	r2, #0
 801c474:	815a      	strh	r2, [r3, #10]
    ext->offset.y = 0;
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	2200      	movs	r2, #0
 801c47a:	819a      	strh	r2, [r3, #12]

    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 801c47c:	78fb      	ldrb	r3, [r7, #3]
 801c47e:	2b03      	cmp	r3, #3
 801c480:	d005      	beq.n	801c48e <lv_label_set_long_mode+0x52>
 801c482:	78fb      	ldrb	r3, [r7, #3]
 801c484:	2b04      	cmp	r3, #4
 801c486:	d002      	beq.n	801c48e <lv_label_set_long_mode+0x52>
 801c488:	78fb      	ldrb	r3, [r7, #3]
 801c48a:	2b05      	cmp	r3, #5
 801c48c:	d105      	bne.n	801c49a <lv_label_set_long_mode+0x5e>
        ext->expand = 1;
 801c48e:	68fa      	ldr	r2, [r7, #12]
 801c490:	7f93      	ldrb	r3, [r2, #30]
 801c492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c496:	7793      	strb	r3, [r2, #30]
 801c498:	e004      	b.n	801c4a4 <lv_label_set_long_mode+0x68>
    else
        ext->expand = 0;
 801c49a:	68fa      	ldr	r2, [r7, #12]
 801c49c:	7f93      	ldrb	r3, [r2, #30]
 801c49e:	f36f 13c7 	bfc	r3, #7, #1
 801c4a2:	7793      	strb	r3, [r2, #30]

    /*Restore the character under the dots*/
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	7f9b      	ldrb	r3, [r3, #30]
 801c4a8:	f003 0307 	and.w	r3, r3, #7
 801c4ac:	b2db      	uxtb	r3, r3
 801c4ae:	2b02      	cmp	r3, #2
 801c4b0:	d108      	bne.n	801c4c4 <lv_label_set_long_mode+0x88>
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	891b      	ldrh	r3, [r3, #8]
 801c4b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c4ba:	4293      	cmp	r3, r2
 801c4bc:	d002      	beq.n	801c4c4 <lv_label_set_long_mode+0x88>
        lv_label_revert_dots(label);
 801c4be:	6878      	ldr	r0, [r7, #4]
 801c4c0:	f000 ff64 	bl	801d38c <lv_label_revert_dots>
    }

    ext->long_mode = long_mode;
 801c4c4:	78fb      	ldrb	r3, [r7, #3]
 801c4c6:	f003 0307 	and.w	r3, r3, #7
 801c4ca:	b2d9      	uxtb	r1, r3
 801c4cc:	68fa      	ldr	r2, [r7, #12]
 801c4ce:	7f93      	ldrb	r3, [r2, #30]
 801c4d0:	f361 0302 	bfi	r3, r1, #0, #3
 801c4d4:	7793      	strb	r3, [r2, #30]
    lv_label_refr_text(label);
 801c4d6:	6878      	ldr	r0, [r7, #4]
 801c4d8:	f000 fcb2 	bl	801ce40 <lv_label_refr_text>
}
 801c4dc:	bf00      	nop
 801c4de:	3710      	adds	r7, #16
 801c4e0:	46bd      	mov	sp, r7
 801c4e2:	bd80      	pop	{r7, pc}
 801c4e4:	08008cd7 	.word	0x08008cd7
 801c4e8:	08008d01 	.word	0x08008d01
 801c4ec:	0801d441 	.word	0x0801d441
 801c4f0:	0801d469 	.word	0x0801d469

0801c4f4 <lv_label_set_align>:
 * Set the align of the label (left or center)
 * @param label pointer to a label object
 * @param align 'LV_LABEL_ALIGN_LEFT' or 'LV_LABEL_ALIGN_LEFT'
 */
void lv_label_set_align(lv_obj_t * label, lv_label_align_t align)
{
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b084      	sub	sp, #16
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	6078      	str	r0, [r7, #4]
 801c4fc:	460b      	mov	r3, r1
 801c4fe:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c500:	6878      	ldr	r0, [r7, #4]
 801c502:	f7ed fc8a 	bl	8009e1a <lv_obj_get_ext_attr>
 801c506:	60f8      	str	r0, [r7, #12]
    if(ext->align == align) return;
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	7f9b      	ldrb	r3, [r3, #30]
 801c50c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801c510:	b2db      	uxtb	r3, r3
 801c512:	461a      	mov	r2, r3
 801c514:	78fb      	ldrb	r3, [r7, #3]
 801c516:	429a      	cmp	r2, r3
 801c518:	d00c      	beq.n	801c534 <lv_label_set_align+0x40>

    ext->align = align;
 801c51a:	78fb      	ldrb	r3, [r7, #3]
 801c51c:	f003 0303 	and.w	r3, r3, #3
 801c520:	b2d9      	uxtb	r1, r3
 801c522:	68fa      	ldr	r2, [r7, #12]
 801c524:	7f93      	ldrb	r3, [r2, #30]
 801c526:	f361 1305 	bfi	r3, r1, #4, #2
 801c52a:	7793      	strb	r3, [r2, #30]

    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 801c52c:	6878      	ldr	r0, [r7, #4]
 801c52e:	f7ec fa48 	bl	80089c2 <lv_obj_invalidate>
 801c532:	e000      	b.n	801c536 <lv_label_set_align+0x42>
    if(ext->align == align) return;
 801c534:	bf00      	nop
                                 (lv_refr_label_text() not required)*/
}
 801c536:	3710      	adds	r7, #16
 801c538:	46bd      	mov	sp, r7
 801c53a:	bd80      	pop	{r7, pc}

0801c53c <lv_label_set_recolor>:
 * Enable the recoloring by in-line commands
 * @param label pointer to a label object
 * @param en true: enable recoloring, false: disable
 */
void lv_label_set_recolor(lv_obj_t * label, bool en)
{
 801c53c:	b580      	push	{r7, lr}
 801c53e:	b084      	sub	sp, #16
 801c540:	af00      	add	r7, sp, #0
 801c542:	6078      	str	r0, [r7, #4]
 801c544:	460b      	mov	r3, r1
 801c546:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c548:	6878      	ldr	r0, [r7, #4]
 801c54a:	f7ed fc66 	bl	8009e1a <lv_obj_get_ext_attr>
 801c54e:	60f8      	str	r0, [r7, #12]
    if(ext->recolor == en) return;
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	7f9b      	ldrb	r3, [r3, #30]
 801c554:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c558:	b2db      	uxtb	r3, r3
 801c55a:	78fa      	ldrb	r2, [r7, #3]
 801c55c:	429a      	cmp	r2, r3
 801c55e:	d011      	beq.n	801c584 <lv_label_set_recolor+0x48>

    ext->recolor = en == false ? 0 : 1;
 801c560:	78fb      	ldrb	r3, [r7, #3]
 801c562:	f083 0301 	eor.w	r3, r3, #1
 801c566:	b2db      	uxtb	r3, r3
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d001      	beq.n	801c570 <lv_label_set_recolor+0x34>
 801c56c:	2100      	movs	r1, #0
 801c56e:	e000      	b.n	801c572 <lv_label_set_recolor+0x36>
 801c570:	2101      	movs	r1, #1
 801c572:	68fa      	ldr	r2, [r7, #12]
 801c574:	7f93      	ldrb	r3, [r2, #30]
 801c576:	f361 1386 	bfi	r3, r1, #6, #1
 801c57a:	7793      	strb	r3, [r2, #30]

    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 801c57c:	6878      	ldr	r0, [r7, #4]
 801c57e:	f000 fc5f 	bl	801ce40 <lv_label_refr_text>
 801c582:	e000      	b.n	801c586 <lv_label_set_recolor+0x4a>
    if(ext->recolor == en) return;
 801c584:	bf00      	nop
                                  be hided or revealed*/
}
 801c586:	3710      	adds	r7, #16
 801c588:	46bd      	mov	sp, r7
 801c58a:	bd80      	pop	{r7, pc}

0801c58c <lv_label_set_body_draw>:
 * Set the label to draw (or not draw) background specified in its style's body
 * @param label pointer to a label object
 * @param en true: draw body; false: don't draw body
 */
void lv_label_set_body_draw(lv_obj_t * label, bool en)
{
 801c58c:	b580      	push	{r7, lr}
 801c58e:	b084      	sub	sp, #16
 801c590:	af00      	add	r7, sp, #0
 801c592:	6078      	str	r0, [r7, #4]
 801c594:	460b      	mov	r3, r1
 801c596:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c598:	6878      	ldr	r0, [r7, #4]
 801c59a:	f7ed fc3e 	bl	8009e1a <lv_obj_get_ext_attr>
 801c59e:	60f8      	str	r0, [r7, #12]
    if(ext->body_draw == en) return;
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	7fdb      	ldrb	r3, [r3, #31]
 801c5a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c5a8:	b2db      	uxtb	r3, r3
 801c5aa:	78fa      	ldrb	r2, [r7, #3]
 801c5ac:	429a      	cmp	r2, r3
 801c5ae:	d014      	beq.n	801c5da <lv_label_set_body_draw+0x4e>

    ext->body_draw = en == false ? 0 : 1;
 801c5b0:	78fb      	ldrb	r3, [r7, #3]
 801c5b2:	f083 0301 	eor.w	r3, r3, #1
 801c5b6:	b2db      	uxtb	r3, r3
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d001      	beq.n	801c5c0 <lv_label_set_body_draw+0x34>
 801c5bc:	2100      	movs	r1, #0
 801c5be:	e000      	b.n	801c5c2 <lv_label_set_body_draw+0x36>
 801c5c0:	2101      	movs	r1, #1
 801c5c2:	68fa      	ldr	r2, [r7, #12]
 801c5c4:	7fd3      	ldrb	r3, [r2, #31]
 801c5c6:	f361 0300 	bfi	r3, r1, #0, #1
 801c5ca:	77d3      	strb	r3, [r2, #31]

    lv_obj_refresh_ext_draw_pad(label);
 801c5cc:	6878      	ldr	r0, [r7, #4]
 801c5ce:	f7ed fa6d 	bl	8009aac <lv_obj_refresh_ext_draw_pad>

    lv_obj_invalidate(label);
 801c5d2:	6878      	ldr	r0, [r7, #4]
 801c5d4:	f7ec f9f5 	bl	80089c2 <lv_obj_invalidate>
 801c5d8:	e000      	b.n	801c5dc <lv_label_set_body_draw+0x50>
    if(ext->body_draw == en) return;
 801c5da:	bf00      	nop
}
 801c5dc:	3710      	adds	r7, #16
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	bd80      	pop	{r7, pc}

0801c5e2 <lv_label_get_text>:
 * Get the text of a label
 * @param label pointer to a label object
 * @return the text of the label
 */
char * lv_label_get_text(const lv_obj_t * label)
{
 801c5e2:	b580      	push	{r7, lr}
 801c5e4:	b084      	sub	sp, #16
 801c5e6:	af00      	add	r7, sp, #0
 801c5e8:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c5ea:	6878      	ldr	r0, [r7, #4]
 801c5ec:	f7ed fc15 	bl	8009e1a <lv_obj_get_ext_attr>
 801c5f0:	60f8      	str	r0, [r7, #12]

    return ext->text;
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	681b      	ldr	r3, [r3, #0]
}
 801c5f6:	4618      	mov	r0, r3
 801c5f8:	3710      	adds	r7, #16
 801c5fa:	46bd      	mov	sp, r7
 801c5fc:	bd80      	pop	{r7, pc}

0801c5fe <lv_label_get_long_mode>:
 * Get the long mode of a label
 * @param label pointer to a label object
 * @return the long mode
 */
lv_label_long_mode_t lv_label_get_long_mode(const lv_obj_t * label)
{
 801c5fe:	b580      	push	{r7, lr}
 801c600:	b084      	sub	sp, #16
 801c602:	af00      	add	r7, sp, #0
 801c604:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c606:	6878      	ldr	r0, [r7, #4]
 801c608:	f7ed fc07 	bl	8009e1a <lv_obj_get_ext_attr>
 801c60c:	60f8      	str	r0, [r7, #12]
    return ext->long_mode;
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	7f9b      	ldrb	r3, [r3, #30]
 801c612:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801c616:	b2db      	uxtb	r3, r3
}
 801c618:	4618      	mov	r0, r3
 801c61a:	3710      	adds	r7, #16
 801c61c:	46bd      	mov	sp, r7
 801c61e:	bd80      	pop	{r7, pc}

0801c620 <lv_label_get_align>:
 * Get the align attribute
 * @param label pointer to a label object
 * @return LV_LABEL_ALIGN_LEFT or LV_LABEL_ALIGN_CENTER
 */
lv_label_align_t lv_label_get_align(const lv_obj_t * label)
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b084      	sub	sp, #16
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c628:	6878      	ldr	r0, [r7, #4]
 801c62a:	f7ed fbf6 	bl	8009e1a <lv_obj_get_ext_attr>
 801c62e:	60f8      	str	r0, [r7, #12]
    return ext->align;
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	7f9b      	ldrb	r3, [r3, #30]
 801c634:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801c638:	b2db      	uxtb	r3, r3
}
 801c63a:	4618      	mov	r0, r3
 801c63c:	3710      	adds	r7, #16
 801c63e:	46bd      	mov	sp, r7
 801c640:	bd80      	pop	{r7, pc}

0801c642 <lv_label_get_recolor>:
 * Get the recoloring attribute
 * @param label pointer to a label object
 * @return true: recoloring is enabled, false: disable
 */
bool lv_label_get_recolor(const lv_obj_t * label)
{
 801c642:	b580      	push	{r7, lr}
 801c644:	b084      	sub	sp, #16
 801c646:	af00      	add	r7, sp, #0
 801c648:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c64a:	6878      	ldr	r0, [r7, #4]
 801c64c:	f7ed fbe5 	bl	8009e1a <lv_obj_get_ext_attr>
 801c650:	60f8      	str	r0, [r7, #12]
    return ext->recolor == 0 ? false : true;
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	7f9b      	ldrb	r3, [r3, #30]
 801c656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c65a:	b2db      	uxtb	r3, r3
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	bf14      	ite	ne
 801c660:	2301      	movne	r3, #1
 801c662:	2300      	moveq	r3, #0
 801c664:	b2db      	uxtb	r3, r3
}
 801c666:	4618      	mov	r0, r3
 801c668:	3710      	adds	r7, #16
 801c66a:	46bd      	mov	sp, r7
 801c66c:	bd80      	pop	{r7, pc}

0801c66e <lv_label_get_body_draw>:
 * Get the body draw attribute
 * @param label pointer to a label object
 * @return true: draw body; false: don't draw body
 */
bool lv_label_get_body_draw(const lv_obj_t * label)
{
 801c66e:	b580      	push	{r7, lr}
 801c670:	b084      	sub	sp, #16
 801c672:	af00      	add	r7, sp, #0
 801c674:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c676:	6878      	ldr	r0, [r7, #4]
 801c678:	f7ed fbcf 	bl	8009e1a <lv_obj_get_ext_attr>
 801c67c:	60f8      	str	r0, [r7, #12]
    return ext->body_draw == 0 ? false : true;
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	7fdb      	ldrb	r3, [r3, #31]
 801c682:	f003 0301 	and.w	r3, r3, #1
 801c686:	b2db      	uxtb	r3, r3
 801c688:	2b00      	cmp	r3, #0
 801c68a:	bf14      	ite	ne
 801c68c:	2301      	movne	r3, #1
 801c68e:	2300      	moveq	r3, #0
 801c690:	b2db      	uxtb	r3, r3
}
 801c692:	4618      	mov	r0, r3
 801c694:	3710      	adds	r7, #16
 801c696:	46bd      	mov	sp, r7
 801c698:	bd80      	pop	{r7, pc}
	...

0801c69c <lv_label_get_letter_on>:
 * @param pos pointer to point with coordinates on a the label
 * @return the index of the letter on the 'pos_p' point (E.g. on 0;0 is the 0. letter)
 * Expressed in character index and not byte index (different in UTF-8)
 */
uint16_t lv_label_get_letter_on(const lv_obj_t * label, lv_point_t * pos)
{
 801c69c:	b580      	push	{r7, lr}
 801c69e:	b092      	sub	sp, #72	; 0x48
 801c6a0:	af02      	add	r7, sp, #8
 801c6a2:	6078      	str	r0, [r7, #4]
 801c6a4:	6039      	str	r1, [r7, #0]
    const char * txt         = lv_label_get_text(label);
 801c6a6:	6878      	ldr	r0, [r7, #4]
 801c6a8:	f7ff ff9b 	bl	801c5e2 <lv_label_get_text>
 801c6ac:	62b8      	str	r0, [r7, #40]	; 0x28
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 801c6ae:	6878      	ldr	r0, [r7, #4]
 801c6b0:	f7ed fbb3 	bl	8009e1a <lv_obj_get_ext_attr>
 801c6b4:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t line_start      = 0;
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t new_line_start  = 0;
 801c6ba:	2300      	movs	r3, #0
 801c6bc:	63bb      	str	r3, [r7, #56]	; 0x38
    lv_coord_t max_w         = lv_obj_get_width(label);
 801c6be:	6878      	ldr	r0, [r7, #4]
 801c6c0:	f7ed fac0 	bl	8009c44 <lv_obj_get_width>
 801c6c4:	4603      	mov	r3, r0
 801c6c6:	86fb      	strh	r3, [r7, #54]	; 0x36
    const lv_style_t * style = lv_obj_get_style(label);
 801c6c8:	6878      	ldr	r0, [r7, #4]
 801c6ca:	f7ed faeb 	bl	8009ca4 <lv_obj_get_style>
 801c6ce:	6238      	str	r0, [r7, #32]
    const lv_font_t * font   = style->text.font;
 801c6d0:	6a3b      	ldr	r3, [r7, #32]
 801c6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6d4:	61fb      	str	r3, [r7, #28]
    uint8_t letter_height    = lv_font_get_line_height(font);
 801c6d6:	69f8      	ldr	r0, [r7, #28]
 801c6d8:	f7ff fc8a 	bl	801bff0 <lv_font_get_line_height>
 801c6dc:	4603      	mov	r3, r0
 801c6de:	76fb      	strb	r3, [r7, #27]
    lv_coord_t y             = 0;
 801c6e0:	2300      	movs	r3, #0
 801c6e2:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6ec:	7f9b      	ldrb	r3, [r3, #30]
 801c6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c6f2:	b2db      	uxtb	r3, r3
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d005      	beq.n	801c704 <lv_label_get_letter_on+0x68>
 801c6f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801c6fc:	f043 0301 	orr.w	r3, r3, #1
 801c700:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c706:	7f9b      	ldrb	r3, [r3, #30]
 801c708:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801c70c:	b2db      	uxtb	r3, r3
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d005      	beq.n	801c71e <lv_label_get_letter_on+0x82>
 801c712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801c716:	f043 0302 	orr.w	r3, r3, #2
 801c71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801c71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c720:	7f9b      	ldrb	r3, [r3, #30]
 801c722:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c726:	b2db      	uxtb	r3, r3
 801c728:	2b10      	cmp	r3, #16
 801c72a:	d105      	bne.n	801c738 <lv_label_get_letter_on+0x9c>
 801c72c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801c730:	f043 0304 	orr.w	r3, r3, #4
 801c734:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /*If the width will be expanded set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801c738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c73a:	7f9b      	ldrb	r3, [r3, #30]
 801c73c:	f003 0307 	and.w	r3, r3, #7
 801c740:	b2db      	uxtb	r3, r3
 801c742:	2b00      	cmp	r3, #0
 801c744:	d12f      	bne.n	801c7a6 <lv_label_get_letter_on+0x10a>
        max_w = LV_COORD_MAX;
 801c746:	f647 4318 	movw	r3, #31768	; 0x7c18
 801c74a:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    /*Search the line of the index letter */;
    while(txt[line_start] != '\0') {
 801c74c:	e02b      	b.n	801c7a6 <lv_label_get_letter_on+0x10a>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 801c74e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c752:	18d0      	adds	r0, r2, r3
 801c754:	6a3b      	ldr	r3, [r7, #32]
 801c756:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 801c75a:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 801c75e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801c762:	9300      	str	r3, [sp, #0]
 801c764:	460b      	mov	r3, r1
 801c766:	69f9      	ldr	r1, [r7, #28]
 801c768:	f7fa faf6 	bl	8016d58 <lv_txt_get_next_line>
 801c76c:	4603      	mov	r3, r0
 801c76e:	461a      	mov	r2, r3
 801c770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c772:	4413      	add	r3, r2
 801c774:	63bb      	str	r3, [r7, #56]	; 0x38

        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 801c776:	683b      	ldr	r3, [r7, #0]
 801c778:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c77c:	4619      	mov	r1, r3
 801c77e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801c782:	7efb      	ldrb	r3, [r7, #27]
 801c784:	4413      	add	r3, r2
 801c786:	4299      	cmp	r1, r3
 801c788:	dd14      	ble.n	801c7b4 <lv_label_get_letter_on+0x118>
        y += letter_height + style->text.line_space;
 801c78a:	7efb      	ldrb	r3, [r7, #27]
 801c78c:	b29a      	uxth	r2, r3
 801c78e:	6a3b      	ldr	r3, [r7, #32]
 801c790:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c794:	b29b      	uxth	r3, r3
 801c796:	4413      	add	r3, r2
 801c798:	b29a      	uxth	r2, r3
 801c79a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c79c:	4413      	add	r3, r2
 801c79e:	b29b      	uxth	r3, r3
 801c7a0:	86bb      	strh	r3, [r7, #52]	; 0x34

        line_start = new_line_start;
 801c7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(txt[line_start] != '\0') {
 801c7a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7aa:	4413      	add	r3, r2
 801c7ac:	781b      	ldrb	r3, [r3, #0]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d1cd      	bne.n	801c74e <lv_label_get_letter_on+0xb2>
 801c7b2:	e000      	b.n	801c7b6 <lv_label_get_letter_on+0x11a>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 801c7b4:	bf00      	nop
    }

    /*Calculate the x coordinate*/
    lv_coord_t x = 0;
 801c7b6:	2300      	movs	r3, #0
 801c7b8:	863b      	strh	r3, [r7, #48]	; 0x30
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 801c7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7bc:	7f9b      	ldrb	r3, [r3, #30]
 801c7be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c7c2:	b2db      	uxtb	r3, r3
 801c7c4:	2b10      	cmp	r3, #16
 801c7c6:	d129      	bne.n	801c81c <lv_label_get_letter_on+0x180>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 801c7c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7cc:	18d0      	adds	r0, r2, r3
 801c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7d0:	b29a      	uxth	r2, r3
 801c7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7d4:	b29b      	uxth	r3, r3
 801c7d6:	1ad3      	subs	r3, r2, r3
 801c7d8:	b299      	uxth	r1, r3
 801c7da:	6a3b      	ldr	r3, [r7, #32]
 801c7dc:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 801c7e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801c7e4:	9300      	str	r3, [sp, #0]
 801c7e6:	4613      	mov	r3, r2
 801c7e8:	69fa      	ldr	r2, [r7, #28]
 801c7ea:	f7fa fb67 	bl	8016ebc <lv_txt_get_width>
 801c7ee:	4603      	mov	r3, r0
 801c7f0:	833b      	strh	r3, [r7, #24]
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 801c7f2:	6878      	ldr	r0, [r7, #4]
 801c7f4:	f7ed fa26 	bl	8009c44 <lv_obj_get_width>
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	0fda      	lsrs	r2, r3, #31
 801c7fc:	4413      	add	r3, r2
 801c7fe:	105b      	asrs	r3, r3, #1
 801c800:	b21b      	sxth	r3, r3
 801c802:	4619      	mov	r1, r3
 801c804:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801c808:	0fda      	lsrs	r2, r3, #31
 801c80a:	4413      	add	r3, r2
 801c80c:	105b      	asrs	r3, r3, #1
 801c80e:	b21b      	sxth	r3, r3
 801c810:	1acb      	subs	r3, r1, r3
 801c812:	b29a      	uxth	r2, r3
 801c814:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c816:	4413      	add	r3, r2
 801c818:	b29b      	uxth	r3, r3
 801c81a:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801c81c:	2300      	movs	r3, #0
 801c81e:	73fb      	strb	r3, [r7, #15]

    uint32_t i         = line_start;
 801c820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c822:	60bb      	str	r3, [r7, #8]
    uint32_t i_current = i;
 801c824:	68bb      	ldr	r3, [r7, #8]
 801c826:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t letter;
    uint32_t letter_next;

    if(new_line_start > 0) {
 801c828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d04a      	beq.n	801c8c4 <lv_label_get_letter_on+0x228>
        while(i <= new_line_start - 1) {
 801c82e:	e044      	b.n	801c8ba <lv_label_get_letter_on+0x21e>
            /* Get the current letter.
             * Be careful 'i' already points to the next character*/
            letter = lv_txt_encoded_next(txt, &i);
 801c830:	4b2a      	ldr	r3, [pc, #168]	; (801c8dc <lv_label_get_letter_on+0x240>)
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	f107 0208 	add.w	r2, r7, #8
 801c838:	4611      	mov	r1, r2
 801c83a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c83c:	4798      	blx	r3
 801c83e:	6178      	str	r0, [r7, #20]

            /*Get the next letter too for kerning*/
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 801c840:	4b26      	ldr	r3, [pc, #152]	; (801c8dc <lv_label_get_letter_on+0x240>)
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	68ba      	ldr	r2, [r7, #8]
 801c846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c848:	440a      	add	r2, r1
 801c84a:	2100      	movs	r1, #0
 801c84c:	4610      	mov	r0, r2
 801c84e:	4798      	blx	r3
 801c850:	6138      	str	r0, [r7, #16]

            /*Handle the recolor command*/
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801c852:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801c856:	f003 0301 	and.w	r3, r3, #1
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d00e      	beq.n	801c87c <lv_label_get_letter_on+0x1e0>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 801c85e:	68bb      	ldr	r3, [r7, #8]
 801c860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c862:	4413      	add	r3, r2
 801c864:	781b      	ldrb	r3, [r3, #0]
 801c866:	461a      	mov	r2, r3
 801c868:	f107 030f 	add.w	r3, r7, #15
 801c86c:	4611      	mov	r1, r2
 801c86e:	4618      	mov	r0, r3
 801c870:	f7fa fb8e 	bl	8016f90 <lv_txt_is_cmd>
 801c874:	4603      	mov	r3, r0
 801c876:	2b00      	cmp	r3, #0
 801c878:	d000      	beq.n	801c87c <lv_label_get_letter_on+0x1e0>
                    continue; /*Skip the letter is it is part of a command*/
 801c87a:	e01e      	b.n	801c8ba <lv_label_get_letter_on+0x21e>
                }
            }

            x += lv_font_get_glyph_width(font, letter, letter_next);
 801c87c:	693a      	ldr	r2, [r7, #16]
 801c87e:	6979      	ldr	r1, [r7, #20]
 801c880:	69f8      	ldr	r0, [r7, #28]
 801c882:	f7f8 f883 	bl	801498c <lv_font_get_glyph_width>
 801c886:	4603      	mov	r3, r0
 801c888:	461a      	mov	r2, r3
 801c88a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c88c:	4413      	add	r3, r2
 801c88e:	b29b      	uxth	r3, r3
 801c890:	863b      	strh	r3, [r7, #48]	; 0x30
            if(pos->x < x) {
 801c892:	683b      	ldr	r3, [r7, #0]
 801c894:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c898:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801c89c:	429a      	cmp	r2, r3
 801c89e:	dd02      	ble.n	801c8a6 <lv_label_get_letter_on+0x20a>
                i = i_current;
 801c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8a2:	60bb      	str	r3, [r7, #8]
                break;
 801c8a4:	e00e      	b.n	801c8c4 <lv_label_get_letter_on+0x228>
            }
            x += style->text.letter_space;
 801c8a6:	6a3b      	ldr	r3, [r7, #32]
 801c8a8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801c8ac:	b29a      	uxth	r2, r3
 801c8ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c8b0:	4413      	add	r3, r2
 801c8b2:	b29b      	uxth	r3, r3
 801c8b4:	863b      	strh	r3, [r7, #48]	; 0x30
            i_current = i;
 801c8b6:	68bb      	ldr	r3, [r7, #8]
 801c8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        while(i <= new_line_start - 1) {
 801c8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8bc:	1e5a      	subs	r2, r3, #1
 801c8be:	68bb      	ldr	r3, [r7, #8]
 801c8c0:	429a      	cmp	r2, r3
 801c8c2:	d2b5      	bcs.n	801c830 <lv_label_get_letter_on+0x194>
        }
    }

    return lv_encoded_get_char_id(txt, i);
 801c8c4:	4b06      	ldr	r3, [pc, #24]	; (801c8e0 <lv_label_get_letter_on+0x244>)
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	68ba      	ldr	r2, [r7, #8]
 801c8ca:	4611      	mov	r1, r2
 801c8cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c8ce:	4798      	blx	r3
 801c8d0:	4603      	mov	r3, r0
 801c8d2:	b29b      	uxth	r3, r3
}
 801c8d4:	4618      	mov	r0, r3
 801c8d6:	3740      	adds	r7, #64	; 0x40
 801c8d8:	46bd      	mov	sp, r7
 801c8da:	bd80      	pop	{r7, pc}
 801c8dc:	200027a0 	.word	0x200027a0
 801c8e0:	200027ac 	.word	0x200027ac

0801c8e4 <lv_label_get_text_sel_start>:
 * @brief Get the selection start index.
 * @param label pointer to a label object.
 * @return selection start index. `LV_LABEL_TXT_SEL_OFF` if nothing is selected.
 */
uint16_t lv_label_get_text_sel_start(const lv_obj_t * label)
{
 801c8e4:	b480      	push	{r7}
 801c8e6:	b083      	sub	sp, #12
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
    return ext->txt_sel_start;

#else
    (void)label;    /*Unused*/
    return LV_LABEL_TEXT_SEL_OFF;
 801c8ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
#endif
}
 801c8f0:	4618      	mov	r0, r3
 801c8f2:	370c      	adds	r7, #12
 801c8f4:	46bd      	mov	sp, r7
 801c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8fa:	4770      	bx	lr

0801c8fc <lv_label_get_text_sel_end>:
 * @brief Get the selection end index.
 * @param label pointer to a label object.
 * @return selection end index. `LV_LABEL_TXT_SEL_OFF` if nothing is selected.
 */
uint16_t lv_label_get_text_sel_end(const lv_obj_t * label)
{
 801c8fc:	b480      	push	{r7}
 801c8fe:	b083      	sub	sp, #12
 801c900:	af00      	add	r7, sp, #0
 801c902:	6078      	str	r0, [r7, #4]
#if LV_LABEL_TEXT_SEL
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
    return ext->txt_sel_end;
#else
    (void)label; /*Unused*/
    return LV_LABEL_TEXT_SEL_OFF;
 801c904:	f64f 73ff 	movw	r3, #65535	; 0xffff
#endif
}
 801c908:	4618      	mov	r0, r3
 801c90a:	370c      	adds	r7, #12
 801c90c:	46bd      	mov	sp, r7
 801c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c912:	4770      	bx	lr

0801c914 <lv_label_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_label_design(lv_obj_t * label, const lv_area_t * mask, lv_design_mode_t mode)
{
 801c914:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c916:	b099      	sub	sp, #100	; 0x64
 801c918:	af06      	add	r7, sp, #24
 801c91a:	60f8      	str	r0, [r7, #12]
 801c91c:	60b9      	str	r1, [r7, #8]
 801c91e:	4613      	mov	r3, r2
 801c920:	71fb      	strb	r3, [r7, #7]
    /* A label never covers an area */
    if(mode == LV_DESIGN_COVER_CHK)
 801c922:	79fb      	ldrb	r3, [r7, #7]
 801c924:	2b02      	cmp	r3, #2
 801c926:	d101      	bne.n	801c92c <lv_label_design+0x18>
        return false;
 801c928:	2300      	movs	r3, #0
 801c92a:	e1c4      	b.n	801ccb6 <lv_label_design+0x3a2>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801c92c:	79fb      	ldrb	r3, [r7, #7]
 801c92e:	2b00      	cmp	r3, #0
 801c930:	f040 81c0 	bne.w	801ccb4 <lv_label_design+0x3a0>
        lv_area_t coords;
        const lv_style_t * style = lv_obj_get_style(label);
 801c934:	68f8      	ldr	r0, [r7, #12]
 801c936:	f7ed f9b5 	bl	8009ca4 <lv_obj_get_style>
 801c93a:	63f8      	str	r0, [r7, #60]	; 0x3c
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 801c93c:	68f8      	ldr	r0, [r7, #12]
 801c93e:	f7ed fa1e 	bl	8009d7e <lv_obj_get_opa_scale>
 801c942:	4603      	mov	r3, r0
 801c944:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        lv_obj_get_coords(label, &coords);
 801c948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c94c:	4619      	mov	r1, r3
 801c94e:	68f8      	ldr	r0, [r7, #12]
 801c950:	f7ed f937 	bl	8009bc2 <lv_obj_get_coords>

#if LV_USE_GROUP
        lv_group_t * g = lv_obj_get_group(label);
 801c954:	68f8      	ldr	r0, [r7, #12]
 801c956:	f7ed fa6c 	bl	8009e32 <lv_obj_get_group>
 801c95a:	6378      	str	r0, [r7, #52]	; 0x34
        if(lv_group_get_focused(g) == label) {
 801c95c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c95e:	f7eb fa4a 	bl	8007df6 <lv_group_get_focused>
 801c962:	4602      	mov	r2, r0
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	4293      	cmp	r3, r2
 801c968:	d107      	bne.n	801c97a <lv_label_design+0x66>
            lv_draw_rect(&coords, mask, style, opa_scale);
 801c96a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801c96e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801c972:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c974:	68b9      	ldr	r1, [r7, #8]
 801c976:	f7f2 ff04 	bl	800f782 <lv_draw_rect>
        }
#endif

        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c97a:	68f8      	ldr	r0, [r7, #12]
 801c97c:	f7ed fa4d 	bl	8009e1a <lv_obj_get_ext_attr>
 801c980:	6338      	str	r0, [r7, #48]	; 0x30

        if(ext->body_draw) {
 801c982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c984:	7fdb      	ldrb	r3, [r3, #31]
 801c986:	f003 0301 	and.w	r3, r3, #1
 801c98a:	b2db      	uxtb	r3, r3
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d03b      	beq.n	801ca08 <lv_label_design+0xf4>
            lv_area_t bg;
            lv_obj_get_coords(label, &bg);
 801c990:	f107 0320 	add.w	r3, r7, #32
 801c994:	4619      	mov	r1, r3
 801c996:	68f8      	ldr	r0, [r7, #12]
 801c998:	f7ed f913 	bl	8009bc2 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 801c99c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c9a0:	b29a      	uxth	r2, r3
 801c9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9a4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c9a8:	b29b      	uxth	r3, r3
 801c9aa:	1ad3      	subs	r3, r2, r3
 801c9ac:	b29b      	uxth	r3, r3
 801c9ae:	b21b      	sxth	r3, r3
 801c9b0:	843b      	strh	r3, [r7, #32]
            bg.x2 += style->body.padding.right;
 801c9b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801c9b6:	b29a      	uxth	r2, r3
 801c9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9ba:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801c9be:	b29b      	uxth	r3, r3
 801c9c0:	4413      	add	r3, r2
 801c9c2:	b29b      	uxth	r3, r3
 801c9c4:	b21b      	sxth	r3, r3
 801c9c6:	84bb      	strh	r3, [r7, #36]	; 0x24
            bg.y1 -= style->body.padding.top;
 801c9c8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c9cc:	b29a      	uxth	r2, r3
 801c9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9d0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c9d4:	b29b      	uxth	r3, r3
 801c9d6:	1ad3      	subs	r3, r2, r3
 801c9d8:	b29b      	uxth	r3, r3
 801c9da:	b21b      	sxth	r3, r3
 801c9dc:	847b      	strh	r3, [r7, #34]	; 0x22
            bg.y2 += style->body.padding.bottom;
 801c9de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801c9e2:	b29a      	uxth	r2, r3
 801c9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9e6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801c9ea:	b29b      	uxth	r3, r3
 801c9ec:	4413      	add	r3, r2
 801c9ee:	b29b      	uxth	r3, r3
 801c9f0:	b21b      	sxth	r3, r3
 801c9f2:	84fb      	strh	r3, [r7, #38]	; 0x26

            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 801c9f4:	68f8      	ldr	r0, [r7, #12]
 801c9f6:	f7ed f9c2 	bl	8009d7e <lv_obj_get_opa_scale>
 801c9fa:	4603      	mov	r3, r0
 801c9fc:	f107 0020 	add.w	r0, r7, #32
 801ca00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ca02:	68b9      	ldr	r1, [r7, #8]
 801ca04:	f7f2 febd 	bl	800f782 <lv_draw_rect>
        }

        /*TEST: draw a background for the label*/
        // lv_draw_rect(&label->coords, mask, &lv_style_plain_color, LV_OPA_COVER);

        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801ca08:	2300      	movs	r3, #0
 801ca0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca10:	7f9b      	ldrb	r3, [r3, #30]
 801ca12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ca16:	b2db      	uxtb	r3, r3
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d005      	beq.n	801ca28 <lv_label_design+0x114>
 801ca1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ca20:	f043 0301 	orr.w	r3, r3, #1
 801ca24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801ca28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca2a:	7f9b      	ldrb	r3, [r3, #30]
 801ca2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801ca30:	b2db      	uxtb	r3, r3
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d005      	beq.n	801ca42 <lv_label_design+0x12e>
 801ca36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ca3a:	f043 0302 	orr.w	r3, r3, #2
 801ca3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca44:	7f9b      	ldrb	r3, [r3, #30]
 801ca46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	2b10      	cmp	r3, #16
 801ca4e:	d105      	bne.n	801ca5c <lv_label_design+0x148>
 801ca50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ca54:	f043 0304 	orr.w	r3, r3, #4
 801ca58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 801ca5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca5e:	7f9b      	ldrb	r3, [r3, #30]
 801ca60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ca64:	b2db      	uxtb	r3, r3
 801ca66:	2b20      	cmp	r3, #32
 801ca68:	d105      	bne.n	801ca76 <lv_label_design+0x162>
 801ca6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ca6e:	f043 0308 	orr.w	r3, r3, #8
 801ca72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        /* In ROLL mode the CENTER and RIGHT are pointless so remove them.
         * (In addition they will result mis-alignment is this case)*/
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 801ca76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca78:	7f9b      	ldrb	r3, [r3, #30]
 801ca7a:	f003 0307 	and.w	r3, r3, #7
 801ca7e:	b2db      	uxtb	r3, r3
 801ca80:	2b03      	cmp	r3, #3
 801ca82:	d006      	beq.n	801ca92 <lv_label_design+0x17e>
 801ca84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca86:	7f9b      	ldrb	r3, [r3, #30]
 801ca88:	f003 0307 	and.w	r3, r3, #7
 801ca8c:	b2db      	uxtb	r3, r3
 801ca8e:	2b04      	cmp	r3, #4
 801ca90:	d138      	bne.n	801cb04 <lv_label_design+0x1f0>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 801ca92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca94:	7f9b      	ldrb	r3, [r3, #30]
 801ca96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ca9a:	b2db      	uxtb	r3, r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 801ca9c:	2b10      	cmp	r3, #16
 801ca9e:	d006      	beq.n	801caae <lv_label_design+0x19a>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 801caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801caa2:	7f9b      	ldrb	r3, [r3, #30]
 801caa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801caa8:	b2db      	uxtb	r3, r3
 801caaa:	2b20      	cmp	r3, #32
 801caac:	d12a      	bne.n	801cb04 <lv_label_design+0x1f0>
            lv_point_t size;
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 801caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cab0:	6819      	ldr	r1, [r3, #0]
 801cab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cab4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801cab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cab8:	f9b3 5028 	ldrsh.w	r5, [r3, #40]	; 0x28
 801cabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cabe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801cac2:	f107 001c 	add.w	r0, r7, #28
 801cac6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801caca:	9202      	str	r2, [sp, #8]
 801cacc:	f647 4218 	movw	r2, #31768	; 0x7c18
 801cad0:	9201      	str	r2, [sp, #4]
 801cad2:	9300      	str	r3, [sp, #0]
 801cad4:	462b      	mov	r3, r5
 801cad6:	4622      	mov	r2, r4
 801cad8:	f7fa f88c 	bl	8016bf4 <lv_txt_get_size>
                            LV_COORD_MAX, flag);
            if(size.x > lv_obj_get_width(label)) {
 801cadc:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 801cae0:	68f8      	ldr	r0, [r7, #12]
 801cae2:	f7ed f8af 	bl	8009c44 <lv_obj_get_width>
 801cae6:	4603      	mov	r3, r0
 801cae8:	429c      	cmp	r4, r3
 801caea:	dd0b      	ble.n	801cb04 <lv_label_design+0x1f0>
                flag &= ~LV_TXT_FLAG_RIGHT;
 801caec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801caf0:	f023 0308 	bic.w	r3, r3, #8
 801caf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                flag &= ~LV_TXT_FLAG_CENTER;
 801caf8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cafc:	f023 0304 	bic.w	r3, r3, #4
 801cb00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }

        lv_draw_label_hint_t * hint = &ext->hint;
 801cb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb06:	3310      	adds	r3, #16
 801cb08:	643b      	str	r3, [r7, #64]	; 0x40
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC || lv_obj_get_height(label) < LV_LABEL_HINT_HEIGHT_LIMIT)
 801cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb0c:	7f9b      	ldrb	r3, [r3, #30]
 801cb0e:	f003 0307 	and.w	r3, r3, #7
 801cb12:	b2db      	uxtb	r3, r3
 801cb14:	2b04      	cmp	r3, #4
 801cb16:	d006      	beq.n	801cb26 <lv_label_design+0x212>
 801cb18:	68f8      	ldr	r0, [r7, #12]
 801cb1a:	f7ed f8a1 	bl	8009c60 <lv_obj_get_height>
 801cb1e:	4603      	mov	r3, r0
 801cb20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb24:	da01      	bge.n	801cb2a <lv_label_design+0x216>
            hint = NULL;
 801cb26:	2300      	movs	r3, #0
 801cb28:	643b      	str	r3, [r7, #64]	; 0x40

        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 801cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb2c:	681c      	ldr	r4, [r3, #0]
 801cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb30:	f103 050a 	add.w	r5, r3, #10
 801cb34:	68f8      	ldr	r0, [r7, #12]
 801cb36:	f7ff fed5 	bl	801c8e4 <lv_label_get_text_sel_start>
 801cb3a:	4603      	mov	r3, r0
 801cb3c:	461e      	mov	r6, r3
 801cb3e:	68f8      	ldr	r0, [r7, #12]
 801cb40:	f7ff fedc 	bl	801c8fc <lv_label_get_text_sel_end>
 801cb44:	4603      	mov	r3, r0
 801cb46:	4619      	mov	r1, r3
 801cb48:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801cb4c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801cb50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cb52:	9305      	str	r3, [sp, #20]
 801cb54:	9104      	str	r1, [sp, #16]
 801cb56:	9603      	str	r6, [sp, #12]
 801cb58:	9502      	str	r5, [sp, #8]
 801cb5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cb5e:	9301      	str	r3, [sp, #4]
 801cb60:	9400      	str	r4, [sp, #0]
 801cb62:	4613      	mov	r3, r2
 801cb64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cb66:	68b9      	ldr	r1, [r7, #8]
 801cb68:	f7f0 fb72 	bl	800d250 <lv_draw_label>
                      lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), hint);

        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 801cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb6e:	7f9b      	ldrb	r3, [r3, #30]
 801cb70:	f003 0307 	and.w	r3, r3, #7
 801cb74:	b2db      	uxtb	r3, r3
 801cb76:	2b04      	cmp	r3, #4
 801cb78:	f040 809c 	bne.w	801ccb4 <lv_label_design+0x3a0>
            lv_point_t size;
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 801cb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb7e:	6819      	ldr	r1, [r3, #0]
 801cb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb82:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801cb84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb86:	f9b3 5028 	ldrsh.w	r5, [r3, #40]	; 0x28
 801cb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb8c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801cb90:	f107 0018 	add.w	r0, r7, #24
 801cb94:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801cb98:	9202      	str	r2, [sp, #8]
 801cb9a:	f647 4218 	movw	r2, #31768	; 0x7c18
 801cb9e:	9201      	str	r2, [sp, #4]
 801cba0:	9300      	str	r3, [sp, #0]
 801cba2:	462b      	mov	r3, r5
 801cba4:	4622      	mov	r2, r4
 801cba6:	f7fa f825 	bl	8016bf4 <lv_txt_get_size>
                            LV_COORD_MAX, flag);

            lv_point_t ofs;

            /*Draw the text again next to the original to make an circular effect */
            if(size.x > lv_obj_get_width(label)) {
 801cbaa:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 801cbae:	68f8      	ldr	r0, [r7, #12]
 801cbb0:	f7ed f848 	bl	8009c44 <lv_obj_get_width>
 801cbb4:	4603      	mov	r3, r0
 801cbb6:	429c      	cmp	r4, r3
 801cbb8:	dd3c      	ble.n	801cc34 <lv_label_design+0x320>
                ofs.x = ext->offset.x + size.x +
 801cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cbbc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801cbc0:	b29a      	uxth	r2, r3
 801cbc2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801cbc6:	b29b      	uxth	r3, r3
 801cbc8:	4413      	add	r3, r2
 801cbca:	b29c      	uxth	r4, r3
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801cbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbd0:	2220      	movs	r2, #32
 801cbd2:	2120      	movs	r1, #32
 801cbd4:	4618      	mov	r0, r3
 801cbd6:	f7f7 fed9 	bl	801498c <lv_font_get_glyph_width>
 801cbda:	4603      	mov	r3, r0
                ofs.x = ext->offset.x + size.x +
 801cbdc:	461a      	mov	r2, r3
 801cbde:	0052      	lsls	r2, r2, #1
 801cbe0:	4413      	add	r3, r2
 801cbe2:	b29b      	uxth	r3, r3
 801cbe4:	4423      	add	r3, r4
 801cbe6:	b29b      	uxth	r3, r3
 801cbe8:	b21b      	sxth	r3, r3
 801cbea:	82bb      	strh	r3, [r7, #20]
                ofs.y = ext->offset.y;
 801cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cbee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801cbf2:	82fb      	strh	r3, [r7, #22]

                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cbf6:	681c      	ldr	r4, [r3, #0]
 801cbf8:	68f8      	ldr	r0, [r7, #12]
 801cbfa:	f7ff fe73 	bl	801c8e4 <lv_label_get_text_sel_start>
 801cbfe:	4603      	mov	r3, r0
 801cc00:	461d      	mov	r5, r3
 801cc02:	68f8      	ldr	r0, [r7, #12]
 801cc04:	f7ff fe7a 	bl	801c8fc <lv_label_get_text_sel_end>
 801cc08:	4603      	mov	r3, r0
 801cc0a:	4619      	mov	r1, r3
 801cc0c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801cc10:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801cc14:	2300      	movs	r3, #0
 801cc16:	9305      	str	r3, [sp, #20]
 801cc18:	9104      	str	r1, [sp, #16]
 801cc1a:	9503      	str	r5, [sp, #12]
 801cc1c:	f107 0314 	add.w	r3, r7, #20
 801cc20:	9302      	str	r3, [sp, #8]
 801cc22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cc26:	9301      	str	r3, [sp, #4]
 801cc28:	9400      	str	r4, [sp, #0]
 801cc2a:	4613      	mov	r3, r2
 801cc2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cc2e:	68b9      	ldr	r1, [r7, #8]
 801cc30:	f7f0 fb0e 	bl	800d250 <lv_draw_label>
                              lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), NULL);
            }

            /*Draw the text again below the original to make an circular effect */
            if(size.y > lv_obj_get_height(label)) {
 801cc34:	f9b7 401a 	ldrsh.w	r4, [r7, #26]
 801cc38:	68f8      	ldr	r0, [r7, #12]
 801cc3a:	f7ed f811 	bl	8009c60 <lv_obj_get_height>
 801cc3e:	4603      	mov	r3, r0
 801cc40:	429c      	cmp	r4, r3
 801cc42:	dd37      	ble.n	801ccb4 <lv_label_design+0x3a0>
                ofs.x = ext->offset.x;
 801cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc46:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801cc4a:	82bb      	strh	r3, [r7, #20]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 801cc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801cc52:	b29a      	uxth	r2, r3
 801cc54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801cc58:	b29b      	uxth	r3, r3
 801cc5a:	4413      	add	r3, r2
 801cc5c:	b29c      	uxth	r4, r3
 801cc5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc62:	4618      	mov	r0, r3
 801cc64:	f7ff f9c4 	bl	801bff0 <lv_font_get_line_height>
 801cc68:	4603      	mov	r3, r0
 801cc6a:	b29b      	uxth	r3, r3
 801cc6c:	4423      	add	r3, r4
 801cc6e:	b29b      	uxth	r3, r3
 801cc70:	b21b      	sxth	r3, r3
 801cc72:	82fb      	strh	r3, [r7, #22]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801cc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc76:	681c      	ldr	r4, [r3, #0]
 801cc78:	68f8      	ldr	r0, [r7, #12]
 801cc7a:	f7ff fe33 	bl	801c8e4 <lv_label_get_text_sel_start>
 801cc7e:	4603      	mov	r3, r0
 801cc80:	461d      	mov	r5, r3
 801cc82:	68f8      	ldr	r0, [r7, #12]
 801cc84:	f7ff fe3a 	bl	801c8fc <lv_label_get_text_sel_end>
 801cc88:	4603      	mov	r3, r0
 801cc8a:	4619      	mov	r1, r3
 801cc8c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801cc90:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801cc94:	2300      	movs	r3, #0
 801cc96:	9305      	str	r3, [sp, #20]
 801cc98:	9104      	str	r1, [sp, #16]
 801cc9a:	9503      	str	r5, [sp, #12]
 801cc9c:	f107 0314 	add.w	r3, r7, #20
 801cca0:	9302      	str	r3, [sp, #8]
 801cca2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cca6:	9301      	str	r3, [sp, #4]
 801cca8:	9400      	str	r4, [sp, #0]
 801ccaa:	4613      	mov	r3, r2
 801ccac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ccae:	68b9      	ldr	r1, [r7, #8]
 801ccb0:	f7f0 face 	bl	800d250 <lv_draw_label>
                              lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), NULL);
            }
        }
    }
    return true;
 801ccb4:	2301      	movs	r3, #1
}
 801ccb6:	4618      	mov	r0, r3
 801ccb8:	374c      	adds	r7, #76	; 0x4c
 801ccba:	46bd      	mov	sp, r7
 801ccbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801ccc0 <lv_label_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_label_signal(lv_obj_t * label, lv_signal_t sign, void * param)
{
 801ccc0:	b590      	push	{r4, r7, lr}
 801ccc2:	b089      	sub	sp, #36	; 0x24
 801ccc4:	af00      	add	r7, sp, #0
 801ccc6:	60f8      	str	r0, [r7, #12]
 801ccc8:	460b      	mov	r3, r1
 801ccca:	607a      	str	r2, [r7, #4]
 801cccc:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(label, sign, param);
 801ccce:	4b5a      	ldr	r3, [pc, #360]	; (801ce38 <lv_label_signal+0x178>)
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	7af9      	ldrb	r1, [r7, #11]
 801ccd4:	687a      	ldr	r2, [r7, #4]
 801ccd6:	68f8      	ldr	r0, [r7, #12]
 801ccd8:	4798      	blx	r3
 801ccda:	4603      	mov	r3, r0
 801ccdc:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801ccde:	7fbb      	ldrb	r3, [r7, #30]
 801cce0:	2b01      	cmp	r3, #1
 801cce2:	d001      	beq.n	801cce8 <lv_label_signal+0x28>
 801cce4:	7fbb      	ldrb	r3, [r7, #30]
 801cce6:	e0a3      	b.n	801ce30 <lv_label_signal+0x170>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cce8:	68f8      	ldr	r0, [r7, #12]
 801ccea:	f7ed f896 	bl	8009e1a <lv_obj_get_ext_attr>
 801ccee:	61b8      	str	r0, [r7, #24]
    if(sign == LV_SIGNAL_CLEANUP) {
 801ccf0:	7afb      	ldrb	r3, [r7, #11]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d112      	bne.n	801cd1c <lv_label_signal+0x5c>
        if(ext->static_txt == 0) {
 801ccf6:	69bb      	ldr	r3, [r7, #24]
 801ccf8:	7f9b      	ldrb	r3, [r3, #30]
 801ccfa:	f003 0308 	and.w	r3, r3, #8
 801ccfe:	b2db      	uxtb	r3, r3
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d107      	bne.n	801cd14 <lv_label_signal+0x54>
            lv_mem_free(ext->text);
 801cd04:	69bb      	ldr	r3, [r7, #24]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	4618      	mov	r0, r3
 801cd0a:	f7f9 fc67 	bl	80165dc <lv_mem_free>
            ext->text = NULL;
 801cd0e:	69bb      	ldr	r3, [r7, #24]
 801cd10:	2200      	movs	r2, #0
 801cd12:	601a      	str	r2, [r3, #0]
        }
        lv_label_dot_tmp_free(label);
 801cd14:	68f8      	ldr	r0, [r7, #12]
 801cd16:	f000 fc16 	bl	801d546 <lv_label_dot_tmp_free>
 801cd1a:	e088      	b.n	801ce2e <lv_label_signal+0x16e>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801cd1c:	7afb      	ldrb	r3, [r7, #11]
 801cd1e:	2b04      	cmp	r3, #4
 801cd20:	d106      	bne.n	801cd30 <lv_label_signal+0x70>
        /*Revert dots for proper refresh*/
        lv_label_revert_dots(label);
 801cd22:	68f8      	ldr	r0, [r7, #12]
 801cd24:	f000 fb32 	bl	801d38c <lv_label_revert_dots>

        lv_label_refr_text(label);
 801cd28:	68f8      	ldr	r0, [r7, #12]
 801cd2a:	f000 f889 	bl	801ce40 <lv_label_refr_text>
 801cd2e:	e07e      	b.n	801ce2e <lv_label_signal+0x16e>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801cd30:	7afb      	ldrb	r3, [r7, #11]
 801cd32:	2b02      	cmp	r3, #2
 801cd34:	d120      	bne.n	801cd78 <lv_label_signal+0xb8>
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	3310      	adds	r3, #16
 801cd3a:	4618      	mov	r0, r3
 801cd3c:	f7ff f964 	bl	801c008 <lv_area_get_width>
 801cd40:	4603      	mov	r3, r0
 801cd42:	461c      	mov	r4, r3
 801cd44:	6878      	ldr	r0, [r7, #4]
 801cd46:	f7ff f95f 	bl	801c008 <lv_area_get_width>
 801cd4a:	4603      	mov	r3, r0
 801cd4c:	429c      	cmp	r4, r3
 801cd4e:	d10c      	bne.n	801cd6a <lv_label_signal+0xaa>
           lv_area_get_height(&label->coords) != lv_area_get_height(param)) {
 801cd50:	68fb      	ldr	r3, [r7, #12]
 801cd52:	3310      	adds	r3, #16
 801cd54:	4618      	mov	r0, r3
 801cd56:	f7ff f96e 	bl	801c036 <lv_area_get_height>
 801cd5a:	4603      	mov	r3, r0
 801cd5c:	461c      	mov	r4, r3
 801cd5e:	6878      	ldr	r0, [r7, #4]
 801cd60:	f7ff f969 	bl	801c036 <lv_area_get_height>
 801cd64:	4603      	mov	r3, r0
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 801cd66:	429c      	cmp	r4, r3
 801cd68:	d061      	beq.n	801ce2e <lv_label_signal+0x16e>
            lv_label_revert_dots(label);
 801cd6a:	68f8      	ldr	r0, [r7, #12]
 801cd6c:	f000 fb0e 	bl	801d38c <lv_label_revert_dots>
            lv_label_refr_text(label);
 801cd70:	68f8      	ldr	r0, [r7, #12]
 801cd72:	f000 f865 	bl	801ce40 <lv_label_refr_text>
 801cd76:	e05a      	b.n	801ce2e <lv_label_signal+0x16e>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801cd78:	7afb      	ldrb	r3, [r7, #11]
 801cd7a:	2b05      	cmp	r3, #5
 801cd7c:	d13c      	bne.n	801cdf8 <lv_label_signal+0x138>
        if(ext->body_draw) {
 801cd7e:	69bb      	ldr	r3, [r7, #24]
 801cd80:	7fdb      	ldrb	r3, [r3, #31]
 801cd82:	f003 0301 	and.w	r3, r3, #1
 801cd86:	b2db      	uxtb	r3, r3
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d050      	beq.n	801ce2e <lv_label_signal+0x16e>
            const lv_style_t * style = lv_label_get_style(label, LV_LABEL_STYLE_MAIN);
 801cd8c:	2100      	movs	r1, #0
 801cd8e:	68f8      	ldr	r0, [r7, #12]
 801cd90:	f7ff f977 	bl	801c082 <lv_label_get_style>
 801cd94:	6138      	str	r0, [r7, #16]

            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.left);
 801cd96:	693b      	ldr	r3, [r7, #16]
 801cd98:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801cda2:	4293      	cmp	r3, r2
 801cda4:	bfb8      	it	lt
 801cda6:	4613      	movlt	r3, r2
 801cda8:	b21a      	sxth	r2, r3
 801cdaa:	68fb      	ldr	r3, [r7, #12]
 801cdac:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 801cdae:	693b      	ldr	r3, [r7, #16]
 801cdb0:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801cdba:	4293      	cmp	r3, r2
 801cdbc:	bfb8      	it	lt
 801cdbe:	4613      	movlt	r3, r2
 801cdc0:	b21a      	sxth	r2, r3
 801cdc2:	68fb      	ldr	r3, [r7, #12]
 801cdc4:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 801cdc6:	693b      	ldr	r3, [r7, #16]
 801cdc8:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 801cdcc:	68fb      	ldr	r3, [r7, #12]
 801cdce:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801cdd2:	4293      	cmp	r3, r2
 801cdd4:	bfb8      	it	lt
 801cdd6:	4613      	movlt	r3, r2
 801cdd8:	b21a      	sxth	r2, r3
 801cdda:	68fb      	ldr	r3, [r7, #12]
 801cddc:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 801cdde:	693b      	ldr	r3, [r7, #16]
 801cde0:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 801cde4:	68fb      	ldr	r3, [r7, #12]
 801cde6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801cdea:	4293      	cmp	r3, r2
 801cdec:	bfb8      	it	lt
 801cdee:	4613      	movlt	r3, r2
 801cdf0:	b21a      	sxth	r2, r3
 801cdf2:	68fb      	ldr	r3, [r7, #12]
 801cdf4:	869a      	strh	r2, [r3, #52]	; 0x34
 801cdf6:	e01a      	b.n	801ce2e <lv_label_signal+0x16e>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801cdf8:	7afb      	ldrb	r3, [r7, #11]
 801cdfa:	2b06      	cmp	r3, #6
 801cdfc:	d117      	bne.n	801ce2e <lv_label_signal+0x16e>
        lv_obj_type_t * buf = param;
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	617b      	str	r3, [r7, #20]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ce02:	2300      	movs	r3, #0
 801ce04:	77fb      	strb	r3, [r7, #31]
 801ce06:	e008      	b.n	801ce1a <lv_label_signal+0x15a>
            if(buf->type[i] == NULL) break;
 801ce08:	7ffa      	ldrb	r2, [r7, #31]
 801ce0a:	697b      	ldr	r3, [r7, #20]
 801ce0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d006      	beq.n	801ce22 <lv_label_signal+0x162>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ce14:	7ffb      	ldrb	r3, [r7, #31]
 801ce16:	3301      	adds	r3, #1
 801ce18:	77fb      	strb	r3, [r7, #31]
 801ce1a:	7ffb      	ldrb	r3, [r7, #31]
 801ce1c:	2b06      	cmp	r3, #6
 801ce1e:	d9f3      	bls.n	801ce08 <lv_label_signal+0x148>
 801ce20:	e000      	b.n	801ce24 <lv_label_signal+0x164>
            if(buf->type[i] == NULL) break;
 801ce22:	bf00      	nop
        }
        buf->type[i] = "lv_label";
 801ce24:	7ffa      	ldrb	r2, [r7, #31]
 801ce26:	697b      	ldr	r3, [r7, #20]
 801ce28:	4904      	ldr	r1, [pc, #16]	; (801ce3c <lv_label_signal+0x17c>)
 801ce2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801ce2e:	7fbb      	ldrb	r3, [r7, #30]
}
 801ce30:	4618      	mov	r0, r3
 801ce32:	3724      	adds	r7, #36	; 0x24
 801ce34:	46bd      	mov	sp, r7
 801ce36:	bd90      	pop	{r4, r7, pc}
 801ce38:	200177dc 	.word	0x200177dc
 801ce3c:	0802c938 	.word	0x0802c938

0801ce40 <lv_label_refr_text>:
/**
 * Refresh the label with its text stored in its extended data
 * @param label pointer to a label object
 */
static void lv_label_refr_text(lv_obj_t * label)
{
 801ce40:	b590      	push	{r4, r7, lr}
 801ce42:	b09d      	sub	sp, #116	; 0x74
 801ce44:	af04      	add	r7, sp, #16
 801ce46:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801ce48:	6878      	ldr	r0, [r7, #4]
 801ce4a:	f7ec ffe6 	bl	8009e1a <lv_obj_get_ext_attr>
 801ce4e:	64f8      	str	r0, [r7, #76]	; 0x4c

    if(ext->text == NULL) return;
 801ce50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	f000 828f 	beq.w	801d378 <lv_label_refr_text+0x538>

    ext->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801ce5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ce5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ce60:	611a      	str	r2, [r3, #16]

    lv_coord_t max_w         = lv_obj_get_width(label);
 801ce62:	6878      	ldr	r0, [r7, #4]
 801ce64:	f7ec feee 	bl	8009c44 <lv_obj_get_width>
 801ce68:	4603      	mov	r3, r0
 801ce6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    const lv_style_t * style = lv_obj_get_style(label);
 801ce6e:	6878      	ldr	r0, [r7, #4]
 801ce70:	f7ec ff18 	bl	8009ca4 <lv_obj_get_style>
 801ce74:	64b8      	str	r0, [r7, #72]	; 0x48
    const lv_font_t * font   = style->text.font;
 801ce76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ce78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce7a:	647b      	str	r3, [r7, #68]	; 0x44

    /*If the width will be expanded set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801ce7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ce7e:	7f9b      	ldrb	r3, [r3, #30]
 801ce80:	f003 0307 	and.w	r3, r3, #7
 801ce84:	b2db      	uxtb	r3, r3
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d103      	bne.n	801ce92 <lv_label_refr_text+0x52>
        max_w = LV_COORD_MAX;
 801ce8a:	f647 4318 	movw	r3, #31768	; 0x7c18
 801ce8e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    }

    /*Calc. the height and longest line*/
    lv_point_t size;
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801ce92:	2300      	movs	r3, #0
 801ce94:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801ce98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ce9a:	7f9b      	ldrb	r3, [r3, #30]
 801ce9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cea0:	b2db      	uxtb	r3, r3
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d005      	beq.n	801ceb2 <lv_label_refr_text+0x72>
 801cea6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801ceaa:	f043 0301 	orr.w	r3, r3, #1
 801ceae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801ceb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ceb4:	7f9b      	ldrb	r3, [r3, #30]
 801ceb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801ceba:	b2db      	uxtb	r3, r3
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d005      	beq.n	801cecc <lv_label_refr_text+0x8c>
 801cec0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801cec4:	f043 0302 	orr.w	r3, r3, #2
 801cec8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 801cecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cece:	6819      	ldr	r1, [r3, #0]
 801ced0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ced2:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 801ced6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ced8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801cedc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801cee0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 801cee4:	9202      	str	r2, [sp, #8]
 801cee6:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 801ceea:	9201      	str	r2, [sp, #4]
 801ceec:	9300      	str	r3, [sp, #0]
 801ceee:	4623      	mov	r3, r4
 801cef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cef2:	f7f9 fe7f 	bl	8016bf4 <lv_txt_get_size>

    /*Set the full size in expand mode*/
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801cef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cef8:	7f9b      	ldrb	r3, [r3, #30]
 801cefa:	f003 0307 	and.w	r3, r3, #7
 801cefe:	b2db      	uxtb	r3, r3
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	d108      	bne.n	801cf16 <lv_label_refr_text+0xd6>
        lv_obj_set_size(label, size.x, size.y);
 801cf04:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801cf08:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801cf0c:	4619      	mov	r1, r3
 801cf0e:	6878      	ldr	r0, [r7, #4]
 801cf10:	f7eb ff0b 	bl	8008d2a <lv_obj_set_size>
 801cf14:	e22c      	b.n	801d370 <lv_label_refr_text+0x530>
    }
    /*In roll mode keep the size but start offset animations*/
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 801cf16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cf18:	7f9b      	ldrb	r3, [r3, #30]
 801cf1a:	f003 0307 	and.w	r3, r3, #7
 801cf1e:	b2db      	uxtb	r3, r3
 801cf20:	2b03      	cmp	r3, #3
 801cf22:	f040 809f 	bne.w	801d064 <lv_label_refr_text+0x224>
#if LV_USE_ANIMATION
        lv_anim_t anim;
        anim.var      = label;
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	60bb      	str	r3, [r7, #8]
        anim.repeat   = 1;
 801cf2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801cf2e:	f043 0302 	orr.w	r3, r3, #2
 801cf32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.playback = 1;
 801cf36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801cf3a:	f043 0301 	orr.w	r3, r3, #1
 801cf3e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.start    = 0;
 801cf42:	2300      	movs	r3, #0
 801cf44:	61bb      	str	r3, [r7, #24]
        anim.ready_cb = NULL;
 801cf46:	2300      	movs	r3, #0
 801cf48:	617b      	str	r3, [r7, #20]
        anim.path_cb  = lv_anim_path_linear;
 801cf4a:	4baa      	ldr	r3, [pc, #680]	; (801d1f4 <lv_label_refr_text+0x3b4>)
 801cf4c:	613b      	str	r3, [r7, #16]
        anim.playback_pause =
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801cf4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf52:	2220      	movs	r2, #32
 801cf54:	2120      	movs	r1, #32
 801cf56:	4618      	mov	r0, r3
 801cf58:	f7f7 fd18 	bl	801498c <lv_font_get_glyph_width>
 801cf5c:	4603      	mov	r3, r0
 801cf5e:	461a      	mov	r2, r3
 801cf60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cf62:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801cf66:	4413      	add	r3, r2
 801cf68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cf6c:	fb02 f303 	mul.w	r3, r2, r3
             ext->anim_speed) *
 801cf70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801cf72:	8b92      	ldrh	r2, [r2, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801cf74:	fb93 f3f2 	sdiv	r3, r3, r2
        anim.playback_pause =
 801cf78:	b29b      	uxth	r3, r3
 801cf7a:	461a      	mov	r2, r3
 801cf7c:	0052      	lsls	r2, r2, #1
 801cf7e:	4413      	add	r3, r2
 801cf80:	b29b      	uxth	r3, r3
 801cf82:	84bb      	strh	r3, [r7, #36]	; 0x24
            LV_LABEL_WAIT_CHAR_COUNT;
        anim.repeat_pause = anim.playback_pause;
 801cf84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cf86:	84fb      	strh	r3, [r7, #38]	; 0x26
        anim.act_time     = -anim.playback_pause;
 801cf88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cf8a:	425b      	negs	r3, r3
 801cf8c:	b29b      	uxth	r3, r3
 801cf8e:	b21b      	sxth	r3, r3
 801cf90:	847b      	strh	r3, [r7, #34]	; 0x22

        bool hor_anim = false;
 801cf92:	2300      	movs	r3, #0
 801cf94:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if(size.x > lv_obj_get_width(label)) {
 801cf98:	f9b7 4038 	ldrsh.w	r4, [r7, #56]	; 0x38
 801cf9c:	6878      	ldr	r0, [r7, #4]
 801cf9e:	f7ec fe51 	bl	8009c44 <lv_obj_get_width>
 801cfa2:	4603      	mov	r3, r0
 801cfa4:	429c      	cmp	r4, r3
 801cfa6:	dd1e      	ble.n	801cfe6 <lv_label_refr_text+0x1a6>
            anim.end     = lv_obj_get_width(label) - size.x;
 801cfa8:	6878      	ldr	r0, [r7, #4]
 801cfaa:	f7ec fe4b 	bl	8009c44 <lv_obj_get_width>
 801cfae:	4603      	mov	r3, r0
 801cfb0:	461a      	mov	r2, r3
 801cfb2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801cfb6:	1ad3      	subs	r3, r2, r3
 801cfb8:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 801cfba:	4b8f      	ldr	r3, [pc, #572]	; (801d1f8 <lv_label_refr_text+0x3b8>)
 801cfbc:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801cfbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cfc0:	8b9b      	ldrh	r3, [r3, #28]
 801cfc2:	69ba      	ldr	r2, [r7, #24]
 801cfc4:	b211      	sxth	r1, r2
 801cfc6:	69fa      	ldr	r2, [r7, #28]
 801cfc8:	b212      	sxth	r2, r2
 801cfca:	4618      	mov	r0, r3
 801cfcc:	f7f8 fa68 	bl	80154a0 <lv_anim_speed_to_time>
 801cfd0:	4603      	mov	r3, r0
 801cfd2:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801cfd4:	f107 0308 	add.w	r3, r7, #8
 801cfd8:	4618      	mov	r0, r3
 801cfda:	f7f8 f9e9 	bl	80153b0 <lv_anim_create>
            hor_anim = true;
 801cfde:	2301      	movs	r3, #1
 801cfe0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 801cfe4:	e006      	b.n	801cff4 <lv_label_refr_text+0x1b4>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801cfe6:	4984      	ldr	r1, [pc, #528]	; (801d1f8 <lv_label_refr_text+0x3b8>)
 801cfe8:	6878      	ldr	r0, [r7, #4]
 801cfea:	f7f8 fa21 	bl	8015430 <lv_anim_del>
            ext->offset.x = 0;
 801cfee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cff0:	2200      	movs	r2, #0
 801cff2:	815a      	strh	r2, [r3, #10]
        }

        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 801cff4:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801cff8:	6878      	ldr	r0, [r7, #4]
 801cffa:	f7ec fe31 	bl	8009c60 <lv_obj_get_height>
 801cffe:	4603      	mov	r3, r0
 801d000:	429c      	cmp	r4, r3
 801d002:	dd27      	ble.n	801d054 <lv_label_refr_text+0x214>
 801d004:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801d008:	f083 0301 	eor.w	r3, r3, #1
 801d00c:	b2db      	uxtb	r3, r3
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d020      	beq.n	801d054 <lv_label_refr_text+0x214>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 801d012:	6878      	ldr	r0, [r7, #4]
 801d014:	f7ec fe24 	bl	8009c60 <lv_obj_get_height>
 801d018:	4603      	mov	r3, r0
 801d01a:	461a      	mov	r2, r3
 801d01c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d020:	1ad4      	subs	r4, r2, r3
 801d022:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d024:	f7fe ffe4 	bl	801bff0 <lv_font_get_line_height>
 801d028:	4603      	mov	r3, r0
 801d02a:	1ae3      	subs	r3, r4, r3
 801d02c:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 801d02e:	4b73      	ldr	r3, [pc, #460]	; (801d1fc <lv_label_refr_text+0x3bc>)
 801d030:	60fb      	str	r3, [r7, #12]

            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801d032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d034:	8b9b      	ldrh	r3, [r3, #28]
 801d036:	69ba      	ldr	r2, [r7, #24]
 801d038:	b211      	sxth	r1, r2
 801d03a:	69fa      	ldr	r2, [r7, #28]
 801d03c:	b212      	sxth	r2, r2
 801d03e:	4618      	mov	r0, r3
 801d040:	f7f8 fa2e 	bl	80154a0 <lv_anim_speed_to_time>
 801d044:	4603      	mov	r3, r0
 801d046:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801d048:	f107 0308 	add.w	r3, r7, #8
 801d04c:	4618      	mov	r0, r3
 801d04e:	f7f8 f9af 	bl	80153b0 <lv_anim_create>
 801d052:	e18d      	b.n	801d370 <lv_label_refr_text+0x530>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801d054:	4969      	ldr	r1, [pc, #420]	; (801d1fc <lv_label_refr_text+0x3bc>)
 801d056:	6878      	ldr	r0, [r7, #4]
 801d058:	f7f8 f9ea 	bl	8015430 <lv_anim_del>
            ext->offset.y = 0;
 801d05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d05e:	2200      	movs	r2, #0
 801d060:	819a      	strh	r2, [r3, #12]
 801d062:	e185      	b.n	801d370 <lv_label_refr_text+0x530>
        }
#endif
    }
    /*In roll inf. mode keep the size but start offset animations*/
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 801d064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d066:	7f9b      	ldrb	r3, [r3, #30]
 801d068:	f003 0307 	and.w	r3, r3, #7
 801d06c:	b2db      	uxtb	r3, r3
 801d06e:	2b04      	cmp	r3, #4
 801d070:	f040 809c 	bne.w	801d1ac <lv_label_refr_text+0x36c>
#if LV_USE_ANIMATION
        lv_anim_t anim;
        anim.var      = label;
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	60bb      	str	r3, [r7, #8]
        anim.repeat   = 1;
 801d078:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801d07c:	f043 0302 	orr.w	r3, r3, #2
 801d080:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.playback = 0;
 801d084:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801d088:	f36f 0300 	bfc	r3, #0, #1
 801d08c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.start    = 0;
 801d090:	2300      	movs	r3, #0
 801d092:	61bb      	str	r3, [r7, #24]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801d094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d098:	2220      	movs	r2, #32
 801d09a:	2120      	movs	r1, #32
 801d09c:	4618      	mov	r0, r3
 801d09e:	f7f7 fc75 	bl	801498c <lv_font_get_glyph_width>
 801d0a2:	4603      	mov	r3, r0
 801d0a4:	461a      	mov	r2, r3
 801d0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d0a8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801d0ac:	4413      	add	r3, r2
 801d0ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d0b2:	fb02 f303 	mul.w	r3, r2, r3
                          ext->anim_speed) *
 801d0b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d0b8:	8b92      	ldrh	r2, [r2, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801d0ba:	fb93 f3f2 	sdiv	r3, r3, r2
 801d0be:	b29b      	uxth	r3, r3
 801d0c0:	461a      	mov	r2, r3
 801d0c2:	009b      	lsls	r3, r3, #2
 801d0c4:	1ad3      	subs	r3, r2, r3
 801d0c6:	b29b      	uxth	r3, r3
 801d0c8:	b21b      	sxth	r3, r3
 801d0ca:	847b      	strh	r3, [r7, #34]	; 0x22
                        LV_LABEL_WAIT_CHAR_COUNT;
        anim.ready_cb       = NULL;
 801d0cc:	2300      	movs	r3, #0
 801d0ce:	617b      	str	r3, [r7, #20]
        anim.path_cb        = lv_anim_path_linear;
 801d0d0:	4b48      	ldr	r3, [pc, #288]	; (801d1f4 <lv_label_refr_text+0x3b4>)
 801d0d2:	613b      	str	r3, [r7, #16]
        anim.playback_pause = 0;
 801d0d4:	2300      	movs	r3, #0
 801d0d6:	84bb      	strh	r3, [r7, #36]	; 0x24
        anim.repeat_pause   = 0;
 801d0d8:	2300      	movs	r3, #0
 801d0da:	84fb      	strh	r3, [r7, #38]	; 0x26

        bool hor_anim = false;
 801d0dc:	2300      	movs	r3, #0
 801d0de:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if(size.x > lv_obj_get_width(label)) {
 801d0e2:	f9b7 4038 	ldrsh.w	r4, [r7, #56]	; 0x38
 801d0e6:	6878      	ldr	r0, [r7, #4]
 801d0e8:	f7ec fdac 	bl	8009c44 <lv_obj_get_width>
 801d0ec:	4603      	mov	r3, r0
 801d0ee:	429c      	cmp	r4, r3
 801d0f0:	dd22      	ble.n	801d138 <lv_label_refr_text+0x2f8>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801d0f2:	2220      	movs	r2, #32
 801d0f4:	2120      	movs	r1, #32
 801d0f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d0f8:	f7f7 fc48 	bl	801498c <lv_font_get_glyph_width>
 801d0fc:	4603      	mov	r3, r0
 801d0fe:	461a      	mov	r2, r3
 801d100:	009b      	lsls	r3, r3, #2
 801d102:	1ad3      	subs	r3, r2, r3
 801d104:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801d108:	1a9b      	subs	r3, r3, r2
 801d10a:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 801d10c:	4b3a      	ldr	r3, [pc, #232]	; (801d1f8 <lv_label_refr_text+0x3b8>)
 801d10e:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801d110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d112:	8b9b      	ldrh	r3, [r3, #28]
 801d114:	69ba      	ldr	r2, [r7, #24]
 801d116:	b211      	sxth	r1, r2
 801d118:	69fa      	ldr	r2, [r7, #28]
 801d11a:	b212      	sxth	r2, r2
 801d11c:	4618      	mov	r0, r3
 801d11e:	f7f8 f9bf 	bl	80154a0 <lv_anim_speed_to_time>
 801d122:	4603      	mov	r3, r0
 801d124:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801d126:	f107 0308 	add.w	r3, r7, #8
 801d12a:	4618      	mov	r0, r3
 801d12c:	f7f8 f940 	bl	80153b0 <lv_anim_create>
            hor_anim = true;
 801d130:	2301      	movs	r3, #1
 801d132:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801d136:	e006      	b.n	801d146 <lv_label_refr_text+0x306>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801d138:	492f      	ldr	r1, [pc, #188]	; (801d1f8 <lv_label_refr_text+0x3b8>)
 801d13a:	6878      	ldr	r0, [r7, #4]
 801d13c:	f7f8 f978 	bl	8015430 <lv_anim_del>
            ext->offset.x = 0;
 801d140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d142:	2200      	movs	r2, #0
 801d144:	815a      	strh	r2, [r3, #10]
        }

        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 801d146:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801d14a:	6878      	ldr	r0, [r7, #4]
 801d14c:	f7ec fd88 	bl	8009c60 <lv_obj_get_height>
 801d150:	4603      	mov	r3, r0
 801d152:	429c      	cmp	r4, r3
 801d154:	dd22      	ble.n	801d19c <lv_label_refr_text+0x35c>
 801d156:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801d15a:	f083 0301 	eor.w	r3, r3, #1
 801d15e:	b2db      	uxtb	r3, r3
 801d160:	2b00      	cmp	r3, #0
 801d162:	d01b      	beq.n	801d19c <lv_label_refr_text+0x35c>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 801d164:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d168:	425c      	negs	r4, r3
 801d16a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d16c:	f7fe ff40 	bl	801bff0 <lv_font_get_line_height>
 801d170:	4603      	mov	r3, r0
 801d172:	1ae3      	subs	r3, r4, r3
 801d174:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 801d176:	4b21      	ldr	r3, [pc, #132]	; (801d1fc <lv_label_refr_text+0x3bc>)
 801d178:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801d17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d17c:	8b9b      	ldrh	r3, [r3, #28]
 801d17e:	69ba      	ldr	r2, [r7, #24]
 801d180:	b211      	sxth	r1, r2
 801d182:	69fa      	ldr	r2, [r7, #28]
 801d184:	b212      	sxth	r2, r2
 801d186:	4618      	mov	r0, r3
 801d188:	f7f8 f98a 	bl	80154a0 <lv_anim_speed_to_time>
 801d18c:	4603      	mov	r3, r0
 801d18e:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801d190:	f107 0308 	add.w	r3, r7, #8
 801d194:	4618      	mov	r0, r3
 801d196:	f7f8 f90b 	bl	80153b0 <lv_anim_create>
 801d19a:	e0e9      	b.n	801d370 <lv_label_refr_text+0x530>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801d19c:	4917      	ldr	r1, [pc, #92]	; (801d1fc <lv_label_refr_text+0x3bc>)
 801d19e:	6878      	ldr	r0, [r7, #4]
 801d1a0:	f7f8 f946 	bl	8015430 <lv_anim_del>
            ext->offset.y = 0;
 801d1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d1a6:	2200      	movs	r2, #0
 801d1a8:	819a      	strh	r2, [r3, #12]
 801d1aa:	e0e1      	b.n	801d370 <lv_label_refr_text+0x530>
        }
#endif
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 801d1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d1ae:	7f9b      	ldrb	r3, [r3, #30]
 801d1b0:	f003 0307 	and.w	r3, r3, #7
 801d1b4:	b2db      	uxtb	r3, r3
 801d1b6:	2b02      	cmp	r3, #2
 801d1b8:	f040 80cd 	bne.w	801d356 <lv_label_refr_text+0x516>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 801d1bc:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801d1c0:	6878      	ldr	r0, [r7, #4]
 801d1c2:	f7ec fd4d 	bl	8009c60 <lv_obj_get_height>
 801d1c6:	4603      	mov	r3, r0
 801d1c8:	429c      	cmp	r4, r3
 801d1ca:	dc04      	bgt.n	801d1d6 <lv_label_refr_text+0x396>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 801d1cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d1ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d1d2:	811a      	strh	r2, [r3, #8]
 801d1d4:	e0cc      	b.n	801d370 <lv_label_refr_text+0x530>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 801d1d6:	4b0a      	ldr	r3, [pc, #40]	; (801d200 <lv_label_refr_text+0x3c0>)
 801d1d8:	681b      	ldr	r3, [r3, #0]
 801d1da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d1dc:	6812      	ldr	r2, [r2, #0]
 801d1de:	4610      	mov	r0, r2
 801d1e0:	4798      	blx	r3
 801d1e2:	4603      	mov	r3, r0
 801d1e4:	2b03      	cmp	r3, #3
 801d1e6:	d80d      	bhi.n	801d204 <lv_label_refr_text+0x3c4>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 801d1e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d1ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d1ee:	811a      	strh	r2, [r3, #8]
 801d1f0:	e0be      	b.n	801d370 <lv_label_refr_text+0x530>
 801d1f2:	bf00      	nop
 801d1f4:	08015501 	.word	0x08015501
 801d1f8:	0801d441 	.word	0x0801d441
 801d1fc:	0801d469 	.word	0x0801d469
 801d200:	200027b0 	.word	0x200027b0
        } else {
            lv_point_t p;
            p.x = lv_obj_get_width(label) -
 801d204:	6878      	ldr	r0, [r7, #4]
 801d206:	f7ec fd1d 	bl	8009c44 <lv_obj_get_width>
 801d20a:	4603      	mov	r3, r0
 801d20c:	b29c      	uxth	r4, r3
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 801d20e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d212:	222e      	movs	r2, #46	; 0x2e
 801d214:	212e      	movs	r1, #46	; 0x2e
 801d216:	4618      	mov	r0, r3
 801d218:	f7f7 fbb8 	bl	801498c <lv_font_get_glyph_width>
 801d21c:	4603      	mov	r3, r0
 801d21e:	461a      	mov	r2, r3
 801d220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d222:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801d226:	4413      	add	r3, r2
            p.x = lv_obj_get_width(label) -
 801d228:	b29b      	uxth	r3, r3
 801d22a:	461a      	mov	r2, r3
 801d22c:	009b      	lsls	r3, r3, #2
 801d22e:	1ad3      	subs	r3, r2, r3
 801d230:	b29b      	uxth	r3, r3
 801d232:	4423      	add	r3, r4
 801d234:	b29b      	uxth	r3, r3
 801d236:	b21b      	sxth	r3, r3
 801d238:	86bb      	strh	r3, [r7, #52]	; 0x34
                      LV_LABEL_DOT_NUM; /*Shrink with dots*/
            p.y = lv_obj_get_height(label);
 801d23a:	6878      	ldr	r0, [r7, #4]
 801d23c:	f7ec fd10 	bl	8009c60 <lv_obj_get_height>
 801d240:	4603      	mov	r3, r0
 801d242:	86fb      	strh	r3, [r7, #54]	; 0x36
            p.y -= p.y %
 801d244:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d248:	461c      	mov	r4, r3
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 801d24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d24e:	4618      	mov	r0, r3
 801d250:	f7fe fece 	bl	801bff0 <lv_font_get_line_height>
 801d254:	4603      	mov	r3, r0
 801d256:	461a      	mov	r2, r3
 801d258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d25a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801d25e:	4413      	add	r3, r2
            p.y -= p.y %
 801d260:	fb94 f2f3 	sdiv	r2, r4, r3
 801d264:	fb03 f302 	mul.w	r3, r3, r2
 801d268:	1ae3      	subs	r3, r4, r3
 801d26a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801d26e:	b292      	uxth	r2, r2
 801d270:	b29b      	uxth	r3, r3
 801d272:	1ad3      	subs	r3, r2, r3
 801d274:	b29b      	uxth	r3, r3
 801d276:	b21b      	sxth	r3, r3
 801d278:	86fb      	strh	r3, [r7, #54]	; 0x36
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 801d27a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d27e:	b29a      	uxth	r2, r3
 801d280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d282:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801d286:	b29b      	uxth	r3, r3
 801d288:	1ad3      	subs	r3, r2, r3
 801d28a:	b29b      	uxth	r3, r3
 801d28c:	b21b      	sxth	r3, r3
 801d28e:	86fb      	strh	r3, [r7, #54]	; 0x36
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 801d290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d294:	4619      	mov	r1, r3
 801d296:	6878      	ldr	r0, [r7, #4]
 801d298:	f7ff fa00 	bl	801c69c <lv_label_get_letter_on>
 801d29c:	4603      	mov	r3, r0
 801d29e:	643b      	str	r3, [r7, #64]	; 0x40

            /*Save letters under the dots and replace them with dots*/
            uint32_t i;
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 801d2a0:	4b37      	ldr	r3, [pc, #220]	; (801d380 <lv_label_refr_text+0x540>)
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d2a6:	6812      	ldr	r2, [r2, #0]
 801d2a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801d2aa:	4610      	mov	r0, r2
 801d2ac:	4798      	blx	r3
 801d2ae:	4603      	mov	r3, r0
 801d2b0:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t byte_id_ori = byte_id;
 801d2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
            uint8_t len          = 0;
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801d2bc:	2300      	movs	r3, #0
 801d2be:	657b      	str	r3, [r7, #84]	; 0x54
 801d2c0:	e019      	b.n	801d2f6 <lv_label_refr_text+0x4b6>
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 801d2c2:	4b30      	ldr	r3, [pc, #192]	; (801d384 <lv_label_refr_text+0x544>)
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d2c8:	6811      	ldr	r1, [r2, #0]
 801d2ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d2cc:	440a      	add	r2, r1
 801d2ce:	4610      	mov	r0, r2
 801d2d0:	4798      	blx	r3
 801d2d2:	4603      	mov	r3, r0
 801d2d4:	461a      	mov	r2, r3
 801d2d6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801d2da:	4413      	add	r3, r2
 801d2dc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                lv_txt_encoded_next(ext->text, &byte_id);
 801d2e0:	4b29      	ldr	r3, [pc, #164]	; (801d388 <lv_label_refr_text+0x548>)
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d2e6:	6812      	ldr	r2, [r2, #0]
 801d2e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801d2ec:	4610      	mov	r0, r2
 801d2ee:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801d2f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d2f2:	3301      	adds	r3, #1
 801d2f4:	657b      	str	r3, [r7, #84]	; 0x54
 801d2f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d2f8:	2b03      	cmp	r3, #3
 801d2fa:	d9e2      	bls.n	801d2c2 <lv_label_refr_text+0x482>
            }

            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 801d2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d2fe:	681a      	ldr	r2, [r3, #0]
 801d300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d302:	4413      	add	r3, r2
 801d304:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d308:	b292      	uxth	r2, r2
 801d30a:	4619      	mov	r1, r3
 801d30c:	6878      	ldr	r0, [r7, #4]
 801d30e:	f000 f8bf 	bl	801d490 <lv_label_set_dot_tmp>
 801d312:	4603      	mov	r3, r0
 801d314:	2b00      	cmp	r3, #0
 801d316:	d02b      	beq.n	801d370 <lv_label_refr_text+0x530>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 801d318:	2300      	movs	r3, #0
 801d31a:	657b      	str	r3, [r7, #84]	; 0x54
 801d31c:	e00a      	b.n	801d334 <lv_label_refr_text+0x4f4>
                    ext->text[byte_id_ori + i] = '.';
 801d31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d320:	681a      	ldr	r2, [r3, #0]
 801d322:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d326:	440b      	add	r3, r1
 801d328:	4413      	add	r3, r2
 801d32a:	222e      	movs	r2, #46	; 0x2e
 801d32c:	701a      	strb	r2, [r3, #0]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 801d32e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d330:	3301      	adds	r3, #1
 801d332:	657b      	str	r3, [r7, #84]	; 0x54
 801d334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d336:	2b02      	cmp	r3, #2
 801d338:	d9f1      	bls.n	801d31e <lv_label_refr_text+0x4de>
                }
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 801d33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d33c:	681a      	ldr	r2, [r3, #0]
 801d33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d340:	3303      	adds	r3, #3
 801d342:	4413      	add	r3, r2
 801d344:	2200      	movs	r2, #0
 801d346:	701a      	strb	r2, [r3, #0]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801d348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d34a:	b29b      	uxth	r3, r3
 801d34c:	3303      	adds	r3, #3
 801d34e:	b29a      	uxth	r2, r3
 801d350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d352:	811a      	strh	r2, [r3, #8]
 801d354:	e00c      	b.n	801d370 <lv_label_refr_text+0x530>
            }
        }
    }
    /*In break mode only the height can change*/
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 801d356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d358:	7f9b      	ldrb	r3, [r3, #30]
 801d35a:	f003 0307 	and.w	r3, r3, #7
 801d35e:	b2db      	uxtb	r3, r3
 801d360:	2b01      	cmp	r3, #1
 801d362:	d105      	bne.n	801d370 <lv_label_refr_text+0x530>
        lv_obj_set_height(label, size.y);
 801d364:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d368:	4619      	mov	r1, r3
 801d36a:	6878      	ldr	r0, [r7, #4]
 801d36c:	f7eb fd6b 	bl	8008e46 <lv_obj_set_height>
    /*Do not set the size in Clip mode*/
    else if(ext->long_mode == LV_LABEL_LONG_CROP) {
        /*Do nothing*/
    }

    lv_obj_invalidate(label);
 801d370:	6878      	ldr	r0, [r7, #4]
 801d372:	f7eb fb26 	bl	80089c2 <lv_obj_invalidate>
 801d376:	e000      	b.n	801d37a <lv_label_refr_text+0x53a>
    if(ext->text == NULL) return;
 801d378:	bf00      	nop
}
 801d37a:	3764      	adds	r7, #100	; 0x64
 801d37c:	46bd      	mov	sp, r7
 801d37e:	bd90      	pop	{r4, r7, pc}
 801d380:	200027a8 	.word	0x200027a8
 801d384:	2000279c 	.word	0x2000279c
 801d388:	200027a0 	.word	0x200027a0

0801d38c <lv_label_revert_dots>:

static void lv_label_revert_dots(lv_obj_t * label)
{
 801d38c:	b580      	push	{r7, lr}
 801d38e:	b088      	sub	sp, #32
 801d390:	af00      	add	r7, sp, #0
 801d392:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d394:	6878      	ldr	r0, [r7, #4]
 801d396:	f7ec fd40 	bl	8009e1a <lv_obj_get_ext_attr>
 801d39a:	61b8      	str	r0, [r7, #24]
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801d39c:	69bb      	ldr	r3, [r7, #24]
 801d39e:	7f9b      	ldrb	r3, [r3, #30]
 801d3a0:	f003 0307 	and.w	r3, r3, #7
 801d3a4:	b2db      	uxtb	r3, r3
 801d3a6:	2b02      	cmp	r3, #2
 801d3a8:	d142      	bne.n	801d430 <lv_label_revert_dots+0xa4>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 801d3aa:	69bb      	ldr	r3, [r7, #24]
 801d3ac:	891b      	ldrh	r3, [r3, #8]
 801d3ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d3b2:	4293      	cmp	r3, r2
 801d3b4:	d03e      	beq.n	801d434 <lv_label_revert_dots+0xa8>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
 801d3b6:	69bb      	ldr	r3, [r7, #24]
 801d3b8:	891b      	ldrh	r3, [r3, #8]
 801d3ba:	3b03      	subs	r3, #3
 801d3bc:	617b      	str	r3, [r7, #20]
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 801d3be:	4b1f      	ldr	r3, [pc, #124]	; (801d43c <lv_label_revert_dots+0xb0>)
 801d3c0:	681b      	ldr	r3, [r3, #0]
 801d3c2:	69ba      	ldr	r2, [r7, #24]
 801d3c4:	6812      	ldr	r2, [r2, #0]
 801d3c6:	6979      	ldr	r1, [r7, #20]
 801d3c8:	4610      	mov	r0, r2
 801d3ca:	4798      	blx	r3
 801d3cc:	6138      	str	r0, [r7, #16]

    /*Restore the characters*/
    uint8_t i      = 0;
 801d3ce:	2300      	movs	r3, #0
 801d3d0:	77fb      	strb	r3, [r7, #31]
    char * dot_tmp = lv_label_get_dot_tmp(label);
 801d3d2:	6878      	ldr	r0, [r7, #4]
 801d3d4:	f000 f89f 	bl	801d516 <lv_label_get_dot_tmp>
 801d3d8:	60f8      	str	r0, [r7, #12]
    while(ext->text[byte_i + i] != '\0') {
 801d3da:	e00d      	b.n	801d3f8 <lv_label_revert_dots+0x6c>
        ext->text[byte_i + i] = dot_tmp[i];
 801d3dc:	7ffb      	ldrb	r3, [r7, #31]
 801d3de:	68fa      	ldr	r2, [r7, #12]
 801d3e0:	441a      	add	r2, r3
 801d3e2:	69bb      	ldr	r3, [r7, #24]
 801d3e4:	6819      	ldr	r1, [r3, #0]
 801d3e6:	7ff8      	ldrb	r0, [r7, #31]
 801d3e8:	693b      	ldr	r3, [r7, #16]
 801d3ea:	4403      	add	r3, r0
 801d3ec:	440b      	add	r3, r1
 801d3ee:	7812      	ldrb	r2, [r2, #0]
 801d3f0:	701a      	strb	r2, [r3, #0]
        i++;
 801d3f2:	7ffb      	ldrb	r3, [r7, #31]
 801d3f4:	3301      	adds	r3, #1
 801d3f6:	77fb      	strb	r3, [r7, #31]
    while(ext->text[byte_i + i] != '\0') {
 801d3f8:	69bb      	ldr	r3, [r7, #24]
 801d3fa:	681a      	ldr	r2, [r3, #0]
 801d3fc:	7ff9      	ldrb	r1, [r7, #31]
 801d3fe:	693b      	ldr	r3, [r7, #16]
 801d400:	440b      	add	r3, r1
 801d402:	4413      	add	r3, r2
 801d404:	781b      	ldrb	r3, [r3, #0]
 801d406:	2b00      	cmp	r3, #0
 801d408:	d1e8      	bne.n	801d3dc <lv_label_revert_dots+0x50>
    }
    ext->text[byte_i + i] = dot_tmp[i];
 801d40a:	7ffb      	ldrb	r3, [r7, #31]
 801d40c:	68fa      	ldr	r2, [r7, #12]
 801d40e:	441a      	add	r2, r3
 801d410:	69bb      	ldr	r3, [r7, #24]
 801d412:	6819      	ldr	r1, [r3, #0]
 801d414:	7ff8      	ldrb	r0, [r7, #31]
 801d416:	693b      	ldr	r3, [r7, #16]
 801d418:	4403      	add	r3, r0
 801d41a:	440b      	add	r3, r1
 801d41c:	7812      	ldrb	r2, [r2, #0]
 801d41e:	701a      	strb	r2, [r3, #0]
    lv_label_dot_tmp_free(label);
 801d420:	6878      	ldr	r0, [r7, #4]
 801d422:	f000 f890 	bl	801d546 <lv_label_dot_tmp_free>

    ext->dot_end = LV_LABEL_DOT_END_INV;
 801d426:	69bb      	ldr	r3, [r7, #24]
 801d428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d42c:	811a      	strh	r2, [r3, #8]
 801d42e:	e002      	b.n	801d436 <lv_label_revert_dots+0xaa>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801d430:	bf00      	nop
 801d432:	e000      	b.n	801d436 <lv_label_revert_dots+0xaa>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 801d434:	bf00      	nop
}
 801d436:	3720      	adds	r7, #32
 801d438:	46bd      	mov	sp, r7
 801d43a:	bd80      	pop	{r7, pc}
 801d43c:	200027a8 	.word	0x200027a8

0801d440 <lv_label_set_offset_x>:

#if LV_USE_ANIMATION
static void lv_label_set_offset_x(lv_obj_t * label, lv_coord_t x)
{
 801d440:	b580      	push	{r7, lr}
 801d442:	b084      	sub	sp, #16
 801d444:	af00      	add	r7, sp, #0
 801d446:	6078      	str	r0, [r7, #4]
 801d448:	460b      	mov	r3, r1
 801d44a:	807b      	strh	r3, [r7, #2]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d44c:	6878      	ldr	r0, [r7, #4]
 801d44e:	f7ec fce4 	bl	8009e1a <lv_obj_get_ext_attr>
 801d452:	60f8      	str	r0, [r7, #12]
    ext->offset.x        = x;
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	887a      	ldrh	r2, [r7, #2]
 801d458:	815a      	strh	r2, [r3, #10]
    lv_obj_invalidate(label);
 801d45a:	6878      	ldr	r0, [r7, #4]
 801d45c:	f7eb fab1 	bl	80089c2 <lv_obj_invalidate>
}
 801d460:	bf00      	nop
 801d462:	3710      	adds	r7, #16
 801d464:	46bd      	mov	sp, r7
 801d466:	bd80      	pop	{r7, pc}

0801d468 <lv_label_set_offset_y>:

static void lv_label_set_offset_y(lv_obj_t * label, lv_coord_t y)
{
 801d468:	b580      	push	{r7, lr}
 801d46a:	b084      	sub	sp, #16
 801d46c:	af00      	add	r7, sp, #0
 801d46e:	6078      	str	r0, [r7, #4]
 801d470:	460b      	mov	r3, r1
 801d472:	807b      	strh	r3, [r7, #2]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d474:	6878      	ldr	r0, [r7, #4]
 801d476:	f7ec fcd0 	bl	8009e1a <lv_obj_get_ext_attr>
 801d47a:	60f8      	str	r0, [r7, #12]
    ext->offset.y        = y;
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	887a      	ldrh	r2, [r7, #2]
 801d480:	819a      	strh	r2, [r3, #12]
    lv_obj_invalidate(label);
 801d482:	6878      	ldr	r0, [r7, #4]
 801d484:	f7eb fa9d 	bl	80089c2 <lv_obj_invalidate>
}
 801d488:	bf00      	nop
 801d48a:	3710      	adds	r7, #16
 801d48c:	46bd      	mov	sp, r7
 801d48e:	bd80      	pop	{r7, pc}

0801d490 <lv_label_set_dot_tmp>:
 * @param label pointer to label object
 * @param len Number of characters to store.
 * @return true on success.
 */
static bool lv_label_set_dot_tmp(lv_obj_t * label, char * data, uint16_t len)
{
 801d490:	b580      	push	{r7, lr}
 801d492:	b086      	sub	sp, #24
 801d494:	af00      	add	r7, sp, #0
 801d496:	60f8      	str	r0, [r7, #12]
 801d498:	60b9      	str	r1, [r7, #8]
 801d49a:	4613      	mov	r3, r2
 801d49c:	80fb      	strh	r3, [r7, #6]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d49e:	68f8      	ldr	r0, [r7, #12]
 801d4a0:	f7ec fcbb 	bl	8009e1a <lv_obj_get_ext_attr>
 801d4a4:	6178      	str	r0, [r7, #20]
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 801d4a6:	68f8      	ldr	r0, [r7, #12]
 801d4a8:	f000 f84d 	bl	801d546 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 801d4ac:	88fb      	ldrh	r3, [r7, #6]
 801d4ae:	2b04      	cmp	r3, #4
 801d4b0:	d920      	bls.n	801d4f4 <lv_label_set_dot_tmp+0x64>
        /* Memory needs to be allocated. Allocates an additional byte
         * for a NULL-terminator so it can be copied. */
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 801d4b2:	88fb      	ldrh	r3, [r7, #6]
 801d4b4:	3301      	adds	r3, #1
 801d4b6:	4618      	mov	r0, r3
 801d4b8:	f7f9 f850 	bl	801655c <lv_mem_alloc>
 801d4bc:	4602      	mov	r2, r0
 801d4be:	697b      	ldr	r3, [r7, #20]
 801d4c0:	605a      	str	r2, [r3, #4]
        if(ext->dot.tmp_ptr == NULL) {
 801d4c2:	697b      	ldr	r3, [r7, #20]
 801d4c4:	685b      	ldr	r3, [r3, #4]
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d101      	bne.n	801d4ce <lv_label_set_dot_tmp+0x3e>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
            return false;
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	e01f      	b.n	801d50e <lv_label_set_dot_tmp+0x7e>
        }
        memcpy(ext->dot.tmp_ptr, data, len);
 801d4ce:	697b      	ldr	r3, [r7, #20]
 801d4d0:	685b      	ldr	r3, [r3, #4]
 801d4d2:	88fa      	ldrh	r2, [r7, #6]
 801d4d4:	68b9      	ldr	r1, [r7, #8]
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	f00c fc6c 	bl	8029db4 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 801d4dc:	697b      	ldr	r3, [r7, #20]
 801d4de:	685a      	ldr	r2, [r3, #4]
 801d4e0:	88fb      	ldrh	r3, [r7, #6]
 801d4e2:	4413      	add	r3, r2
 801d4e4:	2200      	movs	r2, #0
 801d4e6:	701a      	strb	r2, [r3, #0]
        ext->dot_tmp_alloc    = true;
 801d4e8:	697a      	ldr	r2, [r7, #20]
 801d4ea:	7fd3      	ldrb	r3, [r2, #31]
 801d4ec:	f043 0302 	orr.w	r3, r3, #2
 801d4f0:	77d3      	strb	r3, [r2, #31]
 801d4f2:	e00b      	b.n	801d50c <lv_label_set_dot_tmp+0x7c>
    } else {
        /* Characters can be directly stored in object */
        ext->dot_tmp_alloc = false;
 801d4f4:	697a      	ldr	r2, [r7, #20]
 801d4f6:	7fd3      	ldrb	r3, [r2, #31]
 801d4f8:	f36f 0341 	bfc	r3, #1, #1
 801d4fc:	77d3      	strb	r3, [r2, #31]
        memcpy(ext->dot.tmp, data, len);
 801d4fe:	697b      	ldr	r3, [r7, #20]
 801d500:	3304      	adds	r3, #4
 801d502:	88fa      	ldrh	r2, [r7, #6]
 801d504:	68b9      	ldr	r1, [r7, #8]
 801d506:	4618      	mov	r0, r3
 801d508:	f00c fc54 	bl	8029db4 <memcpy>
    }
    return true;
 801d50c:	2301      	movs	r3, #1
}
 801d50e:	4618      	mov	r0, r3
 801d510:	3718      	adds	r7, #24
 801d512:	46bd      	mov	sp, r7
 801d514:	bd80      	pop	{r7, pc}

0801d516 <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
 801d516:	b580      	push	{r7, lr}
 801d518:	b084      	sub	sp, #16
 801d51a:	af00      	add	r7, sp, #0
 801d51c:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d51e:	6878      	ldr	r0, [r7, #4]
 801d520:	f7ec fc7b 	bl	8009e1a <lv_obj_get_ext_attr>
 801d524:	60f8      	str	r0, [r7, #12]
    if(ext->dot_tmp_alloc) {
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	7fdb      	ldrb	r3, [r3, #31]
 801d52a:	f003 0302 	and.w	r3, r3, #2
 801d52e:	b2db      	uxtb	r3, r3
 801d530:	2b00      	cmp	r3, #0
 801d532:	d002      	beq.n	801d53a <lv_label_get_dot_tmp+0x24>
        return ext->dot.tmp_ptr;
 801d534:	68fb      	ldr	r3, [r7, #12]
 801d536:	685b      	ldr	r3, [r3, #4]
 801d538:	e001      	b.n	801d53e <lv_label_get_dot_tmp+0x28>
    } else {
        return ext->dot.tmp;
 801d53a:	68fb      	ldr	r3, [r7, #12]
 801d53c:	3304      	adds	r3, #4
    }
}
 801d53e:	4618      	mov	r0, r3
 801d540:	3710      	adds	r7, #16
 801d542:	46bd      	mov	sp, r7
 801d544:	bd80      	pop	{r7, pc}

0801d546 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 801d546:	b580      	push	{r7, lr}
 801d548:	b084      	sub	sp, #16
 801d54a:	af00      	add	r7, sp, #0
 801d54c:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d54e:	6878      	ldr	r0, [r7, #4]
 801d550:	f7ec fc63 	bl	8009e1a <lv_obj_get_ext_attr>
 801d554:	60f8      	str	r0, [r7, #12]
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 801d556:	68fb      	ldr	r3, [r7, #12]
 801d558:	7fdb      	ldrb	r3, [r3, #31]
 801d55a:	f003 0302 	and.w	r3, r3, #2
 801d55e:	b2db      	uxtb	r3, r3
 801d560:	2b00      	cmp	r3, #0
 801d562:	d008      	beq.n	801d576 <lv_label_dot_tmp_free+0x30>
 801d564:	68fb      	ldr	r3, [r7, #12]
 801d566:	685b      	ldr	r3, [r3, #4]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d004      	beq.n	801d576 <lv_label_dot_tmp_free+0x30>
        lv_mem_free(ext->dot.tmp_ptr);
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	685b      	ldr	r3, [r3, #4]
 801d570:	4618      	mov	r0, r3
 801d572:	f7f9 f833 	bl	80165dc <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 801d576:	68fa      	ldr	r2, [r7, #12]
 801d578:	7fd3      	ldrb	r3, [r2, #31]
 801d57a:	f36f 0341 	bfc	r3, #1, #1
 801d57e:	77d3      	strb	r3, [r2, #31]
    ext->dot.tmp_ptr   = NULL;
 801d580:	68fb      	ldr	r3, [r7, #12]
 801d582:	2200      	movs	r2, #0
 801d584:	605a      	str	r2, [r3, #4]
}
 801d586:	bf00      	nop
 801d588:	3710      	adds	r7, #16
 801d58a:	46bd      	mov	sp, r7
 801d58c:	bd80      	pop	{r7, pc}

0801d58e <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801d58e:	b480      	push	{r7}
 801d590:	b085      	sub	sp, #20
 801d592:	af00      	add	r7, sp, #0
 801d594:	80b8      	strh	r0, [r7, #4]
 801d596:	8039      	strh	r1, [r7, #0]
 801d598:	4613      	mov	r3, r2
 801d59a:	70fb      	strb	r3, [r7, #3]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801d59c:	793b      	ldrb	r3, [r7, #4]
 801d59e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801d5a2:	b2db      	uxtb	r3, r3
 801d5a4:	b29a      	uxth	r2, r3
 801d5a6:	78fb      	ldrb	r3, [r7, #3]
 801d5a8:	b29b      	uxth	r3, r3
 801d5aa:	fb12 f303 	smulbb	r3, r2, r3
 801d5ae:	b29a      	uxth	r2, r3
 801d5b0:	783b      	ldrb	r3, [r7, #0]
 801d5b2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801d5b6:	b2db      	uxtb	r3, r3
 801d5b8:	b299      	uxth	r1, r3
 801d5ba:	78fb      	ldrb	r3, [r7, #3]
 801d5bc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801d5c0:	b29b      	uxth	r3, r3
 801d5c2:	fb11 f303 	smulbb	r3, r1, r3
 801d5c6:	b29b      	uxth	r3, r3
 801d5c8:	4413      	add	r3, r2
 801d5ca:	b29b      	uxth	r3, r3
 801d5cc:	0a1b      	lsrs	r3, r3, #8
 801d5ce:	b29b      	uxth	r3, r3
 801d5d0:	f003 031f 	and.w	r3, r3, #31
 801d5d4:	b2da      	uxtb	r2, r3
 801d5d6:	7a3b      	ldrb	r3, [r7, #8]
 801d5d8:	f362 03c7 	bfi	r3, r2, #3, #5
 801d5dc:	723b      	strb	r3, [r7, #8]
#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP
    /*If swapped Green is in 2 parts*/
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 801d5de:	793b      	ldrb	r3, [r7, #4]
 801d5e0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d5e4:	b2db      	uxtb	r3, r3
 801d5e6:	b29b      	uxth	r3, r3
 801d5e8:	00db      	lsls	r3, r3, #3
 801d5ea:	b29a      	uxth	r2, r3
 801d5ec:	797b      	ldrb	r3, [r7, #5]
 801d5ee:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d5f2:	b2db      	uxtb	r3, r3
 801d5f4:	b29b      	uxth	r3, r3
 801d5f6:	4413      	add	r3, r2
 801d5f8:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 801d5fa:	783b      	ldrb	r3, [r7, #0]
 801d5fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d600:	b2db      	uxtb	r3, r3
 801d602:	b29b      	uxth	r3, r3
 801d604:	00db      	lsls	r3, r3, #3
 801d606:	b29a      	uxth	r2, r3
 801d608:	787b      	ldrb	r3, [r7, #1]
 801d60a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d60e:	b2db      	uxtb	r3, r3
 801d610:	b29b      	uxth	r3, r3
 801d612:	4413      	add	r3, r2
 801d614:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 801d616:	78fb      	ldrb	r3, [r7, #3]
 801d618:	b29b      	uxth	r3, r3
 801d61a:	89fa      	ldrh	r2, [r7, #14]
 801d61c:	fb12 f303 	smulbb	r3, r2, r3
 801d620:	b29a      	uxth	r2, r3
 801d622:	78fb      	ldrb	r3, [r7, #3]
 801d624:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801d628:	b29b      	uxth	r3, r3
 801d62a:	89b9      	ldrh	r1, [r7, #12]
 801d62c:	fb11 f303 	smulbb	r3, r1, r3
 801d630:	b29b      	uxth	r3, r3
 801d632:	4413      	add	r3, r2
 801d634:	b29b      	uxth	r3, r3
 801d636:	0a1b      	lsrs	r3, r3, #8
 801d638:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 801d63a:	897b      	ldrh	r3, [r7, #10]
 801d63c:	08db      	lsrs	r3, r3, #3
 801d63e:	b29b      	uxth	r3, r3
 801d640:	f003 0307 	and.w	r3, r3, #7
 801d644:	b2da      	uxtb	r2, r3
 801d646:	7a3b      	ldrb	r3, [r7, #8]
 801d648:	f362 0302 	bfi	r3, r2, #0, #3
 801d64c:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 801d64e:	897b      	ldrh	r3, [r7, #10]
 801d650:	f003 0307 	and.w	r3, r3, #7
 801d654:	b2da      	uxtb	r2, r3
 801d656:	7a7b      	ldrb	r3, [r7, #9]
 801d658:	f362 1347 	bfi	r3, r2, #5, #3
 801d65c:	727b      	strb	r3, [r7, #9]
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801d65e:	797b      	ldrb	r3, [r7, #5]
 801d660:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801d664:	b2db      	uxtb	r3, r3
 801d666:	b29a      	uxth	r2, r3
 801d668:	78fb      	ldrb	r3, [r7, #3]
 801d66a:	b29b      	uxth	r3, r3
 801d66c:	fb12 f303 	smulbb	r3, r2, r3
 801d670:	b29a      	uxth	r2, r3
 801d672:	787b      	ldrb	r3, [r7, #1]
 801d674:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801d678:	b2db      	uxtb	r3, r3
 801d67a:	b299      	uxth	r1, r3
 801d67c:	78fb      	ldrb	r3, [r7, #3]
 801d67e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801d682:	b29b      	uxth	r3, r3
 801d684:	fb11 f303 	smulbb	r3, r1, r3
 801d688:	b29b      	uxth	r3, r3
 801d68a:	4413      	add	r3, r2
 801d68c:	b29b      	uxth	r3, r3
 801d68e:	0a1b      	lsrs	r3, r3, #8
 801d690:	b29b      	uxth	r3, r3
 801d692:	f003 031f 	and.w	r3, r3, #31
 801d696:	b2da      	uxtb	r2, r3
 801d698:	7a7b      	ldrb	r3, [r7, #9]
 801d69a:	f362 0304 	bfi	r3, r2, #0, #5
 801d69e:	727b      	strb	r3, [r7, #9]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801d6a0:	893b      	ldrh	r3, [r7, #8]
}
 801d6a2:	4618      	mov	r0, r3
 801d6a4:	3714      	adds	r7, #20
 801d6a6:	46bd      	mov	sp, r7
 801d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6ac:	4770      	bx	lr

0801d6ae <lv_lmeter_set_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be set (can be only `LV_LMETER_STYLE_MAIN`)
 * @param style set the style of the line meter
 */
static inline void lv_lmeter_set_style(lv_obj_t * lmeter, lv_lmeter_style_t type, lv_style_t * style)
{
 801d6ae:	b580      	push	{r7, lr}
 801d6b0:	b084      	sub	sp, #16
 801d6b2:	af00      	add	r7, sp, #0
 801d6b4:	60f8      	str	r0, [r7, #12]
 801d6b6:	460b      	mov	r3, r1
 801d6b8:	607a      	str	r2, [r7, #4]
 801d6ba:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(lmeter, style);
 801d6bc:	6879      	ldr	r1, [r7, #4]
 801d6be:	68f8      	ldr	r0, [r7, #12]
 801d6c0:	f7ec f87b 	bl	80097ba <lv_obj_set_style>
}
 801d6c4:	bf00      	nop
 801d6c6:	3710      	adds	r7, #16
 801d6c8:	46bd      	mov	sp, r7
 801d6ca:	bd80      	pop	{r7, pc}

0801d6cc <lv_lmeter_get_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be get (can be only `LV_LMETER_STYLE_MAIN`)
 * @return pointer to the line meter's style
 */
static inline const lv_style_t * lv_lmeter_get_style(const lv_obj_t * lmeter, lv_lmeter_style_t type)
{
 801d6cc:	b580      	push	{r7, lr}
 801d6ce:	b082      	sub	sp, #8
 801d6d0:	af00      	add	r7, sp, #0
 801d6d2:	6078      	str	r0, [r7, #4]
 801d6d4:	460b      	mov	r3, r1
 801d6d6:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(lmeter);
 801d6d8:	6878      	ldr	r0, [r7, #4]
 801d6da:	f7ec fae3 	bl	8009ca4 <lv_obj_get_style>
 801d6de:	4603      	mov	r3, r0
}
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	3708      	adds	r7, #8
 801d6e4:	46bd      	mov	sp, r7
 801d6e6:	bd80      	pop	{r7, pc}

0801d6e8 <lv_lmeter_create>:
 * @param copy pointer to a line meter object, if not NULL then the new object will be copied from
 * it
 * @return pointer to the created line meter
 */
lv_obj_t * lv_lmeter_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801d6e8:	b580      	push	{r7, lr}
 801d6ea:	b086      	sub	sp, #24
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	6078      	str	r0, [r7, #4]
 801d6f0:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("line meter create started");

    /*Create the ancestor of line meter*/
    lv_obj_t * new_lmeter = lv_obj_create(par, copy);
 801d6f2:	6839      	ldr	r1, [r7, #0]
 801d6f4:	6878      	ldr	r0, [r7, #4]
 801d6f6:	f7ea fe27 	bl	8008348 <lv_obj_create>
 801d6fa:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_lmeter);
 801d6fc:	697b      	ldr	r3, [r7, #20]
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	d100      	bne.n	801d704 <lv_lmeter_create+0x1c>
 801d702:	e7fe      	b.n	801d702 <lv_lmeter_create+0x1a>
    if(new_lmeter == NULL) return NULL;
 801d704:	697b      	ldr	r3, [r7, #20]
 801d706:	2b00      	cmp	r3, #0
 801d708:	d101      	bne.n	801d70e <lv_lmeter_create+0x26>
 801d70a:	2300      	movs	r3, #0
 801d70c:	e069      	b.n	801d7e2 <lv_lmeter_create+0xfa>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_lmeter);
 801d70e:	4b37      	ldr	r3, [pc, #220]	; (801d7ec <lv_lmeter_create+0x104>)
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d105      	bne.n	801d722 <lv_lmeter_create+0x3a>
 801d716:	6978      	ldr	r0, [r7, #20]
 801d718:	f7ec fb67 	bl	8009dea <lv_obj_get_signal_cb>
 801d71c:	4602      	mov	r2, r0
 801d71e:	4b33      	ldr	r3, [pc, #204]	; (801d7ec <lv_lmeter_create+0x104>)
 801d720:	601a      	str	r2, [r3, #0]

    /*Allocate the line meter type specific extended data*/
    lv_lmeter_ext_t * ext = lv_obj_allocate_ext_attr(new_lmeter, sizeof(lv_lmeter_ext_t));
 801d722:	210a      	movs	r1, #10
 801d724:	6978      	ldr	r0, [r7, #20]
 801d726:	f7ec f9ab 	bl	8009a80 <lv_obj_allocate_ext_attr>
 801d72a:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801d72c:	693b      	ldr	r3, [r7, #16]
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d100      	bne.n	801d734 <lv_lmeter_create+0x4c>
 801d732:	e7fe      	b.n	801d732 <lv_lmeter_create+0x4a>
    if(ext == NULL) return NULL;
 801d734:	693b      	ldr	r3, [r7, #16]
 801d736:	2b00      	cmp	r3, #0
 801d738:	d101      	bne.n	801d73e <lv_lmeter_create+0x56>
 801d73a:	2300      	movs	r3, #0
 801d73c:	e051      	b.n	801d7e2 <lv_lmeter_create+0xfa>

    /*Initialize the allocated 'ext' */
    ext->min_value   = 0;
 801d73e:	693b      	ldr	r3, [r7, #16]
 801d740:	2200      	movs	r2, #0
 801d742:	80da      	strh	r2, [r3, #6]
    ext->max_value   = 100;
 801d744:	693b      	ldr	r3, [r7, #16]
 801d746:	2264      	movs	r2, #100	; 0x64
 801d748:	811a      	strh	r2, [r3, #8]
    ext->cur_value   = 0;
 801d74a:	693b      	ldr	r3, [r7, #16]
 801d74c:	2200      	movs	r2, #0
 801d74e:	809a      	strh	r2, [r3, #4]
    ext->line_cnt    = 21;  /*Odd scale number looks better*/
 801d750:	693b      	ldr	r3, [r7, #16]
 801d752:	2215      	movs	r2, #21
 801d754:	709a      	strb	r2, [r3, #2]
    ext->scale_angle = 240; /*(scale_num - 1) * N looks better */
 801d756:	693b      	ldr	r3, [r7, #16]
 801d758:	22f0      	movs	r2, #240	; 0xf0
 801d75a:	801a      	strh	r2, [r3, #0]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_lmeter, lv_lmeter_signal);
 801d75c:	4924      	ldr	r1, [pc, #144]	; (801d7f0 <lv_lmeter_create+0x108>)
 801d75e:	6978      	ldr	r0, [r7, #20]
 801d760:	f7ec f972 	bl	8009a48 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_lmeter, lv_lmeter_design);
 801d764:	4923      	ldr	r1, [pc, #140]	; (801d7f4 <lv_lmeter_create+0x10c>)
 801d766:	6978      	ldr	r0, [r7, #20]
 801d768:	f7ec f97c 	bl	8009a64 <lv_obj_set_design_cb>

    /*Init the new line meter line meter*/
    if(copy == NULL) {
 801d76c:	683b      	ldr	r3, [r7, #0]
 801d76e:	2b00      	cmp	r3, #0
 801d770:	d118      	bne.n	801d7a4 <lv_lmeter_create+0xbc>
        lv_obj_set_size(new_lmeter, LV_DPI, LV_DPI);
 801d772:	2264      	movs	r2, #100	; 0x64
 801d774:	2164      	movs	r1, #100	; 0x64
 801d776:	6978      	ldr	r0, [r7, #20]
 801d778:	f7eb fad7 	bl	8008d2a <lv_obj_set_size>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801d77c:	f004 f9d0 	bl	8021b20 <lv_theme_get_current>
 801d780:	60b8      	str	r0, [r7, #8]
        if(th) {
 801d782:	68bb      	ldr	r3, [r7, #8]
 801d784:	2b00      	cmp	r3, #0
 801d786:	d007      	beq.n	801d798 <lv_lmeter_create+0xb0>
            lv_lmeter_set_style(new_lmeter, LV_LMETER_STYLE_MAIN, th->style.lmeter);
 801d788:	68bb      	ldr	r3, [r7, #8]
 801d78a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d78c:	461a      	mov	r2, r3
 801d78e:	2100      	movs	r1, #0
 801d790:	6978      	ldr	r0, [r7, #20]
 801d792:	f7ff ff8c 	bl	801d6ae <lv_lmeter_set_style>
 801d796:	e023      	b.n	801d7e0 <lv_lmeter_create+0xf8>
        } else {
            lv_lmeter_set_style(new_lmeter, LV_LMETER_STYLE_MAIN, &lv_style_pretty_color);
 801d798:	4a17      	ldr	r2, [pc, #92]	; (801d7f8 <lv_lmeter_create+0x110>)
 801d79a:	2100      	movs	r1, #0
 801d79c:	6978      	ldr	r0, [r7, #20]
 801d79e:	f7ff ff86 	bl	801d6ae <lv_lmeter_set_style>
 801d7a2:	e01d      	b.n	801d7e0 <lv_lmeter_create+0xf8>
        }
    }
    /*Copy an existing line meter*/
    else {
        lv_lmeter_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801d7a4:	6838      	ldr	r0, [r7, #0]
 801d7a6:	f7ec fb38 	bl	8009e1a <lv_obj_get_ext_attr>
 801d7aa:	60f8      	str	r0, [r7, #12]
        ext->scale_angle           = copy_ext->scale_angle;
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	881a      	ldrh	r2, [r3, #0]
 801d7b0:	693b      	ldr	r3, [r7, #16]
 801d7b2:	801a      	strh	r2, [r3, #0]
        ext->line_cnt              = copy_ext->line_cnt;
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	789a      	ldrb	r2, [r3, #2]
 801d7b8:	693b      	ldr	r3, [r7, #16]
 801d7ba:	709a      	strb	r2, [r3, #2]
        ext->min_value             = copy_ext->min_value;
 801d7bc:	68fb      	ldr	r3, [r7, #12]
 801d7be:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801d7c2:	693b      	ldr	r3, [r7, #16]
 801d7c4:	80da      	strh	r2, [r3, #6]
        ext->max_value             = copy_ext->max_value;
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801d7cc:	693b      	ldr	r3, [r7, #16]
 801d7ce:	811a      	strh	r2, [r3, #8]
        ext->cur_value             = copy_ext->cur_value;
 801d7d0:	68fb      	ldr	r3, [r7, #12]
 801d7d2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d7d6:	693b      	ldr	r3, [r7, #16]
 801d7d8:	809a      	strh	r2, [r3, #4]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_lmeter);
 801d7da:	6978      	ldr	r0, [r7, #20]
 801d7dc:	f7eb ffff 	bl	80097de <lv_obj_refresh_style>
    }

    LV_LOG_INFO("line meter created");

    return new_lmeter;
 801d7e0:	697b      	ldr	r3, [r7, #20]
}
 801d7e2:	4618      	mov	r0, r3
 801d7e4:	3718      	adds	r7, #24
 801d7e6:	46bd      	mov	sp, r7
 801d7e8:	bd80      	pop	{r7, pc}
 801d7ea:	bf00      	nop
 801d7ec:	200177e0 	.word	0x200177e0
 801d7f0:	0801dc29 	.word	0x0801dc29
 801d7f4:	0801d939 	.word	0x0801d939
 801d7f8:	2001b830 	.word	0x2001b830

0801d7fc <lv_lmeter_set_value>:
 * Set a new value on the line meter
 * @param lmeter pointer to a line meter object
 * @param value new value
 */
void lv_lmeter_set_value(lv_obj_t * lmeter, int16_t value)
{
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	b084      	sub	sp, #16
 801d800:	af00      	add	r7, sp, #0
 801d802:	6078      	str	r0, [r7, #4]
 801d804:	460b      	mov	r3, r1
 801d806:	807b      	strh	r3, [r7, #2]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801d808:	6878      	ldr	r0, [r7, #4]
 801d80a:	f7ec fb06 	bl	8009e1a <lv_obj_get_ext_attr>
 801d80e:	60f8      	str	r0, [r7, #12]
    if(ext->cur_value == value) return;
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d816:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801d81a:	429a      	cmp	r2, r3
 801d81c:	d01a      	beq.n	801d854 <lv_lmeter_set_value+0x58>

    ext->cur_value = value > ext->max_value ? ext->max_value : value;
 801d81e:	68fb      	ldr	r3, [r7, #12]
 801d820:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801d824:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801d828:	4293      	cmp	r3, r2
 801d82a:	bfa8      	it	ge
 801d82c:	4613      	movge	r3, r2
 801d82e:	b21a      	sxth	r2, r3
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	809a      	strh	r2, [r3, #4]
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d840:	4293      	cmp	r3, r2
 801d842:	bfb8      	it	lt
 801d844:	4613      	movlt	r3, r2
 801d846:	b21a      	sxth	r2, r3
 801d848:	68fb      	ldr	r3, [r7, #12]
 801d84a:	809a      	strh	r2, [r3, #4]
    lv_obj_invalidate(lmeter);
 801d84c:	6878      	ldr	r0, [r7, #4]
 801d84e:	f7eb f8b8 	bl	80089c2 <lv_obj_invalidate>
 801d852:	e000      	b.n	801d856 <lv_lmeter_set_value+0x5a>
    if(ext->cur_value == value) return;
 801d854:	bf00      	nop
}
 801d856:	3710      	adds	r7, #16
 801d858:	46bd      	mov	sp, r7
 801d85a:	bd80      	pop	{r7, pc}

0801d85c <lv_lmeter_set_range>:
 * @param lmeter pointer to he line meter object
 * @param min minimum value
 * @param max maximum value
 */
void lv_lmeter_set_range(lv_obj_t * lmeter, int16_t min, int16_t max)
{
 801d85c:	b580      	push	{r7, lr}
 801d85e:	b084      	sub	sp, #16
 801d860:	af00      	add	r7, sp, #0
 801d862:	6078      	str	r0, [r7, #4]
 801d864:	460b      	mov	r3, r1
 801d866:	807b      	strh	r3, [r7, #2]
 801d868:	4613      	mov	r3, r2
 801d86a:	803b      	strh	r3, [r7, #0]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801d86c:	6878      	ldr	r0, [r7, #4]
 801d86e:	f7ec fad4 	bl	8009e1a <lv_obj_get_ext_attr>
 801d872:	60f8      	str	r0, [r7, #12]
    if(ext->min_value == min && ext->max_value == max) return;
 801d874:	68fb      	ldr	r3, [r7, #12]
 801d876:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d87a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801d87e:	429a      	cmp	r2, r3
 801d880:	d106      	bne.n	801d890 <lv_lmeter_set_range+0x34>
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801d888:	f9b7 2000 	ldrsh.w	r2, [r7]
 801d88c:	429a      	cmp	r2, r3
 801d88e:	d02b      	beq.n	801d8e8 <lv_lmeter_set_range+0x8c>

    ext->max_value = max;
 801d890:	68fb      	ldr	r3, [r7, #12]
 801d892:	883a      	ldrh	r2, [r7, #0]
 801d894:	811a      	strh	r2, [r3, #8]
    ext->min_value = min;
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	887a      	ldrh	r2, [r7, #2]
 801d89a:	80da      	strh	r2, [r3, #6]
    if(ext->cur_value > max) {
 801d89c:	68fb      	ldr	r3, [r7, #12]
 801d89e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d8a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 801d8a6:	429a      	cmp	r2, r3
 801d8a8:	da09      	bge.n	801d8be <lv_lmeter_set_range+0x62>
        ext->cur_value = max;
 801d8aa:	68fb      	ldr	r3, [r7, #12]
 801d8ac:	883a      	ldrh	r2, [r7, #0]
 801d8ae:	809a      	strh	r2, [r3, #4]
        lv_lmeter_set_value(lmeter, ext->cur_value);
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d8b6:	4619      	mov	r1, r3
 801d8b8:	6878      	ldr	r0, [r7, #4]
 801d8ba:	f7ff ff9f 	bl	801d7fc <lv_lmeter_set_value>
    }
    if(ext->cur_value < min) {
 801d8be:	68fb      	ldr	r3, [r7, #12]
 801d8c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d8c4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801d8c8:	429a      	cmp	r2, r3
 801d8ca:	dd09      	ble.n	801d8e0 <lv_lmeter_set_range+0x84>
        ext->cur_value = min;
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	887a      	ldrh	r2, [r7, #2]
 801d8d0:	809a      	strh	r2, [r3, #4]
        lv_lmeter_set_value(lmeter, ext->cur_value);
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d8d8:	4619      	mov	r1, r3
 801d8da:	6878      	ldr	r0, [r7, #4]
 801d8dc:	f7ff ff8e 	bl	801d7fc <lv_lmeter_set_value>
    }
    lv_obj_invalidate(lmeter);
 801d8e0:	6878      	ldr	r0, [r7, #4]
 801d8e2:	f7eb f86e 	bl	80089c2 <lv_obj_invalidate>
 801d8e6:	e000      	b.n	801d8ea <lv_lmeter_set_range+0x8e>
    if(ext->min_value == min && ext->max_value == max) return;
 801d8e8:	bf00      	nop
}
 801d8ea:	3710      	adds	r7, #16
 801d8ec:	46bd      	mov	sp, r7
 801d8ee:	bd80      	pop	{r7, pc}

0801d8f0 <lv_lmeter_set_scale>:
 * @param lmeter pointer to a line meter object
 * @param angle angle of the scale (0..360)
 * @param line_cnt number of lines
 */
void lv_lmeter_set_scale(lv_obj_t * lmeter, uint16_t angle, uint8_t line_cnt)
{
 801d8f0:	b580      	push	{r7, lr}
 801d8f2:	b084      	sub	sp, #16
 801d8f4:	af00      	add	r7, sp, #0
 801d8f6:	6078      	str	r0, [r7, #4]
 801d8f8:	460b      	mov	r3, r1
 801d8fa:	807b      	strh	r3, [r7, #2]
 801d8fc:	4613      	mov	r3, r2
 801d8fe:	707b      	strb	r3, [r7, #1]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801d900:	6878      	ldr	r0, [r7, #4]
 801d902:	f7ec fa8a 	bl	8009e1a <lv_obj_get_ext_attr>
 801d906:	60f8      	str	r0, [r7, #12]
    if(ext->scale_angle == angle && ext->line_cnt == line_cnt) return;
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	881b      	ldrh	r3, [r3, #0]
 801d90c:	887a      	ldrh	r2, [r7, #2]
 801d90e:	429a      	cmp	r2, r3
 801d910:	d104      	bne.n	801d91c <lv_lmeter_set_scale+0x2c>
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	789b      	ldrb	r3, [r3, #2]
 801d916:	787a      	ldrb	r2, [r7, #1]
 801d918:	429a      	cmp	r2, r3
 801d91a:	d009      	beq.n	801d930 <lv_lmeter_set_scale+0x40>

    ext->scale_angle = angle;
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	887a      	ldrh	r2, [r7, #2]
 801d920:	801a      	strh	r2, [r3, #0]
    ext->line_cnt    = line_cnt;
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	787a      	ldrb	r2, [r7, #1]
 801d926:	709a      	strb	r2, [r3, #2]

    lv_obj_invalidate(lmeter);
 801d928:	6878      	ldr	r0, [r7, #4]
 801d92a:	f7eb f84a 	bl	80089c2 <lv_obj_invalidate>
 801d92e:	e000      	b.n	801d932 <lv_lmeter_set_scale+0x42>
    if(ext->scale_angle == angle && ext->line_cnt == line_cnt) return;
 801d930:	bf00      	nop
}
 801d932:	3710      	adds	r7, #16
 801d934:	46bd      	mov	sp, r7
 801d936:	bd80      	pop	{r7, pc}

0801d938 <lv_lmeter_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_lmeter_design(lv_obj_t * lmeter, const lv_area_t * mask, lv_design_mode_t mode)
{
 801d938:	b580      	push	{r7, lr}
 801d93a:	b0a2      	sub	sp, #136	; 0x88
 801d93c:	af02      	add	r7, sp, #8
 801d93e:	60f8      	str	r0, [r7, #12]
 801d940:	60b9      	str	r1, [r7, #8]
 801d942:	4613      	mov	r3, r2
 801d944:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 801d946:	79fb      	ldrb	r3, [r7, #7]
 801d948:	2b02      	cmp	r3, #2
 801d94a:	d101      	bne.n	801d950 <lv_lmeter_design+0x18>
        return false;
 801d94c:	2300      	movs	r3, #0
 801d94e:	e167      	b.n	801dc20 <lv_lmeter_design+0x2e8>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801d950:	79fb      	ldrb	r3, [r7, #7]
 801d952:	2b00      	cmp	r3, #0
 801d954:	f040 8163 	bne.w	801dc1e <lv_lmeter_design+0x2e6>
        lv_lmeter_ext_t * ext    = lv_obj_get_ext_attr(lmeter);
 801d958:	68f8      	ldr	r0, [r7, #12]
 801d95a:	f7ec fa5e 	bl	8009e1a <lv_obj_get_ext_attr>
 801d95e:	67b8      	str	r0, [r7, #120]	; 0x78
        const lv_style_t * style = lv_obj_get_style(lmeter);
 801d960:	68f8      	ldr	r0, [r7, #12]
 801d962:	f7ec f99f 	bl	8009ca4 <lv_obj_get_style>
 801d966:	6778      	str	r0, [r7, #116]	; 0x74
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(lmeter);
 801d968:	68f8      	ldr	r0, [r7, #12]
 801d96a:	f7ec fa08 	bl	8009d7e <lv_obj_get_opa_scale>
 801d96e:	4603      	mov	r3, r0
 801d970:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        lv_style_t style_tmp;
        lv_style_copy(&style_tmp, style);
 801d974:	f107 0314 	add.w	r3, r7, #20
 801d978:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d97a:	4618      	mov	r0, r3
 801d97c:	f7ed fcbc 	bl	800b2f8 <lv_style_copy>

#if LV_USE_GROUP
        lv_group_t * g = lv_obj_get_group(lmeter);
 801d980:	68f8      	ldr	r0, [r7, #12]
 801d982:	f7ec fa56 	bl	8009e32 <lv_obj_get_group>
 801d986:	66f8      	str	r0, [r7, #108]	; 0x6c
        if(lv_group_get_focused(g) == lmeter) {
 801d988:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d98a:	f7ea fa34 	bl	8007df6 <lv_group_get_focused>
 801d98e:	4602      	mov	r2, r0
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	4293      	cmp	r3, r2
 801d994:	d107      	bne.n	801d9a6 <lv_lmeter_design+0x6e>
            style_tmp.line.width += 1;
 801d996:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801d99a:	b29b      	uxth	r3, r3
 801d99c:	3301      	adds	r3, #1
 801d99e:	b29b      	uxth	r3, r3
 801d9a0:	b21b      	sxth	r3, r3
 801d9a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        }
#endif

        lv_coord_t r_out = lv_obj_get_width(lmeter) / 2;
 801d9a6:	68f8      	ldr	r0, [r7, #12]
 801d9a8:	f7ec f94c 	bl	8009c44 <lv_obj_get_width>
 801d9ac:	4603      	mov	r3, r0
 801d9ae:	0fda      	lsrs	r2, r3, #31
 801d9b0:	4413      	add	r3, r2
 801d9b2:	105b      	asrs	r3, r3, #1
 801d9b4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        lv_coord_t r_in  = r_out - style->body.padding.left;
 801d9b8:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801d9bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d9be:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801d9c2:	b29b      	uxth	r3, r3
 801d9c4:	1ad3      	subs	r3, r2, r3
 801d9c6:	b29b      	uxth	r3, r3
 801d9c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if(r_in < 1) r_in = 1;
 801d9cc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	dc02      	bgt.n	801d9da <lv_lmeter_design+0xa2>
 801d9d4:	2301      	movs	r3, #1
 801d9d6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        lv_coord_t x_ofs  = lv_obj_get_width(lmeter) / 2 + lmeter->coords.x1;
 801d9da:	68f8      	ldr	r0, [r7, #12]
 801d9dc:	f7ec f932 	bl	8009c44 <lv_obj_get_width>
 801d9e0:	4603      	mov	r3, r0
 801d9e2:	0fda      	lsrs	r2, r3, #31
 801d9e4:	4413      	add	r3, r2
 801d9e6:	105b      	asrs	r3, r3, #1
 801d9e8:	b21b      	sxth	r3, r3
 801d9ea:	b29a      	uxth	r2, r3
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d9f2:	b29b      	uxth	r3, r3
 801d9f4:	4413      	add	r3, r2
 801d9f6:	b29b      	uxth	r3, r3
 801d9f8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        lv_coord_t y_ofs  = lv_obj_get_height(lmeter) / 2 + lmeter->coords.y1;
 801d9fc:	68f8      	ldr	r0, [r7, #12]
 801d9fe:	f7ec f92f 	bl	8009c60 <lv_obj_get_height>
 801da02:	4603      	mov	r3, r0
 801da04:	0fda      	lsrs	r2, r3, #31
 801da06:	4413      	add	r3, r2
 801da08:	105b      	asrs	r3, r3, #1
 801da0a:	b21b      	sxth	r3, r3
 801da0c:	b29a      	uxth	r2, r3
 801da0e:	68fb      	ldr	r3, [r7, #12]
 801da10:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801da14:	b29b      	uxth	r3, r3
 801da16:	4413      	add	r3, r2
 801da18:	b29b      	uxth	r3, r3
 801da1a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        int16_t angle_ofs = 90 + (360 - ext->scale_angle) / 2;
 801da1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801da20:	881b      	ldrh	r3, [r3, #0]
 801da22:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801da26:	0fda      	lsrs	r2, r3, #31
 801da28:	4413      	add	r3, r2
 801da2a:	105b      	asrs	r3, r3, #1
 801da2c:	b29b      	uxth	r3, r3
 801da2e:	335a      	adds	r3, #90	; 0x5a
 801da30:	b29b      	uxth	r3, r3
 801da32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        int16_t level =
            (int32_t)((int32_t)(ext->cur_value - ext->min_value) * ext->line_cnt) / (ext->max_value - ext->min_value);
 801da36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801da38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801da3c:	461a      	mov	r2, r3
 801da3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801da40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801da44:	1ad3      	subs	r3, r2, r3
 801da46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801da48:	7892      	ldrb	r2, [r2, #2]
 801da4a:	fb02 f203 	mul.w	r2, r2, r3
 801da4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801da50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801da54:	4619      	mov	r1, r3
 801da56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801da58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801da5c:	1acb      	subs	r3, r1, r3
 801da5e:	fb92 f3f3 	sdiv	r3, r2, r3
        int16_t level =
 801da62:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        uint8_t i;

        style_tmp.line.color = style->body.main_color;
 801da66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801da68:	885b      	ldrh	r3, [r3, #2]
 801da6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

        /*Calculate every coordinate in a bigger size to make rounding later*/
        r_out = r_out << LV_LMETER_LINE_UPSCALE;
 801da6e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801da72:	015b      	lsls	r3, r3, #5
 801da74:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        r_in  = r_in << LV_LMETER_LINE_UPSCALE;
 801da78:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801da7c:	015b      	lsls	r3, r3, #5
 801da7e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        for(i = 0; i < ext->line_cnt; i++) {
 801da82:	2300      	movs	r3, #0
 801da84:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 801da88:	e0c2      	b.n	801dc10 <lv_lmeter_design+0x2d8>
            /*Calculate the position a scale label*/
            int16_t angle = (i * ext->scale_angle) / (ext->line_cnt - 1) + angle_ofs;
 801da8a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 801da8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801da90:	8812      	ldrh	r2, [r2, #0]
 801da92:	fb02 f203 	mul.w	r2, r2, r3
 801da96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801da98:	789b      	ldrb	r3, [r3, #2]
 801da9a:	3b01      	subs	r3, #1
 801da9c:	fb92 f3f3 	sdiv	r3, r2, r3
 801daa0:	b29a      	uxth	r2, r3
 801daa2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801daa6:	4413      	add	r3, r2
 801daa8:	b29b      	uxth	r3, r3
 801daaa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

            lv_coord_t y_out = (int32_t)((int32_t)lv_trigo_sin(angle) * r_out) >> LV_TRIGO_SHIFT;
 801daae:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801dab2:	4618      	mov	r0, r3
 801dab4:	f7f8 fcda 	bl	801646c <lv_trigo_sin>
 801dab8:	4603      	mov	r3, r0
 801daba:	461a      	mov	r2, r3
 801dabc:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801dac0:	fb03 f302 	mul.w	r3, r3, r2
 801dac4:	13db      	asrs	r3, r3, #15
 801dac6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t x_out = (int32_t)((int32_t)lv_trigo_sin(angle + 90) * r_out) >> LV_TRIGO_SHIFT;
 801daca:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801dace:	335a      	adds	r3, #90	; 0x5a
 801dad0:	b29b      	uxth	r3, r3
 801dad2:	b21b      	sxth	r3, r3
 801dad4:	4618      	mov	r0, r3
 801dad6:	f7f8 fcc9 	bl	801646c <lv_trigo_sin>
 801dada:	4603      	mov	r3, r0
 801dadc:	461a      	mov	r2, r3
 801dade:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801dae2:	fb03 f302 	mul.w	r3, r3, r2
 801dae6:	13db      	asrs	r3, r3, #15
 801dae8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_coord_t y_in  = (int32_t)((int32_t)lv_trigo_sin(angle) * r_in) >> LV_TRIGO_SHIFT;
 801daec:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801daf0:	4618      	mov	r0, r3
 801daf2:	f7f8 fcbb 	bl	801646c <lv_trigo_sin>
 801daf6:	4603      	mov	r3, r0
 801daf8:	461a      	mov	r2, r3
 801dafa:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801dafe:	fb03 f302 	mul.w	r3, r3, r2
 801db02:	13db      	asrs	r3, r3, #15
 801db04:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_coord_t x_in  = (int32_t)((int32_t)lv_trigo_sin(angle + 90) * r_in) >> LV_TRIGO_SHIFT;
 801db08:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801db0c:	335a      	adds	r3, #90	; 0x5a
 801db0e:	b29b      	uxth	r3, r3
 801db10:	b21b      	sxth	r3, r3
 801db12:	4618      	mov	r0, r3
 801db14:	f7f8 fcaa 	bl	801646c <lv_trigo_sin>
 801db18:	4603      	mov	r3, r0
 801db1a:	461a      	mov	r2, r3
 801db1c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801db20:	fb03 f302 	mul.w	r3, r3, r2
 801db24:	13db      	asrs	r3, r3, #15
 801db26:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

            /*Rounding*/
            x_out = lv_lmeter_coord_round(x_out);
 801db2a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801db2e:	4618      	mov	r0, r3
 801db30:	f000 f8d2 	bl	801dcd8 <lv_lmeter_coord_round>
 801db34:	4603      	mov	r3, r0
 801db36:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            x_in  = lv_lmeter_coord_round(x_in);
 801db3a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801db3e:	4618      	mov	r0, r3
 801db40:	f000 f8ca 	bl	801dcd8 <lv_lmeter_coord_round>
 801db44:	4603      	mov	r3, r0
 801db46:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            y_out = lv_lmeter_coord_round(y_out);
 801db4a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801db4e:	4618      	mov	r0, r3
 801db50:	f000 f8c2 	bl	801dcd8 <lv_lmeter_coord_round>
 801db54:	4603      	mov	r3, r0
 801db56:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            y_in  = lv_lmeter_coord_round(y_in);
 801db5a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801db5e:	4618      	mov	r0, r3
 801db60:	f000 f8ba 	bl	801dcd8 <lv_lmeter_coord_round>
 801db64:	4603      	mov	r3, r0
 801db66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            lv_point_t p1;
            lv_point_t p2;

            p2.x = x_in + x_ofs;
 801db6a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 801db6e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801db72:	4413      	add	r3, r2
 801db74:	b29b      	uxth	r3, r3
 801db76:	b21b      	sxth	r3, r3
 801db78:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            p2.y = y_in + y_ofs;
 801db7c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801db80:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801db84:	4413      	add	r3, r2
 801db86:	b29b      	uxth	r3, r3
 801db88:	b21b      	sxth	r3, r3
 801db8a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

            p1.x = x_out + x_ofs;
 801db8e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801db92:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801db96:	4413      	add	r3, r2
 801db98:	b29b      	uxth	r3, r3
 801db9a:	b21b      	sxth	r3, r3
 801db9c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            p1.y = y_out + y_ofs;
 801dba0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801dba4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801dba8:	4413      	add	r3, r2
 801dbaa:	b29b      	uxth	r3, r3
 801dbac:	b21b      	sxth	r3, r3
 801dbae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            if(i >= level)
 801dbb2:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801dbb6:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801dbba:	429a      	cmp	r2, r3
 801dbbc:	db04      	blt.n	801dbc8 <lv_lmeter_design+0x290>
                style_tmp.line.color = style->line.color;
 801dbbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dbc0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801dbc2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801dbc6:	e011      	b.n	801dbec <lv_lmeter_design+0x2b4>
            else {
                style_tmp.line.color =
                    lv_color_mix(style->body.grad_color, style->body.main_color, (255 * i) / ext->line_cnt);
 801dbc8:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801dbcc:	4613      	mov	r3, r2
 801dbce:	021b      	lsls	r3, r3, #8
 801dbd0:	1a9b      	subs	r3, r3, r2
 801dbd2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801dbd4:	7892      	ldrb	r2, [r2, #2]
 801dbd6:	fb93 f3f2 	sdiv	r3, r3, r2
 801dbda:	b2da      	uxtb	r2, r3
                style_tmp.line.color =
 801dbdc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801dbde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dbe0:	8849      	ldrh	r1, [r1, #2]
 801dbe2:	8898      	ldrh	r0, [r3, #4]
 801dbe4:	f7ff fcd3 	bl	801d58e <lv_color_mix>
 801dbe8:	f8a7 0048 	strh.w	r0, [r7, #72]	; 0x48
            }

            lv_draw_line(&p1, &p2, mask, &style_tmp, opa_scale);
 801dbec:	f107 0214 	add.w	r2, r7, #20
 801dbf0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801dbf4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801dbf8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801dbfc:	9300      	str	r3, [sp, #0]
 801dbfe:	4613      	mov	r3, r2
 801dc00:	68ba      	ldr	r2, [r7, #8]
 801dc02:	f7ef ff0b 	bl	800da1c <lv_draw_line>
        for(i = 0; i < ext->line_cnt; i++) {
 801dc06:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 801dc0a:	3301      	adds	r3, #1
 801dc0c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 801dc10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801dc12:	789b      	ldrb	r3, [r3, #2]
 801dc14:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801dc18:	429a      	cmp	r2, r3
 801dc1a:	f4ff af36 	bcc.w	801da8a <lv_lmeter_design+0x152>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 801dc1e:	2301      	movs	r3, #1
}
 801dc20:	4618      	mov	r0, r3
 801dc22:	3780      	adds	r7, #128	; 0x80
 801dc24:	46bd      	mov	sp, r7
 801dc26:	bd80      	pop	{r7, pc}

0801dc28 <lv_lmeter_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_lmeter_signal(lv_obj_t * lmeter, lv_signal_t sign, void * param)
{
 801dc28:	b580      	push	{r7, lr}
 801dc2a:	b088      	sub	sp, #32
 801dc2c:	af00      	add	r7, sp, #0
 801dc2e:	60f8      	str	r0, [r7, #12]
 801dc30:	460b      	mov	r3, r1
 801dc32:	607a      	str	r2, [r7, #4]
 801dc34:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(lmeter, sign, param);
 801dc36:	4b26      	ldr	r3, [pc, #152]	; (801dcd0 <lv_lmeter_signal+0xa8>)
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	7af9      	ldrb	r1, [r7, #11]
 801dc3c:	687a      	ldr	r2, [r7, #4]
 801dc3e:	68f8      	ldr	r0, [r7, #12]
 801dc40:	4798      	blx	r3
 801dc42:	4603      	mov	r3, r0
 801dc44:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801dc46:	7fbb      	ldrb	r3, [r7, #30]
 801dc48:	2b01      	cmp	r3, #1
 801dc4a:	d001      	beq.n	801dc50 <lv_lmeter_signal+0x28>
 801dc4c:	7fbb      	ldrb	r3, [r7, #30]
 801dc4e:	e03a      	b.n	801dcc6 <lv_lmeter_signal+0x9e>

    if(sign == LV_SIGNAL_CLEANUP) {
 801dc50:	7afb      	ldrb	r3, [r7, #11]
 801dc52:	2b00      	cmp	r3, #0
 801dc54:	d036      	beq.n	801dcc4 <lv_lmeter_signal+0x9c>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801dc56:	7afb      	ldrb	r3, [r7, #11]
 801dc58:	2b04      	cmp	r3, #4
 801dc5a:	d103      	bne.n	801dc64 <lv_lmeter_signal+0x3c>
        lv_obj_refresh_ext_draw_pad(lmeter);
 801dc5c:	68f8      	ldr	r0, [r7, #12]
 801dc5e:	f7eb ff25 	bl	8009aac <lv_obj_refresh_ext_draw_pad>
 801dc62:	e02f      	b.n	801dcc4 <lv_lmeter_signal+0x9c>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801dc64:	7afb      	ldrb	r3, [r7, #11]
 801dc66:	2b05      	cmp	r3, #5
 801dc68:	d111      	bne.n	801dc8e <lv_lmeter_signal+0x66>
        const lv_style_t * style = lv_lmeter_get_style(lmeter, LV_LMETER_STYLE_MAIN);
 801dc6a:	2100      	movs	r1, #0
 801dc6c:	68f8      	ldr	r0, [r7, #12]
 801dc6e:	f7ff fd2d 	bl	801d6cc <lv_lmeter_get_style>
 801dc72:	6178      	str	r0, [r7, #20]
        lmeter->ext_draw_pad     = LV_MATH_MAX(lmeter->ext_draw_pad, style->line.width);
 801dc74:	697b      	ldr	r3, [r7, #20]
 801dc76:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 801dc7a:	68fb      	ldr	r3, [r7, #12]
 801dc7c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801dc80:	4293      	cmp	r3, r2
 801dc82:	bfb8      	it	lt
 801dc84:	4613      	movlt	r3, r2
 801dc86:	b21a      	sxth	r2, r3
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	869a      	strh	r2, [r3, #52]	; 0x34
 801dc8c:	e01a      	b.n	801dcc4 <lv_lmeter_signal+0x9c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801dc8e:	7afb      	ldrb	r3, [r7, #11]
 801dc90:	2b06      	cmp	r3, #6
 801dc92:	d117      	bne.n	801dcc4 <lv_lmeter_signal+0x9c>
        lv_obj_type_t * buf = param;
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	61bb      	str	r3, [r7, #24]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801dc98:	2300      	movs	r3, #0
 801dc9a:	77fb      	strb	r3, [r7, #31]
 801dc9c:	e008      	b.n	801dcb0 <lv_lmeter_signal+0x88>
            if(buf->type[i] == NULL) break;
 801dc9e:	7ffa      	ldrb	r2, [r7, #31]
 801dca0:	69bb      	ldr	r3, [r7, #24]
 801dca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d006      	beq.n	801dcb8 <lv_lmeter_signal+0x90>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801dcaa:	7ffb      	ldrb	r3, [r7, #31]
 801dcac:	3301      	adds	r3, #1
 801dcae:	77fb      	strb	r3, [r7, #31]
 801dcb0:	7ffb      	ldrb	r3, [r7, #31]
 801dcb2:	2b06      	cmp	r3, #6
 801dcb4:	d9f3      	bls.n	801dc9e <lv_lmeter_signal+0x76>
 801dcb6:	e000      	b.n	801dcba <lv_lmeter_signal+0x92>
            if(buf->type[i] == NULL) break;
 801dcb8:	bf00      	nop
        }
        buf->type[i] = "lv_lmeter";
 801dcba:	7ffa      	ldrb	r2, [r7, #31]
 801dcbc:	69bb      	ldr	r3, [r7, #24]
 801dcbe:	4905      	ldr	r1, [pc, #20]	; (801dcd4 <lv_lmeter_signal+0xac>)
 801dcc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801dcc4:	7fbb      	ldrb	r3, [r7, #30]
}
 801dcc6:	4618      	mov	r0, r3
 801dcc8:	3720      	adds	r7, #32
 801dcca:	46bd      	mov	sp, r7
 801dccc:	bd80      	pop	{r7, pc}
 801dcce:	bf00      	nop
 801dcd0:	200177e0 	.word	0x200177e0
 801dcd4:	0802c944 	.word	0x0802c944

0801dcd8 <lv_lmeter_coord_round>:
 * Round a coordinate which is upscaled  (>=x.5 -> x + 1;   <x.5 -> x)
 * @param x a coordinate which is greater then it should be
 * @return the downscaled and rounded coordinate  (+-1)
 */
static lv_coord_t lv_lmeter_coord_round(int32_t x)
{
 801dcd8:	b480      	push	{r7}
 801dcda:	b085      	sub	sp, #20
 801dcdc:	af00      	add	r7, sp, #0
 801dcde:	6078      	str	r0, [r7, #4]
#if LV_LMETER_LINE_UPSCALE > 0
    bool was_negative = false;
 801dce0:	2300      	movs	r3, #0
 801dce2:	73fb      	strb	r3, [r7, #15]
    if(x < 0) {
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	da04      	bge.n	801dcf4 <lv_lmeter_coord_round+0x1c>
        was_negative = true;
 801dcea:	2301      	movs	r3, #1
 801dcec:	73fb      	strb	r3, [r7, #15]
        x            = -x;
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	425b      	negs	r3, r3
 801dcf2:	607b      	str	r3, [r7, #4]
    }

    x = (x >> LV_LMETER_LINE_UPSCALE) + ((x & LV_LMETER_LINE_UPSCALE_MASK) >> (LV_LMETER_LINE_UPSCALE - 1));
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	115a      	asrs	r2, r3, #5
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	111b      	asrs	r3, r3, #4
 801dcfc:	f003 0301 	and.w	r3, r3, #1
 801dd00:	4413      	add	r3, r2
 801dd02:	607b      	str	r3, [r7, #4]

    if(was_negative) x = -x;
 801dd04:	7bfb      	ldrb	r3, [r7, #15]
 801dd06:	2b00      	cmp	r3, #0
 801dd08:	d002      	beq.n	801dd10 <lv_lmeter_coord_round+0x38>
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	425b      	negs	r3, r3
 801dd0e:	607b      	str	r3, [r7, #4]

    return x;
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	b21b      	sxth	r3, r3
#else
    return x;
#endif
}
 801dd14:	4618      	mov	r0, r3
 801dd16:	3714      	adds	r7, #20
 801dd18:	46bd      	mov	sp, r7
 801dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd1e:	4770      	bx	lr

0801dd20 <lv_font_get_line_height>:
{
 801dd20:	b480      	push	{r7}
 801dd22:	b083      	sub	sp, #12
 801dd24:	af00      	add	r7, sp, #0
 801dd26:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	7a1b      	ldrb	r3, [r3, #8]
}
 801dd2c:	4618      	mov	r0, r3
 801dd2e:	370c      	adds	r7, #12
 801dd30:	46bd      	mov	sp, r7
 801dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd36:	4770      	bx	lr

0801dd38 <lv_area_get_width>:
{
 801dd38:	b480      	push	{r7}
 801dd3a:	b083      	sub	sp, #12
 801dd3c:	af00      	add	r7, sp, #0
 801dd3e:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dd46:	b29a      	uxth	r2, r3
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dd4e:	b29b      	uxth	r3, r3
 801dd50:	1ad3      	subs	r3, r2, r3
 801dd52:	b29b      	uxth	r3, r3
 801dd54:	3301      	adds	r3, #1
 801dd56:	b29b      	uxth	r3, r3
 801dd58:	b21b      	sxth	r3, r3
}
 801dd5a:	4618      	mov	r0, r3
 801dd5c:	370c      	adds	r7, #12
 801dd5e:	46bd      	mov	sp, r7
 801dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd64:	4770      	bx	lr

0801dd66 <lv_cont_set_fit2>:
{
 801dd66:	b580      	push	{r7, lr}
 801dd68:	b084      	sub	sp, #16
 801dd6a:	af02      	add	r7, sp, #8
 801dd6c:	6078      	str	r0, [r7, #4]
 801dd6e:	460b      	mov	r3, r1
 801dd70:	70fb      	strb	r3, [r7, #3]
 801dd72:	4613      	mov	r3, r2
 801dd74:	70bb      	strb	r3, [r7, #2]
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 801dd76:	78b8      	ldrb	r0, [r7, #2]
 801dd78:	78fa      	ldrb	r2, [r7, #3]
 801dd7a:	78f9      	ldrb	r1, [r7, #3]
 801dd7c:	78bb      	ldrb	r3, [r7, #2]
 801dd7e:	9300      	str	r3, [sp, #0]
 801dd80:	4603      	mov	r3, r0
 801dd82:	6878      	ldr	r0, [r7, #4]
 801dd84:	f7fc feb5 	bl	801aaf2 <lv_cont_set_fit4>
}
 801dd88:	bf00      	nop
 801dd8a:	3708      	adds	r7, #8
 801dd8c:	46bd      	mov	sp, r7
 801dd8e:	bd80      	pop	{r7, pc}

0801dd90 <lv_cont_set_fit>:
{
 801dd90:	b580      	push	{r7, lr}
 801dd92:	b084      	sub	sp, #16
 801dd94:	af02      	add	r7, sp, #8
 801dd96:	6078      	str	r0, [r7, #4]
 801dd98:	460b      	mov	r3, r1
 801dd9a:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 801dd9c:	78f8      	ldrb	r0, [r7, #3]
 801dd9e:	78fa      	ldrb	r2, [r7, #3]
 801dda0:	78f9      	ldrb	r1, [r7, #3]
 801dda2:	78fb      	ldrb	r3, [r7, #3]
 801dda4:	9300      	str	r3, [sp, #0]
 801dda6:	4603      	mov	r3, r0
 801dda8:	6878      	ldr	r0, [r7, #4]
 801ddaa:	f7fc fea2 	bl	801aaf2 <lv_cont_set_fit4>
}
 801ddae:	bf00      	nop
 801ddb0:	3708      	adds	r7, #8
 801ddb2:	46bd      	mov	sp, r7
 801ddb4:	bd80      	pop	{r7, pc}
	...

0801ddb8 <lv_mbox_create>:
 * @param copy pointer to a message box object, if not NULL then the new object will be copied from
 * it
 * @return pointer to the created message box
 */
lv_obj_t * lv_mbox_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801ddb8:	b580      	push	{r7, lr}
 801ddba:	b088      	sub	sp, #32
 801ddbc:	af02      	add	r7, sp, #8
 801ddbe:	6078      	str	r0, [r7, #4]
 801ddc0:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("mesasge box create started");

    /*Create the ancestor message box*/
    lv_obj_t * new_mbox = lv_cont_create(par, copy);
 801ddc2:	6839      	ldr	r1, [r7, #0]
 801ddc4:	6878      	ldr	r0, [r7, #4]
 801ddc6:	f7fc fdc3 	bl	801a950 <lv_cont_create>
 801ddca:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_mbox);
 801ddcc:	697b      	ldr	r3, [r7, #20]
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d100      	bne.n	801ddd4 <lv_mbox_create+0x1c>
 801ddd2:	e7fe      	b.n	801ddd2 <lv_mbox_create+0x1a>
    if(new_mbox == NULL) return NULL;
 801ddd4:	697b      	ldr	r3, [r7, #20]
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d101      	bne.n	801ddde <lv_mbox_create+0x26>
 801ddda:	2300      	movs	r3, #0
 801dddc:	e08c      	b.n	801def8 <lv_mbox_create+0x140>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_mbox);
 801ddde:	4b48      	ldr	r3, [pc, #288]	; (801df00 <lv_mbox_create+0x148>)
 801dde0:	681b      	ldr	r3, [r3, #0]
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d105      	bne.n	801ddf2 <lv_mbox_create+0x3a>
 801dde6:	6978      	ldr	r0, [r7, #20]
 801dde8:	f7eb ffff 	bl	8009dea <lv_obj_get_signal_cb>
 801ddec:	4602      	mov	r2, r0
 801ddee:	4b44      	ldr	r3, [pc, #272]	; (801df00 <lv_mbox_create+0x148>)
 801ddf0:	601a      	str	r2, [r3, #0]

    /*Allocate the message box type specific extended data*/
    lv_mbox_ext_t * ext = lv_obj_allocate_ext_attr(new_mbox, sizeof(lv_mbox_ext_t));
 801ddf2:	2110      	movs	r1, #16
 801ddf4:	6978      	ldr	r0, [r7, #20]
 801ddf6:	f7eb fe43 	bl	8009a80 <lv_obj_allocate_ext_attr>
 801ddfa:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801ddfc:	693b      	ldr	r3, [r7, #16]
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	d100      	bne.n	801de04 <lv_mbox_create+0x4c>
 801de02:	e7fe      	b.n	801de02 <lv_mbox_create+0x4a>
    if(ext == NULL) return NULL;
 801de04:	693b      	ldr	r3, [r7, #16]
 801de06:	2b00      	cmp	r3, #0
 801de08:	d101      	bne.n	801de0e <lv_mbox_create+0x56>
 801de0a:	2300      	movs	r3, #0
 801de0c:	e074      	b.n	801def8 <lv_mbox_create+0x140>

    ext->text = NULL;
 801de0e:	693b      	ldr	r3, [r7, #16]
 801de10:	2200      	movs	r2, #0
 801de12:	605a      	str	r2, [r3, #4]
    ext->btnm = NULL;
 801de14:	693b      	ldr	r3, [r7, #16]
 801de16:	2200      	movs	r2, #0
 801de18:	609a      	str	r2, [r3, #8]
#if LV_USE_ANIMATION
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 801de1a:	693b      	ldr	r3, [r7, #16]
 801de1c:	22c8      	movs	r2, #200	; 0xc8
 801de1e:	819a      	strh	r2, [r3, #12]
#endif

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_mbox, lv_mbox_signal);
 801de20:	4938      	ldr	r1, [pc, #224]	; (801df04 <lv_mbox_create+0x14c>)
 801de22:	6978      	ldr	r0, [r7, #20]
 801de24:	f7eb fe10 	bl	8009a48 <lv_obj_set_signal_cb>

    /*Init the new message box message box*/
    if(copy == NULL) {
 801de28:	683b      	ldr	r3, [r7, #0]
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d146      	bne.n	801debc <lv_mbox_create+0x104>
        ext->text = lv_label_create(new_mbox, NULL);
 801de2e:	2100      	movs	r1, #0
 801de30:	6978      	ldr	r0, [r7, #20]
 801de32:	f7fe f935 	bl	801c0a0 <lv_label_create>
 801de36:	4602      	mov	r2, r0
 801de38:	693b      	ldr	r3, [r7, #16]
 801de3a:	605a      	str	r2, [r3, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 801de3c:	693b      	ldr	r3, [r7, #16]
 801de3e:	685b      	ldr	r3, [r3, #4]
 801de40:	2101      	movs	r1, #1
 801de42:	4618      	mov	r0, r3
 801de44:	f7fe fb56 	bl	801c4f4 <lv_label_set_align>
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
 801de48:	693b      	ldr	r3, [r7, #16]
 801de4a:	685b      	ldr	r3, [r3, #4]
 801de4c:	2101      	movs	r1, #1
 801de4e:	4618      	mov	r0, r3
 801de50:	f7fe faf4 	bl	801c43c <lv_label_set_long_mode>
        lv_label_set_text(ext->text, "Message");
 801de54:	693b      	ldr	r3, [r7, #16]
 801de56:	685b      	ldr	r3, [r3, #4]
 801de58:	492b      	ldr	r1, [pc, #172]	; (801df08 <lv_mbox_create+0x150>)
 801de5a:	4618      	mov	r0, r3
 801de5c:	f7fe fa52 	bl	801c304 <lv_label_set_text>

        lv_cont_set_layout(new_mbox, LV_LAYOUT_COL_M);
 801de60:	2103      	movs	r1, #3
 801de62:	6978      	ldr	r0, [r7, #20]
 801de64:	f7fc fe1e 	bl	801aaa4 <lv_cont_set_layout>
        lv_cont_set_fit2(new_mbox, LV_FIT_NONE, LV_FIT_TIGHT);
 801de68:	2201      	movs	r2, #1
 801de6a:	2100      	movs	r1, #0
 801de6c:	6978      	ldr	r0, [r7, #20]
 801de6e:	f7ff ff7a 	bl	801dd66 <lv_cont_set_fit2>
        lv_obj_set_width(new_mbox, LV_DPI * 2);
 801de72:	21c8      	movs	r1, #200	; 0xc8
 801de74:	6978      	ldr	r0, [r7, #20]
 801de76:	f7ea ffd1 	bl	8008e1c <lv_obj_set_width>
        lv_obj_align(new_mbox, NULL, LV_ALIGN_CENTER, 0, 0);
 801de7a:	2300      	movs	r3, #0
 801de7c:	9300      	str	r3, [sp, #0]
 801de7e:	2300      	movs	r3, #0
 801de80:	2200      	movs	r2, #0
 801de82:	2100      	movs	r1, #0
 801de84:	6978      	ldr	r0, [r7, #20]
 801de86:	f7ea fff3 	bl	8008e70 <lv_obj_align>
        lv_obj_set_event_cb(new_mbox, lv_mbox_default_event_cb);
 801de8a:	4920      	ldr	r1, [pc, #128]	; (801df0c <lv_mbox_create+0x154>)
 801de8c:	6978      	ldr	r0, [r7, #20]
 801de8e:	f7eb fd3c 	bl	800990a <lv_obj_set_event_cb>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801de92:	f003 fe45 	bl	8021b20 <lv_theme_get_current>
 801de96:	60b8      	str	r0, [r7, #8]
        if(th) {
 801de98:	68bb      	ldr	r3, [r7, #8]
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	d008      	beq.n	801deb0 <lv_mbox_create+0xf8>
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, th->style.mbox.bg);
 801de9e:	68bb      	ldr	r3, [r7, #8]
 801dea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801dea4:	461a      	mov	r2, r3
 801dea6:	2100      	movs	r1, #0
 801dea8:	6978      	ldr	r0, [r7, #20]
 801deaa:	f000 f921 	bl	801e0f0 <lv_mbox_set_style>
 801deae:	e022      	b.n	801def6 <lv_mbox_create+0x13e>
        } else {
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, &lv_style_pretty);
 801deb0:	4a17      	ldr	r2, [pc, #92]	; (801df10 <lv_mbox_create+0x158>)
 801deb2:	2100      	movs	r1, #0
 801deb4:	6978      	ldr	r0, [r7, #20]
 801deb6:	f000 f91b 	bl	801e0f0 <lv_mbox_set_style>
 801deba:	e01c      	b.n	801def6 <lv_mbox_create+0x13e>
        }

    }
    /*Copy an existing message box*/
    else {
        lv_mbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801debc:	6838      	ldr	r0, [r7, #0]
 801debe:	f7eb ffac 	bl	8009e1a <lv_obj_get_ext_attr>
 801dec2:	60f8      	str	r0, [r7, #12]

        ext->text = lv_label_create(new_mbox, copy_ext->text);
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	685b      	ldr	r3, [r3, #4]
 801dec8:	4619      	mov	r1, r3
 801deca:	6978      	ldr	r0, [r7, #20]
 801decc:	f7fe f8e8 	bl	801c0a0 <lv_label_create>
 801ded0:	4602      	mov	r2, r0
 801ded2:	693b      	ldr	r3, [r7, #16]
 801ded4:	605a      	str	r2, [r3, #4]

        /*Copy the buttons and the label on them*/
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	689b      	ldr	r3, [r3, #8]
 801deda:	2b00      	cmp	r3, #0
 801dedc:	d008      	beq.n	801def0 <lv_mbox_create+0x138>
 801dede:	68fb      	ldr	r3, [r7, #12]
 801dee0:	689b      	ldr	r3, [r3, #8]
 801dee2:	4619      	mov	r1, r3
 801dee4:	6978      	ldr	r0, [r7, #20]
 801dee6:	f7fa fdcd 	bl	8018a84 <lv_btnm_create>
 801deea:	4602      	mov	r2, r0
 801deec:	693b      	ldr	r3, [r7, #16]
 801deee:	609a      	str	r2, [r3, #8]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_mbox);
 801def0:	6978      	ldr	r0, [r7, #20]
 801def2:	f7eb fc74 	bl	80097de <lv_obj_refresh_style>
    }

    LV_LOG_INFO("mesasge box created");

    return new_mbox;
 801def6:	697b      	ldr	r3, [r7, #20]
}
 801def8:	4618      	mov	r0, r3
 801defa:	3718      	adds	r7, #24
 801defc:	46bd      	mov	sp, r7
 801defe:	bd80      	pop	{r7, pc}
 801df00:	200177e4 	.word	0x200177e4
 801df04:	0801e2b5 	.word	0x0801e2b5
 801df08:	0802c950 	.word	0x0802c950
 801df0c:	0801e53d 	.word	0x0801e53d
 801df10:	2001b920 	.word	0x2001b920

0801df14 <lv_mbox_add_btns>:
 * @param mbox pointer to message box object
 * @param btn_map button descriptor (button matrix map).
 *                E.g.  a const char *txt[] = {"ok", "close", ""} (Can not be local variable)
 */
void lv_mbox_add_btns(lv_obj_t * mbox, const char ** btn_map)
{
 801df14:	b580      	push	{r7, lr}
 801df16:	b084      	sub	sp, #16
 801df18:	af00      	add	r7, sp, #0
 801df1a:	6078      	str	r0, [r7, #4]
 801df1c:	6039      	str	r1, [r7, #0]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801df1e:	6878      	ldr	r0, [r7, #4]
 801df20:	f7eb ff7b 	bl	8009e1a <lv_obj_get_ext_attr>
 801df24:	60f8      	str	r0, [r7, #12]

    /*Create a button matrix if not exists yet*/
    if(ext->btnm == NULL) {
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	689b      	ldr	r3, [r3, #8]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d12c      	bne.n	801df88 <lv_mbox_add_btns+0x74>
        ext->btnm = lv_btnm_create(mbox, NULL);
 801df2e:	2100      	movs	r1, #0
 801df30:	6878      	ldr	r0, [r7, #4]
 801df32:	f7fa fda7 	bl	8018a84 <lv_btnm_create>
 801df36:	4602      	mov	r2, r0
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	609a      	str	r2, [r3, #8]

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801df3c:	f003 fdf0 	bl	8021b20 <lv_theme_get_current>
 801df40:	60b8      	str	r0, [r7, #8]
        if(th) {
 801df42:	68bb      	ldr	r3, [r7, #8]
 801df44:	2b00      	cmp	r3, #0
 801df46:	d018      	beq.n	801df7a <lv_mbox_add_btns+0x66>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_BG, th->style.mbox.btn.bg);
 801df48:	68bb      	ldr	r3, [r7, #8]
 801df4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801df4e:	461a      	mov	r2, r3
 801df50:	2101      	movs	r1, #1
 801df52:	6878      	ldr	r0, [r7, #4]
 801df54:	f000 f8cc 	bl	801e0f0 <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_REL, th->style.mbox.btn.rel);
 801df58:	68bb      	ldr	r3, [r7, #8]
 801df5a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801df5e:	461a      	mov	r2, r3
 801df60:	2102      	movs	r1, #2
 801df62:	6878      	ldr	r0, [r7, #4]
 801df64:	f000 f8c4 	bl	801e0f0 <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_PR, th->style.mbox.btn.pr);
 801df68:	68bb      	ldr	r3, [r7, #8]
 801df6a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801df6e:	461a      	mov	r2, r3
 801df70:	2103      	movs	r1, #3
 801df72:	6878      	ldr	r0, [r7, #4]
 801df74:	f000 f8bc 	bl	801e0f0 <lv_mbox_set_style>
 801df78:	e006      	b.n	801df88 <lv_mbox_add_btns+0x74>
        } else {
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, &lv_style_transp_fit);
 801df7a:	68fb      	ldr	r3, [r7, #12]
 801df7c:	689b      	ldr	r3, [r3, #8]
 801df7e:	4a0f      	ldr	r2, [pc, #60]	; (801dfbc <lv_mbox_add_btns+0xa8>)
 801df80:	2100      	movs	r1, #0
 801df82:	4618      	mov	r0, r3
 801df84:	f7fb f810 	bl	8018fa8 <lv_btnm_set_style>
        }
    }

    lv_btnm_set_map(ext->btnm, btn_map);
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	689b      	ldr	r3, [r3, #8]
 801df8c:	6839      	ldr	r1, [r7, #0]
 801df8e:	4618      	mov	r0, r3
 801df90:	f7fa fe60 	bl	8018c54 <lv_btnm_set_map>
    lv_btnm_set_btn_ctrl_all(ext->btnm, LV_BTNM_CTRL_CLICK_TRIG | LV_BTNM_CTRL_NO_REPEAT);
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	689b      	ldr	r3, [r3, #8]
 801df98:	f44f 7188 	mov.w	r1, #272	; 0x110
 801df9c:	4618      	mov	r0, r3
 801df9e:	f7fb f8a6 	bl	80190ee <lv_btnm_set_btn_ctrl_all>
    lv_obj_set_parent_event(ext->btnm, true);
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	689b      	ldr	r3, [r3, #8]
 801dfa6:	2101      	movs	r1, #1
 801dfa8:	4618      	mov	r0, r3
 801dfaa:	f7eb fc6d 	bl	8009888 <lv_obj_set_parent_event>

    mbox_realign(mbox);
 801dfae:	6878      	ldr	r0, [r7, #4]
 801dfb0:	f000 fa52 	bl	801e458 <mbox_realign>
}
 801dfb4:	bf00      	nop
 801dfb6:	3710      	adds	r7, #16
 801dfb8:	46bd      	mov	sp, r7
 801dfba:	bd80      	pop	{r7, pc}
 801dfbc:	2001b9d4 	.word	0x2001b9d4

0801dfc0 <lv_mbox_set_text>:
 * Set the text of the message box
 * @param mbox pointer to a message box
 * @param txt a '\0' terminated character string which will be the message box text
 */
void lv_mbox_set_text(lv_obj_t * mbox, const char * txt)
{
 801dfc0:	b580      	push	{r7, lr}
 801dfc2:	b084      	sub	sp, #16
 801dfc4:	af00      	add	r7, sp, #0
 801dfc6:	6078      	str	r0, [r7, #4]
 801dfc8:	6039      	str	r1, [r7, #0]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801dfca:	6878      	ldr	r0, [r7, #4]
 801dfcc:	f7eb ff25 	bl	8009e1a <lv_obj_get_ext_attr>
 801dfd0:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(ext->text, txt);
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	685b      	ldr	r3, [r3, #4]
 801dfd6:	6839      	ldr	r1, [r7, #0]
 801dfd8:	4618      	mov	r0, r3
 801dfda:	f7fe f993 	bl	801c304 <lv_label_set_text>

    mbox_realign(mbox);
 801dfde:	6878      	ldr	r0, [r7, #4]
 801dfe0:	f000 fa3a 	bl	801e458 <mbox_realign>
}
 801dfe4:	bf00      	nop
 801dfe6:	3710      	adds	r7, #16
 801dfe8:	46bd      	mov	sp, r7
 801dfea:	bd80      	pop	{r7, pc}

0801dfec <lv_mbox_start_auto_close>:
 * Automatically delete the message box after a given time
 * @param mbox pointer to a message box object
 * @param delay a time (in milliseconds) to wait before delete the message box
 */
void lv_mbox_start_auto_close(lv_obj_t * mbox, uint16_t delay)
{
 801dfec:	b580      	push	{r7, lr}
 801dfee:	b08c      	sub	sp, #48	; 0x30
 801dff0:	af00      	add	r7, sp, #0
 801dff2:	6078      	str	r0, [r7, #4]
 801dff4:	460b      	mov	r3, r1
 801dff6:	807b      	strh	r3, [r7, #2]
#if LV_USE_ANIMATION
    if(lv_mbox_get_anim_time(mbox) != 0) {
 801dff8:	6878      	ldr	r0, [r7, #4]
 801dffa:	f000 f8ee 	bl	801e1da <lv_mbox_get_anim_time>
 801dffe:	4603      	mov	r3, r0
 801e000:	2b00      	cmp	r3, #0
 801e002:	d040      	beq.n	801e086 <lv_mbox_start_auto_close+0x9a>
        /*Add shrinking animations*/
        lv_anim_t a;
        a.var            = mbox;
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	60bb      	str	r3, [r7, #8]
        a.start          = lv_obj_get_height(mbox);
 801e008:	6878      	ldr	r0, [r7, #4]
 801e00a:	f7eb fe29 	bl	8009c60 <lv_obj_get_height>
 801e00e:	4603      	mov	r3, r0
 801e010:	61bb      	str	r3, [r7, #24]
        a.end            = 0;
 801e012:	2300      	movs	r3, #0
 801e014:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_height;
 801e016:	4b32      	ldr	r3, [pc, #200]	; (801e0e0 <lv_mbox_start_auto_close+0xf4>)
 801e018:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 801e01a:	4b32      	ldr	r3, [pc, #200]	; (801e0e4 <lv_mbox_start_auto_close+0xf8>)
 801e01c:	613b      	str	r3, [r7, #16]
        a.ready_cb       = NULL;
 801e01e:	2300      	movs	r3, #0
 801e020:	617b      	str	r3, [r7, #20]
        a.act_time       = -delay;
 801e022:	887b      	ldrh	r3, [r7, #2]
 801e024:	425b      	negs	r3, r3
 801e026:	b29b      	uxth	r3, r3
 801e028:	b21b      	sxth	r3, r3
 801e02a:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = lv_mbox_get_anim_time(mbox);
 801e02c:	6878      	ldr	r0, [r7, #4]
 801e02e:	f000 f8d4 	bl	801e1da <lv_mbox_get_anim_time>
 801e032:	4603      	mov	r3, r0
 801e034:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 801e036:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e03a:	f36f 0300 	bfc	r3, #0, #1
 801e03e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 801e042:	2300      	movs	r3, #0
 801e044:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 801e046:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e04a:	f36f 0341 	bfc	r3, #1, #1
 801e04e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 801e052:	2300      	movs	r3, #0
 801e054:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_anim_create(&a);
 801e056:	f107 0308 	add.w	r3, r7, #8
 801e05a:	4618      	mov	r0, r3
 801e05c:	f7f7 f9a8 	bl	80153b0 <lv_anim_create>

        a.start    = lv_obj_get_width(mbox);
 801e060:	6878      	ldr	r0, [r7, #4]
 801e062:	f7eb fdef 	bl	8009c44 <lv_obj_get_width>
 801e066:	4603      	mov	r3, r0
 801e068:	61bb      	str	r3, [r7, #24]
        a.exec_cb  = (lv_anim_exec_xcb_t)lv_obj_set_width;
 801e06a:	4b1f      	ldr	r3, [pc, #124]	; (801e0e8 <lv_mbox_start_auto_close+0xfc>)
 801e06c:	60fb      	str	r3, [r7, #12]
        a.ready_cb = lv_mbox_close_ready_cb;
 801e06e:	4b1f      	ldr	r3, [pc, #124]	; (801e0ec <lv_mbox_start_auto_close+0x100>)
 801e070:	617b      	str	r3, [r7, #20]
        lv_anim_create(&a);
 801e072:	f107 0308 	add.w	r3, r7, #8
 801e076:	4618      	mov	r0, r3
 801e078:	f7f7 f99a 	bl	80153b0 <lv_anim_create>

        /*Disable fit to let shrinking work*/
        lv_cont_set_fit(mbox, LV_FIT_NONE);
 801e07c:	2100      	movs	r1, #0
 801e07e:	6878      	ldr	r0, [r7, #4]
 801e080:	f7ff fe86 	bl	801dd90 <lv_cont_set_fit>
    }
#else
    (void)delay; /*Unused*/
    lv_obj_del(mbox);
#endif
}
 801e084:	e027      	b.n	801e0d6 <lv_mbox_start_auto_close+0xea>
        a.var            = mbox;
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	60bb      	str	r3, [r7, #8]
        a.start          = 0;
 801e08a:	2300      	movs	r3, #0
 801e08c:	61bb      	str	r3, [r7, #24]
        a.end            = 1;
 801e08e:	2301      	movs	r3, #1
 801e090:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)NULL;
 801e092:	2300      	movs	r3, #0
 801e094:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 801e096:	4b13      	ldr	r3, [pc, #76]	; (801e0e4 <lv_mbox_start_auto_close+0xf8>)
 801e098:	613b      	str	r3, [r7, #16]
        a.ready_cb       = lv_mbox_close_ready_cb;
 801e09a:	4b14      	ldr	r3, [pc, #80]	; (801e0ec <lv_mbox_start_auto_close+0x100>)
 801e09c:	617b      	str	r3, [r7, #20]
        a.act_time       = -delay;
 801e09e:	887b      	ldrh	r3, [r7, #2]
 801e0a0:	425b      	negs	r3, r3
 801e0a2:	b29b      	uxth	r3, r3
 801e0a4:	b21b      	sxth	r3, r3
 801e0a6:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = 0;
 801e0a8:	2300      	movs	r3, #0
 801e0aa:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 801e0ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e0b0:	f36f 0300 	bfc	r3, #0, #1
 801e0b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 801e0b8:	2300      	movs	r3, #0
 801e0ba:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 801e0bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e0c0:	f36f 0341 	bfc	r3, #1, #1
 801e0c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 801e0c8:	2300      	movs	r3, #0
 801e0ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_anim_create(&a);
 801e0cc:	f107 0308 	add.w	r3, r7, #8
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	f7f7 f96d 	bl	80153b0 <lv_anim_create>
}
 801e0d6:	bf00      	nop
 801e0d8:	3730      	adds	r7, #48	; 0x30
 801e0da:	46bd      	mov	sp, r7
 801e0dc:	bd80      	pop	{r7, pc}
 801e0de:	bf00      	nop
 801e0e0:	08008e47 	.word	0x08008e47
 801e0e4:	08015501 	.word	0x08015501
 801e0e8:	08008e1d 	.word	0x08008e1d
 801e0ec:	0801e523 	.word	0x0801e523

0801e0f0 <lv_mbox_set_style>:
 * @param mbox pointer to a message box object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_mbox_set_style(lv_obj_t * mbox, lv_mbox_style_t type, const lv_style_t * style)
{
 801e0f0:	b580      	push	{r7, lr}
 801e0f2:	b086      	sub	sp, #24
 801e0f4:	af00      	add	r7, sp, #0
 801e0f6:	60f8      	str	r0, [r7, #12]
 801e0f8:	460b      	mov	r3, r1
 801e0fa:	607a      	str	r2, [r7, #4]
 801e0fc:	72fb      	strb	r3, [r7, #11]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801e0fe:	68f8      	ldr	r0, [r7, #12]
 801e100:	f7eb fe8b 	bl	8009e1a <lv_obj_get_ext_attr>
 801e104:	6178      	str	r0, [r7, #20]

    switch(type) {
 801e106:	7afb      	ldrb	r3, [r7, #11]
 801e108:	2b06      	cmp	r3, #6
 801e10a:	d846      	bhi.n	801e19a <lv_mbox_set_style+0xaa>
 801e10c:	a201      	add	r2, pc, #4	; (adr r2, 801e114 <lv_mbox_set_style+0x24>)
 801e10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e112:	bf00      	nop
 801e114:	0801e131 	.word	0x0801e131
 801e118:	0801e13b 	.word	0x0801e13b
 801e11c:	0801e14b 	.word	0x0801e14b
 801e120:	0801e15b 	.word	0x0801e15b
 801e124:	0801e16b 	.word	0x0801e16b
 801e128:	0801e17b 	.word	0x0801e17b
 801e12c:	0801e18b 	.word	0x0801e18b
        case LV_MBOX_STYLE_BG: lv_obj_set_style(mbox, style); break;
 801e130:	6879      	ldr	r1, [r7, #4]
 801e132:	68f8      	ldr	r0, [r7, #12]
 801e134:	f7eb fb41 	bl	80097ba <lv_obj_set_style>
 801e138:	e02f      	b.n	801e19a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_BG: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, style); break;
 801e13a:	697b      	ldr	r3, [r7, #20]
 801e13c:	689b      	ldr	r3, [r3, #8]
 801e13e:	687a      	ldr	r2, [r7, #4]
 801e140:	2100      	movs	r1, #0
 801e142:	4618      	mov	r0, r3
 801e144:	f7fa ff30 	bl	8018fa8 <lv_btnm_set_style>
 801e148:	e027      	b.n	801e19a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_REL: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_REL, style); break;
 801e14a:	697b      	ldr	r3, [r7, #20]
 801e14c:	689b      	ldr	r3, [r3, #8]
 801e14e:	687a      	ldr	r2, [r7, #4]
 801e150:	2101      	movs	r1, #1
 801e152:	4618      	mov	r0, r3
 801e154:	f7fa ff28 	bl	8018fa8 <lv_btnm_set_style>
 801e158:	e01f      	b.n	801e19a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_PR: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_PR, style); break;
 801e15a:	697b      	ldr	r3, [r7, #20]
 801e15c:	689b      	ldr	r3, [r3, #8]
 801e15e:	687a      	ldr	r2, [r7, #4]
 801e160:	2102      	movs	r1, #2
 801e162:	4618      	mov	r0, r3
 801e164:	f7fa ff20 	bl	8018fa8 <lv_btnm_set_style>
 801e168:	e017      	b.n	801e19a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_TGL_REL: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL, style); break;
 801e16a:	697b      	ldr	r3, [r7, #20]
 801e16c:	689b      	ldr	r3, [r3, #8]
 801e16e:	687a      	ldr	r2, [r7, #4]
 801e170:	2103      	movs	r1, #3
 801e172:	4618      	mov	r0, r3
 801e174:	f7fa ff18 	bl	8018fa8 <lv_btnm_set_style>
 801e178:	e00f      	b.n	801e19a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_TGL_PR: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 801e17a:	697b      	ldr	r3, [r7, #20]
 801e17c:	689b      	ldr	r3, [r3, #8]
 801e17e:	687a      	ldr	r2, [r7, #4]
 801e180:	2104      	movs	r1, #4
 801e182:	4618      	mov	r0, r3
 801e184:	f7fa ff10 	bl	8018fa8 <lv_btnm_set_style>
 801e188:	e007      	b.n	801e19a <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_INA: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style); break;
 801e18a:	697b      	ldr	r3, [r7, #20]
 801e18c:	689b      	ldr	r3, [r3, #8]
 801e18e:	687a      	ldr	r2, [r7, #4]
 801e190:	2105      	movs	r1, #5
 801e192:	4618      	mov	r0, r3
 801e194:	f7fa ff08 	bl	8018fa8 <lv_btnm_set_style>
 801e198:	bf00      	nop
    }

    mbox_realign(mbox);
 801e19a:	68f8      	ldr	r0, [r7, #12]
 801e19c:	f000 f95c 	bl	801e458 <mbox_realign>
}
 801e1a0:	bf00      	nop
 801e1a2:	3718      	adds	r7, #24
 801e1a4:	46bd      	mov	sp, r7
 801e1a6:	bd80      	pop	{r7, pc}

0801e1a8 <lv_mbox_get_active_btn>:
 * Useful in the the `event_cb`.
 * @param btnm pointer to button matrix object
 * @return  index of the last released button (LV_BTNM_BTN_NONE: if unset)
 */
uint16_t lv_mbox_get_active_btn(lv_obj_t * mbox)
{
 801e1a8:	b580      	push	{r7, lr}
 801e1aa:	b084      	sub	sp, #16
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	6078      	str	r0, [r7, #4]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801e1b0:	6878      	ldr	r0, [r7, #4]
 801e1b2:	f7eb fe32 	bl	8009e1a <lv_obj_get_ext_attr>
 801e1b6:	60f8      	str	r0, [r7, #12]
    if(ext->btnm)
 801e1b8:	68fb      	ldr	r3, [r7, #12]
 801e1ba:	689b      	ldr	r3, [r3, #8]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d006      	beq.n	801e1ce <lv_mbox_get_active_btn+0x26>
        return lv_btnm_get_active_btn(ext->btnm);
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	689b      	ldr	r3, [r3, #8]
 801e1c4:	4618      	mov	r0, r3
 801e1c6:	f7fa ffde 	bl	8019186 <lv_btnm_get_active_btn>
 801e1ca:	4603      	mov	r3, r0
 801e1cc:	e001      	b.n	801e1d2 <lv_mbox_get_active_btn+0x2a>
    else
        return LV_BTNM_BTN_NONE;
 801e1ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801e1d2:	4618      	mov	r0, r3
 801e1d4:	3710      	adds	r7, #16
 801e1d6:	46bd      	mov	sp, r7
 801e1d8:	bd80      	pop	{r7, pc}

0801e1da <lv_mbox_get_anim_time>:
 * Get the animation duration (close animation time)
 * @param mbox pointer to a message box object
 * @return animation length in  milliseconds (0: no animation)
 */
uint16_t lv_mbox_get_anim_time(const lv_obj_t * mbox)
{
 801e1da:	b580      	push	{r7, lr}
 801e1dc:	b084      	sub	sp, #16
 801e1de:	af00      	add	r7, sp, #0
 801e1e0:	6078      	str	r0, [r7, #4]
#if LV_USE_ANIMATION
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801e1e2:	6878      	ldr	r0, [r7, #4]
 801e1e4:	f7eb fe19 	bl	8009e1a <lv_obj_get_ext_attr>
 801e1e8:	60f8      	str	r0, [r7, #12]
    return ext->anim_time;
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	899b      	ldrh	r3, [r3, #12]
#else
    (void)mbox;
    return 0;
#endif
}
 801e1ee:	4618      	mov	r0, r3
 801e1f0:	3710      	adds	r7, #16
 801e1f2:	46bd      	mov	sp, r7
 801e1f4:	bd80      	pop	{r7, pc}
	...

0801e1f8 <lv_mbox_get_style>:
 * @param mbox pointer to a message box object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_mbox_get_style(const lv_obj_t * mbox, lv_mbox_style_t type)
{
 801e1f8:	b580      	push	{r7, lr}
 801e1fa:	b084      	sub	sp, #16
 801e1fc:	af00      	add	r7, sp, #0
 801e1fe:	6078      	str	r0, [r7, #4]
 801e200:	460b      	mov	r3, r1
 801e202:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801e204:	2300      	movs	r3, #0
 801e206:	60fb      	str	r3, [r7, #12]
    lv_mbox_ext_t * ext      = lv_obj_get_ext_attr(mbox);
 801e208:	6878      	ldr	r0, [r7, #4]
 801e20a:	f7eb fe06 	bl	8009e1a <lv_obj_get_ext_attr>
 801e20e:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801e210:	78fb      	ldrb	r3, [r7, #3]
 801e212:	2b06      	cmp	r3, #6
 801e214:	d845      	bhi.n	801e2a2 <lv_mbox_get_style+0xaa>
 801e216:	a201      	add	r2, pc, #4	; (adr r2, 801e21c <lv_mbox_get_style+0x24>)
 801e218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e21c:	0801e239 	.word	0x0801e239
 801e220:	0801e243 	.word	0x0801e243
 801e224:	0801e253 	.word	0x0801e253
 801e228:	0801e263 	.word	0x0801e263
 801e22c:	0801e273 	.word	0x0801e273
 801e230:	0801e283 	.word	0x0801e283
 801e234:	0801e293 	.word	0x0801e293
        case LV_MBOX_STYLE_BG: style = lv_obj_get_style(mbox); break;
 801e238:	6878      	ldr	r0, [r7, #4]
 801e23a:	f7eb fd33 	bl	8009ca4 <lv_obj_get_style>
 801e23e:	60f8      	str	r0, [r7, #12]
 801e240:	e032      	b.n	801e2a8 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_BG: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BG); break;
 801e242:	68bb      	ldr	r3, [r7, #8]
 801e244:	689b      	ldr	r3, [r3, #8]
 801e246:	2100      	movs	r1, #0
 801e248:	4618      	mov	r0, r3
 801e24a:	f7fa ffcf 	bl	80191ec <lv_btnm_get_style>
 801e24e:	60f8      	str	r0, [r7, #12]
 801e250:	e02a      	b.n	801e2a8 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_REL: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_REL); break;
 801e252:	68bb      	ldr	r3, [r7, #8]
 801e254:	689b      	ldr	r3, [r3, #8]
 801e256:	2101      	movs	r1, #1
 801e258:	4618      	mov	r0, r3
 801e25a:	f7fa ffc7 	bl	80191ec <lv_btnm_get_style>
 801e25e:	60f8      	str	r0, [r7, #12]
 801e260:	e022      	b.n	801e2a8 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_PR: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_PR); break;
 801e262:	68bb      	ldr	r3, [r7, #8]
 801e264:	689b      	ldr	r3, [r3, #8]
 801e266:	2102      	movs	r1, #2
 801e268:	4618      	mov	r0, r3
 801e26a:	f7fa ffbf 	bl	80191ec <lv_btnm_get_style>
 801e26e:	60f8      	str	r0, [r7, #12]
 801e270:	e01a      	b.n	801e2a8 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_TGL_REL: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL); break;
 801e272:	68bb      	ldr	r3, [r7, #8]
 801e274:	689b      	ldr	r3, [r3, #8]
 801e276:	2103      	movs	r1, #3
 801e278:	4618      	mov	r0, r3
 801e27a:	f7fa ffb7 	bl	80191ec <lv_btnm_get_style>
 801e27e:	60f8      	str	r0, [r7, #12]
 801e280:	e012      	b.n	801e2a8 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_TGL_PR: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR); break;
 801e282:	68bb      	ldr	r3, [r7, #8]
 801e284:	689b      	ldr	r3, [r3, #8]
 801e286:	2104      	movs	r1, #4
 801e288:	4618      	mov	r0, r3
 801e28a:	f7fa ffaf 	bl	80191ec <lv_btnm_get_style>
 801e28e:	60f8      	str	r0, [r7, #12]
 801e290:	e00a      	b.n	801e2a8 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_INA: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA); break;
 801e292:	68bb      	ldr	r3, [r7, #8]
 801e294:	689b      	ldr	r3, [r3, #8]
 801e296:	2105      	movs	r1, #5
 801e298:	4618      	mov	r0, r3
 801e29a:	f7fa ffa7 	bl	80191ec <lv_btnm_get_style>
 801e29e:	60f8      	str	r0, [r7, #12]
 801e2a0:	e002      	b.n	801e2a8 <lv_mbox_get_style+0xb0>
        default: style = NULL; break;
 801e2a2:	2300      	movs	r3, #0
 801e2a4:	60fb      	str	r3, [r7, #12]
 801e2a6:	bf00      	nop
    }

    return style;
 801e2a8:	68fb      	ldr	r3, [r7, #12]
}
 801e2aa:	4618      	mov	r0, r3
 801e2ac:	3710      	adds	r7, #16
 801e2ae:	46bd      	mov	sp, r7
 801e2b0:	bd80      	pop	{r7, pc}
 801e2b2:	bf00      	nop

0801e2b4 <lv_mbox_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_mbox_signal(lv_obj_t * mbox, lv_signal_t sign, void * param)
{
 801e2b4:	b590      	push	{r4, r7, lr}
 801e2b6:	b08d      	sub	sp, #52	; 0x34
 801e2b8:	af00      	add	r7, sp, #0
 801e2ba:	60f8      	str	r0, [r7, #12]
 801e2bc:	460b      	mov	r3, r1
 801e2be:	607a      	str	r2, [r7, #4]
 801e2c0:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /*Translate LV_KEY_UP/DOWN to LV_KEY_LEFT/RIGHT */
    char c_trans = 0;
 801e2c2:	2300      	movs	r3, #0
 801e2c4:	75fb      	strb	r3, [r7, #23]
    if(sign == LV_SIGNAL_CONTROL) {
 801e2c6:	7afb      	ldrb	r3, [r7, #11]
 801e2c8:	2b11      	cmp	r3, #17
 801e2ca:	d10f      	bne.n	801e2ec <lv_mbox_signal+0x38>
        c_trans = *((char *)param);
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	781b      	ldrb	r3, [r3, #0]
 801e2d0:	75fb      	strb	r3, [r7, #23]
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
 801e2d2:	7dfb      	ldrb	r3, [r7, #23]
 801e2d4:	2b12      	cmp	r3, #18
 801e2d6:	d101      	bne.n	801e2dc <lv_mbox_signal+0x28>
 801e2d8:	2314      	movs	r3, #20
 801e2da:	75fb      	strb	r3, [r7, #23]
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
 801e2dc:	7dfb      	ldrb	r3, [r7, #23]
 801e2de:	2b11      	cmp	r3, #17
 801e2e0:	d101      	bne.n	801e2e6 <lv_mbox_signal+0x32>
 801e2e2:	2313      	movs	r3, #19
 801e2e4:	75fb      	strb	r3, [r7, #23]

        param = &c_trans;
 801e2e6:	f107 0317 	add.w	r3, r7, #23
 801e2ea:	607b      	str	r3, [r7, #4]
    }

    /* Include the ancient signal function */
    res = ancestor_signal(mbox, sign, param);
 801e2ec:	4b58      	ldr	r3, [pc, #352]	; (801e450 <lv_mbox_signal+0x19c>)
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	7af9      	ldrb	r1, [r7, #11]
 801e2f2:	687a      	ldr	r2, [r7, #4]
 801e2f4:	68f8      	ldr	r0, [r7, #12]
 801e2f6:	4798      	blx	r3
 801e2f8:	4603      	mov	r3, r0
 801e2fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(res != LV_RES_OK) return res;
 801e2fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801e302:	2b01      	cmp	r3, #1
 801e304:	d002      	beq.n	801e30c <lv_mbox_signal+0x58>
 801e306:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801e30a:	e09c      	b.n	801e446 <lv_mbox_signal+0x192>

    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801e30c:	68f8      	ldr	r0, [r7, #12]
 801e30e:	f7eb fd84 	bl	8009e1a <lv_obj_get_ext_attr>
 801e312:	62b8      	str	r0, [r7, #40]	; 0x28
    if(sign == LV_SIGNAL_CORD_CHG) {
 801e314:	7afb      	ldrb	r3, [r7, #11]
 801e316:	2b02      	cmp	r3, #2
 801e318:	d10f      	bne.n	801e33a <lv_mbox_signal+0x86>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
 801e31a:	68f8      	ldr	r0, [r7, #12]
 801e31c:	f7eb fc92 	bl	8009c44 <lv_obj_get_width>
 801e320:	4603      	mov	r3, r0
 801e322:	461c      	mov	r4, r3
 801e324:	6878      	ldr	r0, [r7, #4]
 801e326:	f7ff fd07 	bl	801dd38 <lv_area_get_width>
 801e32a:	4603      	mov	r3, r0
 801e32c:	429c      	cmp	r4, r3
 801e32e:	f000 8088 	beq.w	801e442 <lv_mbox_signal+0x18e>
            mbox_realign(mbox);
 801e332:	68f8      	ldr	r0, [r7, #12]
 801e334:	f000 f890 	bl	801e458 <mbox_realign>
 801e338:	e083      	b.n	801e442 <lv_mbox_signal+0x18e>
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801e33a:	7afb      	ldrb	r3, [r7, #11]
 801e33c:	2b04      	cmp	r3, #4
 801e33e:	d103      	bne.n	801e348 <lv_mbox_signal+0x94>
        mbox_realign(mbox);
 801e340:	68f8      	ldr	r0, [r7, #12]
 801e342:	f000 f889 	bl	801e458 <mbox_realign>
 801e346:	e07c      	b.n	801e442 <lv_mbox_signal+0x18e>
    } else if(sign == LV_SIGNAL_RELEASED) {
 801e348:	7afb      	ldrb	r3, [r7, #11]
 801e34a:	2b0a      	cmp	r3, #10
 801e34c:	d117      	bne.n	801e37e <lv_mbox_signal+0xca>
        if(ext->btnm) {
 801e34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e350:	689b      	ldr	r3, [r3, #8]
 801e352:	2b00      	cmp	r3, #0
 801e354:	d075      	beq.n	801e442 <lv_mbox_signal+0x18e>
            uint32_t btn_id = lv_btnm_get_active_btn(ext->btnm);
 801e356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e358:	689b      	ldr	r3, [r3, #8]
 801e35a:	4618      	mov	r0, r3
 801e35c:	f7fa ff13 	bl	8019186 <lv_btnm_get_active_btn>
 801e360:	4603      	mov	r3, r0
 801e362:	613b      	str	r3, [r7, #16]
            if(btn_id != LV_BTNM_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
 801e364:	693b      	ldr	r3, [r7, #16]
 801e366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e36a:	4293      	cmp	r3, r2
 801e36c:	d069      	beq.n	801e442 <lv_mbox_signal+0x18e>
 801e36e:	f107 0310 	add.w	r3, r7, #16
 801e372:	461a      	mov	r2, r3
 801e374:	210e      	movs	r1, #14
 801e376:	68f8      	ldr	r0, [r7, #12]
 801e378:	f7eb fad5 	bl	8009926 <lv_event_send>
 801e37c:	e061      	b.n	801e442 <lv_mbox_signal+0x18e>
        }
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_CONTROL ||
 801e37e:	7afb      	ldrb	r3, [r7, #11]
 801e380:	2b0f      	cmp	r3, #15
 801e382:	d008      	beq.n	801e396 <lv_mbox_signal+0xe2>
 801e384:	7afb      	ldrb	r3, [r7, #11]
 801e386:	2b10      	cmp	r3, #16
 801e388:	d005      	beq.n	801e396 <lv_mbox_signal+0xe2>
 801e38a:	7afb      	ldrb	r3, [r7, #11]
 801e38c:	2b11      	cmp	r3, #17
 801e38e:	d002      	beq.n	801e396 <lv_mbox_signal+0xe2>
 801e390:	7afb      	ldrb	r3, [r7, #11]
 801e392:	2b12      	cmp	r3, #18
 801e394:	d132      	bne.n	801e3fc <lv_mbox_signal+0x148>
              sign == LV_SIGNAL_GET_EDITABLE) {
        if(ext->btnm) {
 801e396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e398:	689b      	ldr	r3, [r3, #8]
 801e39a:	2b00      	cmp	r3, #0
 801e39c:	d007      	beq.n	801e3ae <lv_mbox_signal+0xfa>
            ext->btnm->signal_cb(ext->btnm, sign, param);
 801e39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3a0:	689b      	ldr	r3, [r3, #8]
 801e3a2:	69db      	ldr	r3, [r3, #28]
 801e3a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e3a6:	6890      	ldr	r0, [r2, #8]
 801e3a8:	7af9      	ldrb	r1, [r7, #11]
 801e3aa:	687a      	ldr	r2, [r7, #4]
 801e3ac:	4798      	blx	r3
        }

        /* The button matrix with ENCODER input supposes it's in a group but in this case it isn't
         * (Only the message box's container) So so some actions here instead*/
        if(sign == LV_SIGNAL_FOCUS) {
 801e3ae:	7afb      	ldrb	r3, [r7, #11]
 801e3b0:	2b0f      	cmp	r3, #15
 801e3b2:	d145      	bne.n	801e440 <lv_mbox_signal+0x18c>
#if LV_USE_GROUP
            lv_indev_t * indev         = lv_indev_get_act();
 801e3b4:	f7e9 fe7c 	bl	80080b0 <lv_indev_get_act>
 801e3b8:	6238      	str	r0, [r7, #32]
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801e3ba:	6a38      	ldr	r0, [r7, #32]
 801e3bc:	f7e9 fe84 	bl	80080c8 <lv_indev_get_type>
 801e3c0:	4603      	mov	r3, r0
 801e3c2:	77fb      	strb	r3, [r7, #31]
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801e3c4:	7ffb      	ldrb	r3, [r7, #31]
 801e3c6:	2b04      	cmp	r3, #4
 801e3c8:	d13a      	bne.n	801e440 <lv_mbox_signal+0x18c>
                /*In navigation mode don't select any button but in edit mode select the fist*/
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btnm);
 801e3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3cc:	689b      	ldr	r3, [r3, #8]
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	f7eb fd23 	bl	8009e1a <lv_obj_get_ext_attr>
 801e3d4:	61b8      	str	r0, [r7, #24]
                if(lv_group_get_editing(lv_obj_get_group(mbox)))
 801e3d6:	68f8      	ldr	r0, [r7, #12]
 801e3d8:	f7eb fd2b 	bl	8009e32 <lv_obj_get_group>
 801e3dc:	4603      	mov	r3, r0
 801e3de:	4618      	mov	r0, r3
 801e3e0:	f7e9 fd21 	bl	8007e26 <lv_group_get_editing>
 801e3e4:	4603      	mov	r3, r0
 801e3e6:	2b00      	cmp	r3, #0
 801e3e8:	d003      	beq.n	801e3f2 <lv_mbox_signal+0x13e>
                    btnm_ext->btn_id_pr = 0;
 801e3ea:	69bb      	ldr	r3, [r7, #24]
 801e3ec:	2200      	movs	r2, #0
 801e3ee:	845a      	strh	r2, [r3, #34]	; 0x22
        if(sign == LV_SIGNAL_FOCUS) {
 801e3f0:	e026      	b.n	801e440 <lv_mbox_signal+0x18c>
                else
                    btnm_ext->btn_id_pr = LV_BTNM_BTN_NONE;
 801e3f2:	69bb      	ldr	r3, [r7, #24]
 801e3f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e3f8:	845a      	strh	r2, [r3, #34]	; 0x22
        if(sign == LV_SIGNAL_FOCUS) {
 801e3fa:	e021      	b.n	801e440 <lv_mbox_signal+0x18c>
            }
#endif
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801e3fc:	7afb      	ldrb	r3, [r7, #11]
 801e3fe:	2b06      	cmp	r3, #6
 801e400:	d11f      	bne.n	801e442 <lv_mbox_signal+0x18e>
        lv_obj_type_t * buf = param;
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801e406:	2300      	movs	r3, #0
 801e408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801e40c:	e00b      	b.n	801e426 <lv_mbox_signal+0x172>
            if(buf->type[i] == NULL) break;
 801e40e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801e412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d009      	beq.n	801e430 <lv_mbox_signal+0x17c>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801e41c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e420:	3301      	adds	r3, #1
 801e422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801e426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e42a:	2b06      	cmp	r3, #6
 801e42c:	d9ef      	bls.n	801e40e <lv_mbox_signal+0x15a>
 801e42e:	e000      	b.n	801e432 <lv_mbox_signal+0x17e>
            if(buf->type[i] == NULL) break;
 801e430:	bf00      	nop
        }
        buf->type[i] = "lv_mbox";
 801e432:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e438:	4906      	ldr	r1, [pc, #24]	; (801e454 <lv_mbox_signal+0x1a0>)
 801e43a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801e43e:	e000      	b.n	801e442 <lv_mbox_signal+0x18e>
        if(sign == LV_SIGNAL_FOCUS) {
 801e440:	bf00      	nop
    }

    return res;
 801e442:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 801e446:	4618      	mov	r0, r3
 801e448:	3734      	adds	r7, #52	; 0x34
 801e44a:	46bd      	mov	sp, r7
 801e44c:	bd90      	pop	{r4, r7, pc}
 801e44e:	bf00      	nop
 801e450:	200177e4 	.word	0x200177e4
 801e454:	0802c958 	.word	0x0802c958

0801e458 <mbox_realign>:
/**
 * Resize the button holder to fit
 * @param mbox pointer to message box object
 */
static void mbox_realign(lv_obj_t * mbox)
{
 801e458:	b580      	push	{r7, lr}
 801e45a:	b088      	sub	sp, #32
 801e45c:	af00      	add	r7, sp, #0
 801e45e:	6078      	str	r0, [r7, #4]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801e460:	6878      	ldr	r0, [r7, #4]
 801e462:	f7eb fcda 	bl	8009e1a <lv_obj_get_ext_attr>
 801e466:	61f8      	str	r0, [r7, #28]

    const lv_style_t * style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BG);
 801e468:	2100      	movs	r1, #0
 801e46a:	6878      	ldr	r0, [r7, #4]
 801e46c:	f7ff fec4 	bl	801e1f8 <lv_mbox_get_style>
 801e470:	61b8      	str	r0, [r7, #24]
    lv_coord_t w             = lv_obj_get_width(mbox) - style->body.padding.left - style->body.padding.right;
 801e472:	6878      	ldr	r0, [r7, #4]
 801e474:	f7eb fbe6 	bl	8009c44 <lv_obj_get_width>
 801e478:	4603      	mov	r3, r0
 801e47a:	b29a      	uxth	r2, r3
 801e47c:	69bb      	ldr	r3, [r7, #24]
 801e47e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e482:	b29b      	uxth	r3, r3
 801e484:	1ad3      	subs	r3, r2, r3
 801e486:	b29a      	uxth	r2, r3
 801e488:	69bb      	ldr	r3, [r7, #24]
 801e48a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801e48e:	b29b      	uxth	r3, r3
 801e490:	1ad3      	subs	r3, r2, r3
 801e492:	b29b      	uxth	r3, r3
 801e494:	82fb      	strh	r3, [r7, #22]

    if(ext->text) {
 801e496:	69fb      	ldr	r3, [r7, #28]
 801e498:	685b      	ldr	r3, [r3, #4]
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	d007      	beq.n	801e4ae <mbox_realign+0x56>
        lv_obj_set_width(ext->text, w);
 801e49e:	69fb      	ldr	r3, [r7, #28]
 801e4a0:	685b      	ldr	r3, [r3, #4]
 801e4a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e4a6:	4611      	mov	r1, r2
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	f7ea fcb7 	bl	8008e1c <lv_obj_set_width>
    }

    if(ext->btnm) {
 801e4ae:	69fb      	ldr	r3, [r7, #28]
 801e4b0:	689b      	ldr	r3, [r3, #8]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d031      	beq.n	801e51a <mbox_realign+0xc2>
        const lv_style_t * btn_bg_style  = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_BG);
 801e4b6:	2101      	movs	r1, #1
 801e4b8:	6878      	ldr	r0, [r7, #4]
 801e4ba:	f7ff fe9d 	bl	801e1f8 <lv_mbox_get_style>
 801e4be:	6138      	str	r0, [r7, #16]
        const lv_style_t * btn_rel_style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_REL);
 801e4c0:	2102      	movs	r1, #2
 801e4c2:	6878      	ldr	r0, [r7, #4]
 801e4c4:	f7ff fe98 	bl	801e1f8 <lv_mbox_get_style>
 801e4c8:	60f8      	str	r0, [r7, #12]
        lv_coord_t font_h                = lv_font_get_line_height(btn_rel_style->text.font);
 801e4ca:	68fb      	ldr	r3, [r7, #12]
 801e4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4ce:	4618      	mov	r0, r3
 801e4d0:	f7ff fc26 	bl	801dd20 <lv_font_get_line_height>
 801e4d4:	4603      	mov	r3, r0
 801e4d6:	817b      	strh	r3, [r7, #10]
        lv_obj_set_size(ext->btnm, w,
 801e4d8:	69fb      	ldr	r3, [r7, #28]
 801e4da:	6898      	ldr	r0, [r3, #8]
                        font_h + btn_rel_style->body.padding.top + btn_rel_style->body.padding.bottom +
 801e4dc:	68fb      	ldr	r3, [r7, #12]
 801e4de:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e4e2:	b29a      	uxth	r2, r3
 801e4e4:	897b      	ldrh	r3, [r7, #10]
 801e4e6:	4413      	add	r3, r2
 801e4e8:	b29a      	uxth	r2, r3
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801e4f0:	b29b      	uxth	r3, r3
 801e4f2:	4413      	add	r3, r2
 801e4f4:	b29a      	uxth	r2, r3
                            btn_bg_style->body.padding.top + btn_bg_style->body.padding.bottom);
 801e4f6:	693b      	ldr	r3, [r7, #16]
 801e4f8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e4fc:	b29b      	uxth	r3, r3
                        font_h + btn_rel_style->body.padding.top + btn_rel_style->body.padding.bottom +
 801e4fe:	4413      	add	r3, r2
 801e500:	b29a      	uxth	r2, r3
                            btn_bg_style->body.padding.top + btn_bg_style->body.padding.bottom);
 801e502:	693b      	ldr	r3, [r7, #16]
 801e504:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801e508:	b29b      	uxth	r3, r3
 801e50a:	4413      	add	r3, r2
 801e50c:	b29b      	uxth	r3, r3
        lv_obj_set_size(ext->btnm, w,
 801e50e:	b21a      	sxth	r2, r3
 801e510:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e514:	4619      	mov	r1, r3
 801e516:	f7ea fc08 	bl	8008d2a <lv_obj_set_size>
    }
}
 801e51a:	bf00      	nop
 801e51c:	3720      	adds	r7, #32
 801e51e:	46bd      	mov	sp, r7
 801e520:	bd80      	pop	{r7, pc}

0801e522 <lv_mbox_close_ready_cb>:

#if LV_USE_ANIMATION
static void lv_mbox_close_ready_cb(lv_anim_t * a)
{
 801e522:	b580      	push	{r7, lr}
 801e524:	b082      	sub	sp, #8
 801e526:	af00      	add	r7, sp, #0
 801e528:	6078      	str	r0, [r7, #4]
    lv_obj_del(a->var);
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	4618      	mov	r0, r3
 801e530:	f7ea f992 	bl	8008858 <lv_obj_del>
}
 801e534:	bf00      	nop
 801e536:	3708      	adds	r7, #8
 801e538:	46bd      	mov	sp, r7
 801e53a:	bd80      	pop	{r7, pc}

0801e53c <lv_mbox_default_event_cb>:
#endif

static void lv_mbox_default_event_cb(lv_obj_t * mbox, lv_event_t event)
{
 801e53c:	b580      	push	{r7, lr}
 801e53e:	b084      	sub	sp, #16
 801e540:	af00      	add	r7, sp, #0
 801e542:	6078      	str	r0, [r7, #4]
 801e544:	460b      	mov	r3, r1
 801e546:	70fb      	strb	r3, [r7, #3]
    if(event != LV_EVENT_VALUE_CHANGED) return;
 801e548:	78fb      	ldrb	r3, [r7, #3]
 801e54a:	2b0e      	cmp	r3, #14
 801e54c:	d10e      	bne.n	801e56c <lv_mbox_default_event_cb+0x30>

    uint32_t btn_id = lv_mbox_get_active_btn(mbox);
 801e54e:	6878      	ldr	r0, [r7, #4]
 801e550:	f7ff fe2a 	bl	801e1a8 <lv_mbox_get_active_btn>
 801e554:	4603      	mov	r3, r0
 801e556:	60fb      	str	r3, [r7, #12]
    if(btn_id == LV_BTNM_BTN_NONE) return;
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e55e:	4293      	cmp	r3, r2
 801e560:	d006      	beq.n	801e570 <lv_mbox_default_event_cb+0x34>

    lv_mbox_start_auto_close(mbox, 0);
 801e562:	2100      	movs	r1, #0
 801e564:	6878      	ldr	r0, [r7, #4]
 801e566:	f7ff fd41 	bl	801dfec <lv_mbox_start_auto_close>
 801e56a:	e002      	b.n	801e572 <lv_mbox_default_event_cb+0x36>
    if(event != LV_EVENT_VALUE_CHANGED) return;
 801e56c:	bf00      	nop
 801e56e:	e000      	b.n	801e572 <lv_mbox_default_event_cb+0x36>
    if(btn_id == LV_BTNM_BTN_NONE) return;
 801e570:	bf00      	nop
}
 801e572:	3710      	adds	r7, #16
 801e574:	46bd      	mov	sp, r7
 801e576:	bd80      	pop	{r7, pc}

0801e578 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801e578:	b580      	push	{r7, lr}
 801e57a:	b082      	sub	sp, #8
 801e57c:	af00      	add	r7, sp, #0
 801e57e:	6078      	str	r0, [r7, #4]
 801e580:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 801e582:	2208      	movs	r2, #8
 801e584:	6839      	ldr	r1, [r7, #0]
 801e586:	6878      	ldr	r0, [r7, #4]
 801e588:	f00b fc14 	bl	8029db4 <memcpy>
}
 801e58c:	bf00      	nop
 801e58e:	3708      	adds	r7, #8
 801e590:	46bd      	mov	sp, r7
 801e592:	bd80      	pop	{r7, pc}

0801e594 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801e594:	b480      	push	{r7}
 801e596:	b083      	sub	sp, #12
 801e598:	af00      	add	r7, sp, #0
 801e59a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801e59c:	687b      	ldr	r3, [r7, #4]
 801e59e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e5a2:	b29a      	uxth	r2, r3
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e5aa:	b29b      	uxth	r3, r3
 801e5ac:	1ad3      	subs	r3, r2, r3
 801e5ae:	b29b      	uxth	r3, r3
 801e5b0:	3301      	adds	r3, #1
 801e5b2:	b29b      	uxth	r3, r3
 801e5b4:	b21b      	sxth	r3, r3
}
 801e5b6:	4618      	mov	r0, r3
 801e5b8:	370c      	adds	r7, #12
 801e5ba:	46bd      	mov	sp, r7
 801e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5c0:	4770      	bx	lr

0801e5c2 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801e5c2:	b480      	push	{r7}
 801e5c4:	b083      	sub	sp, #12
 801e5c6:	af00      	add	r7, sp, #0
 801e5c8:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e5d0:	b29a      	uxth	r2, r3
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e5d8:	b29b      	uxth	r3, r3
 801e5da:	1ad3      	subs	r3, r2, r3
 801e5dc:	b29b      	uxth	r3, r3
 801e5de:	3301      	adds	r3, #1
 801e5e0:	b29b      	uxth	r3, r3
 801e5e2:	b21b      	sxth	r3, r3
}
 801e5e4:	4618      	mov	r0, r3
 801e5e6:	370c      	adds	r7, #12
 801e5e8:	46bd      	mov	sp, r7
 801e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5ee:	4770      	bx	lr

0801e5f0 <lv_page_get_scrl_width>:
 * Get width of the scrollable part of a page
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t * page)
{
 801e5f0:	b580      	push	{r7, lr}
 801e5f2:	b082      	sub	sp, #8
 801e5f4:	af00      	add	r7, sp, #0
 801e5f6:	6078      	str	r0, [r7, #4]
    return lv_obj_get_width(lv_page_get_scrl(page));
 801e5f8:	6878      	ldr	r0, [r7, #4]
 801e5fa:	f000 fa4d 	bl	801ea98 <lv_page_get_scrl>
 801e5fe:	4603      	mov	r3, r0
 801e600:	4618      	mov	r0, r3
 801e602:	f7eb fb1f 	bl	8009c44 <lv_obj_get_width>
 801e606:	4603      	mov	r3, r0
}
 801e608:	4618      	mov	r0, r3
 801e60a:	3708      	adds	r7, #8
 801e60c:	46bd      	mov	sp, r7
 801e60e:	bd80      	pop	{r7, pc}

0801e610 <lv_page_get_scrl_fit_left>:
 * Get the left fit mode
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_left(const lv_obj_t * page)
{
 801e610:	b580      	push	{r7, lr}
 801e612:	b082      	sub	sp, #8
 801e614:	af00      	add	r7, sp, #0
 801e616:	6078      	str	r0, [r7, #4]
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
 801e618:	6878      	ldr	r0, [r7, #4]
 801e61a:	f000 fa3d 	bl	801ea98 <lv_page_get_scrl>
 801e61e:	4603      	mov	r3, r0
 801e620:	4618      	mov	r0, r3
 801e622:	f7fc fade 	bl	801abe2 <lv_cont_get_fit_left>
 801e626:	4603      	mov	r3, r0
}
 801e628:	4618      	mov	r0, r3
 801e62a:	3708      	adds	r7, #8
 801e62c:	46bd      	mov	sp, r7
 801e62e:	bd80      	pop	{r7, pc}

0801e630 <lv_page_get_scrl_fit_top>:
 * Get the top fit mode
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_top(const lv_obj_t * page)
{
 801e630:	b580      	push	{r7, lr}
 801e632:	b082      	sub	sp, #8
 801e634:	af00      	add	r7, sp, #0
 801e636:	6078      	str	r0, [r7, #4]
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
 801e638:	6878      	ldr	r0, [r7, #4]
 801e63a:	f000 fa2d 	bl	801ea98 <lv_page_get_scrl>
 801e63e:	4603      	mov	r3, r0
 801e640:	4618      	mov	r0, r3
 801e642:	f7fc fadf 	bl	801ac04 <lv_cont_get_fit_top>
 801e646:	4603      	mov	r3, r0
}
 801e648:	4618      	mov	r0, r3
 801e64a:	3708      	adds	r7, #8
 801e64c:	46bd      	mov	sp, r7
 801e64e:	bd80      	pop	{r7, pc}

0801e650 <lv_page_create>:
 * @param par pointer to an object, it will be the parent of the new page
 * @param copy pointer to a page object, if not NULL then the new object will be copied from it
 * @return pointer to the created page
 */
lv_obj_t * lv_page_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801e650:	b580      	push	{r7, lr}
 801e652:	b088      	sub	sp, #32
 801e654:	af02      	add	r7, sp, #8
 801e656:	6078      	str	r0, [r7, #4]
 801e658:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("page create started");

    /*Create the ancestor object*/
    lv_obj_t * new_page = lv_cont_create(par, copy);
 801e65a:	6839      	ldr	r1, [r7, #0]
 801e65c:	6878      	ldr	r0, [r7, #4]
 801e65e:	f7fc f977 	bl	801a950 <lv_cont_create>
 801e662:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_page);
 801e664:	697b      	ldr	r3, [r7, #20]
 801e666:	2b00      	cmp	r3, #0
 801e668:	d100      	bne.n	801e66c <lv_page_create+0x1c>
 801e66a:	e7fe      	b.n	801e66a <lv_page_create+0x1a>
    if(new_page == NULL) return NULL;
 801e66c:	697b      	ldr	r3, [r7, #20]
 801e66e:	2b00      	cmp	r3, #0
 801e670:	d101      	bne.n	801e676 <lv_page_create+0x26>
 801e672:	2300      	movs	r3, #0
 801e674:	e143      	b.n	801e8fe <lv_page_create+0x2ae>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_page);
 801e676:	4ba4      	ldr	r3, [pc, #656]	; (801e908 <lv_page_create+0x2b8>)
 801e678:	681b      	ldr	r3, [r3, #0]
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d105      	bne.n	801e68a <lv_page_create+0x3a>
 801e67e:	6978      	ldr	r0, [r7, #20]
 801e680:	f7eb fbb3 	bl	8009dea <lv_obj_get_signal_cb>
 801e684:	4602      	mov	r2, r0
 801e686:	4ba0      	ldr	r3, [pc, #640]	; (801e908 <lv_page_create+0x2b8>)
 801e688:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_page);
 801e68a:	4ba0      	ldr	r3, [pc, #640]	; (801e90c <lv_page_create+0x2bc>)
 801e68c:	681b      	ldr	r3, [r3, #0]
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d105      	bne.n	801e69e <lv_page_create+0x4e>
 801e692:	6978      	ldr	r0, [r7, #20]
 801e694:	f7eb fbb5 	bl	8009e02 <lv_obj_get_design_cb>
 801e698:	4602      	mov	r2, r0
 801e69a:	4b9c      	ldr	r3, [pc, #624]	; (801e90c <lv_page_create+0x2bc>)
 801e69c:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 801e69e:	2130      	movs	r1, #48	; 0x30
 801e6a0:	6978      	ldr	r0, [r7, #20]
 801e6a2:	f7eb f9ed 	bl	8009a80 <lv_obj_allocate_ext_attr>
 801e6a6:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801e6a8:	693b      	ldr	r3, [r7, #16]
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d100      	bne.n	801e6b0 <lv_page_create+0x60>
 801e6ae:	e7fe      	b.n	801e6ae <lv_page_create+0x5e>
    if(ext == NULL) return NULL;
 801e6b0:	693b      	ldr	r3, [r7, #16]
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d101      	bne.n	801e6ba <lv_page_create+0x6a>
 801e6b6:	2300      	movs	r3, #0
 801e6b8:	e121      	b.n	801e8fe <lv_page_create+0x2ae>

    ext->scrl        = NULL;
 801e6ba:	693b      	ldr	r3, [r7, #16]
 801e6bc:	2200      	movs	r2, #0
 801e6be:	605a      	str	r2, [r3, #4]
    ext->sb.hor_draw = 0;
 801e6c0:	693a      	ldr	r2, [r7, #16]
 801e6c2:	7f13      	ldrb	r3, [r2, #28]
 801e6c4:	f36f 0300 	bfc	r3, #0, #1
 801e6c8:	7713      	strb	r3, [r2, #28]
    ext->sb.ver_draw = 0;
 801e6ca:	693a      	ldr	r2, [r7, #16]
 801e6cc:	7f13      	ldrb	r3, [r2, #28]
 801e6ce:	f36f 0341 	bfc	r3, #1, #1
 801e6d2:	7713      	strb	r3, [r2, #28]
    ext->sb.style    = &lv_style_pretty;
 801e6d4:	693b      	ldr	r3, [r7, #16]
 801e6d6:	4a8e      	ldr	r2, [pc, #568]	; (801e910 <lv_page_create+0x2c0>)
 801e6d8:	609a      	str	r2, [r3, #8]
    ext->sb.mode     = LV_SB_MODE_AUTO;
 801e6da:	693a      	ldr	r2, [r7, #16]
 801e6dc:	7f13      	ldrb	r3, [r2, #28]
 801e6de:	2103      	movs	r1, #3
 801e6e0:	f361 0384 	bfi	r3, r1, #2, #3
 801e6e4:	7713      	strb	r3, [r2, #28]
#if LV_USE_ANIMATION
    ext->edge_flash.enabled   = 0;
 801e6e6:	693a      	ldr	r2, [r7, #16]
 801e6e8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801e6ec:	f36f 0300 	bfc	r3, #0, #1
 801e6f0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
 801e6f4:	693a      	ldr	r2, [r7, #16]
 801e6f6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801e6fa:	f36f 0382 	bfc	r3, #2, #1
 801e6fe:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.top_ip    = 0;
 801e702:	693a      	ldr	r2, [r7, #16]
 801e704:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801e708:	f36f 0341 	bfc	r3, #1, #1
 801e70c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.left_ip   = 0;
 801e710:	693a      	ldr	r2, [r7, #16]
 801e712:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801e716:	f36f 1304 	bfc	r3, #4, #1
 801e71a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.right_ip  = 0;
 801e71e:	693a      	ldr	r2, [r7, #16]
 801e720:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801e724:	f36f 03c3 	bfc	r3, #3, #1
 801e728:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.state     = 0;
 801e72c:	693b      	ldr	r3, [r7, #16]
 801e72e:	2200      	movs	r2, #0
 801e730:	841a      	strh	r2, [r3, #32]
    ext->edge_flash.style     = &lv_style_plain_color;
 801e732:	693b      	ldr	r3, [r7, #16]
 801e734:	4a77      	ldr	r2, [pc, #476]	; (801e914 <lv_page_create+0x2c4>)
 801e736:	625a      	str	r2, [r3, #36]	; 0x24
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 801e738:	693b      	ldr	r3, [r7, #16]
 801e73a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801e73e:	859a      	strh	r2, [r3, #44]	; 0x2c
#endif
    ext->scroll_prop    = 0;
 801e740:	693a      	ldr	r2, [r7, #16]
 801e742:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801e746:	f36f 0300 	bfc	r3, #0, #1
 801e74a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    ext->scroll_prop_ip = 0;
 801e74e:	693a      	ldr	r2, [r7, #16]
 801e750:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801e754:	f36f 0341 	bfc	r3, #1, #1
 801e758:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e

    /*Init the new page object*/
    if(copy == NULL) {
 801e75c:	683b      	ldr	r3, [r7, #0]
 801e75e:	2b00      	cmp	r3, #0
 801e760:	f040 8084 	bne.w	801e86c <lv_page_create+0x21c>
        ext->scrl = lv_cont_create(new_page, NULL);
 801e764:	2100      	movs	r1, #0
 801e766:	6978      	ldr	r0, [r7, #20]
 801e768:	f7fc f8f2 	bl	801a950 <lv_cont_create>
 801e76c:	4602      	mov	r2, r0
 801e76e:	693b      	ldr	r3, [r7, #16]
 801e770:	605a      	str	r2, [r3, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 801e772:	693b      	ldr	r3, [r7, #16]
 801e774:	685b      	ldr	r3, [r3, #4]
 801e776:	4968      	ldr	r1, [pc, #416]	; (801e918 <lv_page_create+0x2c8>)
 801e778:	4618      	mov	r0, r3
 801e77a:	f7eb f965 	bl	8009a48 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(ext->scrl, lv_scrl_design);
 801e77e:	693b      	ldr	r3, [r7, #16]
 801e780:	685b      	ldr	r3, [r3, #4]
 801e782:	4966      	ldr	r1, [pc, #408]	; (801e91c <lv_page_create+0x2cc>)
 801e784:	4618      	mov	r0, r3
 801e786:	f7eb f96d 	bl	8009a64 <lv_obj_set_design_cb>
        lv_obj_set_drag(ext->scrl, true);
 801e78a:	693b      	ldr	r3, [r7, #16]
 801e78c:	685b      	ldr	r3, [r3, #4]
 801e78e:	2101      	movs	r1, #1
 801e790:	4618      	mov	r0, r3
 801e792:	f7eb f84c 	bl	800982e <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 801e796:	693b      	ldr	r3, [r7, #16]
 801e798:	685b      	ldr	r3, [r3, #4]
 801e79a:	2101      	movs	r1, #1
 801e79c:	4618      	mov	r0, r3
 801e79e:	f7eb f85f 	bl	8009860 <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 801e7a2:	693b      	ldr	r3, [r7, #16]
 801e7a4:	685b      	ldr	r3, [r3, #4]
 801e7a6:	2112      	movs	r1, #18
 801e7a8:	4618      	mov	r0, r3
 801e7aa:	f7eb f881 	bl	80098b0 <lv_obj_set_protect>
        lv_cont_set_fit4(ext->scrl, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL);
 801e7ae:	693b      	ldr	r3, [r7, #16]
 801e7b0:	6858      	ldr	r0, [r3, #4]
 801e7b2:	2303      	movs	r3, #3
 801e7b4:	9300      	str	r3, [sp, #0]
 801e7b6:	2303      	movs	r3, #3
 801e7b8:	2203      	movs	r2, #3
 801e7ba:	2103      	movs	r1, #3
 801e7bc:	f7fc f999 	bl	801aaf2 <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
 801e7c0:	693b      	ldr	r3, [r7, #16]
 801e7c2:	685b      	ldr	r3, [r3, #4]
 801e7c4:	4956      	ldr	r1, [pc, #344]	; (801e920 <lv_page_create+0x2d0>)
 801e7c6:	4618      	mov	r0, r3
 801e7c8:	f7eb f89f 	bl	800990a <lv_obj_set_event_cb>
                                                              object by default for convenience */

        /* Add the signal function only if 'scrolling' is created
         * because everything has to be ready before any signal is received*/
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 801e7cc:	4955      	ldr	r1, [pc, #340]	; (801e924 <lv_page_create+0x2d4>)
 801e7ce:	6978      	ldr	r0, [r7, #20]
 801e7d0:	f7eb f93a 	bl	8009a48 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 801e7d4:	4954      	ldr	r1, [pc, #336]	; (801e928 <lv_page_create+0x2d8>)
 801e7d6:	6978      	ldr	r0, [r7, #20]
 801e7d8:	f7eb f944 	bl	8009a64 <lv_obj_set_design_cb>

        lv_page_set_sb_mode(new_page, ext->sb.mode);
 801e7dc:	693b      	ldr	r3, [r7, #16]
 801e7de:	7f1b      	ldrb	r3, [r3, #28]
 801e7e0:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801e7e4:	b2db      	uxtb	r3, r3
 801e7e6:	4619      	mov	r1, r3
 801e7e8:	6978      	ldr	r0, [r7, #20]
 801e7ea:	f000 f8a3 	bl	801e934 <lv_page_set_sb_mode>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801e7ee:	f003 f997 	bl	8021b20 <lv_theme_get_current>
 801e7f2:	60b8      	str	r0, [r7, #8]
        if(th) {
 801e7f4:	68bb      	ldr	r3, [r7, #8]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d028      	beq.n	801e84c <lv_page_create+0x1fc>
            if(par == NULL) { /*Different styles if it is screen*/
 801e7fa:	687b      	ldr	r3, [r7, #4]
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d10c      	bne.n	801e81a <lv_page_create+0x1ca>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.bg);
 801e800:	68bb      	ldr	r3, [r7, #8]
 801e802:	685b      	ldr	r3, [r3, #4]
 801e804:	461a      	mov	r2, r3
 801e806:	2100      	movs	r1, #0
 801e808:	6978      	ldr	r0, [r7, #20]
 801e80a:	f000 f8f3 	bl	801e9f4 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 801e80e:	4a47      	ldr	r2, [pc, #284]	; (801e92c <lv_page_create+0x2dc>)
 801e810:	2101      	movs	r1, #1
 801e812:	6978      	ldr	r0, [r7, #20]
 801e814:	f000 f8ee 	bl	801e9f4 <lv_page_set_style>
 801e818:	e00f      	b.n	801e83a <lv_page_create+0x1ea>
            } else {
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.page.bg);
 801e81a:	68bb      	ldr	r3, [r7, #8]
 801e81c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801e820:	461a      	mov	r2, r3
 801e822:	2100      	movs	r1, #0
 801e824:	6978      	ldr	r0, [r7, #20]
 801e826:	f000 f8e5 	bl	801e9f4 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 801e82a:	68bb      	ldr	r3, [r7, #8]
 801e82c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801e830:	461a      	mov	r2, r3
 801e832:	2101      	movs	r1, #1
 801e834:	6978      	ldr	r0, [r7, #20]
 801e836:	f000 f8dd 	bl	801e9f4 <lv_page_set_style>
            }
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->style.page.sb);
 801e83a:	68bb      	ldr	r3, [r7, #8]
 801e83c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801e840:	461a      	mov	r2, r3
 801e842:	2102      	movs	r1, #2
 801e844:	6978      	ldr	r0, [r7, #20]
 801e846:	f000 f8d5 	bl	801e9f4 <lv_page_set_style>
 801e84a:	e054      	b.n	801e8f6 <lv_page_create+0x2a6>
        } else {
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 801e84c:	4a38      	ldr	r2, [pc, #224]	; (801e930 <lv_page_create+0x2e0>)
 801e84e:	2100      	movs	r1, #0
 801e850:	6978      	ldr	r0, [r7, #20]
 801e852:	f000 f8cf 	bl	801e9f4 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 801e856:	4a2e      	ldr	r2, [pc, #184]	; (801e910 <lv_page_create+0x2c0>)
 801e858:	2101      	movs	r1, #1
 801e85a:	6978      	ldr	r0, [r7, #20]
 801e85c:	f000 f8ca 	bl	801e9f4 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 801e860:	4a33      	ldr	r2, [pc, #204]	; (801e930 <lv_page_create+0x2e0>)
 801e862:	2102      	movs	r1, #2
 801e864:	6978      	ldr	r0, [r7, #20]
 801e866:	f000 f8c5 	bl	801e9f4 <lv_page_set_style>
 801e86a:	e044      	b.n	801e8f6 <lv_page_create+0x2a6>
        }

    } else {
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801e86c:	6838      	ldr	r0, [r7, #0]
 801e86e:	f7eb fad4 	bl	8009e1a <lv_obj_get_ext_attr>
 801e872:	60f8      	str	r0, [r7, #12]
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 801e874:	68fb      	ldr	r3, [r7, #12]
 801e876:	685b      	ldr	r3, [r3, #4]
 801e878:	4619      	mov	r1, r3
 801e87a:	6978      	ldr	r0, [r7, #20]
 801e87c:	f7fc f868 	bl	801a950 <lv_cont_create>
 801e880:	4602      	mov	r2, r0
 801e882:	693b      	ldr	r3, [r7, #16]
 801e884:	605a      	str	r2, [r3, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 801e886:	693b      	ldr	r3, [r7, #16]
 801e888:	685b      	ldr	r3, [r3, #4]
 801e88a:	4923      	ldr	r1, [pc, #140]	; (801e918 <lv_page_create+0x2c8>)
 801e88c:	4618      	mov	r0, r3
 801e88e:	f7eb f8db 	bl	8009a48 <lv_obj_set_signal_cb>

        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 801e892:	68fb      	ldr	r3, [r7, #12]
 801e894:	7f1b      	ldrb	r3, [r3, #28]
 801e896:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801e89a:	b2db      	uxtb	r3, r3
 801e89c:	4619      	mov	r1, r3
 801e89e:	6978      	ldr	r0, [r7, #20]
 801e8a0:	f000 f848 	bl	801e934 <lv_page_set_sb_mode>

        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 801e8a4:	2100      	movs	r1, #0
 801e8a6:	6838      	ldr	r0, [r7, #0]
 801e8a8:	f000 f904 	bl	801eab4 <lv_page_get_style>
 801e8ac:	4603      	mov	r3, r0
 801e8ae:	461a      	mov	r2, r3
 801e8b0:	2100      	movs	r1, #0
 801e8b2:	6978      	ldr	r0, [r7, #20]
 801e8b4:	f000 f89e 	bl	801e9f4 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 801e8b8:	2101      	movs	r1, #1
 801e8ba:	6838      	ldr	r0, [r7, #0]
 801e8bc:	f000 f8fa 	bl	801eab4 <lv_page_get_style>
 801e8c0:	4603      	mov	r3, r0
 801e8c2:	461a      	mov	r2, r3
 801e8c4:	2101      	movs	r1, #1
 801e8c6:	6978      	ldr	r0, [r7, #20]
 801e8c8:	f000 f894 	bl	801e9f4 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 801e8cc:	2102      	movs	r1, #2
 801e8ce:	6838      	ldr	r0, [r7, #0]
 801e8d0:	f000 f8f0 	bl	801eab4 <lv_page_get_style>
 801e8d4:	4603      	mov	r3, r0
 801e8d6:	461a      	mov	r2, r3
 801e8d8:	2102      	movs	r1, #2
 801e8da:	6978      	ldr	r0, [r7, #20]
 801e8dc:	f000 f88a 	bl	801e9f4 <lv_page_set_style>

        /* Add the signal function only if 'scrolling' is created
         * because everything has to be ready before any signal is received*/
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 801e8e0:	4910      	ldr	r1, [pc, #64]	; (801e924 <lv_page_create+0x2d4>)
 801e8e2:	6978      	ldr	r0, [r7, #20]
 801e8e4:	f7eb f8b0 	bl	8009a48 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 801e8e8:	490f      	ldr	r1, [pc, #60]	; (801e928 <lv_page_create+0x2d8>)
 801e8ea:	6978      	ldr	r0, [r7, #20]
 801e8ec:	f7eb f8ba 	bl	8009a64 <lv_obj_set_design_cb>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_page);
 801e8f0:	6978      	ldr	r0, [r7, #20]
 801e8f2:	f7ea ff74 	bl	80097de <lv_obj_refresh_style>
    }

    lv_page_sb_refresh(new_page);
 801e8f6:	6978      	ldr	r0, [r7, #20]
 801e8f8:	f001 fa60 	bl	801fdbc <lv_page_sb_refresh>

    LV_LOG_INFO("page created");

    return new_page;
 801e8fc:	697b      	ldr	r3, [r7, #20]
}
 801e8fe:	4618      	mov	r0, r3
 801e900:	3718      	adds	r7, #24
 801e902:	46bd      	mov	sp, r7
 801e904:	bd80      	pop	{r7, pc}
 801e906:	bf00      	nop
 801e908:	200177ec 	.word	0x200177ec
 801e90c:	200177e8 	.word	0x200177e8
 801e910:	2001b920 	.word	0x2001b920
 801e914:	2001bb00 	.word	0x2001bb00
 801e918:	0801f62d 	.word	0x0801f62d
 801e91c:	0801f189 	.word	0x0801f189
 801e920:	0801fd61 	.word	0x0801fd61
 801e924:	0801f261 	.word	0x0801f261
 801e928:	0801ec9d 	.word	0x0801ec9d
 801e92c:	2001b86c 	.word	0x2001b86c
 801e930:	2001b830 	.word	0x2001b830

0801e934 <lv_page_set_sb_mode>:
 * Set the scroll bar mode on a page
 * @param page pointer to a page object
 * @param sb_mode the new mode from 'lv_page_sb.mode_t' enum
 */
void lv_page_set_sb_mode(lv_obj_t * page, lv_sb_mode_t sb_mode)
{
 801e934:	b580      	push	{r7, lr}
 801e936:	b084      	sub	sp, #16
 801e938:	af00      	add	r7, sp, #0
 801e93a:	6078      	str	r0, [r7, #4]
 801e93c:	460b      	mov	r3, r1
 801e93e:	70fb      	strb	r3, [r7, #3]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801e940:	6878      	ldr	r0, [r7, #4]
 801e942:	f7eb fa6a 	bl	8009e1a <lv_obj_get_ext_attr>
 801e946:	60f8      	str	r0, [r7, #12]
    if(ext->sb.mode == sb_mode) return;
 801e948:	68fb      	ldr	r3, [r7, #12]
 801e94a:	7f1b      	ldrb	r3, [r3, #28]
 801e94c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801e950:	b2db      	uxtb	r3, r3
 801e952:	461a      	mov	r2, r3
 801e954:	78fb      	ldrb	r3, [r7, #3]
 801e956:	429a      	cmp	r2, r3
 801e958:	d048      	beq.n	801e9ec <lv_page_set_sb_mode+0xb8>

    if(sb_mode == LV_SB_MODE_HIDE)
 801e95a:	78fb      	ldrb	r3, [r7, #3]
 801e95c:	2b04      	cmp	r3, #4
 801e95e:	d10d      	bne.n	801e97c <lv_page_set_sb_mode+0x48>
        ext->sb.mode |= LV_SB_MODE_HIDE; /*Set the hidden flag*/
 801e960:	68fb      	ldr	r3, [r7, #12]
 801e962:	7f1b      	ldrb	r3, [r3, #28]
 801e964:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801e968:	b2db      	uxtb	r3, r3
 801e96a:	f043 0304 	orr.w	r3, r3, #4
 801e96e:	b2d9      	uxtb	r1, r3
 801e970:	68fa      	ldr	r2, [r7, #12]
 801e972:	7f13      	ldrb	r3, [r2, #28]
 801e974:	f361 0384 	bfi	r3, r1, #2, #3
 801e978:	7713      	strb	r3, [r2, #28]
 801e97a:	e026      	b.n	801e9ca <lv_page_set_sb_mode+0x96>
    else if(sb_mode == LV_SB_MODE_UNHIDE)
 801e97c:	78fb      	ldrb	r3, [r7, #3]
 801e97e:	2b05      	cmp	r3, #5
 801e980:	d10d      	bne.n	801e99e <lv_page_set_sb_mode+0x6a>
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 801e982:	68fb      	ldr	r3, [r7, #12]
 801e984:	7f1b      	ldrb	r3, [r3, #28]
 801e986:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801e98a:	b2db      	uxtb	r3, r3
 801e98c:	f003 0303 	and.w	r3, r3, #3
 801e990:	b2d9      	uxtb	r1, r3
 801e992:	68fa      	ldr	r2, [r7, #12]
 801e994:	7f13      	ldrb	r3, [r2, #28]
 801e996:	f361 0384 	bfi	r3, r1, #2, #3
 801e99a:	7713      	strb	r3, [r2, #28]
 801e99c:	e015      	b.n	801e9ca <lv_page_set_sb_mode+0x96>
    else {
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801e99e:	68fb      	ldr	r3, [r7, #12]
 801e9a0:	7f1b      	ldrb	r3, [r3, #28]
 801e9a2:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801e9a6:	b2db      	uxtb	r3, r3
 801e9a8:	f003 0304 	and.w	r3, r3, #4
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	d003      	beq.n	801e9b8 <lv_page_set_sb_mode+0x84>
 801e9b0:	78fb      	ldrb	r3, [r7, #3]
 801e9b2:	f043 0304 	orr.w	r3, r3, #4
 801e9b6:	70fb      	strb	r3, [r7, #3]
        ext->sb.mode = sb_mode;
 801e9b8:	78fb      	ldrb	r3, [r7, #3]
 801e9ba:	f003 0307 	and.w	r3, r3, #7
 801e9be:	b2d9      	uxtb	r1, r3
 801e9c0:	68fa      	ldr	r2, [r7, #12]
 801e9c2:	7f13      	ldrb	r3, [r2, #28]
 801e9c4:	f361 0384 	bfi	r3, r1, #2, #3
 801e9c8:	7713      	strb	r3, [r2, #28]
    }

    ext->sb.hor_draw = 0;
 801e9ca:	68fa      	ldr	r2, [r7, #12]
 801e9cc:	7f13      	ldrb	r3, [r2, #28]
 801e9ce:	f36f 0300 	bfc	r3, #0, #1
 801e9d2:	7713      	strb	r3, [r2, #28]
    ext->sb.ver_draw = 0;
 801e9d4:	68fa      	ldr	r2, [r7, #12]
 801e9d6:	7f13      	ldrb	r3, [r2, #28]
 801e9d8:	f36f 0341 	bfc	r3, #1, #1
 801e9dc:	7713      	strb	r3, [r2, #28]

    lv_page_sb_refresh(page);
 801e9de:	6878      	ldr	r0, [r7, #4]
 801e9e0:	f001 f9ec 	bl	801fdbc <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 801e9e4:	6878      	ldr	r0, [r7, #4]
 801e9e6:	f7e9 ffec 	bl	80089c2 <lv_obj_invalidate>
 801e9ea:	e000      	b.n	801e9ee <lv_page_set_sb_mode+0xba>
    if(ext->sb.mode == sb_mode) return;
 801e9ec:	bf00      	nop
}
 801e9ee:	3710      	adds	r7, #16
 801e9f0:	46bd      	mov	sp, r7
 801e9f2:	bd80      	pop	{r7, pc}

0801e9f4 <lv_page_set_style>:
 * @param page pointer to a page object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_page_set_style(lv_obj_t * page, lv_page_style_t type, const lv_style_t * style)
{
 801e9f4:	b580      	push	{r7, lr}
 801e9f6:	b086      	sub	sp, #24
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	60f8      	str	r0, [r7, #12]
 801e9fc:	460b      	mov	r3, r1
 801e9fe:	607a      	str	r2, [r7, #4]
 801ea00:	72fb      	strb	r3, [r7, #11]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801ea02:	68f8      	ldr	r0, [r7, #12]
 801ea04:	f7eb fa09 	bl	8009e1a <lv_obj_get_ext_attr>
 801ea08:	6178      	str	r0, [r7, #20]

    switch(type) {
 801ea0a:	7afb      	ldrb	r3, [r7, #11]
 801ea0c:	2b03      	cmp	r3, #3
 801ea0e:	d83e      	bhi.n	801ea8e <lv_page_set_style+0x9a>
 801ea10:	a201      	add	r2, pc, #4	; (adr r2, 801ea18 <lv_page_set_style+0x24>)
 801ea12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea16:	bf00      	nop
 801ea18:	0801ea29 	.word	0x0801ea29
 801ea1c:	0801ea33 	.word	0x0801ea33
 801ea20:	0801ea41 	.word	0x0801ea41
 801ea24:	0801ea87 	.word	0x0801ea87
        case LV_PAGE_STYLE_BG: lv_obj_set_style(page, style); break;
 801ea28:	6879      	ldr	r1, [r7, #4]
 801ea2a:	68f8      	ldr	r0, [r7, #12]
 801ea2c:	f7ea fec5 	bl	80097ba <lv_obj_set_style>
 801ea30:	e02d      	b.n	801ea8e <lv_page_set_style+0x9a>
        case LV_PAGE_STYLE_SCRL: lv_obj_set_style(ext->scrl, style); break;
 801ea32:	697b      	ldr	r3, [r7, #20]
 801ea34:	685b      	ldr	r3, [r3, #4]
 801ea36:	6879      	ldr	r1, [r7, #4]
 801ea38:	4618      	mov	r0, r3
 801ea3a:	f7ea febe 	bl	80097ba <lv_obj_set_style>
 801ea3e:	e026      	b.n	801ea8e <lv_page_set_style+0x9a>
        case LV_PAGE_STYLE_SB:
            ext->sb.style = style;
 801ea40:	697b      	ldr	r3, [r7, #20]
 801ea42:	687a      	ldr	r2, [r7, #4]
 801ea44:	609a      	str	r2, [r3, #8]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801ea46:	697b      	ldr	r3, [r7, #20]
 801ea48:	f103 020c 	add.w	r2, r3, #12
 801ea4c:	697b      	ldr	r3, [r7, #20]
 801ea4e:	689b      	ldr	r3, [r3, #8]
 801ea50:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801ea54:	4619      	mov	r1, r3
 801ea56:	4610      	mov	r0, r2
 801ea58:	f7f6 ff05 	bl	8015866 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 801ea5c:	697b      	ldr	r3, [r7, #20]
 801ea5e:	f103 0214 	add.w	r2, r3, #20
 801ea62:	697b      	ldr	r3, [r7, #20]
 801ea64:	689b      	ldr	r3, [r3, #8]
 801ea66:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801ea6a:	4619      	mov	r1, r3
 801ea6c:	4610      	mov	r0, r2
 801ea6e:	f7f6 fee2 	bl	8015836 <lv_area_set_width>
            lv_page_sb_refresh(page);
 801ea72:	68f8      	ldr	r0, [r7, #12]
 801ea74:	f001 f9a2 	bl	801fdbc <lv_page_sb_refresh>
            lv_obj_refresh_ext_draw_pad(page);
 801ea78:	68f8      	ldr	r0, [r7, #12]
 801ea7a:	f7eb f817 	bl	8009aac <lv_obj_refresh_ext_draw_pad>
            lv_obj_invalidate(page);
 801ea7e:	68f8      	ldr	r0, [r7, #12]
 801ea80:	f7e9 ff9f 	bl	80089c2 <lv_obj_invalidate>
            break;
 801ea84:	e003      	b.n	801ea8e <lv_page_set_style+0x9a>
#if LV_USE_ANIMATION
        case LV_PAGE_STYLE_EDGE_FLASH: ext->edge_flash.style = style; break;
 801ea86:	697b      	ldr	r3, [r7, #20]
 801ea88:	687a      	ldr	r2, [r7, #4]
 801ea8a:	625a      	str	r2, [r3, #36]	; 0x24
 801ea8c:	bf00      	nop
#endif
    }
}
 801ea8e:	bf00      	nop
 801ea90:	3718      	adds	r7, #24
 801ea92:	46bd      	mov	sp, r7
 801ea94:	bd80      	pop	{r7, pc}
 801ea96:	bf00      	nop

0801ea98 <lv_page_get_scrl>:
 * Get the scrollable object of a page
 * @param page pointer to a page object
 * @return pointer to a container which is the scrollable part of the page
 */
lv_obj_t * lv_page_get_scrl(const lv_obj_t * page)
{
 801ea98:	b580      	push	{r7, lr}
 801ea9a:	b084      	sub	sp, #16
 801ea9c:	af00      	add	r7, sp, #0
 801ea9e:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801eaa0:	6878      	ldr	r0, [r7, #4]
 801eaa2:	f7eb f9ba 	bl	8009e1a <lv_obj_get_ext_attr>
 801eaa6:	60f8      	str	r0, [r7, #12]

    return ext->scrl;
 801eaa8:	68fb      	ldr	r3, [r7, #12]
 801eaaa:	685b      	ldr	r3, [r3, #4]
}
 801eaac:	4618      	mov	r0, r3
 801eaae:	3710      	adds	r7, #16
 801eab0:	46bd      	mov	sp, r7
 801eab2:	bd80      	pop	{r7, pc}

0801eab4 <lv_page_get_style>:
 * @param page pointer to page object
 * @param type which style should be get
 * @return style pointer to a style
 *  */
const lv_style_t * lv_page_get_style(const lv_obj_t * page, lv_page_style_t type)
{
 801eab4:	b580      	push	{r7, lr}
 801eab6:	b084      	sub	sp, #16
 801eab8:	af00      	add	r7, sp, #0
 801eaba:	6078      	str	r0, [r7, #4]
 801eabc:	460b      	mov	r3, r1
 801eabe:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801eac0:	2300      	movs	r3, #0
 801eac2:	60fb      	str	r3, [r7, #12]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801eac4:	6878      	ldr	r0, [r7, #4]
 801eac6:	f7eb f9a8 	bl	8009e1a <lv_obj_get_ext_attr>
 801eaca:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801eacc:	78fb      	ldrb	r3, [r7, #3]
 801eace:	2b03      	cmp	r3, #3
 801ead0:	d81e      	bhi.n	801eb10 <lv_page_get_style+0x5c>
 801ead2:	a201      	add	r2, pc, #4	; (adr r2, 801ead8 <lv_page_get_style+0x24>)
 801ead4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ead8:	0801eae9 	.word	0x0801eae9
 801eadc:	0801eaf3 	.word	0x0801eaf3
 801eae0:	0801eb01 	.word	0x0801eb01
 801eae4:	0801eb09 	.word	0x0801eb09
        case LV_PAGE_STYLE_BG: style = lv_obj_get_style(page); break;
 801eae8:	6878      	ldr	r0, [r7, #4]
 801eaea:	f7eb f8db 	bl	8009ca4 <lv_obj_get_style>
 801eaee:	60f8      	str	r0, [r7, #12]
 801eaf0:	e011      	b.n	801eb16 <lv_page_get_style+0x62>
        case LV_PAGE_STYLE_SCRL: style = lv_obj_get_style(ext->scrl); break;
 801eaf2:	68bb      	ldr	r3, [r7, #8]
 801eaf4:	685b      	ldr	r3, [r3, #4]
 801eaf6:	4618      	mov	r0, r3
 801eaf8:	f7eb f8d4 	bl	8009ca4 <lv_obj_get_style>
 801eafc:	60f8      	str	r0, [r7, #12]
 801eafe:	e00a      	b.n	801eb16 <lv_page_get_style+0x62>
        case LV_PAGE_STYLE_SB: style = ext->sb.style; break;
 801eb00:	68bb      	ldr	r3, [r7, #8]
 801eb02:	689b      	ldr	r3, [r3, #8]
 801eb04:	60fb      	str	r3, [r7, #12]
 801eb06:	e006      	b.n	801eb16 <lv_page_get_style+0x62>
#if LV_USE_ANIMATION
        case LV_PAGE_STYLE_EDGE_FLASH: style = ext->edge_flash.style; break;
 801eb08:	68bb      	ldr	r3, [r7, #8]
 801eb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb0c:	60fb      	str	r3, [r7, #12]
 801eb0e:	e002      	b.n	801eb16 <lv_page_get_style+0x62>
#endif
        default: style = NULL; break;
 801eb10:	2300      	movs	r3, #0
 801eb12:	60fb      	str	r3, [r7, #12]
 801eb14:	bf00      	nop
    }

    return style;
 801eb16:	68fb      	ldr	r3, [r7, #12]
}
 801eb18:	4618      	mov	r0, r3
 801eb1a:	3710      	adds	r7, #16
 801eb1c:	46bd      	mov	sp, r7
 801eb1e:	bd80      	pop	{r7, pc}

0801eb20 <lv_page_scroll_hor>:
 * Scroll the page horizontally
 * @param page pointer to a page object
 * @param dist the distance to scroll (< 0: scroll right; > 0 scroll left)
 */
void lv_page_scroll_hor(lv_obj_t * page, lv_coord_t dist)
{
 801eb20:	b580      	push	{r7, lr}
 801eb22:	b08e      	sub	sp, #56	; 0x38
 801eb24:	af00      	add	r7, sp, #0
 801eb26:	6078      	str	r0, [r7, #4]
 801eb28:	460b      	mov	r3, r1
 801eb2a:	807b      	strh	r3, [r7, #2]
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801eb2c:	6878      	ldr	r0, [r7, #4]
 801eb2e:	f7ff ffb3 	bl	801ea98 <lv_page_get_scrl>
 801eb32:	6378      	str	r0, [r7, #52]	; 0x34

#if LV_USE_ANIMATION
    lv_anim_t a;
    a.var            = scrl;
 801eb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb36:	60fb      	str	r3, [r7, #12]
    a.start          = lv_obj_get_x(scrl);
 801eb38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801eb3a:	f7eb f851 	bl	8009be0 <lv_obj_get_x>
 801eb3e:	4603      	mov	r3, r0
 801eb40:	61fb      	str	r3, [r7, #28]
    a.end            = a.start + dist;
 801eb42:	69fa      	ldr	r2, [r7, #28]
 801eb44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eb48:	4413      	add	r3, r2
 801eb4a:	623b      	str	r3, [r7, #32]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 801eb4c:	4b11      	ldr	r3, [pc, #68]	; (801eb94 <lv_page_scroll_hor+0x74>)
 801eb4e:	613b      	str	r3, [r7, #16]
    a.path_cb        = lv_anim_path_linear;
 801eb50:	4b11      	ldr	r3, [pc, #68]	; (801eb98 <lv_page_scroll_hor+0x78>)
 801eb52:	617b      	str	r3, [r7, #20]
    a.ready_cb       = NULL;
 801eb54:	2300      	movs	r3, #0
 801eb56:	61bb      	str	r3, [r7, #24]
    a.act_time       = 0;
 801eb58:	2300      	movs	r3, #0
 801eb5a:	84fb      	strh	r3, [r7, #38]	; 0x26
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 801eb5c:	23c8      	movs	r3, #200	; 0xc8
 801eb5e:	84bb      	strh	r3, [r7, #36]	; 0x24
    a.playback       = 0;
 801eb60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801eb64:	f36f 0300 	bfc	r3, #0, #1
 801eb68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.playback_pause = 0;
 801eb6c:	2300      	movs	r3, #0
 801eb6e:	853b      	strh	r3, [r7, #40]	; 0x28
    a.repeat         = 0;
 801eb70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801eb74:	f36f 0341 	bfc	r3, #1, #1
 801eb78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.repeat_pause   = 0;
 801eb7c:	2300      	movs	r3, #0
 801eb7e:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_anim_create(&a);
 801eb80:	f107 030c 	add.w	r3, r7, #12
 801eb84:	4618      	mov	r0, r3
 801eb86:	f7f6 fc13 	bl	80153b0 <lv_anim_create>
#else
    lv_obj_set_x(scrl, lv_obj_get_x(scrl) + dist);
#endif
}
 801eb8a:	bf00      	nop
 801eb8c:	3738      	adds	r7, #56	; 0x38
 801eb8e:	46bd      	mov	sp, r7
 801eb90:	bd80      	pop	{r7, pc}
 801eb92:	bf00      	nop
 801eb94:	08008cd7 	.word	0x08008cd7
 801eb98:	08015501 	.word	0x08015501

0801eb9c <lv_page_scroll_ver>:
 * Scroll the page vertically
 * @param page pointer to a page object
 * @param dist the distance to scroll (< 0: scroll down; > 0 scroll up)
 */
void lv_page_scroll_ver(lv_obj_t * page, lv_coord_t dist)
{
 801eb9c:	b580      	push	{r7, lr}
 801eb9e:	b08e      	sub	sp, #56	; 0x38
 801eba0:	af00      	add	r7, sp, #0
 801eba2:	6078      	str	r0, [r7, #4]
 801eba4:	460b      	mov	r3, r1
 801eba6:	807b      	strh	r3, [r7, #2]
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801eba8:	6878      	ldr	r0, [r7, #4]
 801ebaa:	f7ff ff75 	bl	801ea98 <lv_page_get_scrl>
 801ebae:	6378      	str	r0, [r7, #52]	; 0x34

#if LV_USE_ANIMATION
    lv_anim_t a;
    a.var            = scrl;
 801ebb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ebb2:	60fb      	str	r3, [r7, #12]
    a.start          = lv_obj_get_y(scrl);
 801ebb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ebb6:	f7eb f82c 	bl	8009c12 <lv_obj_get_y>
 801ebba:	4603      	mov	r3, r0
 801ebbc:	61fb      	str	r3, [r7, #28]
    a.end            = a.start + dist;
 801ebbe:	69fa      	ldr	r2, [r7, #28]
 801ebc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ebc4:	4413      	add	r3, r2
 801ebc6:	623b      	str	r3, [r7, #32]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 801ebc8:	4b11      	ldr	r3, [pc, #68]	; (801ec10 <lv_page_scroll_ver+0x74>)
 801ebca:	613b      	str	r3, [r7, #16]
    a.path_cb        = lv_anim_path_linear;
 801ebcc:	4b11      	ldr	r3, [pc, #68]	; (801ec14 <lv_page_scroll_ver+0x78>)
 801ebce:	617b      	str	r3, [r7, #20]
    a.ready_cb       = NULL;
 801ebd0:	2300      	movs	r3, #0
 801ebd2:	61bb      	str	r3, [r7, #24]
    a.act_time       = 0;
 801ebd4:	2300      	movs	r3, #0
 801ebd6:	84fb      	strh	r3, [r7, #38]	; 0x26
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 801ebd8:	23c8      	movs	r3, #200	; 0xc8
 801ebda:	84bb      	strh	r3, [r7, #36]	; 0x24
    a.playback       = 0;
 801ebdc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801ebe0:	f36f 0300 	bfc	r3, #0, #1
 801ebe4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.playback_pause = 0;
 801ebe8:	2300      	movs	r3, #0
 801ebea:	853b      	strh	r3, [r7, #40]	; 0x28
    a.repeat         = 0;
 801ebec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801ebf0:	f36f 0341 	bfc	r3, #1, #1
 801ebf4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.repeat_pause   = 0;
 801ebf8:	2300      	movs	r3, #0
 801ebfa:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_anim_create(&a);
 801ebfc:	f107 030c 	add.w	r3, r7, #12
 801ec00:	4618      	mov	r0, r3
 801ec02:	f7f6 fbd5 	bl	80153b0 <lv_anim_create>
#else
    lv_obj_set_y(scrl, lv_obj_get_y(scrl) + dist);
#endif
}
 801ec06:	bf00      	nop
 801ec08:	3738      	adds	r7, #56	; 0x38
 801ec0a:	46bd      	mov	sp, r7
 801ec0c:	bd80      	pop	{r7, pc}
 801ec0e:	bf00      	nop
 801ec10:	08008d01 	.word	0x08008d01
 801ec14:	08015501 	.word	0x08015501

0801ec18 <lv_page_start_edge_flash>:
 * Not intended to use directly by the user but by other object types internally.
 * Start an edge flash animation. Exactly one `ext->edge_flash.xxx_ip` should be set
 * @param page
 */
void lv_page_start_edge_flash(lv_obj_t * page)
{
 801ec18:	b580      	push	{r7, lr}
 801ec1a:	b08e      	sub	sp, #56	; 0x38
 801ec1c:	af00      	add	r7, sp, #0
 801ec1e:	6078      	str	r0, [r7, #4]
#if LV_USE_ANIMATION
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801ec20:	6878      	ldr	r0, [r7, #4]
 801ec22:	f7eb f8fa 	bl	8009e1a <lv_obj_get_ext_attr>
 801ec26:	6378      	str	r0, [r7, #52]	; 0x34
    if(ext->edge_flash.enabled) {
 801ec28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ec2e:	f003 0301 	and.w	r3, r3, #1
 801ec32:	b2db      	uxtb	r3, r3
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d026      	beq.n	801ec86 <lv_page_start_edge_flash+0x6e>
        lv_anim_t a;
        a.var            = page;
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	60fb      	str	r3, [r7, #12]
        a.start          = 0;
 801ec3c:	2300      	movs	r3, #0
 801ec3e:	61fb      	str	r3, [r7, #28]
        a.end            = LV_PAGE_END_FLASH_SIZE;
 801ec40:	2319      	movs	r3, #25
 801ec42:	623b      	str	r3, [r7, #32]
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
 801ec44:	4b12      	ldr	r3, [pc, #72]	; (801ec90 <lv_page_start_edge_flash+0x78>)
 801ec46:	613b      	str	r3, [r7, #16]
        a.path_cb        = lv_anim_path_linear;
 801ec48:	4b12      	ldr	r3, [pc, #72]	; (801ec94 <lv_page_start_edge_flash+0x7c>)
 801ec4a:	617b      	str	r3, [r7, #20]
        a.ready_cb       = edge_flash_anim_end;
 801ec4c:	4b12      	ldr	r3, [pc, #72]	; (801ec98 <lv_page_start_edge_flash+0x80>)
 801ec4e:	61bb      	str	r3, [r7, #24]
        a.act_time       = 0;
 801ec50:	2300      	movs	r3, #0
 801ec52:	84fb      	strh	r3, [r7, #38]	; 0x26
        a.time           = LV_PAGE_END_ANIM_TIME;
 801ec54:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801ec58:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.playback       = 1;
 801ec5a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801ec5e:	f043 0301 	orr.w	r3, r3, #1
 801ec62:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 801ec66:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801ec6a:	853b      	strh	r3, [r7, #40]	; 0x28
        a.repeat         = 0;
 801ec6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801ec70:	f36f 0341 	bfc	r3, #1, #1
 801ec74:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        a.repeat_pause   = 0;
 801ec78:	2300      	movs	r3, #0
 801ec7a:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_anim_create(&a);
 801ec7c:	f107 030c 	add.w	r3, r7, #12
 801ec80:	4618      	mov	r0, r3
 801ec82:	f7f6 fb95 	bl	80153b0 <lv_anim_create>
    }
#else
    (void)page; /*Unused*/
#endif
}
 801ec86:	bf00      	nop
 801ec88:	3738      	adds	r7, #56	; 0x38
 801ec8a:	46bd      	mov	sp, r7
 801ec8c:	bd80      	pop	{r7, pc}
 801ec8e:	bf00      	nop
 801ec90:	080203bb 	.word	0x080203bb
 801ec94:	08015501 	.word	0x08015501
 801ec98:	080203e3 	.word	0x080203e3

0801ec9c <lv_page_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_page_design(lv_obj_t * page, const lv_area_t * mask, lv_design_mode_t mode)
{
 801ec9c:	b590      	push	{r4, r7, lr}
 801ec9e:	b0ab      	sub	sp, #172	; 0xac
 801eca0:	af00      	add	r7, sp, #0
 801eca2:	60f8      	str	r0, [r7, #12]
 801eca4:	60b9      	str	r1, [r7, #8]
 801eca6:	4613      	mov	r3, r2
 801eca8:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801ecaa:	79fb      	ldrb	r3, [r7, #7]
 801ecac:	2b02      	cmp	r3, #2
 801ecae:	d107      	bne.n	801ecc0 <lv_page_design+0x24>
        return ancestor_design(page, mask, mode);
 801ecb0:	4ba3      	ldr	r3, [pc, #652]	; (801ef40 <lv_page_design+0x2a4>)
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	79fa      	ldrb	r2, [r7, #7]
 801ecb6:	68b9      	ldr	r1, [r7, #8]
 801ecb8:	68f8      	ldr	r0, [r7, #12]
 801ecba:	4798      	blx	r3
 801ecbc:	4603      	mov	r3, r0
 801ecbe:	e25c      	b.n	801f17a <lv_page_design+0x4de>
    }
    /*Cache page bg style for temporary modification*/
    const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 801ecc0:	2100      	movs	r1, #0
 801ecc2:	68f8      	ldr	r0, [r7, #12]
 801ecc4:	f7ff fef6 	bl	801eab4 <lv_page_get_style>
 801ecc8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    lv_style_t style_tmp;
    lv_style_copy(&style_tmp, style);
 801eccc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801ecd0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801ecd4:	4618      	mov	r0, r3
 801ecd6:	f7ec fb0f 	bl	800b2f8 <lv_style_copy>

    if(mode == LV_DESIGN_DRAW_MAIN) {
 801ecda:	79fb      	ldrb	r3, [r7, #7]
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d110      	bne.n	801ed02 <lv_page_design+0x66>
        /*Draw without border*/
        style_tmp.body.border.width = 0;
 801ece0:	2300      	movs	r3, #0
 801ece2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801ece6:	68fb      	ldr	r3, [r7, #12]
 801ece8:	f103 0410 	add.w	r4, r3, #16
 801ecec:	68f8      	ldr	r0, [r7, #12]
 801ecee:	f7eb f846 	bl	8009d7e <lv_obj_get_opa_scale>
 801ecf2:	4603      	mov	r3, r0
 801ecf4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801ecf8:	68b9      	ldr	r1, [r7, #8]
 801ecfa:	4620      	mov	r0, r4
 801ecfc:	f7f0 fd41 	bl	800f782 <lv_draw_rect>
 801ed00:	e23a      	b.n	801f178 <lv_page_design+0x4dc>

    } else if(mode == LV_DESIGN_DRAW_POST) {
 801ed02:	79fb      	ldrb	r3, [r7, #7]
 801ed04:	2b01      	cmp	r3, #1
 801ed06:	f040 8237 	bne.w	801f178 <lv_page_design+0x4dc>
        /*Draw only a border*/
        style_tmp.body.shadow.width = 0;
 801ed0a:	2300      	movs	r3, #0
 801ed0c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        style_tmp.body.opa          = LV_OPA_TRANSP;
 801ed10:	2300      	movs	r3, #0
 801ed12:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801ed16:	68fb      	ldr	r3, [r7, #12]
 801ed18:	f103 0410 	add.w	r4, r3, #16
 801ed1c:	68f8      	ldr	r0, [r7, #12]
 801ed1e:	f7eb f82e 	bl	8009d7e <lv_obj_get_opa_scale>
 801ed22:	4603      	mov	r3, r0
 801ed24:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801ed28:	68b9      	ldr	r1, [r7, #8]
 801ed2a:	4620      	mov	r0, r4
 801ed2c:	f7f0 fd29 	bl	800f782 <lv_draw_rect>

        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801ed30:	68f8      	ldr	r0, [r7, #12]
 801ed32:	f7eb f872 	bl	8009e1a <lv_obj_get_ext_attr>
 801ed36:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

        /*Draw the scrollbars*/
        lv_area_t sb_area;
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801ed3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ed3e:	7f1b      	ldrb	r3, [r3, #28]
 801ed40:	f003 0301 	and.w	r3, r3, #1
 801ed44:	b2db      	uxtb	r3, r3
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	d050      	beq.n	801edec <lv_page_design+0x150>
 801ed4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ed4e:	7f1b      	ldrb	r3, [r3, #28]
 801ed50:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801ed54:	b2db      	uxtb	r3, r3
 801ed56:	f003 0304 	and.w	r3, r3, #4
 801ed5a:	2b00      	cmp	r3, #0
 801ed5c:	d146      	bne.n	801edec <lv_page_design+0x150>
            /*Convert the relative coordinates to absolute*/
            lv_area_copy(&sb_area, &ext->sb.hor_area);
 801ed5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ed62:	f103 020c 	add.w	r2, r3, #12
 801ed66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ed6a:	4611      	mov	r1, r2
 801ed6c:	4618      	mov	r0, r3
 801ed6e:	f7ff fc03 	bl	801e578 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801ed72:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801ed76:	b29a      	uxth	r2, r3
 801ed78:	68fb      	ldr	r3, [r7, #12]
 801ed7a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ed7e:	b29b      	uxth	r3, r3
 801ed80:	4413      	add	r3, r2
 801ed82:	b29b      	uxth	r3, r3
 801ed84:	b21b      	sxth	r3, r3
 801ed86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            sb_area.y1 += page->coords.y1;
 801ed8a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801ed8e:	b29a      	uxth	r2, r3
 801ed90:	68fb      	ldr	r3, [r7, #12]
 801ed92:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801ed96:	b29b      	uxth	r3, r3
 801ed98:	4413      	add	r3, r2
 801ed9a:	b29b      	uxth	r3, r3
 801ed9c:	b21b      	sxth	r3, r3
 801ed9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            sb_area.x2 += page->coords.x1;
 801eda2:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801eda6:	b29a      	uxth	r2, r3
 801eda8:	68fb      	ldr	r3, [r7, #12]
 801edaa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801edae:	b29b      	uxth	r3, r3
 801edb0:	4413      	add	r3, r2
 801edb2:	b29b      	uxth	r3, r3
 801edb4:	b21b      	sxth	r3, r3
 801edb6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            sb_area.y2 += page->coords.y1;
 801edba:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801edbe:	b29a      	uxth	r2, r3
 801edc0:	68fb      	ldr	r3, [r7, #12]
 801edc2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801edc6:	b29b      	uxth	r3, r3
 801edc8:	4413      	add	r3, r2
 801edca:	b29b      	uxth	r3, r3
 801edcc:	b21b      	sxth	r3, r3
 801edce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801edd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801edd6:	689c      	ldr	r4, [r3, #8]
 801edd8:	68f8      	ldr	r0, [r7, #12]
 801edda:	f7ea ffd0 	bl	8009d7e <lv_obj_get_opa_scale>
 801edde:	4603      	mov	r3, r0
 801ede0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801ede4:	4622      	mov	r2, r4
 801ede6:	68b9      	ldr	r1, [r7, #8]
 801ede8:	f7f0 fccb 	bl	800f782 <lv_draw_rect>
        }

        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801edec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801edf0:	7f1b      	ldrb	r3, [r3, #28]
 801edf2:	f003 0302 	and.w	r3, r3, #2
 801edf6:	b2db      	uxtb	r3, r3
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	d050      	beq.n	801ee9e <lv_page_design+0x202>
 801edfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ee00:	7f1b      	ldrb	r3, [r3, #28]
 801ee02:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801ee06:	b2db      	uxtb	r3, r3
 801ee08:	f003 0304 	and.w	r3, r3, #4
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	d146      	bne.n	801ee9e <lv_page_design+0x202>
            /*Convert the relative coordinates to absolute*/
            lv_area_copy(&sb_area, &ext->sb.ver_area);
 801ee10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ee14:	f103 0214 	add.w	r2, r3, #20
 801ee18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ee1c:	4611      	mov	r1, r2
 801ee1e:	4618      	mov	r0, r3
 801ee20:	f7ff fbaa 	bl	801e578 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801ee24:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801ee28:	b29a      	uxth	r2, r3
 801ee2a:	68fb      	ldr	r3, [r7, #12]
 801ee2c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ee30:	b29b      	uxth	r3, r3
 801ee32:	4413      	add	r3, r2
 801ee34:	b29b      	uxth	r3, r3
 801ee36:	b21b      	sxth	r3, r3
 801ee38:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            sb_area.y1 += page->coords.y1;
 801ee3c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801ee40:	b29a      	uxth	r2, r3
 801ee42:	68fb      	ldr	r3, [r7, #12]
 801ee44:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801ee48:	b29b      	uxth	r3, r3
 801ee4a:	4413      	add	r3, r2
 801ee4c:	b29b      	uxth	r3, r3
 801ee4e:	b21b      	sxth	r3, r3
 801ee50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            sb_area.x2 += page->coords.x1;
 801ee54:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801ee58:	b29a      	uxth	r2, r3
 801ee5a:	68fb      	ldr	r3, [r7, #12]
 801ee5c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ee60:	b29b      	uxth	r3, r3
 801ee62:	4413      	add	r3, r2
 801ee64:	b29b      	uxth	r3, r3
 801ee66:	b21b      	sxth	r3, r3
 801ee68:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            sb_area.y2 += page->coords.y1;
 801ee6c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801ee70:	b29a      	uxth	r2, r3
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801ee78:	b29b      	uxth	r3, r3
 801ee7a:	4413      	add	r3, r2
 801ee7c:	b29b      	uxth	r3, r3
 801ee7e:	b21b      	sxth	r3, r3
 801ee80:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801ee84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ee88:	689c      	ldr	r4, [r3, #8]
 801ee8a:	68f8      	ldr	r0, [r7, #12]
 801ee8c:	f7ea ff77 	bl	8009d7e <lv_obj_get_opa_scale>
 801ee90:	4603      	mov	r3, r0
 801ee92:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801ee96:	4622      	mov	r2, r4
 801ee98:	68b9      	ldr	r1, [r7, #8]
 801ee9a:	f7f0 fc72 	bl	800f782 <lv_draw_rect>
        }

#if LV_USE_ANIMATION
        {
            lv_coord_t page_w = lv_obj_get_width(page);
 801ee9e:	68f8      	ldr	r0, [r7, #12]
 801eea0:	f7ea fed0 	bl	8009c44 <lv_obj_get_width>
 801eea4:	4603      	mov	r3, r0
 801eea6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            lv_coord_t page_h = lv_obj_get_height(page);
 801eeaa:	68f8      	ldr	r0, [r7, #12]
 801eeac:	f7ea fed8 	bl	8009c60 <lv_obj_get_height>
 801eeb0:	4603      	mov	r3, r0
 801eeb2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

            lv_area_t flash_area;

            if(ext->edge_flash.top_ip) {
 801eeb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801eeba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801eebe:	f003 0302 	and.w	r3, r3, #2
 801eec2:	b2db      	uxtb	r3, r3
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d03d      	beq.n	801ef44 <lv_page_design+0x2a8>
                flash_area.x1 = page->coords.x1 - page_w;
 801eec8:	68fb      	ldr	r3, [r7, #12]
 801eeca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801eece:	b29a      	uxth	r2, r3
 801eed0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801eed4:	1ad3      	subs	r3, r2, r3
 801eed6:	b29b      	uxth	r3, r3
 801eed8:	b21b      	sxth	r3, r3
 801eeda:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + page_w;
 801eede:	68fb      	ldr	r3, [r7, #12]
 801eee0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801eee4:	b29a      	uxth	r2, r3
 801eee6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801eeea:	4413      	add	r3, r2
 801eeec:	b29b      	uxth	r3, r3
 801eeee:	b21b      	sxth	r3, r3
 801eef0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801eef4:	68fb      	ldr	r3, [r7, #12]
 801eef6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801eefa:	b29a      	uxth	r2, r3
 801eefc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801ef00:	4619      	mov	r1, r3
 801ef02:	009b      	lsls	r3, r3, #2
 801ef04:	1acb      	subs	r3, r1, r3
 801ef06:	b29b      	uxth	r3, r3
 801ef08:	4413      	add	r3, r2
 801ef0a:	b29a      	uxth	r2, r3
 801ef0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ef10:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801ef14:	b29b      	uxth	r3, r3
 801ef16:	4413      	add	r3, r2
 801ef18:	b29b      	uxth	r3, r3
 801ef1a:	b21b      	sxth	r3, r3
 801ef1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 801ef20:	68fb      	ldr	r3, [r7, #12]
 801ef22:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801ef26:	b29a      	uxth	r2, r3
 801ef28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ef2c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801ef30:	b29b      	uxth	r3, r3
 801ef32:	4413      	add	r3, r2
 801ef34:	b29b      	uxth	r3, r3
 801ef36:	b21b      	sxth	r3, r3
 801ef38:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801ef3c:	e0cd      	b.n	801f0da <lv_page_design+0x43e>
 801ef3e:	bf00      	nop
 801ef40:	200177e8 	.word	0x200177e8
            } else if(ext->edge_flash.bottom_ip) {
 801ef44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ef48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ef4c:	f003 0304 	and.w	r3, r3, #4
 801ef50:	b2db      	uxtb	r3, r3
 801ef52:	2b00      	cmp	r3, #0
 801ef54:	d03a      	beq.n	801efcc <lv_page_design+0x330>
                flash_area.x1 = page->coords.x1 - page_w;
 801ef56:	68fb      	ldr	r3, [r7, #12]
 801ef58:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ef5c:	b29a      	uxth	r2, r3
 801ef5e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801ef62:	1ad3      	subs	r3, r2, r3
 801ef64:	b29b      	uxth	r3, r3
 801ef66:	b21b      	sxth	r3, r3
 801ef68:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + page_w;
 801ef6c:	68fb      	ldr	r3, [r7, #12]
 801ef6e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801ef72:	b29a      	uxth	r2, r3
 801ef74:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801ef78:	4413      	add	r3, r2
 801ef7a:	b29b      	uxth	r3, r3
 801ef7c:	b21b      	sxth	r3, r3
 801ef7e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 801ef82:	68fb      	ldr	r3, [r7, #12]
 801ef84:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801ef88:	b29a      	uxth	r2, r3
 801ef8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ef8e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801ef92:	b29b      	uxth	r3, r3
 801ef94:	1ad3      	subs	r3, r2, r3
 801ef96:	b29b      	uxth	r3, r3
 801ef98:	b21b      	sxth	r3, r3
 801ef9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 801ef9e:	68fb      	ldr	r3, [r7, #12]
 801efa0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801efa4:	b29a      	uxth	r2, r3
 801efa6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801efaa:	4619      	mov	r1, r3
 801efac:	0049      	lsls	r1, r1, #1
 801efae:	440b      	add	r3, r1
 801efb0:	b29b      	uxth	r3, r3
 801efb2:	4413      	add	r3, r2
 801efb4:	b29a      	uxth	r2, r3
 801efb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801efba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801efbe:	b29b      	uxth	r3, r3
 801efc0:	1ad3      	subs	r3, r2, r3
 801efc2:	b29b      	uxth	r3, r3
 801efc4:	b21b      	sxth	r3, r3
 801efc6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801efca:	e086      	b.n	801f0da <lv_page_design+0x43e>
            } else if(ext->edge_flash.right_ip) {
 801efcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801efd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801efd4:	f003 0308 	and.w	r3, r3, #8
 801efd8:	b2db      	uxtb	r3, r3
 801efda:	2b00      	cmp	r3, #0
 801efdc:	d03a      	beq.n	801f054 <lv_page_design+0x3b8>
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801efde:	68fb      	ldr	r3, [r7, #12]
 801efe0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801efe4:	b29a      	uxth	r2, r3
 801efe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801efea:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801efee:	b29b      	uxth	r3, r3
 801eff0:	1ad3      	subs	r3, r2, r3
 801eff2:	b29b      	uxth	r3, r3
 801eff4:	b21b      	sxth	r3, r3
 801eff6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 801effa:	68fb      	ldr	r3, [r7, #12]
 801effc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801f000:	b29a      	uxth	r2, r3
 801f002:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801f006:	4619      	mov	r1, r3
 801f008:	0049      	lsls	r1, r1, #1
 801f00a:	440b      	add	r3, r1
 801f00c:	b29b      	uxth	r3, r3
 801f00e:	4413      	add	r3, r2
 801f010:	b29a      	uxth	r2, r3
 801f012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f016:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801f01a:	b29b      	uxth	r3, r3
 801f01c:	1ad3      	subs	r3, r2, r3
 801f01e:	b29b      	uxth	r3, r3
 801f020:	b21b      	sxth	r3, r3
 801f022:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - page_h;
 801f026:	68fb      	ldr	r3, [r7, #12]
 801f028:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f02c:	b29a      	uxth	r2, r3
 801f02e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801f032:	1ad3      	subs	r3, r2, r3
 801f034:	b29b      	uxth	r3, r3
 801f036:	b21b      	sxth	r3, r3
 801f038:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + page_h;
 801f03c:	68fb      	ldr	r3, [r7, #12]
 801f03e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f042:	b29a      	uxth	r2, r3
 801f044:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801f048:	4413      	add	r3, r2
 801f04a:	b29b      	uxth	r3, r3
 801f04c:	b21b      	sxth	r3, r3
 801f04e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801f052:	e042      	b.n	801f0da <lv_page_design+0x43e>
            } else if(ext->edge_flash.left_ip) {
 801f054:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f05c:	f003 0310 	and.w	r3, r3, #16
 801f060:	b2db      	uxtb	r3, r3
 801f062:	2b00      	cmp	r3, #0
 801f064:	d039      	beq.n	801f0da <lv_page_design+0x43e>
                flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801f066:	68fb      	ldr	r3, [r7, #12]
 801f068:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f06c:	b29a      	uxth	r2, r3
 801f06e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801f072:	4619      	mov	r1, r3
 801f074:	009b      	lsls	r3, r3, #2
 801f076:	1acb      	subs	r3, r1, r3
 801f078:	b29b      	uxth	r3, r3
 801f07a:	4413      	add	r3, r2
 801f07c:	b29a      	uxth	r2, r3
 801f07e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f082:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801f086:	b29b      	uxth	r3, r3
 801f088:	4413      	add	r3, r2
 801f08a:	b29b      	uxth	r3, r3
 801f08c:	b21b      	sxth	r3, r3
 801f08e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 801f092:	68fb      	ldr	r3, [r7, #12]
 801f094:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f098:	b29a      	uxth	r2, r3
 801f09a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f09e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801f0a2:	b29b      	uxth	r3, r3
 801f0a4:	4413      	add	r3, r2
 801f0a6:	b29b      	uxth	r3, r3
 801f0a8:	b21b      	sxth	r3, r3
 801f0aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - page_h;
 801f0ae:	68fb      	ldr	r3, [r7, #12]
 801f0b0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f0b4:	b29a      	uxth	r2, r3
 801f0b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801f0ba:	1ad3      	subs	r3, r2, r3
 801f0bc:	b29b      	uxth	r3, r3
 801f0be:	b21b      	sxth	r3, r3
 801f0c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + page_h;
 801f0c4:	68fb      	ldr	r3, [r7, #12]
 801f0c6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f0ca:	b29a      	uxth	r2, r3
 801f0cc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801f0d0:	4413      	add	r3, r2
 801f0d2:	b29b      	uxth	r3, r3
 801f0d4:	b21b      	sxth	r3, r3
 801f0d6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
 801f0da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f0de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f0e2:	f003 0310 	and.w	r3, r3, #16
 801f0e6:	b2db      	uxtb	r3, r3
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	d11a      	bne.n	801f122 <lv_page_design+0x486>
 801f0ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f0f4:	f003 0308 	and.w	r3, r3, #8
 801f0f8:	b2db      	uxtb	r3, r3
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d111      	bne.n	801f122 <lv_page_design+0x486>
 801f0fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f106:	f003 0302 	and.w	r3, r3, #2
 801f10a:	b2db      	uxtb	r3, r3
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d108      	bne.n	801f122 <lv_page_design+0x486>
 801f110:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f118:	f003 0304 	and.w	r3, r3, #4
 801f11c:	b2db      	uxtb	r3, r3
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d02a      	beq.n	801f178 <lv_page_design+0x4dc>
               ext->edge_flash.bottom_ip) {
                lv_style_t flash_style;
                lv_style_copy(&flash_style, ext->edge_flash.style);
 801f122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f128:	f107 0310 	add.w	r3, r7, #16
 801f12c:	4611      	mov	r1, r2
 801f12e:	4618      	mov	r0, r3
 801f130:	f7ec f8e2 	bl	800b2f8 <lv_style_copy>
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 801f134:	f647 4318 	movw	r3, #31768	; 0x7c18
 801f138:	82fb      	strh	r3, [r7, #22]
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 801f13a:	7e3b      	ldrb	r3, [r7, #24]
 801f13c:	461a      	mov	r2, r3
 801f13e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f142:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801f146:	fb03 f302 	mul.w	r3, r3, r2
 801f14a:	4a0e      	ldr	r2, [pc, #56]	; (801f184 <lv_page_design+0x4e8>)
 801f14c:	fb82 1203 	smull	r1, r2, r2, r3
 801f150:	10d2      	asrs	r2, r2, #3
 801f152:	17db      	asrs	r3, r3, #31
 801f154:	1ad3      	subs	r3, r2, r3
 801f156:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                flash_style.body.opa    = opa;
 801f15a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f15e:	b2db      	uxtb	r3, r3
 801f160:	763b      	strb	r3, [r7, #24]
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 801f162:	68f8      	ldr	r0, [r7, #12]
 801f164:	f7ea fe0b 	bl	8009d7e <lv_obj_get_opa_scale>
 801f168:	4603      	mov	r3, r0
 801f16a:	f107 0210 	add.w	r2, r7, #16
 801f16e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801f172:	68b9      	ldr	r1, [r7, #8]
 801f174:	f7f0 fb05 	bl	800f782 <lv_draw_rect>
            }
        }
#endif
    }

    return true;
 801f178:	2301      	movs	r3, #1
}
 801f17a:	4618      	mov	r0, r3
 801f17c:	37ac      	adds	r7, #172	; 0xac
 801f17e:	46bd      	mov	sp, r7
 801f180:	bd90      	pop	{r4, r7, pc}
 801f182:	bf00      	nop
 801f184:	51eb851f 	.word	0x51eb851f

0801f188 <lv_scrl_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_scrl_design(lv_obj_t * scrl, const lv_area_t * mask, lv_design_mode_t mode)
{
 801f188:	b580      	push	{r7, lr}
 801f18a:	b08a      	sub	sp, #40	; 0x28
 801f18c:	af00      	add	r7, sp, #0
 801f18e:	60f8      	str	r0, [r7, #12]
 801f190:	60b9      	str	r1, [r7, #8]
 801f192:	4613      	mov	r3, r2
 801f194:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801f196:	79fb      	ldrb	r3, [r7, #7]
 801f198:	2b02      	cmp	r3, #2
 801f19a:	d107      	bne.n	801f1ac <lv_scrl_design+0x24>
        return ancestor_design(scrl, mask, mode);
 801f19c:	4b2f      	ldr	r3, [pc, #188]	; (801f25c <lv_scrl_design+0xd4>)
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	79fa      	ldrb	r2, [r7, #7]
 801f1a2:	68b9      	ldr	r1, [r7, #8]
 801f1a4:	68f8      	ldr	r0, [r7, #12]
 801f1a6:	4798      	blx	r3
 801f1a8:	4603      	mov	r3, r0
 801f1aa:	e052      	b.n	801f252 <lv_scrl_design+0xca>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801f1ac:	79fb      	ldrb	r3, [r7, #7]
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d145      	bne.n	801f23e <lv_scrl_design+0xb6>
#if LV_USE_GROUP
        /* If the page is focused in a group and
         * the background object is not visible (transparent)
         * then "activate" the style of the scrollable*/
        const lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 801f1b2:	68f8      	ldr	r0, [r7, #12]
 801f1b4:	f7ea fd76 	bl	8009ca4 <lv_obj_get_style>
 801f1b8:	6238      	str	r0, [r7, #32]
        lv_obj_t * page                   = lv_obj_get_parent(scrl);
 801f1ba:	68f8      	ldr	r0, [r7, #12]
 801f1bc:	f7ea fcd8 	bl	8009b70 <lv_obj_get_parent>
 801f1c0:	61f8      	str	r0, [r7, #28]
        const lv_style_t * style_page     = lv_obj_get_style(page);
 801f1c2:	69f8      	ldr	r0, [r7, #28]
 801f1c4:	f7ea fd6e 	bl	8009ca4 <lv_obj_get_style>
 801f1c8:	61b8      	str	r0, [r7, #24]
        lv_group_t * g                    = lv_obj_get_group(page);
 801f1ca:	69f8      	ldr	r0, [r7, #28]
 801f1cc:	f7ea fe31 	bl	8009e32 <lv_obj_get_group>
 801f1d0:	6178      	str	r0, [r7, #20]
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 801f1d2:	69bb      	ldr	r3, [r7, #24]
 801f1d4:	7a1b      	ldrb	r3, [r3, #8]
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d127      	bne.n	801f22a <lv_scrl_design+0xa2>
           style_page->body.border.width == 0) { /*Is the background visible?*/
 801f1da:	69bb      	ldr	r3, [r7, #24]
 801f1dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d122      	bne.n	801f22a <lv_scrl_design+0xa2>
            if(lv_group_get_focused(g) == page) {
 801f1e4:	6978      	ldr	r0, [r7, #20]
 801f1e6:	f7e8 fe06 	bl	8007df6 <lv_group_get_focused>
 801f1ea:	4602      	mov	r2, r0
 801f1ec:	69fb      	ldr	r3, [r7, #28]
 801f1ee:	4293      	cmp	r3, r2
 801f1f0:	d11b      	bne.n	801f22a <lv_scrl_design+0xa2>
                lv_style_t * style_mod;
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 801f1f2:	6a39      	ldr	r1, [r7, #32]
 801f1f4:	6978      	ldr	r0, [r7, #20]
 801f1f6:	f7e8 fdce 	bl	8007d96 <lv_group_mod_style>
 801f1fa:	6278      	str	r0, [r7, #36]	; 0x24
                /*If still not visible modify the style a littel bit*/
                if((style_mod->body.opa == LV_OPA_TRANSP) && style_mod->body.border.width == 0) {
 801f1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1fe:	7a1b      	ldrb	r3, [r3, #8]
 801f200:	2b00      	cmp	r3, #0
 801f202:	d10f      	bne.n	801f224 <lv_scrl_design+0x9c>
 801f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f206:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801f20a:	2b00      	cmp	r3, #0
 801f20c:	d10a      	bne.n	801f224 <lv_scrl_design+0x9c>
                    style_mod->body.opa          = LV_OPA_50;
 801f20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f210:	227f      	movs	r2, #127	; 0x7f
 801f212:	721a      	strb	r2, [r3, #8]
                    style_mod->body.border.width = 1;
 801f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f216:	2201      	movs	r2, #1
 801f218:	819a      	strh	r2, [r3, #12]
                    style_mod                    = lv_group_mod_style(g, style_mod);
 801f21a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f21c:	6978      	ldr	r0, [r7, #20]
 801f21e:	f7e8 fdba 	bl	8007d96 <lv_group_mod_style>
 801f222:	6278      	str	r0, [r7, #36]	; 0x24
                }

                scrl->style_p = style_mod; /*Temporally change the style to the activated */
 801f224:	68fb      	ldr	r3, [r7, #12]
 801f226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f228:	629a      	str	r2, [r3, #40]	; 0x28
            }
        }
#endif
        ancestor_design(scrl, mask, mode);
 801f22a:	4b0c      	ldr	r3, [pc, #48]	; (801f25c <lv_scrl_design+0xd4>)
 801f22c:	681b      	ldr	r3, [r3, #0]
 801f22e:	79fa      	ldrb	r2, [r7, #7]
 801f230:	68b9      	ldr	r1, [r7, #8]
 801f232:	68f8      	ldr	r0, [r7, #12]
 801f234:	4798      	blx	r3

#if LV_USE_GROUP
        scrl->style_p = style_scrl_ori; /*Revert the style*/
 801f236:	68fb      	ldr	r3, [r7, #12]
 801f238:	6a3a      	ldr	r2, [r7, #32]
 801f23a:	629a      	str	r2, [r3, #40]	; 0x28
 801f23c:	e008      	b.n	801f250 <lv_scrl_design+0xc8>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 801f23e:	79fb      	ldrb	r3, [r7, #7]
 801f240:	2b01      	cmp	r3, #1
 801f242:	d105      	bne.n	801f250 <lv_scrl_design+0xc8>
        ancestor_design(scrl, mask, mode);
 801f244:	4b05      	ldr	r3, [pc, #20]	; (801f25c <lv_scrl_design+0xd4>)
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	79fa      	ldrb	r2, [r7, #7]
 801f24a:	68b9      	ldr	r1, [r7, #8]
 801f24c:	68f8      	ldr	r0, [r7, #12]
 801f24e:	4798      	blx	r3
    }

    return true;
 801f250:	2301      	movs	r3, #1
}
 801f252:	4618      	mov	r0, r3
 801f254:	3728      	adds	r7, #40	; 0x28
 801f256:	46bd      	mov	sp, r7
 801f258:	bd80      	pop	{r7, pc}
 801f25a:	bf00      	nop
 801f25c:	200177e8 	.word	0x200177e8

0801f260 <lv_page_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_signal(lv_obj_t * page, lv_signal_t sign, void * param)
{
 801f260:	b590      	push	{r4, r7, lr}
 801f262:	b08f      	sub	sp, #60	; 0x3c
 801f264:	af00      	add	r7, sp, #0
 801f266:	60f8      	str	r0, [r7, #12]
 801f268:	460b      	mov	r3, r1
 801f26a:	607a      	str	r2, [r7, #4]
 801f26c:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(page, sign, param);
 801f26e:	4ba1      	ldr	r3, [pc, #644]	; (801f4f4 <lv_page_signal+0x294>)
 801f270:	681b      	ldr	r3, [r3, #0]
 801f272:	7af9      	ldrb	r1, [r7, #11]
 801f274:	687a      	ldr	r2, [r7, #4]
 801f276:	68f8      	ldr	r0, [r7, #12]
 801f278:	4798      	blx	r3
 801f27a:	4603      	mov	r3, r0
 801f27c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if(res != LV_RES_OK) return res;
 801f280:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801f284:	2b01      	cmp	r3, #1
 801f286:	d002      	beq.n	801f28e <lv_page_signal+0x2e>
 801f288:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801f28c:	e1c7      	b.n	801f61e <lv_page_signal+0x3be>

    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801f28e:	68f8      	ldr	r0, [r7, #12]
 801f290:	f7ea fdc3 	bl	8009e1a <lv_obj_get_ext_attr>
 801f294:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_obj_t * child;
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 801f296:	7afb      	ldrb	r3, [r7, #11]
 801f298:	2b01      	cmp	r3, #1
 801f29a:	f040 8086 	bne.w	801f3aa <lv_page_signal+0x14a>
        const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 801f29e:	2101      	movs	r1, #1
 801f2a0:	68f8      	ldr	r0, [r7, #12]
 801f2a2:	f7ff fc07 	bl	801eab4 <lv_page_get_style>
 801f2a6:	61f8      	str	r0, [r7, #28]
        lv_fit_t fit_left        = lv_page_get_scrl_fit_left(page);
 801f2a8:	68f8      	ldr	r0, [r7, #12]
 801f2aa:	f7ff f9b1 	bl	801e610 <lv_page_get_scrl_fit_left>
 801f2ae:	4603      	mov	r3, r0
 801f2b0:	76fb      	strb	r3, [r7, #27]
        lv_fit_t fit_top         = lv_page_get_scrl_fit_top(page);
 801f2b2:	68f8      	ldr	r0, [r7, #12]
 801f2b4:	f7ff f9bc 	bl	801e630 <lv_page_get_scrl_fit_top>
 801f2b8:	4603      	mov	r3, r0
 801f2ba:	76bb      	strb	r3, [r7, #26]
        child                    = lv_obj_get_child(page, NULL);
 801f2bc:	2100      	movs	r1, #0
 801f2be:	68f8      	ldr	r0, [r7, #12]
 801f2c0:	f7ea fc62 	bl	8009b88 <lv_obj_get_child>
 801f2c4:	6378      	str	r0, [r7, #52]	; 0x34
        while(child != NULL) {
 801f2c6:	e06c      	b.n	801f3a2 <lv_page_signal+0x142>
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801f2c8:	2102      	movs	r1, #2
 801f2ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801f2cc:	f7ea fd76 	bl	8009dbc <lv_obj_is_protected>
 801f2d0:	4603      	mov	r3, r0
 801f2d2:	f083 0301 	eor.w	r3, r3, #1
 801f2d6:	b2db      	uxtb	r3, r3
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d05d      	beq.n	801f398 <lv_page_signal+0x138>
                lv_obj_t * tmp = child;
 801f2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f2de:	617b      	str	r3, [r7, #20]
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801f2e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f2e2:	68f8      	ldr	r0, [r7, #12]
 801f2e4:	f7ea fc50 	bl	8009b88 <lv_obj_get_child>
 801f2e8:	6378      	str	r0, [r7, #52]	; 0x34

                /* Reposition the child to take padding into account (Only if it's on (0;0) now)
                 * It's required to keep new the object on the same coordinate if FIT is enabled.*/
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 801f2ea:	697b      	ldr	r3, [r7, #20]
 801f2ec:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801f2f0:	68fb      	ldr	r3, [r7, #12]
 801f2f2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f2f6:	429a      	cmp	r2, r3
 801f2f8:	d11f      	bne.n	801f33a <lv_page_signal+0xda>
 801f2fa:	7efb      	ldrb	r3, [r7, #27]
 801f2fc:	2b01      	cmp	r3, #1
 801f2fe:	d002      	beq.n	801f306 <lv_page_signal+0xa6>
 801f300:	7efb      	ldrb	r3, [r7, #27]
 801f302:	2b03      	cmp	r3, #3
 801f304:	d119      	bne.n	801f33a <lv_page_signal+0xda>
                    tmp->coords.x1 += style->body.padding.left;
 801f306:	697b      	ldr	r3, [r7, #20]
 801f308:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f30c:	b29a      	uxth	r2, r3
 801f30e:	69fb      	ldr	r3, [r7, #28]
 801f310:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801f314:	b29b      	uxth	r3, r3
 801f316:	4413      	add	r3, r2
 801f318:	b29b      	uxth	r3, r3
 801f31a:	b21a      	sxth	r2, r3
 801f31c:	697b      	ldr	r3, [r7, #20]
 801f31e:	821a      	strh	r2, [r3, #16]
                    tmp->coords.x2 += style->body.padding.left;
 801f320:	697b      	ldr	r3, [r7, #20]
 801f322:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801f326:	b29a      	uxth	r2, r3
 801f328:	69fb      	ldr	r3, [r7, #28]
 801f32a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801f32e:	b29b      	uxth	r3, r3
 801f330:	4413      	add	r3, r2
 801f332:	b29b      	uxth	r3, r3
 801f334:	b21a      	sxth	r2, r3
 801f336:	697b      	ldr	r3, [r7, #20]
 801f338:	829a      	strh	r2, [r3, #20]
                }
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 801f33a:	697b      	ldr	r3, [r7, #20]
 801f33c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801f340:	68fb      	ldr	r3, [r7, #12]
 801f342:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f346:	429a      	cmp	r2, r3
 801f348:	d11f      	bne.n	801f38a <lv_page_signal+0x12a>
 801f34a:	7ebb      	ldrb	r3, [r7, #26]
 801f34c:	2b01      	cmp	r3, #1
 801f34e:	d002      	beq.n	801f356 <lv_page_signal+0xf6>
 801f350:	7ebb      	ldrb	r3, [r7, #26]
 801f352:	2b03      	cmp	r3, #3
 801f354:	d119      	bne.n	801f38a <lv_page_signal+0x12a>
                    tmp->coords.y1 += style->body.padding.top;
 801f356:	697b      	ldr	r3, [r7, #20]
 801f358:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f35c:	b29a      	uxth	r2, r3
 801f35e:	69fb      	ldr	r3, [r7, #28]
 801f360:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f364:	b29b      	uxth	r3, r3
 801f366:	4413      	add	r3, r2
 801f368:	b29b      	uxth	r3, r3
 801f36a:	b21a      	sxth	r2, r3
 801f36c:	697b      	ldr	r3, [r7, #20]
 801f36e:	825a      	strh	r2, [r3, #18]
                    tmp->coords.y2 += style->body.padding.top;
 801f370:	697b      	ldr	r3, [r7, #20]
 801f372:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f376:	b29a      	uxth	r2, r3
 801f378:	69fb      	ldr	r3, [r7, #28]
 801f37a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f37e:	b29b      	uxth	r3, r3
 801f380:	4413      	add	r3, r2
 801f382:	b29b      	uxth	r3, r3
 801f384:	b21a      	sxth	r2, r3
 801f386:	697b      	ldr	r3, [r7, #20]
 801f388:	82da      	strh	r2, [r3, #22]
                }
                lv_obj_set_parent(tmp, ext->scrl);
 801f38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f38c:	685b      	ldr	r3, [r3, #4]
 801f38e:	4619      	mov	r1, r3
 801f390:	6978      	ldr	r0, [r7, #20]
 801f392:	f7e9 fba5 	bl	8008ae0 <lv_obj_set_parent>
 801f396:	e004      	b.n	801f3a2 <lv_page_signal+0x142>
            } else {
                child = lv_obj_get_child(page, child);
 801f398:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f39a:	68f8      	ldr	r0, [r7, #12]
 801f39c:	f7ea fbf4 	bl	8009b88 <lv_obj_get_child>
 801f3a0:	6378      	str	r0, [r7, #52]	; 0x34
        while(child != NULL) {
 801f3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	d18f      	bne.n	801f2c8 <lv_page_signal+0x68>
 801f3a8:	e137      	b.n	801f61a <lv_page_signal+0x3ba>
            }
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801f3aa:	7afb      	ldrb	r3, [r7, #11]
 801f3ac:	2b04      	cmp	r3, #4
 801f3ae:	d11e      	bne.n	801f3ee <lv_page_signal+0x18e>
        ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3b2:	685b      	ldr	r3, [r3, #4]
 801f3b4:	69db      	ldr	r3, [r3, #28]
 801f3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f3b8:	6850      	ldr	r0, [r2, #4]
 801f3ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f3bc:	6852      	ldr	r2, [r2, #4]
 801f3be:	3210      	adds	r2, #16
 801f3c0:	2102      	movs	r1, #2
 801f3c2:	4798      	blx	r3

        /*The scrollbars are important only if they are visible now*/
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 801f3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3c6:	7f1b      	ldrb	r3, [r3, #28]
 801f3c8:	f003 0301 	and.w	r3, r3, #1
 801f3cc:	b2db      	uxtb	r3, r3
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d106      	bne.n	801f3e0 <lv_page_signal+0x180>
 801f3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3d4:	7f1b      	ldrb	r3, [r3, #28]
 801f3d6:	f003 0302 	and.w	r3, r3, #2
 801f3da:	b2db      	uxtb	r3, r3
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d002      	beq.n	801f3e6 <lv_page_signal+0x186>
 801f3e0:	68f8      	ldr	r0, [r7, #12]
 801f3e2:	f000 fceb 	bl	801fdbc <lv_page_sb_refresh>

        /*Refresh the ext. size because the scrollbars might be positioned out of the page*/
        lv_obj_refresh_ext_draw_pad(page);
 801f3e6:	68f8      	ldr	r0, [r7, #12]
 801f3e8:	f7ea fb60 	bl	8009aac <lv_obj_refresh_ext_draw_pad>
 801f3ec:	e115      	b.n	801f61a <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801f3ee:	7afb      	ldrb	r3, [r7, #11]
 801f3f0:	2b02      	cmp	r3, #2
 801f3f2:	d138      	bne.n	801f466 <lv_page_signal+0x206>
        /*Refresh the scrollbar and notify the scrl if the size is changed*/
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801f3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3f6:	685b      	ldr	r3, [r3, #4]
 801f3f8:	2b00      	cmp	r3, #0
 801f3fa:	f000 810e 	beq.w	801f61a <lv_page_signal+0x3ba>
 801f3fe:	68f8      	ldr	r0, [r7, #12]
 801f400:	f7ea fc20 	bl	8009c44 <lv_obj_get_width>
 801f404:	4603      	mov	r3, r0
 801f406:	461c      	mov	r4, r3
 801f408:	6878      	ldr	r0, [r7, #4]
 801f40a:	f7ff f8c3 	bl	801e594 <lv_area_get_width>
 801f40e:	4603      	mov	r3, r0
 801f410:	429c      	cmp	r4, r3
 801f412:	d10b      	bne.n	801f42c <lv_page_signal+0x1cc>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 801f414:	68f8      	ldr	r0, [r7, #12]
 801f416:	f7ea fc23 	bl	8009c60 <lv_obj_get_height>
 801f41a:	4603      	mov	r3, r0
 801f41c:	461c      	mov	r4, r3
 801f41e:	6878      	ldr	r0, [r7, #4]
 801f420:	f7ff f8cf 	bl	801e5c2 <lv_area_get_height>
 801f424:	4603      	mov	r3, r0
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801f426:	429c      	cmp	r4, r3
 801f428:	f000 80f7 	beq.w	801f61a <lv_page_signal+0x3ba>
            /*If no hor_fit enabled set the scrollable's width to the page's width*/
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801f42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f42e:	685b      	ldr	r3, [r3, #4]
 801f430:	69db      	ldr	r3, [r3, #28]
 801f432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f434:	6850      	ldr	r0, [r2, #4]
 801f436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f438:	6852      	ldr	r2, [r2, #4]
 801f43a:	3210      	adds	r2, #16
 801f43c:	2102      	movs	r1, #2
 801f43e:	4798      	blx	r3

            /*The scrollbars are important only if they are visible now*/
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 801f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f442:	7f1b      	ldrb	r3, [r3, #28]
 801f444:	f003 0301 	and.w	r3, r3, #1
 801f448:	b2db      	uxtb	r3, r3
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d107      	bne.n	801f45e <lv_page_signal+0x1fe>
 801f44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f450:	7f1b      	ldrb	r3, [r3, #28]
 801f452:	f003 0302 	and.w	r3, r3, #2
 801f456:	b2db      	uxtb	r3, r3
 801f458:	2b00      	cmp	r3, #0
 801f45a:	f000 80de 	beq.w	801f61a <lv_page_signal+0x3ba>
 801f45e:	68f8      	ldr	r0, [r7, #12]
 801f460:	f000 fcac 	bl	801fdbc <lv_page_sb_refresh>
 801f464:	e0d9      	b.n	801f61a <lv_page_signal+0x3ba>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801f466:	7afb      	ldrb	r3, [r7, #11]
 801f468:	2b05      	cmp	r3, #5
 801f46a:	d12b      	bne.n	801f4c4 <lv_page_signal+0x264>
        /*Ensure ext. size for the scrollbars if they are out of the page*/
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.right))
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801f472:	461a      	mov	r2, r3
 801f474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f476:	689b      	ldr	r3, [r3, #8]
 801f478:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801f47c:	425b      	negs	r3, r3
 801f47e:	429a      	cmp	r2, r3
 801f480:	da09      	bge.n	801f496 <lv_page_signal+0x236>
            page->ext_draw_pad = -ext->sb.style->body.padding.right;
 801f482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f484:	689b      	ldr	r3, [r3, #8]
 801f486:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801f48a:	b29b      	uxth	r3, r3
 801f48c:	425b      	negs	r3, r3
 801f48e:	b29b      	uxth	r3, r3
 801f490:	b21a      	sxth	r2, r3
 801f492:	68fb      	ldr	r3, [r7, #12]
 801f494:	869a      	strh	r2, [r3, #52]	; 0x34
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.bottom))
 801f496:	68fb      	ldr	r3, [r7, #12]
 801f498:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801f49c:	461a      	mov	r2, r3
 801f49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4a0:	689b      	ldr	r3, [r3, #8]
 801f4a2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801f4a6:	425b      	negs	r3, r3
 801f4a8:	429a      	cmp	r2, r3
 801f4aa:	f280 80b6 	bge.w	801f61a <lv_page_signal+0x3ba>
            page->ext_draw_pad = -ext->sb.style->body.padding.bottom;
 801f4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4b0:	689b      	ldr	r3, [r3, #8]
 801f4b2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801f4b6:	b29b      	uxth	r3, r3
 801f4b8:	425b      	negs	r3, r3
 801f4ba:	b29b      	uxth	r3, r3
 801f4bc:	b21a      	sxth	r2, r3
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	869a      	strh	r2, [r3, #52]	; 0x34
 801f4c2:	e0aa      	b.n	801f61a <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_CONTROL) {
 801f4c4:	7afb      	ldrb	r3, [r7, #11]
 801f4c6:	2b11      	cmp	r3, #17
 801f4c8:	d17d      	bne.n	801f5c6 <lv_page_signal+0x366>
        uint32_t c = *((uint32_t *)param);
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	623b      	str	r3, [r7, #32]

        if(c == LV_KEY_DOWN) {
 801f4d0:	6a3b      	ldr	r3, [r7, #32]
 801f4d2:	2b12      	cmp	r3, #18
 801f4d4:	d110      	bne.n	801f4f8 <lv_page_signal+0x298>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801f4d6:	68f8      	ldr	r0, [r7, #12]
 801f4d8:	f7ea fbc2 	bl	8009c60 <lv_obj_get_height>
 801f4dc:	4603      	mov	r3, r0
 801f4de:	425b      	negs	r3, r3
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	da00      	bge.n	801f4e6 <lv_page_signal+0x286>
 801f4e4:	3303      	adds	r3, #3
 801f4e6:	109b      	asrs	r3, r3, #2
 801f4e8:	b21b      	sxth	r3, r3
 801f4ea:	4619      	mov	r1, r3
 801f4ec:	68f8      	ldr	r0, [r7, #12]
 801f4ee:	f7ff fb55 	bl	801eb9c <lv_page_scroll_ver>
 801f4f2:	e092      	b.n	801f61a <lv_page_signal+0x3ba>
 801f4f4:	200177ec 	.word	0x200177ec
        } else if(c == LV_KEY_UP) {
 801f4f8:	6a3b      	ldr	r3, [r7, #32]
 801f4fa:	2b11      	cmp	r3, #17
 801f4fc:	d10d      	bne.n	801f51a <lv_page_signal+0x2ba>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801f4fe:	68f8      	ldr	r0, [r7, #12]
 801f500:	f7ea fbae 	bl	8009c60 <lv_obj_get_height>
 801f504:	4603      	mov	r3, r0
 801f506:	2b00      	cmp	r3, #0
 801f508:	da00      	bge.n	801f50c <lv_page_signal+0x2ac>
 801f50a:	3303      	adds	r3, #3
 801f50c:	109b      	asrs	r3, r3, #2
 801f50e:	b21b      	sxth	r3, r3
 801f510:	4619      	mov	r1, r3
 801f512:	68f8      	ldr	r0, [r7, #12]
 801f514:	f7ff fb42 	bl	801eb9c <lv_page_scroll_ver>
 801f518:	e07f      	b.n	801f61a <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_RIGHT) {
 801f51a:	6a3b      	ldr	r3, [r7, #32]
 801f51c:	2b13      	cmp	r3, #19
 801f51e:	d128      	bne.n	801f572 <lv_page_signal+0x312>
            /*If the page can't be scrolled horizontally because it's not wide enough then scroll it
             * vertically*/
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801f520:	68f8      	ldr	r0, [r7, #12]
 801f522:	f7ff f865 	bl	801e5f0 <lv_page_get_scrl_width>
 801f526:	4603      	mov	r3, r0
 801f528:	461c      	mov	r4, r3
 801f52a:	68f8      	ldr	r0, [r7, #12]
 801f52c:	f7ea fb8a 	bl	8009c44 <lv_obj_get_width>
 801f530:	4603      	mov	r3, r0
 801f532:	429c      	cmp	r4, r3
 801f534:	dc0e      	bgt.n	801f554 <lv_page_signal+0x2f4>
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801f536:	68f8      	ldr	r0, [r7, #12]
 801f538:	f7ea fb92 	bl	8009c60 <lv_obj_get_height>
 801f53c:	4603      	mov	r3, r0
 801f53e:	425b      	negs	r3, r3
 801f540:	2b00      	cmp	r3, #0
 801f542:	da00      	bge.n	801f546 <lv_page_signal+0x2e6>
 801f544:	3303      	adds	r3, #3
 801f546:	109b      	asrs	r3, r3, #2
 801f548:	b21b      	sxth	r3, r3
 801f54a:	4619      	mov	r1, r3
 801f54c:	68f8      	ldr	r0, [r7, #12]
 801f54e:	f7ff fb25 	bl	801eb9c <lv_page_scroll_ver>
 801f552:	e062      	b.n	801f61a <lv_page_signal+0x3ba>
            else
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
 801f554:	68f8      	ldr	r0, [r7, #12]
 801f556:	f7ea fb75 	bl	8009c44 <lv_obj_get_width>
 801f55a:	4603      	mov	r3, r0
 801f55c:	425b      	negs	r3, r3
 801f55e:	2b00      	cmp	r3, #0
 801f560:	da00      	bge.n	801f564 <lv_page_signal+0x304>
 801f562:	3303      	adds	r3, #3
 801f564:	109b      	asrs	r3, r3, #2
 801f566:	b21b      	sxth	r3, r3
 801f568:	4619      	mov	r1, r3
 801f56a:	68f8      	ldr	r0, [r7, #12]
 801f56c:	f7ff fad8 	bl	801eb20 <lv_page_scroll_hor>
 801f570:	e053      	b.n	801f61a <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_LEFT) {
 801f572:	6a3b      	ldr	r3, [r7, #32]
 801f574:	2b14      	cmp	r3, #20
 801f576:	d150      	bne.n	801f61a <lv_page_signal+0x3ba>
            /*If the page can't be scrolled horizontally because it's not wide enough then scroll it
             * vertically*/
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801f578:	68f8      	ldr	r0, [r7, #12]
 801f57a:	f7ff f839 	bl	801e5f0 <lv_page_get_scrl_width>
 801f57e:	4603      	mov	r3, r0
 801f580:	461c      	mov	r4, r3
 801f582:	68f8      	ldr	r0, [r7, #12]
 801f584:	f7ea fb5e 	bl	8009c44 <lv_obj_get_width>
 801f588:	4603      	mov	r3, r0
 801f58a:	429c      	cmp	r4, r3
 801f58c:	dc0d      	bgt.n	801f5aa <lv_page_signal+0x34a>
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801f58e:	68f8      	ldr	r0, [r7, #12]
 801f590:	f7ea fb66 	bl	8009c60 <lv_obj_get_height>
 801f594:	4603      	mov	r3, r0
 801f596:	2b00      	cmp	r3, #0
 801f598:	da00      	bge.n	801f59c <lv_page_signal+0x33c>
 801f59a:	3303      	adds	r3, #3
 801f59c:	109b      	asrs	r3, r3, #2
 801f59e:	b21b      	sxth	r3, r3
 801f5a0:	4619      	mov	r1, r3
 801f5a2:	68f8      	ldr	r0, [r7, #12]
 801f5a4:	f7ff fafa 	bl	801eb9c <lv_page_scroll_ver>
 801f5a8:	e037      	b.n	801f61a <lv_page_signal+0x3ba>
            else
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 801f5aa:	68f8      	ldr	r0, [r7, #12]
 801f5ac:	f7ea fb4a 	bl	8009c44 <lv_obj_get_width>
 801f5b0:	4603      	mov	r3, r0
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	da00      	bge.n	801f5b8 <lv_page_signal+0x358>
 801f5b6:	3303      	adds	r3, #3
 801f5b8:	109b      	asrs	r3, r3, #2
 801f5ba:	b21b      	sxth	r3, r3
 801f5bc:	4619      	mov	r1, r3
 801f5be:	68f8      	ldr	r0, [r7, #12]
 801f5c0:	f7ff faae 	bl	801eb20 <lv_page_scroll_hor>
 801f5c4:	e029      	b.n	801f61a <lv_page_signal+0x3ba>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801f5c6:	7afb      	ldrb	r3, [r7, #11]
 801f5c8:	2b12      	cmp	r3, #18
 801f5ca:	d105      	bne.n	801f5d8 <lv_page_signal+0x378>
        bool * editable = (bool *)param;
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	627b      	str	r3, [r7, #36]	; 0x24
        *editable       = true;
 801f5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5d2:	2201      	movs	r2, #1
 801f5d4:	701a      	strb	r2, [r3, #0]
 801f5d6:	e020      	b.n	801f61a <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801f5d8:	7afb      	ldrb	r3, [r7, #11]
 801f5da:	2b06      	cmp	r3, #6
 801f5dc:	d11d      	bne.n	801f61a <lv_page_signal+0x3ba>
        lv_obj_type_t * buf = param;
 801f5de:	687b      	ldr	r3, [r7, #4]
 801f5e0:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801f5e2:	2300      	movs	r3, #0
 801f5e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801f5e8:	e00b      	b.n	801f602 <lv_page_signal+0x3a2>
            if(buf->type[i] == NULL) break;
 801f5ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801f5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d009      	beq.n	801f60c <lv_page_signal+0x3ac>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801f5f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801f5fc:	3301      	adds	r3, #1
 801f5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801f602:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801f606:	2b06      	cmp	r3, #6
 801f608:	d9ef      	bls.n	801f5ea <lv_page_signal+0x38a>
 801f60a:	e000      	b.n	801f60e <lv_page_signal+0x3ae>
            if(buf->type[i] == NULL) break;
 801f60c:	bf00      	nop
        }
        buf->type[i] = "lv_page";
 801f60e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801f612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f614:	4904      	ldr	r1, [pc, #16]	; (801f628 <lv_page_signal+0x3c8>)
 801f616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801f61a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801f61e:	4618      	mov	r0, r3
 801f620:	373c      	adds	r7, #60	; 0x3c
 801f622:	46bd      	mov	sp, r7
 801f624:	bd90      	pop	{r4, r7, pc}
 801f626:	bf00      	nop
 801f628:	0802c960 	.word	0x0802c960

0801f62c <lv_page_scrollable_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_scrollable_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)
{
 801f62c:	b590      	push	{r4, r7, lr}
 801f62e:	b097      	sub	sp, #92	; 0x5c
 801f630:	af00      	add	r7, sp, #0
 801f632:	60f8      	str	r0, [r7, #12]
 801f634:	460b      	mov	r3, r1
 801f636:	607a      	str	r2, [r7, #4]
 801f638:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(scrl, sign, param);
 801f63a:	4bbf      	ldr	r3, [pc, #764]	; (801f938 <lv_page_scrollable_signal+0x30c>)
 801f63c:	681b      	ldr	r3, [r3, #0]
 801f63e:	7af9      	ldrb	r1, [r7, #11]
 801f640:	687a      	ldr	r2, [r7, #4]
 801f642:	68f8      	ldr	r0, [r7, #12]
 801f644:	4798      	blx	r3
 801f646:	4603      	mov	r3, r0
 801f648:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    if(res != LV_RES_OK) return res;
 801f64c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 801f650:	2b01      	cmp	r3, #1
 801f652:	d002      	beq.n	801f65a <lv_page_scrollable_signal+0x2e>
 801f654:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 801f658:	e37e      	b.n	801fd58 <lv_page_scrollable_signal+0x72c>

    lv_obj_t * page               = lv_obj_get_parent(scrl);
 801f65a:	68f8      	ldr	r0, [r7, #12]
 801f65c:	f7ea fa88 	bl	8009b70 <lv_obj_get_parent>
 801f660:	64f8      	str	r0, [r7, #76]	; 0x4c
    const lv_style_t * page_style = lv_obj_get_style(page);
 801f662:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f664:	f7ea fb1e 	bl	8009ca4 <lv_obj_get_style>
 801f668:	64b8      	str	r0, [r7, #72]	; 0x48
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 801f66a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f66c:	f7ea fbd5 	bl	8009e1a <lv_obj_get_ext_attr>
 801f670:	6478      	str	r0, [r7, #68]	; 0x44

    if(sign == LV_SIGNAL_CORD_CHG) {
 801f672:	7afb      	ldrb	r3, [r7, #11]
 801f674:	2b02      	cmp	r3, #2
 801f676:	f040 82c8 	bne.w	801fc0a <lv_page_scrollable_signal+0x5de>
        /*Limit the position of the scrollable object to be always visible
         * (Do not let its edge inner then its parent respective edge)*/
        lv_coord_t new_x = lv_obj_get_x(scrl);
 801f67a:	68f8      	ldr	r0, [r7, #12]
 801f67c:	f7ea fab0 	bl	8009be0 <lv_obj_get_x>
 801f680:	4603      	mov	r3, r0
 801f682:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        lv_coord_t new_y = lv_obj_get_y(scrl);
 801f686:	68f8      	ldr	r0, [r7, #12]
 801f688:	f7ea fac3 	bl	8009c12 <lv_obj_get_y>
 801f68c:	4603      	mov	r3, r0
 801f68e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        bool refr_x      = false;
 801f692:	2300      	movs	r3, #0
 801f694:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        bool refr_y      = false;
 801f698:	2300      	movs	r3, #0
 801f69a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        lv_area_t page_coords;
        lv_area_t scrl_coords;
        lv_obj_get_coords(scrl, &scrl_coords);
 801f69e:	f107 031c 	add.w	r3, r7, #28
 801f6a2:	4619      	mov	r1, r3
 801f6a4:	68f8      	ldr	r0, [r7, #12]
 801f6a6:	f7ea fa8c 	bl	8009bc2 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 801f6aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f6ae:	4619      	mov	r1, r3
 801f6b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f6b2:	f7ea fa86 	bl	8009bc2 <lv_obj_get_coords>

        lv_area_t * ori_coords = (lv_area_t *)param;
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 801f6ba:	68fb      	ldr	r3, [r7, #12]
 801f6bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f6c0:	b29a      	uxth	r2, r3
 801f6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f6c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f6c8:	b29b      	uxth	r3, r3
 801f6ca:	1ad3      	subs	r3, r2, r3
 801f6cc:	b29b      	uxth	r3, r3
 801f6ce:	877b      	strh	r3, [r7, #58]	; 0x3a
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 801f6d0:	68fb      	ldr	r3, [r7, #12]
 801f6d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f6d6:	b29a      	uxth	r2, r3
 801f6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f6da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f6de:	b29b      	uxth	r3, r3
 801f6e0:	1ad3      	subs	r3, r2, r3
 801f6e2:	b29b      	uxth	r3, r3
 801f6e4:	873b      	strh	r3, [r7, #56]	; 0x38
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 801f6e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f6e8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801f6ec:	b29a      	uxth	r2, r3
 801f6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f6f0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801f6f4:	b29b      	uxth	r3, r3
 801f6f6:	4413      	add	r3, r2
 801f6f8:	b29b      	uxth	r3, r3
 801f6fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 801f6fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f6fe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f702:	b29a      	uxth	r2, r3
 801f704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f706:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801f70a:	b29b      	uxth	r3, r3
 801f70c:	4413      	add	r3, r2
 801f70e:	b29b      	uxth	r3, r3
 801f710:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 801f712:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f714:	f7ea fa2c 	bl	8009b70 <lv_obj_get_parent>
 801f718:	6338      	str	r0, [r7, #48]	; 0x30

        lv_indev_t * indev = lv_indev_get_act();
 801f71a:	f7e8 fcc9 	bl	80080b0 <lv_indev_get_act>
 801f71e:	62f8      	str	r0, [r7, #44]	; 0x2c
        lv_point_t drag_vect;
        lv_indev_get_vect(indev, &drag_vect);
 801f720:	f107 0318 	add.w	r3, r7, #24
 801f724:	4619      	mov	r1, r3
 801f726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f728:	f7e8 fd68 	bl	80081fc <lv_indev_get_vect>

        /* Start the scroll propagation if there is drag vector on the indev, but the drag is not
         * started yet and the scrollable is in a corner. It will enable the scroll propagation only
         * when a new scroll begins and not when the scrollable is already being scrolled.*/
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 801f72c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f72e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801f732:	f003 0301 	and.w	r3, r3, #1
 801f736:	b2db      	uxtb	r3, r3
 801f738:	2b00      	cmp	r3, #0
 801f73a:	d05d      	beq.n	801f7f8 <lv_page_scrollable_signal+0x1cc>
 801f73c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f73e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801f742:	f003 0302 	and.w	r3, r3, #2
 801f746:	b2db      	uxtb	r3, r3
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d155      	bne.n	801f7f8 <lv_page_scrollable_signal+0x1cc>
 801f74c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f74e:	f7e8 fd31 	bl	80081b4 <lv_indev_is_dragging>
 801f752:	4603      	mov	r3, r0
 801f754:	f083 0301 	eor.w	r3, r3, #1
 801f758:	b2db      	uxtb	r3, r3
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d04c      	beq.n	801f7f8 <lv_page_scrollable_signal+0x1cc>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 801f75e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801f762:	2b00      	cmp	r3, #0
 801f764:	dd0b      	ble.n	801f77e <lv_page_scrollable_signal+0x152>
 801f766:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801f76a:	461a      	mov	r2, r3
 801f76c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801f770:	4619      	mov	r1, r3
 801f772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f774:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f778:	440b      	add	r3, r1
 801f77a:	429a      	cmp	r2, r3
 801f77c:	d00f      	beq.n	801f79e <lv_page_scrollable_signal+0x172>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801f77e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 801f782:	2b00      	cmp	r3, #0
 801f784:	da38      	bge.n	801f7f8 <lv_page_scrollable_signal+0x1cc>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801f786:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f78a:	461a      	mov	r2, r3
 801f78c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801f790:	4619      	mov	r1, r3
 801f792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f794:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801f798:	1acb      	subs	r3, r1, r3
 801f79a:	429a      	cmp	r2, r3
 801f79c:	d12c      	bne.n	801f7f8 <lv_page_scrollable_signal+0x1cc>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801f79e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	dd0b      	ble.n	801f7be <lv_page_scrollable_signal+0x192>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801f7a6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801f7aa:	461a      	mov	r2, r3
 801f7ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801f7b0:	4619      	mov	r1, r3
 801f7b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f7b4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801f7b8:	440b      	add	r3, r1
 801f7ba:	429a      	cmp	r2, r3
 801f7bc:	d00f      	beq.n	801f7de <lv_page_scrollable_signal+0x1b2>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 801f7be:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801f7c2:	2b00      	cmp	r3, #0
 801f7c4:	da18      	bge.n	801f7f8 <lv_page_scrollable_signal+0x1cc>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 801f7c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f7ca:	461a      	mov	r2, r3
 801f7cc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f7d0:	4619      	mov	r1, r3
 801f7d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f7d4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801f7d8:	1acb      	subs	r3, r1, r3
 801f7da:	429a      	cmp	r2, r3
 801f7dc:	d10c      	bne.n	801f7f8 <lv_page_scrollable_signal+0x1cc>

                if(lv_obj_get_parent(page_parent) != NULL) { /*Do not propagate the scroll to a screen*/
 801f7de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f7e0:	f7ea f9c6 	bl	8009b70 <lv_obj_get_parent>
 801f7e4:	4603      	mov	r3, r0
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d006      	beq.n	801f7f8 <lv_page_scrollable_signal+0x1cc>
                    page_ext->scroll_prop_ip = 1;
 801f7ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f7ec:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801f7f0:	f043 0302 	orr.w	r3, r3, #2
 801f7f4:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
                }
            }
        }

        /*scrollable width smaller then page width? -> align to left*/
        if(lv_area_get_width(&scrl_coords) + hpad <= lv_area_get_width(&page_coords)) {
 801f7f8:	f107 031c 	add.w	r3, r7, #28
 801f7fc:	4618      	mov	r0, r3
 801f7fe:	f7fe fec9 	bl	801e594 <lv_area_get_width>
 801f802:	4603      	mov	r3, r0
 801f804:	461a      	mov	r2, r3
 801f806:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801f80a:	18d4      	adds	r4, r2, r3
 801f80c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f810:	4618      	mov	r0, r3
 801f812:	f7fe febf 	bl	801e594 <lv_area_get_width>
 801f816:	4603      	mov	r3, r0
 801f818:	429c      	cmp	r4, r3
 801f81a:	dc14      	bgt.n	801f846 <lv_page_scrollable_signal+0x21a>
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
 801f81c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801f820:	461a      	mov	r2, r3
 801f822:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801f826:	4619      	mov	r1, r3
 801f828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f82a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801f82e:	440b      	add	r3, r1
 801f830:	429a      	cmp	r2, r3
 801f832:	f000 80c8 	beq.w	801f9c6 <lv_page_scrollable_signal+0x39a>
                new_x  = page_style->body.padding.left;
 801f836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f838:	8b5b      	ldrh	r3, [r3, #26]
 801f83a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 801f83e:	2301      	movs	r3, #1
 801f840:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 801f844:	e0bf      	b.n	801f9c6 <lv_page_scrollable_signal+0x39a>
            }
        } else {
            /*If the scroll propagation is in progress revert the original coordinates (don't let
             * the page scroll)*/
            if(page_ext->scroll_prop_ip) {
 801f846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f848:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801f84c:	f003 0302 	and.w	r3, r3, #2
 801f850:	b2db      	uxtb	r3, r3
 801f852:	2b00      	cmp	r3, #0
 801f854:	d015      	beq.n	801f882 <lv_page_scrollable_signal+0x256>
                if(drag_vect.x == diff_x) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 801f856:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801f85a:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801f85e:	429a      	cmp	r2, r3
 801f860:	f040 80b1 	bne.w	801f9c6 <lv_page_scrollable_signal+0x39a>
                                               is reverted. Handle only the pos. because of drag*/
                    new_x  = ori_coords->x1 - page_coords.x1;
 801f864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f866:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f86a:	b29a      	uxth	r2, r3
 801f86c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801f870:	b29b      	uxth	r3, r3
 801f872:	1ad3      	subs	r3, r2, r3
 801f874:	b29b      	uxth	r3, r3
 801f876:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    refr_x = true;
 801f87a:	2301      	movs	r3, #1
 801f87c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 801f880:	e0a1      	b.n	801f9c6 <lv_page_scrollable_signal+0x39a>
                }
            }
            /*The edges of the scrollable can not be in the page (minus hpad) */
            else if(scrl_coords.x2 < page_coords.x2 - page_style->body.padding.right) {
 801f882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f886:	461a      	mov	r2, r3
 801f888:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f88c:	4619      	mov	r1, r3
 801f88e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f890:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801f894:	1acb      	subs	r3, r1, r3
 801f896:	429a      	cmp	r2, r3
 801f898:	da50      	bge.n	801f93c <lv_page_scrollable_signal+0x310>
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 801f89a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f89e:	4618      	mov	r0, r3
 801f8a0:	f7fe fe78 	bl	801e594 <lv_area_get_width>
 801f8a4:	4603      	mov	r3, r0
 801f8a6:	b29c      	uxth	r4, r3
 801f8a8:	f107 031c 	add.w	r3, r7, #28
 801f8ac:	4618      	mov	r0, r3
 801f8ae:	f7fe fe71 	bl	801e594 <lv_area_get_width>
 801f8b2:	4603      	mov	r3, r0
 801f8b4:	b29b      	uxth	r3, r3
 801f8b6:	1ae3      	subs	r3, r4, r3
 801f8b8:	b29a      	uxth	r2, r3
                        page_style->body.padding.right; /* Right align */
 801f8ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f8bc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801f8c0:	b29b      	uxth	r3, r3
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 801f8c2:	1ad3      	subs	r3, r2, r3
 801f8c4:	b29b      	uxth	r3, r3
 801f8c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 801f8ca:	2301      	movs	r3, #1
 801f8cc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801f8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f8d6:	f003 0301 	and.w	r3, r3, #1
 801f8da:	b2db      	uxtb	r3, r3
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	d072      	beq.n	801f9c6 <lv_page_scrollable_signal+0x39a>
 801f8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f8e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f8e6:	f003 0310 	and.w	r3, r3, #16
 801f8ea:	b2db      	uxtb	r3, r3
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	d16a      	bne.n	801f9c6 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801f8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f8f6:	f003 0308 	and.w	r3, r3, #8
 801f8fa:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d162      	bne.n	801f9c6 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801f900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f906:	f003 0302 	and.w	r3, r3, #2
 801f90a:	b2db      	uxtb	r3, r3
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d15a      	bne.n	801f9c6 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.bottom_ip == 0) {
 801f910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f916:	f003 0304 	and.w	r3, r3, #4
 801f91a:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	d152      	bne.n	801f9c6 <lv_page_scrollable_signal+0x39a>
                    lv_page_start_edge_flash(page);
 801f920:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f922:	f7ff f979 	bl	801ec18 <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 801f926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f928:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801f92c:	f043 0308 	orr.w	r3, r3, #8
 801f930:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801f934:	e047      	b.n	801f9c6 <lv_page_scrollable_signal+0x39a>
 801f936:	bf00      	nop
 801f938:	200177ec 	.word	0x200177ec
                }
#endif
            } else if(scrl_coords.x1 > page_coords.x1 + page_style->body.padding.left) {
 801f93c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801f940:	461a      	mov	r2, r3
 801f942:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801f946:	4619      	mov	r1, r3
 801f948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f94a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801f94e:	440b      	add	r3, r1
 801f950:	429a      	cmp	r2, r3
 801f952:	dd38      	ble.n	801f9c6 <lv_page_scrollable_signal+0x39a>
                new_x  = page_style->body.padding.left; /*Left align*/
 801f954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f956:	8b5b      	ldrh	r3, [r3, #26]
 801f958:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 801f95c:	2301      	movs	r3, #1
 801f95e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801f962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f968:	f003 0301 	and.w	r3, r3, #1
 801f96c:	b2db      	uxtb	r3, r3
 801f96e:	2b00      	cmp	r3, #0
 801f970:	d029      	beq.n	801f9c6 <lv_page_scrollable_signal+0x39a>
 801f972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f978:	f003 0310 	and.w	r3, r3, #16
 801f97c:	b2db      	uxtb	r3, r3
 801f97e:	2b00      	cmp	r3, #0
 801f980:	d121      	bne.n	801f9c6 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801f982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f988:	f003 0308 	and.w	r3, r3, #8
 801f98c:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801f98e:	2b00      	cmp	r3, #0
 801f990:	d119      	bne.n	801f9c6 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801f992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f998:	f003 0302 	and.w	r3, r3, #2
 801f99c:	b2db      	uxtb	r3, r3
 801f99e:	2b00      	cmp	r3, #0
 801f9a0:	d111      	bne.n	801f9c6 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.bottom_ip == 0) {
 801f9a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f9a8:	f003 0304 	and.w	r3, r3, #4
 801f9ac:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d109      	bne.n	801f9c6 <lv_page_scrollable_signal+0x39a>
                    lv_page_start_edge_flash(page);
 801f9b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f9b4:	f7ff f930 	bl	801ec18 <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 801f9b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f9ba:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801f9be:	f043 0310 	orr.w	r3, r3, #16
 801f9c2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
#endif
            }
        }

        /*scrollable height smaller then page height? -> align to top*/
        if(lv_area_get_height(&scrl_coords) + vpad <= lv_area_get_height(&page_coords)) {
 801f9c6:	f107 031c 	add.w	r3, r7, #28
 801f9ca:	4618      	mov	r0, r3
 801f9cc:	f7fe fdf9 	bl	801e5c2 <lv_area_get_height>
 801f9d0:	4603      	mov	r3, r0
 801f9d2:	461a      	mov	r2, r3
 801f9d4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801f9d8:	18d4      	adds	r4, r2, r3
 801f9da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f9de:	4618      	mov	r0, r3
 801f9e0:	f7fe fdef 	bl	801e5c2 <lv_area_get_height>
 801f9e4:	4603      	mov	r3, r0
 801f9e6:	429c      	cmp	r4, r3
 801f9e8:	dc14      	bgt.n	801fa14 <lv_page_scrollable_signal+0x3e8>
            if(scrl_coords.y1 != page_coords.y1 + page_style->body.padding.top) {
 801f9ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801f9ee:	461a      	mov	r2, r3
 801f9f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801f9f4:	4619      	mov	r1, r3
 801f9f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f9f8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f9fc:	440b      	add	r3, r1
 801f9fe:	429a      	cmp	r2, r3
 801fa00:	f000 80c5 	beq.w	801fb8e <lv_page_scrollable_signal+0x562>
                new_y  = page_style->body.padding.top;
 801fa04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fa06:	8adb      	ldrh	r3, [r3, #22]
 801fa08:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 801fa0c:	2301      	movs	r3, #1
 801fa0e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 801fa12:	e0bc      	b.n	801fb8e <lv_page_scrollable_signal+0x562>
            }
        } else {
            /*If the scroll propagation is in progress revert the original coordinates (don't let
             * the page scroll)*/
            if(page_ext->scroll_prop_ip) {
 801fa14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fa16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801fa1a:	f003 0302 	and.w	r3, r3, #2
 801fa1e:	b2db      	uxtb	r3, r3
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	d015      	beq.n	801fa50 <lv_page_scrollable_signal+0x424>
                if(drag_vect.y == diff_y) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 801fa24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801fa28:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801fa2c:	429a      	cmp	r2, r3
 801fa2e:	f040 80ae 	bne.w	801fb8e <lv_page_scrollable_signal+0x562>
                                               is reverted. Handle only the pos. because of drag*/
                    new_y  = ori_coords->y1 - page_coords.y1;
 801fa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fa34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fa38:	b29a      	uxth	r2, r3
 801fa3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801fa3e:	b29b      	uxth	r3, r3
 801fa40:	1ad3      	subs	r3, r2, r3
 801fa42:	b29b      	uxth	r3, r3
 801fa44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                    refr_y = true;
 801fa48:	2301      	movs	r3, #1
 801fa4a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 801fa4e:	e09e      	b.n	801fb8e <lv_page_scrollable_signal+0x562>
                }
            }
            /*The edges of the scrollable can not be in the page (minus vpad) */
            else if(scrl_coords.y2 < page_coords.y2 - page_style->body.padding.bottom) {
 801fa50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801fa54:	461a      	mov	r2, r3
 801fa56:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801fa5a:	4619      	mov	r1, r3
 801fa5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fa5e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801fa62:	1acb      	subs	r3, r1, r3
 801fa64:	429a      	cmp	r2, r3
 801fa66:	da4d      	bge.n	801fb04 <lv_page_scrollable_signal+0x4d8>
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 801fa68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fa6c:	4618      	mov	r0, r3
 801fa6e:	f7fe fda8 	bl	801e5c2 <lv_area_get_height>
 801fa72:	4603      	mov	r3, r0
 801fa74:	b29c      	uxth	r4, r3
 801fa76:	f107 031c 	add.w	r3, r7, #28
 801fa7a:	4618      	mov	r0, r3
 801fa7c:	f7fe fda1 	bl	801e5c2 <lv_area_get_height>
 801fa80:	4603      	mov	r3, r0
 801fa82:	b29b      	uxth	r3, r3
 801fa84:	1ae3      	subs	r3, r4, r3
 801fa86:	b29a      	uxth	r2, r3
                        page_style->body.padding.bottom; /* Bottom align */
 801fa88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fa8a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801fa8e:	b29b      	uxth	r3, r3
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 801fa90:	1ad3      	subs	r3, r2, r3
 801fa92:	b29b      	uxth	r3, r3
 801fa94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 801fa98:	2301      	movs	r3, #1
 801fa9a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801fa9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801faa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801faa4:	f003 0301 	and.w	r3, r3, #1
 801faa8:	b2db      	uxtb	r3, r3
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d06f      	beq.n	801fb8e <lv_page_scrollable_signal+0x562>
 801faae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fab4:	f003 0310 	and.w	r3, r3, #16
 801fab8:	b2db      	uxtb	r3, r3
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d167      	bne.n	801fb8e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801fabe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fac4:	f003 0308 	and.w	r3, r3, #8
 801fac8:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801faca:	2b00      	cmp	r3, #0
 801facc:	d15f      	bne.n	801fb8e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801face:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fad4:	f003 0302 	and.w	r3, r3, #2
 801fad8:	b2db      	uxtb	r3, r3
 801fada:	2b00      	cmp	r3, #0
 801fadc:	d157      	bne.n	801fb8e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.bottom_ip == 0) {
 801fade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fae4:	f003 0304 	and.w	r3, r3, #4
 801fae8:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801faea:	2b00      	cmp	r3, #0
 801faec:	d14f      	bne.n	801fb8e <lv_page_scrollable_signal+0x562>
                    lv_page_start_edge_flash(page);
 801faee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801faf0:	f7ff f892 	bl	801ec18 <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 801faf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801faf6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801fafa:	f043 0304 	orr.w	r3, r3, #4
 801fafe:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801fb02:	e044      	b.n	801fb8e <lv_page_scrollable_signal+0x562>
                }
#endif
            } else if(scrl_coords.y1 > page_coords.y1 + page_style->body.padding.top) {
 801fb04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801fb08:	461a      	mov	r2, r3
 801fb0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801fb0e:	4619      	mov	r1, r3
 801fb10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fb12:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801fb16:	440b      	add	r3, r1
 801fb18:	429a      	cmp	r2, r3
 801fb1a:	dd38      	ble.n	801fb8e <lv_page_scrollable_signal+0x562>
                new_y  = page_style->body.padding.top; /*Top align*/
 801fb1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fb1e:	8adb      	ldrh	r3, [r3, #22]
 801fb20:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 801fb24:	2301      	movs	r3, #1
 801fb26:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801fb2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fb30:	f003 0301 	and.w	r3, r3, #1
 801fb34:	b2db      	uxtb	r3, r3
 801fb36:	2b00      	cmp	r3, #0
 801fb38:	d029      	beq.n	801fb8e <lv_page_scrollable_signal+0x562>
 801fb3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fb40:	f003 0310 	and.w	r3, r3, #16
 801fb44:	b2db      	uxtb	r3, r3
 801fb46:	2b00      	cmp	r3, #0
 801fb48:	d121      	bne.n	801fb8e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801fb4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fb50:	f003 0308 	and.w	r3, r3, #8
 801fb54:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801fb56:	2b00      	cmp	r3, #0
 801fb58:	d119      	bne.n	801fb8e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801fb5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fb60:	f003 0302 	and.w	r3, r3, #2
 801fb64:	b2db      	uxtb	r3, r3
 801fb66:	2b00      	cmp	r3, #0
 801fb68:	d111      	bne.n	801fb8e <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.bottom_ip == 0) {
 801fb6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fb70:	f003 0304 	and.w	r3, r3, #4
 801fb74:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	d109      	bne.n	801fb8e <lv_page_scrollable_signal+0x562>
                    lv_page_start_edge_flash(page);
 801fb7a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801fb7c:	f7ff f84c 	bl	801ec18 <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 801fb80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fb82:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801fb86:	f043 0302 	orr.w	r3, r3, #2
 801fb8a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                }
#endif
            }
        }

        if(refr_x || refr_y) {
 801fb8e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d103      	bne.n	801fb9e <lv_page_scrollable_signal+0x572>
 801fb96:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d031      	beq.n	801fc02 <lv_page_scrollable_signal+0x5d6>
            lv_obj_set_pos(scrl, new_x, new_y);
 801fb9e:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 801fba2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801fba6:	4619      	mov	r1, r3
 801fba8:	68f8      	ldr	r0, [r7, #12]
 801fbaa:	f7e9 f809 	bl	8008bc0 <lv_obj_set_pos>

            if(page_ext->scroll_prop_ip) {
 801fbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fbb0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801fbb4:	f003 0302 	and.w	r3, r3, #2
 801fbb8:	b2db      	uxtb	r3, r3
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d021      	beq.n	801fc02 <lv_page_scrollable_signal+0x5d6>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 801fbbe:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	d00c      	beq.n	801fbe0 <lv_page_scrollable_signal+0x5b4>
 801fbc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801fbc8:	f7ea f823 	bl	8009c12 <lv_obj_get_y>
 801fbcc:	4603      	mov	r3, r0
 801fbce:	b29a      	uxth	r2, r3
 801fbd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801fbd2:	4413      	add	r3, r2
 801fbd4:	b29b      	uxth	r3, r3
 801fbd6:	b21b      	sxth	r3, r3
 801fbd8:	4619      	mov	r1, r3
 801fbda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801fbdc:	f7e9 f890 	bl	8008d00 <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 801fbe0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d00c      	beq.n	801fc02 <lv_page_scrollable_signal+0x5d6>
 801fbe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801fbea:	f7e9 fff9 	bl	8009be0 <lv_obj_get_x>
 801fbee:	4603      	mov	r3, r0
 801fbf0:	b29a      	uxth	r2, r3
 801fbf2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801fbf4:	4413      	add	r3, r2
 801fbf6:	b29b      	uxth	r3, r3
 801fbf8:	b21b      	sxth	r3, r3
 801fbfa:	4619      	mov	r1, r3
 801fbfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801fbfe:	f7e9 f86a 	bl	8008cd6 <lv_obj_set_x>
            }
        }

        lv_page_sb_refresh(page);
 801fc02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801fc04:	f000 f8da 	bl	801fdbc <lv_page_sb_refresh>
 801fc08:	e0a4      	b.n	801fd54 <lv_page_scrollable_signal+0x728>
    } else if(sign == LV_SIGNAL_DRAG_END) {
 801fc0a:	7afb      	ldrb	r3, [r7, #11]
 801fc0c:	2b0e      	cmp	r3, #14
 801fc0e:	f040 80a1 	bne.w	801fd54 <lv_page_scrollable_signal+0x728>

        /*Scroll propagation is finished on drag end*/
        page_ext->scroll_prop_ip = 0;
 801fc12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fc14:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801fc18:	f36f 0341 	bfc	r3, #1, #1
 801fc1c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e

        /*Hide scrollbars if required*/
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 801fc20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fc22:	7f1b      	ldrb	r3, [r3, #28]
 801fc24:	f003 031c 	and.w	r3, r3, #28
 801fc28:	b2db      	uxtb	r3, r3
 801fc2a:	2b08      	cmp	r3, #8
 801fc2c:	f040 8092 	bne.w	801fd54 <lv_page_scrollable_signal+0x728>
            lv_disp_t * disp = lv_obj_get_disp(page);
 801fc30:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801fc32:	f7e9 ff63 	bl	8009afc <lv_obj_get_disp>
 801fc36:	6438      	str	r0, [r7, #64]	; 0x40
            lv_area_t sb_area_tmp;
            if(page_ext->sb.hor_draw) {
 801fc38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fc3a:	7f1b      	ldrb	r3, [r3, #28]
 801fc3c:	f003 0301 	and.w	r3, r3, #1
 801fc40:	b2db      	uxtb	r3, r3
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d03f      	beq.n	801fcc6 <lv_page_scrollable_signal+0x69a>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
 801fc46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fc48:	f103 020c 	add.w	r2, r3, #12
 801fc4c:	f107 0310 	add.w	r3, r7, #16
 801fc50:	4611      	mov	r1, r2
 801fc52:	4618      	mov	r0, r3
 801fc54:	f7fe fc90 	bl	801e578 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 801fc58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801fc5c:	b29a      	uxth	r2, r3
 801fc5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fc60:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801fc64:	b29b      	uxth	r3, r3
 801fc66:	4413      	add	r3, r2
 801fc68:	b29b      	uxth	r3, r3
 801fc6a:	b21b      	sxth	r3, r3
 801fc6c:	823b      	strh	r3, [r7, #16]
                sb_area_tmp.y1 += page->coords.y1;
 801fc6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801fc72:	b29a      	uxth	r2, r3
 801fc74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fc76:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801fc7a:	b29b      	uxth	r3, r3
 801fc7c:	4413      	add	r3, r2
 801fc7e:	b29b      	uxth	r3, r3
 801fc80:	b21b      	sxth	r3, r3
 801fc82:	827b      	strh	r3, [r7, #18]
                sb_area_tmp.x2 += page->coords.x1;
 801fc84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801fc88:	b29a      	uxth	r2, r3
 801fc8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fc8c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801fc90:	b29b      	uxth	r3, r3
 801fc92:	4413      	add	r3, r2
 801fc94:	b29b      	uxth	r3, r3
 801fc96:	b21b      	sxth	r3, r3
 801fc98:	82bb      	strh	r3, [r7, #20]
                sb_area_tmp.y2 += page->coords.y1;
 801fc9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801fc9e:	b29a      	uxth	r2, r3
 801fca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fca2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801fca6:	b29b      	uxth	r3, r3
 801fca8:	4413      	add	r3, r2
 801fcaa:	b29b      	uxth	r3, r3
 801fcac:	b21b      	sxth	r3, r3
 801fcae:	82fb      	strh	r3, [r7, #22]
                lv_inv_area(disp, &sb_area_tmp);
 801fcb0:	f107 0310 	add.w	r3, r7, #16
 801fcb4:	4619      	mov	r1, r3
 801fcb6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801fcb8:	f7ea fb08 	bl	800a2cc <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 801fcbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fcbe:	7f13      	ldrb	r3, [r2, #28]
 801fcc0:	f36f 0300 	bfc	r3, #0, #1
 801fcc4:	7713      	strb	r3, [r2, #28]
            }
            if(page_ext->sb.ver_draw) {
 801fcc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fcc8:	7f1b      	ldrb	r3, [r3, #28]
 801fcca:	f003 0302 	and.w	r3, r3, #2
 801fcce:	b2db      	uxtb	r3, r3
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	d03f      	beq.n	801fd54 <lv_page_scrollable_signal+0x728>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
 801fcd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fcd6:	f103 0214 	add.w	r2, r3, #20
 801fcda:	f107 0310 	add.w	r3, r7, #16
 801fcde:	4611      	mov	r1, r2
 801fce0:	4618      	mov	r0, r3
 801fce2:	f7fe fc49 	bl	801e578 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 801fce6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801fcea:	b29a      	uxth	r2, r3
 801fcec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fcee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801fcf2:	b29b      	uxth	r3, r3
 801fcf4:	4413      	add	r3, r2
 801fcf6:	b29b      	uxth	r3, r3
 801fcf8:	b21b      	sxth	r3, r3
 801fcfa:	823b      	strh	r3, [r7, #16]
                sb_area_tmp.y1 += page->coords.y1;
 801fcfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801fd00:	b29a      	uxth	r2, r3
 801fd02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fd04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801fd08:	b29b      	uxth	r3, r3
 801fd0a:	4413      	add	r3, r2
 801fd0c:	b29b      	uxth	r3, r3
 801fd0e:	b21b      	sxth	r3, r3
 801fd10:	827b      	strh	r3, [r7, #18]
                sb_area_tmp.x2 += page->coords.x1;
 801fd12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801fd16:	b29a      	uxth	r2, r3
 801fd18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fd1a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801fd1e:	b29b      	uxth	r3, r3
 801fd20:	4413      	add	r3, r2
 801fd22:	b29b      	uxth	r3, r3
 801fd24:	b21b      	sxth	r3, r3
 801fd26:	82bb      	strh	r3, [r7, #20]
                sb_area_tmp.y2 += page->coords.y1;
 801fd28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801fd2c:	b29a      	uxth	r2, r3
 801fd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fd30:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801fd34:	b29b      	uxth	r3, r3
 801fd36:	4413      	add	r3, r2
 801fd38:	b29b      	uxth	r3, r3
 801fd3a:	b21b      	sxth	r3, r3
 801fd3c:	82fb      	strh	r3, [r7, #22]
                lv_inv_area(disp, &sb_area_tmp);
 801fd3e:	f107 0310 	add.w	r3, r7, #16
 801fd42:	4619      	mov	r1, r3
 801fd44:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801fd46:	f7ea fac1 	bl	800a2cc <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 801fd4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fd4c:	7f13      	ldrb	r3, [r2, #28]
 801fd4e:	f36f 0341 	bfc	r3, #1, #1
 801fd52:	7713      	strb	r3, [r2, #28]
            }
        }
    }

    return res;
 801fd54:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
}
 801fd58:	4618      	mov	r0, r3
 801fd5a:	375c      	adds	r7, #92	; 0x5c
 801fd5c:	46bd      	mov	sp, r7
 801fd5e:	bd90      	pop	{r4, r7, pc}

0801fd60 <scrl_def_event_cb>:
 * @param scrl pointer to the page's scrollable object
 * @param event type of the event
 * @param data data of the event
 */
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)
{
 801fd60:	b580      	push	{r7, lr}
 801fd62:	b084      	sub	sp, #16
 801fd64:	af00      	add	r7, sp, #0
 801fd66:	6078      	str	r0, [r7, #4]
 801fd68:	460b      	mov	r3, r1
 801fd6a:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * page = lv_obj_get_parent(scrl);
 801fd6c:	6878      	ldr	r0, [r7, #4]
 801fd6e:	f7e9 feff 	bl	8009b70 <lv_obj_get_parent>
 801fd72:	60f8      	str	r0, [r7, #12]

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 801fd74:	78fb      	ldrb	r3, [r7, #3]
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	d014      	beq.n	801fda4 <scrl_def_event_cb+0x44>
 801fd7a:	78fb      	ldrb	r3, [r7, #3]
 801fd7c:	2b01      	cmp	r3, #1
 801fd7e:	d011      	beq.n	801fda4 <scrl_def_event_cb+0x44>
 801fd80:	78fb      	ldrb	r3, [r7, #3]
 801fd82:	2b02      	cmp	r3, #2
 801fd84:	d00e      	beq.n	801fda4 <scrl_def_event_cb+0x44>
 801fd86:	78fb      	ldrb	r3, [r7, #3]
 801fd88:	2b07      	cmp	r3, #7
 801fd8a:	d00b      	beq.n	801fda4 <scrl_def_event_cb+0x44>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
 801fd8c:	78fb      	ldrb	r3, [r7, #3]
 801fd8e:	2b03      	cmp	r3, #3
 801fd90:	d008      	beq.n	801fda4 <scrl_def_event_cb+0x44>
 801fd92:	78fb      	ldrb	r3, [r7, #3]
 801fd94:	2b06      	cmp	r3, #6
 801fd96:	d005      	beq.n	801fda4 <scrl_def_event_cb+0x44>
 801fd98:	78fb      	ldrb	r3, [r7, #3]
 801fd9a:	2b04      	cmp	r3, #4
 801fd9c:	d002      	beq.n	801fda4 <scrl_def_event_cb+0x44>
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT) {
 801fd9e:	78fb      	ldrb	r3, [r7, #3]
 801fda0:	2b05      	cmp	r3, #5
 801fda2:	d107      	bne.n	801fdb4 <scrl_def_event_cb+0x54>
        lv_event_send(page, event, lv_event_get_data());
 801fda4:	f7e9 fe44 	bl	8009a30 <lv_event_get_data>
 801fda8:	4602      	mov	r2, r0
 801fdaa:	78fb      	ldrb	r3, [r7, #3]
 801fdac:	4619      	mov	r1, r3
 801fdae:	68f8      	ldr	r0, [r7, #12]
 801fdb0:	f7e9 fdb9 	bl	8009926 <lv_event_send>
    }
    /*clang-format on*/
}
 801fdb4:	bf00      	nop
 801fdb6:	3710      	adds	r7, #16
 801fdb8:	46bd      	mov	sp, r7
 801fdba:	bd80      	pop	{r7, pc}

0801fdbc <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 801fdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fdbe:	b08d      	sub	sp, #52	; 0x34
 801fdc0:	af00      	add	r7, sp, #0
 801fdc2:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801fdc4:	6878      	ldr	r0, [r7, #4]
 801fdc6:	f7ea f828 	bl	8009e1a <lv_obj_get_ext_attr>
 801fdca:	62b8      	str	r0, [r7, #40]	; 0x28
    const lv_style_t * style = lv_obj_get_style(page);
 801fdcc:	6878      	ldr	r0, [r7, #4]
 801fdce:	f7e9 ff69 	bl	8009ca4 <lv_obj_get_style>
 801fdd2:	6278      	str	r0, [r7, #36]	; 0x24
    lv_obj_t * scrl          = ext->scrl;
 801fdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fdd6:	685b      	ldr	r3, [r3, #4]
 801fdd8:	623b      	str	r3, [r7, #32]
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 801fdda:	6a38      	ldr	r0, [r7, #32]
 801fddc:	f7e9 ff32 	bl	8009c44 <lv_obj_get_width>
 801fde0:	4603      	mov	r3, r0
 801fde2:	83fb      	strh	r3, [r7, #30]
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
 801fde4:	6a38      	ldr	r0, [r7, #32]
 801fde6:	f7e9 ff3b 	bl	8009c60 <lv_obj_get_height>
 801fdea:	4603      	mov	r3, r0
 801fdec:	83bb      	strh	r3, [r7, #28]
    lv_coord_t obj_w  = lv_obj_get_width(page);
 801fdee:	6878      	ldr	r0, [r7, #4]
 801fdf0:	f7e9 ff28 	bl	8009c44 <lv_obj_get_width>
 801fdf4:	4603      	mov	r3, r0
 801fdf6:	837b      	strh	r3, [r7, #26]
    lv_coord_t obj_h  = lv_obj_get_height(page);
 801fdf8:	6878      	ldr	r0, [r7, #4]
 801fdfa:	f7e9 ff31 	bl	8009c60 <lv_obj_get_height>
 801fdfe:	4603      	mov	r3, r0
 801fe00:	833b      	strh	r3, [r7, #24]

    /*Always let 'scrollbar width' padding above, under, left and right to the scrollbars
     * else:
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 801fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe04:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801fe08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe0a:	689b      	ldr	r3, [r3, #8]
 801fe0c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801fe10:	4293      	cmp	r3, r2
 801fe12:	bfb8      	it	lt
 801fe14:	4613      	movlt	r3, r2
 801fe16:	82fb      	strh	r3, [r7, #22]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 801fe18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe1a:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 801fe1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe20:	689b      	ldr	r3, [r3, #8]
 801fe22:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801fe26:	4293      	cmp	r3, r2
 801fe28:	bfb8      	it	lt
 801fe2a:	4613      	movlt	r3, r2
 801fe2c:	82bb      	strh	r3, [r7, #20]

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 801fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe30:	7f1b      	ldrb	r3, [r3, #28]
 801fe32:	f003 031c 	and.w	r3, r3, #28
 801fe36:	b2db      	uxtb	r3, r3
 801fe38:	2b00      	cmp	r3, #0
 801fe3a:	f000 82ba 	beq.w	80203b2 <lv_page_sb_refresh+0x5f6>

    if(ext->sb.mode == LV_SB_MODE_ON) {
 801fe3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe40:	7f1b      	ldrb	r3, [r3, #28]
 801fe42:	f003 031c 	and.w	r3, r3, #28
 801fe46:	b2db      	uxtb	r3, r3
 801fe48:	2b04      	cmp	r3, #4
 801fe4a:	d109      	bne.n	801fe60 <lv_page_sb_refresh+0xa4>
        ext->sb.hor_draw = 1;
 801fe4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fe4e:	7f13      	ldrb	r3, [r2, #28]
 801fe50:	f043 0301 	orr.w	r3, r3, #1
 801fe54:	7713      	strb	r3, [r2, #28]
        ext->sb.ver_draw = 1;
 801fe56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fe58:	7f13      	ldrb	r3, [r2, #28]
 801fe5a:	f043 0302 	orr.w	r3, r3, #2
 801fe5e:	7713      	strb	r3, [r2, #28]
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_disp_t * disp = lv_obj_get_disp(page);
 801fe60:	6878      	ldr	r0, [r7, #4]
 801fe62:	f7e9 fe4b 	bl	8009afc <lv_obj_get_disp>
 801fe66:	6138      	str	r0, [r7, #16]
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 801fe68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe6a:	7f1b      	ldrb	r3, [r3, #28]
 801fe6c:	f003 0301 	and.w	r3, r3, #1
 801fe70:	b2db      	uxtb	r3, r3
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	d03a      	beq.n	801feec <lv_page_sb_refresh+0x130>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 801fe76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe78:	f103 020c 	add.w	r2, r3, #12
 801fe7c:	f107 0308 	add.w	r3, r7, #8
 801fe80:	4611      	mov	r1, r2
 801fe82:	4618      	mov	r0, r3
 801fe84:	f7fe fb78 	bl	801e578 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801fe88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801fe8c:	b29a      	uxth	r2, r3
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801fe94:	b29b      	uxth	r3, r3
 801fe96:	4413      	add	r3, r2
 801fe98:	b29b      	uxth	r3, r3
 801fe9a:	b21b      	sxth	r3, r3
 801fe9c:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801fe9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801fea2:	b29a      	uxth	r2, r3
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801feaa:	b29b      	uxth	r3, r3
 801feac:	4413      	add	r3, r2
 801feae:	b29b      	uxth	r3, r3
 801feb0:	b21b      	sxth	r3, r3
 801feb2:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801feb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801feb8:	b29a      	uxth	r2, r3
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801fec0:	b29b      	uxth	r3, r3
 801fec2:	4413      	add	r3, r2
 801fec4:	b29b      	uxth	r3, r3
 801fec6:	b21b      	sxth	r3, r3
 801fec8:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 801feca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801fece:	b29a      	uxth	r2, r3
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801fed6:	b29b      	uxth	r3, r3
 801fed8:	4413      	add	r3, r2
 801feda:	b29b      	uxth	r3, r3
 801fedc:	b21b      	sxth	r3, r3
 801fede:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 801fee0:	f107 0308 	add.w	r3, r7, #8
 801fee4:	4619      	mov	r1, r3
 801fee6:	6938      	ldr	r0, [r7, #16]
 801fee8:	f7ea f9f0 	bl	800a2cc <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 801feec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801feee:	7f1b      	ldrb	r3, [r3, #28]
 801fef0:	f003 0302 	and.w	r3, r3, #2
 801fef4:	b2db      	uxtb	r3, r3
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d03a      	beq.n	801ff70 <lv_page_sb_refresh+0x1b4>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 801fefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fefc:	f103 0214 	add.w	r2, r3, #20
 801ff00:	f107 0308 	add.w	r3, r7, #8
 801ff04:	4611      	mov	r1, r2
 801ff06:	4618      	mov	r0, r3
 801ff08:	f7fe fb36 	bl	801e578 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801ff0c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ff10:	b29a      	uxth	r2, r3
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ff18:	b29b      	uxth	r3, r3
 801ff1a:	4413      	add	r3, r2
 801ff1c:	b29b      	uxth	r3, r3
 801ff1e:	b21b      	sxth	r3, r3
 801ff20:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801ff22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ff26:	b29a      	uxth	r2, r3
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801ff2e:	b29b      	uxth	r3, r3
 801ff30:	4413      	add	r3, r2
 801ff32:	b29b      	uxth	r3, r3
 801ff34:	b21b      	sxth	r3, r3
 801ff36:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801ff38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ff3c:	b29a      	uxth	r2, r3
 801ff3e:	687b      	ldr	r3, [r7, #4]
 801ff40:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ff44:	b29b      	uxth	r3, r3
 801ff46:	4413      	add	r3, r2
 801ff48:	b29b      	uxth	r3, r3
 801ff4a:	b21b      	sxth	r3, r3
 801ff4c:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 801ff4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ff52:	b29a      	uxth	r2, r3
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801ff5a:	b29b      	uxth	r3, r3
 801ff5c:	4413      	add	r3, r2
 801ff5e:	b29b      	uxth	r3, r3
 801ff60:	b21b      	sxth	r3, r3
 801ff62:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 801ff64:	f107 0308 	add.w	r3, r7, #8
 801ff68:	4619      	mov	r1, r3
 801ff6a:	6938      	ldr	r0, [r7, #16]
 801ff6c:	f7ea f9ae 	bl	800a2cc <lv_inv_area>
    }

    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 801ff70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff72:	7f1b      	ldrb	r3, [r3, #28]
 801ff74:	f003 031c 	and.w	r3, r3, #28
 801ff78:	b2db      	uxtb	r3, r3
 801ff7a:	2b08      	cmp	r3, #8
 801ff7c:	d116      	bne.n	801ffac <lv_page_sb_refresh+0x1f0>
 801ff7e:	f7e8 f897 	bl	80080b0 <lv_indev_get_act>
 801ff82:	4603      	mov	r3, r0
 801ff84:	4618      	mov	r0, r3
 801ff86:	f7e8 f915 	bl	80081b4 <lv_indev_is_dragging>
 801ff8a:	4603      	mov	r3, r0
 801ff8c:	f083 0301 	eor.w	r3, r3, #1
 801ff90:	b2db      	uxtb	r3, r3
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d00a      	beq.n	801ffac <lv_page_sb_refresh+0x1f0>
        ext->sb.hor_draw = 0;
 801ff96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ff98:	7f13      	ldrb	r3, [r2, #28]
 801ff9a:	f36f 0300 	bfc	r3, #0, #1
 801ff9e:	7713      	strb	r3, [r2, #28]
        ext->sb.ver_draw = 0;
 801ffa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ffa2:	7f13      	ldrb	r3, [r2, #28]
 801ffa4:	f36f 0341 	bfc	r3, #1, #1
 801ffa8:	7713      	strb	r3, [r2, #28]
        return;
 801ffaa:	e203      	b.n	80203b4 <lv_page_sb_refresh+0x5f8>
    }

    /*Full sized horizontal scrollbar*/
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 801ffac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801ffb0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801ffb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ffb6:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801ffba:	1a5b      	subs	r3, r3, r1
 801ffbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ffbe:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 801ffc2:	1a5b      	subs	r3, r3, r1
 801ffc4:	429a      	cmp	r2, r3
 801ffc6:	dc38      	bgt.n	802003a <lv_page_sb_refresh+0x27e>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 801ffc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffca:	f103 000c 	add.w	r0, r3, #12
 801ffce:	8b7a      	ldrh	r2, [r7, #26]
 801ffd0:	8afb      	ldrh	r3, [r7, #22]
 801ffd2:	005b      	lsls	r3, r3, #1
 801ffd4:	b29b      	uxth	r3, r3
 801ffd6:	1ad3      	subs	r3, r2, r3
 801ffd8:	b29b      	uxth	r3, r3
 801ffda:	b21b      	sxth	r3, r3
 801ffdc:	4619      	mov	r1, r3
 801ffde:	f7f5 fc2a 	bl	8015836 <lv_area_set_width>
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 801ffe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffe4:	f103 000c 	add.w	r0, r3, #12
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 801ffe8:	8b3a      	ldrh	r2, [r7, #24]
 801ffea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffec:	689b      	ldr	r3, [r3, #8]
 801ffee:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801fff2:	b29b      	uxth	r3, r3
 801fff4:	1ad3      	subs	r3, r2, r3
 801fff6:	b29a      	uxth	r2, r3
 801fff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fffa:	689b      	ldr	r3, [r3, #8]
 801fffc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8020000:	b29b      	uxth	r3, r3
 8020002:	1ad3      	subs	r3, r2, r3
 8020004:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 8020006:	b21a      	sxth	r2, r3
 8020008:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802000c:	4619      	mov	r1, r3
 802000e:	f7f5 fc42 	bl	8015896 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 0;
 8020012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020014:	7f1b      	ldrb	r3, [r3, #28]
 8020016:	f003 031c 	and.w	r3, r3, #28
 802001a:	b2db      	uxtb	r3, r3
 802001c:	2b0c      	cmp	r3, #12
 802001e:	d006      	beq.n	802002e <lv_page_sb_refresh+0x272>
 8020020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020022:	7f1b      	ldrb	r3, [r3, #28]
 8020024:	f003 031c 	and.w	r3, r3, #28
 8020028:	b2db      	uxtb	r3, r3
 802002a:	2b08      	cmp	r3, #8
 802002c:	d17c      	bne.n	8020128 <lv_page_sb_refresh+0x36c>
 802002e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020030:	7f13      	ldrb	r3, [r2, #28]
 8020032:	f36f 0300 	bfc	r3, #0, #1
 8020036:	7713      	strb	r3, [r2, #28]
 8020038:	e076      	b.n	8020128 <lv_page_sb_refresh+0x36c>
    }
    /*Smaller horizontal scrollbar*/
    else {
        size_tmp =
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
 802003a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 802003e:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8020042:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020046:	0052      	lsls	r2, r2, #1
 8020048:	1a8a      	subs	r2, r1, r2
 802004a:	fb02 f203 	mul.w	r2, r2, r3
 802004e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020054:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8020058:	440b      	add	r3, r1
 802005a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802005c:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 8020060:	440b      	add	r3, r1
 8020062:	fb92 f3f3 	sdiv	r3, r2, r3
        size_tmp =
 8020066:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 8020068:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 802006c:	2b0b      	cmp	r3, #11
 802006e:	dc01      	bgt.n	8020074 <lv_page_sb_refresh+0x2b8>
 8020070:	230c      	movs	r3, #12
 8020072:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
 8020074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020076:	330c      	adds	r3, #12
 8020078:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 802007c:	4611      	mov	r1, r2
 802007e:	4618      	mov	r0, r3
 8020080:	f7f5 fbd9 	bl	8015836 <lv_area_set_width>

        lv_area_set_pos(&ext->sb.hor_area,
 8020084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020086:	f103 040c 	add.w	r4, r3, #12
                        sb_hor_pad +
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 802008a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802008c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8020090:	461d      	mov	r5, r3
 8020092:	6a38      	ldr	r0, [r7, #32]
 8020094:	f7e9 fda4 	bl	8009be0 <lv_obj_get_x>
 8020098:	4603      	mov	r3, r0
 802009a:	1aeb      	subs	r3, r5, r3
 802009c:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80200a0:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80200a4:	1a89      	subs	r1, r1, r2
 80200a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80200aa:	0052      	lsls	r2, r2, #1
 80200ac:	1a8a      	subs	r2, r1, r2
 80200ae:	fb02 f203 	mul.w	r2, r2, r3
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 80200b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80200b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80200b8:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80200bc:	440b      	add	r3, r1
 80200be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80200c0:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 80200c4:	4419      	add	r1, r3
 80200c6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80200ca:	1acb      	subs	r3, r1, r3
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 80200cc:	fb92 f3f3 	sdiv	r3, r2, r3
                        sb_hor_pad +
 80200d0:	b29a      	uxth	r2, r3
 80200d2:	8afb      	ldrh	r3, [r7, #22]
 80200d4:	4413      	add	r3, r2
 80200d6:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area,
 80200d8:	b219      	sxth	r1, r3
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 80200da:	8b3a      	ldrh	r2, [r7, #24]
 80200dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200de:	689b      	ldr	r3, [r3, #8]
 80200e0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80200e4:	b29b      	uxth	r3, r3
 80200e6:	1ad3      	subs	r3, r2, r3
 80200e8:	b29a      	uxth	r2, r3
 80200ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200ec:	689b      	ldr	r3, [r3, #8]
 80200ee:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80200f2:	b29b      	uxth	r3, r3
 80200f4:	1ad3      	subs	r3, r2, r3
 80200f6:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area,
 80200f8:	b21b      	sxth	r3, r3
 80200fa:	461a      	mov	r2, r3
 80200fc:	4620      	mov	r0, r4
 80200fe:	f7f5 fbca 	bl	8015896 <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 8020102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020104:	7f1b      	ldrb	r3, [r3, #28]
 8020106:	f003 031c 	and.w	r3, r3, #28
 802010a:	b2db      	uxtb	r3, r3
 802010c:	2b0c      	cmp	r3, #12
 802010e:	d006      	beq.n	802011e <lv_page_sb_refresh+0x362>
 8020110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020112:	7f1b      	ldrb	r3, [r3, #28]
 8020114:	f003 031c 	and.w	r3, r3, #28
 8020118:	b2db      	uxtb	r3, r3
 802011a:	2b08      	cmp	r3, #8
 802011c:	d104      	bne.n	8020128 <lv_page_sb_refresh+0x36c>
 802011e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020120:	7f13      	ldrb	r3, [r2, #28]
 8020122:	f043 0301 	orr.w	r3, r3, #1
 8020126:	7713      	strb	r3, [r2, #28]
    }

    /*Full sized vertical scroll bar*/
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 8020128:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 802012c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8020130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020132:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8020136:	1a5b      	subs	r3, r3, r1
 8020138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802013a:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 802013e:	1a5b      	subs	r3, r3, r1
 8020140:	429a      	cmp	r2, r3
 8020142:	dc38      	bgt.n	80201b6 <lv_page_sb_refresh+0x3fa>
        lv_area_set_height(&ext->sb.ver_area, obj_h - 2 * sb_ver_pad);
 8020144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020146:	f103 0014 	add.w	r0, r3, #20
 802014a:	8b3a      	ldrh	r2, [r7, #24]
 802014c:	8abb      	ldrh	r3, [r7, #20]
 802014e:	005b      	lsls	r3, r3, #1
 8020150:	b29b      	uxth	r3, r3
 8020152:	1ad3      	subs	r3, r2, r3
 8020154:	b29b      	uxth	r3, r3
 8020156:	b21b      	sxth	r3, r3
 8020158:	4619      	mov	r1, r3
 802015a:	f7f5 fb84 	bl	8015866 <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area,
 802015e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020160:	f103 0014 	add.w	r0, r3, #20
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 8020164:	8b7a      	ldrh	r2, [r7, #26]
 8020166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020168:	689b      	ldr	r3, [r3, #8]
 802016a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 802016e:	b29b      	uxth	r3, r3
 8020170:	1ad3      	subs	r3, r2, r3
 8020172:	b29a      	uxth	r2, r3
 8020174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020176:	689b      	ldr	r3, [r3, #8]
 8020178:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 802017c:	b29b      	uxth	r3, r3
 802017e:	1ad3      	subs	r3, r2, r3
 8020180:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 8020182:	b21b      	sxth	r3, r3
 8020184:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020188:	4619      	mov	r1, r3
 802018a:	f7f5 fb84 	bl	8015896 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 0;
 802018e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020190:	7f1b      	ldrb	r3, [r3, #28]
 8020192:	f003 031c 	and.w	r3, r3, #28
 8020196:	b2db      	uxtb	r3, r3
 8020198:	2b0c      	cmp	r3, #12
 802019a:	d006      	beq.n	80201aa <lv_page_sb_refresh+0x3ee>
 802019c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802019e:	7f1b      	ldrb	r3, [r3, #28]
 80201a0:	f003 031c 	and.w	r3, r3, #28
 80201a4:	b2db      	uxtb	r3, r3
 80201a6:	2b08      	cmp	r3, #8
 80201a8:	d17e      	bne.n	80202a8 <lv_page_sb_refresh+0x4ec>
 80201aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80201ac:	7f13      	ldrb	r3, [r2, #28]
 80201ae:	f36f 0341 	bfc	r3, #1, #1
 80201b2:	7713      	strb	r3, [r2, #28]
 80201b4:	e078      	b.n	80202a8 <lv_page_sb_refresh+0x4ec>
    }
    /*Smaller vertical scroll bar*/
    else {
        size_tmp =
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
 80201b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80201ba:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 80201be:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80201c2:	0052      	lsls	r2, r2, #1
 80201c4:	1a8a      	subs	r2, r1, r2
 80201c6:	fb02 f203 	mul.w	r2, r2, r3
 80201ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80201ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80201d0:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 80201d4:	440b      	add	r3, r1
 80201d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80201d8:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 80201dc:	440b      	add	r3, r1
 80201de:	fb92 f3f3 	sdiv	r3, r2, r3
        size_tmp =
 80201e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 80201e4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80201e8:	2b0b      	cmp	r3, #11
 80201ea:	dc01      	bgt.n	80201f0 <lv_page_sb_refresh+0x434>
 80201ec:	230c      	movs	r3, #12
 80201ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
 80201f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80201f2:	3314      	adds	r3, #20
 80201f4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80201f8:	4611      	mov	r1, r2
 80201fa:	4618      	mov	r0, r3
 80201fc:	f7f5 fb33 	bl	8015866 <lv_area_set_height>

        lv_area_set_pos(&ext->sb.ver_area,
 8020200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020202:	f103 0414 	add.w	r4, r3, #20
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8020206:	8b7a      	ldrh	r2, [r7, #26]
 8020208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802020a:	689b      	ldr	r3, [r3, #8]
 802020c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8020210:	b29b      	uxth	r3, r3
 8020212:	1ad3      	subs	r3, r2, r3
 8020214:	b29a      	uxth	r2, r3
 8020216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020218:	689b      	ldr	r3, [r3, #8]
 802021a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 802021e:	b29b      	uxth	r3, r3
 8020220:	1ad3      	subs	r3, r2, r3
 8020222:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 8020224:	b21d      	sxth	r5, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8020226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020228:	689b      	ldr	r3, [r3, #8]
 802022a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 802022e:	461e      	mov	r6, r3
 8020230:	6a38      	ldr	r0, [r7, #32]
 8020232:	f7e9 fcee 	bl	8009c12 <lv_obj_get_y>
 8020236:	4603      	mov	r3, r0
 8020238:	1af3      	subs	r3, r6, r3
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 802023a:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 802023e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8020242:	1a89      	subs	r1, r1, r2
 8020244:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020248:	0052      	lsls	r2, r2, #1
 802024a:	1a8a      	subs	r2, r1, r2
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 802024c:	fb02 f203 	mul.w	r2, r2, r3
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8020250:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8020254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020256:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 802025a:	440b      	add	r3, r1
 802025c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802025e:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 8020262:	4419      	add	r1, r3
 8020264:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8020268:	1acb      	subs	r3, r1, r3
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 802026a:	fb92 f3f3 	sdiv	r3, r2, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 802026e:	b29a      	uxth	r2, r3
 8020270:	8abb      	ldrh	r3, [r7, #20]
 8020272:	4413      	add	r3, r2
 8020274:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 8020276:	b21b      	sxth	r3, r3
 8020278:	461a      	mov	r2, r3
 802027a:	4629      	mov	r1, r5
 802027c:	4620      	mov	r0, r4
 802027e:	f7f5 fb0a 	bl	8015896 <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 8020282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020284:	7f1b      	ldrb	r3, [r3, #28]
 8020286:	f003 031c 	and.w	r3, r3, #28
 802028a:	b2db      	uxtb	r3, r3
 802028c:	2b0c      	cmp	r3, #12
 802028e:	d006      	beq.n	802029e <lv_page_sb_refresh+0x4e2>
 8020290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020292:	7f1b      	ldrb	r3, [r3, #28]
 8020294:	f003 031c 	and.w	r3, r3, #28
 8020298:	b2db      	uxtb	r3, r3
 802029a:	2b08      	cmp	r3, #8
 802029c:	d104      	bne.n	80202a8 <lv_page_sb_refresh+0x4ec>
 802029e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80202a0:	7f13      	ldrb	r3, [r2, #28]
 80202a2:	f043 0302 	orr.w	r3, r3, #2
 80202a6:	7713      	strb	r3, [r2, #28]
    }

    /*Invalidate the new scrollbar areas*/
    if(ext->sb.hor_draw != 0) {
 80202a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202aa:	7f1b      	ldrb	r3, [r3, #28]
 80202ac:	f003 0301 	and.w	r3, r3, #1
 80202b0:	b2db      	uxtb	r3, r3
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d03a      	beq.n	802032c <lv_page_sb_refresh+0x570>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 80202b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202b8:	f103 020c 	add.w	r2, r3, #12
 80202bc:	f107 0308 	add.w	r3, r7, #8
 80202c0:	4611      	mov	r1, r2
 80202c2:	4618      	mov	r0, r3
 80202c4:	f7fe f958 	bl	801e578 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 80202c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80202cc:	b29a      	uxth	r2, r3
 80202ce:	687b      	ldr	r3, [r7, #4]
 80202d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80202d4:	b29b      	uxth	r3, r3
 80202d6:	4413      	add	r3, r2
 80202d8:	b29b      	uxth	r3, r3
 80202da:	b21b      	sxth	r3, r3
 80202dc:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 80202de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80202e2:	b29a      	uxth	r2, r3
 80202e4:	687b      	ldr	r3, [r7, #4]
 80202e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80202ea:	b29b      	uxth	r3, r3
 80202ec:	4413      	add	r3, r2
 80202ee:	b29b      	uxth	r3, r3
 80202f0:	b21b      	sxth	r3, r3
 80202f2:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 80202f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80202f8:	b29a      	uxth	r2, r3
 80202fa:	687b      	ldr	r3, [r7, #4]
 80202fc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020300:	b29b      	uxth	r3, r3
 8020302:	4413      	add	r3, r2
 8020304:	b29b      	uxth	r3, r3
 8020306:	b21b      	sxth	r3, r3
 8020308:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 802030a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802030e:	b29a      	uxth	r2, r3
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8020316:	b29b      	uxth	r3, r3
 8020318:	4413      	add	r3, r2
 802031a:	b29b      	uxth	r3, r3
 802031c:	b21b      	sxth	r3, r3
 802031e:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 8020320:	f107 0308 	add.w	r3, r7, #8
 8020324:	4619      	mov	r1, r3
 8020326:	6938      	ldr	r0, [r7, #16]
 8020328:	f7e9 ffd0 	bl	800a2cc <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 802032c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802032e:	7f1b      	ldrb	r3, [r3, #28]
 8020330:	f003 0302 	and.w	r3, r3, #2
 8020334:	b2db      	uxtb	r3, r3
 8020336:	2b00      	cmp	r3, #0
 8020338:	d03c      	beq.n	80203b4 <lv_page_sb_refresh+0x5f8>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 802033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802033c:	f103 0214 	add.w	r2, r3, #20
 8020340:	f107 0308 	add.w	r3, r7, #8
 8020344:	4611      	mov	r1, r2
 8020346:	4618      	mov	r0, r3
 8020348:	f7fe f916 	bl	801e578 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 802034c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8020350:	b29a      	uxth	r2, r3
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020358:	b29b      	uxth	r3, r3
 802035a:	4413      	add	r3, r2
 802035c:	b29b      	uxth	r3, r3
 802035e:	b21b      	sxth	r3, r3
 8020360:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 8020362:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8020366:	b29a      	uxth	r2, r3
 8020368:	687b      	ldr	r3, [r7, #4]
 802036a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 802036e:	b29b      	uxth	r3, r3
 8020370:	4413      	add	r3, r2
 8020372:	b29b      	uxth	r3, r3
 8020374:	b21b      	sxth	r3, r3
 8020376:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 8020378:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802037c:	b29a      	uxth	r2, r3
 802037e:	687b      	ldr	r3, [r7, #4]
 8020380:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020384:	b29b      	uxth	r3, r3
 8020386:	4413      	add	r3, r2
 8020388:	b29b      	uxth	r3, r3
 802038a:	b21b      	sxth	r3, r3
 802038c:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 802038e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8020392:	b29a      	uxth	r2, r3
 8020394:	687b      	ldr	r3, [r7, #4]
 8020396:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 802039a:	b29b      	uxth	r3, r3
 802039c:	4413      	add	r3, r2
 802039e:	b29b      	uxth	r3, r3
 80203a0:	b21b      	sxth	r3, r3
 80203a2:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 80203a4:	f107 0308 	add.w	r3, r7, #8
 80203a8:	4619      	mov	r1, r3
 80203aa:	6938      	ldr	r0, [r7, #16]
 80203ac:	f7e9 ff8e 	bl	800a2cc <lv_inv_area>
 80203b0:	e000      	b.n	80203b4 <lv_page_sb_refresh+0x5f8>
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 80203b2:	bf00      	nop
    }
}
 80203b4:	3734      	adds	r7, #52	; 0x34
 80203b6:	46bd      	mov	sp, r7
 80203b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080203ba <edge_flash_anim>:

#if LV_USE_ANIMATION
static void edge_flash_anim(void * page, lv_anim_value_t v)
{
 80203ba:	b580      	push	{r7, lr}
 80203bc:	b084      	sub	sp, #16
 80203be:	af00      	add	r7, sp, #0
 80203c0:	6078      	str	r0, [r7, #4]
 80203c2:	460b      	mov	r3, r1
 80203c4:	807b      	strh	r3, [r7, #2]
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 80203c6:	6878      	ldr	r0, [r7, #4]
 80203c8:	f7e9 fd27 	bl	8009e1a <lv_obj_get_ext_attr>
 80203cc:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.state = v;
 80203ce:	68fb      	ldr	r3, [r7, #12]
 80203d0:	887a      	ldrh	r2, [r7, #2]
 80203d2:	841a      	strh	r2, [r3, #32]
    lv_obj_invalidate(page);
 80203d4:	6878      	ldr	r0, [r7, #4]
 80203d6:	f7e8 faf4 	bl	80089c2 <lv_obj_invalidate>
}
 80203da:	bf00      	nop
 80203dc:	3710      	adds	r7, #16
 80203de:	46bd      	mov	sp, r7
 80203e0:	bd80      	pop	{r7, pc}

080203e2 <edge_flash_anim_end>:

static void edge_flash_anim_end(lv_anim_t * a)
{
 80203e2:	b580      	push	{r7, lr}
 80203e4:	b084      	sub	sp, #16
 80203e6:	af00      	add	r7, sp, #0
 80203e8:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
 80203ea:	687b      	ldr	r3, [r7, #4]
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	4618      	mov	r0, r3
 80203f0:	f7e9 fd13 	bl	8009e1a <lv_obj_get_ext_attr>
 80203f4:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.top_ip    = 0;
 80203f6:	68fa      	ldr	r2, [r7, #12]
 80203f8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80203fc:	f36f 0341 	bfc	r3, #1, #1
 8020400:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
 8020404:	68fa      	ldr	r2, [r7, #12]
 8020406:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 802040a:	f36f 0382 	bfc	r3, #2, #1
 802040e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.left_ip   = 0;
 8020412:	68fa      	ldr	r2, [r7, #12]
 8020414:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8020418:	f36f 1304 	bfc	r3, #4, #1
 802041c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.right_ip  = 0;
 8020420:	68fa      	ldr	r2, [r7, #12]
 8020422:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8020426:	f36f 03c3 	bfc	r3, #3, #1
 802042a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    lv_obj_invalidate(a->var);
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	681b      	ldr	r3, [r3, #0]
 8020432:	4618      	mov	r0, r3
 8020434:	f7e8 fac5 	bl	80089c2 <lv_obj_invalidate>
}
 8020438:	bf00      	nop
 802043a:	3710      	adds	r7, #16
 802043c:	46bd      	mov	sp, r7
 802043e:	bd80      	pop	{r7, pc}

08020440 <lv_area_copy>:
{
 8020440:	b580      	push	{r7, lr}
 8020442:	b082      	sub	sp, #8
 8020444:	af00      	add	r7, sp, #0
 8020446:	6078      	str	r0, [r7, #4]
 8020448:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 802044a:	2208      	movs	r2, #8
 802044c:	6839      	ldr	r1, [r7, #0]
 802044e:	6878      	ldr	r0, [r7, #4]
 8020450:	f009 fcb0 	bl	8029db4 <memcpy>
}
 8020454:	bf00      	nop
 8020456:	3708      	adds	r7, #8
 8020458:	46bd      	mov	sp, r7
 802045a:	bd80      	pop	{r7, pc}

0802045c <lv_area_get_width>:
{
 802045c:	b480      	push	{r7}
 802045e:	b083      	sub	sp, #12
 8020460:	af00      	add	r7, sp, #0
 8020462:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802046a:	b29a      	uxth	r2, r3
 802046c:	687b      	ldr	r3, [r7, #4]
 802046e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020472:	b29b      	uxth	r3, r3
 8020474:	1ad3      	subs	r3, r2, r3
 8020476:	b29b      	uxth	r3, r3
 8020478:	3301      	adds	r3, #1
 802047a:	b29b      	uxth	r3, r3
 802047c:	b21b      	sxth	r3, r3
}
 802047e:	4618      	mov	r0, r3
 8020480:	370c      	adds	r7, #12
 8020482:	46bd      	mov	sp, r7
 8020484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020488:	4770      	bx	lr

0802048a <lv_area_get_height>:
{
 802048a:	b480      	push	{r7}
 802048c:	b083      	sub	sp, #12
 802048e:	af00      	add	r7, sp, #0
 8020490:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8020492:	687b      	ldr	r3, [r7, #4]
 8020494:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020498:	b29a      	uxth	r2, r3
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80204a0:	b29b      	uxth	r3, r3
 80204a2:	1ad3      	subs	r3, r2, r3
 80204a4:	b29b      	uxth	r3, r3
 80204a6:	3301      	adds	r3, #1
 80204a8:	b29b      	uxth	r3, r3
 80204aa:	b21b      	sxth	r3, r3
}
 80204ac:	4618      	mov	r0, r3
 80204ae:	370c      	adds	r7, #12
 80204b0:	46bd      	mov	sp, r7
 80204b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204b6:	4770      	bx	lr

080204b8 <lv_slider_set_value>:
 * @param slider pointer to a slider object
 * @param value new value
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
static inline void lv_slider_set_value(lv_obj_t * slider, int16_t value, lv_anim_enable_t anim)
{
 80204b8:	b580      	push	{r7, lr}
 80204ba:	b082      	sub	sp, #8
 80204bc:	af00      	add	r7, sp, #0
 80204be:	6078      	str	r0, [r7, #4]
 80204c0:	460b      	mov	r3, r1
 80204c2:	807b      	strh	r3, [r7, #2]
 80204c4:	4613      	mov	r3, r2
 80204c6:	707b      	strb	r3, [r7, #1]
    lv_bar_set_value(slider, value, anim);
 80204c8:	787a      	ldrb	r2, [r7, #1]
 80204ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80204ce:	4619      	mov	r1, r3
 80204d0:	6878      	ldr	r0, [r7, #4]
 80204d2:	f7f7 fb59 	bl	8017b88 <lv_bar_set_value>
}
 80204d6:	bf00      	nop
 80204d8:	3708      	adds	r7, #8
 80204da:	46bd      	mov	sp, r7
 80204dc:	bd80      	pop	{r7, pc}

080204de <lv_slider_get_min_value>:
 * Get the minimum value of a slider
 * @param slider pointer to a slider object
 * @return the minimum value of the slider
 */
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
 80204de:	b580      	push	{r7, lr}
 80204e0:	b082      	sub	sp, #8
 80204e2:	af00      	add	r7, sp, #0
 80204e4:	6078      	str	r0, [r7, #4]
    return lv_bar_get_min_value(slider);
 80204e6:	6878      	ldr	r0, [r7, #4]
 80204e8:	f7f7 fc58 	bl	8017d9c <lv_bar_get_min_value>
 80204ec:	4603      	mov	r3, r0
}
 80204ee:	4618      	mov	r0, r3
 80204f0:	3708      	adds	r7, #8
 80204f2:	46bd      	mov	sp, r7
 80204f4:	bd80      	pop	{r7, pc}

080204f6 <lv_slider_get_max_value>:
 * Get the maximum value of a slider
 * @param slider pointer to a slider object
 * @return the maximum value of the slider
 */
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
 80204f6:	b580      	push	{r7, lr}
 80204f8:	b082      	sub	sp, #8
 80204fa:	af00      	add	r7, sp, #0
 80204fc:	6078      	str	r0, [r7, #4]
    return lv_bar_get_max_value(slider);
 80204fe:	6878      	ldr	r0, [r7, #4]
 8020500:	f7f7 fc5b 	bl	8017dba <lv_bar_get_max_value>
 8020504:	4603      	mov	r3, r0
}
 8020506:	4618      	mov	r0, r3
 8020508:	3708      	adds	r7, #8
 802050a:	46bd      	mov	sp, r7
 802050c:	bd80      	pop	{r7, pc}
	...

08020510 <lv_slider_create>:
 * @param par pointer to an object, it will be the parent of the new slider
 * @param copy pointer to a slider object, if not NULL then the new object will be copied from it
 * @return pointer to the created slider
 */
lv_obj_t * lv_slider_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8020510:	b580      	push	{r7, lr}
 8020512:	b086      	sub	sp, #24
 8020514:	af00      	add	r7, sp, #0
 8020516:	6078      	str	r0, [r7, #4]
 8020518:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("slider create started");

    /*Create the ancestor slider*/
    lv_obj_t * new_slider = lv_bar_create(par, copy);
 802051a:	6839      	ldr	r1, [r7, #0]
 802051c:	6878      	ldr	r0, [r7, #4]
 802051e:	f7f7 fa6d 	bl	80179fc <lv_bar_create>
 8020522:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_slider);
 8020524:	697b      	ldr	r3, [r7, #20]
 8020526:	2b00      	cmp	r3, #0
 8020528:	d100      	bne.n	802052c <lv_slider_create+0x1c>
 802052a:	e7fe      	b.n	802052a <lv_slider_create+0x1a>
    if(new_slider == NULL) return NULL;
 802052c:	697b      	ldr	r3, [r7, #20]
 802052e:	2b00      	cmp	r3, #0
 8020530:	d101      	bne.n	8020536 <lv_slider_create+0x26>
 8020532:	2300      	movs	r3, #0
 8020534:	e07a      	b.n	802062c <lv_slider_create+0x11c>

    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_slider);
 8020536:	4b3f      	ldr	r3, [pc, #252]	; (8020634 <lv_slider_create+0x124>)
 8020538:	681b      	ldr	r3, [r3, #0]
 802053a:	2b00      	cmp	r3, #0
 802053c:	d105      	bne.n	802054a <lv_slider_create+0x3a>
 802053e:	6978      	ldr	r0, [r7, #20]
 8020540:	f7e9 fc5f 	bl	8009e02 <lv_obj_get_design_cb>
 8020544:	4602      	mov	r2, r0
 8020546:	4b3b      	ldr	r3, [pc, #236]	; (8020634 <lv_slider_create+0x124>)
 8020548:	601a      	str	r2, [r3, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_slider);
 802054a:	4b3b      	ldr	r3, [pc, #236]	; (8020638 <lv_slider_create+0x128>)
 802054c:	681b      	ldr	r3, [r3, #0]
 802054e:	2b00      	cmp	r3, #0
 8020550:	d105      	bne.n	802055e <lv_slider_create+0x4e>
 8020552:	6978      	ldr	r0, [r7, #20]
 8020554:	f7e9 fc49 	bl	8009dea <lv_obj_get_signal_cb>
 8020558:	4602      	mov	r2, r0
 802055a:	4b37      	ldr	r3, [pc, #220]	; (8020638 <lv_slider_create+0x128>)
 802055c:	601a      	str	r2, [r3, #0]

    /*Allocate the slider type specific extended data*/
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(new_slider, sizeof(lv_slider_ext_t));
 802055e:	211c      	movs	r1, #28
 8020560:	6978      	ldr	r0, [r7, #20]
 8020562:	f7e9 fa8d 	bl	8009a80 <lv_obj_allocate_ext_attr>
 8020566:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8020568:	693b      	ldr	r3, [r7, #16]
 802056a:	2b00      	cmp	r3, #0
 802056c:	d100      	bne.n	8020570 <lv_slider_create+0x60>
 802056e:	e7fe      	b.n	802056e <lv_slider_create+0x5e>
    if(ext == NULL) return NULL;
 8020570:	693b      	ldr	r3, [r7, #16]
 8020572:	2b00      	cmp	r3, #0
 8020574:	d101      	bne.n	802057a <lv_slider_create+0x6a>
 8020576:	2300      	movs	r3, #0
 8020578:	e058      	b.n	802062c <lv_slider_create+0x11c>

    /*Initialize the allocated 'ext' */
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 802057a:	693b      	ldr	r3, [r7, #16]
 802057c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020580:	831a      	strh	r2, [r3, #24]
    ext->style_knob = &lv_style_pretty;
 8020582:	693b      	ldr	r3, [r7, #16]
 8020584:	4a2d      	ldr	r2, [pc, #180]	; (802063c <lv_slider_create+0x12c>)
 8020586:	615a      	str	r2, [r3, #20]
    ext->knob_in    = 0;
 8020588:	693a      	ldr	r2, [r7, #16]
 802058a:	7e93      	ldrb	r3, [r2, #26]
 802058c:	f36f 0300 	bfc	r3, #0, #1
 8020590:	7693      	strb	r3, [r2, #26]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
 8020592:	492b      	ldr	r1, [pc, #172]	; (8020640 <lv_slider_create+0x130>)
 8020594:	6978      	ldr	r0, [r7, #20]
 8020596:	f7e9 fa57 	bl	8009a48 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_slider, lv_slider_design);
 802059a:	492a      	ldr	r1, [pc, #168]	; (8020644 <lv_slider_create+0x134>)
 802059c:	6978      	ldr	r0, [r7, #20]
 802059e:	f7e9 fa61 	bl	8009a64 <lv_obj_set_design_cb>

    /*Init the new slider slider*/
    if(copy == NULL) {
 80205a2:	683b      	ldr	r3, [r7, #0]
 80205a4:	2b00      	cmp	r3, #0
 80205a6:	d12b      	bne.n	8020600 <lv_slider_create+0xf0>
        lv_obj_set_click(new_slider, true);
 80205a8:	2101      	movs	r1, #1
 80205aa:	6978      	ldr	r0, [r7, #20]
 80205ac:	f7e9 f92b 	bl	8009806 <lv_obj_set_click>
        lv_obj_set_protect(new_slider, LV_PROTECT_PRESS_LOST);
 80205b0:	2110      	movs	r1, #16
 80205b2:	6978      	ldr	r0, [r7, #20]
 80205b4:	f7e9 f97c 	bl	80098b0 <lv_obj_set_protect>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 80205b8:	f001 fab2 	bl	8021b20 <lv_theme_get_current>
 80205bc:	60b8      	str	r0, [r7, #8]
        if(th) {
 80205be:	68bb      	ldr	r3, [r7, #8]
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	d015      	beq.n	80205f0 <lv_slider_create+0xe0>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_BG, th->style.slider.bg);
 80205c4:	68bb      	ldr	r3, [r7, #8]
 80205c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80205c8:	461a      	mov	r2, r3
 80205ca:	2100      	movs	r1, #0
 80205cc:	6978      	ldr	r0, [r7, #20]
 80205ce:	f000 f863 	bl	8020698 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_INDIC, th->style.slider.indic);
 80205d2:	68bb      	ldr	r3, [r7, #8]
 80205d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80205d6:	461a      	mov	r2, r3
 80205d8:	2101      	movs	r1, #1
 80205da:	6978      	ldr	r0, [r7, #20]
 80205dc:	f000 f85c 	bl	8020698 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, th->style.slider.knob);
 80205e0:	68bb      	ldr	r3, [r7, #8]
 80205e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80205e4:	461a      	mov	r2, r3
 80205e6:	2102      	movs	r1, #2
 80205e8:	6978      	ldr	r0, [r7, #20]
 80205ea:	f000 f855 	bl	8020698 <lv_slider_set_style>
 80205ee:	e01c      	b.n	802062a <lv_slider_create+0x11a>
        } else {
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 80205f0:	693b      	ldr	r3, [r7, #16]
 80205f2:	695b      	ldr	r3, [r3, #20]
 80205f4:	461a      	mov	r2, r3
 80205f6:	2102      	movs	r1, #2
 80205f8:	6978      	ldr	r0, [r7, #20]
 80205fa:	f000 f84d 	bl	8020698 <lv_slider_set_style>
 80205fe:	e014      	b.n	802062a <lv_slider_create+0x11a>
        }
    }
    /*Copy an existing slider*/
    else {
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8020600:	6838      	ldr	r0, [r7, #0]
 8020602:	f7e9 fc0a 	bl	8009e1a <lv_obj_get_ext_attr>
 8020606:	60f8      	str	r0, [r7, #12]
        ext->style_knob            = copy_ext->style_knob;
 8020608:	68fb      	ldr	r3, [r7, #12]
 802060a:	695a      	ldr	r2, [r3, #20]
 802060c:	693b      	ldr	r3, [r7, #16]
 802060e:	615a      	str	r2, [r3, #20]
        ext->knob_in               = copy_ext->knob_in;
 8020610:	68fb      	ldr	r3, [r7, #12]
 8020612:	7e9b      	ldrb	r3, [r3, #26]
 8020614:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8020618:	b2d9      	uxtb	r1, r3
 802061a:	693a      	ldr	r2, [r7, #16]
 802061c:	7e93      	ldrb	r3, [r2, #26]
 802061e:	f361 0300 	bfi	r3, r1, #0, #1
 8020622:	7693      	strb	r3, [r2, #26]
        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_slider);
 8020624:	6978      	ldr	r0, [r7, #20]
 8020626:	f7e9 f8da 	bl	80097de <lv_obj_refresh_style>
    }

    LV_LOG_INFO("slider created");

    return new_slider;
 802062a:	697b      	ldr	r3, [r7, #20]
}
 802062c:	4618      	mov	r0, r3
 802062e:	3718      	adds	r7, #24
 8020630:	46bd      	mov	sp, r7
 8020632:	bd80      	pop	{r7, pc}
 8020634:	200177f0 	.word	0x200177f0
 8020638:	200177f4 	.word	0x200177f4
 802063c:	2001b920 	.word	0x2001b920
 8020640:	0802103d 	.word	0x0802103d
 8020644:	08020777 	.word	0x08020777

08020648 <lv_slider_set_knob_in>:
 * @param slider pointer to slider object
 * @param in true: the knob is drawn always in the slider;
 *           false: the knob can be out on the edges
 */
void lv_slider_set_knob_in(lv_obj_t * slider, bool in)
{
 8020648:	b580      	push	{r7, lr}
 802064a:	b084      	sub	sp, #16
 802064c:	af00      	add	r7, sp, #0
 802064e:	6078      	str	r0, [r7, #4]
 8020650:	460b      	mov	r3, r1
 8020652:	70fb      	strb	r3, [r7, #3]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8020654:	6878      	ldr	r0, [r7, #4]
 8020656:	f7e9 fbe0 	bl	8009e1a <lv_obj_get_ext_attr>
 802065a:	60f8      	str	r0, [r7, #12]
    if(ext->knob_in == in) return;
 802065c:	68fb      	ldr	r3, [r7, #12]
 802065e:	7e9b      	ldrb	r3, [r3, #26]
 8020660:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8020664:	b2db      	uxtb	r3, r3
 8020666:	78fa      	ldrb	r2, [r7, #3]
 8020668:	429a      	cmp	r2, r3
 802066a:	d011      	beq.n	8020690 <lv_slider_set_knob_in+0x48>

    ext->knob_in = in == false ? 0 : 1;
 802066c:	78fb      	ldrb	r3, [r7, #3]
 802066e:	f083 0301 	eor.w	r3, r3, #1
 8020672:	b2db      	uxtb	r3, r3
 8020674:	2b00      	cmp	r3, #0
 8020676:	d001      	beq.n	802067c <lv_slider_set_knob_in+0x34>
 8020678:	2100      	movs	r1, #0
 802067a:	e000      	b.n	802067e <lv_slider_set_knob_in+0x36>
 802067c:	2101      	movs	r1, #1
 802067e:	68fa      	ldr	r2, [r7, #12]
 8020680:	7e93      	ldrb	r3, [r2, #26]
 8020682:	f361 0300 	bfi	r3, r1, #0, #1
 8020686:	7693      	strb	r3, [r2, #26]
    lv_obj_invalidate(slider);
 8020688:	6878      	ldr	r0, [r7, #4]
 802068a:	f7e8 f99a 	bl	80089c2 <lv_obj_invalidate>
 802068e:	e000      	b.n	8020692 <lv_slider_set_knob_in+0x4a>
    if(ext->knob_in == in) return;
 8020690:	bf00      	nop
}
 8020692:	3710      	adds	r7, #16
 8020694:	46bd      	mov	sp, r7
 8020696:	bd80      	pop	{r7, pc}

08020698 <lv_slider_set_style>:
 * @param slider pointer to a slider object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_slider_set_style(lv_obj_t * slider, lv_slider_style_t type, const lv_style_t * style)
{
 8020698:	b580      	push	{r7, lr}
 802069a:	b086      	sub	sp, #24
 802069c:	af00      	add	r7, sp, #0
 802069e:	60f8      	str	r0, [r7, #12]
 80206a0:	460b      	mov	r3, r1
 80206a2:	607a      	str	r2, [r7, #4]
 80206a4:	72fb      	strb	r3, [r7, #11]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 80206a6:	68f8      	ldr	r0, [r7, #12]
 80206a8:	f7e9 fbb7 	bl	8009e1a <lv_obj_get_ext_attr>
 80206ac:	6178      	str	r0, [r7, #20]

    switch(type) {
 80206ae:	7afb      	ldrb	r3, [r7, #11]
 80206b0:	2b01      	cmp	r3, #1
 80206b2:	d00a      	beq.n	80206ca <lv_slider_set_style+0x32>
 80206b4:	2b02      	cmp	r3, #2
 80206b6:	d00e      	beq.n	80206d6 <lv_slider_set_style+0x3e>
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d000      	beq.n	80206be <lv_slider_set_style+0x26>
        case LV_SLIDER_STYLE_KNOB:
            ext->style_knob = style;
            lv_obj_refresh_ext_draw_pad(slider);
            break;
    }
}
 80206bc:	e012      	b.n	80206e4 <lv_slider_set_style+0x4c>
        case LV_SLIDER_STYLE_BG: lv_bar_set_style(slider, LV_BAR_STYLE_BG, style); break;
 80206be:	687a      	ldr	r2, [r7, #4]
 80206c0:	2100      	movs	r1, #0
 80206c2:	68f8      	ldr	r0, [r7, #12]
 80206c4:	f7f7 fb30 	bl	8017d28 <lv_bar_set_style>
 80206c8:	e00c      	b.n	80206e4 <lv_slider_set_style+0x4c>
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style); break;
 80206ca:	687a      	ldr	r2, [r7, #4]
 80206cc:	2101      	movs	r1, #1
 80206ce:	68f8      	ldr	r0, [r7, #12]
 80206d0:	f7f7 fb2a 	bl	8017d28 <lv_bar_set_style>
 80206d4:	e006      	b.n	80206e4 <lv_slider_set_style+0x4c>
            ext->style_knob = style;
 80206d6:	697b      	ldr	r3, [r7, #20]
 80206d8:	687a      	ldr	r2, [r7, #4]
 80206da:	615a      	str	r2, [r3, #20]
            lv_obj_refresh_ext_draw_pad(slider);
 80206dc:	68f8      	ldr	r0, [r7, #12]
 80206de:	f7e9 f9e5 	bl	8009aac <lv_obj_refresh_ext_draw_pad>
            break;
 80206e2:	bf00      	nop
}
 80206e4:	bf00      	nop
 80206e6:	3718      	adds	r7, #24
 80206e8:	46bd      	mov	sp, r7
 80206ea:	bd80      	pop	{r7, pc}

080206ec <lv_slider_get_value>:
 * Get the value of a slider
 * @param slider pointer to a slider object
 * @return the value of the slider
 */
int16_t lv_slider_get_value(const lv_obj_t * slider)
{
 80206ec:	b580      	push	{r7, lr}
 80206ee:	b084      	sub	sp, #16
 80206f0:	af00      	add	r7, sp, #0
 80206f2:	6078      	str	r0, [r7, #4]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 80206f4:	6878      	ldr	r0, [r7, #4]
 80206f6:	f7e9 fb90 	bl	8009e1a <lv_obj_get_ext_attr>
 80206fa:	60f8      	str	r0, [r7, #12]

    if(ext->drag_value != LV_SLIDER_NOT_PRESSED)
 80206fc:	68fb      	ldr	r3, [r7, #12]
 80206fe:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8020702:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020706:	d003      	beq.n	8020710 <lv_slider_get_value+0x24>
        return ext->drag_value;
 8020708:	68fb      	ldr	r3, [r7, #12]
 802070a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 802070e:	e003      	b.n	8020718 <lv_slider_get_value+0x2c>
    else
        return lv_bar_get_value(slider);
 8020710:	6878      	ldr	r0, [r7, #4]
 8020712:	f7f7 fb2a 	bl	8017d6a <lv_bar_get_value>
 8020716:	4603      	mov	r3, r0
}
 8020718:	4618      	mov	r0, r3
 802071a:	3710      	adds	r7, #16
 802071c:	46bd      	mov	sp, r7
 802071e:	bd80      	pop	{r7, pc}

08020720 <lv_slider_get_style>:
 * @param slider pointer to a slider object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_slider_get_style(const lv_obj_t * slider, lv_slider_style_t type)
{
 8020720:	b580      	push	{r7, lr}
 8020722:	b084      	sub	sp, #16
 8020724:	af00      	add	r7, sp, #0
 8020726:	6078      	str	r0, [r7, #4]
 8020728:	460b      	mov	r3, r1
 802072a:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 802072c:	2300      	movs	r3, #0
 802072e:	60fb      	str	r3, [r7, #12]
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
 8020730:	6878      	ldr	r0, [r7, #4]
 8020732:	f7e9 fb72 	bl	8009e1a <lv_obj_get_ext_attr>
 8020736:	60b8      	str	r0, [r7, #8]

    switch(type) {
 8020738:	78fb      	ldrb	r3, [r7, #3]
 802073a:	2b01      	cmp	r3, #1
 802073c:	d009      	beq.n	8020752 <lv_slider_get_style+0x32>
 802073e:	2b02      	cmp	r3, #2
 8020740:	d00d      	beq.n	802075e <lv_slider_get_style+0x3e>
 8020742:	2b00      	cmp	r3, #0
 8020744:	d10f      	bne.n	8020766 <lv_slider_get_style+0x46>
        case LV_SLIDER_STYLE_BG: style = lv_bar_get_style(slider, LV_BAR_STYLE_BG); break;
 8020746:	2100      	movs	r1, #0
 8020748:	6878      	ldr	r0, [r7, #4]
 802074a:	f7f7 fb45 	bl	8017dd8 <lv_bar_get_style>
 802074e:	60f8      	str	r0, [r7, #12]
 8020750:	e00c      	b.n	802076c <lv_slider_get_style+0x4c>
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
 8020752:	2101      	movs	r1, #1
 8020754:	6878      	ldr	r0, [r7, #4]
 8020756:	f7f7 fb3f 	bl	8017dd8 <lv_bar_get_style>
 802075a:	60f8      	str	r0, [r7, #12]
 802075c:	e006      	b.n	802076c <lv_slider_get_style+0x4c>
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
 802075e:	68bb      	ldr	r3, [r7, #8]
 8020760:	695b      	ldr	r3, [r3, #20]
 8020762:	60fb      	str	r3, [r7, #12]
 8020764:	e002      	b.n	802076c <lv_slider_get_style+0x4c>
        default: style = NULL; break;
 8020766:	2300      	movs	r3, #0
 8020768:	60fb      	str	r3, [r7, #12]
 802076a:	bf00      	nop
    }

    return style;
 802076c:	68fb      	ldr	r3, [r7, #12]
}
 802076e:	4618      	mov	r0, r3
 8020770:	3710      	adds	r7, #16
 8020772:	46bd      	mov	sp, r7
 8020774:	bd80      	pop	{r7, pc}

08020776 <lv_slider_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_slider_design(lv_obj_t * slider, const lv_area_t * mask, lv_design_mode_t mode)
{
 8020776:	b590      	push	{r4, r7, lr}
 8020778:	b0ad      	sub	sp, #180	; 0xb4
 802077a:	af00      	add	r7, sp, #0
 802077c:	60f8      	str	r0, [r7, #12]
 802077e:	60b9      	str	r1, [r7, #8]
 8020780:	4613      	mov	r3, r2
 8020782:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 8020784:	79fb      	ldrb	r3, [r7, #7]
 8020786:	2b02      	cmp	r3, #2
 8020788:	d102      	bne.n	8020790 <lv_slider_design+0x1a>
        return false;
 802078a:	2300      	movs	r3, #0
 802078c:	f000 bc52 	b.w	8021034 <lv_slider_design+0x8be>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8020790:	79fb      	ldrb	r3, [r7, #7]
 8020792:	2b00      	cmp	r3, #0
 8020794:	f040 844d 	bne.w	8021032 <lv_slider_design+0x8bc>
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8020798:	68f8      	ldr	r0, [r7, #12]
 802079a:	f7e9 fb3e 	bl	8009e1a <lv_obj_get_ext_attr>
 802079e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 80207a2:	2100      	movs	r1, #0
 80207a4:	68f8      	ldr	r0, [r7, #12]
 80207a6:	f7ff ffbb 	bl	8020720 <lv_slider_get_style>
 80207aa:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        const lv_style_t * style_knob  = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
 80207ae:	2102      	movs	r1, #2
 80207b0:	68f8      	ldr	r0, [r7, #12]
 80207b2:	f7ff ffb5 	bl	8020720 <lv_slider_get_style>
 80207b6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        const lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
 80207ba:	2101      	movs	r1, #1
 80207bc:	68f8      	ldr	r0, [r7, #12]
 80207be:	f7ff ffaf 	bl	8020720 <lv_slider_get_style>
 80207c2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
 80207c6:	68f8      	ldr	r0, [r7, #12]
 80207c8:	f7e9 fad9 	bl	8009d7e <lv_obj_get_opa_scale>
 80207cc:	4603      	mov	r3, r0
 80207ce:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

        lv_coord_t slider_w = lv_area_get_width(&slider->coords);
 80207d2:	68fb      	ldr	r3, [r7, #12]
 80207d4:	3310      	adds	r3, #16
 80207d6:	4618      	mov	r0, r3
 80207d8:	f7ff fe40 	bl	802045c <lv_area_get_width>
 80207dc:	4603      	mov	r3, r0
 80207de:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        lv_coord_t slider_h = lv_area_get_height(&slider->coords);
 80207e2:	68fb      	ldr	r3, [r7, #12]
 80207e4:	3310      	adds	r3, #16
 80207e6:	4618      	mov	r0, r3
 80207e8:	f7ff fe4f 	bl	802048a <lv_area_get_height>
 80207ec:	4603      	mov	r3, r0
 80207ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Draw the bar*/
        lv_area_t area_bg;
        lv_area_copy(&area_bg, &slider->coords);
 80207f2:	68fb      	ldr	r3, [r7, #12]
 80207f4:	f103 0210 	add.w	r2, r3, #16
 80207f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80207fc:	4611      	mov	r1, r2
 80207fe:	4618      	mov	r0, r3
 8020800:	f7ff fe1e 	bl	8020440 <lv_area_copy>

        /*Be sure at least LV_SLIDER_SIZE_MIN  size will remain*/
        lv_coord_t pad_top_bg    = style_bg->body.padding.top;
 8020804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8020808:	8adb      	ldrh	r3, [r3, #22]
 802080a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        lv_coord_t pad_bottom_bg = style_bg->body.padding.bottom;
 802080e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8020812:	8b1b      	ldrh	r3, [r3, #24]
 8020814:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        lv_coord_t pad_left_bg   = style_bg->body.padding.left;
 8020818:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802081c:	8b5b      	ldrh	r3, [r3, #26]
 802081e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        lv_coord_t pad_right_bg  = style_bg->body.padding.right;
 8020822:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8020826:	8b9b      	ldrh	r3, [r3, #28]
 8020828:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        if(pad_top_bg + pad_bottom_bg + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 802082c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8020830:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8020834:	4413      	add	r3, r2
 8020836:	1d1c      	adds	r4, r3, #4
 8020838:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802083c:	4618      	mov	r0, r3
 802083e:	f7ff fe24 	bl	802048a <lv_area_get_height>
 8020842:	4603      	mov	r3, r0
 8020844:	429c      	cmp	r4, r3
 8020846:	dd0d      	ble.n	8020864 <lv_slider_design+0xee>
            pad_top_bg    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8020848:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802084c:	4618      	mov	r0, r3
 802084e:	f7ff fe1c 	bl	802048a <lv_area_get_height>
 8020852:	4603      	mov	r3, r0
 8020854:	3b04      	subs	r3, #4
 8020856:	105b      	asrs	r3, r3, #1
 8020858:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            pad_bottom_bg = pad_top_bg;
 802085c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8020860:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        }
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8020864:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8020868:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 802086c:	4413      	add	r3, r2
 802086e:	1d1c      	adds	r4, r3, #4
 8020870:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020874:	4618      	mov	r0, r3
 8020876:	f7ff fdf1 	bl	802045c <lv_area_get_width>
 802087a:	4603      	mov	r3, r0
 802087c:	429c      	cmp	r4, r3
 802087e:	dd13      	ble.n	80208a8 <lv_slider_design+0x132>
            pad_left_bg  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8020880:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020884:	4618      	mov	r0, r3
 8020886:	f7ff fde9 	bl	802045c <lv_area_get_width>
 802088a:	4603      	mov	r3, r0
 802088c:	3b04      	subs	r3, #4
 802088e:	105b      	asrs	r3, r3, #1
 8020890:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
            pad_right_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8020894:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020898:	4618      	mov	r0, r3
 802089a:	f7ff fddf 	bl	802045c <lv_area_get_width>
 802089e:	4603      	mov	r3, r0
 80208a0:	3b04      	subs	r3, #4
 80208a2:	105b      	asrs	r3, r3, #1
 80208a4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        }

        if(ext->knob_in) { /*Enable extra size if the knob is inside */
 80208a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80208ac:	7e9b      	ldrb	r3, [r3, #26]
 80208ae:	f003 0301 	and.w	r3, r3, #1
 80208b2:	b2db      	uxtb	r3, r3
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	d028      	beq.n	802090a <lv_slider_design+0x194>
            area_bg.x1 += pad_left_bg;
 80208b8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80208bc:	b29a      	uxth	r2, r3
 80208be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80208c2:	4413      	add	r3, r2
 80208c4:	b29b      	uxth	r3, r3
 80208c6:	b21b      	sxth	r3, r3
 80208c8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            area_bg.x2 -= pad_right_bg;
 80208cc:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80208d0:	b29a      	uxth	r2, r3
 80208d2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80208d6:	1ad3      	subs	r3, r2, r3
 80208d8:	b29b      	uxth	r3, r3
 80208da:	b21b      	sxth	r3, r3
 80208dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
            area_bg.y1 += pad_top_bg;
 80208e0:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80208e4:	b29a      	uxth	r2, r3
 80208e6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80208ea:	4413      	add	r3, r2
 80208ec:	b29b      	uxth	r3, r3
 80208ee:	b21b      	sxth	r3, r3
 80208f0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            area_bg.y2 -= pad_bottom_bg;
 80208f4:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80208f8:	b29a      	uxth	r2, r3
 80208fa:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80208fe:	1ad3      	subs	r3, r2, r3
 8020900:	b29b      	uxth	r3, r3
 8020902:	b21b      	sxth	r3, r3
 8020904:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8020908:	e047      	b.n	802099a <lv_slider_design+0x224>
        } else {                                                   /*Let space only in the perpendicular directions*/
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
 802090a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 802090e:	b29a      	uxth	r2, r3
 8020910:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 8020914:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020918:	4299      	cmp	r1, r3
 802091a:	da02      	bge.n	8020922 <lv_slider_design+0x1ac>
 802091c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8020920:	e000      	b.n	8020924 <lv_slider_design+0x1ae>
 8020922:	2300      	movs	r3, #0
 8020924:	4413      	add	r3, r2
 8020926:	b29b      	uxth	r3, r3
 8020928:	b21b      	sxth	r3, r3
 802092a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
 802092e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8020932:	b29a      	uxth	r2, r3
 8020934:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 8020938:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 802093c:	4299      	cmp	r1, r3
 802093e:	da02      	bge.n	8020946 <lv_slider_design+0x1d0>
 8020940:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8020944:	e000      	b.n	8020948 <lv_slider_design+0x1d2>
 8020946:	2300      	movs	r3, #0
 8020948:	1ad3      	subs	r3, r2, r3
 802094a:	b29b      	uxth	r3, r3
 802094c:	b21b      	sxth	r3, r3
 802094e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
 8020952:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8020956:	b29a      	uxth	r2, r3
 8020958:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 802095c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020960:	4299      	cmp	r1, r3
 8020962:	dd02      	ble.n	802096a <lv_slider_design+0x1f4>
 8020964:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8020968:	e000      	b.n	802096c <lv_slider_design+0x1f6>
 802096a:	2300      	movs	r3, #0
 802096c:	4413      	add	r3, r2
 802096e:	b29b      	uxth	r3, r3
 8020970:	b21b      	sxth	r3, r3
 8020972:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 8020976:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 802097a:	b29a      	uxth	r2, r3
 802097c:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 8020980:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020984:	4299      	cmp	r1, r3
 8020986:	dd02      	ble.n	802098e <lv_slider_design+0x218>
 8020988:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 802098c:	e000      	b.n	8020990 <lv_slider_design+0x21a>
 802098e:	2300      	movs	r3, #0
 8020990:	1ad3      	subs	r3, r2, r3
 8020992:	b29b      	uxth	r3, r3
 8020994:	b21b      	sxth	r3, r3
 8020996:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lv_draw_rect(&area_bg, mask, style_bg, lv_obj_get_opa_scale(slider));
#else
        /* Draw the borders later if the slider is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(slider)) {
 802099a:	68f8      	ldr	r0, [r7, #12]
 802099c:	f7e9 fa55 	bl	8009e4a <lv_obj_is_focused>
 80209a0:	4603      	mov	r3, r0
 80209a2:	2b00      	cmp	r3, #0
 80209a4:	d012      	beq.n	80209cc <lv_slider_design+0x256>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 80209a6:	f107 0314 	add.w	r3, r7, #20
 80209aa:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80209ae:	4618      	mov	r0, r3
 80209b0:	f7ea fca2 	bl	800b2f8 <lv_style_copy>
            style_tmp.body.border.width = 0;
 80209b4:	2300      	movs	r3, #0
 80209b6:	843b      	strh	r3, [r7, #32]
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 80209b8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80209bc:	f107 0214 	add.w	r2, r7, #20
 80209c0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80209c4:	68b9      	ldr	r1, [r7, #8]
 80209c6:	f7ee fedc 	bl	800f782 <lv_draw_rect>
 80209ca:	e008      	b.n	80209de <lv_slider_design+0x268>
        } else {
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 80209cc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80209d0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80209d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80209d8:	68b9      	ldr	r1, [r7, #8]
 80209da:	f7ee fed2 	bl	800f782 <lv_draw_rect>
        }
#endif

        /*Draw the indicator*/
        lv_area_t area_indic;
        lv_area_copy(&area_indic, &area_bg);
 80209de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80209e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80209e6:	4611      	mov	r1, r2
 80209e8:	4618      	mov	r0, r3
 80209ea:	f7ff fd29 	bl	8020440 <lv_area_copy>

        /*Be sure at least ver pad/hor pad width indicator will remain*/
        lv_coord_t pad_top_indic    = style_indic->body.padding.top;
 80209ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80209f2:	8adb      	ldrh	r3, [r3, #22]
 80209f4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        lv_coord_t pad_bottom_indic = style_indic->body.padding.bottom;
 80209f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80209fc:	8b1b      	ldrh	r3, [r3, #24]
 80209fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        lv_coord_t pad_left_indic   = style_indic->body.padding.left;
 8020a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020a06:	8b5b      	ldrh	r3, [r3, #26]
 8020a08:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        lv_coord_t pad_right_indic  = style_indic->body.padding.right;
 8020a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020a10:	8b9b      	ldrh	r3, [r3, #28]
 8020a12:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        if(pad_top_indic + pad_bottom_indic + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 8020a16:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
 8020a1a:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8020a1e:	4413      	add	r3, r2
 8020a20:	1d1c      	adds	r4, r3, #4
 8020a22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020a26:	4618      	mov	r0, r3
 8020a28:	f7ff fd2f 	bl	802048a <lv_area_get_height>
 8020a2c:	4603      	mov	r3, r0
 8020a2e:	429c      	cmp	r4, r3
 8020a30:	dd0d      	ble.n	8020a4e <lv_slider_design+0x2d8>
            pad_top_indic    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8020a32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020a36:	4618      	mov	r0, r3
 8020a38:	f7ff fd27 	bl	802048a <lv_area_get_height>
 8020a3c:	4603      	mov	r3, r0
 8020a3e:	3b04      	subs	r3, #4
 8020a40:	105b      	asrs	r3, r3, #1
 8020a42:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
            pad_bottom_indic = pad_top_indic;
 8020a46:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8020a4a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        }
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8020a4e:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 8020a52:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8020a56:	4413      	add	r3, r2
 8020a58:	1d1c      	adds	r4, r3, #4
 8020a5a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020a5e:	4618      	mov	r0, r3
 8020a60:	f7ff fcfc 	bl	802045c <lv_area_get_width>
 8020a64:	4603      	mov	r3, r0
 8020a66:	429c      	cmp	r4, r3
 8020a68:	dd0d      	ble.n	8020a86 <lv_slider_design+0x310>
            pad_left_indic  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8020a6a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f7ff fcf4 	bl	802045c <lv_area_get_width>
 8020a74:	4603      	mov	r3, r0
 8020a76:	3b04      	subs	r3, #4
 8020a78:	105b      	asrs	r3, r3, #1
 8020a7a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
            pad_right_indic = pad_left_indic;
 8020a7e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8020a82:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        }

        area_indic.x1 += pad_left_indic;
 8020a86:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8020a8a:	b29a      	uxth	r2, r3
 8020a8c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8020a90:	4413      	add	r3, r2
 8020a92:	b29b      	uxth	r3, r3
 8020a94:	b21b      	sxth	r3, r3
 8020a96:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        area_indic.x2 -= pad_right_indic;
 8020a9a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8020a9e:	b29a      	uxth	r2, r3
 8020aa0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8020aa4:	1ad3      	subs	r3, r2, r3
 8020aa6:	b29b      	uxth	r3, r3
 8020aa8:	b21b      	sxth	r3, r3
 8020aaa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        area_indic.y1 += pad_top_indic;
 8020aae:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8020ab2:	b29a      	uxth	r2, r3
 8020ab4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8020ab8:	4413      	add	r3, r2
 8020aba:	b29b      	uxth	r3, r3
 8020abc:	b21b      	sxth	r3, r3
 8020abe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        area_indic.y2 -= pad_bottom_indic;
 8020ac2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020ac6:	b29a      	uxth	r2, r3
 8020ac8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8020acc:	1ad3      	subs	r3, r2, r3
 8020ace:	b29b      	uxth	r3, r3
 8020ad0:	b21b      	sxth	r3, r3
 8020ad2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        lv_coord_t cur_value = lv_slider_get_value(slider);
 8020ad6:	68f8      	ldr	r0, [r7, #12]
 8020ad8:	f7ff fe08 	bl	80206ec <lv_slider_get_value>
 8020adc:	4603      	mov	r3, r0
 8020ade:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        lv_coord_t min_value = lv_slider_get_min_value(slider);
 8020ae2:	68f8      	ldr	r0, [r7, #12]
 8020ae4:	f7ff fcfb 	bl	80204de <lv_slider_get_min_value>
 8020ae8:	4603      	mov	r3, r0
 8020aea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        lv_coord_t max_value = lv_slider_get_max_value(slider);
 8020aee:	68f8      	ldr	r0, [r7, #12]
 8020af0:	f7ff fd01 	bl	80204f6 <lv_slider_get_max_value>
 8020af4:	4603      	mov	r3, r0
 8020af6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

        /*If dragged draw to the drag position*/
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 8020afa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020afe:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8020b02:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020b06:	d004      	beq.n	8020b12 <lv_slider_design+0x39c>
 8020b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020b0c:	8b1b      	ldrh	r3, [r3, #24]
 8020b0e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

        if(slider_w >= slider_h) {
 8020b12:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8020b16:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020b1a:	429a      	cmp	r2, r3
 8020b1c:	db7e      	blt.n	8020c1c <lv_slider_design+0x4a6>
            lv_coord_t indic_w = lv_area_get_width(&area_indic);
 8020b1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020b22:	4618      	mov	r0, r3
 8020b24:	f7ff fc9a 	bl	802045c <lv_area_get_width>
 8020b28:	4603      	mov	r3, r0
 8020b2a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#if LV_USE_ANIMATION
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 8020b2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020b32:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8020b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020b3a:	d03e      	beq.n	8020bba <lv_slider_design+0x444>
                /*Calculate the coordinates of anim. start and end*/
                lv_coord_t anim_start_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8020b3c:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8020b40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020b44:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8020b48:	4611      	mov	r1, r2
 8020b4a:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020b4e:	1a8a      	subs	r2, r1, r2
 8020b50:	fb02 f203 	mul.w	r2, r2, r3
 8020b54:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020b58:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020b5c:	1acb      	subs	r3, r1, r3
 8020b5e:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_start_x =
 8020b62:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
                lv_coord_t anim_end_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8020b66:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8020b6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020b6e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020b72:	4611      	mov	r1, r2
 8020b74:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020b78:	1a8a      	subs	r2, r1, r2
 8020b7a:	fb02 f203 	mul.w	r2, r2, r3
 8020b7e:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020b82:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020b86:	1acb      	subs	r3, r1, r3
 8020b88:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_end_x =
 8020b8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

                /*Calculate the real position based on `anim_state` (between `anim_start` and
                 * `anim_end`)*/
                area_indic.x2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 8020b90:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8020b94:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8020b98:	1ad3      	subs	r3, r2, r3
 8020b9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020b9e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8020ba2:	fb02 f303 	mul.w	r3, r2, r3
 8020ba6:	121b      	asrs	r3, r3, #8
 8020ba8:	b29a      	uxth	r2, r3
 8020baa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8020bae:	4413      	add	r3, r2
 8020bb0:	b29b      	uxth	r3, r3
 8020bb2:	b21b      	sxth	r3, r3
 8020bb4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8020bb8:	e012      	b.n	8020be0 <lv_slider_design+0x46a>
            } else
#endif
            {
                area_indic.x2 = (int32_t)((int32_t)indic_w * (cur_value - min_value)) / (max_value - min_value);
 8020bba:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8020bbe:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 8020bc2:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020bc6:	1a8a      	subs	r2, r1, r2
 8020bc8:	fb02 f203 	mul.w	r2, r2, r3
 8020bcc:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020bd0:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020bd4:	1acb      	subs	r3, r1, r3
 8020bd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bda:	b21b      	sxth	r3, r3
 8020bdc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 8020be0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8020be4:	b29a      	uxth	r2, r3
 8020be6:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8020bea:	b29b      	uxth	r3, r3
 8020bec:	4413      	add	r3, r2
 8020bee:	b29b      	uxth	r3, r3
 8020bf0:	3b01      	subs	r3, #1
 8020bf2:	b29b      	uxth	r3, r3
 8020bf4:	b21b      	sxth	r3, r3
 8020bf6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

            /*Draw the indicator but don't draw an ugly 1px wide rectangle on the left on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 8020bfa:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8020bfe:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8020c02:	429a      	cmp	r2, r3
 8020c04:	f000 8087 	beq.w	8020d16 <lv_slider_design+0x5a0>
 8020c08:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8020c0c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8020c10:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8020c14:	68b9      	ldr	r1, [r7, #8]
 8020c16:	f7ee fdb4 	bl	800f782 <lv_draw_rect>
 8020c1a:	e07c      	b.n	8020d16 <lv_slider_design+0x5a0>

        } else {
            lv_coord_t indic_h = lv_area_get_height(&area_indic);
 8020c1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020c20:	4618      	mov	r0, r3
 8020c22:	f7ff fc32 	bl	802048a <lv_area_get_height>
 8020c26:	4603      	mov	r3, r0
 8020c28:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
#if LV_USE_ANIMATION
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 8020c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020c30:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8020c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020c38:	d03e      	beq.n	8020cb8 <lv_slider_design+0x542>
                /*Calculate the coordinates of anim. start and end*/
                lv_coord_t anim_start_y =
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8020c3a:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8020c3e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020c42:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8020c46:	4611      	mov	r1, r2
 8020c48:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020c4c:	1a8a      	subs	r2, r1, r2
 8020c4e:	fb02 f203 	mul.w	r2, r2, r3
 8020c52:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020c56:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020c5a:	1acb      	subs	r3, r1, r3
 8020c5c:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_start_y =
 8020c60:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                lv_coord_t anim_end_y =
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8020c64:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8020c68:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020c6c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020c70:	4611      	mov	r1, r2
 8020c72:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020c76:	1a8a      	subs	r2, r1, r2
 8020c78:	fb02 f203 	mul.w	r2, r2, r3
 8020c7c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020c80:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020c84:	1acb      	subs	r3, r1, r3
 8020c86:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_end_y =
 8020c8a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

                /*Calculate the real position based on `anim_state` (between `anim_start` and
                 * `anim_end`)*/
                area_indic.y1 = anim_start_y + (((anim_end_y - anim_start_y) * ext->bar.anim_state) >> 8);
 8020c8e:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	; 0x7c
 8020c92:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8020c96:	1ad3      	subs	r3, r2, r3
 8020c98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020c9c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8020ca0:	fb02 f303 	mul.w	r3, r2, r3
 8020ca4:	121b      	asrs	r3, r3, #8
 8020ca6:	b29a      	uxth	r2, r3
 8020ca8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8020cac:	4413      	add	r3, r2
 8020cae:	b29b      	uxth	r3, r3
 8020cb0:	b21b      	sxth	r3, r3
 8020cb2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8020cb6:	e012      	b.n	8020cde <lv_slider_design+0x568>
            } else
#endif
            {
                area_indic.y1 = (int32_t)((int32_t)indic_h * (cur_value - min_value)) / (max_value - min_value);
 8020cb8:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8020cbc:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 8020cc0:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020cc4:	1a8a      	subs	r2, r1, r2
 8020cc6:	fb02 f203 	mul.w	r2, r2, r3
 8020cca:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020cce:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020cd2:	1acb      	subs	r3, r1, r3
 8020cd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cd8:	b21b      	sxth	r3, r3
 8020cda:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
 8020cde:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020ce2:	b29a      	uxth	r2, r3
 8020ce4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8020ce8:	b29b      	uxth	r3, r3
 8020cea:	1ad3      	subs	r3, r2, r3
 8020cec:	b29b      	uxth	r3, r3
 8020cee:	3301      	adds	r3, #1
 8020cf0:	b29b      	uxth	r3, r3
 8020cf2:	b21b      	sxth	r3, r3
 8020cf4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /*Draw the indicator but don't draw an ugly 1px height rectangle on the bottom on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 8020cf8:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8020cfc:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8020d00:	429a      	cmp	r2, r3
 8020d02:	d008      	beq.n	8020d16 <lv_slider_design+0x5a0>
 8020d04:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8020d08:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8020d0c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8020d10:	68b9      	ldr	r1, [r7, #8]
 8020d12:	f7ee fd36 	bl	800f782 <lv_draw_rect>
        /*Before the knob add the border if required*/
#if LV_USE_GROUP
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(slider)) {
 8020d16:	68f8      	ldr	r0, [r7, #12]
 8020d18:	f7e9 f897 	bl	8009e4a <lv_obj_is_focused>
 8020d1c:	4603      	mov	r3, r0
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	d013      	beq.n	8020d4a <lv_slider_design+0x5d4>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 8020d22:	f107 0314 	add.w	r3, r7, #20
 8020d26:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8020d2a:	4618      	mov	r0, r3
 8020d2c:	f7ea fae4 	bl	800b2f8 <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 8020d30:	2300      	movs	r3, #0
 8020d32:	773b      	strb	r3, [r7, #28]
            style_tmp.body.shadow.width = 0;
 8020d34:	2300      	movs	r3, #0
 8020d36:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8020d38:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8020d3c:	f107 0214 	add.w	r2, r7, #20
 8020d40:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8020d44:	68b9      	ldr	r1, [r7, #8]
 8020d46:	f7ee fd1c 	bl	800f782 <lv_draw_rect>
        }
#endif

        /*Draw the knob*/
        lv_area_t knob_area;
        lv_area_copy(&knob_area, &slider->coords);
 8020d4a:	68fb      	ldr	r3, [r7, #12]
 8020d4c:	f103 0210 	add.w	r2, r3, #16
 8020d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020d54:	4611      	mov	r1, r2
 8020d56:	4618      	mov	r0, r3
 8020d58:	f7ff fb72 	bl	8020440 <lv_area_copy>

        if(slider_w >= slider_h) {
 8020d5c:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8020d60:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020d64:	429a      	cmp	r2, r3
 8020d66:	f2c0 80ae 	blt.w	8020ec6 <lv_slider_design+0x750>
            if(ext->knob_in == 0) {
 8020d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020d6e:	7e9b      	ldrb	r3, [r3, #26]
 8020d70:	f003 0301 	and.w	r3, r3, #1
 8020d74:	b2db      	uxtb	r3, r3
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d11b      	bne.n	8020db2 <lv_slider_design+0x63c>
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 8020d7a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8020d7e:	b29a      	uxth	r2, r3
 8020d80:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020d84:	0fd9      	lsrs	r1, r3, #31
 8020d86:	440b      	add	r3, r1
 8020d88:	105b      	asrs	r3, r3, #1
 8020d8a:	b21b      	sxth	r3, r3
 8020d8c:	b29b      	uxth	r3, r3
 8020d8e:	1ad3      	subs	r3, r2, r3
 8020d90:	b29b      	uxth	r3, r3
 8020d92:	b21b      	sxth	r3, r3
 8020d94:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 8020d98:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8020d9c:	b29a      	uxth	r2, r3
 8020d9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8020da2:	4413      	add	r3, r2
 8020da4:	b29b      	uxth	r3, r3
 8020da6:	3b01      	subs	r3, #1
 8020da8:	b29b      	uxth	r3, r3
 8020daa:	b21b      	sxth	r3, r3
 8020dac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8020db0:	e07e      	b.n	8020eb0 <lv_slider_design+0x73a>
            } else {
#if LV_USE_ANIMATION
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 8020db2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020db6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8020dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020dbe:	d048      	beq.n	8020e52 <lv_slider_design+0x6dc>
                    lv_coord_t w = slider_w - slider_h - 1;
 8020dc0:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8020dc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8020dc8:	1ad3      	subs	r3, r2, r3
 8020dca:	b29b      	uxth	r3, r3
 8020dcc:	3b01      	subs	r3, #1
 8020dce:	b29b      	uxth	r3, r3
 8020dd0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8020dd4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8020dd8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020ddc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8020de0:	4611      	mov	r1, r2
 8020de2:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020de6:	1a8a      	subs	r2, r1, r2
 8020de8:	fb02 f203 	mul.w	r2, r2, r3
 8020dec:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020df0:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020df4:	1acb      	subs	r3, r1, r3
 8020df6:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 8020dfa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8020dfe:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8020e02:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020e06:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020e0a:	4611      	mov	r1, r2
 8020e0c:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020e10:	1a8a      	subs	r2, r1, r2
 8020e12:	fb02 f203 	mul.w	r2, r2, r3
 8020e16:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020e1a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020e1e:	1acb      	subs	r3, r1, r3
 8020e20:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 8020e24:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    knob_area.x1 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 8020e28:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8020e2c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8020e30:	1ad3      	subs	r3, r2, r3
 8020e32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020e36:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8020e3a:	fb02 f303 	mul.w	r3, r2, r3
 8020e3e:	121b      	asrs	r3, r3, #8
 8020e40:	b29a      	uxth	r2, r3
 8020e42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8020e46:	4413      	add	r3, r2
 8020e48:	b29b      	uxth	r3, r3
 8020e4a:	b21b      	sxth	r3, r3
 8020e4c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8020e50:	e016      	b.n	8020e80 <lv_slider_design+0x70a>
                } else
#endif
                {
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 8020e52:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8020e56:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020e5a:	1ad3      	subs	r3, r2, r3
 8020e5c:	3b01      	subs	r3, #1
 8020e5e:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 8020e62:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020e66:	1a8a      	subs	r2, r1, r2
 8020e68:	fb02 f203 	mul.w	r2, r2, r3
                                   (max_value - min_value);
 8020e6c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020e70:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020e74:	1acb      	subs	r3, r1, r3
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 8020e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e7a:	b21b      	sxth	r3, r3
 8020e7c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                }

                knob_area.x1 += slider->coords.x1;
 8020e80:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8020e84:	b29a      	uxth	r2, r3
 8020e86:	68fb      	ldr	r3, [r7, #12]
 8020e88:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020e8c:	b29b      	uxth	r3, r3
 8020e8e:	4413      	add	r3, r2
 8020e90:	b29b      	uxth	r3, r3
 8020e92:	b21b      	sxth	r3, r3
 8020e94:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 8020e98:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8020e9c:	b29a      	uxth	r2, r3
 8020e9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8020ea2:	4413      	add	r3, r2
 8020ea4:	b29b      	uxth	r3, r3
 8020ea6:	3b01      	subs	r3, #1
 8020ea8:	b29b      	uxth	r3, r3
 8020eaa:	b21b      	sxth	r3, r3
 8020eac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            }

            knob_area.y1 = slider->coords.y1;
 8020eb0:	68fb      	ldr	r3, [r7, #12]
 8020eb2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8020eb6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            knob_area.y2 = slider->coords.y2;
 8020eba:	68fb      	ldr	r3, [r7, #12]
 8020ebc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8020ec0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8020ec4:	e0ac      	b.n	8021020 <lv_slider_design+0x8aa>
        } else {
            if(ext->knob_in == 0) {
 8020ec6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020eca:	7e9b      	ldrb	r3, [r3, #26]
 8020ecc:	f003 0301 	and.w	r3, r3, #1
 8020ed0:	b2db      	uxtb	r3, r3
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d11b      	bne.n	8020f0e <lv_slider_design+0x798>
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 8020ed6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8020eda:	b29a      	uxth	r2, r3
 8020edc:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8020ee0:	0fd9      	lsrs	r1, r3, #31
 8020ee2:	440b      	add	r3, r1
 8020ee4:	105b      	asrs	r3, r3, #1
 8020ee6:	b21b      	sxth	r3, r3
 8020ee8:	b29b      	uxth	r3, r3
 8020eea:	1ad3      	subs	r3, r2, r3
 8020eec:	b29b      	uxth	r3, r3
 8020eee:	b21b      	sxth	r3, r3
 8020ef0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 8020ef4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8020ef8:	b29a      	uxth	r2, r3
 8020efa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8020efe:	4413      	add	r3, r2
 8020f00:	b29b      	uxth	r3, r3
 8020f02:	3b01      	subs	r3, #1
 8020f04:	b29b      	uxth	r3, r3
 8020f06:	b21b      	sxth	r3, r3
 8020f08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8020f0c:	e07e      	b.n	802100c <lv_slider_design+0x896>
            } else {
#if LV_USE_ANIMATION
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 8020f0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020f12:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8020f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020f1a:	d048      	beq.n	8020fae <lv_slider_design+0x838>
                    lv_coord_t h = slider_h - slider_w - 1;
 8020f1c:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8020f20:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8020f24:	1ad3      	subs	r3, r2, r3
 8020f26:	b29b      	uxth	r3, r3
 8020f28:	3b01      	subs	r3, #1
 8020f2a:	b29b      	uxth	r3, r3
 8020f2c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8020f30:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8020f34:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020f38:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8020f3c:	4611      	mov	r1, r2
 8020f3e:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020f42:	1a8a      	subs	r2, r1, r2
 8020f44:	fb02 f203 	mul.w	r2, r2, r3
 8020f48:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020f4c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020f50:	1acb      	subs	r3, r1, r3
 8020f52:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 8020f56:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8020f5a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8020f5e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020f62:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020f66:	4611      	mov	r1, r2
 8020f68:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020f6c:	1a8a      	subs	r2, r1, r2
 8020f6e:	fb02 f203 	mul.w	r2, r2, r3
 8020f72:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020f76:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020f7a:	1acb      	subs	r3, r1, r3
 8020f7c:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 8020f80:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    knob_area.y2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 8020f84:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8020f88:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8020f8c:	1ad3      	subs	r3, r2, r3
 8020f8e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8020f92:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8020f96:	fb02 f303 	mul.w	r3, r2, r3
 8020f9a:	121b      	asrs	r3, r3, #8
 8020f9c:	b29a      	uxth	r2, r3
 8020f9e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8020fa2:	4413      	add	r3, r2
 8020fa4:	b29b      	uxth	r3, r3
 8020fa6:	b21b      	sxth	r3, r3
 8020fa8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8020fac:	e016      	b.n	8020fdc <lv_slider_design+0x866>
                } else
#endif
                {
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 8020fae:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8020fb2:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8020fb6:	1ad3      	subs	r3, r2, r3
 8020fb8:	3b01      	subs	r3, #1
 8020fba:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 8020fbe:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8020fc2:	1a8a      	subs	r2, r1, r2
 8020fc4:	fb02 f203 	mul.w	r2, r2, r3
                                   (max_value - min_value);
 8020fc8:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8020fcc:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8020fd0:	1acb      	subs	r3, r1, r3
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 8020fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fd6:	b21b      	sxth	r3, r3
 8020fd8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                }

                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 8020fdc:	68fb      	ldr	r3, [r7, #12]
 8020fde:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8020fe2:	b29a      	uxth	r2, r3
 8020fe4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8020fe8:	b29b      	uxth	r3, r3
 8020fea:	1ad3      	subs	r3, r2, r3
 8020fec:	b29b      	uxth	r3, r3
 8020fee:	b21b      	sxth	r3, r3
 8020ff0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 8020ff4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8020ff8:	b29a      	uxth	r2, r3
 8020ffa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8020ffe:	1ad3      	subs	r3, r2, r3
 8021000:	b29b      	uxth	r3, r3
 8021002:	3b01      	subs	r3, #1
 8021004:	b29b      	uxth	r3, r3
 8021006:	b21b      	sxth	r3, r3
 8021008:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }
            knob_area.x1 = slider->coords.x1;
 802100c:	68fb      	ldr	r3, [r7, #12]
 802100e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8021012:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            knob_area.x2 = slider->coords.x2;
 8021016:	68fb      	ldr	r3, [r7, #12]
 8021018:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 802101c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }
        lv_draw_rect(&knob_area, mask, style_knob, opa_scale);
 8021020:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8021024:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8021028:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802102c:	68b9      	ldr	r1, [r7, #8]
 802102e:	f7ee fba8 	bl	800f782 <lv_draw_rect>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 8021032:	2301      	movs	r3, #1
}
 8021034:	4618      	mov	r0, r3
 8021036:	37b4      	adds	r7, #180	; 0xb4
 8021038:	46bd      	mov	sp, r7
 802103a:	bd90      	pop	{r4, r7, pc}

0802103c <lv_slider_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)
{
 802103c:	b590      	push	{r4, r7, lr}
 802103e:	b093      	sub	sp, #76	; 0x4c
 8021040:	af00      	add	r7, sp, #0
 8021042:	60f8      	str	r0, [r7, #12]
 8021044:	460b      	mov	r3, r1
 8021046:	607a      	str	r2, [r7, #4]
 8021048:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(slider, sign, param);
 802104a:	4bba      	ldr	r3, [pc, #744]	; (8021334 <lv_slider_signal+0x2f8>)
 802104c:	681b      	ldr	r3, [r3, #0]
 802104e:	7af9      	ldrb	r1, [r7, #11]
 8021050:	687a      	ldr	r2, [r7, #4]
 8021052:	68f8      	ldr	r0, [r7, #12]
 8021054:	4798      	blx	r3
 8021056:	4603      	mov	r3, r0
 8021058:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(res != LV_RES_OK) return res;
 802105c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021060:	2b01      	cmp	r3, #1
 8021062:	d002      	beq.n	802106a <lv_slider_signal+0x2e>
 8021064:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021068:	e233      	b.n	80214d2 <lv_slider_signal+0x496>

    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 802106a:	68f8      	ldr	r0, [r7, #12]
 802106c:	f7e8 fed5 	bl	8009e1a <lv_obj_get_ext_attr>
 8021070:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_point_t p;
    lv_coord_t w = lv_obj_get_width(slider);
 8021072:	68f8      	ldr	r0, [r7, #12]
 8021074:	f7e8 fde6 	bl	8009c44 <lv_obj_get_width>
 8021078:	4603      	mov	r3, r0
 802107a:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t h = lv_obj_get_height(slider);
 802107c:	68f8      	ldr	r0, [r7, #12]
 802107e:	f7e8 fdef 	bl	8009c60 <lv_obj_get_height>
 8021082:	4603      	mov	r3, r0
 8021084:	873b      	strh	r3, [r7, #56]	; 0x38

    if(sign == LV_SIGNAL_PRESSED) {
 8021086:	7afb      	ldrb	r3, [r7, #11]
 8021088:	2b07      	cmp	r3, #7
 802108a:	d107      	bne.n	802109c <lv_slider_signal+0x60>
        ext->drag_value = lv_slider_get_value(slider);
 802108c:	68f8      	ldr	r0, [r7, #12]
 802108e:	f7ff fb2d 	bl	80206ec <lv_slider_get_value>
 8021092:	4603      	mov	r3, r0
 8021094:	461a      	mov	r2, r3
 8021096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021098:	831a      	strh	r2, [r3, #24]
 802109a:	e218      	b.n	80214ce <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_PRESSING) {
 802109c:	7afb      	ldrb	r3, [r7, #11]
 802109e:	2b08      	cmp	r3, #8
 80210a0:	f040 80b4 	bne.w	802120c <lv_slider_signal+0x1d0>
        lv_indev_get_point(param, &p);
 80210a4:	f107 0310 	add.w	r3, r7, #16
 80210a8:	4619      	mov	r1, r3
 80210aa:	6878      	ldr	r0, [r7, #4]
 80210ac:	f7e7 f85c 	bl	8008168 <lv_indev_get_point>
        int16_t tmp = 0;
 80210b0:	2300      	movs	r3, #0
 80210b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        if(w > h) {
 80210b6:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 80210ba:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80210be:	429a      	cmp	r2, r3
 80210c0:	dd37      	ble.n	8021132 <lv_slider_signal+0xf6>
            lv_coord_t knob_w = h;
 80210c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80210c4:	82fb      	strh	r3, [r7, #22]
            p.x -=
 80210c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80210ca:	b29a      	uxth	r2, r3
                slider->coords.x1 + h / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 80210cc:	68fb      	ldr	r3, [r7, #12]
 80210ce:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80210d2:	b299      	uxth	r1, r3
 80210d4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80210d8:	0fd8      	lsrs	r0, r3, #31
 80210da:	4403      	add	r3, r0
 80210dc:	105b      	asrs	r3, r3, #1
 80210de:	b21b      	sxth	r3, r3
 80210e0:	b29b      	uxth	r3, r3
 80210e2:	440b      	add	r3, r1
 80210e4:	b29b      	uxth	r3, r3
            p.x -=
 80210e6:	1ad3      	subs	r3, r2, r3
 80210e8:	b29b      	uxth	r3, r3
 80210ea:	b21b      	sxth	r3, r3
 80210ec:	823b      	strh	r3, [r7, #16]
            tmp = (int32_t)((int32_t)p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 80210ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80210f2:	461a      	mov	r2, r3
 80210f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80210f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80210fa:	4619      	mov	r1, r3
 80210fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80210fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021102:	1acb      	subs	r3, r1, r3
 8021104:	3301      	adds	r3, #1
 8021106:	fb03 f202 	mul.w	r2, r3, r2
 802110a:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 802110e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8021112:	1acb      	subs	r3, r1, r3
 8021114:	fb92 f3f3 	sdiv	r3, r2, r3
 8021118:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            tmp += ext->bar.min_value;
 802111c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802111e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021122:	b29a      	uxth	r2, r3
 8021124:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021128:	4413      	add	r3, r2
 802112a:	b29b      	uxth	r3, r3
 802112c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8021130:	e036      	b.n	80211a0 <lv_slider_signal+0x164>
        } else {
            lv_coord_t knob_h = w;
 8021132:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021134:	833b      	strh	r3, [r7, #24]
            p.y -=
 8021136:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802113a:	b29a      	uxth	r2, r3
                slider->coords.y1 + w / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 802113c:	68fb      	ldr	r3, [r7, #12]
 802113e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8021142:	b299      	uxth	r1, r3
 8021144:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8021148:	0fd8      	lsrs	r0, r3, #31
 802114a:	4403      	add	r3, r0
 802114c:	105b      	asrs	r3, r3, #1
 802114e:	b21b      	sxth	r3, r3
 8021150:	b29b      	uxth	r3, r3
 8021152:	440b      	add	r3, r1
 8021154:	b29b      	uxth	r3, r3
            p.y -=
 8021156:	1ad3      	subs	r3, r2, r3
 8021158:	b29b      	uxth	r3, r3
 802115a:	b21b      	sxth	r3, r3
 802115c:	827b      	strh	r3, [r7, #18]
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 802115e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021162:	461a      	mov	r2, r3
 8021164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021166:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802116a:	4619      	mov	r1, r3
 802116c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802116e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021172:	1acb      	subs	r3, r1, r3
 8021174:	3301      	adds	r3, #1
 8021176:	fb03 f202 	mul.w	r2, r3, r2
 802117a:	f9b7 1038 	ldrsh.w	r1, [r7, #56]	; 0x38
 802117e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8021182:	1acb      	subs	r3, r1, r3
 8021184:	fb92 f3f3 	sdiv	r3, r2, r3
 8021188:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            tmp = ext->bar.max_value - tmp; /*Invert the value: smaller value means higher y*/
 802118c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802118e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021192:	b29a      	uxth	r2, r3
 8021194:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021198:	1ad3      	subs	r3, r2, r3
 802119a:	b29b      	uxth	r3, r3
 802119c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        if(tmp < ext->bar.min_value)
 80211a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80211a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80211a6:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80211aa:	429a      	cmp	r2, r3
 80211ac:	da04      	bge.n	80211b8 <lv_slider_signal+0x17c>
            tmp = ext->bar.min_value;
 80211ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80211b0:	885b      	ldrh	r3, [r3, #2]
 80211b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80211b6:	e00a      	b.n	80211ce <lv_slider_signal+0x192>
        else if(tmp > ext->bar.max_value)
 80211b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80211ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80211be:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80211c2:	429a      	cmp	r2, r3
 80211c4:	dd03      	ble.n	80211ce <lv_slider_signal+0x192>
            tmp = ext->bar.max_value;
 80211c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80211c8:	889b      	ldrh	r3, [r3, #4]
 80211ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

        if(tmp != ext->drag_value) {
 80211ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80211d0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80211d4:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80211d8:	429a      	cmp	r2, r3
 80211da:	f000 8178 	beq.w	80214ce <lv_slider_signal+0x492>
            ext->drag_value = tmp;
 80211de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80211e0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80211e4:	831a      	strh	r2, [r3, #24]
            lv_obj_invalidate(slider);
 80211e6:	68f8      	ldr	r0, [r7, #12]
 80211e8:	f7e7 fbeb 	bl	80089c2 <lv_obj_invalidate>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 80211ec:	2200      	movs	r2, #0
 80211ee:	210e      	movs	r1, #14
 80211f0:	68f8      	ldr	r0, [r7, #12]
 80211f2:	f7e8 fb98 	bl	8009926 <lv_event_send>
 80211f6:	4603      	mov	r3, r0
 80211f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 80211fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021200:	2b01      	cmp	r3, #1
 8021202:	f000 8164 	beq.w	80214ce <lv_slider_signal+0x492>
 8021206:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 802120a:	e162      	b.n	80214d2 <lv_slider_signal+0x496>
        }
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 802120c:	7afb      	ldrb	r3, [r7, #11]
 802120e:	2b0a      	cmp	r3, #10
 8021210:	d002      	beq.n	8021218 <lv_slider_signal+0x1dc>
 8021212:	7afb      	ldrb	r3, [r7, #11]
 8021214:	2b09      	cmp	r3, #9
 8021216:	d12f      	bne.n	8021278 <lv_slider_signal+0x23c>
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) lv_slider_set_value(slider, ext->drag_value, false);
 8021218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802121a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 802121e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8021222:	d007      	beq.n	8021234 <lv_slider_signal+0x1f8>
 8021224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021226:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 802122a:	2200      	movs	r2, #0
 802122c:	4619      	mov	r1, r3
 802122e:	68f8      	ldr	r0, [r7, #12]
 8021230:	f7ff f942 	bl	80204b8 <lv_slider_set_value>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 8021234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021236:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 802123a:	831a      	strh	r2, [r3, #24]

#if LV_USE_GROUP
        /*Leave edit mode if released. (No need to wait for LONG_PRESS) */
        lv_group_t * g             = lv_obj_get_group(slider);
 802123c:	68f8      	ldr	r0, [r7, #12]
 802123e:	f7e8 fdf8 	bl	8009e32 <lv_obj_get_group>
 8021242:	61f8      	str	r0, [r7, #28]
        bool editing               = lv_group_get_editing(g);
 8021244:	69f8      	ldr	r0, [r7, #28]
 8021246:	f7e6 fdee 	bl	8007e26 <lv_group_get_editing>
 802124a:	4603      	mov	r3, r0
 802124c:	76fb      	strb	r3, [r7, #27]
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802124e:	f7e6 ff2f 	bl	80080b0 <lv_indev_get_act>
 8021252:	4603      	mov	r3, r0
 8021254:	4618      	mov	r0, r3
 8021256:	f7e6 ff37 	bl	80080c8 <lv_indev_get_type>
 802125a:	4603      	mov	r3, r0
 802125c:	76bb      	strb	r3, [r7, #26]
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 802125e:	7ebb      	ldrb	r3, [r7, #26]
 8021260:	2b04      	cmp	r3, #4
 8021262:	f040 8133 	bne.w	80214cc <lv_slider_signal+0x490>
            if(editing) lv_group_set_editing(g, false);
 8021266:	7efb      	ldrb	r3, [r7, #27]
 8021268:	2b00      	cmp	r3, #0
 802126a:	f000 812f 	beq.w	80214cc <lv_slider_signal+0x490>
 802126e:	2100      	movs	r1, #0
 8021270:	69f8      	ldr	r0, [r7, #28]
 8021272:	f7e6 fd4f 	bl	8007d14 <lv_group_set_editing>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8021276:	e129      	b.n	80214cc <lv_slider_signal+0x490>
        }
#endif

    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8021278:	7afb      	ldrb	r3, [r7, #11]
 802127a:	2b02      	cmp	r3, #2
 802127c:	d11d      	bne.n	80212ba <lv_slider_signal+0x27e>
        /* The knob size depends on slider size.
         * During the drawing method the ext. size is used by the knob so refresh the ext. size.*/
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 802127e:	68f8      	ldr	r0, [r7, #12]
 8021280:	f7e8 fce0 	bl	8009c44 <lv_obj_get_width>
 8021284:	4603      	mov	r3, r0
 8021286:	461c      	mov	r4, r3
 8021288:	6878      	ldr	r0, [r7, #4]
 802128a:	f7ff f8e7 	bl	802045c <lv_area_get_width>
 802128e:	4603      	mov	r3, r0
 8021290:	429c      	cmp	r4, r3
 8021292:	d10b      	bne.n	80212ac <lv_slider_signal+0x270>
           lv_obj_get_height(slider) != lv_area_get_height(param)) {
 8021294:	68f8      	ldr	r0, [r7, #12]
 8021296:	f7e8 fce3 	bl	8009c60 <lv_obj_get_height>
 802129a:	4603      	mov	r3, r0
 802129c:	461c      	mov	r4, r3
 802129e:	6878      	ldr	r0, [r7, #4]
 80212a0:	f7ff f8f3 	bl	802048a <lv_area_get_height>
 80212a4:	4603      	mov	r3, r0
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 80212a6:	429c      	cmp	r4, r3
 80212a8:	f000 8111 	beq.w	80214ce <lv_slider_signal+0x492>
            slider->signal_cb(slider, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 80212ac:	68fb      	ldr	r3, [r7, #12]
 80212ae:	69db      	ldr	r3, [r3, #28]
 80212b0:	2200      	movs	r2, #0
 80212b2:	2105      	movs	r1, #5
 80212b4:	68f8      	ldr	r0, [r7, #12]
 80212b6:	4798      	blx	r3
 80212b8:	e109      	b.n	80214ce <lv_slider_signal+0x492>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80212ba:	7afb      	ldrb	r3, [r7, #11]
 80212bc:	2b05      	cmp	r3, #5
 80212be:	f040 8087 	bne.w	80213d0 <lv_slider_signal+0x394>
        const lv_style_t * style      = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 80212c2:	2100      	movs	r1, #0
 80212c4:	68f8      	ldr	r0, [r7, #12]
 80212c6:	f7ff fa2b 	bl	8020720 <lv_slider_get_style>
 80212ca:	62b8      	str	r0, [r7, #40]	; 0x28
        const lv_style_t * knob_style = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
 80212cc:	2102      	movs	r1, #2
 80212ce:	68f8      	ldr	r0, [r7, #12]
 80212d0:	f7ff fa26 	bl	8020720 <lv_slider_get_style>
 80212d4:	6278      	str	r0, [r7, #36]	; 0x24

        lv_coord_t shadow_w = knob_style->body.shadow.width;
 80212d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212d8:	8a5b      	ldrh	r3, [r3, #18]
 80212da:	847b      	strh	r3, [r7, #34]	; 0x22
        if(ext->knob_in == 0) {
 80212dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80212de:	7e9b      	ldrb	r3, [r3, #26]
 80212e0:	f003 0301 	and.w	r3, r3, #1
 80212e4:	b2db      	uxtb	r3, r3
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	d126      	bne.n	8021338 <lv_slider_signal+0x2fc>
            /* The smaller size is the knob diameter*/
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 80212ea:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80212ee:	0fda      	lsrs	r2, r3, #31
 80212f0:	4413      	add	r3, r2
 80212f2:	105b      	asrs	r3, r3, #1
 80212f4:	b21b      	sxth	r3, r3
 80212f6:	1c5a      	adds	r2, r3, #1
 80212f8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80212fc:	441a      	add	r2, r3
 80212fe:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8021302:	0fd9      	lsrs	r1, r3, #31
 8021304:	440b      	add	r3, r1
 8021306:	105b      	asrs	r3, r3, #1
 8021308:	b21b      	sxth	r3, r3
 802130a:	1c59      	adds	r1, r3, #1
 802130c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8021310:	440b      	add	r3, r1
 8021312:	4293      	cmp	r3, r2
 8021314:	bfa8      	it	ge
 8021316:	4613      	movge	r3, r2
 8021318:	843b      	strh	r3, [r7, #32]
            if(slider->ext_draw_pad < x) slider->ext_draw_pad = x;
 802131a:	68fb      	ldr	r3, [r7, #12]
 802131c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8021320:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021324:	429a      	cmp	r2, r3
 8021326:	f340 80d2 	ble.w	80214ce <lv_slider_signal+0x492>
 802132a:	68fb      	ldr	r3, [r7, #12]
 802132c:	8c3a      	ldrh	r2, [r7, #32]
 802132e:	869a      	strh	r2, [r3, #52]	; 0x34
 8021330:	e0cd      	b.n	80214ce <lv_slider_signal+0x492>
 8021332:	bf00      	nop
 8021334:	200177f4 	.word	0x200177f4
        } else {
            lv_coord_t pad = 0;
 8021338:	2300      	movs	r3, #0
 802133a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.top);
 802133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021340:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8021344:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8021348:	4293      	cmp	r3, r2
 802134a:	bfa8      	it	ge
 802134c:	4613      	movge	r3, r2
 802134e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.bottom);
 8021352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021354:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8021358:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 802135c:	4293      	cmp	r3, r2
 802135e:	bfa8      	it	ge
 8021360:	4613      	movge	r3, r2
 8021362:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.left);
 8021366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021368:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 802136c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8021370:	4293      	cmp	r3, r2
 8021372:	bfa8      	it	ge
 8021374:	4613      	movge	r3, r2
 8021376:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.right);
 802137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802137c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8021380:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8021384:	4293      	cmp	r3, r2
 8021386:	bfa8      	it	ge
 8021388:	4613      	movge	r3, r2
 802138a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(pad < 0) pad = -pad;
 802138e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8021392:	2b00      	cmp	r3, #0
 8021394:	da05      	bge.n	80213a2 <lv_slider_signal+0x366>
 8021396:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802139a:	425b      	negs	r3, r3
 802139c:	b29b      	uxth	r3, r3
 802139e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(slider->ext_draw_pad < pad) slider->ext_draw_pad = pad;
 80213a2:	68fb      	ldr	r3, [r7, #12]
 80213a4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80213a8:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80213ac:	429a      	cmp	r2, r3
 80213ae:	dd03      	ble.n	80213b8 <lv_slider_signal+0x37c>
 80213b0:	68fb      	ldr	r3, [r7, #12]
 80213b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80213b6:	869a      	strh	r2, [r3, #52]	; 0x34

            if(slider->ext_draw_pad < shadow_w) slider->ext_draw_pad = shadow_w;
 80213b8:	68fb      	ldr	r3, [r7, #12]
 80213ba:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80213be:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80213c2:	429a      	cmp	r2, r3
 80213c4:	f340 8083 	ble.w	80214ce <lv_slider_signal+0x492>
 80213c8:	68fb      	ldr	r3, [r7, #12]
 80213ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80213cc:	869a      	strh	r2, [r3, #52]	; 0x34
 80213ce:	e07e      	b.n	80214ce <lv_slider_signal+0x492>
        }
    } else if(sign == LV_SIGNAL_CONTROL) {
 80213d0:	7afb      	ldrb	r3, [r7, #11]
 80213d2:	2b11      	cmp	r3, #17
 80213d4:	d14f      	bne.n	8021476 <lv_slider_signal+0x43a>
        char c = *((char *)param);
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	781b      	ldrb	r3, [r3, #0]
 80213da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 80213de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80213e4:	831a      	strh	r2, [r3, #24]

        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80213e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80213ea:	2b13      	cmp	r3, #19
 80213ec:	d003      	beq.n	80213f6 <lv_slider_signal+0x3ba>
 80213ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80213f2:	2b11      	cmp	r3, #17
 80213f4:	d11b      	bne.n	802142e <lv_slider_signal+0x3f2>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1, true);
 80213f6:	68f8      	ldr	r0, [r7, #12]
 80213f8:	f7ff f978 	bl	80206ec <lv_slider_get_value>
 80213fc:	4603      	mov	r3, r0
 80213fe:	b29b      	uxth	r3, r3
 8021400:	3301      	adds	r3, #1
 8021402:	b29b      	uxth	r3, r3
 8021404:	b21b      	sxth	r3, r3
 8021406:	2201      	movs	r2, #1
 8021408:	4619      	mov	r1, r3
 802140a:	68f8      	ldr	r0, [r7, #12]
 802140c:	f7ff f854 	bl	80204b8 <lv_slider_set_value>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 8021410:	2200      	movs	r2, #0
 8021412:	210e      	movs	r1, #14
 8021414:	68f8      	ldr	r0, [r7, #12]
 8021416:	f7e8 fa86 	bl	8009926 <lv_event_send>
 802141a:	4603      	mov	r3, r0
 802141c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 8021420:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021424:	2b01      	cmp	r3, #1
 8021426:	d052      	beq.n	80214ce <lv_slider_signal+0x492>
 8021428:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 802142c:	e051      	b.n	80214d2 <lv_slider_signal+0x496>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 802142e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021432:	2b14      	cmp	r3, #20
 8021434:	d003      	beq.n	802143e <lv_slider_signal+0x402>
 8021436:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802143a:	2b12      	cmp	r3, #18
 802143c:	d147      	bne.n	80214ce <lv_slider_signal+0x492>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1, true);
 802143e:	68f8      	ldr	r0, [r7, #12]
 8021440:	f7ff f954 	bl	80206ec <lv_slider_get_value>
 8021444:	4603      	mov	r3, r0
 8021446:	b29b      	uxth	r3, r3
 8021448:	3b01      	subs	r3, #1
 802144a:	b29b      	uxth	r3, r3
 802144c:	b21b      	sxth	r3, r3
 802144e:	2201      	movs	r2, #1
 8021450:	4619      	mov	r1, r3
 8021452:	68f8      	ldr	r0, [r7, #12]
 8021454:	f7ff f830 	bl	80204b8 <lv_slider_set_value>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 8021458:	2200      	movs	r2, #0
 802145a:	210e      	movs	r1, #14
 802145c:	68f8      	ldr	r0, [r7, #12]
 802145e:	f7e8 fa62 	bl	8009926 <lv_event_send>
 8021462:	4603      	mov	r3, r0
 8021464:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 8021468:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 802146c:	2b01      	cmp	r3, #1
 802146e:	d02e      	beq.n	80214ce <lv_slider_signal+0x492>
 8021470:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021474:	e02d      	b.n	80214d2 <lv_slider_signal+0x496>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8021476:	7afb      	ldrb	r3, [r7, #11]
 8021478:	2b12      	cmp	r3, #18
 802147a:	d105      	bne.n	8021488 <lv_slider_signal+0x44c>
        bool * editable = (bool *)param;
 802147c:	687b      	ldr	r3, [r7, #4]
 802147e:	633b      	str	r3, [r7, #48]	; 0x30
        *editable       = true;
 8021480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021482:	2201      	movs	r2, #1
 8021484:	701a      	strb	r2, [r3, #0]
 8021486:	e022      	b.n	80214ce <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8021488:	7afb      	ldrb	r3, [r7, #11]
 802148a:	2b06      	cmp	r3, #6
 802148c:	d11f      	bne.n	80214ce <lv_slider_signal+0x492>
        lv_obj_type_t * buf = param;
 802148e:	687b      	ldr	r3, [r7, #4]
 8021490:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8021492:	2300      	movs	r3, #0
 8021494:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8021498:	e00b      	b.n	80214b2 <lv_slider_signal+0x476>
            if(buf->type[i] == NULL) break;
 802149a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 802149e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80214a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	d009      	beq.n	80214bc <lv_slider_signal+0x480>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80214a8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80214ac:	3301      	adds	r3, #1
 80214ae:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80214b2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80214b6:	2b06      	cmp	r3, #6
 80214b8:	d9ef      	bls.n	802149a <lv_slider_signal+0x45e>
 80214ba:	e000      	b.n	80214be <lv_slider_signal+0x482>
            if(buf->type[i] == NULL) break;
 80214bc:	bf00      	nop
        }
        buf->type[i] = "lv_slider";
 80214be:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80214c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80214c4:	4905      	ldr	r1, [pc, #20]	; (80214dc <lv_slider_signal+0x4a0>)
 80214c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80214ca:	e000      	b.n	80214ce <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 80214cc:	bf00      	nop
    }

    return res;
 80214ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80214d2:	4618      	mov	r0, r3
 80214d4:	374c      	adds	r7, #76	; 0x4c
 80214d6:	46bd      	mov	sp, r7
 80214d8:	bd90      	pop	{r4, r7, pc}
 80214da:	bf00      	nop
 80214dc:	0802c968 	.word	0x0802c968

080214e0 <lv_slider_set_value>:
{
 80214e0:	b580      	push	{r7, lr}
 80214e2:	b082      	sub	sp, #8
 80214e4:	af00      	add	r7, sp, #0
 80214e6:	6078      	str	r0, [r7, #4]
 80214e8:	460b      	mov	r3, r1
 80214ea:	807b      	strh	r3, [r7, #2]
 80214ec:	4613      	mov	r3, r2
 80214ee:	707b      	strb	r3, [r7, #1]
    lv_bar_set_value(slider, value, anim);
 80214f0:	787a      	ldrb	r2, [r7, #1]
 80214f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80214f6:	4619      	mov	r1, r3
 80214f8:	6878      	ldr	r0, [r7, #4]
 80214fa:	f7f6 fb45 	bl	8017b88 <lv_bar_set_value>
}
 80214fe:	bf00      	nop
 8021500:	3708      	adds	r7, #8
 8021502:	46bd      	mov	sp, r7
 8021504:	bd80      	pop	{r7, pc}

08021506 <lv_slider_set_range>:
{
 8021506:	b580      	push	{r7, lr}
 8021508:	b082      	sub	sp, #8
 802150a:	af00      	add	r7, sp, #0
 802150c:	6078      	str	r0, [r7, #4]
 802150e:	460b      	mov	r3, r1
 8021510:	807b      	strh	r3, [r7, #2]
 8021512:	4613      	mov	r3, r2
 8021514:	803b      	strh	r3, [r7, #0]
    lv_bar_set_range(slider, min, max);
 8021516:	f9b7 2000 	ldrsh.w	r2, [r7]
 802151a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802151e:	4619      	mov	r1, r3
 8021520:	6878      	ldr	r0, [r7, #4]
 8021522:	f7f6 fbb5 	bl	8017c90 <lv_bar_set_range>
}
 8021526:	bf00      	nop
 8021528:	3708      	adds	r7, #8
 802152a:	46bd      	mov	sp, r7
 802152c:	bd80      	pop	{r7, pc}

0802152e <lv_sw_get_state>:
 * Get the state of a switch
 * @param sw pointer to a switch object
 * @return false: OFF; true: ON
 */
static inline bool lv_sw_get_state(const lv_obj_t * sw)
{
 802152e:	b580      	push	{r7, lr}
 8021530:	b082      	sub	sp, #8
 8021532:	af00      	add	r7, sp, #0
 8021534:	6078      	str	r0, [r7, #4]
    return lv_bar_get_value(sw) < LV_SW_MAX_VALUE / 2 ? false : true;
 8021536:	6878      	ldr	r0, [r7, #4]
 8021538:	f7f6 fc17 	bl	8017d6a <lv_bar_get_value>
 802153c:	4603      	mov	r3, r0
 802153e:	2b31      	cmp	r3, #49	; 0x31
 8021540:	bfcc      	ite	gt
 8021542:	2301      	movgt	r3, #1
 8021544:	2300      	movle	r3, #0
 8021546:	b2db      	uxtb	r3, r3
}
 8021548:	4618      	mov	r0, r3
 802154a:	3708      	adds	r7, #8
 802154c:	46bd      	mov	sp, r7
 802154e:	bd80      	pop	{r7, pc}

08021550 <lv_sw_create>:
 * @param par pointer to an object, it will be the parent of the new switch
 * @param copy pointer to a switch object, if not NULL then the new object will be copied from it
 * @return pointer to the created switch
 */
lv_obj_t * lv_sw_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8021550:	b580      	push	{r7, lr}
 8021552:	b086      	sub	sp, #24
 8021554:	af00      	add	r7, sp, #0
 8021556:	6078      	str	r0, [r7, #4]
 8021558:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("switch create started");

    /*Create the ancestor of switch*/
    lv_obj_t * new_sw = lv_slider_create(par, copy);
 802155a:	6839      	ldr	r1, [r7, #0]
 802155c:	6878      	ldr	r0, [r7, #4]
 802155e:	f7fe ffd7 	bl	8020510 <lv_slider_create>
 8021562:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_sw);
 8021564:	697b      	ldr	r3, [r7, #20]
 8021566:	2b00      	cmp	r3, #0
 8021568:	d100      	bne.n	802156c <lv_sw_create+0x1c>
 802156a:	e7fe      	b.n	802156a <lv_sw_create+0x1a>
    if(new_sw == NULL) return NULL;
 802156c:	697b      	ldr	r3, [r7, #20]
 802156e:	2b00      	cmp	r3, #0
 8021570:	d101      	bne.n	8021576 <lv_sw_create+0x26>
 8021572:	2300      	movs	r3, #0
 8021574:	e08b      	b.n	802168e <lv_sw_create+0x13e>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_sw);
 8021576:	4b48      	ldr	r3, [pc, #288]	; (8021698 <lv_sw_create+0x148>)
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	2b00      	cmp	r3, #0
 802157c:	d105      	bne.n	802158a <lv_sw_create+0x3a>
 802157e:	6978      	ldr	r0, [r7, #20]
 8021580:	f7e8 fc33 	bl	8009dea <lv_obj_get_signal_cb>
 8021584:	4602      	mov	r2, r0
 8021586:	4b44      	ldr	r3, [pc, #272]	; (8021698 <lv_sw_create+0x148>)
 8021588:	601a      	str	r2, [r3, #0]

    /*Allocate the switch type specific extended data*/
    lv_sw_ext_t * ext = lv_obj_allocate_ext_attr(new_sw, sizeof(lv_sw_ext_t));
 802158a:	212c      	movs	r1, #44	; 0x2c
 802158c:	6978      	ldr	r0, [r7, #20]
 802158e:	f7e8 fa77 	bl	8009a80 <lv_obj_allocate_ext_attr>
 8021592:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8021594:	693b      	ldr	r3, [r7, #16]
 8021596:	2b00      	cmp	r3, #0
 8021598:	d100      	bne.n	802159c <lv_sw_create+0x4c>
 802159a:	e7fe      	b.n	802159a <lv_sw_create+0x4a>
    if(ext == NULL) return NULL;
 802159c:	693b      	ldr	r3, [r7, #16]
 802159e:	2b00      	cmp	r3, #0
 80215a0:	d101      	bne.n	80215a6 <lv_sw_create+0x56>
 80215a2:	2300      	movs	r3, #0
 80215a4:	e073      	b.n	802168e <lv_sw_create+0x13e>

    /*Initialize the allocated 'ext' */
    ext->changed = 0;
 80215a6:	693a      	ldr	r2, [r7, #16]
 80215a8:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80215ac:	f36f 0300 	bfc	r3, #0, #1
 80215b0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
#if LV_USE_ANIMATION
    ext->anim_time = 0;
 80215b4:	693b      	ldr	r3, [r7, #16]
 80215b6:	2200      	movs	r2, #0
 80215b8:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    ext->style_knob_off = ext->slider.style_knob;
 80215ba:	693b      	ldr	r3, [r7, #16]
 80215bc:	695a      	ldr	r2, [r3, #20]
 80215be:	693b      	ldr	r3, [r7, #16]
 80215c0:	61da      	str	r2, [r3, #28]
    ext->style_knob_on  = ext->slider.style_knob;
 80215c2:	693b      	ldr	r3, [r7, #16]
 80215c4:	695a      	ldr	r2, [r3, #20]
 80215c6:	693b      	ldr	r3, [r7, #16]
 80215c8:	621a      	str	r2, [r3, #32]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_sw, lv_sw_signal);
 80215ca:	4934      	ldr	r1, [pc, #208]	; (802169c <lv_sw_create+0x14c>)
 80215cc:	6978      	ldr	r0, [r7, #20]
 80215ce:	f7e8 fa3b 	bl	8009a48 <lv_obj_set_signal_cb>

    /*Init the new switch switch*/
    if(copy == NULL) {
 80215d2:	683b      	ldr	r3, [r7, #0]
 80215d4:	2b00      	cmp	r3, #0
 80215d6:	d131      	bne.n	802163c <lv_sw_create+0xec>
        lv_obj_set_size(new_sw, 2 * LV_DPI / 3, LV_DPI / 3);
 80215d8:	2221      	movs	r2, #33	; 0x21
 80215da:	2142      	movs	r1, #66	; 0x42
 80215dc:	6978      	ldr	r0, [r7, #20]
 80215de:	f7e7 fba4 	bl	8008d2a <lv_obj_set_size>
        lv_slider_set_knob_in(new_sw, true);
 80215e2:	2101      	movs	r1, #1
 80215e4:	6978      	ldr	r0, [r7, #20]
 80215e6:	f7ff f82f 	bl	8020648 <lv_slider_set_knob_in>
        lv_slider_set_range(new_sw, 0, LV_SW_MAX_VALUE);
 80215ea:	2264      	movs	r2, #100	; 0x64
 80215ec:	2100      	movs	r1, #0
 80215ee:	6978      	ldr	r0, [r7, #20]
 80215f0:	f7ff ff89 	bl	8021506 <lv_slider_set_range>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 80215f4:	f000 fa94 	bl	8021b20 <lv_theme_get_current>
 80215f8:	60b8      	str	r0, [r7, #8]
        if(th) {
 80215fa:	68bb      	ldr	r3, [r7, #8]
 80215fc:	2b00      	cmp	r3, #0
 80215fe:	d045      	beq.n	802168c <lv_sw_create+0x13c>
            lv_sw_set_style(new_sw, LV_SW_STYLE_BG, th->style.sw.bg);
 8021600:	68bb      	ldr	r3, [r7, #8]
 8021602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021604:	461a      	mov	r2, r3
 8021606:	2100      	movs	r1, #0
 8021608:	6978      	ldr	r0, [r7, #20]
 802160a:	f000 f87f 	bl	802170c <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_INDIC, th->style.sw.indic);
 802160e:	68bb      	ldr	r3, [r7, #8]
 8021610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021612:	461a      	mov	r2, r3
 8021614:	2101      	movs	r1, #1
 8021616:	6978      	ldr	r0, [r7, #20]
 8021618:	f000 f878 	bl	802170c <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_KNOB_OFF, th->style.sw.knob_off);
 802161c:	68bb      	ldr	r3, [r7, #8]
 802161e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8021620:	461a      	mov	r2, r3
 8021622:	2102      	movs	r1, #2
 8021624:	6978      	ldr	r0, [r7, #20]
 8021626:	f000 f871 	bl	802170c <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_KNOB_ON, th->style.sw.knob_on);
 802162a:	68bb      	ldr	r3, [r7, #8]
 802162c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021630:	461a      	mov	r2, r3
 8021632:	2103      	movs	r1, #3
 8021634:	6978      	ldr	r0, [r7, #20]
 8021636:	f000 f869 	bl	802170c <lv_sw_set_style>
 802163a:	e027      	b.n	802168c <lv_sw_create+0x13c>
        }

    }
    /*Copy an existing switch*/
    else {
        lv_sw_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 802163c:	6838      	ldr	r0, [r7, #0]
 802163e:	f7e8 fbec 	bl	8009e1a <lv_obj_get_ext_attr>
 8021642:	60f8      	str	r0, [r7, #12]
        ext->style_knob_off    = copy_ext->style_knob_off;
 8021644:	68fb      	ldr	r3, [r7, #12]
 8021646:	69da      	ldr	r2, [r3, #28]
 8021648:	693b      	ldr	r3, [r7, #16]
 802164a:	61da      	str	r2, [r3, #28]
        ext->style_knob_on     = copy_ext->style_knob_on;
 802164c:	68fb      	ldr	r3, [r7, #12]
 802164e:	6a1a      	ldr	r2, [r3, #32]
 8021650:	693b      	ldr	r3, [r7, #16]
 8021652:	621a      	str	r2, [r3, #32]
#if LV_USE_ANIMATION
        ext->anim_time = copy_ext->anim_time;
 8021654:	68fb      	ldr	r3, [r7, #12]
 8021656:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8021658:	693b      	ldr	r3, [r7, #16]
 802165a:	851a      	strh	r2, [r3, #40]	; 0x28
#endif

        if(lv_sw_get_state(new_sw))
 802165c:	6978      	ldr	r0, [r7, #20]
 802165e:	f7ff ff66 	bl	802152e <lv_sw_get_state>
 8021662:	4603      	mov	r3, r0
 8021664:	2b00      	cmp	r3, #0
 8021666:	d007      	beq.n	8021678 <lv_sw_create+0x128>
            lv_slider_set_style(new_sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 8021668:	693b      	ldr	r3, [r7, #16]
 802166a:	6a1b      	ldr	r3, [r3, #32]
 802166c:	461a      	mov	r2, r3
 802166e:	2102      	movs	r1, #2
 8021670:	6978      	ldr	r0, [r7, #20]
 8021672:	f7ff f811 	bl	8020698 <lv_slider_set_style>
 8021676:	e006      	b.n	8021686 <lv_sw_create+0x136>
        else
            lv_slider_set_style(new_sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 8021678:	693b      	ldr	r3, [r7, #16]
 802167a:	69db      	ldr	r3, [r3, #28]
 802167c:	461a      	mov	r2, r3
 802167e:	2102      	movs	r1, #2
 8021680:	6978      	ldr	r0, [r7, #20]
 8021682:	f7ff f809 	bl	8020698 <lv_slider_set_style>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_sw);
 8021686:	6978      	ldr	r0, [r7, #20]
 8021688:	f7e8 f8a9 	bl	80097de <lv_obj_refresh_style>
    }

    LV_LOG_INFO("switch created");

    return new_sw;
 802168c:	697b      	ldr	r3, [r7, #20]
}
 802168e:	4618      	mov	r0, r3
 8021690:	3718      	adds	r7, #24
 8021692:	46bd      	mov	sp, r7
 8021694:	bd80      	pop	{r7, pc}
 8021696:	bf00      	nop
 8021698:	200177f8 	.word	0x200177f8
 802169c:	080217a9 	.word	0x080217a9

080216a0 <lv_sw_on>:
 * Turn ON the switch
 * @param sw pointer to a switch objec
 * @param anim LV_ANOM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
void lv_sw_on(lv_obj_t * sw, lv_anim_enable_t anim)
{
 80216a0:	b580      	push	{r7, lr}
 80216a2:	b084      	sub	sp, #16
 80216a4:	af00      	add	r7, sp, #0
 80216a6:	6078      	str	r0, [r7, #4]
 80216a8:	460b      	mov	r3, r1
 80216aa:	70fb      	strb	r3, [r7, #3]
#if LV_USE_ANIMATION == 0
    anim = LV_ANIM_OFF;
#endif
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 80216ac:	6878      	ldr	r0, [r7, #4]
 80216ae:	f7e8 fbb4 	bl	8009e1a <lv_obj_get_ext_attr>
 80216b2:	60f8      	str	r0, [r7, #12]
    lv_slider_set_value(sw, LV_SW_MAX_VALUE, anim);
 80216b4:	78fb      	ldrb	r3, [r7, #3]
 80216b6:	461a      	mov	r2, r3
 80216b8:	2164      	movs	r1, #100	; 0x64
 80216ba:	6878      	ldr	r0, [r7, #4]
 80216bc:	f7ff ff10 	bl	80214e0 <lv_slider_set_value>
    lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 80216c0:	68fb      	ldr	r3, [r7, #12]
 80216c2:	6a1b      	ldr	r3, [r3, #32]
 80216c4:	461a      	mov	r2, r3
 80216c6:	2102      	movs	r1, #2
 80216c8:	6878      	ldr	r0, [r7, #4]
 80216ca:	f7fe ffe5 	bl	8020698 <lv_slider_set_style>
}
 80216ce:	bf00      	nop
 80216d0:	3710      	adds	r7, #16
 80216d2:	46bd      	mov	sp, r7
 80216d4:	bd80      	pop	{r7, pc}

080216d6 <lv_sw_off>:
 * Turn OFF the switch
 * @param sw pointer to a switch object
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
void lv_sw_off(lv_obj_t * sw, lv_anim_enable_t anim)
{
 80216d6:	b580      	push	{r7, lr}
 80216d8:	b084      	sub	sp, #16
 80216da:	af00      	add	r7, sp, #0
 80216dc:	6078      	str	r0, [r7, #4]
 80216de:	460b      	mov	r3, r1
 80216e0:	70fb      	strb	r3, [r7, #3]
#if LV_USE_ANIMATION == 0
    anim = LV_ANIM_OFF;
#endif
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 80216e2:	6878      	ldr	r0, [r7, #4]
 80216e4:	f7e8 fb99 	bl	8009e1a <lv_obj_get_ext_attr>
 80216e8:	60f8      	str	r0, [r7, #12]
    lv_slider_set_value(sw, 0, anim);
 80216ea:	78fb      	ldrb	r3, [r7, #3]
 80216ec:	461a      	mov	r2, r3
 80216ee:	2100      	movs	r1, #0
 80216f0:	6878      	ldr	r0, [r7, #4]
 80216f2:	f7ff fef5 	bl	80214e0 <lv_slider_set_value>
    lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 80216f6:	68fb      	ldr	r3, [r7, #12]
 80216f8:	69db      	ldr	r3, [r3, #28]
 80216fa:	461a      	mov	r2, r3
 80216fc:	2102      	movs	r1, #2
 80216fe:	6878      	ldr	r0, [r7, #4]
 8021700:	f7fe ffca 	bl	8020698 <lv_slider_set_style>
}
 8021704:	bf00      	nop
 8021706:	3710      	adds	r7, #16
 8021708:	46bd      	mov	sp, r7
 802170a:	bd80      	pop	{r7, pc}

0802170c <lv_sw_set_style>:
 * @param sw pointer to a switch object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_sw_set_style(lv_obj_t * sw, lv_sw_style_t type, const lv_style_t * style)
{
 802170c:	b580      	push	{r7, lr}
 802170e:	b086      	sub	sp, #24
 8021710:	af00      	add	r7, sp, #0
 8021712:	60f8      	str	r0, [r7, #12]
 8021714:	460b      	mov	r3, r1
 8021716:	607a      	str	r2, [r7, #4]
 8021718:	72fb      	strb	r3, [r7, #11]
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 802171a:	68f8      	ldr	r0, [r7, #12]
 802171c:	f7e8 fb7d 	bl	8009e1a <lv_obj_get_ext_attr>
 8021720:	6178      	str	r0, [r7, #20]

    switch(type) {
 8021722:	7afb      	ldrb	r3, [r7, #11]
 8021724:	2b03      	cmp	r3, #3
 8021726:	d83b      	bhi.n	80217a0 <lv_sw_set_style+0x94>
 8021728:	a201      	add	r2, pc, #4	; (adr r2, 8021730 <lv_sw_set_style+0x24>)
 802172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802172e:	bf00      	nop
 8021730:	08021741 	.word	0x08021741
 8021734:	0802174d 	.word	0x0802174d
 8021738:	08021759 	.word	0x08021759
 802173c:	0802177d 	.word	0x0802177d
        case LV_SLIDER_STYLE_BG: lv_slider_set_style(sw, LV_SLIDER_STYLE_BG, style); break;
 8021740:	687a      	ldr	r2, [r7, #4]
 8021742:	2100      	movs	r1, #0
 8021744:	68f8      	ldr	r0, [r7, #12]
 8021746:	f7fe ffa7 	bl	8020698 <lv_slider_set_style>
 802174a:	e029      	b.n	80217a0 <lv_sw_set_style+0x94>
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(sw, LV_SLIDER_STYLE_INDIC, style); break;
 802174c:	687a      	ldr	r2, [r7, #4]
 802174e:	2101      	movs	r1, #1
 8021750:	68f8      	ldr	r0, [r7, #12]
 8021752:	f7f6 fae9 	bl	8017d28 <lv_bar_set_style>
 8021756:	e023      	b.n	80217a0 <lv_sw_set_style+0x94>
        case LV_SW_STYLE_KNOB_OFF:
            ext->style_knob_off = style;
 8021758:	697b      	ldr	r3, [r7, #20]
 802175a:	687a      	ldr	r2, [r7, #4]
 802175c:	61da      	str	r2, [r3, #28]
            if(lv_sw_get_state(sw) == 0) lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, style);
 802175e:	68f8      	ldr	r0, [r7, #12]
 8021760:	f7ff fee5 	bl	802152e <lv_sw_get_state>
 8021764:	4603      	mov	r3, r0
 8021766:	f083 0301 	eor.w	r3, r3, #1
 802176a:	b2db      	uxtb	r3, r3
 802176c:	2b00      	cmp	r3, #0
 802176e:	d014      	beq.n	802179a <lv_sw_set_style+0x8e>
 8021770:	687a      	ldr	r2, [r7, #4]
 8021772:	2102      	movs	r1, #2
 8021774:	68f8      	ldr	r0, [r7, #12]
 8021776:	f7fe ff8f 	bl	8020698 <lv_slider_set_style>
            break;
 802177a:	e00e      	b.n	802179a <lv_sw_set_style+0x8e>
        case LV_SW_STYLE_KNOB_ON:
            ext->style_knob_on = style;
 802177c:	697b      	ldr	r3, [r7, #20]
 802177e:	687a      	ldr	r2, [r7, #4]
 8021780:	621a      	str	r2, [r3, #32]
            if(lv_sw_get_state(sw) != 0) lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, style);
 8021782:	68f8      	ldr	r0, [r7, #12]
 8021784:	f7ff fed3 	bl	802152e <lv_sw_get_state>
 8021788:	4603      	mov	r3, r0
 802178a:	2b00      	cmp	r3, #0
 802178c:	d007      	beq.n	802179e <lv_sw_set_style+0x92>
 802178e:	687a      	ldr	r2, [r7, #4]
 8021790:	2102      	movs	r1, #2
 8021792:	68f8      	ldr	r0, [r7, #12]
 8021794:	f7fe ff80 	bl	8020698 <lv_slider_set_style>
            break;
 8021798:	e001      	b.n	802179e <lv_sw_set_style+0x92>
            break;
 802179a:	bf00      	nop
 802179c:	e000      	b.n	80217a0 <lv_sw_set_style+0x94>
            break;
 802179e:	bf00      	nop
    }
}
 80217a0:	bf00      	nop
 80217a2:	3718      	adds	r7, #24
 80217a4:	46bd      	mov	sp, r7
 80217a6:	bd80      	pop	{r7, pc}

080217a8 <lv_sw_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_sw_signal(lv_obj_t * sw, lv_signal_t sign, void * param)
{
 80217a8:	b580      	push	{r7, lr}
 80217aa:	b092      	sub	sp, #72	; 0x48
 80217ac:	af00      	add	r7, sp, #0
 80217ae:	60f8      	str	r0, [r7, #12]
 80217b0:	460b      	mov	r3, r1
 80217b2:	607a      	str	r2, [r7, #4]
 80217b4:	72fb      	strb	r3, [r7, #11]
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 80217b6:	68f8      	ldr	r0, [r7, #12]
 80217b8:	f7e8 fb2f 	bl	8009e1a <lv_obj_get_ext_attr>
 80217bc:	6438      	str	r0, [r7, #64]	; 0x40

    /*Save the current (old) value before slider signal modifies it. It will be required in the
     * later calculations*/
    int16_t old_val;
    if(sign == LV_SIGNAL_PRESSING)
 80217be:	7afb      	ldrb	r3, [r7, #11]
 80217c0:	2b08      	cmp	r3, #8
 80217c2:	d104      	bne.n	80217ce <lv_sw_signal+0x26>
        old_val = ext->slider.drag_value;
 80217c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80217c6:	8b1b      	ldrh	r3, [r3, #24]
 80217c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80217cc:	e005      	b.n	80217da <lv_sw_signal+0x32>
    else
        old_val = lv_slider_get_value(sw);
 80217ce:	68f8      	ldr	r0, [r7, #12]
 80217d0:	f7fe ff8c 	bl	80206ec <lv_slider_get_value>
 80217d4:	4603      	mov	r3, r0
 80217d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    /*Don't let the slider to call the action. Switch handles it differently*/
    lv_event_cb_t event_cb = sw->event_cb;
 80217da:	68fb      	ldr	r3, [r7, #12]
 80217dc:	699b      	ldr	r3, [r3, #24]
 80217de:	63fb      	str	r3, [r7, #60]	; 0x3c
    sw->event_cb           = NULL;
 80217e0:	68fb      	ldr	r3, [r7, #12]
 80217e2:	2200      	movs	r2, #0
 80217e4:	619a      	str	r2, [r3, #24]

    lv_res_t res;
    /* Include the ancient signal function */

    res = ancestor_signal(sw, sign, param);
 80217e6:	4bbd      	ldr	r3, [pc, #756]	; (8021adc <lv_sw_signal+0x334>)
 80217e8:	681b      	ldr	r3, [r3, #0]
 80217ea:	7af9      	ldrb	r1, [r7, #11]
 80217ec:	687a      	ldr	r2, [r7, #4]
 80217ee:	68f8      	ldr	r0, [r7, #12]
 80217f0:	4798      	blx	r3
 80217f2:	4603      	mov	r3, r0
 80217f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    if(res != LV_RES_OK) return res;
 80217f8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80217fc:	2b01      	cmp	r3, #1
 80217fe:	d002      	beq.n	8021806 <lv_sw_signal+0x5e>
 8021800:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8021804:	e186      	b.n	8021b14 <lv_sw_signal+0x36c>

    sw->event_cb = event_cb;
 8021806:	68fb      	ldr	r3, [r7, #12]
 8021808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802180a:	619a      	str	r2, [r3, #24]

    if(sign == LV_SIGNAL_CLEANUP) {
 802180c:	7afb      	ldrb	r3, [r7, #11]
 802180e:	2b00      	cmp	r3, #0
 8021810:	f000 817e 	beq.w	8021b10 <lv_sw_signal+0x368>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_PRESSED) {
 8021814:	7afb      	ldrb	r3, [r7, #11]
 8021816:	2b07      	cmp	r3, #7
 8021818:	d11e      	bne.n	8021858 <lv_sw_signal+0xb0>

        /*Save the x coordinate of the pressed point to see if the switch was slid*/
        lv_indev_t * indev = lv_indev_get_act();
 802181a:	f7e6 fc49 	bl	80080b0 <lv_indev_get_act>
 802181e:	6278      	str	r0, [r7, #36]	; 0x24
        if(indev) {
 8021820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021822:	2b00      	cmp	r3, #0
 8021824:	d009      	beq.n	802183a <lv_sw_signal+0x92>
            lv_point_t p;
            lv_indev_get_point(indev, &p);
 8021826:	f107 0320 	add.w	r3, r7, #32
 802182a:	4619      	mov	r1, r3
 802182c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802182e:	f7e6 fc9b 	bl	8008168 <lv_indev_get_point>
            ext->start_x = p.x;
 8021832:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021838:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        ext->slided  = 0;
 802183a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802183c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8021840:	f36f 0341 	bfc	r3, #1, #1
 8021844:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        ext->changed = 0;
 8021848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802184a:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 802184e:	f36f 0300 	bfc	r3, #0, #1
 8021852:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 8021856:	e15b      	b.n	8021b10 <lv_sw_signal+0x368>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8021858:	7afb      	ldrb	r3, [r7, #11]
 802185a:	2b08      	cmp	r3, #8
 802185c:	d15d      	bne.n	802191a <lv_sw_signal+0x172>
        /*See if the switch was slid (moved at least a little)*/
        lv_indev_t * indev = lv_indev_get_act();
 802185e:	f7e6 fc27 	bl	80080b0 <lv_indev_get_act>
 8021862:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(indev) {
 8021864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021866:	2b00      	cmp	r3, #0
 8021868:	d01c      	beq.n	80218a4 <lv_sw_signal+0xfc>
            lv_point_t p = {0, 0};
 802186a:	2300      	movs	r3, #0
 802186c:	83bb      	strh	r3, [r7, #28]
 802186e:	2300      	movs	r3, #0
 8021870:	83fb      	strh	r3, [r7, #30]
            lv_indev_get_point(indev, &p);
 8021872:	f107 031c 	add.w	r3, r7, #28
 8021876:	4619      	mov	r1, r3
 8021878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802187a:	f7e6 fc75 	bl	8008168 <lv_indev_get_point>
            if(LV_MATH_ABS(p.x - ext->start_x) > LV_INDEV_DEF_DRAG_LIMIT) ext->slided = 1;
 802187e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8021882:	461a      	mov	r2, r3
 8021884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021886:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 802188a:	1ad3      	subs	r3, r2, r3
 802188c:	2b00      	cmp	r3, #0
 802188e:	bfb8      	it	lt
 8021890:	425b      	neglt	r3, r3
 8021892:	2b0a      	cmp	r3, #10
 8021894:	dd06      	ble.n	80218a4 <lv_sw_signal+0xfc>
 8021896:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021898:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 802189c:	f043 0302 	orr.w	r3, r3, #2
 80218a0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        }

        /*If didn't slide then revert the min/max value. So click without slide won't move the
         * switch as a slider*/
        if(ext->slided == 0) {
 80218a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80218a6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80218aa:	f003 0302 	and.w	r3, r3, #2
 80218ae:	b2db      	uxtb	r3, r3
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d10c      	bne.n	80218ce <lv_sw_signal+0x126>
            if(lv_sw_get_state(sw))
 80218b4:	68f8      	ldr	r0, [r7, #12]
 80218b6:	f7ff fe3a 	bl	802152e <lv_sw_get_state>
 80218ba:	4603      	mov	r3, r0
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d003      	beq.n	80218c8 <lv_sw_signal+0x120>
                ext->slider.drag_value = LV_SW_MAX_VALUE;
 80218c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80218c2:	2264      	movs	r2, #100	; 0x64
 80218c4:	831a      	strh	r2, [r3, #24]
 80218c6:	e002      	b.n	80218ce <lv_sw_signal+0x126>
            else
                ext->slider.drag_value = 0;
 80218c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80218ca:	2200      	movs	r2, #0
 80218cc:	831a      	strh	r2, [r3, #24]
        }

        /*If explicitly changed (by slide) don't need to be toggled on release*/
        int16_t threshold = LV_SW_MAX_VALUE / 2;
 80218ce:	2332      	movs	r3, #50	; 0x32
 80218d0:	857b      	strh	r3, [r7, #42]	; 0x2a
        if((old_val < threshold && ext->slider.drag_value > threshold) ||
 80218d2:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80218d6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80218da:	429a      	cmp	r2, r3
 80218dc:	da06      	bge.n	80218ec <lv_sw_signal+0x144>
 80218de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80218e0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80218e4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80218e8:	429a      	cmp	r2, r3
 80218ea:	db0e      	blt.n	802190a <lv_sw_signal+0x162>
 80218ec:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80218f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80218f4:	429a      	cmp	r2, r3
 80218f6:	f340 810b 	ble.w	8021b10 <lv_sw_signal+0x368>
           (old_val > threshold && ext->slider.drag_value < threshold)) {
 80218fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80218fc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8021900:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8021904:	429a      	cmp	r2, r3
 8021906:	f340 8103 	ble.w	8021b10 <lv_sw_signal+0x368>
            ext->changed = 1;
 802190a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802190c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8021910:	f043 0301 	orr.w	r3, r3, #1
 8021914:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 8021918:	e0fa      	b.n	8021b10 <lv_sw_signal+0x368>
        }
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 802191a:	7afb      	ldrb	r3, [r7, #11]
 802191c:	2b09      	cmp	r3, #9
 802191e:	d12d      	bne.n	802197c <lv_sw_signal+0x1d4>
        if(lv_sw_get_state(sw)) {
 8021920:	68f8      	ldr	r0, [r7, #12]
 8021922:	f7ff fe04 	bl	802152e <lv_sw_get_state>
 8021926:	4603      	mov	r3, r0
 8021928:	2b00      	cmp	r3, #0
 802192a:	d013      	beq.n	8021954 <lv_sw_signal+0x1ac>
            lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 802192c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802192e:	6a1b      	ldr	r3, [r3, #32]
 8021930:	461a      	mov	r2, r3
 8021932:	2102      	movs	r1, #2
 8021934:	68f8      	ldr	r0, [r7, #12]
 8021936:	f7fe feaf 	bl	8020698 <lv_slider_set_style>
            lv_slider_set_value(sw, LV_SW_MAX_VALUE, LV_ANIM_ON);
 802193a:	2201      	movs	r2, #1
 802193c:	2164      	movs	r1, #100	; 0x64
 802193e:	68f8      	ldr	r0, [r7, #12]
 8021940:	f7ff fdce 	bl	80214e0 <lv_slider_set_value>
            if(res != LV_RES_OK) return res;
 8021944:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8021948:	2b01      	cmp	r3, #1
 802194a:	f000 80e1 	beq.w	8021b10 <lv_sw_signal+0x368>
 802194e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8021952:	e0df      	b.n	8021b14 <lv_sw_signal+0x36c>
        } else {
            lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 8021954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021956:	69db      	ldr	r3, [r3, #28]
 8021958:	461a      	mov	r2, r3
 802195a:	2102      	movs	r1, #2
 802195c:	68f8      	ldr	r0, [r7, #12]
 802195e:	f7fe fe9b 	bl	8020698 <lv_slider_set_style>
            lv_slider_set_value(sw, 0, LV_ANIM_ON);
 8021962:	2201      	movs	r2, #1
 8021964:	2100      	movs	r1, #0
 8021966:	68f8      	ldr	r0, [r7, #12]
 8021968:	f7ff fdba 	bl	80214e0 <lv_slider_set_value>
            if(res != LV_RES_OK) return res;
 802196c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8021970:	2b01      	cmp	r3, #1
 8021972:	f000 80cd 	beq.w	8021b10 <lv_sw_signal+0x368>
 8021976:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 802197a:	e0cb      	b.n	8021b14 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_RELEASED) {
 802197c:	7afb      	ldrb	r3, [r7, #11]
 802197e:	2b0a      	cmp	r3, #10
 8021980:	d153      	bne.n	8021a2a <lv_sw_signal+0x282>
        /*If not dragged then toggle the switch*/
        if(ext->changed == 0) {
 8021982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021984:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8021988:	f003 0301 	and.w	r3, r3, #1
 802198c:	b2db      	uxtb	r3, r3
 802198e:	2b00      	cmp	r3, #0
 8021990:	d124      	bne.n	80219dc <lv_sw_signal+0x234>
            int32_t state;
            if(lv_sw_get_state(sw)) {
 8021992:	68f8      	ldr	r0, [r7, #12]
 8021994:	f7ff fdcb 	bl	802152e <lv_sw_get_state>
 8021998:	4603      	mov	r3, r0
 802199a:	2b00      	cmp	r3, #0
 802199c:	d006      	beq.n	80219ac <lv_sw_signal+0x204>
                lv_sw_off(sw, LV_ANIM_ON);
 802199e:	2101      	movs	r1, #1
 80219a0:	68f8      	ldr	r0, [r7, #12]
 80219a2:	f7ff fe98 	bl	80216d6 <lv_sw_off>
                state = 0;
 80219a6:	2300      	movs	r3, #0
 80219a8:	61bb      	str	r3, [r7, #24]
 80219aa:	e005      	b.n	80219b8 <lv_sw_signal+0x210>
            } else {
                lv_sw_on(sw, LV_ANIM_ON);
 80219ac:	2101      	movs	r1, #1
 80219ae:	68f8      	ldr	r0, [r7, #12]
 80219b0:	f7ff fe76 	bl	80216a0 <lv_sw_on>
                state = 1;
 80219b4:	2301      	movs	r3, #1
 80219b6:	61bb      	str	r3, [r7, #24]
            }

            res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 80219b8:	f107 0318 	add.w	r3, r7, #24
 80219bc:	461a      	mov	r2, r3
 80219be:	210e      	movs	r1, #14
 80219c0:	68f8      	ldr	r0, [r7, #12]
 80219c2:	f7e7 ffb0 	bl	8009926 <lv_event_send>
 80219c6:	4603      	mov	r3, r0
 80219c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 80219cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80219d0:	2b01      	cmp	r3, #1
 80219d2:	f000 809d 	beq.w	8021b10 <lv_sw_signal+0x368>
 80219d6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80219da:	e09b      	b.n	8021b14 <lv_sw_signal+0x36c>
        }
        /*If the switch was dragged then calculate the new state based on the current position*/
        else {
            int16_t v = lv_slider_get_value(sw);
 80219dc:	68f8      	ldr	r0, [r7, #12]
 80219de:	f7fe fe85 	bl	80206ec <lv_slider_get_value>
 80219e2:	4603      	mov	r3, r0
 80219e4:	863b      	strh	r3, [r7, #48]	; 0x30
            int32_t state;
            if(v > LV_SW_MAX_VALUE / 2) {
 80219e6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80219ea:	2b32      	cmp	r3, #50	; 0x32
 80219ec:	dd06      	ble.n	80219fc <lv_sw_signal+0x254>
                lv_sw_on(sw, LV_ANIM_ON);
 80219ee:	2101      	movs	r1, #1
 80219f0:	68f8      	ldr	r0, [r7, #12]
 80219f2:	f7ff fe55 	bl	80216a0 <lv_sw_on>
                state = 1;
 80219f6:	2301      	movs	r3, #1
 80219f8:	617b      	str	r3, [r7, #20]
 80219fa:	e005      	b.n	8021a08 <lv_sw_signal+0x260>
            } else {
                lv_sw_off(sw, LV_ANIM_ON);
 80219fc:	2101      	movs	r1, #1
 80219fe:	68f8      	ldr	r0, [r7, #12]
 8021a00:	f7ff fe69 	bl	80216d6 <lv_sw_off>
                state = 0;
 8021a04:	2300      	movs	r3, #0
 8021a06:	617b      	str	r3, [r7, #20]
            }
            res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 8021a08:	f107 0314 	add.w	r3, r7, #20
 8021a0c:	461a      	mov	r2, r3
 8021a0e:	210e      	movs	r1, #14
 8021a10:	68f8      	ldr	r0, [r7, #12]
 8021a12:	f7e7 ff88 	bl	8009926 <lv_event_send>
 8021a16:	4603      	mov	r3, r0
 8021a18:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 8021a1c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8021a20:	2b01      	cmp	r3, #1
 8021a22:	d075      	beq.n	8021b10 <lv_sw_signal+0x368>
 8021a24:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8021a28:	e074      	b.n	8021b14 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_CONTROL) {
 8021a2a:	7afb      	ldrb	r3, [r7, #11]
 8021a2c:	2b11      	cmp	r3, #17
 8021a2e:	d143      	bne.n	8021ab8 <lv_sw_signal+0x310>
        char c = *((char *)param);
 8021a30:	687b      	ldr	r3, [r7, #4]
 8021a32:	781b      	ldrb	r3, [r3, #0]
 8021a34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        uint32_t state;
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8021a38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021a3c:	2b13      	cmp	r3, #19
 8021a3e:	d003      	beq.n	8021a48 <lv_sw_signal+0x2a0>
 8021a40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021a44:	2b11      	cmp	r3, #17
 8021a46:	d117      	bne.n	8021a78 <lv_sw_signal+0x2d0>
            lv_slider_set_value(sw, LV_SW_MAX_VALUE, true);
 8021a48:	2201      	movs	r2, #1
 8021a4a:	2164      	movs	r1, #100	; 0x64
 8021a4c:	68f8      	ldr	r0, [r7, #12]
 8021a4e:	f7ff fd47 	bl	80214e0 <lv_slider_set_value>
            state = 1;
 8021a52:	2301      	movs	r3, #1
 8021a54:	613b      	str	r3, [r7, #16]
            res   = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 8021a56:	f107 0310 	add.w	r3, r7, #16
 8021a5a:	461a      	mov	r2, r3
 8021a5c:	210e      	movs	r1, #14
 8021a5e:	68f8      	ldr	r0, [r7, #12]
 8021a60:	f7e7 ff61 	bl	8009926 <lv_event_send>
 8021a64:	4603      	mov	r3, r0
 8021a66:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 8021a6a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8021a6e:	2b01      	cmp	r3, #1
 8021a70:	d04e      	beq.n	8021b10 <lv_sw_signal+0x368>
 8021a72:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8021a76:	e04d      	b.n	8021b14 <lv_sw_signal+0x36c>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8021a78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021a7c:	2b14      	cmp	r3, #20
 8021a7e:	d003      	beq.n	8021a88 <lv_sw_signal+0x2e0>
 8021a80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021a84:	2b12      	cmp	r3, #18
 8021a86:	d143      	bne.n	8021b10 <lv_sw_signal+0x368>
            lv_slider_set_value(sw, 0, true);
 8021a88:	2201      	movs	r2, #1
 8021a8a:	2100      	movs	r1, #0
 8021a8c:	68f8      	ldr	r0, [r7, #12]
 8021a8e:	f7ff fd27 	bl	80214e0 <lv_slider_set_value>
            state = 0;
 8021a92:	2300      	movs	r3, #0
 8021a94:	613b      	str	r3, [r7, #16]
            res   = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 8021a96:	f107 0310 	add.w	r3, r7, #16
 8021a9a:	461a      	mov	r2, r3
 8021a9c:	210e      	movs	r1, #14
 8021a9e:	68f8      	ldr	r0, [r7, #12]
 8021aa0:	f7e7 ff41 	bl	8009926 <lv_event_send>
 8021aa4:	4603      	mov	r3, r0
 8021aa6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 8021aaa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8021aae:	2b01      	cmp	r3, #1
 8021ab0:	d02e      	beq.n	8021b10 <lv_sw_signal+0x368>
 8021ab2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8021ab6:	e02d      	b.n	8021b14 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8021ab8:	7afb      	ldrb	r3, [r7, #11]
 8021aba:	2b12      	cmp	r3, #18
 8021abc:	d105      	bne.n	8021aca <lv_sw_signal+0x322>
        bool * editable = (bool *)param;
 8021abe:	687b      	ldr	r3, [r7, #4]
 8021ac0:	637b      	str	r3, [r7, #52]	; 0x34
        *editable       = false; /*The ancestor slider is editable the switch is not*/
 8021ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021ac4:	2200      	movs	r2, #0
 8021ac6:	701a      	strb	r2, [r3, #0]
 8021ac8:	e022      	b.n	8021b10 <lv_sw_signal+0x368>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8021aca:	7afb      	ldrb	r3, [r7, #11]
 8021acc:	2b06      	cmp	r3, #6
 8021ace:	d11f      	bne.n	8021b10 <lv_sw_signal+0x368>
        lv_obj_type_t * buf = param;
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8021ad4:	2300      	movs	r3, #0
 8021ad6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8021ada:	e00d      	b.n	8021af8 <lv_sw_signal+0x350>
 8021adc:	200177f8 	.word	0x200177f8
            if(buf->type[i] == NULL) break;
 8021ae0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8021ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021aea:	2b00      	cmp	r3, #0
 8021aec:	d009      	beq.n	8021b02 <lv_sw_signal+0x35a>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8021aee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8021af2:	3301      	adds	r3, #1
 8021af4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8021af8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8021afc:	2b06      	cmp	r3, #6
 8021afe:	d9ef      	bls.n	8021ae0 <lv_sw_signal+0x338>
 8021b00:	e000      	b.n	8021b04 <lv_sw_signal+0x35c>
            if(buf->type[i] == NULL) break;
 8021b02:	bf00      	nop
        }
        buf->type[i] = "lv_sw";
 8021b04:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8021b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021b0a:	4904      	ldr	r1, [pc, #16]	; (8021b1c <lv_sw_signal+0x374>)
 8021b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8021b10:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}
 8021b14:	4618      	mov	r0, r3
 8021b16:	3748      	adds	r7, #72	; 0x48
 8021b18:	46bd      	mov	sp, r7
 8021b1a:	bd80      	pop	{r7, pc}
 8021b1c:	0802c974 	.word	0x0802c974

08021b20 <lv_theme_get_current>:
/**
 * Get the current system theme.
 * @return pointer to the current system theme. NULL if not set.
 */
lv_theme_t * lv_theme_get_current(void)
{
 8021b20:	b480      	push	{r7}
 8021b22:	af00      	add	r7, sp, #0
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
#else
    if(!inited)
 8021b24:	4b07      	ldr	r3, [pc, #28]	; (8021b44 <lv_theme_get_current+0x24>)
 8021b26:	781b      	ldrb	r3, [r3, #0]
 8021b28:	f083 0301 	eor.w	r3, r3, #1
 8021b2c:	b2db      	uxtb	r3, r3
 8021b2e:	2b00      	cmp	r3, #0
 8021b30:	d001      	beq.n	8021b36 <lv_theme_get_current+0x16>
        return NULL;
 8021b32:	2300      	movs	r3, #0
 8021b34:	e000      	b.n	8021b38 <lv_theme_get_current+0x18>
    else
        return &current_theme;
 8021b36:	4b04      	ldr	r3, [pc, #16]	; (8021b48 <lv_theme_get_current+0x28>)
#endif
}
 8021b38:	4618      	mov	r0, r3
 8021b3a:	46bd      	mov	sp, r7
 8021b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b40:	4770      	bx	lr
 8021b42:	bf00      	nop
 8021b44:	200177fc 	.word	0x200177fc
 8021b48:	20017800 	.word	0x20017800

08021b4c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8021b4c:	b580      	push	{r7, lr}
 8021b4e:	b082      	sub	sp, #8
 8021b50:	af00      	add	r7, sp, #0
 8021b52:	4603      	mov	r3, r0
 8021b54:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8021b56:	2200      	movs	r2, #0
 8021b58:	2104      	movs	r1, #4
 8021b5a:	4806      	ldr	r0, [pc, #24]	; (8021b74 <ST7789_WriteCommand+0x28>)
 8021b5c:	f7e0 fdee 	bl	800273c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), 1);
 8021b60:	1df9      	adds	r1, r7, #7
 8021b62:	2301      	movs	r3, #1
 8021b64:	2201      	movs	r2, #1
 8021b66:	4804      	ldr	r0, [pc, #16]	; (8021b78 <ST7789_WriteCommand+0x2c>)
 8021b68:	f7e1 ff0e 	bl	8003988 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, &cmd, sizeof(cmd));
}
 8021b6c:	bf00      	nop
 8021b6e:	3708      	adds	r7, #8
 8021b70:	46bd      	mov	sp, r7
 8021b72:	bd80      	pop	{r7, pc}
 8021b74:	40020000 	.word	0x40020000
 8021b78:	2001b6b0 	.word	0x2001b6b0

08021b7c <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8021b7c:	b580      	push	{r7, lr}
 8021b7e:	b084      	sub	sp, #16
 8021b80:	af00      	add	r7, sp, #0
 8021b82:	6078      	str	r0, [r7, #4]
 8021b84:	6039      	str	r1, [r7, #0]
	ST7789_DC_Set();
 8021b86:	2201      	movs	r2, #1
 8021b88:	2104      	movs	r1, #4
 8021b8a:	4810      	ldr	r0, [pc, #64]	; (8021bcc <ST7789_WriteData+0x50>)
 8021b8c:	f7e0 fdd6 	bl	800273c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8021b90:	e014      	b.n	8021bbc <ST7789_WriteData+0x40>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8021b92:	683b      	ldr	r3, [r7, #0]
 8021b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021b98:	4293      	cmp	r3, r2
 8021b9a:	bf28      	it	cs
 8021b9c:	4613      	movcs	r3, r2
 8021b9e:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, 10);
 8021ba0:	89fa      	ldrh	r2, [r7, #14]
 8021ba2:	230a      	movs	r3, #10
 8021ba4:	6879      	ldr	r1, [r7, #4]
 8021ba6:	480a      	ldr	r0, [pc, #40]	; (8021bd0 <ST7789_WriteData+0x54>)
 8021ba8:	f7e1 feee 	bl	8003988 <HAL_SPI_Transmit>
		//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
		buff += chunk_size;
 8021bac:	89fb      	ldrh	r3, [r7, #14]
 8021bae:	687a      	ldr	r2, [r7, #4]
 8021bb0:	4413      	add	r3, r2
 8021bb2:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8021bb4:	89fb      	ldrh	r3, [r7, #14]
 8021bb6:	683a      	ldr	r2, [r7, #0]
 8021bb8:	1ad3      	subs	r3, r2, r3
 8021bba:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8021bbc:	683b      	ldr	r3, [r7, #0]
 8021bbe:	2b00      	cmp	r3, #0
 8021bc0:	d1e7      	bne.n	8021b92 <ST7789_WriteData+0x16>
	}

}
 8021bc2:	bf00      	nop
 8021bc4:	3710      	adds	r7, #16
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	bd80      	pop	{r7, pc}
 8021bca:	bf00      	nop
 8021bcc:	40020000 	.word	0x40020000
 8021bd0:	2001b6b0 	.word	0x2001b6b0

08021bd4 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8021bd4:	b580      	push	{r7, lr}
 8021bd6:	b082      	sub	sp, #8
 8021bd8:	af00      	add	r7, sp, #0
 8021bda:	4603      	mov	r3, r0
 8021bdc:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8021bde:	2201      	movs	r2, #1
 8021be0:	2104      	movs	r1, #4
 8021be2:	4806      	ldr	r0, [pc, #24]	; (8021bfc <ST7789_WriteSmallData+0x28>)
 8021be4:	f7e0 fdaa 	bl	800273c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), 1);
 8021be8:	1df9      	adds	r1, r7, #7
 8021bea:	2301      	movs	r3, #1
 8021bec:	2201      	movs	r2, #1
 8021bee:	4804      	ldr	r0, [pc, #16]	; (8021c00 <ST7789_WriteSmallData+0x2c>)
 8021bf0:	f7e1 feca 	bl	8003988 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, &data, sizeof(data));
}
 8021bf4:	bf00      	nop
 8021bf6:	3708      	adds	r7, #8
 8021bf8:	46bd      	mov	sp, r7
 8021bfa:	bd80      	pop	{r7, pc}
 8021bfc:	40020000 	.word	0x40020000
 8021c00:	2001b6b0 	.word	0x2001b6b0

08021c04 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8021c04:	b580      	push	{r7, lr}
 8021c06:	b082      	sub	sp, #8
 8021c08:	af00      	add	r7, sp, #0
 8021c0a:	4603      	mov	r3, r0
 8021c0c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8021c0e:	2036      	movs	r0, #54	; 0x36
 8021c10:	f7ff ff9c 	bl	8021b4c <ST7789_WriteCommand>
	switch (m) {
 8021c14:	79fb      	ldrb	r3, [r7, #7]
 8021c16:	2b03      	cmp	r3, #3
 8021c18:	d81a      	bhi.n	8021c50 <ST7789_SetRotation+0x4c>
 8021c1a:	a201      	add	r2, pc, #4	; (adr r2, 8021c20 <ST7789_SetRotation+0x1c>)
 8021c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c20:	08021c31 	.word	0x08021c31
 8021c24:	08021c39 	.word	0x08021c39
 8021c28:	08021c41 	.word	0x08021c41
 8021c2c:	08021c49 	.word	0x08021c49
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8021c30:	20c0      	movs	r0, #192	; 0xc0
 8021c32:	f7ff ffcf 	bl	8021bd4 <ST7789_WriteSmallData>
		break;
 8021c36:	e00c      	b.n	8021c52 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8021c38:	20a0      	movs	r0, #160	; 0xa0
 8021c3a:	f7ff ffcb 	bl	8021bd4 <ST7789_WriteSmallData>
		break;
 8021c3e:	e008      	b.n	8021c52 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8021c40:	2000      	movs	r0, #0
 8021c42:	f7ff ffc7 	bl	8021bd4 <ST7789_WriteSmallData>
		break;
 8021c46:	e004      	b.n	8021c52 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8021c48:	2060      	movs	r0, #96	; 0x60
 8021c4a:	f7ff ffc3 	bl	8021bd4 <ST7789_WriteSmallData>
		break;
 8021c4e:	e000      	b.n	8021c52 <ST7789_SetRotation+0x4e>
	default:
		break;
 8021c50:	bf00      	nop
	}
}
 8021c52:	bf00      	nop
 8021c54:	3708      	adds	r7, #8
 8021c56:	46bd      	mov	sp, r7
 8021c58:	bd80      	pop	{r7, pc}
 8021c5a:	bf00      	nop

08021c5c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8021c5c:	b590      	push	{r4, r7, lr}
 8021c5e:	b087      	sub	sp, #28
 8021c60:	af00      	add	r7, sp, #0
 8021c62:	4604      	mov	r4, r0
 8021c64:	4608      	mov	r0, r1
 8021c66:	4611      	mov	r1, r2
 8021c68:	461a      	mov	r2, r3
 8021c6a:	4623      	mov	r3, r4
 8021c6c:	80fb      	strh	r3, [r7, #6]
 8021c6e:	4603      	mov	r3, r0
 8021c70:	80bb      	strh	r3, [r7, #4]
 8021c72:	460b      	mov	r3, r1
 8021c74:	807b      	strh	r3, [r7, #2]
 8021c76:	4613      	mov	r3, r2
 8021c78:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8021c7a:	88fb      	ldrh	r3, [r7, #6]
 8021c7c:	82fb      	strh	r3, [r7, #22]
 8021c7e:	887b      	ldrh	r3, [r7, #2]
 8021c80:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8021c82:	88bb      	ldrh	r3, [r7, #4]
 8021c84:	827b      	strh	r3, [r7, #18]
 8021c86:	883b      	ldrh	r3, [r7, #0]
 8021c88:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8021c8a:	202a      	movs	r0, #42	; 0x2a
 8021c8c:	f7ff ff5e 	bl	8021b4c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8021c90:	8afb      	ldrh	r3, [r7, #22]
 8021c92:	0a1b      	lsrs	r3, r3, #8
 8021c94:	b29b      	uxth	r3, r3
 8021c96:	b2db      	uxtb	r3, r3
 8021c98:	733b      	strb	r3, [r7, #12]
 8021c9a:	8afb      	ldrh	r3, [r7, #22]
 8021c9c:	b2db      	uxtb	r3, r3
 8021c9e:	737b      	strb	r3, [r7, #13]
 8021ca0:	8abb      	ldrh	r3, [r7, #20]
 8021ca2:	0a1b      	lsrs	r3, r3, #8
 8021ca4:	b29b      	uxth	r3, r3
 8021ca6:	b2db      	uxtb	r3, r3
 8021ca8:	73bb      	strb	r3, [r7, #14]
 8021caa:	8abb      	ldrh	r3, [r7, #20]
 8021cac:	b2db      	uxtb	r3, r3
 8021cae:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8021cb0:	f107 030c 	add.w	r3, r7, #12
 8021cb4:	2104      	movs	r1, #4
 8021cb6:	4618      	mov	r0, r3
 8021cb8:	f7ff ff60 	bl	8021b7c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8021cbc:	202b      	movs	r0, #43	; 0x2b
 8021cbe:	f7ff ff45 	bl	8021b4c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8021cc2:	8a7b      	ldrh	r3, [r7, #18]
 8021cc4:	0a1b      	lsrs	r3, r3, #8
 8021cc6:	b29b      	uxth	r3, r3
 8021cc8:	b2db      	uxtb	r3, r3
 8021cca:	723b      	strb	r3, [r7, #8]
 8021ccc:	8a7b      	ldrh	r3, [r7, #18]
 8021cce:	b2db      	uxtb	r3, r3
 8021cd0:	727b      	strb	r3, [r7, #9]
 8021cd2:	8a3b      	ldrh	r3, [r7, #16]
 8021cd4:	0a1b      	lsrs	r3, r3, #8
 8021cd6:	b29b      	uxth	r3, r3
 8021cd8:	b2db      	uxtb	r3, r3
 8021cda:	72bb      	strb	r3, [r7, #10]
 8021cdc:	8a3b      	ldrh	r3, [r7, #16]
 8021cde:	b2db      	uxtb	r3, r3
 8021ce0:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8021ce2:	f107 0308 	add.w	r3, r7, #8
 8021ce6:	2104      	movs	r1, #4
 8021ce8:	4618      	mov	r0, r3
 8021cea:	f7ff ff47 	bl	8021b7c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8021cee:	202c      	movs	r0, #44	; 0x2c
 8021cf0:	f7ff ff2c 	bl	8021b4c <ST7789_WriteCommand>
}
 8021cf4:	bf00      	nop
 8021cf6:	371c      	adds	r7, #28
 8021cf8:	46bd      	mov	sp, r7
 8021cfa:	bd90      	pop	{r4, r7, pc}

08021cfc <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8021cfc:	b590      	push	{r4, r7, lr}
 8021cfe:	b08b      	sub	sp, #44	; 0x2c
 8021d00:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 8021d02:	2019      	movs	r0, #25
 8021d04:	f7df ff7c 	bl	8001c00 <HAL_Delay>
    ST7789_RST_Clr();
 8021d08:	2200      	movs	r2, #0
 8021d0a:	2102      	movs	r1, #2
 8021d0c:	4846      	ldr	r0, [pc, #280]	; (8021e28 <ST7789_Init+0x12c>)
 8021d0e:	f7e0 fd15 	bl	800273c <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8021d12:	2019      	movs	r0, #25
 8021d14:	f7df ff74 	bl	8001c00 <HAL_Delay>
    ST7789_RST_Set();
 8021d18:	2201      	movs	r2, #1
 8021d1a:	2102      	movs	r1, #2
 8021d1c:	4842      	ldr	r0, [pc, #264]	; (8021e28 <ST7789_Init+0x12c>)
 8021d1e:	f7e0 fd0d 	bl	800273c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8021d22:	2032      	movs	r0, #50	; 0x32
 8021d24:	f7df ff6c 	bl	8001c00 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8021d28:	203a      	movs	r0, #58	; 0x3a
 8021d2a:	f7ff ff0f 	bl	8021b4c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8021d2e:	2055      	movs	r0, #85	; 0x55
 8021d30:	f7ff ff50 	bl	8021bd4 <ST7789_WriteSmallData>

    ST7789_WriteCommand(0xB2);				//	Porch control
 8021d34:	20b2      	movs	r0, #178	; 0xb2
 8021d36:	f7ff ff09 	bl	8021b4c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8021d3a:	4a3c      	ldr	r2, [pc, #240]	; (8021e2c <ST7789_Init+0x130>)
 8021d3c:	f107 0320 	add.w	r3, r7, #32
 8021d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021d44:	6018      	str	r0, [r3, #0]
 8021d46:	3304      	adds	r3, #4
 8021d48:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8021d4a:	f107 0320 	add.w	r3, r7, #32
 8021d4e:	2105      	movs	r1, #5
 8021d50:	4618      	mov	r0, r3
 8021d52:	f7ff ff13 	bl	8021b7c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8021d56:	2002      	movs	r0, #2
 8021d58:	f7ff ff54 	bl	8021c04 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8021d5c:	20b7      	movs	r0, #183	; 0xb7
 8021d5e:	f7ff fef5 	bl	8021b4c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8021d62:	2035      	movs	r0, #53	; 0x35
 8021d64:	f7ff ff36 	bl	8021bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8021d68:	20bb      	movs	r0, #187	; 0xbb
 8021d6a:	f7ff feef 	bl	8021b4c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8021d6e:	2019      	movs	r0, #25
 8021d70:	f7ff ff30 	bl	8021bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8021d74:	20c0      	movs	r0, #192	; 0xc0
 8021d76:	f7ff fee9 	bl	8021b4c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8021d7a:	202c      	movs	r0, #44	; 0x2c
 8021d7c:	f7ff ff2a 	bl	8021bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8021d80:	20c2      	movs	r0, #194	; 0xc2
 8021d82:	f7ff fee3 	bl	8021b4c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8021d86:	2001      	movs	r0, #1
 8021d88:	f7ff ff24 	bl	8021bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8021d8c:	20c3      	movs	r0, #195	; 0xc3
 8021d8e:	f7ff fedd 	bl	8021b4c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8021d92:	2012      	movs	r0, #18
 8021d94:	f7ff ff1e 	bl	8021bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8021d98:	20c4      	movs	r0, #196	; 0xc4
 8021d9a:	f7ff fed7 	bl	8021b4c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8021d9e:	2020      	movs	r0, #32
 8021da0:	f7ff ff18 	bl	8021bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8021da4:	20c6      	movs	r0, #198	; 0xc6
 8021da6:	f7ff fed1 	bl	8021b4c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8021daa:	200f      	movs	r0, #15
 8021dac:	f7ff ff12 	bl	8021bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8021db0:	20d0      	movs	r0, #208	; 0xd0
 8021db2:	f7ff fecb 	bl	8021b4c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8021db6:	20a4      	movs	r0, #164	; 0xa4
 8021db8:	f7ff ff0c 	bl	8021bd4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8021dbc:	20a1      	movs	r0, #161	; 0xa1
 8021dbe:	f7ff ff09 	bl	8021bd4 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8021dc2:	20e0      	movs	r0, #224	; 0xe0
 8021dc4:	f7ff fec2 	bl	8021b4c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8021dc8:	4b19      	ldr	r3, [pc, #100]	; (8021e30 <ST7789_Init+0x134>)
 8021dca:	f107 0410 	add.w	r4, r7, #16
 8021dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021dd0:	c407      	stmia	r4!, {r0, r1, r2}
 8021dd2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8021dd4:	f107 0310 	add.w	r3, r7, #16
 8021dd8:	210e      	movs	r1, #14
 8021dda:	4618      	mov	r0, r3
 8021ddc:	f7ff fece 	bl	8021b7c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8021de0:	20e1      	movs	r0, #225	; 0xe1
 8021de2:	f7ff feb3 	bl	8021b4c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8021de6:	4b13      	ldr	r3, [pc, #76]	; (8021e34 <ST7789_Init+0x138>)
 8021de8:	463c      	mov	r4, r7
 8021dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021dec:	c407      	stmia	r4!, {r0, r1, r2}
 8021dee:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8021df0:	463b      	mov	r3, r7
 8021df2:	210e      	movs	r1, #14
 8021df4:	4618      	mov	r0, r3
 8021df6:	f7ff fec1 	bl	8021b7c <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8021dfa:	2021      	movs	r0, #33	; 0x21
 8021dfc:	f7ff fea6 	bl	8021b4c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8021e00:	2011      	movs	r0, #17
 8021e02:	f7ff fea3 	bl	8021b4c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8021e06:	2013      	movs	r0, #19
 8021e08:	f7ff fea0 	bl	8021b4c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8021e0c:	2029      	movs	r0, #41	; 0x29
 8021e0e:	f7ff fe9d 	bl	8021b4c <ST7789_WriteCommand>

	HAL_Delay(50);
 8021e12:	2032      	movs	r0, #50	; 0x32
 8021e14:	f7df fef4 	bl	8001c00 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8021e18:	2000      	movs	r0, #0
 8021e1a:	f000 f80d 	bl	8021e38 <ST7789_Fill_Color>
}
 8021e1e:	bf00      	nop
 8021e20:	372c      	adds	r7, #44	; 0x2c
 8021e22:	46bd      	mov	sp, r7
 8021e24:	bd90      	pop	{r4, r7, pc}
 8021e26:	bf00      	nop
 8021e28:	40020000 	.word	0x40020000
 8021e2c:	0802c97c 	.word	0x0802c97c
 8021e30:	0802c984 	.word	0x0802c984
 8021e34:	0802c994 	.word	0x0802c994

08021e38 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8021e38:	b580      	push	{r7, lr}
 8021e3a:	b084      	sub	sp, #16
 8021e3c:	af00      	add	r7, sp, #0
 8021e3e:	4603      	mov	r3, r0
 8021e40:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8021e42:	23ef      	movs	r3, #239	; 0xef
 8021e44:	22ef      	movs	r2, #239	; 0xef
 8021e46:	2100      	movs	r1, #0
 8021e48:	2000      	movs	r0, #0
 8021e4a:	f7ff ff07 	bl	8021c5c <ST7789_SetAddressWindow>
	for (i = 0; i < ST7789_WIDTH; i++)
 8021e4e:	2300      	movs	r3, #0
 8021e50:	81fb      	strh	r3, [r7, #14]
 8021e52:	e019      	b.n	8021e88 <ST7789_Fill_Color+0x50>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 8021e54:	2300      	movs	r3, #0
 8021e56:	81bb      	strh	r3, [r7, #12]
 8021e58:	e010      	b.n	8021e7c <ST7789_Fill_Color+0x44>
			uint8_t data[] = {color >> 8, color & 0xFF};
 8021e5a:	88fb      	ldrh	r3, [r7, #6]
 8021e5c:	0a1b      	lsrs	r3, r3, #8
 8021e5e:	b29b      	uxth	r3, r3
 8021e60:	b2db      	uxtb	r3, r3
 8021e62:	723b      	strb	r3, [r7, #8]
 8021e64:	88fb      	ldrh	r3, [r7, #6]
 8021e66:	b2db      	uxtb	r3, r3
 8021e68:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 8021e6a:	f107 0308 	add.w	r3, r7, #8
 8021e6e:	2102      	movs	r1, #2
 8021e70:	4618      	mov	r0, r3
 8021e72:	f7ff fe83 	bl	8021b7c <ST7789_WriteData>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 8021e76:	89bb      	ldrh	r3, [r7, #12]
 8021e78:	3301      	adds	r3, #1
 8021e7a:	81bb      	strh	r3, [r7, #12]
 8021e7c:	89bb      	ldrh	r3, [r7, #12]
 8021e7e:	2bef      	cmp	r3, #239	; 0xef
 8021e80:	d9eb      	bls.n	8021e5a <ST7789_Fill_Color+0x22>
	for (i = 0; i < ST7789_WIDTH; i++)
 8021e82:	89fb      	ldrh	r3, [r7, #14]
 8021e84:	3301      	adds	r3, #1
 8021e86:	81fb      	strh	r3, [r7, #14]
 8021e88:	89fb      	ldrh	r3, [r7, #14]
 8021e8a:	2bef      	cmp	r3, #239	; 0xef
 8021e8c:	d9e2      	bls.n	8021e54 <ST7789_Fill_Color+0x1c>
		}
}
 8021e8e:	bf00      	nop
 8021e90:	3710      	adds	r7, #16
 8021e92:	46bd      	mov	sp, r7
 8021e94:	bd80      	pop	{r7, pc}
	...

08021e98 <ST7789_SPI_Send>:
		 (y <= 0) || (y > ST7789_HEIGHT))	return;
	ST7789_Fill(x - 1, y - 1, x + 1, y + 1, color);
}

static void ST7789_SPI_Send(uint8_t *data, uint16_t size)
{
 8021e98:	b580      	push	{r7, lr}
 8021e9a:	b082      	sub	sp, #8
 8021e9c:	af00      	add	r7, sp, #0
 8021e9e:	6078      	str	r0, [r7, #4]
 8021ea0:	460b      	mov	r3, r1
 8021ea2:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&ST7789_SPI_PORT,data,size,1);
 8021ea4:	887a      	ldrh	r2, [r7, #2]
 8021ea6:	2301      	movs	r3, #1
 8021ea8:	6879      	ldr	r1, [r7, #4]
 8021eaa:	4803      	ldr	r0, [pc, #12]	; (8021eb8 <ST7789_SPI_Send+0x20>)
 8021eac:	f7e1 fd6c 	bl	8003988 <HAL_SPI_Transmit>
}
 8021eb0:	bf00      	nop
 8021eb2:	3708      	adds	r7, #8
 8021eb4:	46bd      	mov	sp, r7
 8021eb6:	bd80      	pop	{r7, pc}
 8021eb8:	2001b6b0 	.word	0x2001b6b0

08021ebc <ST7789_Send_Data>:

void ST7789_Send_Data(uint16_t x, uint16_t y, uint16_t x_end, uint16_t y_end, uint8_t *p){
 8021ebc:	b590      	push	{r4, r7, lr}
 8021ebe:	b083      	sub	sp, #12
 8021ec0:	af00      	add	r7, sp, #0
 8021ec2:	4604      	mov	r4, r0
 8021ec4:	4608      	mov	r0, r1
 8021ec6:	4611      	mov	r1, r2
 8021ec8:	461a      	mov	r2, r3
 8021eca:	4623      	mov	r3, r4
 8021ecc:	80fb      	strh	r3, [r7, #6]
 8021ece:	4603      	mov	r3, r0
 8021ed0:	80bb      	strh	r3, [r7, #4]
 8021ed2:	460b      	mov	r3, r1
 8021ed4:	807b      	strh	r3, [r7, #2]
 8021ed6:	4613      	mov	r3, r2
 8021ed8:	803b      	strh	r3, [r7, #0]
	ST7789_SetAddressWindow(x, y, x_end, y_end);
 8021eda:	883b      	ldrh	r3, [r7, #0]
 8021edc:	887a      	ldrh	r2, [r7, #2]
 8021ede:	88b9      	ldrh	r1, [r7, #4]
 8021ee0:	88f8      	ldrh	r0, [r7, #6]
 8021ee2:	f7ff febb 	bl	8021c5c <ST7789_SetAddressWindow>
	ST7789_DC_Set();
 8021ee6:	2201      	movs	r2, #1
 8021ee8:	2104      	movs	r1, #4
 8021eea:	480d      	ldr	r0, [pc, #52]	; (8021f20 <ST7789_Send_Data+0x64>)
 8021eec:	f7e0 fc26 	bl	800273c <HAL_GPIO_WritePin>
	ST7789_SPI_Send(p,(x_end - x + 1) * (y_end - y + 1) * 2);
 8021ef0:	887a      	ldrh	r2, [r7, #2]
 8021ef2:	88fb      	ldrh	r3, [r7, #6]
 8021ef4:	1ad3      	subs	r3, r2, r3
 8021ef6:	3301      	adds	r3, #1
 8021ef8:	b29a      	uxth	r2, r3
 8021efa:	8839      	ldrh	r1, [r7, #0]
 8021efc:	88bb      	ldrh	r3, [r7, #4]
 8021efe:	1acb      	subs	r3, r1, r3
 8021f00:	3301      	adds	r3, #1
 8021f02:	b29b      	uxth	r3, r3
 8021f04:	fb12 f303 	smulbb	r3, r2, r3
 8021f08:	b29b      	uxth	r3, r3
 8021f0a:	005b      	lsls	r3, r3, #1
 8021f0c:	b29b      	uxth	r3, r3
 8021f0e:	4619      	mov	r1, r3
 8021f10:	69b8      	ldr	r0, [r7, #24]
 8021f12:	f7ff ffc1 	bl	8021e98 <ST7789_SPI_Send>
}
 8021f16:	bf00      	nop
 8021f18:	370c      	adds	r7, #12
 8021f1a:	46bd      	mov	sp, r7
 8021f1c:	bd90      	pop	{r4, r7, pc}
 8021f1e:	bf00      	nop
 8021f20:	40020000 	.word	0x40020000

08021f24 <tos_Tft_init>:
#if DMA_ACTIVE
static lv_disp_drv_t * st7789disp_p;
#endif

static void st7789_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p);
void tos_Tft_init(void){
 8021f24:	b580      	push	{r7, lr}
 8021f26:	b08a      	sub	sp, #40	; 0x28
 8021f28:	af00      	add	r7, sp, #0
	  ST7789_Init();
 8021f2a:	f7ff fee7 	bl	8021cfc <ST7789_Init>
	  lv_init();
 8021f2e:	f7e6 f9db 	bl	80082e8 <lv_init>

	 static lv_disp_buf_t disp_buf;
	 static lv_color_t buf[LV_HOR_RES_MAX * LV_VER_RES_MAX / 10];
	 lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX / 10);
 8021f32:	f44f 53b4 	mov.w	r3, #5760	; 0x1680
 8021f36:	2200      	movs	r2, #0
 8021f38:	4909      	ldr	r1, [pc, #36]	; (8021f60 <tos_Tft_init+0x3c>)
 8021f3a:	480a      	ldr	r0, [pc, #40]	; (8021f64 <tos_Tft_init+0x40>)
 8021f3c:	f7f3 f84c 	bl	8014fd8 <lv_disp_buf_init>

	  lv_disp_drv_t disp_drv;
	  lv_disp_drv_init(&disp_drv);
 8021f40:	1d3b      	adds	r3, r7, #4
 8021f42:	4618      	mov	r0, r3
 8021f44:	f7f3 f80b 	bl	8014f5e <lv_disp_drv_init>
	  disp_drv.buffer = &disp_buf;
 8021f48:	4b06      	ldr	r3, [pc, #24]	; (8021f64 <tos_Tft_init+0x40>)
 8021f4a:	60bb      	str	r3, [r7, #8]
	  disp_drv.flush_cb = st7789_flush_cb;
 8021f4c:	4b06      	ldr	r3, [pc, #24]	; (8021f68 <tos_Tft_init+0x44>)
 8021f4e:	613b      	str	r3, [r7, #16]
	  lv_disp_drv_register(&disp_drv);
 8021f50:	1d3b      	adds	r3, r7, #4
 8021f52:	4618      	mov	r0, r3
 8021f54:	f7f3 f85e 	bl	8015014 <lv_disp_drv_register>

}
 8021f58:	bf00      	nop
 8021f5a:	3728      	adds	r7, #40	; 0x28
 8021f5c:	46bd      	mov	sp, r7
 8021f5e:	bd80      	pop	{r7, pc}
 8021f60:	200179c8 	.word	0x200179c8
 8021f64:	200179ac 	.word	0x200179ac
 8021f68:	08021f6d 	.word	0x08021f6d

08021f6c <st7789_flush_cb>:

static void st7789_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8021f6c:	b590      	push	{r4, r7, lr}
 8021f6e:	b087      	sub	sp, #28
 8021f70:	af02      	add	r7, sp, #8
 8021f72:	60f8      	str	r0, [r7, #12]
 8021f74:	60b9      	str	r1, [r7, #8]
 8021f76:	607a      	str	r2, [r7, #4]
	 	if(area->x2 < 0) return;
 8021f78:	68bb      	ldr	r3, [r7, #8]
 8021f7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021f7e:	2b00      	cmp	r3, #0
 8021f80:	db27      	blt.n	8021fd2 <st7789_flush_cb+0x66>
	    if(area->y2 < 0) return;
 8021f82:	68bb      	ldr	r3, [r7, #8]
 8021f84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8021f88:	2b00      	cmp	r3, #0
 8021f8a:	db24      	blt.n	8021fd6 <st7789_flush_cb+0x6a>
	    if(area->x1 > LV_HOR_RES_MAX - 1) return;
 8021f8c:	68bb      	ldr	r3, [r7, #8]
 8021f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021f92:	2bef      	cmp	r3, #239	; 0xef
 8021f94:	dc21      	bgt.n	8021fda <st7789_flush_cb+0x6e>
	    if(area->y1 > LV_VER_RES_MAX - 1) return;
 8021f96:	68bb      	ldr	r3, [r7, #8]
 8021f98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021f9c:	2bef      	cmp	r3, #239	; 0xef
 8021f9e:	dc1e      	bgt.n	8021fde <st7789_flush_cb+0x72>

#if DMA_ACTIVE
	      ST7789_Send_Data_DMA(area->x1, area->y1, area->x2, area->y2,(uint8_t *)color_p);
	      st7789disp_p=disp_drv;
#else
	ST7789_Send_Data(area->x1, area->y1, area->x2, area->y2,(uint8_t *)color_p);
 8021fa0:	68bb      	ldr	r3, [r7, #8]
 8021fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021fa6:	b298      	uxth	r0, r3
 8021fa8:	68bb      	ldr	r3, [r7, #8]
 8021faa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021fae:	b299      	uxth	r1, r3
 8021fb0:	68bb      	ldr	r3, [r7, #8]
 8021fb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021fb6:	b29a      	uxth	r2, r3
 8021fb8:	68bb      	ldr	r3, [r7, #8]
 8021fba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8021fbe:	b29c      	uxth	r4, r3
 8021fc0:	687b      	ldr	r3, [r7, #4]
 8021fc2:	9300      	str	r3, [sp, #0]
 8021fc4:	4623      	mov	r3, r4
 8021fc6:	f7ff ff79 	bl	8021ebc <ST7789_Send_Data>
    lv_disp_flush_ready(disp_drv);
 8021fca:	68f8      	ldr	r0, [r7, #12]
 8021fcc:	f7f3 f91c 	bl	8015208 <lv_disp_flush_ready>
 8021fd0:	e006      	b.n	8021fe0 <st7789_flush_cb+0x74>
	 	if(area->x2 < 0) return;
 8021fd2:	bf00      	nop
 8021fd4:	e004      	b.n	8021fe0 <st7789_flush_cb+0x74>
	    if(area->y2 < 0) return;
 8021fd6:	bf00      	nop
 8021fd8:	e002      	b.n	8021fe0 <st7789_flush_cb+0x74>
	    if(area->x1 > LV_HOR_RES_MAX - 1) return;
 8021fda:	bf00      	nop
 8021fdc:	e000      	b.n	8021fe0 <st7789_flush_cb+0x74>
	    if(area->y1 > LV_VER_RES_MAX - 1) return;
 8021fde:	bf00      	nop
#endif
}
 8021fe0:	3714      	adds	r7, #20
 8021fe2:	46bd      	mov	sp, r7
 8021fe4:	bd90      	pop	{r4, r7, pc}

08021fe6 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8021fe6:	b580      	push	{r7, lr}
 8021fe8:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8021fea:	f7f3 f8a3 	bl	8015134 <lv_disp_get_default>
 8021fee:	4603      	mov	r3, r0
 8021ff0:	4618      	mov	r0, r3
 8021ff2:	f7e5 fd6b 	bl	8007acc <lv_disp_get_scr_act>
 8021ff6:	4603      	mov	r3, r0
}
 8021ff8:	4618      	mov	r0, r3
 8021ffa:	bd80      	pop	{r7, pc}

08021ffc <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8021ffc:	b580      	push	{r7, lr}
 8021ffe:	b084      	sub	sp, #16
 8022000:	af00      	add	r7, sp, #0
 8022002:	60f8      	str	r0, [r7, #12]
 8022004:	460b      	mov	r3, r1
 8022006:	607a      	str	r2, [r7, #4]
 8022008:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 802200a:	6879      	ldr	r1, [r7, #4]
 802200c:	68f8      	ldr	r0, [r7, #12]
 802200e:	f7e7 fbd4 	bl	80097ba <lv_obj_set_style>
}
 8022012:	bf00      	nop
 8022014:	3710      	adds	r7, #16
 8022016:	46bd      	mov	sp, r7
 8022018:	bd80      	pop	{r7, pc}

0802201a <lv_lmeter_set_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be set (can be only `LV_LMETER_STYLE_MAIN`)
 * @param style set the style of the line meter
 */
static inline void lv_lmeter_set_style(lv_obj_t * lmeter, lv_lmeter_style_t type, lv_style_t * style)
{
 802201a:	b580      	push	{r7, lr}
 802201c:	b084      	sub	sp, #16
 802201e:	af00      	add	r7, sp, #0
 8022020:	60f8      	str	r0, [r7, #12]
 8022022:	460b      	mov	r3, r1
 8022024:	607a      	str	r2, [r7, #4]
 8022026:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(lmeter, style);
 8022028:	6879      	ldr	r1, [r7, #4]
 802202a:	68f8      	ldr	r0, [r7, #12]
 802202c:	f7e7 fbc5 	bl	80097ba <lv_obj_set_style>
}
 8022030:	bf00      	nop
 8022032:	3710      	adds	r7, #16
 8022034:	46bd      	mov	sp, r7
 8022036:	bd80      	pop	{r7, pc}

08022038 <tos_MainScreen_Init>:

@param theme:
false ->Light Theme
true ->Dark Theme
*/
void tos_MainScreen_Init(uint8_t screenType,bool theme) {
 8022038:	b580      	push	{r7, lr}
 802203a:	b082      	sub	sp, #8
 802203c:	af00      	add	r7, sp, #0
 802203e:	4603      	mov	r3, r0
 8022040:	460a      	mov	r2, r1
 8022042:	71fb      	strb	r3, [r7, #7]
 8022044:	4613      	mov	r3, r2
 8022046:	71bb      	strb	r3, [r7, #6]
		    weekDayStr="Gun";
 8022048:	4b3d      	ldr	r3, [pc, #244]	; (8022140 <tos_MainScreen_Init+0x108>)
 802204a:	4a3e      	ldr	r2, [pc, #248]	; (8022144 <tos_MainScreen_Init+0x10c>)
 802204c:	601a      	str	r2, [r3, #0]
	static lv_style_t style_screen;
	lv_style_copy(&style_screen, &lv_style_plain);
 802204e:	493e      	ldr	r1, [pc, #248]	; (8022148 <tos_MainScreen_Init+0x110>)
 8022050:	483e      	ldr	r0, [pc, #248]	; (802214c <tos_MainScreen_Init+0x114>)
 8022052:	f7e9 f951 	bl	800b2f8 <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_WHITE;
 8022056:	4a3d      	ldr	r2, [pc, #244]	; (802214c <tos_MainScreen_Init+0x114>)
 8022058:	4b3d      	ldr	r3, [pc, #244]	; (8022150 <tos_MainScreen_Init+0x118>)
 802205a:	881b      	ldrh	r3, [r3, #0]
 802205c:	8053      	strh	r3, [r2, #2]
	style_screen.body.grad_color = LV_COLOR_WHITE;
 802205e:	4a3b      	ldr	r2, [pc, #236]	; (802214c <tos_MainScreen_Init+0x114>)
 8022060:	4b3b      	ldr	r3, [pc, #236]	; (8022150 <tos_MainScreen_Init+0x118>)
 8022062:	881b      	ldrh	r3, [r3, #0]
 8022064:	8093      	strh	r3, [r2, #4]
	if(theme){
 8022066:	79bb      	ldrb	r3, [r7, #6]
 8022068:	2b00      	cmp	r3, #0
 802206a:	d009      	beq.n	8022080 <tos_MainScreen_Init+0x48>
		lv_style_copy(&style_screen, &lv_style_plain);
 802206c:	4936      	ldr	r1, [pc, #216]	; (8022148 <tos_MainScreen_Init+0x110>)
 802206e:	4837      	ldr	r0, [pc, #220]	; (802214c <tos_MainScreen_Init+0x114>)
 8022070:	f7e9 f942 	bl	800b2f8 <lv_style_copy>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8022074:	4b35      	ldr	r3, [pc, #212]	; (802214c <tos_MainScreen_Init+0x114>)
 8022076:	2200      	movs	r2, #0
 8022078:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 802207a:	4b34      	ldr	r3, [pc, #208]	; (802214c <tos_MainScreen_Init+0x114>)
 802207c:	2200      	movs	r2, #0
 802207e:	809a      	strh	r2, [r3, #4]
	}
	lv_obj_set_style(lv_scr_act(), &style_screen);
 8022080:	f7ff ffb1 	bl	8021fe6 <lv_scr_act>
 8022084:	4603      	mov	r3, r0
 8022086:	4931      	ldr	r1, [pc, #196]	; (802214c <tos_MainScreen_Init+0x114>)
 8022088:	4618      	mov	r0, r3
 802208a:	f7e7 fb96 	bl	80097ba <lv_obj_set_style>

	MainScreenType= screenType;
 802208e:	4a31      	ldr	r2, [pc, #196]	; (8022154 <tos_MainScreen_Init+0x11c>)
 8022090:	79fb      	ldrb	r3, [r7, #7]
 8022092:	7013      	strb	r3, [r2, #0]
	MS_taskController=true;
 8022094:	4b30      	ldr	r3, [pc, #192]	; (8022158 <tos_MainScreen_Init+0x120>)
 8022096:	2201      	movs	r2, #1
 8022098:	701a      	strb	r2, [r3, #0]
	switch(screenType){
 802209a:	79fb      	ldrb	r3, [r7, #7]
 802209c:	2b01      	cmp	r3, #1
 802209e:	d010      	beq.n	80220c2 <tos_MainScreen_Init+0x8a>
 80220a0:	2b02      	cmp	r3, #2
 80220a2:	d01b      	beq.n	80220dc <tos_MainScreen_Init+0xa4>
 80220a4:	2b00      	cmp	r3, #0
 80220a6:	d125      	bne.n	80220f4 <tos_MainScreen_Init+0xbc>
	case tos_mainScreen_Type1: tos_DigitalType_Init(0,theme);
 80220a8:	79bb      	ldrb	r3, [r7, #6]
 80220aa:	4619      	mov	r1, r3
 80220ac:	2000      	movs	r0, #0
 80220ae:	f000 fc2f 	bl	8022910 <tos_DigitalType_Init>
	lv_task_create(digitalTimePrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 80220b2:	2300      	movs	r3, #0
 80220b4:	2201      	movs	r2, #1
 80220b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80220ba:	4828      	ldr	r0, [pc, #160]	; (802215c <tos_MainScreen_Init+0x124>)
 80220bc:	f7f4 fc7e 	bl	80169bc <lv_task_create>
 80220c0:	e01d      	b.n	80220fe <tos_MainScreen_Init+0xc6>
	case tos_mainScreen_Type2: tos_DigitalType_Init(1,theme);
 80220c2:	79bb      	ldrb	r3, [r7, #6]
 80220c4:	4619      	mov	r1, r3
 80220c6:	2001      	movs	r0, #1
 80220c8:	f000 fc22 	bl	8022910 <tos_DigitalType_Init>
	lv_task_create(digitalTimePrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 80220cc:	2300      	movs	r3, #0
 80220ce:	2201      	movs	r2, #1
 80220d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80220d4:	4821      	ldr	r0, [pc, #132]	; (802215c <tos_MainScreen_Init+0x124>)
 80220d6:	f7f4 fc71 	bl	80169bc <lv_task_create>
 80220da:	e010      	b.n	80220fe <tos_MainScreen_Init+0xc6>
	case tos_mainScreen_Type3: tos_AnalogueType_Init(theme);
 80220dc:	79bb      	ldrb	r3, [r7, #6]
 80220de:	4618      	mov	r0, r3
 80220e0:	f000 f848 	bl	8022174 <tos_AnalogueType_Init>
	lv_task_create(analogueDataPrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 80220e4:	2300      	movs	r3, #0
 80220e6:	2201      	movs	r2, #1
 80220e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80220ec:	481c      	ldr	r0, [pc, #112]	; (8022160 <tos_MainScreen_Init+0x128>)
 80220ee:	f7f4 fc65 	bl	80169bc <lv_task_create>
 80220f2:	e004      	b.n	80220fe <tos_MainScreen_Init+0xc6>
	default: tos_DigitalType_Init(0,theme);
 80220f4:	79bb      	ldrb	r3, [r7, #6]
 80220f6:	4619      	mov	r1, r3
 80220f8:	2000      	movs	r0, #0
 80220fa:	f000 fc09 	bl	8022910 <tos_DigitalType_Init>
	}
	lv_task_create(batteryValueUpdater, 500, LV_TASK_PRIO_LOWEST, NULL);
 80220fe:	2300      	movs	r3, #0
 8022100:	2201      	movs	r2, #1
 8022102:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022106:	4817      	ldr	r0, [pc, #92]	; (8022164 <tos_MainScreen_Init+0x12c>)
 8022108:	f7f4 fc58 	bl	80169bc <lv_task_create>
	lv_task_create(bluetoothStatusUpdater, 500, LV_TASK_PRIO_LOWEST, NULL);
 802210c:	2300      	movs	r3, #0
 802210e:	2201      	movs	r2, #1
 8022110:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022114:	4814      	ldr	r0, [pc, #80]	; (8022168 <tos_MainScreen_Init+0x130>)
 8022116:	f7f4 fc51 	bl	80169bc <lv_task_create>
	lv_task_create(steps_angle_loader, 500, LV_TASK_PRIO_LOWEST, NULL);
 802211a:	2300      	movs	r3, #0
 802211c:	2201      	movs	r2, #1
 802211e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022122:	4812      	ldr	r0, [pc, #72]	; (802216c <tos_MainScreen_Init+0x134>)
 8022124:	f7f4 fc4a 	bl	80169bc <lv_task_create>
	lv_task_create(kCals_angle_loader, 500, LV_TASK_PRIO_LOWEST, NULL);
 8022128:	2300      	movs	r3, #0
 802212a:	2201      	movs	r2, #1
 802212c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022130:	480f      	ldr	r0, [pc, #60]	; (8022170 <tos_MainScreen_Init+0x138>)
 8022132:	f7f4 fc43 	bl	80169bc <lv_task_create>



}
 8022136:	bf00      	nop
 8022138:	3708      	adds	r7, #8
 802213a:	46bd      	mov	sp, r7
 802213c:	bd80      	pop	{r7, pc}
 802213e:	bf00      	nop
 8022140:	2001bc10 	.word	0x2001bc10
 8022144:	0802c9a4 	.word	0x0802c9a4
 8022148:	2001ba10 	.word	0x2001ba10
 802214c:	2001a6c8 	.word	0x2001a6c8
 8022150:	0802c9a8 	.word	0x0802c9a8
 8022154:	2001bbb0 	.word	0x2001bbb0
 8022158:	2001bc2d 	.word	0x2001bc2d
 802215c:	080239b1 	.word	0x080239b1
 8022160:	08023af9 	.word	0x08023af9
 8022164:	08023625 	.word	0x08023625
 8022168:	08023685 	.word	0x08023685
 802216c:	08023bb1 	.word	0x08023bb1
 8022170:	08023cf9 	.word	0x08023cf9

08022174 <tos_AnalogueType_Init>:

//Analogue Type
void tos_AnalogueType_Init(bool theme){
 8022174:	b580      	push	{r7, lr}
 8022176:	b084      	sub	sp, #16
 8022178:	af02      	add	r7, sp, #8
 802217a:	4603      	mov	r3, r0
 802217c:	71fb      	strb	r3, [r7, #7]

	static lv_style_t dDate_style,weekD_style;
    lv_style_copy(&dDate_style, &lv_style_plain);
 802217e:	49b9      	ldr	r1, [pc, #740]	; (8022464 <tos_AnalogueType_Init+0x2f0>)
 8022180:	48b9      	ldr	r0, [pc, #740]	; (8022468 <tos_AnalogueType_Init+0x2f4>)
 8022182:	f7e9 f8b9 	bl	800b2f8 <lv_style_copy>
    dDate_style.text.font =&digital_font_for_number_30;
 8022186:	4bb8      	ldr	r3, [pc, #736]	; (8022468 <tos_AnalogueType_Init+0x2f4>)
 8022188:	4ab8      	ldr	r2, [pc, #736]	; (802246c <tos_AnalogueType_Init+0x2f8>)
 802218a:	625a      	str	r2, [r3, #36]	; 0x24
	lv_style_copy(&weekD_style, &lv_style_plain);
 802218c:	49b5      	ldr	r1, [pc, #724]	; (8022464 <tos_AnalogueType_Init+0x2f0>)
 802218e:	48b8      	ldr	r0, [pc, #736]	; (8022470 <tos_AnalogueType_Init+0x2fc>)
 8022190:	f7e9 f8b2 	bl	800b2f8 <lv_style_copy>
	weekD_style.text.font =&lv_font_roboto_22;
 8022194:	4bb6      	ldr	r3, [pc, #728]	; (8022470 <tos_AnalogueType_Init+0x2fc>)
 8022196:	4ab7      	ldr	r2, [pc, #732]	; (8022474 <tos_AnalogueType_Init+0x300>)
 8022198:	625a      	str	r2, [r3, #36]	; 0x24
    if(theme){
 802219a:	79fb      	ldrb	r3, [r7, #7]
 802219c:	2b00      	cmp	r3, #0
 802219e:	d007      	beq.n	80221b0 <tos_AnalogueType_Init+0x3c>
    	dDate_style.text.color = LV_COLOR_SILVER;
 80221a0:	4ab1      	ldr	r2, [pc, #708]	; (8022468 <tos_AnalogueType_Init+0x2f4>)
 80221a2:	4bb5      	ldr	r3, [pc, #724]	; (8022478 <tos_AnalogueType_Init+0x304>)
 80221a4:	881b      	ldrh	r3, [r3, #0]
 80221a6:	8413      	strh	r3, [r2, #32]
    	weekD_style.text.color = LV_COLOR_SILVER;
 80221a8:	4ab1      	ldr	r2, [pc, #708]	; (8022470 <tos_AnalogueType_Init+0x2fc>)
 80221aa:	4bb3      	ldr	r3, [pc, #716]	; (8022478 <tos_AnalogueType_Init+0x304>)
 80221ac:	881b      	ldrh	r3, [r3, #0]
 80221ae:	8413      	strh	r3, [r2, #32]
    }

    if(theme){
    }
    //Battery
    	batteryLbl= lv_label_create(lv_scr_act(), NULL);
 80221b0:	f7ff ff19 	bl	8021fe6 <lv_scr_act>
 80221b4:	4603      	mov	r3, r0
 80221b6:	2100      	movs	r1, #0
 80221b8:	4618      	mov	r0, r3
 80221ba:	f7f9 ff71 	bl	801c0a0 <lv_label_create>
 80221be:	4602      	mov	r2, r0
 80221c0:	4bae      	ldr	r3, [pc, #696]	; (802247c <tos_AnalogueType_Init+0x308>)
 80221c2:	601a      	str	r2, [r3, #0]
    	lv_style_copy(&battery_style, &lv_style_plain);
 80221c4:	49a7      	ldr	r1, [pc, #668]	; (8022464 <tos_AnalogueType_Init+0x2f0>)
 80221c6:	48ae      	ldr	r0, [pc, #696]	; (8022480 <tos_AnalogueType_Init+0x30c>)
 80221c8:	f7e9 f896 	bl	800b2f8 <lv_style_copy>
    	battery_style.text.color = LV_COLOR_GREEN;
 80221cc:	4aac      	ldr	r2, [pc, #688]	; (8022480 <tos_AnalogueType_Init+0x30c>)
 80221ce:	f892 3020 	ldrb.w	r3, [r2, #32]
 80221d2:	2104      	movs	r1, #4
 80221d4:	f361 0302 	bfi	r3, r1, #0, #3
 80221d8:	f882 3020 	strb.w	r3, [r2, #32]
 80221dc:	4aa8      	ldr	r2, [pc, #672]	; (8022480 <tos_AnalogueType_Init+0x30c>)
 80221de:	f892 3020 	ldrb.w	r3, [r2, #32]
 80221e2:	f36f 03c7 	bfc	r3, #3, #5
 80221e6:	f882 3020 	strb.w	r3, [r2, #32]
 80221ea:	4aa5      	ldr	r2, [pc, #660]	; (8022480 <tos_AnalogueType_Init+0x30c>)
 80221ec:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80221f0:	f36f 0304 	bfc	r3, #0, #5
 80221f4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80221f8:	4aa1      	ldr	r2, [pc, #644]	; (8022480 <tos_AnalogueType_Init+0x30c>)
 80221fa:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80221fe:	f36f 1347 	bfc	r3, #5, #3
 8022202:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
    	lv_label_set_style(batteryLbl, LV_LABEL_STYLE_MAIN, &battery_style);
 8022206:	4b9d      	ldr	r3, [pc, #628]	; (802247c <tos_AnalogueType_Init+0x308>)
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	4a9d      	ldr	r2, [pc, #628]	; (8022480 <tos_AnalogueType_Init+0x30c>)
 802220c:	2100      	movs	r1, #0
 802220e:	4618      	mov	r0, r3
 8022210:	f7ff fef4 	bl	8021ffc <lv_label_set_style>
    	lv_label_set_text(batteryLbl, LV_SYMBOL_BATTERY_FULL);
 8022214:	4b99      	ldr	r3, [pc, #612]	; (802247c <tos_AnalogueType_Init+0x308>)
 8022216:	681b      	ldr	r3, [r3, #0]
 8022218:	499a      	ldr	r1, [pc, #616]	; (8022484 <tos_AnalogueType_Init+0x310>)
 802221a:	4618      	mov	r0, r3
 802221c:	f7fa f872 	bl	801c304 <lv_label_set_text>
    	lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8022220:	4b96      	ldr	r3, [pc, #600]	; (802247c <tos_AnalogueType_Init+0x308>)
 8022222:	6818      	ldr	r0, [r3, #0]
 8022224:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8022228:	9300      	str	r3, [sp, #0]
 802222a:	2364      	movs	r3, #100	; 0x64
 802222c:	2200      	movs	r2, #0
 802222e:	2100      	movs	r1, #0
 8022230:	f7e6 fe1e 	bl	8008e70 <lv_obj_align>

    	//Bluetooth
    	bluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 8022234:	f7ff fed7 	bl	8021fe6 <lv_scr_act>
 8022238:	4603      	mov	r3, r0
 802223a:	2100      	movs	r1, #0
 802223c:	4618      	mov	r0, r3
 802223e:	f7f9 ff2f 	bl	801c0a0 <lv_label_create>
 8022242:	4602      	mov	r2, r0
 8022244:	4b90      	ldr	r3, [pc, #576]	; (8022488 <tos_AnalogueType_Init+0x314>)
 8022246:	601a      	str	r2, [r3, #0]
        lv_style_copy(&bluetooth_style, &lv_style_plain);
 8022248:	4986      	ldr	r1, [pc, #536]	; (8022464 <tos_AnalogueType_Init+0x2f0>)
 802224a:	4890      	ldr	r0, [pc, #576]	; (802248c <tos_AnalogueType_Init+0x318>)
 802224c:	f7e9 f854 	bl	800b2f8 <lv_style_copy>
    	bluetooth_style.text.color = LV_COLOR_WHITE;
 8022250:	4a8e      	ldr	r2, [pc, #568]	; (802248c <tos_AnalogueType_Init+0x318>)
 8022252:	4b8f      	ldr	r3, [pc, #572]	; (8022490 <tos_AnalogueType_Init+0x31c>)
 8022254:	881b      	ldrh	r3, [r3, #0]
 8022256:	8413      	strh	r3, [r2, #32]
    	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &bluetooth_style);
 8022258:	4b8b      	ldr	r3, [pc, #556]	; (8022488 <tos_AnalogueType_Init+0x314>)
 802225a:	681b      	ldr	r3, [r3, #0]
 802225c:	4a8b      	ldr	r2, [pc, #556]	; (802248c <tos_AnalogueType_Init+0x318>)
 802225e:	2100      	movs	r1, #0
 8022260:	4618      	mov	r0, r3
 8022262:	f7ff fecb 	bl	8021ffc <lv_label_set_style>
    	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8022266:	4b88      	ldr	r3, [pc, #544]	; (8022488 <tos_AnalogueType_Init+0x314>)
 8022268:	681b      	ldr	r3, [r3, #0]
 802226a:	498a      	ldr	r1, [pc, #552]	; (8022494 <tos_AnalogueType_Init+0x320>)
 802226c:	4618      	mov	r0, r3
 802226e:	f7fa f849 	bl	801c304 <lv_label_set_text>
    	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8022272:	4b85      	ldr	r3, [pc, #532]	; (8022488 <tos_AnalogueType_Init+0x314>)
 8022274:	6818      	ldr	r0, [r3, #0]
 8022276:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 802227a:	9300      	str	r3, [sp, #0]
 802227c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8022280:	2200      	movs	r2, #0
 8022282:	2100      	movs	r1, #0
 8022284:	f7e6 fdf4 	bl	8008e70 <lv_obj_align>
    	//

      //Analogue Quadran
    	static lv_style_t analogue_quadran_style;
       lv_style_copy(&analogue_quadran_style, &lv_style_pretty_color);
 8022288:	4983      	ldr	r1, [pc, #524]	; (8022498 <tos_AnalogueType_Init+0x324>)
 802228a:	4884      	ldr	r0, [pc, #528]	; (802249c <tos_AnalogueType_Init+0x328>)
 802228c:	f7e9 f834 	bl	800b2f8 <lv_style_copy>
       analogue_quadran_style.line.width = 2;
 8022290:	4b82      	ldr	r3, [pc, #520]	; (802249c <tos_AnalogueType_Init+0x328>)
 8022292:	2202      	movs	r2, #2
 8022294:	86da      	strh	r2, [r3, #54]	; 0x36
       analogue_quadran_style.line.color = LV_COLOR_SILVER;
 8022296:	4a81      	ldr	r2, [pc, #516]	; (802249c <tos_AnalogueType_Init+0x328>)
 8022298:	4b77      	ldr	r3, [pc, #476]	; (8022478 <tos_AnalogueType_Init+0x304>)
 802229a:	881b      	ldrh	r3, [r3, #0]
 802229c:	8693      	strh	r3, [r2, #52]	; 0x34
       analogue_quadran_style.body.padding.left = 20;
 802229e:	4b7f      	ldr	r3, [pc, #508]	; (802249c <tos_AnalogueType_Init+0x328>)
 80222a0:	2214      	movs	r2, #20
 80222a2:	835a      	strh	r2, [r3, #26]


       analogueQuadran = lv_lmeter_create(lv_scr_act(), NULL);
 80222a4:	f7ff fe9f 	bl	8021fe6 <lv_scr_act>
 80222a8:	4603      	mov	r3, r0
 80222aa:	2100      	movs	r1, #0
 80222ac:	4618      	mov	r0, r3
 80222ae:	f7fb fa1b 	bl	801d6e8 <lv_lmeter_create>
 80222b2:	4602      	mov	r2, r0
 80222b4:	4b7a      	ldr	r3, [pc, #488]	; (80224a0 <tos_AnalogueType_Init+0x32c>)
 80222b6:	601a      	str	r2, [r3, #0]
       lv_lmeter_set_range(analogueQuadran, 0, 59);
 80222b8:	4b79      	ldr	r3, [pc, #484]	; (80224a0 <tos_AnalogueType_Init+0x32c>)
 80222ba:	681b      	ldr	r3, [r3, #0]
 80222bc:	223b      	movs	r2, #59	; 0x3b
 80222be:	2100      	movs	r1, #0
 80222c0:	4618      	mov	r0, r3
 80222c2:	f7fb facb 	bl	801d85c <lv_lmeter_set_range>
       lv_lmeter_set_scale(analogueQuadran, 360, 60);
 80222c6:	4b76      	ldr	r3, [pc, #472]	; (80224a0 <tos_AnalogueType_Init+0x32c>)
 80222c8:	681b      	ldr	r3, [r3, #0]
 80222ca:	223c      	movs	r2, #60	; 0x3c
 80222cc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80222d0:	4618      	mov	r0, r3
 80222d2:	f7fb fb0d 	bl	801d8f0 <lv_lmeter_set_scale>
       lv_lmeter_set_style(analogueQuadran, LV_LMETER_STYLE_MAIN, &analogue_quadran_style);
 80222d6:	4b72      	ldr	r3, [pc, #456]	; (80224a0 <tos_AnalogueType_Init+0x32c>)
 80222d8:	681b      	ldr	r3, [r3, #0]
 80222da:	4a70      	ldr	r2, [pc, #448]	; (802249c <tos_AnalogueType_Init+0x328>)
 80222dc:	2100      	movs	r1, #0
 80222de:	4618      	mov	r0, r3
 80222e0:	f7ff fe9b 	bl	802201a <lv_lmeter_set_style>
       lv_obj_set_size(analogueQuadran, 240, 240);
 80222e4:	4b6e      	ldr	r3, [pc, #440]	; (80224a0 <tos_AnalogueType_Init+0x32c>)
 80222e6:	681b      	ldr	r3, [r3, #0]
 80222e8:	22f0      	movs	r2, #240	; 0xf0
 80222ea:	21f0      	movs	r1, #240	; 0xf0
 80222ec:	4618      	mov	r0, r3
 80222ee:	f7e6 fd1c 	bl	8008d2a <lv_obj_set_size>
       lv_obj_align(analogueQuadran, NULL, LV_ALIGN_CENTER, 0, 0);
 80222f2:	4b6b      	ldr	r3, [pc, #428]	; (80224a0 <tos_AnalogueType_Init+0x32c>)
 80222f4:	6818      	ldr	r0, [r3, #0]
 80222f6:	2300      	movs	r3, #0
 80222f8:	9300      	str	r3, [sp, #0]
 80222fa:	2300      	movs	r3, #0
 80222fc:	2200      	movs	r2, #0
 80222fe:	2100      	movs	r1, #0
 8022300:	f7e6 fdb6 	bl	8008e70 <lv_obj_align>

       //Hours
       static lv_style_t hours_Style;
       	  lv_style_copy(&hours_Style, &lv_style_plain);
 8022304:	4957      	ldr	r1, [pc, #348]	; (8022464 <tos_AnalogueType_Init+0x2f0>)
 8022306:	4867      	ldr	r0, [pc, #412]	; (80224a4 <tos_AnalogueType_Init+0x330>)
 8022308:	f7e8 fff6 	bl	800b2f8 <lv_style_copy>
       	  hours_Style.line.color = LV_COLOR_MAGENTA;
 802230c:	4a65      	ldr	r2, [pc, #404]	; (80224a4 <tos_AnalogueType_Init+0x330>)
 802230e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022312:	f36f 0302 	bfc	r3, #0, #3
 8022316:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802231a:	4a62      	ldr	r2, [pc, #392]	; (80224a4 <tos_AnalogueType_Init+0x330>)
 802231c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022320:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8022324:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022328:	4a5e      	ldr	r2, [pc, #376]	; (80224a4 <tos_AnalogueType_Init+0x330>)
 802232a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802232e:	f043 031f 	orr.w	r3, r3, #31
 8022332:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8022336:	4a5b      	ldr	r2, [pc, #364]	; (80224a4 <tos_AnalogueType_Init+0x330>)
 8022338:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802233c:	f36f 1347 	bfc	r3, #5, #3
 8022340:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       	  hours_Style.line.width = 3;
 8022344:	4b57      	ldr	r3, [pc, #348]	; (80224a4 <tos_AnalogueType_Init+0x330>)
 8022346:	2203      	movs	r2, #3
 8022348:	86da      	strh	r2, [r3, #54]	; 0x36

       	  hoursArc = lv_arc_create(lv_scr_act(), NULL);
 802234a:	f7ff fe4c 	bl	8021fe6 <lv_scr_act>
 802234e:	4603      	mov	r3, r0
 8022350:	2100      	movs	r1, #0
 8022352:	4618      	mov	r0, r3
 8022354:	f7f5 f8a2 	bl	801749c <lv_arc_create>
 8022358:	4602      	mov	r2, r0
 802235a:	4b53      	ldr	r3, [pc, #332]	; (80224a8 <tos_AnalogueType_Init+0x334>)
 802235c:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(hoursArc, 240, 240);
 802235e:	4b52      	ldr	r3, [pc, #328]	; (80224a8 <tos_AnalogueType_Init+0x334>)
 8022360:	681b      	ldr	r3, [r3, #0]
 8022362:	22f0      	movs	r2, #240	; 0xf0
 8022364:	21f0      	movs	r1, #240	; 0xf0
 8022366:	4618      	mov	r0, r3
 8022368:	f7e6 fcdf 	bl	8008d2a <lv_obj_set_size>
       	  lv_arc_set_angles(hoursArc, 180, 180);
 802236c:	4b4e      	ldr	r3, [pc, #312]	; (80224a8 <tos_AnalogueType_Init+0x334>)
 802236e:	681b      	ldr	r3, [r3, #0]
 8022370:	22b4      	movs	r2, #180	; 0xb4
 8022372:	21b4      	movs	r1, #180	; 0xb4
 8022374:	4618      	mov	r0, r3
 8022376:	f7f5 f90d 	bl	8017594 <lv_arc_set_angles>
       	  lv_arc_set_style(hoursArc, LV_ARC_STYLE_MAIN, &hours_Style);
 802237a:	4b4b      	ldr	r3, [pc, #300]	; (80224a8 <tos_AnalogueType_Init+0x334>)
 802237c:	681b      	ldr	r3, [r3, #0]
 802237e:	4a49      	ldr	r2, [pc, #292]	; (80224a4 <tos_AnalogueType_Init+0x330>)
 8022380:	2100      	movs	r1, #0
 8022382:	4618      	mov	r0, r3
 8022384:	f7f5 f92f 	bl	80175e6 <lv_arc_set_style>
       	  lv_obj_align(hoursArc, NULL, LV_ALIGN_CENTER, 0, 0);
 8022388:	4b47      	ldr	r3, [pc, #284]	; (80224a8 <tos_AnalogueType_Init+0x334>)
 802238a:	6818      	ldr	r0, [r3, #0]
 802238c:	2300      	movs	r3, #0
 802238e:	9300      	str	r3, [sp, #0]
 8022390:	2300      	movs	r3, #0
 8022392:	2200      	movs	r2, #0
 8022394:	2100      	movs	r1, #0
 8022396:	f7e6 fd6b 	bl	8008e70 <lv_obj_align>

       	  //Minutes
       	static lv_style_t minutes_Style;
       	  lv_style_copy(&minutes_Style, &lv_style_plain);
 802239a:	4932      	ldr	r1, [pc, #200]	; (8022464 <tos_AnalogueType_Init+0x2f0>)
 802239c:	4843      	ldr	r0, [pc, #268]	; (80224ac <tos_AnalogueType_Init+0x338>)
 802239e:	f7e8 ffab 	bl	800b2f8 <lv_style_copy>
       	  minutes_Style.line.color = LV_COLOR_AQUA;
 80223a2:	4a42      	ldr	r2, [pc, #264]	; (80224ac <tos_AnalogueType_Init+0x338>)
 80223a4:	4b42      	ldr	r3, [pc, #264]	; (80224b0 <tos_AnalogueType_Init+0x33c>)
 80223a6:	881b      	ldrh	r3, [r3, #0]
 80223a8:	8693      	strh	r3, [r2, #52]	; 0x34
       	  minutes_Style.line.width = 3;
 80223aa:	4b40      	ldr	r3, [pc, #256]	; (80224ac <tos_AnalogueType_Init+0x338>)
 80223ac:	2203      	movs	r2, #3
 80223ae:	86da      	strh	r2, [r3, #54]	; 0x36

       	  minutesArc = lv_arc_create(lv_scr_act(), NULL);
 80223b0:	f7ff fe19 	bl	8021fe6 <lv_scr_act>
 80223b4:	4603      	mov	r3, r0
 80223b6:	2100      	movs	r1, #0
 80223b8:	4618      	mov	r0, r3
 80223ba:	f7f5 f86f 	bl	801749c <lv_arc_create>
 80223be:	4602      	mov	r2, r0
 80223c0:	4b3c      	ldr	r3, [pc, #240]	; (80224b4 <tos_AnalogueType_Init+0x340>)
 80223c2:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(minutesArc, 225, 225);
 80223c4:	4b3b      	ldr	r3, [pc, #236]	; (80224b4 <tos_AnalogueType_Init+0x340>)
 80223c6:	681b      	ldr	r3, [r3, #0]
 80223c8:	22e1      	movs	r2, #225	; 0xe1
 80223ca:	21e1      	movs	r1, #225	; 0xe1
 80223cc:	4618      	mov	r0, r3
 80223ce:	f7e6 fcac 	bl	8008d2a <lv_obj_set_size>
       	  lv_arc_set_angles(minutesArc, 180, 180);
 80223d2:	4b38      	ldr	r3, [pc, #224]	; (80224b4 <tos_AnalogueType_Init+0x340>)
 80223d4:	681b      	ldr	r3, [r3, #0]
 80223d6:	22b4      	movs	r2, #180	; 0xb4
 80223d8:	21b4      	movs	r1, #180	; 0xb4
 80223da:	4618      	mov	r0, r3
 80223dc:	f7f5 f8da 	bl	8017594 <lv_arc_set_angles>
       	  lv_arc_set_style(minutesArc, LV_ARC_STYLE_MAIN, &minutes_Style);
 80223e0:	4b34      	ldr	r3, [pc, #208]	; (80224b4 <tos_AnalogueType_Init+0x340>)
 80223e2:	681b      	ldr	r3, [r3, #0]
 80223e4:	4a31      	ldr	r2, [pc, #196]	; (80224ac <tos_AnalogueType_Init+0x338>)
 80223e6:	2100      	movs	r1, #0
 80223e8:	4618      	mov	r0, r3
 80223ea:	f7f5 f8fc 	bl	80175e6 <lv_arc_set_style>
       	  lv_obj_align(minutesArc, NULL, LV_ALIGN_CENTER, 0, 0);
 80223ee:	4b31      	ldr	r3, [pc, #196]	; (80224b4 <tos_AnalogueType_Init+0x340>)
 80223f0:	6818      	ldr	r0, [r3, #0]
 80223f2:	2300      	movs	r3, #0
 80223f4:	9300      	str	r3, [sp, #0]
 80223f6:	2300      	movs	r3, #0
 80223f8:	2200      	movs	r2, #0
 80223fa:	2100      	movs	r1, #0
 80223fc:	f7e6 fd38 	bl	8008e70 <lv_obj_align>

       	  //Seconds
       	static lv_style_t seconds_Style;
       	  lv_style_copy(&seconds_Style, &lv_style_plain);
 8022400:	4918      	ldr	r1, [pc, #96]	; (8022464 <tos_AnalogueType_Init+0x2f0>)
 8022402:	482d      	ldr	r0, [pc, #180]	; (80224b8 <tos_AnalogueType_Init+0x344>)
 8022404:	f7e8 ff78 	bl	800b2f8 <lv_style_copy>
       	  seconds_Style.line.color = LV_COLOR_ORANGE;
 8022408:	4a2b      	ldr	r2, [pc, #172]	; (80224b8 <tos_AnalogueType_Init+0x344>)
 802240a:	4b2c      	ldr	r3, [pc, #176]	; (80224bc <tos_AnalogueType_Init+0x348>)
 802240c:	881b      	ldrh	r3, [r3, #0]
 802240e:	8693      	strh	r3, [r2, #52]	; 0x34
       	  seconds_Style.line.width = 3;
 8022410:	4b29      	ldr	r3, [pc, #164]	; (80224b8 <tos_AnalogueType_Init+0x344>)
 8022412:	2203      	movs	r2, #3
 8022414:	86da      	strh	r2, [r3, #54]	; 0x36

       	  secondsArc = lv_arc_create(lv_scr_act(), NULL);
 8022416:	f7ff fde6 	bl	8021fe6 <lv_scr_act>
 802241a:	4603      	mov	r3, r0
 802241c:	2100      	movs	r1, #0
 802241e:	4618      	mov	r0, r3
 8022420:	f7f5 f83c 	bl	801749c <lv_arc_create>
 8022424:	4602      	mov	r2, r0
 8022426:	4b26      	ldr	r3, [pc, #152]	; (80224c0 <tos_AnalogueType_Init+0x34c>)
 8022428:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(secondsArc, 205, 205);
 802242a:	4b25      	ldr	r3, [pc, #148]	; (80224c0 <tos_AnalogueType_Init+0x34c>)
 802242c:	681b      	ldr	r3, [r3, #0]
 802242e:	22cd      	movs	r2, #205	; 0xcd
 8022430:	21cd      	movs	r1, #205	; 0xcd
 8022432:	4618      	mov	r0, r3
 8022434:	f7e6 fc79 	bl	8008d2a <lv_obj_set_size>
       	  lv_arc_set_angles(secondsArc, 180, 180);
 8022438:	4b21      	ldr	r3, [pc, #132]	; (80224c0 <tos_AnalogueType_Init+0x34c>)
 802243a:	681b      	ldr	r3, [r3, #0]
 802243c:	22b4      	movs	r2, #180	; 0xb4
 802243e:	21b4      	movs	r1, #180	; 0xb4
 8022440:	4618      	mov	r0, r3
 8022442:	f7f5 f8a7 	bl	8017594 <lv_arc_set_angles>
       	  lv_arc_set_style(secondsArc, LV_ARC_STYLE_MAIN, &seconds_Style);
 8022446:	4b1e      	ldr	r3, [pc, #120]	; (80224c0 <tos_AnalogueType_Init+0x34c>)
 8022448:	681b      	ldr	r3, [r3, #0]
 802244a:	4a1b      	ldr	r2, [pc, #108]	; (80224b8 <tos_AnalogueType_Init+0x344>)
 802244c:	2100      	movs	r1, #0
 802244e:	4618      	mov	r0, r3
 8022450:	f7f5 f8c9 	bl	80175e6 <lv_arc_set_style>
       	  lv_obj_align(secondsArc, NULL, LV_ALIGN_CENTER, 0, 0);
 8022454:	4b1a      	ldr	r3, [pc, #104]	; (80224c0 <tos_AnalogueType_Init+0x34c>)
 8022456:	6818      	ldr	r0, [r3, #0]
 8022458:	2300      	movs	r3, #0
 802245a:	9300      	str	r3, [sp, #0]
 802245c:	2300      	movs	r3, #0
 802245e:	2200      	movs	r2, #0
 8022460:	2100      	movs	r1, #0
 8022462:	e02f      	b.n	80224c4 <tos_AnalogueType_Init+0x350>
 8022464:	2001ba10 	.word	0x2001ba10
 8022468:	2001a704 	.word	0x2001a704
 802246c:	200027ec 	.word	0x200027ec
 8022470:	2001a740 	.word	0x2001a740
 8022474:	200017c4 	.word	0x200017c4
 8022478:	0802c9dc 	.word	0x0802c9dc
 802247c:	2001bc7c 	.word	0x2001bc7c
 8022480:	2001bc34 	.word	0x2001bc34
 8022484:	0802c9ac 	.word	0x0802c9ac
 8022488:	2001bc18 	.word	0x2001bc18
 802248c:	2001bbcc 	.word	0x2001bbcc
 8022490:	0802c9a8 	.word	0x0802c9a8
 8022494:	0802c9b0 	.word	0x0802c9b0
 8022498:	2001b830 	.word	0x2001b830
 802249c:	2001a77c 	.word	0x2001a77c
 80224a0:	2001bc74 	.word	0x2001bc74
 80224a4:	2001a7b8 	.word	0x2001a7b8
 80224a8:	2001bbc8 	.word	0x2001bbc8
 80224ac:	2001a7f4 	.word	0x2001a7f4
 80224b0:	0802c9e0 	.word	0x0802c9e0
 80224b4:	2001bc08 	.word	0x2001bc08
 80224b8:	2001a830 	.word	0x2001a830
 80224bc:	0802c9e4 	.word	0x0802c9e4
 80224c0:	2001bbb8 	.word	0x2001bbb8
 80224c4:	f7e6 fcd4 	bl	8008e70 <lv_obj_align>

       	 //Steps
       	static lv_style_t steps_Style,description_Style;
       			   		  lv_style_copy(&steps_Style, &lv_style_plain);
 80224c8:	49c0      	ldr	r1, [pc, #768]	; (80227cc <tos_AnalogueType_Init+0x658>)
 80224ca:	48c1      	ldr	r0, [pc, #772]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 80224cc:	f7e8 ff14 	bl	800b2f8 <lv_style_copy>
       			   		  steps_Style.line.color = LV_COLOR_GREEN;
 80224d0:	4abf      	ldr	r2, [pc, #764]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 80224d2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80224d6:	2104      	movs	r1, #4
 80224d8:	f361 0302 	bfi	r3, r1, #0, #3
 80224dc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80224e0:	4abb      	ldr	r2, [pc, #748]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 80224e2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80224e6:	f36f 03c7 	bfc	r3, #3, #5
 80224ea:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80224ee:	4ab8      	ldr	r2, [pc, #736]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 80224f0:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80224f4:	f36f 0304 	bfc	r3, #0, #5
 80224f8:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 80224fc:	4ab4      	ldr	r2, [pc, #720]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 80224fe:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022502:	f36f 1347 	bfc	r3, #5, #3
 8022506:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       			   		  steps_Style.line.width = 5;
 802250a:	4bb1      	ldr	r3, [pc, #708]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 802250c:	2205      	movs	r2, #5
 802250e:	86da      	strh	r2, [r3, #54]	; 0x36
       			   		  steps_Style.text.color = LV_COLOR_GREEN;
 8022510:	4aaf      	ldr	r2, [pc, #700]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 8022512:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022516:	2104      	movs	r1, #4
 8022518:	f361 0302 	bfi	r3, r1, #0, #3
 802251c:	f882 3020 	strb.w	r3, [r2, #32]
 8022520:	4aab      	ldr	r2, [pc, #684]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 8022522:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022526:	f36f 03c7 	bfc	r3, #3, #5
 802252a:	f882 3020 	strb.w	r3, [r2, #32]
 802252e:	4aa8      	ldr	r2, [pc, #672]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 8022530:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022534:	f36f 0304 	bfc	r3, #0, #5
 8022538:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 802253c:	4aa4      	ldr	r2, [pc, #656]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 802253e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022542:	f36f 1347 	bfc	r3, #5, #3
 8022546:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
       			   		  steps_Style.text.font = &lv_font_roboto_22;
 802254a:	4ba1      	ldr	r3, [pc, #644]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 802254c:	4aa1      	ldr	r2, [pc, #644]	; (80227d4 <tos_AnalogueType_Init+0x660>)
 802254e:	625a      	str	r2, [r3, #36]	; 0x24

       			   		  lv_style_copy(&description_Style, &lv_style_plain);
 8022550:	499e      	ldr	r1, [pc, #632]	; (80227cc <tos_AnalogueType_Init+0x658>)
 8022552:	48a1      	ldr	r0, [pc, #644]	; (80227d8 <tos_AnalogueType_Init+0x664>)
 8022554:	f7e8 fed0 	bl	800b2f8 <lv_style_copy>
       			   		  description_Style.text.font = &lv_font_unscii_8;
 8022558:	4b9f      	ldr	r3, [pc, #636]	; (80227d8 <tos_AnalogueType_Init+0x664>)
 802255a:	4aa0      	ldr	r2, [pc, #640]	; (80227dc <tos_AnalogueType_Init+0x668>)
 802255c:	625a      	str	r2, [r3, #36]	; 0x24
       			   		  description_Style.text.color = LV_COLOR_GRAY;
 802255e:	4a9e      	ldr	r2, [pc, #632]	; (80227d8 <tos_AnalogueType_Init+0x664>)
 8022560:	4b9f      	ldr	r3, [pc, #636]	; (80227e0 <tos_AnalogueType_Init+0x66c>)
 8022562:	881b      	ldrh	r3, [r3, #0]
 8022564:	8413      	strh	r3, [r2, #32]
       			   		    if(theme){
 8022566:	79fb      	ldrb	r3, [r7, #7]
 8022568:	2b00      	cmp	r3, #0
 802256a:	d003      	beq.n	8022574 <tos_AnalogueType_Init+0x400>
       			   		    	description_Style.text.color = LV_COLOR_WHITE;
 802256c:	4a9a      	ldr	r2, [pc, #616]	; (80227d8 <tos_AnalogueType_Init+0x664>)
 802256e:	4b9d      	ldr	r3, [pc, #628]	; (80227e4 <tos_AnalogueType_Init+0x670>)
 8022570:	881b      	ldrh	r3, [r3, #0]
 8022572:	8413      	strh	r3, [r2, #32]
       			   		    }

       			   		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8022574:	f7ff fd37 	bl	8021fe6 <lv_scr_act>
 8022578:	4603      	mov	r3, r0
 802257a:	2100      	movs	r1, #0
 802257c:	4618      	mov	r0, r3
 802257e:	f7f9 fd8f 	bl	801c0a0 <lv_label_create>
 8022582:	4602      	mov	r2, r0
 8022584:	4b98      	ldr	r3, [pc, #608]	; (80227e8 <tos_AnalogueType_Init+0x674>)
 8022586:	601a      	str	r2, [r3, #0]
       			   		 lv_obj_set_width(stepsLbl, 150);
 8022588:	4b97      	ldr	r3, [pc, #604]	; (80227e8 <tos_AnalogueType_Init+0x674>)
 802258a:	681b      	ldr	r3, [r3, #0]
 802258c:	2196      	movs	r1, #150	; 0x96
 802258e:	4618      	mov	r0, r3
 8022590:	f7e6 fc44 	bl	8008e1c <lv_obj_set_width>
       			   		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8022594:	4b94      	ldr	r3, [pc, #592]	; (80227e8 <tos_AnalogueType_Init+0x674>)
 8022596:	681b      	ldr	r3, [r3, #0]
 8022598:	4a8d      	ldr	r2, [pc, #564]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 802259a:	2100      	movs	r1, #0
 802259c:	4618      	mov	r0, r3
 802259e:	f7ff fd2d 	bl	8021ffc <lv_label_set_style>
       			   		 snprintf(buffer, 8, "%04d", steps);
 80225a2:	4b92      	ldr	r3, [pc, #584]	; (80227ec <tos_AnalogueType_Init+0x678>)
 80225a4:	881b      	ldrh	r3, [r3, #0]
 80225a6:	4a92      	ldr	r2, [pc, #584]	; (80227f0 <tos_AnalogueType_Init+0x67c>)
 80225a8:	2108      	movs	r1, #8
 80225aa:	4892      	ldr	r0, [pc, #584]	; (80227f4 <tos_AnalogueType_Init+0x680>)
 80225ac:	f008 f92a 	bl	802a804 <sniprintf>
       			   		 lv_label_set_text(stepsLbl, buffer);
 80225b0:	4b8d      	ldr	r3, [pc, #564]	; (80227e8 <tos_AnalogueType_Init+0x674>)
 80225b2:	681b      	ldr	r3, [r3, #0]
 80225b4:	498f      	ldr	r1, [pc, #572]	; (80227f4 <tos_AnalogueType_Init+0x680>)
 80225b6:	4618      	mov	r0, r3
 80225b8:	f7f9 fea4 	bl	801c304 <lv_label_set_text>
       			   		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -40, 40);
 80225bc:	4b8a      	ldr	r3, [pc, #552]	; (80227e8 <tos_AnalogueType_Init+0x674>)
 80225be:	6818      	ldr	r0, [r3, #0]
 80225c0:	2328      	movs	r3, #40	; 0x28
 80225c2:	9300      	str	r3, [sp, #0]
 80225c4:	f06f 0327 	mvn.w	r3, #39	; 0x27
 80225c8:	2200      	movs	r2, #0
 80225ca:	2100      	movs	r1, #0
 80225cc:	f7e6 fc50 	bl	8008e70 <lv_obj_align>

       			         stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 80225d0:	f7ff fd09 	bl	8021fe6 <lv_scr_act>
 80225d4:	4603      	mov	r3, r0
 80225d6:	2100      	movs	r1, #0
 80225d8:	4618      	mov	r0, r3
 80225da:	f7f9 fd61 	bl	801c0a0 <lv_label_create>
 80225de:	4602      	mov	r2, r0
 80225e0:	4b85      	ldr	r3, [pc, #532]	; (80227f8 <tos_AnalogueType_Init+0x684>)
 80225e2:	601a      	str	r2, [r3, #0]
       			   		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80225e4:	4b84      	ldr	r3, [pc, #528]	; (80227f8 <tos_AnalogueType_Init+0x684>)
 80225e6:	681b      	ldr	r3, [r3, #0]
 80225e8:	4a7b      	ldr	r2, [pc, #492]	; (80227d8 <tos_AnalogueType_Init+0x664>)
 80225ea:	2100      	movs	r1, #0
 80225ec:	4618      	mov	r0, r3
 80225ee:	f7ff fd05 	bl	8021ffc <lv_label_set_style>
       			   		 lv_label_set_text(stepsDescLbl, "steps");
 80225f2:	4b81      	ldr	r3, [pc, #516]	; (80227f8 <tos_AnalogueType_Init+0x684>)
 80225f4:	681b      	ldr	r3, [r3, #0]
 80225f6:	4981      	ldr	r1, [pc, #516]	; (80227fc <tos_AnalogueType_Init+0x688>)
 80225f8:	4618      	mov	r0, r3
 80225fa:	f7f9 fe83 	bl	801c304 <lv_label_set_text>
       			   		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -40, 55);
 80225fe:	4b7e      	ldr	r3, [pc, #504]	; (80227f8 <tos_AnalogueType_Init+0x684>)
 8022600:	6818      	ldr	r0, [r3, #0]
 8022602:	2337      	movs	r3, #55	; 0x37
 8022604:	9300      	str	r3, [sp, #0]
 8022606:	f06f 0327 	mvn.w	r3, #39	; 0x27
 802260a:	2200      	movs	r2, #0
 802260c:	2100      	movs	r1, #0
 802260e:	f7e6 fc2f 	bl	8008e70 <lv_obj_align>

       			   		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 8022612:	f7ff fce8 	bl	8021fe6 <lv_scr_act>
 8022616:	4603      	mov	r3, r0
 8022618:	2100      	movs	r1, #0
 802261a:	4618      	mov	r0, r3
 802261c:	f7f4 ff3e 	bl	801749c <lv_arc_create>
 8022620:	4602      	mov	r2, r0
 8022622:	4b77      	ldr	r3, [pc, #476]	; (8022800 <tos_AnalogueType_Init+0x68c>)
 8022624:	601a      	str	r2, [r3, #0]
       			   		  lv_obj_set_size(stepsArc, 65, 65);
 8022626:	4b76      	ldr	r3, [pc, #472]	; (8022800 <tos_AnalogueType_Init+0x68c>)
 8022628:	681b      	ldr	r3, [r3, #0]
 802262a:	2241      	movs	r2, #65	; 0x41
 802262c:	2141      	movs	r1, #65	; 0x41
 802262e:	4618      	mov	r0, r3
 8022630:	f7e6 fb7b 	bl	8008d2a <lv_obj_set_size>
       			   		  lv_arc_set_angles(stepsArc, 0, 360);
 8022634:	4b72      	ldr	r3, [pc, #456]	; (8022800 <tos_AnalogueType_Init+0x68c>)
 8022636:	681b      	ldr	r3, [r3, #0]
 8022638:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802263c:	2100      	movs	r1, #0
 802263e:	4618      	mov	r0, r3
 8022640:	f7f4 ffa8 	bl	8017594 <lv_arc_set_angles>
       			   		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8022644:	4b6e      	ldr	r3, [pc, #440]	; (8022800 <tos_AnalogueType_Init+0x68c>)
 8022646:	681b      	ldr	r3, [r3, #0]
 8022648:	4a61      	ldr	r2, [pc, #388]	; (80227d0 <tos_AnalogueType_Init+0x65c>)
 802264a:	2100      	movs	r1, #0
 802264c:	4618      	mov	r0, r3
 802264e:	f7f4 ffca 	bl	80175e6 <lv_arc_set_style>
       			   		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -40, 40);
 8022652:	4b6b      	ldr	r3, [pc, #428]	; (8022800 <tos_AnalogueType_Init+0x68c>)
 8022654:	6818      	ldr	r0, [r3, #0]
 8022656:	2328      	movs	r3, #40	; 0x28
 8022658:	9300      	str	r3, [sp, #0]
 802265a:	f06f 0327 	mvn.w	r3, #39	; 0x27
 802265e:	2200      	movs	r2, #0
 8022660:	2100      	movs	r1, #0
 8022662:	f7e6 fc05 	bl	8008e70 <lv_obj_align>

       			   		  //Kcal
       			   	static lv_style_t kCals_Style;
       			   		  lv_style_copy(&kCals_Style, &lv_style_plain);
 8022666:	4959      	ldr	r1, [pc, #356]	; (80227cc <tos_AnalogueType_Init+0x658>)
 8022668:	4866      	ldr	r0, [pc, #408]	; (8022804 <tos_AnalogueType_Init+0x690>)
 802266a:	f7e8 fe45 	bl	800b2f8 <lv_style_copy>
       			   		  kCals_Style.line.color = LV_COLOR_RED;
 802266e:	4a65      	ldr	r2, [pc, #404]	; (8022804 <tos_AnalogueType_Init+0x690>)
 8022670:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022674:	f36f 0302 	bfc	r3, #0, #3
 8022678:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802267c:	4a61      	ldr	r2, [pc, #388]	; (8022804 <tos_AnalogueType_Init+0x690>)
 802267e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022682:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8022686:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802268a:	4a5e      	ldr	r2, [pc, #376]	; (8022804 <tos_AnalogueType_Init+0x690>)
 802268c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022690:	f36f 0304 	bfc	r3, #0, #5
 8022694:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8022698:	4a5a      	ldr	r2, [pc, #360]	; (8022804 <tos_AnalogueType_Init+0x690>)
 802269a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802269e:	f36f 1347 	bfc	r3, #5, #3
 80226a2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       			   		  kCals_Style.line.width = 3;
 80226a6:	4b57      	ldr	r3, [pc, #348]	; (8022804 <tos_AnalogueType_Init+0x690>)
 80226a8:	2203      	movs	r2, #3
 80226aa:	86da      	strh	r2, [r3, #54]	; 0x36
       			   		  kCals_Style.text.color = LV_COLOR_RED;
 80226ac:	4a55      	ldr	r2, [pc, #340]	; (8022804 <tos_AnalogueType_Init+0x690>)
 80226ae:	f892 3020 	ldrb.w	r3, [r2, #32]
 80226b2:	f36f 0302 	bfc	r3, #0, #3
 80226b6:	f882 3020 	strb.w	r3, [r2, #32]
 80226ba:	4a52      	ldr	r2, [pc, #328]	; (8022804 <tos_AnalogueType_Init+0x690>)
 80226bc:	f892 3020 	ldrb.w	r3, [r2, #32]
 80226c0:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80226c4:	f882 3020 	strb.w	r3, [r2, #32]
 80226c8:	4a4e      	ldr	r2, [pc, #312]	; (8022804 <tos_AnalogueType_Init+0x690>)
 80226ca:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80226ce:	f36f 0304 	bfc	r3, #0, #5
 80226d2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80226d6:	4a4b      	ldr	r2, [pc, #300]	; (8022804 <tos_AnalogueType_Init+0x690>)
 80226d8:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80226dc:	f36f 1347 	bfc	r3, #5, #3
 80226e0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
       			   		  kCals_Style.text.font = &lv_font_roboto_22;
 80226e4:	4b47      	ldr	r3, [pc, #284]	; (8022804 <tos_AnalogueType_Init+0x690>)
 80226e6:	4a3b      	ldr	r2, [pc, #236]	; (80227d4 <tos_AnalogueType_Init+0x660>)
 80226e8:	625a      	str	r2, [r3, #36]	; 0x24

       			   		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 80226ea:	f7ff fc7c 	bl	8021fe6 <lv_scr_act>
 80226ee:	4603      	mov	r3, r0
 80226f0:	2100      	movs	r1, #0
 80226f2:	4618      	mov	r0, r3
 80226f4:	f7f9 fcd4 	bl	801c0a0 <lv_label_create>
 80226f8:	4602      	mov	r2, r0
 80226fa:	4b43      	ldr	r3, [pc, #268]	; (8022808 <tos_AnalogueType_Init+0x694>)
 80226fc:	601a      	str	r2, [r3, #0]
       			   		 lv_obj_set_width(kCalsLbl, 150);
 80226fe:	4b42      	ldr	r3, [pc, #264]	; (8022808 <tos_AnalogueType_Init+0x694>)
 8022700:	681b      	ldr	r3, [r3, #0]
 8022702:	2196      	movs	r1, #150	; 0x96
 8022704:	4618      	mov	r0, r3
 8022706:	f7e6 fb89 	bl	8008e1c <lv_obj_set_width>
       			   		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 802270a:	4b3f      	ldr	r3, [pc, #252]	; (8022808 <tos_AnalogueType_Init+0x694>)
 802270c:	681b      	ldr	r3, [r3, #0]
 802270e:	4a3d      	ldr	r2, [pc, #244]	; (8022804 <tos_AnalogueType_Init+0x690>)
 8022710:	2100      	movs	r1, #0
 8022712:	4618      	mov	r0, r3
 8022714:	f7ff fc72 	bl	8021ffc <lv_label_set_style>
       			   		 snprintf(buffer, 8, "%04d", kCals);
 8022718:	4b3c      	ldr	r3, [pc, #240]	; (802280c <tos_AnalogueType_Init+0x698>)
 802271a:	881b      	ldrh	r3, [r3, #0]
 802271c:	4a34      	ldr	r2, [pc, #208]	; (80227f0 <tos_AnalogueType_Init+0x67c>)
 802271e:	2108      	movs	r1, #8
 8022720:	4834      	ldr	r0, [pc, #208]	; (80227f4 <tos_AnalogueType_Init+0x680>)
 8022722:	f008 f86f 	bl	802a804 <sniprintf>
       			   		 lv_label_set_text(kCalsLbl, buffer);
 8022726:	4b38      	ldr	r3, [pc, #224]	; (8022808 <tos_AnalogueType_Init+0x694>)
 8022728:	681b      	ldr	r3, [r3, #0]
 802272a:	4932      	ldr	r1, [pc, #200]	; (80227f4 <tos_AnalogueType_Init+0x680>)
 802272c:	4618      	mov	r0, r3
 802272e:	f7f9 fde9 	bl	801c304 <lv_label_set_text>
       			   		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 40, 40);
 8022732:	4b35      	ldr	r3, [pc, #212]	; (8022808 <tos_AnalogueType_Init+0x694>)
 8022734:	6818      	ldr	r0, [r3, #0]
 8022736:	2328      	movs	r3, #40	; 0x28
 8022738:	9300      	str	r3, [sp, #0]
 802273a:	2328      	movs	r3, #40	; 0x28
 802273c:	2200      	movs	r2, #0
 802273e:	2100      	movs	r1, #0
 8022740:	f7e6 fb96 	bl	8008e70 <lv_obj_align>

       			   		 kCalsDescLbl = lv_label_create(lv_scr_act(), NULL);
 8022744:	f7ff fc4f 	bl	8021fe6 <lv_scr_act>
 8022748:	4603      	mov	r3, r0
 802274a:	2100      	movs	r1, #0
 802274c:	4618      	mov	r0, r3
 802274e:	f7f9 fca7 	bl	801c0a0 <lv_label_create>
 8022752:	4602      	mov	r2, r0
 8022754:	4b2e      	ldr	r3, [pc, #184]	; (8022810 <tos_AnalogueType_Init+0x69c>)
 8022756:	601a      	str	r2, [r3, #0]
       			   		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8022758:	4b2d      	ldr	r3, [pc, #180]	; (8022810 <tos_AnalogueType_Init+0x69c>)
 802275a:	681b      	ldr	r3, [r3, #0]
 802275c:	4a1e      	ldr	r2, [pc, #120]	; (80227d8 <tos_AnalogueType_Init+0x664>)
 802275e:	2100      	movs	r1, #0
 8022760:	4618      	mov	r0, r3
 8022762:	f7ff fc4b 	bl	8021ffc <lv_label_set_style>
       			   		 lv_label_set_text(kCalsDescLbl, "kCals");
 8022766:	4b2a      	ldr	r3, [pc, #168]	; (8022810 <tos_AnalogueType_Init+0x69c>)
 8022768:	681b      	ldr	r3, [r3, #0]
 802276a:	492a      	ldr	r1, [pc, #168]	; (8022814 <tos_AnalogueType_Init+0x6a0>)
 802276c:	4618      	mov	r0, r3
 802276e:	f7f9 fdc9 	bl	801c304 <lv_label_set_text>
       			   		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 40, 55);
 8022772:	4b27      	ldr	r3, [pc, #156]	; (8022810 <tos_AnalogueType_Init+0x69c>)
 8022774:	6818      	ldr	r0, [r3, #0]
 8022776:	2337      	movs	r3, #55	; 0x37
 8022778:	9300      	str	r3, [sp, #0]
 802277a:	2328      	movs	r3, #40	; 0x28
 802277c:	2200      	movs	r2, #0
 802277e:	2100      	movs	r1, #0
 8022780:	f7e6 fb76 	bl	8008e70 <lv_obj_align>

       			   		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 8022784:	f7ff fc2f 	bl	8021fe6 <lv_scr_act>
 8022788:	4603      	mov	r3, r0
 802278a:	2100      	movs	r1, #0
 802278c:	4618      	mov	r0, r3
 802278e:	f7f4 fe85 	bl	801749c <lv_arc_create>
 8022792:	4602      	mov	r2, r0
 8022794:	4b20      	ldr	r3, [pc, #128]	; (8022818 <tos_AnalogueType_Init+0x6a4>)
 8022796:	601a      	str	r2, [r3, #0]
       			   		  lv_obj_set_size(kCalsArc, 65, 65);
 8022798:	4b1f      	ldr	r3, [pc, #124]	; (8022818 <tos_AnalogueType_Init+0x6a4>)
 802279a:	681b      	ldr	r3, [r3, #0]
 802279c:	2241      	movs	r2, #65	; 0x41
 802279e:	2141      	movs	r1, #65	; 0x41
 80227a0:	4618      	mov	r0, r3
 80227a2:	f7e6 fac2 	bl	8008d2a <lv_obj_set_size>
       			   		  lv_arc_set_angles(kCalsArc, 0, 360);
 80227a6:	4b1c      	ldr	r3, [pc, #112]	; (8022818 <tos_AnalogueType_Init+0x6a4>)
 80227a8:	681b      	ldr	r3, [r3, #0]
 80227aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80227ae:	2100      	movs	r1, #0
 80227b0:	4618      	mov	r0, r3
 80227b2:	f7f4 feef 	bl	8017594 <lv_arc_set_angles>
       			   		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 80227b6:	4b18      	ldr	r3, [pc, #96]	; (8022818 <tos_AnalogueType_Init+0x6a4>)
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	4a12      	ldr	r2, [pc, #72]	; (8022804 <tos_AnalogueType_Init+0x690>)
 80227bc:	2100      	movs	r1, #0
 80227be:	4618      	mov	r0, r3
 80227c0:	f7f4 ff11 	bl	80175e6 <lv_arc_set_style>
       			   		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 40, 40);
 80227c4:	4b14      	ldr	r3, [pc, #80]	; (8022818 <tos_AnalogueType_Init+0x6a4>)
 80227c6:	6818      	ldr	r0, [r3, #0]
 80227c8:	e028      	b.n	802281c <tos_AnalogueType_Init+0x6a8>
 80227ca:	bf00      	nop
 80227cc:	2001ba10 	.word	0x2001ba10
 80227d0:	2001a86c 	.word	0x2001a86c
 80227d4:	200017c4 	.word	0x200017c4
 80227d8:	2001a8a8 	.word	0x2001a8a8
 80227dc:	200026d0 	.word	0x200026d0
 80227e0:	0802c9e8 	.word	0x0802c9e8
 80227e4:	0802c9a8 	.word	0x0802c9a8
 80227e8:	2001bc30 	.word	0x2001bc30
 80227ec:	2001bc0c 	.word	0x2001bc0c
 80227f0:	0802c9b4 	.word	0x0802c9b4
 80227f4:	2001bc1c 	.word	0x2001bc1c
 80227f8:	2001bbc4 	.word	0x2001bbc4
 80227fc:	0802c9bc 	.word	0x0802c9bc
 8022800:	2001bc14 	.word	0x2001bc14
 8022804:	2001a8e4 	.word	0x2001a8e4
 8022808:	2001bc8c 	.word	0x2001bc8c
 802280c:	2001bbb2 	.word	0x2001bbb2
 8022810:	2001bc78 	.word	0x2001bc78
 8022814:	0802c9c4 	.word	0x0802c9c4
 8022818:	2001bc94 	.word	0x2001bc94
 802281c:	2328      	movs	r3, #40	; 0x28
 802281e:	9300      	str	r3, [sp, #0]
 8022820:	2328      	movs	r3, #40	; 0x28
 8022822:	2200      	movs	r2, #0
 8022824:	2100      	movs	r1, #0
 8022826:	f7e6 fb23 	bl	8008e70 <lv_obj_align>

       			       //Digital Date
       			   		    digitalDate = lv_label_create(lv_scr_act(), NULL);
 802282a:	f7ff fbdc 	bl	8021fe6 <lv_scr_act>
 802282e:	4603      	mov	r3, r0
 8022830:	2100      	movs	r1, #0
 8022832:	4618      	mov	r0, r3
 8022834:	f7f9 fc34 	bl	801c0a0 <lv_label_create>
 8022838:	4602      	mov	r2, r0
 802283a:	4b2b      	ldr	r3, [pc, #172]	; (80228e8 <tos_AnalogueType_Init+0x774>)
 802283c:	601a      	str	r2, [r3, #0]
       			   		    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 802283e:	4b2a      	ldr	r3, [pc, #168]	; (80228e8 <tos_AnalogueType_Init+0x774>)
 8022840:	681b      	ldr	r3, [r3, #0]
 8022842:	4a2a      	ldr	r2, [pc, #168]	; (80228ec <tos_AnalogueType_Init+0x778>)
 8022844:	2100      	movs	r1, #0
 8022846:	4618      	mov	r0, r3
 8022848:	f7ff fbd8 	bl	8021ffc <lv_label_set_style>
       			     	    snprintf(buffer, 9, "%02d:%02d:%04d", date,month,year);
 802284c:	4b28      	ldr	r3, [pc, #160]	; (80228f0 <tos_AnalogueType_Init+0x77c>)
 802284e:	781b      	ldrb	r3, [r3, #0]
 8022850:	4619      	mov	r1, r3
 8022852:	4b28      	ldr	r3, [pc, #160]	; (80228f4 <tos_AnalogueType_Init+0x780>)
 8022854:	781b      	ldrb	r3, [r3, #0]
 8022856:	461a      	mov	r2, r3
 8022858:	4b27      	ldr	r3, [pc, #156]	; (80228f8 <tos_AnalogueType_Init+0x784>)
 802285a:	881b      	ldrh	r3, [r3, #0]
 802285c:	9301      	str	r3, [sp, #4]
 802285e:	9200      	str	r2, [sp, #0]
 8022860:	460b      	mov	r3, r1
 8022862:	4a26      	ldr	r2, [pc, #152]	; (80228fc <tos_AnalogueType_Init+0x788>)
 8022864:	2109      	movs	r1, #9
 8022866:	4826      	ldr	r0, [pc, #152]	; (8022900 <tos_AnalogueType_Init+0x78c>)
 8022868:	f007 ffcc 	bl	802a804 <sniprintf>
       			 		    lv_label_set_text(digitalDate, buffer);
 802286c:	4b1e      	ldr	r3, [pc, #120]	; (80228e8 <tos_AnalogueType_Init+0x774>)
 802286e:	681b      	ldr	r3, [r3, #0]
 8022870:	4923      	ldr	r1, [pc, #140]	; (8022900 <tos_AnalogueType_Init+0x78c>)
 8022872:	4618      	mov	r0, r3
 8022874:	f7f9 fd46 	bl	801c304 <lv_label_set_text>
       			   		    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 8022878:	4b1b      	ldr	r3, [pc, #108]	; (80228e8 <tos_AnalogueType_Init+0x774>)
 802287a:	6818      	ldr	r0, [r3, #0]
 802287c:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8022880:	9300      	str	r3, [sp, #0]
 8022882:	2300      	movs	r3, #0
 8022884:	2200      	movs	r2, #0
 8022886:	2100      	movs	r1, #0
 8022888:	f7e6 faf2 	bl	8008e70 <lv_obj_align>

       			   		    //Week Day
       			   		    weekDay = lv_label_create(lv_scr_act(), NULL);
 802288c:	f7ff fbab 	bl	8021fe6 <lv_scr_act>
 8022890:	4603      	mov	r3, r0
 8022892:	2100      	movs	r1, #0
 8022894:	4618      	mov	r0, r3
 8022896:	f7f9 fc03 	bl	801c0a0 <lv_label_create>
 802289a:	4602      	mov	r2, r0
 802289c:	4b19      	ldr	r3, [pc, #100]	; (8022904 <tos_AnalogueType_Init+0x790>)
 802289e:	601a      	str	r2, [r3, #0]
       			   		    lv_obj_set_width(weekDay, 150);
 80228a0:	4b18      	ldr	r3, [pc, #96]	; (8022904 <tos_AnalogueType_Init+0x790>)
 80228a2:	681b      	ldr	r3, [r3, #0]
 80228a4:	2196      	movs	r1, #150	; 0x96
 80228a6:	4618      	mov	r0, r3
 80228a8:	f7e6 fab8 	bl	8008e1c <lv_obj_set_width>
       			   		    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &weekD_style);
 80228ac:	4b15      	ldr	r3, [pc, #84]	; (8022904 <tos_AnalogueType_Init+0x790>)
 80228ae:	681b      	ldr	r3, [r3, #0]
 80228b0:	4a15      	ldr	r2, [pc, #84]	; (8022908 <tos_AnalogueType_Init+0x794>)
 80228b2:	2100      	movs	r1, #0
 80228b4:	4618      	mov	r0, r3
 80228b6:	f7ff fba1 	bl	8021ffc <lv_label_set_style>
       			   		    lv_label_set_text(weekDay,weekDayStr);
 80228ba:	4b12      	ldr	r3, [pc, #72]	; (8022904 <tos_AnalogueType_Init+0x790>)
 80228bc:	681a      	ldr	r2, [r3, #0]
 80228be:	4b13      	ldr	r3, [pc, #76]	; (802290c <tos_AnalogueType_Init+0x798>)
 80228c0:	681b      	ldr	r3, [r3, #0]
 80228c2:	4619      	mov	r1, r3
 80228c4:	4610      	mov	r0, r2
 80228c6:	f7f9 fd1d 	bl	801c304 <lv_label_set_text>
       			   		    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 80228ca:	4b0e      	ldr	r3, [pc, #56]	; (8022904 <tos_AnalogueType_Init+0x790>)
 80228cc:	6818      	ldr	r0, [r3, #0]
 80228ce:	f06f 0309 	mvn.w	r3, #9
 80228d2:	9300      	str	r3, [sp, #0]
 80228d4:	2300      	movs	r3, #0
 80228d6:	2200      	movs	r2, #0
 80228d8:	2100      	movs	r1, #0
 80228da:	f7e6 fac9 	bl	8008e70 <lv_obj_align>
}
 80228de:	bf00      	nop
 80228e0:	3708      	adds	r7, #8
 80228e2:	46bd      	mov	sp, r7
 80228e4:	bd80      	pop	{r7, pc}
 80228e6:	bf00      	nop
 80228e8:	2001bbb4 	.word	0x2001bbb4
 80228ec:	2001a704 	.word	0x2001a704
 80228f0:	2001c160 	.word	0x2001c160
 80228f4:	2001bbc0 	.word	0x2001bbc0
 80228f8:	2001bc82 	.word	0x2001bc82
 80228fc:	0802c9cc 	.word	0x0802c9cc
 8022900:	2001bc1c 	.word	0x2001bc1c
 8022904:	2001bbac 	.word	0x2001bbac
 8022908:	2001a740 	.word	0x2001a740
 802290c:	2001bc10 	.word	0x2001bc10

08022910 <tos_DigitalType_Init>:
void dType1_Clock_Init(bool theme);
void dType2_Clock_Init(bool theme);

/*
*/
void tos_DigitalType_Init(uint8_t clockType,bool theme) {
 8022910:	b580      	push	{r7, lr}
 8022912:	b084      	sub	sp, #16
 8022914:	af02      	add	r7, sp, #8
 8022916:	4603      	mov	r3, r0
 8022918:	460a      	mov	r2, r1
 802291a:	71fb      	strb	r3, [r7, #7]
 802291c:	4613      	mov	r3, r2
 802291e:	71bb      	strb	r3, [r7, #6]
	switch(clockType){
 8022920:	79fb      	ldrb	r3, [r7, #7]
 8022922:	2b00      	cmp	r3, #0
 8022924:	d002      	beq.n	802292c <tos_DigitalType_Init+0x1c>
 8022926:	2b01      	cmp	r3, #1
 8022928:	d005      	beq.n	8022936 <tos_DigitalType_Init+0x26>
 802292a:	e009      	b.n	8022940 <tos_DigitalType_Init+0x30>
	case 0: dType1_Clock_Init(theme); break;
 802292c:	79bb      	ldrb	r3, [r7, #6]
 802292e:	4618      	mov	r0, r3
 8022930:	f000 f886 	bl	8022a40 <dType1_Clock_Init>
 8022934:	e004      	b.n	8022940 <tos_DigitalType_Init+0x30>
	case 1: dType2_Clock_Init(theme); break;
 8022936:	79bb      	ldrb	r3, [r7, #6]
 8022938:	4618      	mov	r0, r3
 802293a:	f000 fbb1 	bl	80230a0 <dType2_Clock_Init>
 802293e:	bf00      	nop
	}
	//Battery
	batteryLbl= lv_label_create(lv_scr_act(), NULL);
 8022940:	f7ff fb51 	bl	8021fe6 <lv_scr_act>
 8022944:	4603      	mov	r3, r0
 8022946:	2100      	movs	r1, #0
 8022948:	4618      	mov	r0, r3
 802294a:	f7f9 fba9 	bl	801c0a0 <lv_label_create>
 802294e:	4602      	mov	r2, r0
 8022950:	4b33      	ldr	r3, [pc, #204]	; (8022a20 <tos_DigitalType_Init+0x110>)
 8022952:	601a      	str	r2, [r3, #0]
	lv_style_copy(&battery_style, &lv_style_plain);
 8022954:	4933      	ldr	r1, [pc, #204]	; (8022a24 <tos_DigitalType_Init+0x114>)
 8022956:	4834      	ldr	r0, [pc, #208]	; (8022a28 <tos_DigitalType_Init+0x118>)
 8022958:	f7e8 fcce 	bl	800b2f8 <lv_style_copy>
	battery_style.text.color = LV_COLOR_GREEN;
 802295c:	4a32      	ldr	r2, [pc, #200]	; (8022a28 <tos_DigitalType_Init+0x118>)
 802295e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022962:	2104      	movs	r1, #4
 8022964:	f361 0302 	bfi	r3, r1, #0, #3
 8022968:	f882 3020 	strb.w	r3, [r2, #32]
 802296c:	4a2e      	ldr	r2, [pc, #184]	; (8022a28 <tos_DigitalType_Init+0x118>)
 802296e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022972:	f36f 03c7 	bfc	r3, #3, #5
 8022976:	f882 3020 	strb.w	r3, [r2, #32]
 802297a:	4a2b      	ldr	r2, [pc, #172]	; (8022a28 <tos_DigitalType_Init+0x118>)
 802297c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022980:	f36f 0304 	bfc	r3, #0, #5
 8022984:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8022988:	4a27      	ldr	r2, [pc, #156]	; (8022a28 <tos_DigitalType_Init+0x118>)
 802298a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 802298e:	f36f 1347 	bfc	r3, #5, #3
 8022992:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	lv_label_set_style(batteryLbl, LV_LABEL_STYLE_MAIN, &battery_style);
 8022996:	4b22      	ldr	r3, [pc, #136]	; (8022a20 <tos_DigitalType_Init+0x110>)
 8022998:	681b      	ldr	r3, [r3, #0]
 802299a:	4a23      	ldr	r2, [pc, #140]	; (8022a28 <tos_DigitalType_Init+0x118>)
 802299c:	2100      	movs	r1, #0
 802299e:	4618      	mov	r0, r3
 80229a0:	f7ff fb2c 	bl	8021ffc <lv_label_set_style>
	lv_label_set_text(batteryLbl, LV_SYMBOL_BATTERY_FULL);
 80229a4:	4b1e      	ldr	r3, [pc, #120]	; (8022a20 <tos_DigitalType_Init+0x110>)
 80229a6:	681b      	ldr	r3, [r3, #0]
 80229a8:	4920      	ldr	r1, [pc, #128]	; (8022a2c <tos_DigitalType_Init+0x11c>)
 80229aa:	4618      	mov	r0, r3
 80229ac:	f7f9 fcaa 	bl	801c304 <lv_label_set_text>
	lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 80229b0:	4b1b      	ldr	r3, [pc, #108]	; (8022a20 <tos_DigitalType_Init+0x110>)
 80229b2:	6818      	ldr	r0, [r3, #0]
 80229b4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80229b8:	9300      	str	r3, [sp, #0]
 80229ba:	2364      	movs	r3, #100	; 0x64
 80229bc:	2200      	movs	r2, #0
 80229be:	2100      	movs	r1, #0
 80229c0:	f7e6 fa56 	bl	8008e70 <lv_obj_align>

	//Bluetooth
	bluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 80229c4:	f7ff fb0f 	bl	8021fe6 <lv_scr_act>
 80229c8:	4603      	mov	r3, r0
 80229ca:	2100      	movs	r1, #0
 80229cc:	4618      	mov	r0, r3
 80229ce:	f7f9 fb67 	bl	801c0a0 <lv_label_create>
 80229d2:	4602      	mov	r2, r0
 80229d4:	4b16      	ldr	r3, [pc, #88]	; (8022a30 <tos_DigitalType_Init+0x120>)
 80229d6:	601a      	str	r2, [r3, #0]
    lv_style_copy(&bluetooth_style, &lv_style_plain);
 80229d8:	4912      	ldr	r1, [pc, #72]	; (8022a24 <tos_DigitalType_Init+0x114>)
 80229da:	4816      	ldr	r0, [pc, #88]	; (8022a34 <tos_DigitalType_Init+0x124>)
 80229dc:	f7e8 fc8c 	bl	800b2f8 <lv_style_copy>
	bluetooth_style.text.color = LV_COLOR_WHITE;
 80229e0:	4a14      	ldr	r2, [pc, #80]	; (8022a34 <tos_DigitalType_Init+0x124>)
 80229e2:	4b15      	ldr	r3, [pc, #84]	; (8022a38 <tos_DigitalType_Init+0x128>)
 80229e4:	881b      	ldrh	r3, [r3, #0]
 80229e6:	8413      	strh	r3, [r2, #32]
	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &bluetooth_style);
 80229e8:	4b11      	ldr	r3, [pc, #68]	; (8022a30 <tos_DigitalType_Init+0x120>)
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	4a11      	ldr	r2, [pc, #68]	; (8022a34 <tos_DigitalType_Init+0x124>)
 80229ee:	2100      	movs	r1, #0
 80229f0:	4618      	mov	r0, r3
 80229f2:	f7ff fb03 	bl	8021ffc <lv_label_set_style>
	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 80229f6:	4b0e      	ldr	r3, [pc, #56]	; (8022a30 <tos_DigitalType_Init+0x120>)
 80229f8:	681b      	ldr	r3, [r3, #0]
 80229fa:	4910      	ldr	r1, [pc, #64]	; (8022a3c <tos_DigitalType_Init+0x12c>)
 80229fc:	4618      	mov	r0, r3
 80229fe:	f7f9 fc81 	bl	801c304 <lv_label_set_text>
	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8022a02:	4b0b      	ldr	r3, [pc, #44]	; (8022a30 <tos_DigitalType_Init+0x120>)
 8022a04:	6818      	ldr	r0, [r3, #0]
 8022a06:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8022a0a:	9300      	str	r3, [sp, #0]
 8022a0c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8022a10:	2200      	movs	r2, #0
 8022a12:	2100      	movs	r1, #0
 8022a14:	f7e6 fa2c 	bl	8008e70 <lv_obj_align>
}
 8022a18:	bf00      	nop
 8022a1a:	3708      	adds	r7, #8
 8022a1c:	46bd      	mov	sp, r7
 8022a1e:	bd80      	pop	{r7, pc}
 8022a20:	2001bc7c 	.word	0x2001bc7c
 8022a24:	2001ba10 	.word	0x2001ba10
 8022a28:	2001bc34 	.word	0x2001bc34
 8022a2c:	0802c9ac 	.word	0x0802c9ac
 8022a30:	2001bc18 	.word	0x2001bc18
 8022a34:	2001bbcc 	.word	0x2001bbcc
 8022a38:	0802c9a8 	.word	0x0802c9a8
 8022a3c:	0802c9b0 	.word	0x0802c9b0

08022a40 <dType1_Clock_Init>:



/*Analogue and digital Type*/
void dType1_Clock_Init(bool theme) {
 8022a40:	b580      	push	{r7, lr}
 8022a42:	b084      	sub	sp, #16
 8022a44:	af02      	add	r7, sp, #8
 8022a46:	4603      	mov	r3, r0
 8022a48:	71fb      	strb	r3, [r7, #7]

	  //Digital Clock
	static lv_style_t dClock_style,dDate_style;
		lv_style_copy(&dClock_style, &lv_style_plain);
 8022a4a:	49bd      	ldr	r1, [pc, #756]	; (8022d40 <dType1_Clock_Init+0x300>)
 8022a4c:	48bd      	ldr	r0, [pc, #756]	; (8022d44 <dType1_Clock_Init+0x304>)
 8022a4e:	f7e8 fc53 	bl	800b2f8 <lv_style_copy>
	    dClock_style.text.font =&lv_font_roboto_22;
 8022a52:	4bbc      	ldr	r3, [pc, #752]	; (8022d44 <dType1_Clock_Init+0x304>)
 8022a54:	4abc      	ldr	r2, [pc, #752]	; (8022d48 <dType1_Clock_Init+0x308>)
 8022a56:	625a      	str	r2, [r3, #36]	; 0x24
	    lv_style_copy(&dDate_style, &lv_style_plain);
 8022a58:	49b9      	ldr	r1, [pc, #740]	; (8022d40 <dType1_Clock_Init+0x300>)
 8022a5a:	48bc      	ldr	r0, [pc, #752]	; (8022d4c <dType1_Clock_Init+0x30c>)
 8022a5c:	f7e8 fc4c 	bl	800b2f8 <lv_style_copy>
	    dDate_style.text.font =&lv_font_roboto_16;
 8022a60:	4bba      	ldr	r3, [pc, #744]	; (8022d4c <dType1_Clock_Init+0x30c>)
 8022a62:	4abb      	ldr	r2, [pc, #748]	; (8022d50 <dType1_Clock_Init+0x310>)
 8022a64:	625a      	str	r2, [r3, #36]	; 0x24
	    if(theme){
 8022a66:	79fb      	ldrb	r3, [r7, #7]
 8022a68:	2b00      	cmp	r3, #0
 8022a6a:	d007      	beq.n	8022a7c <dType1_Clock_Init+0x3c>
	    	dClock_style.text.color = LV_COLOR_WHITE;
 8022a6c:	4ab5      	ldr	r2, [pc, #724]	; (8022d44 <dType1_Clock_Init+0x304>)
 8022a6e:	4bb9      	ldr	r3, [pc, #740]	; (8022d54 <dType1_Clock_Init+0x314>)
 8022a70:	881b      	ldrh	r3, [r3, #0]
 8022a72:	8413      	strh	r3, [r2, #32]
	    	dDate_style.text.color = LV_COLOR_WHITE;
 8022a74:	4ab5      	ldr	r2, [pc, #724]	; (8022d4c <dType1_Clock_Init+0x30c>)
 8022a76:	4bb7      	ldr	r3, [pc, #732]	; (8022d54 <dType1_Clock_Init+0x314>)
 8022a78:	881b      	ldrh	r3, [r3, #0]
 8022a7a:	8413      	strh	r3, [r2, #32]
	    }

	    digitalClock = lv_label_create(lv_scr_act(), NULL);
 8022a7c:	f7ff fab3 	bl	8021fe6 <lv_scr_act>
 8022a80:	4603      	mov	r3, r0
 8022a82:	2100      	movs	r1, #0
 8022a84:	4618      	mov	r0, r3
 8022a86:	f7f9 fb0b 	bl	801c0a0 <lv_label_create>
 8022a8a:	4602      	mov	r2, r0
 8022a8c:	4bb2      	ldr	r3, [pc, #712]	; (8022d58 <dType1_Clock_Init+0x318>)
 8022a8e:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(digitalClock, 150);
 8022a90:	4bb1      	ldr	r3, [pc, #708]	; (8022d58 <dType1_Clock_Init+0x318>)
 8022a92:	681b      	ldr	r3, [r3, #0]
 8022a94:	2196      	movs	r1, #150	; 0x96
 8022a96:	4618      	mov	r0, r3
 8022a98:	f7e6 f9c0 	bl	8008e1c <lv_obj_set_width>
	    lv_label_set_style(digitalClock, LV_LABEL_STYLE_MAIN, &dClock_style);
 8022a9c:	4bae      	ldr	r3, [pc, #696]	; (8022d58 <dType1_Clock_Init+0x318>)
 8022a9e:	681b      	ldr	r3, [r3, #0]
 8022aa0:	4aa8      	ldr	r2, [pc, #672]	; (8022d44 <dType1_Clock_Init+0x304>)
 8022aa2:	2100      	movs	r1, #0
 8022aa4:	4618      	mov	r0, r3
 8022aa6:	f7ff faa9 	bl	8021ffc <lv_label_set_style>
	    snprintf(buffer, 9, "%02d:%02d:%02d", hours,minutes,seconds);
 8022aaa:	4bac      	ldr	r3, [pc, #688]	; (8022d5c <dType1_Clock_Init+0x31c>)
 8022aac:	781b      	ldrb	r3, [r3, #0]
 8022aae:	4619      	mov	r1, r3
 8022ab0:	4bab      	ldr	r3, [pc, #684]	; (8022d60 <dType1_Clock_Init+0x320>)
 8022ab2:	781b      	ldrb	r3, [r3, #0]
 8022ab4:	461a      	mov	r2, r3
 8022ab6:	4bab      	ldr	r3, [pc, #684]	; (8022d64 <dType1_Clock_Init+0x324>)
 8022ab8:	781b      	ldrb	r3, [r3, #0]
 8022aba:	9301      	str	r3, [sp, #4]
 8022abc:	9200      	str	r2, [sp, #0]
 8022abe:	460b      	mov	r3, r1
 8022ac0:	4aa9      	ldr	r2, [pc, #676]	; (8022d68 <dType1_Clock_Init+0x328>)
 8022ac2:	2109      	movs	r1, #9
 8022ac4:	48a9      	ldr	r0, [pc, #676]	; (8022d6c <dType1_Clock_Init+0x32c>)
 8022ac6:	f007 fe9d 	bl	802a804 <sniprintf>
	    lv_label_set_text(digitalClock, buffer);
 8022aca:	4ba3      	ldr	r3, [pc, #652]	; (8022d58 <dType1_Clock_Init+0x318>)
 8022acc:	681b      	ldr	r3, [r3, #0]
 8022ace:	49a7      	ldr	r1, [pc, #668]	; (8022d6c <dType1_Clock_Init+0x32c>)
 8022ad0:	4618      	mov	r0, r3
 8022ad2:	f7f9 fc17 	bl	801c304 <lv_label_set_text>
	    lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 8022ad6:	4ba0      	ldr	r3, [pc, #640]	; (8022d58 <dType1_Clock_Init+0x318>)
 8022ad8:	6818      	ldr	r0, [r3, #0]
 8022ada:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8022ade:	9300      	str	r3, [sp, #0]
 8022ae0:	2300      	movs	r3, #0
 8022ae2:	2200      	movs	r2, #0
 8022ae4:	2100      	movs	r1, #0
 8022ae6:	f7e6 f9c3 	bl	8008e70 <lv_obj_align>

	    //Digital Date
	    digitalDate = lv_label_create(lv_scr_act(), NULL);
 8022aea:	f7ff fa7c 	bl	8021fe6 <lv_scr_act>
 8022aee:	4603      	mov	r3, r0
 8022af0:	2100      	movs	r1, #0
 8022af2:	4618      	mov	r0, r3
 8022af4:	f7f9 fad4 	bl	801c0a0 <lv_label_create>
 8022af8:	4602      	mov	r2, r0
 8022afa:	4b9d      	ldr	r3, [pc, #628]	; (8022d70 <dType1_Clock_Init+0x330>)
 8022afc:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(digitalDate, 150);
 8022afe:	4b9c      	ldr	r3, [pc, #624]	; (8022d70 <dType1_Clock_Init+0x330>)
 8022b00:	681b      	ldr	r3, [r3, #0]
 8022b02:	2196      	movs	r1, #150	; 0x96
 8022b04:	4618      	mov	r0, r3
 8022b06:	f7e6 f989 	bl	8008e1c <lv_obj_set_width>
	    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 8022b0a:	4b99      	ldr	r3, [pc, #612]	; (8022d70 <dType1_Clock_Init+0x330>)
 8022b0c:	681b      	ldr	r3, [r3, #0]
 8022b0e:	4a8f      	ldr	r2, [pc, #572]	; (8022d4c <dType1_Clock_Init+0x30c>)
 8022b10:	2100      	movs	r1, #0
 8022b12:	4618      	mov	r0, r3
 8022b14:	f7ff fa72 	bl	8021ffc <lv_label_set_style>
    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 8022b18:	4b96      	ldr	r3, [pc, #600]	; (8022d74 <dType1_Clock_Init+0x334>)
 8022b1a:	781b      	ldrb	r3, [r3, #0]
 8022b1c:	4619      	mov	r1, r3
 8022b1e:	4b96      	ldr	r3, [pc, #600]	; (8022d78 <dType1_Clock_Init+0x338>)
 8022b20:	781b      	ldrb	r3, [r3, #0]
 8022b22:	461a      	mov	r2, r3
 8022b24:	4b95      	ldr	r3, [pc, #596]	; (8022d7c <dType1_Clock_Init+0x33c>)
 8022b26:	881b      	ldrh	r3, [r3, #0]
 8022b28:	9301      	str	r3, [sp, #4]
 8022b2a:	9200      	str	r2, [sp, #0]
 8022b2c:	460b      	mov	r3, r1
 8022b2e:	4a94      	ldr	r2, [pc, #592]	; (8022d80 <dType1_Clock_Init+0x340>)
 8022b30:	2110      	movs	r1, #16
 8022b32:	488e      	ldr	r0, [pc, #568]	; (8022d6c <dType1_Clock_Init+0x32c>)
 8022b34:	f007 fe66 	bl	802a804 <sniprintf>
		lv_label_set_text(digitalDate, buffer);
 8022b38:	4b8d      	ldr	r3, [pc, #564]	; (8022d70 <dType1_Clock_Init+0x330>)
 8022b3a:	681b      	ldr	r3, [r3, #0]
 8022b3c:	498b      	ldr	r1, [pc, #556]	; (8022d6c <dType1_Clock_Init+0x32c>)
 8022b3e:	4618      	mov	r0, r3
 8022b40:	f7f9 fbe0 	bl	801c304 <lv_label_set_text>
	    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -55);
 8022b44:	4b8a      	ldr	r3, [pc, #552]	; (8022d70 <dType1_Clock_Init+0x330>)
 8022b46:	6818      	ldr	r0, [r3, #0]
 8022b48:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8022b4c:	9300      	str	r3, [sp, #0]
 8022b4e:	2300      	movs	r3, #0
 8022b50:	2200      	movs	r2, #0
 8022b52:	2100      	movs	r1, #0
 8022b54:	f7e6 f98c 	bl	8008e70 <lv_obj_align>

	    //Week Day
	    weekDay = lv_label_create(lv_scr_act(), NULL);
 8022b58:	f7ff fa45 	bl	8021fe6 <lv_scr_act>
 8022b5c:	4603      	mov	r3, r0
 8022b5e:	2100      	movs	r1, #0
 8022b60:	4618      	mov	r0, r3
 8022b62:	f7f9 fa9d 	bl	801c0a0 <lv_label_create>
 8022b66:	4602      	mov	r2, r0
 8022b68:	4b86      	ldr	r3, [pc, #536]	; (8022d84 <dType1_Clock_Init+0x344>)
 8022b6a:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(weekDay, 150);
 8022b6c:	4b85      	ldr	r3, [pc, #532]	; (8022d84 <dType1_Clock_Init+0x344>)
 8022b6e:	681b      	ldr	r3, [r3, #0]
 8022b70:	2196      	movs	r1, #150	; 0x96
 8022b72:	4618      	mov	r0, r3
 8022b74:	f7e6 f952 	bl	8008e1c <lv_obj_set_width>
	    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &dClock_style);
 8022b78:	4b82      	ldr	r3, [pc, #520]	; (8022d84 <dType1_Clock_Init+0x344>)
 8022b7a:	681b      	ldr	r3, [r3, #0]
 8022b7c:	4a71      	ldr	r2, [pc, #452]	; (8022d44 <dType1_Clock_Init+0x304>)
 8022b7e:	2100      	movs	r1, #0
 8022b80:	4618      	mov	r0, r3
 8022b82:	f7ff fa3b 	bl	8021ffc <lv_label_set_style>
	    lv_label_set_text(weekDay,weekDayStr);
 8022b86:	4b7f      	ldr	r3, [pc, #508]	; (8022d84 <dType1_Clock_Init+0x344>)
 8022b88:	681a      	ldr	r2, [r3, #0]
 8022b8a:	4b7f      	ldr	r3, [pc, #508]	; (8022d88 <dType1_Clock_Init+0x348>)
 8022b8c:	681b      	ldr	r3, [r3, #0]
 8022b8e:	4619      	mov	r1, r3
 8022b90:	4610      	mov	r0, r2
 8022b92:	f7f9 fbb7 	bl	801c304 <lv_label_set_text>
	    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -35);
 8022b96:	4b7b      	ldr	r3, [pc, #492]	; (8022d84 <dType1_Clock_Init+0x344>)
 8022b98:	6818      	ldr	r0, [r3, #0]
 8022b9a:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8022b9e:	9300      	str	r3, [sp, #0]
 8022ba0:	2300      	movs	r3, #0
 8022ba2:	2200      	movs	r2, #0
 8022ba4:	2100      	movs	r1, #0
 8022ba6:	f7e6 f963 	bl	8008e70 <lv_obj_align>

	  //Analog
	  //Hours
	    static lv_style_t hours_Style;
	  lv_style_copy(&hours_Style, &lv_style_plain);
 8022baa:	4965      	ldr	r1, [pc, #404]	; (8022d40 <dType1_Clock_Init+0x300>)
 8022bac:	4877      	ldr	r0, [pc, #476]	; (8022d8c <dType1_Clock_Init+0x34c>)
 8022bae:	f7e8 fba3 	bl	800b2f8 <lv_style_copy>
	  hours_Style.line.color = LV_COLOR_RED;
 8022bb2:	4a76      	ldr	r2, [pc, #472]	; (8022d8c <dType1_Clock_Init+0x34c>)
 8022bb4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022bb8:	f36f 0302 	bfc	r3, #0, #3
 8022bbc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022bc0:	4a72      	ldr	r2, [pc, #456]	; (8022d8c <dType1_Clock_Init+0x34c>)
 8022bc2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022bc6:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8022bca:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022bce:	4a6f      	ldr	r2, [pc, #444]	; (8022d8c <dType1_Clock_Init+0x34c>)
 8022bd0:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022bd4:	f36f 0304 	bfc	r3, #0, #5
 8022bd8:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8022bdc:	4a6b      	ldr	r2, [pc, #428]	; (8022d8c <dType1_Clock_Init+0x34c>)
 8022bde:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022be2:	f36f 1347 	bfc	r3, #5, #3
 8022be6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	  hours_Style.line.width = 6;
 8022bea:	4b68      	ldr	r3, [pc, #416]	; (8022d8c <dType1_Clock_Init+0x34c>)
 8022bec:	2206      	movs	r2, #6
 8022bee:	86da      	strh	r2, [r3, #54]	; 0x36

	  hoursArc = lv_arc_create(lv_scr_act(), NULL);
 8022bf0:	f7ff f9f9 	bl	8021fe6 <lv_scr_act>
 8022bf4:	4603      	mov	r3, r0
 8022bf6:	2100      	movs	r1, #0
 8022bf8:	4618      	mov	r0, r3
 8022bfa:	f7f4 fc4f 	bl	801749c <lv_arc_create>
 8022bfe:	4602      	mov	r2, r0
 8022c00:	4b63      	ldr	r3, [pc, #396]	; (8022d90 <dType1_Clock_Init+0x350>)
 8022c02:	601a      	str	r2, [r3, #0]
	  lv_obj_set_size(hoursArc, 215, 215);
 8022c04:	4b62      	ldr	r3, [pc, #392]	; (8022d90 <dType1_Clock_Init+0x350>)
 8022c06:	681b      	ldr	r3, [r3, #0]
 8022c08:	22d7      	movs	r2, #215	; 0xd7
 8022c0a:	21d7      	movs	r1, #215	; 0xd7
 8022c0c:	4618      	mov	r0, r3
 8022c0e:	f7e6 f88c 	bl	8008d2a <lv_obj_set_size>
	  lv_arc_set_angles(hoursArc, 180, 180);
 8022c12:	4b5f      	ldr	r3, [pc, #380]	; (8022d90 <dType1_Clock_Init+0x350>)
 8022c14:	681b      	ldr	r3, [r3, #0]
 8022c16:	22b4      	movs	r2, #180	; 0xb4
 8022c18:	21b4      	movs	r1, #180	; 0xb4
 8022c1a:	4618      	mov	r0, r3
 8022c1c:	f7f4 fcba 	bl	8017594 <lv_arc_set_angles>
	  lv_arc_set_style(hoursArc, LV_ARC_STYLE_MAIN, &hours_Style);
 8022c20:	4b5b      	ldr	r3, [pc, #364]	; (8022d90 <dType1_Clock_Init+0x350>)
 8022c22:	681b      	ldr	r3, [r3, #0]
 8022c24:	4a59      	ldr	r2, [pc, #356]	; (8022d8c <dType1_Clock_Init+0x34c>)
 8022c26:	2100      	movs	r1, #0
 8022c28:	4618      	mov	r0, r3
 8022c2a:	f7f4 fcdc 	bl	80175e6 <lv_arc_set_style>
	  lv_obj_align(hoursArc, NULL, LV_ALIGN_CENTER, 0, 0);
 8022c2e:	4b58      	ldr	r3, [pc, #352]	; (8022d90 <dType1_Clock_Init+0x350>)
 8022c30:	6818      	ldr	r0, [r3, #0]
 8022c32:	2300      	movs	r3, #0
 8022c34:	9300      	str	r3, [sp, #0]
 8022c36:	2300      	movs	r3, #0
 8022c38:	2200      	movs	r2, #0
 8022c3a:	2100      	movs	r1, #0
 8022c3c:	f7e6 f918 	bl	8008e70 <lv_obj_align>

	  //Minutes
	  static lv_style_t minutes_Style;
	  lv_style_copy(&minutes_Style, &lv_style_plain);
 8022c40:	493f      	ldr	r1, [pc, #252]	; (8022d40 <dType1_Clock_Init+0x300>)
 8022c42:	4854      	ldr	r0, [pc, #336]	; (8022d94 <dType1_Clock_Init+0x354>)
 8022c44:	f7e8 fb58 	bl	800b2f8 <lv_style_copy>
	  minutes_Style.line.color = LV_COLOR_BLUE;
 8022c48:	4a52      	ldr	r2, [pc, #328]	; (8022d94 <dType1_Clock_Init+0x354>)
 8022c4a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022c4e:	f36f 0302 	bfc	r3, #0, #3
 8022c52:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022c56:	4a4f      	ldr	r2, [pc, #316]	; (8022d94 <dType1_Clock_Init+0x354>)
 8022c58:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022c5c:	f36f 03c7 	bfc	r3, #3, #5
 8022c60:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022c64:	4a4b      	ldr	r2, [pc, #300]	; (8022d94 <dType1_Clock_Init+0x354>)
 8022c66:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022c6a:	f043 031f 	orr.w	r3, r3, #31
 8022c6e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8022c72:	4a48      	ldr	r2, [pc, #288]	; (8022d94 <dType1_Clock_Init+0x354>)
 8022c74:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022c78:	f36f 1347 	bfc	r3, #5, #3
 8022c7c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	  minutes_Style.line.width = 5;
 8022c80:	4b44      	ldr	r3, [pc, #272]	; (8022d94 <dType1_Clock_Init+0x354>)
 8022c82:	2205      	movs	r2, #5
 8022c84:	86da      	strh	r2, [r3, #54]	; 0x36

	  minutesArc = lv_arc_create(lv_scr_act(), NULL);
 8022c86:	f7ff f9ae 	bl	8021fe6 <lv_scr_act>
 8022c8a:	4603      	mov	r3, r0
 8022c8c:	2100      	movs	r1, #0
 8022c8e:	4618      	mov	r0, r3
 8022c90:	f7f4 fc04 	bl	801749c <lv_arc_create>
 8022c94:	4602      	mov	r2, r0
 8022c96:	4b40      	ldr	r3, [pc, #256]	; (8022d98 <dType1_Clock_Init+0x358>)
 8022c98:	601a      	str	r2, [r3, #0]
	  lv_obj_set_size(minutesArc, 230, 230);
 8022c9a:	4b3f      	ldr	r3, [pc, #252]	; (8022d98 <dType1_Clock_Init+0x358>)
 8022c9c:	681b      	ldr	r3, [r3, #0]
 8022c9e:	22e6      	movs	r2, #230	; 0xe6
 8022ca0:	21e6      	movs	r1, #230	; 0xe6
 8022ca2:	4618      	mov	r0, r3
 8022ca4:	f7e6 f841 	bl	8008d2a <lv_obj_set_size>
	  lv_arc_set_angles(minutesArc, 180, 180);
 8022ca8:	4b3b      	ldr	r3, [pc, #236]	; (8022d98 <dType1_Clock_Init+0x358>)
 8022caa:	681b      	ldr	r3, [r3, #0]
 8022cac:	22b4      	movs	r2, #180	; 0xb4
 8022cae:	21b4      	movs	r1, #180	; 0xb4
 8022cb0:	4618      	mov	r0, r3
 8022cb2:	f7f4 fc6f 	bl	8017594 <lv_arc_set_angles>
	  lv_arc_set_style(minutesArc, LV_ARC_STYLE_MAIN, &minutes_Style);
 8022cb6:	4b38      	ldr	r3, [pc, #224]	; (8022d98 <dType1_Clock_Init+0x358>)
 8022cb8:	681b      	ldr	r3, [r3, #0]
 8022cba:	4a36      	ldr	r2, [pc, #216]	; (8022d94 <dType1_Clock_Init+0x354>)
 8022cbc:	2100      	movs	r1, #0
 8022cbe:	4618      	mov	r0, r3
 8022cc0:	f7f4 fc91 	bl	80175e6 <lv_arc_set_style>
	  lv_obj_align(minutesArc, NULL, LV_ALIGN_CENTER, 0, 0);
 8022cc4:	4b34      	ldr	r3, [pc, #208]	; (8022d98 <dType1_Clock_Init+0x358>)
 8022cc6:	6818      	ldr	r0, [r3, #0]
 8022cc8:	2300      	movs	r3, #0
 8022cca:	9300      	str	r3, [sp, #0]
 8022ccc:	2300      	movs	r3, #0
 8022cce:	2200      	movs	r2, #0
 8022cd0:	2100      	movs	r1, #0
 8022cd2:	f7e6 f8cd 	bl	8008e70 <lv_obj_align>

	  //Steps
	  static  lv_style_t steps_Style,description_Style;
	 		  lv_style_copy(&steps_Style, &lv_style_plain);
 8022cd6:	491a      	ldr	r1, [pc, #104]	; (8022d40 <dType1_Clock_Init+0x300>)
 8022cd8:	4830      	ldr	r0, [pc, #192]	; (8022d9c <dType1_Clock_Init+0x35c>)
 8022cda:	f7e8 fb0d 	bl	800b2f8 <lv_style_copy>
	 		  steps_Style.line.color = LV_COLOR_GREEN;
 8022cde:	4a2f      	ldr	r2, [pc, #188]	; (8022d9c <dType1_Clock_Init+0x35c>)
 8022ce0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022ce4:	2104      	movs	r1, #4
 8022ce6:	f361 0302 	bfi	r3, r1, #0, #3
 8022cea:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022cee:	4a2b      	ldr	r2, [pc, #172]	; (8022d9c <dType1_Clock_Init+0x35c>)
 8022cf0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022cf4:	f36f 03c7 	bfc	r3, #3, #5
 8022cf8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022cfc:	4a27      	ldr	r2, [pc, #156]	; (8022d9c <dType1_Clock_Init+0x35c>)
 8022cfe:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022d02:	f36f 0304 	bfc	r3, #0, #5
 8022d06:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8022d0a:	4a24      	ldr	r2, [pc, #144]	; (8022d9c <dType1_Clock_Init+0x35c>)
 8022d0c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022d10:	f36f 1347 	bfc	r3, #5, #3
 8022d14:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		  steps_Style.line.width = 5;
 8022d18:	4b20      	ldr	r3, [pc, #128]	; (8022d9c <dType1_Clock_Init+0x35c>)
 8022d1a:	2205      	movs	r2, #5
 8022d1c:	86da      	strh	r2, [r3, #54]	; 0x36
	 		  steps_Style.text.color = LV_COLOR_GREEN;
 8022d1e:	4a1f      	ldr	r2, [pc, #124]	; (8022d9c <dType1_Clock_Init+0x35c>)
 8022d20:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022d24:	2104      	movs	r1, #4
 8022d26:	f361 0302 	bfi	r3, r1, #0, #3
 8022d2a:	f882 3020 	strb.w	r3, [r2, #32]
 8022d2e:	4a1b      	ldr	r2, [pc, #108]	; (8022d9c <dType1_Clock_Init+0x35c>)
 8022d30:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022d34:	f36f 03c7 	bfc	r3, #3, #5
 8022d38:	f882 3020 	strb.w	r3, [r2, #32]
 8022d3c:	e030      	b.n	8022da0 <dType1_Clock_Init+0x360>
 8022d3e:	bf00      	nop
 8022d40:	2001ba10 	.word	0x2001ba10
 8022d44:	2001a920 	.word	0x2001a920
 8022d48:	200017c4 	.word	0x200017c4
 8022d4c:	2001a95c 	.word	0x2001a95c
 8022d50:	20000bf0 	.word	0x20000bf0
 8022d54:	0802c9a8 	.word	0x0802c9a8
 8022d58:	2001bbbc 	.word	0x2001bbbc
 8022d5c:	2001bc91 	.word	0x2001bc91
 8022d60:	2001bc90 	.word	0x2001bc90
 8022d64:	2001bc80 	.word	0x2001bc80
 8022d68:	0802c9ec 	.word	0x0802c9ec
 8022d6c:	2001bc1c 	.word	0x2001bc1c
 8022d70:	2001bbb4 	.word	0x2001bbb4
 8022d74:	2001c160 	.word	0x2001c160
 8022d78:	2001bbc0 	.word	0x2001bbc0
 8022d7c:	2001bc82 	.word	0x2001bc82
 8022d80:	0802c9cc 	.word	0x0802c9cc
 8022d84:	2001bbac 	.word	0x2001bbac
 8022d88:	2001bc10 	.word	0x2001bc10
 8022d8c:	2001a998 	.word	0x2001a998
 8022d90:	2001bbc8 	.word	0x2001bbc8
 8022d94:	2001a9d4 	.word	0x2001a9d4
 8022d98:	2001bc08 	.word	0x2001bc08
 8022d9c:	2001aa10 	.word	0x2001aa10
 8022da0:	4aab      	ldr	r2, [pc, #684]	; (8023050 <dType1_Clock_Init+0x610>)
 8022da2:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022da6:	f36f 0304 	bfc	r3, #0, #5
 8022daa:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8022dae:	4aa8      	ldr	r2, [pc, #672]	; (8023050 <dType1_Clock_Init+0x610>)
 8022db0:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022db4:	f36f 1347 	bfc	r3, #5, #3
 8022db8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	 		  steps_Style.text.font = &lv_font_roboto_22;
 8022dbc:	4ba4      	ldr	r3, [pc, #656]	; (8023050 <dType1_Clock_Init+0x610>)
 8022dbe:	4aa5      	ldr	r2, [pc, #660]	; (8023054 <dType1_Clock_Init+0x614>)
 8022dc0:	625a      	str	r2, [r3, #36]	; 0x24

	 		  lv_style_copy(&description_Style, &lv_style_plain);
 8022dc2:	49a5      	ldr	r1, [pc, #660]	; (8023058 <dType1_Clock_Init+0x618>)
 8022dc4:	48a5      	ldr	r0, [pc, #660]	; (802305c <dType1_Clock_Init+0x61c>)
 8022dc6:	f7e8 fa97 	bl	800b2f8 <lv_style_copy>
	 		  description_Style.text.font = &lv_font_unscii_8;
 8022dca:	4ba4      	ldr	r3, [pc, #656]	; (802305c <dType1_Clock_Init+0x61c>)
 8022dcc:	4aa4      	ldr	r2, [pc, #656]	; (8023060 <dType1_Clock_Init+0x620>)
 8022dce:	625a      	str	r2, [r3, #36]	; 0x24
	 		  description_Style.text.color = LV_COLOR_GRAY;
 8022dd0:	4aa2      	ldr	r2, [pc, #648]	; (802305c <dType1_Clock_Init+0x61c>)
 8022dd2:	4ba4      	ldr	r3, [pc, #656]	; (8023064 <dType1_Clock_Init+0x624>)
 8022dd4:	881b      	ldrh	r3, [r3, #0]
 8022dd6:	8413      	strh	r3, [r2, #32]
	 		    if(theme){
 8022dd8:	79fb      	ldrb	r3, [r7, #7]
 8022dda:	2b00      	cmp	r3, #0
 8022ddc:	d003      	beq.n	8022de6 <dType1_Clock_Init+0x3a6>
	 		    	description_Style.text.color = LV_COLOR_WHITE;
 8022dde:	4a9f      	ldr	r2, [pc, #636]	; (802305c <dType1_Clock_Init+0x61c>)
 8022de0:	4ba1      	ldr	r3, [pc, #644]	; (8023068 <dType1_Clock_Init+0x628>)
 8022de2:	881b      	ldrh	r3, [r3, #0]
 8022de4:	8413      	strh	r3, [r2, #32]
	 		    }

	 		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8022de6:	f7ff f8fe 	bl	8021fe6 <lv_scr_act>
 8022dea:	4603      	mov	r3, r0
 8022dec:	2100      	movs	r1, #0
 8022dee:	4618      	mov	r0, r3
 8022df0:	f7f9 f956 	bl	801c0a0 <lv_label_create>
 8022df4:	4602      	mov	r2, r0
 8022df6:	4b9d      	ldr	r3, [pc, #628]	; (802306c <dType1_Clock_Init+0x62c>)
 8022df8:	601a      	str	r2, [r3, #0]
	 		 lv_obj_set_width(stepsLbl, 150);
 8022dfa:	4b9c      	ldr	r3, [pc, #624]	; (802306c <dType1_Clock_Init+0x62c>)
 8022dfc:	681b      	ldr	r3, [r3, #0]
 8022dfe:	2196      	movs	r1, #150	; 0x96
 8022e00:	4618      	mov	r0, r3
 8022e02:	f7e6 f80b 	bl	8008e1c <lv_obj_set_width>
	 		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8022e06:	4b99      	ldr	r3, [pc, #612]	; (802306c <dType1_Clock_Init+0x62c>)
 8022e08:	681b      	ldr	r3, [r3, #0]
 8022e0a:	4a91      	ldr	r2, [pc, #580]	; (8023050 <dType1_Clock_Init+0x610>)
 8022e0c:	2100      	movs	r1, #0
 8022e0e:	4618      	mov	r0, r3
 8022e10:	f7ff f8f4 	bl	8021ffc <lv_label_set_style>
	 		 snprintf(buffer, 8, "%04d", steps);
 8022e14:	4b96      	ldr	r3, [pc, #600]	; (8023070 <dType1_Clock_Init+0x630>)
 8022e16:	881b      	ldrh	r3, [r3, #0]
 8022e18:	4a96      	ldr	r2, [pc, #600]	; (8023074 <dType1_Clock_Init+0x634>)
 8022e1a:	2108      	movs	r1, #8
 8022e1c:	4896      	ldr	r0, [pc, #600]	; (8023078 <dType1_Clock_Init+0x638>)
 8022e1e:	f007 fcf1 	bl	802a804 <sniprintf>
	 		 lv_label_set_text(stepsLbl, buffer);
 8022e22:	4b92      	ldr	r3, [pc, #584]	; (802306c <dType1_Clock_Init+0x62c>)
 8022e24:	681b      	ldr	r3, [r3, #0]
 8022e26:	4994      	ldr	r1, [pc, #592]	; (8023078 <dType1_Clock_Init+0x638>)
 8022e28:	4618      	mov	r0, r3
 8022e2a:	f7f9 fa6b 	bl	801c304 <lv_label_set_text>
	 		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 8022e2e:	4b8f      	ldr	r3, [pc, #572]	; (802306c <dType1_Clock_Init+0x62c>)
 8022e30:	6818      	ldr	r0, [r3, #0]
 8022e32:	2328      	movs	r3, #40	; 0x28
 8022e34:	9300      	str	r3, [sp, #0]
 8022e36:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022e3a:	2200      	movs	r2, #0
 8022e3c:	2100      	movs	r1, #0
 8022e3e:	f7e6 f817 	bl	8008e70 <lv_obj_align>

	 		 stepsDescLbl = lv_label_create(lv_scr_act(), NULL);
 8022e42:	f7ff f8d0 	bl	8021fe6 <lv_scr_act>
 8022e46:	4603      	mov	r3, r0
 8022e48:	2100      	movs	r1, #0
 8022e4a:	4618      	mov	r0, r3
 8022e4c:	f7f9 f928 	bl	801c0a0 <lv_label_create>
 8022e50:	4602      	mov	r2, r0
 8022e52:	4b8a      	ldr	r3, [pc, #552]	; (802307c <dType1_Clock_Init+0x63c>)
 8022e54:	601a      	str	r2, [r3, #0]
	 		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8022e56:	4b89      	ldr	r3, [pc, #548]	; (802307c <dType1_Clock_Init+0x63c>)
 8022e58:	681b      	ldr	r3, [r3, #0]
 8022e5a:	4a80      	ldr	r2, [pc, #512]	; (802305c <dType1_Clock_Init+0x61c>)
 8022e5c:	2100      	movs	r1, #0
 8022e5e:	4618      	mov	r0, r3
 8022e60:	f7ff f8cc 	bl	8021ffc <lv_label_set_style>
	 		 lv_label_set_text(stepsDescLbl, "steps");
 8022e64:	4b85      	ldr	r3, [pc, #532]	; (802307c <dType1_Clock_Init+0x63c>)
 8022e66:	681b      	ldr	r3, [r3, #0]
 8022e68:	4985      	ldr	r1, [pc, #532]	; (8023080 <dType1_Clock_Init+0x640>)
 8022e6a:	4618      	mov	r0, r3
 8022e6c:	f7f9 fa4a 	bl	801c304 <lv_label_set_text>
	 		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -60, 55);
 8022e70:	4b82      	ldr	r3, [pc, #520]	; (802307c <dType1_Clock_Init+0x63c>)
 8022e72:	6818      	ldr	r0, [r3, #0]
 8022e74:	2337      	movs	r3, #55	; 0x37
 8022e76:	9300      	str	r3, [sp, #0]
 8022e78:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022e7c:	2200      	movs	r2, #0
 8022e7e:	2100      	movs	r1, #0
 8022e80:	f7e5 fff6 	bl	8008e70 <lv_obj_align>

	 		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 8022e84:	f7ff f8af 	bl	8021fe6 <lv_scr_act>
 8022e88:	4603      	mov	r3, r0
 8022e8a:	2100      	movs	r1, #0
 8022e8c:	4618      	mov	r0, r3
 8022e8e:	f7f4 fb05 	bl	801749c <lv_arc_create>
 8022e92:	4602      	mov	r2, r0
 8022e94:	4b7b      	ldr	r3, [pc, #492]	; (8023084 <dType1_Clock_Init+0x644>)
 8022e96:	601a      	str	r2, [r3, #0]
	 		  lv_obj_set_size(stepsArc, 40, 40);
 8022e98:	4b7a      	ldr	r3, [pc, #488]	; (8023084 <dType1_Clock_Init+0x644>)
 8022e9a:	681b      	ldr	r3, [r3, #0]
 8022e9c:	2228      	movs	r2, #40	; 0x28
 8022e9e:	2128      	movs	r1, #40	; 0x28
 8022ea0:	4618      	mov	r0, r3
 8022ea2:	f7e5 ff42 	bl	8008d2a <lv_obj_set_size>
	 		  lv_arc_set_angles(stepsArc, 0, 360);
 8022ea6:	4b77      	ldr	r3, [pc, #476]	; (8023084 <dType1_Clock_Init+0x644>)
 8022ea8:	681b      	ldr	r3, [r3, #0]
 8022eaa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022eae:	2100      	movs	r1, #0
 8022eb0:	4618      	mov	r0, r3
 8022eb2:	f7f4 fb6f 	bl	8017594 <lv_arc_set_angles>
	 		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8022eb6:	4b73      	ldr	r3, [pc, #460]	; (8023084 <dType1_Clock_Init+0x644>)
 8022eb8:	681b      	ldr	r3, [r3, #0]
 8022eba:	4a65      	ldr	r2, [pc, #404]	; (8023050 <dType1_Clock_Init+0x610>)
 8022ebc:	2100      	movs	r1, #0
 8022ebe:	4618      	mov	r0, r3
 8022ec0:	f7f4 fb91 	bl	80175e6 <lv_arc_set_style>
	 		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -60, 0);
 8022ec4:	4b6f      	ldr	r3, [pc, #444]	; (8023084 <dType1_Clock_Init+0x644>)
 8022ec6:	6818      	ldr	r0, [r3, #0]
 8022ec8:	2300      	movs	r3, #0
 8022eca:	9300      	str	r3, [sp, #0]
 8022ecc:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022ed0:	2200      	movs	r2, #0
 8022ed2:	2100      	movs	r1, #0
 8022ed4:	f7e5 ffcc 	bl	8008e70 <lv_obj_align>

	 		  //Kcal
	 		 static lv_style_t kCals_Style;
	 		  lv_style_copy(&kCals_Style, &lv_style_plain);
 8022ed8:	495f      	ldr	r1, [pc, #380]	; (8023058 <dType1_Clock_Init+0x618>)
 8022eda:	486b      	ldr	r0, [pc, #428]	; (8023088 <dType1_Clock_Init+0x648>)
 8022edc:	f7e8 fa0c 	bl	800b2f8 <lv_style_copy>
	 		  kCals_Style.line.color = LV_COLOR_RED;
 8022ee0:	4a69      	ldr	r2, [pc, #420]	; (8023088 <dType1_Clock_Init+0x648>)
 8022ee2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022ee6:	f36f 0302 	bfc	r3, #0, #3
 8022eea:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022eee:	4a66      	ldr	r2, [pc, #408]	; (8023088 <dType1_Clock_Init+0x648>)
 8022ef0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8022ef4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8022ef8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8022efc:	4a62      	ldr	r2, [pc, #392]	; (8023088 <dType1_Clock_Init+0x648>)
 8022efe:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022f02:	f36f 0304 	bfc	r3, #0, #5
 8022f06:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8022f0a:	4a5f      	ldr	r2, [pc, #380]	; (8023088 <dType1_Clock_Init+0x648>)
 8022f0c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8022f10:	f36f 1347 	bfc	r3, #5, #3
 8022f14:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		  kCals_Style.line.width = 5;
 8022f18:	4b5b      	ldr	r3, [pc, #364]	; (8023088 <dType1_Clock_Init+0x648>)
 8022f1a:	2205      	movs	r2, #5
 8022f1c:	86da      	strh	r2, [r3, #54]	; 0x36
	 		  kCals_Style.text.color = LV_COLOR_RED;
 8022f1e:	4a5a      	ldr	r2, [pc, #360]	; (8023088 <dType1_Clock_Init+0x648>)
 8022f20:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022f24:	f36f 0302 	bfc	r3, #0, #3
 8022f28:	f882 3020 	strb.w	r3, [r2, #32]
 8022f2c:	4a56      	ldr	r2, [pc, #344]	; (8023088 <dType1_Clock_Init+0x648>)
 8022f2e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022f32:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8022f36:	f882 3020 	strb.w	r3, [r2, #32]
 8022f3a:	4a53      	ldr	r2, [pc, #332]	; (8023088 <dType1_Clock_Init+0x648>)
 8022f3c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022f40:	f36f 0304 	bfc	r3, #0, #5
 8022f44:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8022f48:	4a4f      	ldr	r2, [pc, #316]	; (8023088 <dType1_Clock_Init+0x648>)
 8022f4a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8022f4e:	f36f 1347 	bfc	r3, #5, #3
 8022f52:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	 		  kCals_Style.text.font = &lv_font_roboto_22;
 8022f56:	4b4c      	ldr	r3, [pc, #304]	; (8023088 <dType1_Clock_Init+0x648>)
 8022f58:	4a3e      	ldr	r2, [pc, #248]	; (8023054 <dType1_Clock_Init+0x614>)
 8022f5a:	625a      	str	r2, [r3, #36]	; 0x24

	 		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 8022f5c:	f7ff f843 	bl	8021fe6 <lv_scr_act>
 8022f60:	4603      	mov	r3, r0
 8022f62:	2100      	movs	r1, #0
 8022f64:	4618      	mov	r0, r3
 8022f66:	f7f9 f89b 	bl	801c0a0 <lv_label_create>
 8022f6a:	4602      	mov	r2, r0
 8022f6c:	4b47      	ldr	r3, [pc, #284]	; (802308c <dType1_Clock_Init+0x64c>)
 8022f6e:	601a      	str	r2, [r3, #0]
	 		 lv_obj_set_width(kCalsLbl, 150);
 8022f70:	4b46      	ldr	r3, [pc, #280]	; (802308c <dType1_Clock_Init+0x64c>)
 8022f72:	681b      	ldr	r3, [r3, #0]
 8022f74:	2196      	movs	r1, #150	; 0x96
 8022f76:	4618      	mov	r0, r3
 8022f78:	f7e5 ff50 	bl	8008e1c <lv_obj_set_width>
	 		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 8022f7c:	4b43      	ldr	r3, [pc, #268]	; (802308c <dType1_Clock_Init+0x64c>)
 8022f7e:	681b      	ldr	r3, [r3, #0]
 8022f80:	4a41      	ldr	r2, [pc, #260]	; (8023088 <dType1_Clock_Init+0x648>)
 8022f82:	2100      	movs	r1, #0
 8022f84:	4618      	mov	r0, r3
 8022f86:	f7ff f839 	bl	8021ffc <lv_label_set_style>
	 		 snprintf(buffer, 8, "%04d", kCals);
 8022f8a:	4b41      	ldr	r3, [pc, #260]	; (8023090 <dType1_Clock_Init+0x650>)
 8022f8c:	881b      	ldrh	r3, [r3, #0]
 8022f8e:	4a39      	ldr	r2, [pc, #228]	; (8023074 <dType1_Clock_Init+0x634>)
 8022f90:	2108      	movs	r1, #8
 8022f92:	4839      	ldr	r0, [pc, #228]	; (8023078 <dType1_Clock_Init+0x638>)
 8022f94:	f007 fc36 	bl	802a804 <sniprintf>
	 		 lv_label_set_text(kCalsLbl, buffer);
 8022f98:	4b3c      	ldr	r3, [pc, #240]	; (802308c <dType1_Clock_Init+0x64c>)
 8022f9a:	681b      	ldr	r3, [r3, #0]
 8022f9c:	4936      	ldr	r1, [pc, #216]	; (8023078 <dType1_Clock_Init+0x638>)
 8022f9e:	4618      	mov	r0, r3
 8022fa0:	f7f9 f9b0 	bl	801c304 <lv_label_set_text>
	 		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 8022fa4:	4b39      	ldr	r3, [pc, #228]	; (802308c <dType1_Clock_Init+0x64c>)
 8022fa6:	6818      	ldr	r0, [r3, #0]
 8022fa8:	2328      	movs	r3, #40	; 0x28
 8022faa:	9300      	str	r3, [sp, #0]
 8022fac:	233c      	movs	r3, #60	; 0x3c
 8022fae:	2200      	movs	r2, #0
 8022fb0:	2100      	movs	r1, #0
 8022fb2:	f7e5 ff5d 	bl	8008e70 <lv_obj_align>


	 		 kCalsDescLbl = lv_label_create(lv_scr_act(), NULL);
 8022fb6:	f7ff f816 	bl	8021fe6 <lv_scr_act>
 8022fba:	4603      	mov	r3, r0
 8022fbc:	2100      	movs	r1, #0
 8022fbe:	4618      	mov	r0, r3
 8022fc0:	f7f9 f86e 	bl	801c0a0 <lv_label_create>
 8022fc4:	4602      	mov	r2, r0
 8022fc6:	4b33      	ldr	r3, [pc, #204]	; (8023094 <dType1_Clock_Init+0x654>)
 8022fc8:	601a      	str	r2, [r3, #0]
	 		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8022fca:	4b32      	ldr	r3, [pc, #200]	; (8023094 <dType1_Clock_Init+0x654>)
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	4a23      	ldr	r2, [pc, #140]	; (802305c <dType1_Clock_Init+0x61c>)
 8022fd0:	2100      	movs	r1, #0
 8022fd2:	4618      	mov	r0, r3
 8022fd4:	f7ff f812 	bl	8021ffc <lv_label_set_style>
	 		 lv_label_set_text(kCalsDescLbl, "kCals");
 8022fd8:	4b2e      	ldr	r3, [pc, #184]	; (8023094 <dType1_Clock_Init+0x654>)
 8022fda:	681b      	ldr	r3, [r3, #0]
 8022fdc:	492e      	ldr	r1, [pc, #184]	; (8023098 <dType1_Clock_Init+0x658>)
 8022fde:	4618      	mov	r0, r3
 8022fe0:	f7f9 f990 	bl	801c304 <lv_label_set_text>
	 		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 60, 55);
 8022fe4:	4b2b      	ldr	r3, [pc, #172]	; (8023094 <dType1_Clock_Init+0x654>)
 8022fe6:	6818      	ldr	r0, [r3, #0]
 8022fe8:	2337      	movs	r3, #55	; 0x37
 8022fea:	9300      	str	r3, [sp, #0]
 8022fec:	233c      	movs	r3, #60	; 0x3c
 8022fee:	2200      	movs	r2, #0
 8022ff0:	2100      	movs	r1, #0
 8022ff2:	f7e5 ff3d 	bl	8008e70 <lv_obj_align>

	 		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 8022ff6:	f7fe fff6 	bl	8021fe6 <lv_scr_act>
 8022ffa:	4603      	mov	r3, r0
 8022ffc:	2100      	movs	r1, #0
 8022ffe:	4618      	mov	r0, r3
 8023000:	f7f4 fa4c 	bl	801749c <lv_arc_create>
 8023004:	4602      	mov	r2, r0
 8023006:	4b25      	ldr	r3, [pc, #148]	; (802309c <dType1_Clock_Init+0x65c>)
 8023008:	601a      	str	r2, [r3, #0]
	 		  lv_obj_set_size(kCalsArc, 40, 40);
 802300a:	4b24      	ldr	r3, [pc, #144]	; (802309c <dType1_Clock_Init+0x65c>)
 802300c:	681b      	ldr	r3, [r3, #0]
 802300e:	2228      	movs	r2, #40	; 0x28
 8023010:	2128      	movs	r1, #40	; 0x28
 8023012:	4618      	mov	r0, r3
 8023014:	f7e5 fe89 	bl	8008d2a <lv_obj_set_size>
	 		  lv_arc_set_angles(kCalsArc, 0, 360);
 8023018:	4b20      	ldr	r3, [pc, #128]	; (802309c <dType1_Clock_Init+0x65c>)
 802301a:	681b      	ldr	r3, [r3, #0]
 802301c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8023020:	2100      	movs	r1, #0
 8023022:	4618      	mov	r0, r3
 8023024:	f7f4 fab6 	bl	8017594 <lv_arc_set_angles>
	 		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8023028:	4b1c      	ldr	r3, [pc, #112]	; (802309c <dType1_Clock_Init+0x65c>)
 802302a:	681b      	ldr	r3, [r3, #0]
 802302c:	4a16      	ldr	r2, [pc, #88]	; (8023088 <dType1_Clock_Init+0x648>)
 802302e:	2100      	movs	r1, #0
 8023030:	4618      	mov	r0, r3
 8023032:	f7f4 fad8 	bl	80175e6 <lv_arc_set_style>
	 		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 60, 0);
 8023036:	4b19      	ldr	r3, [pc, #100]	; (802309c <dType1_Clock_Init+0x65c>)
 8023038:	6818      	ldr	r0, [r3, #0]
 802303a:	2300      	movs	r3, #0
 802303c:	9300      	str	r3, [sp, #0]
 802303e:	233c      	movs	r3, #60	; 0x3c
 8023040:	2200      	movs	r2, #0
 8023042:	2100      	movs	r1, #0
 8023044:	f7e5 ff14 	bl	8008e70 <lv_obj_align>
}
 8023048:	bf00      	nop
 802304a:	3708      	adds	r7, #8
 802304c:	46bd      	mov	sp, r7
 802304e:	bd80      	pop	{r7, pc}
 8023050:	2001aa10 	.word	0x2001aa10
 8023054:	200017c4 	.word	0x200017c4
 8023058:	2001ba10 	.word	0x2001ba10
 802305c:	2001aa4c 	.word	0x2001aa4c
 8023060:	200026d0 	.word	0x200026d0
 8023064:	0802c9e8 	.word	0x0802c9e8
 8023068:	0802c9a8 	.word	0x0802c9a8
 802306c:	2001bc30 	.word	0x2001bc30
 8023070:	2001bc0c 	.word	0x2001bc0c
 8023074:	0802c9b4 	.word	0x0802c9b4
 8023078:	2001bc1c 	.word	0x2001bc1c
 802307c:	2001bbc4 	.word	0x2001bbc4
 8023080:	0802c9bc 	.word	0x0802c9bc
 8023084:	2001bc14 	.word	0x2001bc14
 8023088:	2001aa88 	.word	0x2001aa88
 802308c:	2001bc8c 	.word	0x2001bc8c
 8023090:	2001bbb2 	.word	0x2001bbb2
 8023094:	2001bc78 	.word	0x2001bc78
 8023098:	0802c9c4 	.word	0x0802c9c4
 802309c:	2001bc94 	.word	0x2001bc94

080230a0 <dType2_Clock_Init>:
/*Only digital Type*/
void dType2_Clock_Init(bool theme) {
 80230a0:	b580      	push	{r7, lr}
 80230a2:	b084      	sub	sp, #16
 80230a4:	af02      	add	r7, sp, #8
 80230a6:	4603      	mov	r3, r0
 80230a8:	71fb      	strb	r3, [r7, #7]
	//Digital Clock
	static lv_style_t dClock_style,dDate_style,weekD_style;
			lv_style_copy(&dClock_style, &lv_style_plain);
 80230aa:	49b4      	ldr	r1, [pc, #720]	; (802337c <dType2_Clock_Init+0x2dc>)
 80230ac:	48b4      	ldr	r0, [pc, #720]	; (8023380 <dType2_Clock_Init+0x2e0>)
 80230ae:	f7e8 f923 	bl	800b2f8 <lv_style_copy>
		    dClock_style.text.font =&digital_font_for_number_65;
 80230b2:	4bb3      	ldr	r3, [pc, #716]	; (8023380 <dType2_Clock_Init+0x2e0>)
 80230b4:	4ab3      	ldr	r2, [pc, #716]	; (8023384 <dType2_Clock_Init+0x2e4>)
 80230b6:	625a      	str	r2, [r3, #36]	; 0x24
		    lv_style_copy(&dDate_style, &lv_style_plain);
 80230b8:	49b0      	ldr	r1, [pc, #704]	; (802337c <dType2_Clock_Init+0x2dc>)
 80230ba:	48b3      	ldr	r0, [pc, #716]	; (8023388 <dType2_Clock_Init+0x2e8>)
 80230bc:	f7e8 f91c 	bl	800b2f8 <lv_style_copy>
		    dDate_style.text.font =&digital_font_for_number_30;
 80230c0:	4bb1      	ldr	r3, [pc, #708]	; (8023388 <dType2_Clock_Init+0x2e8>)
 80230c2:	4ab2      	ldr	r2, [pc, #712]	; (802338c <dType2_Clock_Init+0x2ec>)
 80230c4:	625a      	str	r2, [r3, #36]	; 0x24
			lv_style_copy(&weekD_style, &lv_style_plain);
 80230c6:	49ad      	ldr	r1, [pc, #692]	; (802337c <dType2_Clock_Init+0x2dc>)
 80230c8:	48b1      	ldr	r0, [pc, #708]	; (8023390 <dType2_Clock_Init+0x2f0>)
 80230ca:	f7e8 f915 	bl	800b2f8 <lv_style_copy>
			weekD_style.text.font =&lv_font_roboto_22;
 80230ce:	4bb0      	ldr	r3, [pc, #704]	; (8023390 <dType2_Clock_Init+0x2f0>)
 80230d0:	4ab0      	ldr	r2, [pc, #704]	; (8023394 <dType2_Clock_Init+0x2f4>)
 80230d2:	625a      	str	r2, [r3, #36]	; 0x24
		    if(theme){
 80230d4:	79fb      	ldrb	r3, [r7, #7]
 80230d6:	2b00      	cmp	r3, #0
 80230d8:	d00b      	beq.n	80230f2 <dType2_Clock_Init+0x52>
		    	dClock_style.text.color = LV_COLOR_WHITE;
 80230da:	4aa9      	ldr	r2, [pc, #676]	; (8023380 <dType2_Clock_Init+0x2e0>)
 80230dc:	4bae      	ldr	r3, [pc, #696]	; (8023398 <dType2_Clock_Init+0x2f8>)
 80230de:	881b      	ldrh	r3, [r3, #0]
 80230e0:	8413      	strh	r3, [r2, #32]
		    	dDate_style.text.color = LV_COLOR_WHITE;
 80230e2:	4aa9      	ldr	r2, [pc, #676]	; (8023388 <dType2_Clock_Init+0x2e8>)
 80230e4:	4bac      	ldr	r3, [pc, #688]	; (8023398 <dType2_Clock_Init+0x2f8>)
 80230e6:	881b      	ldrh	r3, [r3, #0]
 80230e8:	8413      	strh	r3, [r2, #32]
		    	weekD_style.text.color = LV_COLOR_WHITE;
 80230ea:	4aa9      	ldr	r2, [pc, #676]	; (8023390 <dType2_Clock_Init+0x2f0>)
 80230ec:	4baa      	ldr	r3, [pc, #680]	; (8023398 <dType2_Clock_Init+0x2f8>)
 80230ee:	881b      	ldrh	r3, [r3, #0]
 80230f0:	8413      	strh	r3, [r2, #32]
		    }

		    digitalClock = lv_label_create(lv_scr_act(), NULL);
 80230f2:	f7fe ff78 	bl	8021fe6 <lv_scr_act>
 80230f6:	4603      	mov	r3, r0
 80230f8:	2100      	movs	r1, #0
 80230fa:	4618      	mov	r0, r3
 80230fc:	f7f8 ffd0 	bl	801c0a0 <lv_label_create>
 8023100:	4602      	mov	r2, r0
 8023102:	4ba6      	ldr	r3, [pc, #664]	; (802339c <dType2_Clock_Init+0x2fc>)
 8023104:	601a      	str	r2, [r3, #0]
		    lv_label_set_style(digitalClock, LV_LABEL_STYLE_MAIN, &dClock_style);
 8023106:	4ba5      	ldr	r3, [pc, #660]	; (802339c <dType2_Clock_Init+0x2fc>)
 8023108:	681b      	ldr	r3, [r3, #0]
 802310a:	4a9d      	ldr	r2, [pc, #628]	; (8023380 <dType2_Clock_Init+0x2e0>)
 802310c:	2100      	movs	r1, #0
 802310e:	4618      	mov	r0, r3
 8023110:	f7fe ff74 	bl	8021ffc <lv_label_set_style>
		    lv_obj_set_width(digitalClock, 200);
 8023114:	4ba1      	ldr	r3, [pc, #644]	; (802339c <dType2_Clock_Init+0x2fc>)
 8023116:	681b      	ldr	r3, [r3, #0]
 8023118:	21c8      	movs	r1, #200	; 0xc8
 802311a:	4618      	mov	r0, r3
 802311c:	f7e5 fe7e 	bl	8008e1c <lv_obj_set_width>
		    snprintf(buffer, 16, "%02d:%02d:%02d", hours,minutes,seconds);
 8023120:	4b9f      	ldr	r3, [pc, #636]	; (80233a0 <dType2_Clock_Init+0x300>)
 8023122:	781b      	ldrb	r3, [r3, #0]
 8023124:	4619      	mov	r1, r3
 8023126:	4b9f      	ldr	r3, [pc, #636]	; (80233a4 <dType2_Clock_Init+0x304>)
 8023128:	781b      	ldrb	r3, [r3, #0]
 802312a:	461a      	mov	r2, r3
 802312c:	4b9e      	ldr	r3, [pc, #632]	; (80233a8 <dType2_Clock_Init+0x308>)
 802312e:	781b      	ldrb	r3, [r3, #0]
 8023130:	9301      	str	r3, [sp, #4]
 8023132:	9200      	str	r2, [sp, #0]
 8023134:	460b      	mov	r3, r1
 8023136:	4a9d      	ldr	r2, [pc, #628]	; (80233ac <dType2_Clock_Init+0x30c>)
 8023138:	2110      	movs	r1, #16
 802313a:	489d      	ldr	r0, [pc, #628]	; (80233b0 <dType2_Clock_Init+0x310>)
 802313c:	f007 fb62 	bl	802a804 <sniprintf>
		    lv_label_set_text(digitalClock, buffer);
 8023140:	4b96      	ldr	r3, [pc, #600]	; (802339c <dType2_Clock_Init+0x2fc>)
 8023142:	681b      	ldr	r3, [r3, #0]
 8023144:	499a      	ldr	r1, [pc, #616]	; (80233b0 <dType2_Clock_Init+0x310>)
 8023146:	4618      	mov	r0, r3
 8023148:	f7f9 f8dc 	bl	801c304 <lv_label_set_text>
		    lv_label_set_align(digitalClock, LV_LABEL_ALIGN_CENTER);
 802314c:	4b93      	ldr	r3, [pc, #588]	; (802339c <dType2_Clock_Init+0x2fc>)
 802314e:	681b      	ldr	r3, [r3, #0]
 8023150:	2101      	movs	r1, #1
 8023152:	4618      	mov	r0, r3
 8023154:	f7f9 f9ce 	bl	801c4f4 <lv_label_set_align>
		    lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 8023158:	4b90      	ldr	r3, [pc, #576]	; (802339c <dType2_Clock_Init+0x2fc>)
 802315a:	6818      	ldr	r0, [r3, #0]
 802315c:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8023160:	9300      	str	r3, [sp, #0]
 8023162:	2300      	movs	r3, #0
 8023164:	2200      	movs	r2, #0
 8023166:	2100      	movs	r1, #0
 8023168:	f7e5 fe82 	bl	8008e70 <lv_obj_align>

		    //Digital Date
		    digitalDate = lv_label_create(lv_scr_act(), NULL);
 802316c:	f7fe ff3b 	bl	8021fe6 <lv_scr_act>
 8023170:	4603      	mov	r3, r0
 8023172:	2100      	movs	r1, #0
 8023174:	4618      	mov	r0, r3
 8023176:	f7f8 ff93 	bl	801c0a0 <lv_label_create>
 802317a:	4602      	mov	r2, r0
 802317c:	4b8d      	ldr	r3, [pc, #564]	; (80233b4 <dType2_Clock_Init+0x314>)
 802317e:	601a      	str	r2, [r3, #0]
		    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 8023180:	4b8c      	ldr	r3, [pc, #560]	; (80233b4 <dType2_Clock_Init+0x314>)
 8023182:	681b      	ldr	r3, [r3, #0]
 8023184:	4a80      	ldr	r2, [pc, #512]	; (8023388 <dType2_Clock_Init+0x2e8>)
 8023186:	2100      	movs	r1, #0
 8023188:	4618      	mov	r0, r3
 802318a:	f7fe ff37 	bl	8021ffc <lv_label_set_style>
	    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 802318e:	4b8a      	ldr	r3, [pc, #552]	; (80233b8 <dType2_Clock_Init+0x318>)
 8023190:	781b      	ldrb	r3, [r3, #0]
 8023192:	4619      	mov	r1, r3
 8023194:	4b89      	ldr	r3, [pc, #548]	; (80233bc <dType2_Clock_Init+0x31c>)
 8023196:	781b      	ldrb	r3, [r3, #0]
 8023198:	461a      	mov	r2, r3
 802319a:	4b89      	ldr	r3, [pc, #548]	; (80233c0 <dType2_Clock_Init+0x320>)
 802319c:	881b      	ldrh	r3, [r3, #0]
 802319e:	9301      	str	r3, [sp, #4]
 80231a0:	9200      	str	r2, [sp, #0]
 80231a2:	460b      	mov	r3, r1
 80231a4:	4a87      	ldr	r2, [pc, #540]	; (80233c4 <dType2_Clock_Init+0x324>)
 80231a6:	2110      	movs	r1, #16
 80231a8:	4881      	ldr	r0, [pc, #516]	; (80233b0 <dType2_Clock_Init+0x310>)
 80231aa:	f007 fb2b 	bl	802a804 <sniprintf>
			lv_label_set_text(digitalDate, buffer);
 80231ae:	4b81      	ldr	r3, [pc, #516]	; (80233b4 <dType2_Clock_Init+0x314>)
 80231b0:	681b      	ldr	r3, [r3, #0]
 80231b2:	497f      	ldr	r1, [pc, #508]	; (80233b0 <dType2_Clock_Init+0x310>)
 80231b4:	4618      	mov	r0, r3
 80231b6:	f7f9 f8a5 	bl	801c304 <lv_label_set_text>
		    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 80231ba:	4b7e      	ldr	r3, [pc, #504]	; (80233b4 <dType2_Clock_Init+0x314>)
 80231bc:	6818      	ldr	r0, [r3, #0]
 80231be:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80231c2:	9300      	str	r3, [sp, #0]
 80231c4:	2300      	movs	r3, #0
 80231c6:	2200      	movs	r2, #0
 80231c8:	2100      	movs	r1, #0
 80231ca:	f7e5 fe51 	bl	8008e70 <lv_obj_align>

		    //Week Day
		    weekDay = lv_label_create(lv_scr_act(), NULL);
 80231ce:	f7fe ff0a 	bl	8021fe6 <lv_scr_act>
 80231d2:	4603      	mov	r3, r0
 80231d4:	2100      	movs	r1, #0
 80231d6:	4618      	mov	r0, r3
 80231d8:	f7f8 ff62 	bl	801c0a0 <lv_label_create>
 80231dc:	4602      	mov	r2, r0
 80231de:	4b7a      	ldr	r3, [pc, #488]	; (80233c8 <dType2_Clock_Init+0x328>)
 80231e0:	601a      	str	r2, [r3, #0]
		    lv_obj_set_width(weekDay, 150);
 80231e2:	4b79      	ldr	r3, [pc, #484]	; (80233c8 <dType2_Clock_Init+0x328>)
 80231e4:	681b      	ldr	r3, [r3, #0]
 80231e6:	2196      	movs	r1, #150	; 0x96
 80231e8:	4618      	mov	r0, r3
 80231ea:	f7e5 fe17 	bl	8008e1c <lv_obj_set_width>
		    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &weekD_style);
 80231ee:	4b76      	ldr	r3, [pc, #472]	; (80233c8 <dType2_Clock_Init+0x328>)
 80231f0:	681b      	ldr	r3, [r3, #0]
 80231f2:	4a67      	ldr	r2, [pc, #412]	; (8023390 <dType2_Clock_Init+0x2f0>)
 80231f4:	2100      	movs	r1, #0
 80231f6:	4618      	mov	r0, r3
 80231f8:	f7fe ff00 	bl	8021ffc <lv_label_set_style>
		    lv_label_set_text(weekDay,weekDayStr);
 80231fc:	4b72      	ldr	r3, [pc, #456]	; (80233c8 <dType2_Clock_Init+0x328>)
 80231fe:	681a      	ldr	r2, [r3, #0]
 8023200:	4b72      	ldr	r3, [pc, #456]	; (80233cc <dType2_Clock_Init+0x32c>)
 8023202:	681b      	ldr	r3, [r3, #0]
 8023204:	4619      	mov	r1, r3
 8023206:	4610      	mov	r0, r2
 8023208:	f7f9 f87c 	bl	801c304 <lv_label_set_text>
		    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 802320c:	4b6e      	ldr	r3, [pc, #440]	; (80233c8 <dType2_Clock_Init+0x328>)
 802320e:	6818      	ldr	r0, [r3, #0]
 8023210:	f06f 0309 	mvn.w	r3, #9
 8023214:	9300      	str	r3, [sp, #0]
 8023216:	2300      	movs	r3, #0
 8023218:	2200      	movs	r2, #0
 802321a:	2100      	movs	r1, #0
 802321c:	f7e5 fe28 	bl	8008e70 <lv_obj_align>

		    //Steps
		    static lv_style_t steps_Style,description_Style;
		   		  lv_style_copy(&steps_Style, &lv_style_plain);
 8023220:	4956      	ldr	r1, [pc, #344]	; (802337c <dType2_Clock_Init+0x2dc>)
 8023222:	486b      	ldr	r0, [pc, #428]	; (80233d0 <dType2_Clock_Init+0x330>)
 8023224:	f7e8 f868 	bl	800b2f8 <lv_style_copy>
		   		  steps_Style.line.color = LV_COLOR_GREEN;
 8023228:	4a69      	ldr	r2, [pc, #420]	; (80233d0 <dType2_Clock_Init+0x330>)
 802322a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 802322e:	2104      	movs	r1, #4
 8023230:	f361 0302 	bfi	r3, r1, #0, #3
 8023234:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8023238:	4a65      	ldr	r2, [pc, #404]	; (80233d0 <dType2_Clock_Init+0x330>)
 802323a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 802323e:	f36f 03c7 	bfc	r3, #3, #5
 8023242:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8023246:	4a62      	ldr	r2, [pc, #392]	; (80233d0 <dType2_Clock_Init+0x330>)
 8023248:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802324c:	f36f 0304 	bfc	r3, #0, #5
 8023250:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8023254:	4a5e      	ldr	r2, [pc, #376]	; (80233d0 <dType2_Clock_Init+0x330>)
 8023256:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802325a:	f36f 1347 	bfc	r3, #5, #3
 802325e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
		   		  steps_Style.line.width = 5;
 8023262:	4b5b      	ldr	r3, [pc, #364]	; (80233d0 <dType2_Clock_Init+0x330>)
 8023264:	2205      	movs	r2, #5
 8023266:	86da      	strh	r2, [r3, #54]	; 0x36
		   		  steps_Style.text.color = LV_COLOR_GREEN;
 8023268:	4a59      	ldr	r2, [pc, #356]	; (80233d0 <dType2_Clock_Init+0x330>)
 802326a:	f892 3020 	ldrb.w	r3, [r2, #32]
 802326e:	2104      	movs	r1, #4
 8023270:	f361 0302 	bfi	r3, r1, #0, #3
 8023274:	f882 3020 	strb.w	r3, [r2, #32]
 8023278:	4a55      	ldr	r2, [pc, #340]	; (80233d0 <dType2_Clock_Init+0x330>)
 802327a:	f892 3020 	ldrb.w	r3, [r2, #32]
 802327e:	f36f 03c7 	bfc	r3, #3, #5
 8023282:	f882 3020 	strb.w	r3, [r2, #32]
 8023286:	4a52      	ldr	r2, [pc, #328]	; (80233d0 <dType2_Clock_Init+0x330>)
 8023288:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 802328c:	f36f 0304 	bfc	r3, #0, #5
 8023290:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8023294:	4a4e      	ldr	r2, [pc, #312]	; (80233d0 <dType2_Clock_Init+0x330>)
 8023296:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 802329a:	f36f 1347 	bfc	r3, #5, #3
 802329e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		   		  steps_Style.text.font = &lv_font_roboto_22;
 80232a2:	4b4b      	ldr	r3, [pc, #300]	; (80233d0 <dType2_Clock_Init+0x330>)
 80232a4:	4a3b      	ldr	r2, [pc, #236]	; (8023394 <dType2_Clock_Init+0x2f4>)
 80232a6:	625a      	str	r2, [r3, #36]	; 0x24

		   		  lv_style_copy(&description_Style, &lv_style_plain);
 80232a8:	4934      	ldr	r1, [pc, #208]	; (802337c <dType2_Clock_Init+0x2dc>)
 80232aa:	484a      	ldr	r0, [pc, #296]	; (80233d4 <dType2_Clock_Init+0x334>)
 80232ac:	f7e8 f824 	bl	800b2f8 <lv_style_copy>
		   		  description_Style.text.font = &lv_font_unscii_8;
 80232b0:	4b48      	ldr	r3, [pc, #288]	; (80233d4 <dType2_Clock_Init+0x334>)
 80232b2:	4a49      	ldr	r2, [pc, #292]	; (80233d8 <dType2_Clock_Init+0x338>)
 80232b4:	625a      	str	r2, [r3, #36]	; 0x24
		   		  description_Style.text.color = LV_COLOR_GRAY;
 80232b6:	4a47      	ldr	r2, [pc, #284]	; (80233d4 <dType2_Clock_Init+0x334>)
 80232b8:	4b48      	ldr	r3, [pc, #288]	; (80233dc <dType2_Clock_Init+0x33c>)
 80232ba:	881b      	ldrh	r3, [r3, #0]
 80232bc:	8413      	strh	r3, [r2, #32]
		   		    if(theme){
 80232be:	79fb      	ldrb	r3, [r7, #7]
 80232c0:	2b00      	cmp	r3, #0
 80232c2:	d003      	beq.n	80232cc <dType2_Clock_Init+0x22c>
		   		    	description_Style.text.color = LV_COLOR_WHITE;
 80232c4:	4a43      	ldr	r2, [pc, #268]	; (80233d4 <dType2_Clock_Init+0x334>)
 80232c6:	4b34      	ldr	r3, [pc, #208]	; (8023398 <dType2_Clock_Init+0x2f8>)
 80232c8:	881b      	ldrh	r3, [r3, #0]
 80232ca:	8413      	strh	r3, [r2, #32]
		   		    }

		   		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 80232cc:	f7fe fe8b 	bl	8021fe6 <lv_scr_act>
 80232d0:	4603      	mov	r3, r0
 80232d2:	2100      	movs	r1, #0
 80232d4:	4618      	mov	r0, r3
 80232d6:	f7f8 fee3 	bl	801c0a0 <lv_label_create>
 80232da:	4602      	mov	r2, r0
 80232dc:	4b40      	ldr	r3, [pc, #256]	; (80233e0 <dType2_Clock_Init+0x340>)
 80232de:	601a      	str	r2, [r3, #0]
		   		 lv_obj_set_width(stepsLbl, 150);
 80232e0:	4b3f      	ldr	r3, [pc, #252]	; (80233e0 <dType2_Clock_Init+0x340>)
 80232e2:	681b      	ldr	r3, [r3, #0]
 80232e4:	2196      	movs	r1, #150	; 0x96
 80232e6:	4618      	mov	r0, r3
 80232e8:	f7e5 fd98 	bl	8008e1c <lv_obj_set_width>
		   		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 80232ec:	4b3c      	ldr	r3, [pc, #240]	; (80233e0 <dType2_Clock_Init+0x340>)
 80232ee:	681b      	ldr	r3, [r3, #0]
 80232f0:	4a37      	ldr	r2, [pc, #220]	; (80233d0 <dType2_Clock_Init+0x330>)
 80232f2:	2100      	movs	r1, #0
 80232f4:	4618      	mov	r0, r3
 80232f6:	f7fe fe81 	bl	8021ffc <lv_label_set_style>
		   		 snprintf(buffer, 8, "%04d", steps);
 80232fa:	4b3a      	ldr	r3, [pc, #232]	; (80233e4 <dType2_Clock_Init+0x344>)
 80232fc:	881b      	ldrh	r3, [r3, #0]
 80232fe:	4a3a      	ldr	r2, [pc, #232]	; (80233e8 <dType2_Clock_Init+0x348>)
 8023300:	2108      	movs	r1, #8
 8023302:	482b      	ldr	r0, [pc, #172]	; (80233b0 <dType2_Clock_Init+0x310>)
 8023304:	f007 fa7e 	bl	802a804 <sniprintf>
		   		 lv_label_set_text(stepsLbl, buffer);
 8023308:	4b35      	ldr	r3, [pc, #212]	; (80233e0 <dType2_Clock_Init+0x340>)
 802330a:	681b      	ldr	r3, [r3, #0]
 802330c:	4928      	ldr	r1, [pc, #160]	; (80233b0 <dType2_Clock_Init+0x310>)
 802330e:	4618      	mov	r0, r3
 8023310:	f7f8 fff8 	bl	801c304 <lv_label_set_text>
		   		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 8023314:	4b32      	ldr	r3, [pc, #200]	; (80233e0 <dType2_Clock_Init+0x340>)
 8023316:	6818      	ldr	r0, [r3, #0]
 8023318:	2328      	movs	r3, #40	; 0x28
 802331a:	9300      	str	r3, [sp, #0]
 802331c:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8023320:	2200      	movs	r2, #0
 8023322:	2100      	movs	r1, #0
 8023324:	f7e5 fda4 	bl	8008e70 <lv_obj_align>

		   		 stepsDescLbl = lv_label_create(lv_scr_act(), NULL);
 8023328:	f7fe fe5d 	bl	8021fe6 <lv_scr_act>
 802332c:	4603      	mov	r3, r0
 802332e:	2100      	movs	r1, #0
 8023330:	4618      	mov	r0, r3
 8023332:	f7f8 feb5 	bl	801c0a0 <lv_label_create>
 8023336:	4602      	mov	r2, r0
 8023338:	4b2c      	ldr	r3, [pc, #176]	; (80233ec <dType2_Clock_Init+0x34c>)
 802333a:	601a      	str	r2, [r3, #0]
		   		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802333c:	4b2b      	ldr	r3, [pc, #172]	; (80233ec <dType2_Clock_Init+0x34c>)
 802333e:	681b      	ldr	r3, [r3, #0]
 8023340:	4a24      	ldr	r2, [pc, #144]	; (80233d4 <dType2_Clock_Init+0x334>)
 8023342:	2100      	movs	r1, #0
 8023344:	4618      	mov	r0, r3
 8023346:	f7fe fe59 	bl	8021ffc <lv_label_set_style>
		   		 lv_label_set_text(stepsDescLbl, "steps");
 802334a:	4b28      	ldr	r3, [pc, #160]	; (80233ec <dType2_Clock_Init+0x34c>)
 802334c:	681b      	ldr	r3, [r3, #0]
 802334e:	4928      	ldr	r1, [pc, #160]	; (80233f0 <dType2_Clock_Init+0x350>)
 8023350:	4618      	mov	r0, r3
 8023352:	f7f8 ffd7 	bl	801c304 <lv_label_set_text>
		   		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -60, 55);
 8023356:	4b25      	ldr	r3, [pc, #148]	; (80233ec <dType2_Clock_Init+0x34c>)
 8023358:	6818      	ldr	r0, [r3, #0]
 802335a:	2337      	movs	r3, #55	; 0x37
 802335c:	9300      	str	r3, [sp, #0]
 802335e:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8023362:	2200      	movs	r2, #0
 8023364:	2100      	movs	r1, #0
 8023366:	f7e5 fd83 	bl	8008e70 <lv_obj_align>

		   		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 802336a:	f7fe fe3c 	bl	8021fe6 <lv_scr_act>
 802336e:	4603      	mov	r3, r0
 8023370:	2100      	movs	r1, #0
 8023372:	4618      	mov	r0, r3
 8023374:	f7f4 f892 	bl	801749c <lv_arc_create>
 8023378:	4602      	mov	r2, r0
 802337a:	e03b      	b.n	80233f4 <dType2_Clock_Init+0x354>
 802337c:	2001ba10 	.word	0x2001ba10
 8023380:	2001aac4 	.word	0x2001aac4
 8023384:	2000281c 	.word	0x2000281c
 8023388:	2001ab00 	.word	0x2001ab00
 802338c:	200027ec 	.word	0x200027ec
 8023390:	2001ab3c 	.word	0x2001ab3c
 8023394:	200017c4 	.word	0x200017c4
 8023398:	0802c9a8 	.word	0x0802c9a8
 802339c:	2001bbbc 	.word	0x2001bbbc
 80233a0:	2001bc91 	.word	0x2001bc91
 80233a4:	2001bc90 	.word	0x2001bc90
 80233a8:	2001bc80 	.word	0x2001bc80
 80233ac:	0802c9ec 	.word	0x0802c9ec
 80233b0:	2001bc1c 	.word	0x2001bc1c
 80233b4:	2001bbb4 	.word	0x2001bbb4
 80233b8:	2001c160 	.word	0x2001c160
 80233bc:	2001bbc0 	.word	0x2001bbc0
 80233c0:	2001bc82 	.word	0x2001bc82
 80233c4:	0802c9cc 	.word	0x0802c9cc
 80233c8:	2001bbac 	.word	0x2001bbac
 80233cc:	2001bc10 	.word	0x2001bc10
 80233d0:	2001ab78 	.word	0x2001ab78
 80233d4:	2001abb4 	.word	0x2001abb4
 80233d8:	200026d0 	.word	0x200026d0
 80233dc:	0802c9e8 	.word	0x0802c9e8
 80233e0:	2001bc30 	.word	0x2001bc30
 80233e4:	2001bc0c 	.word	0x2001bc0c
 80233e8:	0802c9b4 	.word	0x0802c9b4
 80233ec:	2001bbc4 	.word	0x2001bbc4
 80233f0:	0802c9bc 	.word	0x0802c9bc
 80233f4:	4b6e      	ldr	r3, [pc, #440]	; (80235b0 <dType2_Clock_Init+0x510>)
 80233f6:	601a      	str	r2, [r3, #0]
		   		  lv_obj_set_size(stepsArc, 80, 80);
 80233f8:	4b6d      	ldr	r3, [pc, #436]	; (80235b0 <dType2_Clock_Init+0x510>)
 80233fa:	681b      	ldr	r3, [r3, #0]
 80233fc:	2250      	movs	r2, #80	; 0x50
 80233fe:	2150      	movs	r1, #80	; 0x50
 8023400:	4618      	mov	r0, r3
 8023402:	f7e5 fc92 	bl	8008d2a <lv_obj_set_size>
		   		  lv_arc_set_angles(stepsArc, 0, 360);
 8023406:	4b6a      	ldr	r3, [pc, #424]	; (80235b0 <dType2_Clock_Init+0x510>)
 8023408:	681b      	ldr	r3, [r3, #0]
 802340a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802340e:	2100      	movs	r1, #0
 8023410:	4618      	mov	r0, r3
 8023412:	f7f4 f8bf 	bl	8017594 <lv_arc_set_angles>
		   		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8023416:	4b66      	ldr	r3, [pc, #408]	; (80235b0 <dType2_Clock_Init+0x510>)
 8023418:	681b      	ldr	r3, [r3, #0]
 802341a:	4a66      	ldr	r2, [pc, #408]	; (80235b4 <dType2_Clock_Init+0x514>)
 802341c:	2100      	movs	r1, #0
 802341e:	4618      	mov	r0, r3
 8023420:	f7f4 f8e1 	bl	80175e6 <lv_arc_set_style>
		   		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -60, 40);
 8023424:	4b62      	ldr	r3, [pc, #392]	; (80235b0 <dType2_Clock_Init+0x510>)
 8023426:	6818      	ldr	r0, [r3, #0]
 8023428:	2328      	movs	r3, #40	; 0x28
 802342a:	9300      	str	r3, [sp, #0]
 802342c:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8023430:	2200      	movs	r2, #0
 8023432:	2100      	movs	r1, #0
 8023434:	f7e5 fd1c 	bl	8008e70 <lv_obj_align>

		   		  //Kcal
		   		static lv_style_t kCals_Style;
		   		  lv_style_copy(&kCals_Style, &lv_style_plain);
 8023438:	495f      	ldr	r1, [pc, #380]	; (80235b8 <dType2_Clock_Init+0x518>)
 802343a:	4860      	ldr	r0, [pc, #384]	; (80235bc <dType2_Clock_Init+0x51c>)
 802343c:	f7e7 ff5c 	bl	800b2f8 <lv_style_copy>
		   		  kCals_Style.line.color = LV_COLOR_RED;
 8023440:	4a5e      	ldr	r2, [pc, #376]	; (80235bc <dType2_Clock_Init+0x51c>)
 8023442:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023446:	f36f 0302 	bfc	r3, #0, #3
 802344a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802344e:	4a5b      	ldr	r2, [pc, #364]	; (80235bc <dType2_Clock_Init+0x51c>)
 8023450:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8023454:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8023458:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802345c:	4a57      	ldr	r2, [pc, #348]	; (80235bc <dType2_Clock_Init+0x51c>)
 802345e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8023462:	f36f 0304 	bfc	r3, #0, #5
 8023466:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 802346a:	4a54      	ldr	r2, [pc, #336]	; (80235bc <dType2_Clock_Init+0x51c>)
 802346c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8023470:	f36f 1347 	bfc	r3, #5, #3
 8023474:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
		   		  kCals_Style.line.width = 5;
 8023478:	4b50      	ldr	r3, [pc, #320]	; (80235bc <dType2_Clock_Init+0x51c>)
 802347a:	2205      	movs	r2, #5
 802347c:	86da      	strh	r2, [r3, #54]	; 0x36
		   		  kCals_Style.text.color = LV_COLOR_RED;
 802347e:	4a4f      	ldr	r2, [pc, #316]	; (80235bc <dType2_Clock_Init+0x51c>)
 8023480:	f892 3020 	ldrb.w	r3, [r2, #32]
 8023484:	f36f 0302 	bfc	r3, #0, #3
 8023488:	f882 3020 	strb.w	r3, [r2, #32]
 802348c:	4a4b      	ldr	r2, [pc, #300]	; (80235bc <dType2_Clock_Init+0x51c>)
 802348e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8023492:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8023496:	f882 3020 	strb.w	r3, [r2, #32]
 802349a:	4a48      	ldr	r2, [pc, #288]	; (80235bc <dType2_Clock_Init+0x51c>)
 802349c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80234a0:	f36f 0304 	bfc	r3, #0, #5
 80234a4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80234a8:	4a44      	ldr	r2, [pc, #272]	; (80235bc <dType2_Clock_Init+0x51c>)
 80234aa:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80234ae:	f36f 1347 	bfc	r3, #5, #3
 80234b2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		   		  kCals_Style.text.font = &lv_font_roboto_22;
 80234b6:	4b41      	ldr	r3, [pc, #260]	; (80235bc <dType2_Clock_Init+0x51c>)
 80234b8:	4a41      	ldr	r2, [pc, #260]	; (80235c0 <dType2_Clock_Init+0x520>)
 80234ba:	625a      	str	r2, [r3, #36]	; 0x24

		   		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 80234bc:	f7fe fd93 	bl	8021fe6 <lv_scr_act>
 80234c0:	4603      	mov	r3, r0
 80234c2:	2100      	movs	r1, #0
 80234c4:	4618      	mov	r0, r3
 80234c6:	f7f8 fdeb 	bl	801c0a0 <lv_label_create>
 80234ca:	4602      	mov	r2, r0
 80234cc:	4b3d      	ldr	r3, [pc, #244]	; (80235c4 <dType2_Clock_Init+0x524>)
 80234ce:	601a      	str	r2, [r3, #0]
		   		 lv_obj_set_width(kCalsLbl, 150);
 80234d0:	4b3c      	ldr	r3, [pc, #240]	; (80235c4 <dType2_Clock_Init+0x524>)
 80234d2:	681b      	ldr	r3, [r3, #0]
 80234d4:	2196      	movs	r1, #150	; 0x96
 80234d6:	4618      	mov	r0, r3
 80234d8:	f7e5 fca0 	bl	8008e1c <lv_obj_set_width>
		   		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 80234dc:	4b39      	ldr	r3, [pc, #228]	; (80235c4 <dType2_Clock_Init+0x524>)
 80234de:	681b      	ldr	r3, [r3, #0]
 80234e0:	4a36      	ldr	r2, [pc, #216]	; (80235bc <dType2_Clock_Init+0x51c>)
 80234e2:	2100      	movs	r1, #0
 80234e4:	4618      	mov	r0, r3
 80234e6:	f7fe fd89 	bl	8021ffc <lv_label_set_style>
		   		 snprintf(buffer, 8, "%04d", kCals);
 80234ea:	4b37      	ldr	r3, [pc, #220]	; (80235c8 <dType2_Clock_Init+0x528>)
 80234ec:	881b      	ldrh	r3, [r3, #0]
 80234ee:	4a37      	ldr	r2, [pc, #220]	; (80235cc <dType2_Clock_Init+0x52c>)
 80234f0:	2108      	movs	r1, #8
 80234f2:	4837      	ldr	r0, [pc, #220]	; (80235d0 <dType2_Clock_Init+0x530>)
 80234f4:	f007 f986 	bl	802a804 <sniprintf>
		   		 lv_label_set_text(kCalsLbl, buffer);
 80234f8:	4b32      	ldr	r3, [pc, #200]	; (80235c4 <dType2_Clock_Init+0x524>)
 80234fa:	681b      	ldr	r3, [r3, #0]
 80234fc:	4934      	ldr	r1, [pc, #208]	; (80235d0 <dType2_Clock_Init+0x530>)
 80234fe:	4618      	mov	r0, r3
 8023500:	f7f8 ff00 	bl	801c304 <lv_label_set_text>
		   		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 8023504:	4b2f      	ldr	r3, [pc, #188]	; (80235c4 <dType2_Clock_Init+0x524>)
 8023506:	6818      	ldr	r0, [r3, #0]
 8023508:	2328      	movs	r3, #40	; 0x28
 802350a:	9300      	str	r3, [sp, #0]
 802350c:	233c      	movs	r3, #60	; 0x3c
 802350e:	2200      	movs	r2, #0
 8023510:	2100      	movs	r1, #0
 8023512:	f7e5 fcad 	bl	8008e70 <lv_obj_align>

		   		 kCalsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8023516:	f7fe fd66 	bl	8021fe6 <lv_scr_act>
 802351a:	4603      	mov	r3, r0
 802351c:	2100      	movs	r1, #0
 802351e:	4618      	mov	r0, r3
 8023520:	f7f8 fdbe 	bl	801c0a0 <lv_label_create>
 8023524:	4602      	mov	r2, r0
 8023526:	4b2b      	ldr	r3, [pc, #172]	; (80235d4 <dType2_Clock_Init+0x534>)
 8023528:	601a      	str	r2, [r3, #0]
		   		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802352a:	4b2a      	ldr	r3, [pc, #168]	; (80235d4 <dType2_Clock_Init+0x534>)
 802352c:	681b      	ldr	r3, [r3, #0]
 802352e:	4a2a      	ldr	r2, [pc, #168]	; (80235d8 <dType2_Clock_Init+0x538>)
 8023530:	2100      	movs	r1, #0
 8023532:	4618      	mov	r0, r3
 8023534:	f7fe fd62 	bl	8021ffc <lv_label_set_style>
		   		 lv_label_set_text(kCalsDescLbl, "kCals");
 8023538:	4b26      	ldr	r3, [pc, #152]	; (80235d4 <dType2_Clock_Init+0x534>)
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	4927      	ldr	r1, [pc, #156]	; (80235dc <dType2_Clock_Init+0x53c>)
 802353e:	4618      	mov	r0, r3
 8023540:	f7f8 fee0 	bl	801c304 <lv_label_set_text>
		   		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 60, 55);
 8023544:	4b23      	ldr	r3, [pc, #140]	; (80235d4 <dType2_Clock_Init+0x534>)
 8023546:	6818      	ldr	r0, [r3, #0]
 8023548:	2337      	movs	r3, #55	; 0x37
 802354a:	9300      	str	r3, [sp, #0]
 802354c:	233c      	movs	r3, #60	; 0x3c
 802354e:	2200      	movs	r2, #0
 8023550:	2100      	movs	r1, #0
 8023552:	f7e5 fc8d 	bl	8008e70 <lv_obj_align>

		   		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 8023556:	f7fe fd46 	bl	8021fe6 <lv_scr_act>
 802355a:	4603      	mov	r3, r0
 802355c:	2100      	movs	r1, #0
 802355e:	4618      	mov	r0, r3
 8023560:	f7f3 ff9c 	bl	801749c <lv_arc_create>
 8023564:	4602      	mov	r2, r0
 8023566:	4b1e      	ldr	r3, [pc, #120]	; (80235e0 <dType2_Clock_Init+0x540>)
 8023568:	601a      	str	r2, [r3, #0]
		   		  lv_obj_set_size(kCalsArc, 80, 80);
 802356a:	4b1d      	ldr	r3, [pc, #116]	; (80235e0 <dType2_Clock_Init+0x540>)
 802356c:	681b      	ldr	r3, [r3, #0]
 802356e:	2250      	movs	r2, #80	; 0x50
 8023570:	2150      	movs	r1, #80	; 0x50
 8023572:	4618      	mov	r0, r3
 8023574:	f7e5 fbd9 	bl	8008d2a <lv_obj_set_size>
		   		  lv_arc_set_angles(kCalsArc, 0, 360);
 8023578:	4b19      	ldr	r3, [pc, #100]	; (80235e0 <dType2_Clock_Init+0x540>)
 802357a:	681b      	ldr	r3, [r3, #0]
 802357c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8023580:	2100      	movs	r1, #0
 8023582:	4618      	mov	r0, r3
 8023584:	f7f4 f806 	bl	8017594 <lv_arc_set_angles>
		   		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8023588:	4b15      	ldr	r3, [pc, #84]	; (80235e0 <dType2_Clock_Init+0x540>)
 802358a:	681b      	ldr	r3, [r3, #0]
 802358c:	4a0b      	ldr	r2, [pc, #44]	; (80235bc <dType2_Clock_Init+0x51c>)
 802358e:	2100      	movs	r1, #0
 8023590:	4618      	mov	r0, r3
 8023592:	f7f4 f828 	bl	80175e6 <lv_arc_set_style>
		   		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 60, 40);
 8023596:	4b12      	ldr	r3, [pc, #72]	; (80235e0 <dType2_Clock_Init+0x540>)
 8023598:	6818      	ldr	r0, [r3, #0]
 802359a:	2328      	movs	r3, #40	; 0x28
 802359c:	9300      	str	r3, [sp, #0]
 802359e:	233c      	movs	r3, #60	; 0x3c
 80235a0:	2200      	movs	r2, #0
 80235a2:	2100      	movs	r1, #0
 80235a4:	f7e5 fc64 	bl	8008e70 <lv_obj_align>
}
 80235a8:	bf00      	nop
 80235aa:	3708      	adds	r7, #8
 80235ac:	46bd      	mov	sp, r7
 80235ae:	bd80      	pop	{r7, pc}
 80235b0:	2001bc14 	.word	0x2001bc14
 80235b4:	2001ab78 	.word	0x2001ab78
 80235b8:	2001ba10 	.word	0x2001ba10
 80235bc:	2001abf0 	.word	0x2001abf0
 80235c0:	200017c4 	.word	0x200017c4
 80235c4:	2001bc8c 	.word	0x2001bc8c
 80235c8:	2001bbb2 	.word	0x2001bbb2
 80235cc:	0802c9b4 	.word	0x0802c9b4
 80235d0:	2001bc1c 	.word	0x2001bc1c
 80235d4:	2001bc78 	.word	0x2001bc78
 80235d8:	2001abb4 	.word	0x2001abb4
 80235dc:	0802c9c4 	.word	0x0802c9c4
 80235e0:	2001bc94 	.word	0x2001bc94

080235e4 <MainScreen_Updater>:
/*This function using for update values*/
void MainScreen_Updater(void){
 80235e4:	b580      	push	{r7, lr}
 80235e6:	af00      	add	r7, sp, #0
	if(MS_taskController){
 80235e8:	4b0c      	ldr	r3, [pc, #48]	; (802361c <MainScreen_Updater+0x38>)
 80235ea:	781b      	ldrb	r3, [r3, #0]
 80235ec:	2b00      	cmp	r3, #0
 80235ee:	d012      	beq.n	8023616 <MainScreen_Updater+0x32>
	switch(MainScreenType){
 80235f0:	4b0b      	ldr	r3, [pc, #44]	; (8023620 <MainScreen_Updater+0x3c>)
 80235f2:	781b      	ldrb	r3, [r3, #0]
 80235f4:	2b00      	cmp	r3, #0
 80235f6:	d002      	beq.n	80235fe <MainScreen_Updater+0x1a>
 80235f8:	2b02      	cmp	r3, #2
 80235fa:	d005      	beq.n	8023608 <MainScreen_Updater+0x24>
	case tos_mainScreen_Type3:
		seconds_angle_loader();
		minutes_angle_loader();
		hours_angle_loader();
		break;
	default: break;
 80235fc:	e00c      	b.n	8023618 <MainScreen_Updater+0x34>
		minutes_angle_loader();
 80235fe:	f000 f903 	bl	8023808 <minutes_angle_loader>
		hours_angle_loader();
 8023602:	f000 f87d 	bl	8023700 <hours_angle_loader>
		break;
 8023606:	e007      	b.n	8023618 <MainScreen_Updater+0x34>
		seconds_angle_loader();
 8023608:	f000 f96a 	bl	80238e0 <seconds_angle_loader>
		minutes_angle_loader();
 802360c:	f000 f8fc 	bl	8023808 <minutes_angle_loader>
		hours_angle_loader();
 8023610:	f000 f876 	bl	8023700 <hours_angle_loader>
		break;
 8023614:	e000      	b.n	8023618 <MainScreen_Updater+0x34>
	}
	}
 8023616:	bf00      	nop
}
 8023618:	bf00      	nop
 802361a:	bd80      	pop	{r7, pc}
 802361c:	2001bc2d 	.word	0x2001bc2d
 8023620:	2001bbb0 	.word	0x2001bbb0

08023624 <batteryValueUpdater>:



/* This function using for battery value update
*/
void batteryValueUpdater(lv_task_t *t){
 8023624:	b580      	push	{r7, lr}
 8023626:	b084      	sub	sp, #16
 8023628:	af02      	add	r7, sp, #8
 802362a:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 802362c:	4b10      	ldr	r3, [pc, #64]	; (8023670 <batteryValueUpdater+0x4c>)
 802362e:	781b      	ldrb	r3, [r3, #0]
 8023630:	2b00      	cmp	r3, #0
 8023632:	d016      	beq.n	8023662 <batteryValueUpdater+0x3e>
		  lv_label_set_text(batteryLbl, batteryVal);
 8023634:	4b0f      	ldr	r3, [pc, #60]	; (8023674 <batteryValueUpdater+0x50>)
 8023636:	681a      	ldr	r2, [r3, #0]
 8023638:	4b0f      	ldr	r3, [pc, #60]	; (8023678 <batteryValueUpdater+0x54>)
 802363a:	681b      	ldr	r3, [r3, #0]
 802363c:	4619      	mov	r1, r3
 802363e:	4610      	mov	r0, r2
 8023640:	f7f8 fe60 	bl	801c304 <lv_label_set_text>
		  battery_style.text.color = batteryColor;
 8023644:	4a0d      	ldr	r2, [pc, #52]	; (802367c <batteryValueUpdater+0x58>)
 8023646:	4b0e      	ldr	r3, [pc, #56]	; (8023680 <batteryValueUpdater+0x5c>)
 8023648:	881b      	ldrh	r3, [r3, #0]
 802364a:	8413      	strh	r3, [r2, #32]
		  lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 802364c:	4b09      	ldr	r3, [pc, #36]	; (8023674 <batteryValueUpdater+0x50>)
 802364e:	6818      	ldr	r0, [r3, #0]
 8023650:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8023654:	9300      	str	r3, [sp, #0]
 8023656:	2364      	movs	r3, #100	; 0x64
 8023658:	2200      	movs	r2, #0
 802365a:	2100      	movs	r1, #0
 802365c:	f7e5 fc08 	bl	8008e70 <lv_obj_align>
}else lv_task_del(t);}
 8023660:	e002      	b.n	8023668 <batteryValueUpdater+0x44>
 8023662:	6878      	ldr	r0, [r7, #4]
 8023664:	f7f3 f9e2 	bl	8016a2c <lv_task_del>
 8023668:	bf00      	nop
 802366a:	3708      	adds	r7, #8
 802366c:	46bd      	mov	sp, r7
 802366e:	bd80      	pop	{r7, pc}
 8023670:	2001bc2d 	.word	0x2001bc2d
 8023674:	2001bc7c 	.word	0x2001bc7c
 8023678:	2001bc88 	.word	0x2001bc88
 802367c:	2001bc34 	.word	0x2001bc34
 8023680:	2001bc84 	.word	0x2001bc84

08023684 <bluetoothStatusUpdater>:
/* This function using for bluetooth status update
*/
void bluetoothStatusUpdater(lv_task_t *t){
 8023684:	b580      	push	{r7, lr}
 8023686:	b084      	sub	sp, #16
 8023688:	af02      	add	r7, sp, #8
 802368a:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 802368c:	4b15      	ldr	r3, [pc, #84]	; (80236e4 <bluetoothStatusUpdater+0x60>)
 802368e:	781b      	ldrb	r3, [r3, #0]
 8023690:	2b00      	cmp	r3, #0
 8023692:	d020      	beq.n	80236d6 <bluetoothStatusUpdater+0x52>
		if(bluetoothStatus){
 8023694:	4b14      	ldr	r3, [pc, #80]	; (80236e8 <bluetoothStatusUpdater+0x64>)
 8023696:	781b      	ldrb	r3, [r3, #0]
 8023698:	2b00      	cmp	r3, #0
 802369a:	d015      	beq.n	80236c8 <bluetoothStatusUpdater+0x44>
		      bluetooth_style.text.color = bluetoothColor;
 802369c:	4a13      	ldr	r2, [pc, #76]	; (80236ec <bluetoothStatusUpdater+0x68>)
 802369e:	4b14      	ldr	r3, [pc, #80]	; (80236f0 <bluetoothStatusUpdater+0x6c>)
 80236a0:	881b      	ldrh	r3, [r3, #0]
 80236a2:	8413      	strh	r3, [r2, #32]
			  lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 80236a4:	4b13      	ldr	r3, [pc, #76]	; (80236f4 <bluetoothStatusUpdater+0x70>)
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	4913      	ldr	r1, [pc, #76]	; (80236f8 <bluetoothStatusUpdater+0x74>)
 80236aa:	4618      	mov	r0, r3
 80236ac:	f7f8 fe2a 	bl	801c304 <lv_label_set_text>
			  lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 80236b0:	4b10      	ldr	r3, [pc, #64]	; (80236f4 <bluetoothStatusUpdater+0x70>)
 80236b2:	6818      	ldr	r0, [r3, #0]
 80236b4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80236b8:	9300      	str	r3, [sp, #0]
 80236ba:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80236be:	2200      	movs	r2, #0
 80236c0:	2100      	movs	r1, #0
 80236c2:	f7e5 fbd5 	bl	8008e70 <lv_obj_align>
		}
		else lv_label_set_text(bluetoothLbl, " ");
	}else lv_task_del(t);
}
 80236c6:	e009      	b.n	80236dc <bluetoothStatusUpdater+0x58>
		else lv_label_set_text(bluetoothLbl, " ");
 80236c8:	4b0a      	ldr	r3, [pc, #40]	; (80236f4 <bluetoothStatusUpdater+0x70>)
 80236ca:	681b      	ldr	r3, [r3, #0]
 80236cc:	490b      	ldr	r1, [pc, #44]	; (80236fc <bluetoothStatusUpdater+0x78>)
 80236ce:	4618      	mov	r0, r3
 80236d0:	f7f8 fe18 	bl	801c304 <lv_label_set_text>
}
 80236d4:	e002      	b.n	80236dc <bluetoothStatusUpdater+0x58>
	}else lv_task_del(t);
 80236d6:	6878      	ldr	r0, [r7, #4]
 80236d8:	f7f3 f9a8 	bl	8016a2c <lv_task_del>
}
 80236dc:	bf00      	nop
 80236de:	3708      	adds	r7, #8
 80236e0:	46bd      	mov	sp, r7
 80236e2:	bd80      	pop	{r7, pc}
 80236e4:	2001bc2d 	.word	0x2001bc2d
 80236e8:	2001bc2c 	.word	0x2001bc2c
 80236ec:	2001bbcc 	.word	0x2001bbcc
 80236f0:	2001bc70 	.word	0x2001bc70
 80236f4:	2001bc18 	.word	0x2001bc18
 80236f8:	0802c9b0 	.word	0x0802c9b0
 80236fc:	0802c9fc 	.word	0x0802c9fc

08023700 <hours_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set hours 
*/
void hours_angle_loader(void)
{	/*saat 12 veya 0 olduğunda saat çubuğu ilerlemiyor çöz*/
 8023700:	b590      	push	{r4, r7, lr}
 8023702:	b085      	sub	sp, #20
 8023704:	af00      	add	r7, sp, #0
		uint8_t hoursTmpVal=hours;
 8023706:	4b3a      	ldr	r3, [pc, #232]	; (80237f0 <hours_angle_loader+0xf0>)
 8023708:	781b      	ldrb	r3, [r3, #0]
 802370a:	73fb      	strb	r3, [r7, #15]
		if(hours>=12)hoursTmpVal=hours%12;
 802370c:	4b38      	ldr	r3, [pc, #224]	; (80237f0 <hours_angle_loader+0xf0>)
 802370e:	781b      	ldrb	r3, [r3, #0]
 8023710:	2b0b      	cmp	r3, #11
 8023712:	d90b      	bls.n	802372c <hours_angle_loader+0x2c>
 8023714:	4b36      	ldr	r3, [pc, #216]	; (80237f0 <hours_angle_loader+0xf0>)
 8023716:	781a      	ldrb	r2, [r3, #0]
 8023718:	4b36      	ldr	r3, [pc, #216]	; (80237f4 <hours_angle_loader+0xf4>)
 802371a:	fba3 1302 	umull	r1, r3, r3, r2
 802371e:	08d9      	lsrs	r1, r3, #3
 8023720:	460b      	mov	r3, r1
 8023722:	005b      	lsls	r3, r3, #1
 8023724:	440b      	add	r3, r1
 8023726:	009b      	lsls	r3, r3, #2
 8023728:	1ad3      	subs	r3, r2, r3
 802372a:	73fb      	strb	r3, [r7, #15]
		double hoursTemp = tos_Ratio(hoursTmpVal*60, 0, 11*60,0, 359);
 802372c:	7bfa      	ldrb	r2, [r7, #15]
 802372e:	4613      	mov	r3, r2
 8023730:	011b      	lsls	r3, r3, #4
 8023732:	1a9b      	subs	r3, r3, r2
 8023734:	009b      	lsls	r3, r3, #2
 8023736:	4618      	mov	r0, r3
 8023738:	f7dc ff04 	bl	8000544 <__aeabi_i2d>
 802373c:	4603      	mov	r3, r0
 802373e:	460c      	mov	r4, r1
 8023740:	ed9f 4b25 	vldr	d4, [pc, #148]	; 80237d8 <hours_angle_loader+0xd8>
 8023744:	ed9f 3b26 	vldr	d3, [pc, #152]	; 80237e0 <hours_angle_loader+0xe0>
 8023748:	ed9f 2b27 	vldr	d2, [pc, #156]	; 80237e8 <hours_angle_loader+0xe8>
 802374c:	ed9f 1b24 	vldr	d1, [pc, #144]	; 80237e0 <hours_angle_loader+0xe0>
 8023750:	ec44 3b10 	vmov	d0, r3, r4
 8023754:	f005 fe6c 	bl	8029430 <tos_Ratio>
 8023758:	ed87 0b00 	vstr	d0, [r7]
		if(hoursTemp < 180) lv_arc_set_angles(hoursArc, 180-hoursTemp ,180);
 802375c:	f04f 0200 	mov.w	r2, #0
 8023760:	4b25      	ldr	r3, [pc, #148]	; (80237f8 <hours_angle_loader+0xf8>)
 8023762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8023766:	f7dd f9c9 	bl	8000afc <__aeabi_dcmplt>
 802376a:	4603      	mov	r3, r0
 802376c:	2b00      	cmp	r3, #0
 802376e:	d016      	beq.n	802379e <hours_angle_loader+0x9e>
 8023770:	4b22      	ldr	r3, [pc, #136]	; (80237fc <hours_angle_loader+0xfc>)
 8023772:	681c      	ldr	r4, [r3, #0]
 8023774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023778:	f04f 0000 	mov.w	r0, #0
 802377c:	491e      	ldr	r1, [pc, #120]	; (80237f8 <hours_angle_loader+0xf8>)
 802377e:	f7dc fd93 	bl	80002a8 <__aeabi_dsub>
 8023782:	4602      	mov	r2, r0
 8023784:	460b      	mov	r3, r1
 8023786:	4610      	mov	r0, r2
 8023788:	4619      	mov	r1, r3
 802378a:	f7dd fa1d 	bl	8000bc8 <__aeabi_d2uiz>
 802378e:	4603      	mov	r3, r0
 8023790:	b29b      	uxth	r3, r3
 8023792:	22b4      	movs	r2, #180	; 0xb4
 8023794:	4619      	mov	r1, r3
 8023796:	4620      	mov	r0, r4
 8023798:	f7f3 fefc 	bl	8017594 <lv_arc_set_angles>
		    else lv_arc_set_angles(hoursArc, 540-hoursTemp ,180);
}
 802379c:	e015      	b.n	80237ca <hours_angle_loader+0xca>
		    else lv_arc_set_angles(hoursArc, 540-hoursTemp ,180);
 802379e:	4b17      	ldr	r3, [pc, #92]	; (80237fc <hours_angle_loader+0xfc>)
 80237a0:	681c      	ldr	r4, [r3, #0]
 80237a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80237a6:	f04f 0000 	mov.w	r0, #0
 80237aa:	4915      	ldr	r1, [pc, #84]	; (8023800 <hours_angle_loader+0x100>)
 80237ac:	f7dc fd7c 	bl	80002a8 <__aeabi_dsub>
 80237b0:	4602      	mov	r2, r0
 80237b2:	460b      	mov	r3, r1
 80237b4:	4610      	mov	r0, r2
 80237b6:	4619      	mov	r1, r3
 80237b8:	f7dd fa06 	bl	8000bc8 <__aeabi_d2uiz>
 80237bc:	4603      	mov	r3, r0
 80237be:	b29b      	uxth	r3, r3
 80237c0:	22b4      	movs	r2, #180	; 0xb4
 80237c2:	4619      	mov	r1, r3
 80237c4:	4620      	mov	r0, r4
 80237c6:	f7f3 fee5 	bl	8017594 <lv_arc_set_angles>
}
 80237ca:	bf00      	nop
 80237cc:	3714      	adds	r7, #20
 80237ce:	46bd      	mov	sp, r7
 80237d0:	bd90      	pop	{r4, r7, pc}
 80237d2:	bf00      	nop
 80237d4:	f3af 8000 	nop.w
 80237d8:	00000000 	.word	0x00000000
 80237dc:	40767000 	.word	0x40767000
	...
 80237ec:	4084a000 	.word	0x4084a000
 80237f0:	2001bc91 	.word	0x2001bc91
 80237f4:	aaaaaaab 	.word	0xaaaaaaab
 80237f8:	40668000 	.word	0x40668000
 80237fc:	2001bbc8 	.word	0x2001bbc8
 8023800:	4080e000 	.word	0x4080e000
 8023804:	00000000 	.word	0x00000000

08023808 <minutes_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set minutes
*/
void minutes_angle_loader(void)
{
 8023808:	b590      	push	{r4, r7, lr}
 802380a:	b083      	sub	sp, #12
 802380c:	af00      	add	r7, sp, #0
	double minutesTemp = tos_Ratio(minutes*60, 0, 59*60, 0, 359);
 802380e:	4b30      	ldr	r3, [pc, #192]	; (80238d0 <minutes_angle_loader+0xc8>)
 8023810:	781b      	ldrb	r3, [r3, #0]
 8023812:	461a      	mov	r2, r3
 8023814:	4613      	mov	r3, r2
 8023816:	011b      	lsls	r3, r3, #4
 8023818:	1a9b      	subs	r3, r3, r2
 802381a:	009b      	lsls	r3, r3, #2
 802381c:	4618      	mov	r0, r3
 802381e:	f7dc fe91 	bl	8000544 <__aeabi_i2d>
 8023822:	4603      	mov	r3, r0
 8023824:	460c      	mov	r4, r1
 8023826:	ed9f 4b24 	vldr	d4, [pc, #144]	; 80238b8 <minutes_angle_loader+0xb0>
 802382a:	ed9f 3b25 	vldr	d3, [pc, #148]	; 80238c0 <minutes_angle_loader+0xb8>
 802382e:	ed9f 2b26 	vldr	d2, [pc, #152]	; 80238c8 <minutes_angle_loader+0xc0>
 8023832:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80238c0 <minutes_angle_loader+0xb8>
 8023836:	ec44 3b10 	vmov	d0, r3, r4
 802383a:	f005 fdf9 	bl	8029430 <tos_Ratio>
 802383e:	ed87 0b00 	vstr	d0, [r7]
		if(minutesTemp < 180) lv_arc_set_angles(minutesArc, 180-minutesTemp ,180);
 8023842:	f04f 0200 	mov.w	r2, #0
 8023846:	4b23      	ldr	r3, [pc, #140]	; (80238d4 <minutes_angle_loader+0xcc>)
 8023848:	e9d7 0100 	ldrd	r0, r1, [r7]
 802384c:	f7dd f956 	bl	8000afc <__aeabi_dcmplt>
 8023850:	4603      	mov	r3, r0
 8023852:	2b00      	cmp	r3, #0
 8023854:	d016      	beq.n	8023884 <minutes_angle_loader+0x7c>
 8023856:	4b20      	ldr	r3, [pc, #128]	; (80238d8 <minutes_angle_loader+0xd0>)
 8023858:	681c      	ldr	r4, [r3, #0]
 802385a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802385e:	f04f 0000 	mov.w	r0, #0
 8023862:	491c      	ldr	r1, [pc, #112]	; (80238d4 <minutes_angle_loader+0xcc>)
 8023864:	f7dc fd20 	bl	80002a8 <__aeabi_dsub>
 8023868:	4602      	mov	r2, r0
 802386a:	460b      	mov	r3, r1
 802386c:	4610      	mov	r0, r2
 802386e:	4619      	mov	r1, r3
 8023870:	f7dd f9aa 	bl	8000bc8 <__aeabi_d2uiz>
 8023874:	4603      	mov	r3, r0
 8023876:	b29b      	uxth	r3, r3
 8023878:	22b4      	movs	r2, #180	; 0xb4
 802387a:	4619      	mov	r1, r3
 802387c:	4620      	mov	r0, r4
 802387e:	f7f3 fe89 	bl	8017594 <lv_arc_set_angles>
		    else lv_arc_set_angles(minutesArc, 540-minutesTemp ,180);

}
 8023882:	e015      	b.n	80238b0 <minutes_angle_loader+0xa8>
		    else lv_arc_set_angles(minutesArc, 540-minutesTemp ,180);
 8023884:	4b14      	ldr	r3, [pc, #80]	; (80238d8 <minutes_angle_loader+0xd0>)
 8023886:	681c      	ldr	r4, [r3, #0]
 8023888:	e9d7 2300 	ldrd	r2, r3, [r7]
 802388c:	f04f 0000 	mov.w	r0, #0
 8023890:	4912      	ldr	r1, [pc, #72]	; (80238dc <minutes_angle_loader+0xd4>)
 8023892:	f7dc fd09 	bl	80002a8 <__aeabi_dsub>
 8023896:	4602      	mov	r2, r0
 8023898:	460b      	mov	r3, r1
 802389a:	4610      	mov	r0, r2
 802389c:	4619      	mov	r1, r3
 802389e:	f7dd f993 	bl	8000bc8 <__aeabi_d2uiz>
 80238a2:	4603      	mov	r3, r0
 80238a4:	b29b      	uxth	r3, r3
 80238a6:	22b4      	movs	r2, #180	; 0xb4
 80238a8:	4619      	mov	r1, r3
 80238aa:	4620      	mov	r0, r4
 80238ac:	f7f3 fe72 	bl	8017594 <lv_arc_set_angles>
}
 80238b0:	bf00      	nop
 80238b2:	370c      	adds	r7, #12
 80238b4:	46bd      	mov	sp, r7
 80238b6:	bd90      	pop	{r4, r7, pc}
 80238b8:	00000000 	.word	0x00000000
 80238bc:	40767000 	.word	0x40767000
	...
 80238cc:	40aba800 	.word	0x40aba800
 80238d0:	2001bc90 	.word	0x2001bc90
 80238d4:	40668000 	.word	0x40668000
 80238d8:	2001bc08 	.word	0x2001bc08
 80238dc:	4080e000 	.word	0x4080e000

080238e0 <seconds_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set Seconds
*/
void seconds_angle_loader(void)
{
 80238e0:	b590      	push	{r4, r7, lr}
 80238e2:	b083      	sub	sp, #12
 80238e4:	af00      	add	r7, sp, #0
	double secondsTemp = tos_Ratio(seconds, 0, 59, 0, 359);
 80238e6:	4b2e      	ldr	r3, [pc, #184]	; (80239a0 <seconds_angle_loader+0xc0>)
 80238e8:	781b      	ldrb	r3, [r3, #0]
 80238ea:	4618      	mov	r0, r3
 80238ec:	f7dc fe1a 	bl	8000524 <__aeabi_ui2d>
 80238f0:	4603      	mov	r3, r0
 80238f2:	460c      	mov	r4, r1
 80238f4:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8023988 <seconds_angle_loader+0xa8>
 80238f8:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8023990 <seconds_angle_loader+0xb0>
 80238fc:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8023998 <seconds_angle_loader+0xb8>
 8023900:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023990 <seconds_angle_loader+0xb0>
 8023904:	ec44 3b10 	vmov	d0, r3, r4
 8023908:	f005 fd92 	bl	8029430 <tos_Ratio>
 802390c:	ed87 0b00 	vstr	d0, [r7]
		if(secondsTemp < 180) lv_arc_set_angles(secondsArc, 180-secondsTemp ,180);
 8023910:	f04f 0200 	mov.w	r2, #0
 8023914:	4b23      	ldr	r3, [pc, #140]	; (80239a4 <seconds_angle_loader+0xc4>)
 8023916:	e9d7 0100 	ldrd	r0, r1, [r7]
 802391a:	f7dd f8ef 	bl	8000afc <__aeabi_dcmplt>
 802391e:	4603      	mov	r3, r0
 8023920:	2b00      	cmp	r3, #0
 8023922:	d016      	beq.n	8023952 <seconds_angle_loader+0x72>
 8023924:	4b20      	ldr	r3, [pc, #128]	; (80239a8 <seconds_angle_loader+0xc8>)
 8023926:	681c      	ldr	r4, [r3, #0]
 8023928:	e9d7 2300 	ldrd	r2, r3, [r7]
 802392c:	f04f 0000 	mov.w	r0, #0
 8023930:	491c      	ldr	r1, [pc, #112]	; (80239a4 <seconds_angle_loader+0xc4>)
 8023932:	f7dc fcb9 	bl	80002a8 <__aeabi_dsub>
 8023936:	4602      	mov	r2, r0
 8023938:	460b      	mov	r3, r1
 802393a:	4610      	mov	r0, r2
 802393c:	4619      	mov	r1, r3
 802393e:	f7dd f943 	bl	8000bc8 <__aeabi_d2uiz>
 8023942:	4603      	mov	r3, r0
 8023944:	b29b      	uxth	r3, r3
 8023946:	22b4      	movs	r2, #180	; 0xb4
 8023948:	4619      	mov	r1, r3
 802394a:	4620      	mov	r0, r4
 802394c:	f7f3 fe22 	bl	8017594 <lv_arc_set_angles>
		    else lv_arc_set_angles(secondsArc, 540-secondsTemp ,180);

}
 8023950:	e015      	b.n	802397e <seconds_angle_loader+0x9e>
		    else lv_arc_set_angles(secondsArc, 540-secondsTemp ,180);
 8023952:	4b15      	ldr	r3, [pc, #84]	; (80239a8 <seconds_angle_loader+0xc8>)
 8023954:	681c      	ldr	r4, [r3, #0]
 8023956:	e9d7 2300 	ldrd	r2, r3, [r7]
 802395a:	f04f 0000 	mov.w	r0, #0
 802395e:	4913      	ldr	r1, [pc, #76]	; (80239ac <seconds_angle_loader+0xcc>)
 8023960:	f7dc fca2 	bl	80002a8 <__aeabi_dsub>
 8023964:	4602      	mov	r2, r0
 8023966:	460b      	mov	r3, r1
 8023968:	4610      	mov	r0, r2
 802396a:	4619      	mov	r1, r3
 802396c:	f7dd f92c 	bl	8000bc8 <__aeabi_d2uiz>
 8023970:	4603      	mov	r3, r0
 8023972:	b29b      	uxth	r3, r3
 8023974:	22b4      	movs	r2, #180	; 0xb4
 8023976:	4619      	mov	r1, r3
 8023978:	4620      	mov	r0, r4
 802397a:	f7f3 fe0b 	bl	8017594 <lv_arc_set_angles>
}
 802397e:	bf00      	nop
 8023980:	370c      	adds	r7, #12
 8023982:	46bd      	mov	sp, r7
 8023984:	bd90      	pop	{r4, r7, pc}
 8023986:	bf00      	nop
 8023988:	00000000 	.word	0x00000000
 802398c:	40767000 	.word	0x40767000
	...
 802399c:	404d8000 	.word	0x404d8000
 80239a0:	2001bc80 	.word	0x2001bc80
 80239a4:	40668000 	.word	0x40668000
 80239a8:	2001bbb8 	.word	0x2001bbb8
 80239ac:	4080e000 	.word	0x4080e000

080239b0 <digitalTimePrintTheScreen>:

/* This function using for digital clock print to screen*/
void digitalTimePrintTheScreen(lv_task_t *t){
 80239b0:	b580      	push	{r7, lr}
 80239b2:	b084      	sub	sp, #16
 80239b4:	af02      	add	r7, sp, #8
 80239b6:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 80239b8:	4b3f      	ldr	r3, [pc, #252]	; (8023ab8 <digitalTimePrintTheScreen+0x108>)
 80239ba:	781b      	ldrb	r3, [r3, #0]
 80239bc:	2b00      	cmp	r3, #0
 80239be:	d073      	beq.n	8023aa8 <digitalTimePrintTheScreen+0xf8>
		snprintf(buffer, 9, "%02d:%02d:%02d", hours,minutes,seconds);
 80239c0:	4b3e      	ldr	r3, [pc, #248]	; (8023abc <digitalTimePrintTheScreen+0x10c>)
 80239c2:	781b      	ldrb	r3, [r3, #0]
 80239c4:	4619      	mov	r1, r3
 80239c6:	4b3e      	ldr	r3, [pc, #248]	; (8023ac0 <digitalTimePrintTheScreen+0x110>)
 80239c8:	781b      	ldrb	r3, [r3, #0]
 80239ca:	461a      	mov	r2, r3
 80239cc:	4b3d      	ldr	r3, [pc, #244]	; (8023ac4 <digitalTimePrintTheScreen+0x114>)
 80239ce:	781b      	ldrb	r3, [r3, #0]
 80239d0:	9301      	str	r3, [sp, #4]
 80239d2:	9200      	str	r2, [sp, #0]
 80239d4:	460b      	mov	r3, r1
 80239d6:	4a3c      	ldr	r2, [pc, #240]	; (8023ac8 <digitalTimePrintTheScreen+0x118>)
 80239d8:	2109      	movs	r1, #9
 80239da:	483c      	ldr	r0, [pc, #240]	; (8023acc <digitalTimePrintTheScreen+0x11c>)
 80239dc:	f006 ff12 	bl	802a804 <sniprintf>
		    lv_label_set_text(digitalClock, buffer);
 80239e0:	4b3b      	ldr	r3, [pc, #236]	; (8023ad0 <digitalTimePrintTheScreen+0x120>)
 80239e2:	681b      	ldr	r3, [r3, #0]
 80239e4:	4939      	ldr	r1, [pc, #228]	; (8023acc <digitalTimePrintTheScreen+0x11c>)
 80239e6:	4618      	mov	r0, r3
 80239e8:	f7f8 fc8c 	bl	801c304 <lv_label_set_text>
			lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 80239ec:	4b38      	ldr	r3, [pc, #224]	; (8023ad0 <digitalTimePrintTheScreen+0x120>)
 80239ee:	6818      	ldr	r0, [r3, #0]
 80239f0:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80239f4:	9300      	str	r3, [sp, #0]
 80239f6:	2300      	movs	r3, #0
 80239f8:	2200      	movs	r2, #0
 80239fa:	2100      	movs	r1, #0
 80239fc:	f7e5 fa38 	bl	8008e70 <lv_obj_align>
			        //Digital Date
			    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 8023a00:	4b34      	ldr	r3, [pc, #208]	; (8023ad4 <digitalTimePrintTheScreen+0x124>)
 8023a02:	781b      	ldrb	r3, [r3, #0]
 8023a04:	4619      	mov	r1, r3
 8023a06:	4b34      	ldr	r3, [pc, #208]	; (8023ad8 <digitalTimePrintTheScreen+0x128>)
 8023a08:	781b      	ldrb	r3, [r3, #0]
 8023a0a:	461a      	mov	r2, r3
 8023a0c:	4b33      	ldr	r3, [pc, #204]	; (8023adc <digitalTimePrintTheScreen+0x12c>)
 8023a0e:	881b      	ldrh	r3, [r3, #0]
 8023a10:	9301      	str	r3, [sp, #4]
 8023a12:	9200      	str	r2, [sp, #0]
 8023a14:	460b      	mov	r3, r1
 8023a16:	4a32      	ldr	r2, [pc, #200]	; (8023ae0 <digitalTimePrintTheScreen+0x130>)
 8023a18:	2110      	movs	r1, #16
 8023a1a:	482c      	ldr	r0, [pc, #176]	; (8023acc <digitalTimePrintTheScreen+0x11c>)
 8023a1c:	f006 fef2 	bl	802a804 <sniprintf>
					lv_label_set_text(digitalDate, buffer);
 8023a20:	4b30      	ldr	r3, [pc, #192]	; (8023ae4 <digitalTimePrintTheScreen+0x134>)
 8023a22:	681b      	ldr	r3, [r3, #0]
 8023a24:	4929      	ldr	r1, [pc, #164]	; (8023acc <digitalTimePrintTheScreen+0x11c>)
 8023a26:	4618      	mov	r0, r3
 8023a28:	f7f8 fc6c 	bl	801c304 <lv_label_set_text>
			    	//Week Day
			    	lv_label_set_text(weekDay, weekDayStr);
 8023a2c:	4b2e      	ldr	r3, [pc, #184]	; (8023ae8 <digitalTimePrintTheScreen+0x138>)
 8023a2e:	681a      	ldr	r2, [r3, #0]
 8023a30:	4b2e      	ldr	r3, [pc, #184]	; (8023aec <digitalTimePrintTheScreen+0x13c>)
 8023a32:	681b      	ldr	r3, [r3, #0]
 8023a34:	4619      	mov	r1, r3
 8023a36:	4610      	mov	r0, r2
 8023a38:	f7f8 fc64 	bl	801c304 <lv_label_set_text>
			    	dateTmp=date;
 8023a3c:	4b25      	ldr	r3, [pc, #148]	; (8023ad4 <digitalTimePrintTheScreen+0x124>)
 8023a3e:	781a      	ldrb	r2, [r3, #0]
 8023a40:	4b2b      	ldr	r3, [pc, #172]	; (8023af0 <digitalTimePrintTheScreen+0x140>)
 8023a42:	701a      	strb	r2, [r3, #0]

					switch(MainScreenType){
 8023a44:	4b2b      	ldr	r3, [pc, #172]	; (8023af4 <digitalTimePrintTheScreen+0x144>)
 8023a46:	781b      	ldrb	r3, [r3, #0]
 8023a48:	2b00      	cmp	r3, #0
 8023a4a:	d002      	beq.n	8023a52 <digitalTimePrintTheScreen+0xa2>
 8023a4c:	2b01      	cmp	r3, #1
 8023a4e:	d015      	beq.n	8023a7c <digitalTimePrintTheScreen+0xcc>
					case 1: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
					break;
					}
	}else lv_task_del(t);
}
 8023a50:	e02e      	b.n	8023ab0 <digitalTimePrintTheScreen+0x100>
					case 0: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -55);
 8023a52:	4b24      	ldr	r3, [pc, #144]	; (8023ae4 <digitalTimePrintTheScreen+0x134>)
 8023a54:	6818      	ldr	r0, [r3, #0]
 8023a56:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8023a5a:	9300      	str	r3, [sp, #0]
 8023a5c:	2300      	movs	r3, #0
 8023a5e:	2200      	movs	r2, #0
 8023a60:	2100      	movs	r1, #0
 8023a62:	f7e5 fa05 	bl	8008e70 <lv_obj_align>
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -35);
 8023a66:	4b20      	ldr	r3, [pc, #128]	; (8023ae8 <digitalTimePrintTheScreen+0x138>)
 8023a68:	6818      	ldr	r0, [r3, #0]
 8023a6a:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8023a6e:	9300      	str	r3, [sp, #0]
 8023a70:	2300      	movs	r3, #0
 8023a72:	2200      	movs	r2, #0
 8023a74:	2100      	movs	r1, #0
 8023a76:	f7e5 f9fb 	bl	8008e70 <lv_obj_align>
					break;
 8023a7a:	e019      	b.n	8023ab0 <digitalTimePrintTheScreen+0x100>
					case 1: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 8023a7c:	4b19      	ldr	r3, [pc, #100]	; (8023ae4 <digitalTimePrintTheScreen+0x134>)
 8023a7e:	6818      	ldr	r0, [r3, #0]
 8023a80:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8023a84:	9300      	str	r3, [sp, #0]
 8023a86:	2300      	movs	r3, #0
 8023a88:	2200      	movs	r2, #0
 8023a8a:	2100      	movs	r1, #0
 8023a8c:	f7e5 f9f0 	bl	8008e70 <lv_obj_align>
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8023a90:	4b15      	ldr	r3, [pc, #84]	; (8023ae8 <digitalTimePrintTheScreen+0x138>)
 8023a92:	6818      	ldr	r0, [r3, #0]
 8023a94:	f06f 0309 	mvn.w	r3, #9
 8023a98:	9300      	str	r3, [sp, #0]
 8023a9a:	2300      	movs	r3, #0
 8023a9c:	2200      	movs	r2, #0
 8023a9e:	2100      	movs	r1, #0
 8023aa0:	f7e5 f9e6 	bl	8008e70 <lv_obj_align>
					break;
 8023aa4:	bf00      	nop
 8023aa6:	e003      	b.n	8023ab0 <digitalTimePrintTheScreen+0x100>
	}else lv_task_del(t);
 8023aa8:	6878      	ldr	r0, [r7, #4]
 8023aaa:	f7f2 ffbf 	bl	8016a2c <lv_task_del>
}
 8023aae:	e7ff      	b.n	8023ab0 <digitalTimePrintTheScreen+0x100>
 8023ab0:	bf00      	nop
 8023ab2:	3708      	adds	r7, #8
 8023ab4:	46bd      	mov	sp, r7
 8023ab6:	bd80      	pop	{r7, pc}
 8023ab8:	2001bc2d 	.word	0x2001bc2d
 8023abc:	2001bc91 	.word	0x2001bc91
 8023ac0:	2001bc90 	.word	0x2001bc90
 8023ac4:	2001bc80 	.word	0x2001bc80
 8023ac8:	0802c9ec 	.word	0x0802c9ec
 8023acc:	2001bc1c 	.word	0x2001bc1c
 8023ad0:	2001bbbc 	.word	0x2001bbbc
 8023ad4:	2001c160 	.word	0x2001c160
 8023ad8:	2001bbc0 	.word	0x2001bbc0
 8023adc:	2001bc82 	.word	0x2001bc82
 8023ae0:	0802c9cc 	.word	0x0802c9cc
 8023ae4:	2001bbb4 	.word	0x2001bbb4
 8023ae8:	2001bbac 	.word	0x2001bbac
 8023aec:	2001bc10 	.word	0x2001bc10
 8023af0:	2001bba8 	.word	0x2001bba8
 8023af4:	2001bbb0 	.word	0x2001bbb0

08023af8 <analogueDataPrintTheScreen>:
/*This function using for date and week day print to screen on analogue clock*/
void analogueDataPrintTheScreen(lv_task_t *t){
 8023af8:	b580      	push	{r7, lr}
 8023afa:	b084      	sub	sp, #16
 8023afc:	af02      	add	r7, sp, #8
 8023afe:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8023b00:	4b20      	ldr	r3, [pc, #128]	; (8023b84 <analogueDataPrintTheScreen+0x8c>)
 8023b02:	781b      	ldrb	r3, [r3, #0]
 8023b04:	2b00      	cmp	r3, #0
 8023b06:	d036      	beq.n	8023b76 <analogueDataPrintTheScreen+0x7e>
		 //Digital Date
			snprintf(buffer, 16, " "); //For cleaning buff
 8023b08:	4a1f      	ldr	r2, [pc, #124]	; (8023b88 <analogueDataPrintTheScreen+0x90>)
 8023b0a:	4b20      	ldr	r3, [pc, #128]	; (8023b8c <analogueDataPrintTheScreen+0x94>)
 8023b0c:	881b      	ldrh	r3, [r3, #0]
 8023b0e:	8013      	strh	r3, [r2, #0]
		    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 8023b10:	4b1f      	ldr	r3, [pc, #124]	; (8023b90 <analogueDataPrintTheScreen+0x98>)
 8023b12:	781b      	ldrb	r3, [r3, #0]
 8023b14:	4619      	mov	r1, r3
 8023b16:	4b1f      	ldr	r3, [pc, #124]	; (8023b94 <analogueDataPrintTheScreen+0x9c>)
 8023b18:	781b      	ldrb	r3, [r3, #0]
 8023b1a:	461a      	mov	r2, r3
 8023b1c:	4b1e      	ldr	r3, [pc, #120]	; (8023b98 <analogueDataPrintTheScreen+0xa0>)
 8023b1e:	881b      	ldrh	r3, [r3, #0]
 8023b20:	9301      	str	r3, [sp, #4]
 8023b22:	9200      	str	r2, [sp, #0]
 8023b24:	460b      	mov	r3, r1
 8023b26:	4a1d      	ldr	r2, [pc, #116]	; (8023b9c <analogueDataPrintTheScreen+0xa4>)
 8023b28:	2110      	movs	r1, #16
 8023b2a:	4817      	ldr	r0, [pc, #92]	; (8023b88 <analogueDataPrintTheScreen+0x90>)
 8023b2c:	f006 fe6a 	bl	802a804 <sniprintf>
				lv_label_set_text(digitalDate, buffer);
 8023b30:	4b1b      	ldr	r3, [pc, #108]	; (8023ba0 <analogueDataPrintTheScreen+0xa8>)
 8023b32:	681b      	ldr	r3, [r3, #0]
 8023b34:	4914      	ldr	r1, [pc, #80]	; (8023b88 <analogueDataPrintTheScreen+0x90>)
 8023b36:	4618      	mov	r0, r3
 8023b38:	f7f8 fbe4 	bl	801c304 <lv_label_set_text>
		    	//Week Day
		    	lv_label_set_text(weekDay, weekDayStr);
 8023b3c:	4b19      	ldr	r3, [pc, #100]	; (8023ba4 <analogueDataPrintTheScreen+0xac>)
 8023b3e:	681a      	ldr	r2, [r3, #0]
 8023b40:	4b19      	ldr	r3, [pc, #100]	; (8023ba8 <analogueDataPrintTheScreen+0xb0>)
 8023b42:	681b      	ldr	r3, [r3, #0]
 8023b44:	4619      	mov	r1, r3
 8023b46:	4610      	mov	r0, r2
 8023b48:	f7f8 fbdc 	bl	801c304 <lv_label_set_text>
		    	lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 8023b4c:	4b14      	ldr	r3, [pc, #80]	; (8023ba0 <analogueDataPrintTheScreen+0xa8>)
 8023b4e:	6818      	ldr	r0, [r3, #0]
 8023b50:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8023b54:	9300      	str	r3, [sp, #0]
 8023b56:	2300      	movs	r3, #0
 8023b58:	2200      	movs	r2, #0
 8023b5a:	2100      	movs	r1, #0
 8023b5c:	f7e5 f988 	bl	8008e70 <lv_obj_align>
		    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8023b60:	4b10      	ldr	r3, [pc, #64]	; (8023ba4 <analogueDataPrintTheScreen+0xac>)
 8023b62:	6818      	ldr	r0, [r3, #0]
 8023b64:	f06f 0309 	mvn.w	r3, #9
 8023b68:	9300      	str	r3, [sp, #0]
 8023b6a:	2300      	movs	r3, #0
 8023b6c:	2200      	movs	r2, #0
 8023b6e:	2100      	movs	r1, #0
 8023b70:	f7e5 f97e 	bl	8008e70 <lv_obj_align>
	}else lv_task_del(t);
}
 8023b74:	e002      	b.n	8023b7c <analogueDataPrintTheScreen+0x84>
	}else lv_task_del(t);
 8023b76:	6878      	ldr	r0, [r7, #4]
 8023b78:	f7f2 ff58 	bl	8016a2c <lv_task_del>
}
 8023b7c:	bf00      	nop
 8023b7e:	3708      	adds	r7, #8
 8023b80:	46bd      	mov	sp, r7
 8023b82:	bd80      	pop	{r7, pc}
 8023b84:	2001bc2d 	.word	0x2001bc2d
 8023b88:	2001bc1c 	.word	0x2001bc1c
 8023b8c:	0802c9fc 	.word	0x0802c9fc
 8023b90:	2001c160 	.word	0x2001c160
 8023b94:	2001bbc0 	.word	0x2001bbc0
 8023b98:	2001bc82 	.word	0x2001bc82
 8023b9c:	0802c9cc 	.word	0x0802c9cc
 8023ba0:	2001bbb4 	.word	0x2001bbb4
 8023ba4:	2001bbac 	.word	0x2001bbac
 8023ba8:	2001bc10 	.word	0x2001bc10
 8023bac:	00000000 	.word	0x00000000

08023bb0 <steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void steps_angle_loader(lv_task_t *t)
{	if(MS_taskController){
 8023bb0:	b590      	push	{r4, r7, lr}
 8023bb2:	b087      	sub	sp, #28
 8023bb4:	af02      	add	r7, sp, #8
 8023bb6:	6078      	str	r0, [r7, #4]
 8023bb8:	4b45      	ldr	r3, [pc, #276]	; (8023cd0 <steps_angle_loader+0x120>)
 8023bba:	781b      	ldrb	r3, [r3, #0]
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	d072      	beq.n	8023ca6 <steps_angle_loader+0xf6>
	snprintf(buffer, 8, "%04d", steps);
 8023bc0:	4b44      	ldr	r3, [pc, #272]	; (8023cd4 <steps_angle_loader+0x124>)
 8023bc2:	881b      	ldrh	r3, [r3, #0]
 8023bc4:	4a44      	ldr	r2, [pc, #272]	; (8023cd8 <steps_angle_loader+0x128>)
 8023bc6:	2108      	movs	r1, #8
 8023bc8:	4844      	ldr	r0, [pc, #272]	; (8023cdc <steps_angle_loader+0x12c>)
 8023bca:	f006 fe1b 	bl	802a804 <sniprintf>
		 lv_label_set_text(stepsLbl, buffer);
 8023bce:	4b44      	ldr	r3, [pc, #272]	; (8023ce0 <steps_angle_loader+0x130>)
 8023bd0:	681b      	ldr	r3, [r3, #0]
 8023bd2:	4942      	ldr	r1, [pc, #264]	; (8023cdc <steps_angle_loader+0x12c>)
 8023bd4:	4618      	mov	r0, r3
 8023bd6:	f7f8 fb95 	bl	801c304 <lv_label_set_text>
		 if(MainScreenType ==tos_mainScreen_Type3)lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -40, 40);
 8023bda:	4b42      	ldr	r3, [pc, #264]	; (8023ce4 <steps_angle_loader+0x134>)
 8023bdc:	781b      	ldrb	r3, [r3, #0]
 8023bde:	2b02      	cmp	r3, #2
 8023be0:	d10a      	bne.n	8023bf8 <steps_angle_loader+0x48>
 8023be2:	4b3f      	ldr	r3, [pc, #252]	; (8023ce0 <steps_angle_loader+0x130>)
 8023be4:	6818      	ldr	r0, [r3, #0]
 8023be6:	2328      	movs	r3, #40	; 0x28
 8023be8:	9300      	str	r3, [sp, #0]
 8023bea:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8023bee:	2200      	movs	r2, #0
 8023bf0:	2100      	movs	r1, #0
 8023bf2:	f7e5 f93d 	bl	8008e70 <lv_obj_align>
 8023bf6:	e009      	b.n	8023c0c <steps_angle_loader+0x5c>
		 else lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 8023bf8:	4b39      	ldr	r3, [pc, #228]	; (8023ce0 <steps_angle_loader+0x130>)
 8023bfa:	6818      	ldr	r0, [r3, #0]
 8023bfc:	2328      	movs	r3, #40	; 0x28
 8023bfe:	9300      	str	r3, [sp, #0]
 8023c00:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8023c04:	2200      	movs	r2, #0
 8023c06:	2100      	movs	r1, #0
 8023c08:	f7e5 f932 	bl	8008e70 <lv_obj_align>

		double stepsTemp = tos_Ratio(steps, 0, 10000, 0, 359);
 8023c0c:	4b31      	ldr	r3, [pc, #196]	; (8023cd4 <steps_angle_loader+0x124>)
 8023c0e:	881b      	ldrh	r3, [r3, #0]
 8023c10:	4618      	mov	r0, r3
 8023c12:	f7dc fc87 	bl	8000524 <__aeabi_ui2d>
 8023c16:	4603      	mov	r3, r0
 8023c18:	460c      	mov	r4, r1
 8023c1a:	ed9f 4b27 	vldr	d4, [pc, #156]	; 8023cb8 <steps_angle_loader+0x108>
 8023c1e:	ed9f 3b28 	vldr	d3, [pc, #160]	; 8023cc0 <steps_angle_loader+0x110>
 8023c22:	ed9f 2b29 	vldr	d2, [pc, #164]	; 8023cc8 <steps_angle_loader+0x118>
 8023c26:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8023cc0 <steps_angle_loader+0x110>
 8023c2a:	ec44 3b10 	vmov	d0, r3, r4
 8023c2e:	f005 fbff 	bl	8029430 <tos_Ratio>
 8023c32:	ed87 0b02 	vstr	d0, [r7, #8]
		if(stepsTemp < 180) lv_arc_set_angles(stepsArc, 180-stepsTemp ,180);
 8023c36:	f04f 0200 	mov.w	r2, #0
 8023c3a:	4b2b      	ldr	r3, [pc, #172]	; (8023ce8 <steps_angle_loader+0x138>)
 8023c3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8023c40:	f7dc ff5c 	bl	8000afc <__aeabi_dcmplt>
 8023c44:	4603      	mov	r3, r0
 8023c46:	2b00      	cmp	r3, #0
 8023c48:	d016      	beq.n	8023c78 <steps_angle_loader+0xc8>
 8023c4a:	4b28      	ldr	r3, [pc, #160]	; (8023cec <steps_angle_loader+0x13c>)
 8023c4c:	681c      	ldr	r4, [r3, #0]
 8023c4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023c52:	f04f 0000 	mov.w	r0, #0
 8023c56:	4924      	ldr	r1, [pc, #144]	; (8023ce8 <steps_angle_loader+0x138>)
 8023c58:	f7dc fb26 	bl	80002a8 <__aeabi_dsub>
 8023c5c:	4602      	mov	r2, r0
 8023c5e:	460b      	mov	r3, r1
 8023c60:	4610      	mov	r0, r2
 8023c62:	4619      	mov	r1, r3
 8023c64:	f7dc ffb0 	bl	8000bc8 <__aeabi_d2uiz>
 8023c68:	4603      	mov	r3, r0
 8023c6a:	b29b      	uxth	r3, r3
 8023c6c:	22b4      	movs	r2, #180	; 0xb4
 8023c6e:	4619      	mov	r1, r3
 8023c70:	4620      	mov	r0, r4
 8023c72:	f7f3 fc8f 	bl	8017594 <lv_arc_set_angles>
		    else lv_arc_set_angles(stepsArc, 540-stepsTemp ,180);
}else lv_task_del(t);
}
 8023c76:	e019      	b.n	8023cac <steps_angle_loader+0xfc>
		    else lv_arc_set_angles(stepsArc, 540-stepsTemp ,180);
 8023c78:	4b1c      	ldr	r3, [pc, #112]	; (8023cec <steps_angle_loader+0x13c>)
 8023c7a:	681c      	ldr	r4, [r3, #0]
 8023c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023c80:	f04f 0000 	mov.w	r0, #0
 8023c84:	491a      	ldr	r1, [pc, #104]	; (8023cf0 <steps_angle_loader+0x140>)
 8023c86:	f7dc fb0f 	bl	80002a8 <__aeabi_dsub>
 8023c8a:	4602      	mov	r2, r0
 8023c8c:	460b      	mov	r3, r1
 8023c8e:	4610      	mov	r0, r2
 8023c90:	4619      	mov	r1, r3
 8023c92:	f7dc ff99 	bl	8000bc8 <__aeabi_d2uiz>
 8023c96:	4603      	mov	r3, r0
 8023c98:	b29b      	uxth	r3, r3
 8023c9a:	22b4      	movs	r2, #180	; 0xb4
 8023c9c:	4619      	mov	r1, r3
 8023c9e:	4620      	mov	r0, r4
 8023ca0:	f7f3 fc78 	bl	8017594 <lv_arc_set_angles>
}
 8023ca4:	e002      	b.n	8023cac <steps_angle_loader+0xfc>
}else lv_task_del(t);
 8023ca6:	6878      	ldr	r0, [r7, #4]
 8023ca8:	f7f2 fec0 	bl	8016a2c <lv_task_del>
}
 8023cac:	bf00      	nop
 8023cae:	3714      	adds	r7, #20
 8023cb0:	46bd      	mov	sp, r7
 8023cb2:	bd90      	pop	{r4, r7, pc}
 8023cb4:	f3af 8000 	nop.w
 8023cb8:	00000000 	.word	0x00000000
 8023cbc:	40767000 	.word	0x40767000
	...
 8023ccc:	40c38800 	.word	0x40c38800
 8023cd0:	2001bc2d 	.word	0x2001bc2d
 8023cd4:	2001bc0c 	.word	0x2001bc0c
 8023cd8:	0802c9b4 	.word	0x0802c9b4
 8023cdc:	2001bc1c 	.word	0x2001bc1c
 8023ce0:	2001bc30 	.word	0x2001bc30
 8023ce4:	2001bbb0 	.word	0x2001bbb0
 8023ce8:	40668000 	.word	0x40668000
 8023cec:	2001bc14 	.word	0x2001bc14
 8023cf0:	4080e000 	.word	0x4080e000
 8023cf4:	00000000 	.word	0x00000000

08023cf8 <kCals_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCals
*/
void kCals_angle_loader(lv_task_t *t)
{	if(MS_taskController){
 8023cf8:	b590      	push	{r4, r7, lr}
 8023cfa:	b087      	sub	sp, #28
 8023cfc:	af02      	add	r7, sp, #8
 8023cfe:	6078      	str	r0, [r7, #4]
 8023d00:	4b43      	ldr	r3, [pc, #268]	; (8023e10 <kCals_angle_loader+0x118>)
 8023d02:	781b      	ldrb	r3, [r3, #0]
 8023d04:	2b00      	cmp	r3, #0
 8023d06:	d070      	beq.n	8023dea <kCals_angle_loader+0xf2>
	 	 	 snprintf(buffer, 8, "%04d", kCals);
 8023d08:	4b42      	ldr	r3, [pc, #264]	; (8023e14 <kCals_angle_loader+0x11c>)
 8023d0a:	881b      	ldrh	r3, [r3, #0]
 8023d0c:	4a42      	ldr	r2, [pc, #264]	; (8023e18 <kCals_angle_loader+0x120>)
 8023d0e:	2108      	movs	r1, #8
 8023d10:	4842      	ldr	r0, [pc, #264]	; (8023e1c <kCals_angle_loader+0x124>)
 8023d12:	f006 fd77 	bl	802a804 <sniprintf>
			 lv_label_set_text(kCalsLbl, buffer);
 8023d16:	4b42      	ldr	r3, [pc, #264]	; (8023e20 <kCals_angle_loader+0x128>)
 8023d18:	681b      	ldr	r3, [r3, #0]
 8023d1a:	4940      	ldr	r1, [pc, #256]	; (8023e1c <kCals_angle_loader+0x124>)
 8023d1c:	4618      	mov	r0, r3
 8023d1e:	f7f8 faf1 	bl	801c304 <lv_label_set_text>
			 if(MainScreenType ==tos_mainScreen_Type3) lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 40, 40);
 8023d22:	4b40      	ldr	r3, [pc, #256]	; (8023e24 <kCals_angle_loader+0x12c>)
 8023d24:	781b      	ldrb	r3, [r3, #0]
 8023d26:	2b02      	cmp	r3, #2
 8023d28:	d109      	bne.n	8023d3e <kCals_angle_loader+0x46>
 8023d2a:	4b3d      	ldr	r3, [pc, #244]	; (8023e20 <kCals_angle_loader+0x128>)
 8023d2c:	6818      	ldr	r0, [r3, #0]
 8023d2e:	2328      	movs	r3, #40	; 0x28
 8023d30:	9300      	str	r3, [sp, #0]
 8023d32:	2328      	movs	r3, #40	; 0x28
 8023d34:	2200      	movs	r2, #0
 8023d36:	2100      	movs	r1, #0
 8023d38:	f7e5 f89a 	bl	8008e70 <lv_obj_align>
 8023d3c:	e008      	b.n	8023d50 <kCals_angle_loader+0x58>
			 else lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 8023d3e:	4b38      	ldr	r3, [pc, #224]	; (8023e20 <kCals_angle_loader+0x128>)
 8023d40:	6818      	ldr	r0, [r3, #0]
 8023d42:	2328      	movs	r3, #40	; 0x28
 8023d44:	9300      	str	r3, [sp, #0]
 8023d46:	233c      	movs	r3, #60	; 0x3c
 8023d48:	2200      	movs	r2, #0
 8023d4a:	2100      	movs	r1, #0
 8023d4c:	f7e5 f890 	bl	8008e70 <lv_obj_align>

		double kCalsTemp = tos_Ratio(kCals, 0, 10000, 0, 359);
 8023d50:	4b30      	ldr	r3, [pc, #192]	; (8023e14 <kCals_angle_loader+0x11c>)
 8023d52:	881b      	ldrh	r3, [r3, #0]
 8023d54:	4618      	mov	r0, r3
 8023d56:	f7dc fbe5 	bl	8000524 <__aeabi_ui2d>
 8023d5a:	4603      	mov	r3, r0
 8023d5c:	460c      	mov	r4, r1
 8023d5e:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8023df8 <kCals_angle_loader+0x100>
 8023d62:	ed9f 3b27 	vldr	d3, [pc, #156]	; 8023e00 <kCals_angle_loader+0x108>
 8023d66:	ed9f 2b28 	vldr	d2, [pc, #160]	; 8023e08 <kCals_angle_loader+0x110>
 8023d6a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8023e00 <kCals_angle_loader+0x108>
 8023d6e:	ec44 3b10 	vmov	d0, r3, r4
 8023d72:	f005 fb5d 	bl	8029430 <tos_Ratio>
 8023d76:	ed87 0b02 	vstr	d0, [r7, #8]
		if(kCalsTemp < 180) lv_arc_set_angles(kCalsArc, 180-kCalsTemp ,180);
 8023d7a:	f04f 0200 	mov.w	r2, #0
 8023d7e:	4b2a      	ldr	r3, [pc, #168]	; (8023e28 <kCals_angle_loader+0x130>)
 8023d80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8023d84:	f7dc feba 	bl	8000afc <__aeabi_dcmplt>
 8023d88:	4603      	mov	r3, r0
 8023d8a:	2b00      	cmp	r3, #0
 8023d8c:	d016      	beq.n	8023dbc <kCals_angle_loader+0xc4>
 8023d8e:	4b27      	ldr	r3, [pc, #156]	; (8023e2c <kCals_angle_loader+0x134>)
 8023d90:	681c      	ldr	r4, [r3, #0]
 8023d92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023d96:	f04f 0000 	mov.w	r0, #0
 8023d9a:	4923      	ldr	r1, [pc, #140]	; (8023e28 <kCals_angle_loader+0x130>)
 8023d9c:	f7dc fa84 	bl	80002a8 <__aeabi_dsub>
 8023da0:	4602      	mov	r2, r0
 8023da2:	460b      	mov	r3, r1
 8023da4:	4610      	mov	r0, r2
 8023da6:	4619      	mov	r1, r3
 8023da8:	f7dc ff0e 	bl	8000bc8 <__aeabi_d2uiz>
 8023dac:	4603      	mov	r3, r0
 8023dae:	b29b      	uxth	r3, r3
 8023db0:	22b4      	movs	r2, #180	; 0xb4
 8023db2:	4619      	mov	r1, r3
 8023db4:	4620      	mov	r0, r4
 8023db6:	f7f3 fbed 	bl	8017594 <lv_arc_set_angles>
		    else lv_arc_set_angles(kCalsArc, 540-kCalsTemp ,180);
}else lv_task_del(t);
}
 8023dba:	e019      	b.n	8023df0 <kCals_angle_loader+0xf8>
		    else lv_arc_set_angles(kCalsArc, 540-kCalsTemp ,180);
 8023dbc:	4b1b      	ldr	r3, [pc, #108]	; (8023e2c <kCals_angle_loader+0x134>)
 8023dbe:	681c      	ldr	r4, [r3, #0]
 8023dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023dc4:	f04f 0000 	mov.w	r0, #0
 8023dc8:	4919      	ldr	r1, [pc, #100]	; (8023e30 <kCals_angle_loader+0x138>)
 8023dca:	f7dc fa6d 	bl	80002a8 <__aeabi_dsub>
 8023dce:	4602      	mov	r2, r0
 8023dd0:	460b      	mov	r3, r1
 8023dd2:	4610      	mov	r0, r2
 8023dd4:	4619      	mov	r1, r3
 8023dd6:	f7dc fef7 	bl	8000bc8 <__aeabi_d2uiz>
 8023dda:	4603      	mov	r3, r0
 8023ddc:	b29b      	uxth	r3, r3
 8023dde:	22b4      	movs	r2, #180	; 0xb4
 8023de0:	4619      	mov	r1, r3
 8023de2:	4620      	mov	r0, r4
 8023de4:	f7f3 fbd6 	bl	8017594 <lv_arc_set_angles>
}
 8023de8:	e002      	b.n	8023df0 <kCals_angle_loader+0xf8>
}else lv_task_del(t);
 8023dea:	6878      	ldr	r0, [r7, #4]
 8023dec:	f7f2 fe1e 	bl	8016a2c <lv_task_del>
}
 8023df0:	bf00      	nop
 8023df2:	3714      	adds	r7, #20
 8023df4:	46bd      	mov	sp, r7
 8023df6:	bd90      	pop	{r4, r7, pc}
 8023df8:	00000000 	.word	0x00000000
 8023dfc:	40767000 	.word	0x40767000
	...
 8023e0c:	40c38800 	.word	0x40c38800
 8023e10:	2001bc2d 	.word	0x2001bc2d
 8023e14:	2001bbb2 	.word	0x2001bbb2
 8023e18:	0802c9b4 	.word	0x0802c9b4
 8023e1c:	2001bc1c 	.word	0x2001bc1c
 8023e20:	2001bc8c 	.word	0x2001bc8c
 8023e24:	2001bbb0 	.word	0x2001bbb0
 8023e28:	40668000 	.word	0x40668000
 8023e2c:	2001bc94 	.word	0x2001bc94
 8023e30:	4080e000 	.word	0x4080e000

08023e34 <MainScreen_SetTime>:
//Getter and setter functions
void MainScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 8023e34:	b480      	push	{r7}
 8023e36:	b083      	sub	sp, #12
 8023e38:	af00      	add	r7, sp, #0
 8023e3a:	4603      	mov	r3, r0
 8023e3c:	71fb      	strb	r3, [r7, #7]
 8023e3e:	460b      	mov	r3, r1
 8023e40:	71bb      	strb	r3, [r7, #6]
 8023e42:	4613      	mov	r3, r2
 8023e44:	717b      	strb	r3, [r7, #5]
	hours = getHours;
 8023e46:	4a07      	ldr	r2, [pc, #28]	; (8023e64 <MainScreen_SetTime+0x30>)
 8023e48:	79fb      	ldrb	r3, [r7, #7]
 8023e4a:	7013      	strb	r3, [r2, #0]
	minutes = getMinutes;
 8023e4c:	4a06      	ldr	r2, [pc, #24]	; (8023e68 <MainScreen_SetTime+0x34>)
 8023e4e:	79bb      	ldrb	r3, [r7, #6]
 8023e50:	7013      	strb	r3, [r2, #0]
	seconds = getSeconds;
 8023e52:	4a06      	ldr	r2, [pc, #24]	; (8023e6c <MainScreen_SetTime+0x38>)
 8023e54:	797b      	ldrb	r3, [r7, #5]
 8023e56:	7013      	strb	r3, [r2, #0]
}
 8023e58:	bf00      	nop
 8023e5a:	370c      	adds	r7, #12
 8023e5c:	46bd      	mov	sp, r7
 8023e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e62:	4770      	bx	lr
 8023e64:	2001bc91 	.word	0x2001bc91
 8023e68:	2001bc90 	.word	0x2001bc90
 8023e6c:	2001bc80 	.word	0x2001bc80

08023e70 <MainScreen_SetDate>:
void MainScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate, char* getWeekDay) {
 8023e70:	b480      	push	{r7}
 8023e72:	b083      	sub	sp, #12
 8023e74:	af00      	add	r7, sp, #0
 8023e76:	603b      	str	r3, [r7, #0]
 8023e78:	4603      	mov	r3, r0
 8023e7a:	71fb      	strb	r3, [r7, #7]
 8023e7c:	460b      	mov	r3, r1
 8023e7e:	71bb      	strb	r3, [r7, #6]
 8023e80:	4613      	mov	r3, r2
 8023e82:	717b      	strb	r3, [r7, #5]
	year =getYear+2000;
 8023e84:	79fb      	ldrb	r3, [r7, #7]
 8023e86:	b29b      	uxth	r3, r3
 8023e88:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8023e8c:	b29a      	uxth	r2, r3
 8023e8e:	4b08      	ldr	r3, [pc, #32]	; (8023eb0 <MainScreen_SetDate+0x40>)
 8023e90:	801a      	strh	r2, [r3, #0]
	month = getMonth;
 8023e92:	4a08      	ldr	r2, [pc, #32]	; (8023eb4 <MainScreen_SetDate+0x44>)
 8023e94:	79bb      	ldrb	r3, [r7, #6]
 8023e96:	7013      	strb	r3, [r2, #0]
	date = getDate;
 8023e98:	4a07      	ldr	r2, [pc, #28]	; (8023eb8 <MainScreen_SetDate+0x48>)
 8023e9a:	797b      	ldrb	r3, [r7, #5]
 8023e9c:	7013      	strb	r3, [r2, #0]
	weekDayStr =getWeekDay;
 8023e9e:	4a07      	ldr	r2, [pc, #28]	; (8023ebc <MainScreen_SetDate+0x4c>)
 8023ea0:	683b      	ldr	r3, [r7, #0]
 8023ea2:	6013      	str	r3, [r2, #0]

}
 8023ea4:	bf00      	nop
 8023ea6:	370c      	adds	r7, #12
 8023ea8:	46bd      	mov	sp, r7
 8023eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023eae:	4770      	bx	lr
 8023eb0:	2001bc82 	.word	0x2001bc82
 8023eb4:	2001bbc0 	.word	0x2001bbc0
 8023eb8:	2001c160 	.word	0x2001c160
 8023ebc:	2001bc10 	.word	0x2001bc10

08023ec0 <MainScreen_SetBatteryVal>:
void MainScreen_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
	steps =getSteps;
	kCals =getKcals;
}
void MainScreen_SetBatteryVal(char* getBatteryVal, lv_color_t getBatteryColor) {
 8023ec0:	b480      	push	{r7}
 8023ec2:	b083      	sub	sp, #12
 8023ec4:	af00      	add	r7, sp, #0
 8023ec6:	6078      	str	r0, [r7, #4]
 8023ec8:	8039      	strh	r1, [r7, #0]
	batteryVal =getBatteryVal;
 8023eca:	4a06      	ldr	r2, [pc, #24]	; (8023ee4 <MainScreen_SetBatteryVal+0x24>)
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	6013      	str	r3, [r2, #0]
	batteryColor =getBatteryColor;
 8023ed0:	4a05      	ldr	r2, [pc, #20]	; (8023ee8 <MainScreen_SetBatteryVal+0x28>)
 8023ed2:	883b      	ldrh	r3, [r7, #0]
 8023ed4:	8013      	strh	r3, [r2, #0]
}
 8023ed6:	bf00      	nop
 8023ed8:	370c      	adds	r7, #12
 8023eda:	46bd      	mov	sp, r7
 8023edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ee0:	4770      	bx	lr
 8023ee2:	bf00      	nop
 8023ee4:	2001bc88 	.word	0x2001bc88
 8023ee8:	2001bc84 	.word	0x2001bc84

08023eec <MainScreen_SetBluetoothStatusVal>:
void MainScreen_SetBluetoothStatusVal(bool getBluetoothStatus, lv_color_t getBluetoothColor) {
 8023eec:	b480      	push	{r7}
 8023eee:	b083      	sub	sp, #12
 8023ef0:	af00      	add	r7, sp, #0
 8023ef2:	4603      	mov	r3, r0
 8023ef4:	80b9      	strh	r1, [r7, #4]
 8023ef6:	71fb      	strb	r3, [r7, #7]
	bluetoothStatus =getBluetoothStatus;
 8023ef8:	4a05      	ldr	r2, [pc, #20]	; (8023f10 <MainScreen_SetBluetoothStatusVal+0x24>)
 8023efa:	79fb      	ldrb	r3, [r7, #7]
 8023efc:	7013      	strb	r3, [r2, #0]
	bluetoothColor =getBluetoothColor;
 8023efe:	4a05      	ldr	r2, [pc, #20]	; (8023f14 <MainScreen_SetBluetoothStatusVal+0x28>)
 8023f00:	88bb      	ldrh	r3, [r7, #4]
 8023f02:	8013      	strh	r3, [r2, #0]
}
 8023f04:	bf00      	nop
 8023f06:	370c      	adds	r7, #12
 8023f08:	46bd      	mov	sp, r7
 8023f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f0e:	4770      	bx	lr
 8023f10:	2001bc2c 	.word	0x2001bc2c
 8023f14:	2001bc70 	.word	0x2001bc70

08023f18 <MainScreen_TaskControllerSet>:
void MainScreen_TaskControllerSet(bool active){
 8023f18:	b480      	push	{r7}
 8023f1a:	b083      	sub	sp, #12
 8023f1c:	af00      	add	r7, sp, #0
 8023f1e:	4603      	mov	r3, r0
 8023f20:	71fb      	strb	r3, [r7, #7]
	MS_taskController = active;
 8023f22:	4a04      	ldr	r2, [pc, #16]	; (8023f34 <MainScreen_TaskControllerSet+0x1c>)
 8023f24:	79fb      	ldrb	r3, [r7, #7]
 8023f26:	7013      	strb	r3, [r2, #0]
}
 8023f28:	bf00      	nop
 8023f2a:	370c      	adds	r7, #12
 8023f2c:	46bd      	mov	sp, r7
 8023f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f32:	4770      	bx	lr
 8023f34:	2001bc2d 	.word	0x2001bc2d

08023f38 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8023f38:	b480      	push	{r7}
 8023f3a:	b085      	sub	sp, #20
 8023f3c:	af00      	add	r7, sp, #0
 8023f3e:	4603      	mov	r3, r0
 8023f40:	71fb      	strb	r3, [r7, #7]
 8023f42:	460b      	mov	r3, r1
 8023f44:	71bb      	strb	r3, [r7, #6]
 8023f46:	4613      	mov	r3, r2
 8023f48:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8023f4a:	79bb      	ldrb	r3, [r7, #6]
 8023f4c:	095b      	lsrs	r3, r3, #5
 8023f4e:	b2db      	uxtb	r3, r3
 8023f50:	f003 0307 	and.w	r3, r3, #7
 8023f54:	b2da      	uxtb	r2, r3
 8023f56:	7b3b      	ldrb	r3, [r7, #12]
 8023f58:	f362 0302 	bfi	r3, r2, #0, #3
 8023f5c:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8023f5e:	79fb      	ldrb	r3, [r7, #7]
 8023f60:	08db      	lsrs	r3, r3, #3
 8023f62:	b2db      	uxtb	r3, r3
 8023f64:	f003 031f 	and.w	r3, r3, #31
 8023f68:	b2da      	uxtb	r2, r3
 8023f6a:	7b3b      	ldrb	r3, [r7, #12]
 8023f6c:	f362 03c7 	bfi	r3, r2, #3, #5
 8023f70:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8023f72:	797b      	ldrb	r3, [r7, #5]
 8023f74:	08db      	lsrs	r3, r3, #3
 8023f76:	b2db      	uxtb	r3, r3
 8023f78:	f003 031f 	and.w	r3, r3, #31
 8023f7c:	b2da      	uxtb	r2, r3
 8023f7e:	7b7b      	ldrb	r3, [r7, #13]
 8023f80:	f362 0304 	bfi	r3, r2, #0, #5
 8023f84:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8023f86:	79bb      	ldrb	r3, [r7, #6]
 8023f88:	089b      	lsrs	r3, r3, #2
 8023f8a:	b2db      	uxtb	r3, r3
 8023f8c:	f003 0307 	and.w	r3, r3, #7
 8023f90:	b2da      	uxtb	r2, r3
 8023f92:	7b7b      	ldrb	r3, [r7, #13]
 8023f94:	f362 1347 	bfi	r3, r2, #5, #3
 8023f98:	737b      	strb	r3, [r7, #13]
    return color;
 8023f9a:	89bb      	ldrh	r3, [r7, #12]
}
 8023f9c:	4618      	mov	r0, r3
 8023f9e:	3714      	adds	r7, #20
 8023fa0:	46bd      	mov	sp, r7
 8023fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fa6:	4770      	bx	lr

08023fa8 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8023fa8:	b580      	push	{r7, lr}
 8023faa:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8023fac:	f7f1 f8c2 	bl	8015134 <lv_disp_get_default>
 8023fb0:	4603      	mov	r3, r0
 8023fb2:	4618      	mov	r0, r3
 8023fb4:	f7e3 fd8a 	bl	8007acc <lv_disp_get_scr_act>
 8023fb8:	4603      	mov	r3, r0
}
 8023fba:	4618      	mov	r0, r3
 8023fbc:	bd80      	pop	{r7, pc}

08023fbe <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8023fbe:	b580      	push	{r7, lr}
 8023fc0:	b084      	sub	sp, #16
 8023fc2:	af00      	add	r7, sp, #0
 8023fc4:	60f8      	str	r0, [r7, #12]
 8023fc6:	460b      	mov	r3, r1
 8023fc8:	607a      	str	r2, [r7, #4]
 8023fca:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8023fcc:	6879      	ldr	r1, [r7, #4]
 8023fce:	68f8      	ldr	r0, [r7, #12]
 8023fd0:	f7e5 fbf3 	bl	80097ba <lv_obj_set_style>
}
 8023fd4:	bf00      	nop
 8023fd6:	3710      	adds	r7, #16
 8023fd8:	46bd      	mov	sp, r7
 8023fda:	bd80      	pop	{r7, pc}

08023fdc <tos_MenuScreen_Init>:
void MenuScreen_MenuItem(char * itemTitle,const void * itemImg);
void MenuScreen_ItemController(uint8_t item);
void MenuScreen_OpenMenu(uint8_t item);
static uint8_t item=0,befItem=255;

void tos_MenuScreen_Init(bool theme,RTC_HandleTypeDef *hrtc){
 8023fdc:	b590      	push	{r4, r7, lr}
 8023fde:	b083      	sub	sp, #12
 8023fe0:	af00      	add	r7, sp, #0
 8023fe2:	4603      	mov	r3, r0
 8023fe4:	6039      	str	r1, [r7, #0]
 8023fe6:	71fb      	strb	r3, [r7, #7]
	befItem=255;
 8023fe8:	4b1c      	ldr	r3, [pc, #112]	; (802405c <tos_MenuScreen_Init+0x80>)
 8023fea:	22ff      	movs	r2, #255	; 0xff
 8023fec:	701a      	strb	r2, [r3, #0]
		lv_style_copy(&style_screen, &lv_style_plain);
 8023fee:	491c      	ldr	r1, [pc, #112]	; (8024060 <tos_MenuScreen_Init+0x84>)
 8023ff0:	481c      	ldr	r0, [pc, #112]	; (8024064 <tos_MenuScreen_Init+0x88>)
 8023ff2:	f7e7 f981 	bl	800b2f8 <lv_style_copy>
		style_screen.body.main_color = LV_COLOR_WHITE;
 8023ff6:	4a1b      	ldr	r2, [pc, #108]	; (8024064 <tos_MenuScreen_Init+0x88>)
 8023ff8:	4b1b      	ldr	r3, [pc, #108]	; (8024068 <tos_MenuScreen_Init+0x8c>)
 8023ffa:	881b      	ldrh	r3, [r3, #0]
 8023ffc:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8023ffe:	4a19      	ldr	r2, [pc, #100]	; (8024064 <tos_MenuScreen_Init+0x88>)
 8024000:	4b19      	ldr	r3, [pc, #100]	; (8024068 <tos_MenuScreen_Init+0x8c>)
 8024002:	881b      	ldrh	r3, [r3, #0]
 8024004:	8093      	strh	r3, [r2, #4]
		if(theme){
 8024006:	79fb      	ldrb	r3, [r7, #7]
 8024008:	2b00      	cmp	r3, #0
 802400a:	d005      	beq.n	8024018 <tos_MenuScreen_Init+0x3c>
			style_screen.body.main_color = LV_COLOR_BLACK;
 802400c:	4b15      	ldr	r3, [pc, #84]	; (8024064 <tos_MenuScreen_Init+0x88>)
 802400e:	2200      	movs	r2, #0
 8024010:	805a      	strh	r2, [r3, #2]
			style_screen.body.grad_color = LV_COLOR_BLACK;
 8024012:	4b14      	ldr	r3, [pc, #80]	; (8024064 <tos_MenuScreen_Init+0x88>)
 8024014:	2200      	movs	r2, #0
 8024016:	809a      	strh	r2, [r3, #4]
		}
		style_screen.text.color = lv_color_make(68,133,247);
 8024018:	4c12      	ldr	r4, [pc, #72]	; (8024064 <tos_MenuScreen_Init+0x88>)
 802401a:	22f7      	movs	r2, #247	; 0xf7
 802401c:	2185      	movs	r1, #133	; 0x85
 802401e:	2044      	movs	r0, #68	; 0x44
 8024020:	f7ff ff8a 	bl	8023f38 <lv_color_make>
 8024024:	8420      	strh	r0, [r4, #32]
		style_screen.text.font = &lv_font_roboto_28;
 8024026:	4b0f      	ldr	r3, [pc, #60]	; (8024064 <tos_MenuScreen_Init+0x88>)
 8024028:	4a10      	ldr	r2, [pc, #64]	; (802406c <tos_MenuScreen_Init+0x90>)
 802402a:	625a      	str	r2, [r3, #36]	; 0x24
		lv_obj_set_style(lv_scr_act(), &style_screen);
 802402c:	f7ff ffbc 	bl	8023fa8 <lv_scr_act>
 8024030:	4603      	mov	r3, r0
 8024032:	490c      	ldr	r1, [pc, #48]	; (8024064 <tos_MenuScreen_Init+0x88>)
 8024034:	4618      	mov	r0, r3
 8024036:	f7e5 fbc0 	bl	80097ba <lv_obj_set_style>
		MenuIsOpen=true;
 802403a:	4b0d      	ldr	r3, [pc, #52]	; (8024070 <tos_MenuScreen_Init+0x94>)
 802403c:	2201      	movs	r2, #1
 802403e:	701a      	strb	r2, [r3, #0]
		MenuS_TaskController=true;
 8024040:	4b0c      	ldr	r3, [pc, #48]	; (8024074 <tos_MenuScreen_Init+0x98>)
 8024042:	2201      	movs	r2, #1
 8024044:	701a      	strb	r2, [r3, #0]
		Menutheme=theme;
 8024046:	4a0c      	ldr	r2, [pc, #48]	; (8024078 <tos_MenuScreen_Init+0x9c>)
 8024048:	79fb      	ldrb	r3, [r7, #7]
 802404a:	7013      	strb	r3, [r2, #0]
		M_hrtc=hrtc;
 802404c:	4a0b      	ldr	r2, [pc, #44]	; (802407c <tos_MenuScreen_Init+0xa0>)
 802404e:	683b      	ldr	r3, [r7, #0]
 8024050:	6013      	str	r3, [r2, #0]
}
 8024052:	bf00      	nop
 8024054:	370c      	adds	r7, #12
 8024056:	46bd      	mov	sp, r7
 8024058:	bd90      	pop	{r4, r7, pc}
 802405a:	bf00      	nop
 802405c:	20002830 	.word	0x20002830
 8024060:	2001ba10 	.word	0x2001ba10
 8024064:	2001ac2c 	.word	0x2001ac2c
 8024068:	0802ca00 	.word	0x0802ca00
 802406c:	20002398 	.word	0x20002398
 8024070:	2001ac68 	.word	0x2001ac68
 8024074:	2001bc9c 	.word	0x2001bc9c
 8024078:	2001bc9d 	.word	0x2001bc9d
 802407c:	2001bc98 	.word	0x2001bc98

08024080 <tos_Menu_Controller>:
void tos_Menu_Controller(void){
 8024080:	b580      	push	{r7, lr}
 8024082:	af00      	add	r7, sp, #0
	if(MenuS_TaskController){
 8024084:	4b38      	ldr	r3, [pc, #224]	; (8024168 <tos_Menu_Controller+0xe8>)
 8024086:	781b      	ldrb	r3, [r3, #0]
 8024088:	2b00      	cmp	r3, #0
 802408a:	d06a      	beq.n	8024162 <tos_Menu_Controller+0xe2>
			  if(SettingsScreen_isSettingsOpen())  SettingsScreen_ButtonController();
 802408c:	f003 fab8 	bl	8027600 <SettingsScreen_isSettingsOpen>
 8024090:	4603      	mov	r3, r0
 8024092:	2b00      	cmp	r3, #0
 8024094:	d002      	beq.n	802409c <tos_Menu_Controller+0x1c>
 8024096:	f002 fde7 	bl	8026c68 <SettingsScreen_ButtonController>
				  MenuScreen_ItemController(item);
				  befItem=item;
				}
			  }
	}
}
 802409a:	e062      	b.n	8024162 <tos_Menu_Controller+0xe2>
				  if(1==tos_EnterButton_Listenner_For_MenuControl()) MenuScreen_OpenMenu(item);
 802409c:	f005 f96a 	bl	8029374 <tos_EnterButton_Listenner_For_MenuControl>
 80240a0:	4603      	mov	r3, r0
 80240a2:	2b01      	cmp	r3, #1
 80240a4:	d104      	bne.n	80240b0 <tos_Menu_Controller+0x30>
 80240a6:	4b31      	ldr	r3, [pc, #196]	; (802416c <tos_Menu_Controller+0xec>)
 80240a8:	781b      	ldrb	r3, [r3, #0]
 80240aa:	4618      	mov	r0, r3
 80240ac:	f000 f862 	bl	8024174 <MenuScreen_OpenMenu>
				  if(StopWatch_TaskControllerGet())  StopWatch_ButtonController();
 80240b0:	f004 fe14 	bl	8028cdc <StopWatch_TaskControllerGet>
 80240b4:	4603      	mov	r3, r0
 80240b6:	2b00      	cmp	r3, #0
 80240b8:	d002      	beq.n	80240c0 <tos_Menu_Controller+0x40>
 80240ba:	f004 fca9 	bl	8028a10 <StopWatch_ButtonController>
 80240be:	e041      	b.n	8024144 <tos_Menu_Controller+0xc4>
				  else if(RunMode_TaskControllerGet())    RunMode_ButtonController();
 80240c0:	f002 f9b8 	bl	8026434 <RunMode_TaskControllerGet>
 80240c4:	4603      	mov	r3, r0
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	d002      	beq.n	80240d0 <tos_Menu_Controller+0x50>
 80240ca:	f001 ff63 	bl	8025f94 <RunMode_ButtonController>
 80240ce:	e039      	b.n	8024144 <tos_Menu_Controller+0xc4>
				  else if(MusicPlayer_TaskControllerGet())   MusicPlayer_ButtonController();
 80240d0:	f000 fd20 	bl	8024b14 <MusicPlayer_TaskControllerGet>
 80240d4:	4603      	mov	r3, r0
 80240d6:	2b00      	cmp	r3, #0
 80240d8:	d002      	beq.n	80240e0 <tos_Menu_Controller+0x60>
 80240da:	f000 fc1f 	bl	802491c <MusicPlayer_ButtonController>
 80240de:	e031      	b.n	8024144 <tos_Menu_Controller+0xc4>
				  else if(NotificationScreen_TaskControllerGet())   NotificationScreen_ButtonController();
 80240e0:	f001 f8b4 	bl	802524c <NotificationScreen_TaskControllerGet>
 80240e4:	4603      	mov	r3, r0
 80240e6:	2b00      	cmp	r3, #0
 80240e8:	d002      	beq.n	80240f0 <tos_Menu_Controller+0x70>
 80240ea:	f000 fda5 	bl	8024c38 <NotificationScreen_ButtonController>
 80240ee:	e029      	b.n	8024144 <tos_Menu_Controller+0xc4>
					  if(1==tos_LeftButton_Listenner_For_MenuControl()){
 80240f0:	f005 f918 	bl	8029324 <tos_LeftButton_Listenner_For_MenuControl>
 80240f4:	4603      	mov	r3, r0
 80240f6:	2b01      	cmp	r3, #1
 80240f8:	d10f      	bne.n	802411a <tos_Menu_Controller+0x9a>
						  if(item>ITEM_MIN)item--;
 80240fa:	4b1c      	ldr	r3, [pc, #112]	; (802416c <tos_Menu_Controller+0xec>)
 80240fc:	781b      	ldrb	r3, [r3, #0]
 80240fe:	2b00      	cmp	r3, #0
 8024100:	d006      	beq.n	8024110 <tos_Menu_Controller+0x90>
 8024102:	4b1a      	ldr	r3, [pc, #104]	; (802416c <tos_Menu_Controller+0xec>)
 8024104:	781b      	ldrb	r3, [r3, #0]
 8024106:	3b01      	subs	r3, #1
 8024108:	b2da      	uxtb	r2, r3
 802410a:	4b18      	ldr	r3, [pc, #96]	; (802416c <tos_Menu_Controller+0xec>)
 802410c:	701a      	strb	r2, [r3, #0]
 802410e:	e004      	b.n	802411a <tos_Menu_Controller+0x9a>
							  	MenuS_TaskController=false;
 8024110:	4b15      	ldr	r3, [pc, #84]	; (8024168 <tos_Menu_Controller+0xe8>)
 8024112:	2200      	movs	r2, #0
 8024114:	701a      	strb	r2, [r3, #0]
							  	tos_Set_Current_Screen();
 8024116:	f005 fb9f 	bl	8029858 <tos_Set_Current_Screen>
					  if(1==tos_RightButton_Listenner_For_MenuControl()){
 802411a:	f005 f8db 	bl	80292d4 <tos_RightButton_Listenner_For_MenuControl>
 802411e:	4603      	mov	r3, r0
 8024120:	2b01      	cmp	r3, #1
 8024122:	d10f      	bne.n	8024144 <tos_Menu_Controller+0xc4>
						  if(item<ITEM_MAX)item++;
 8024124:	4b11      	ldr	r3, [pc, #68]	; (802416c <tos_Menu_Controller+0xec>)
 8024126:	781b      	ldrb	r3, [r3, #0]
 8024128:	2b04      	cmp	r3, #4
 802412a:	d806      	bhi.n	802413a <tos_Menu_Controller+0xba>
 802412c:	4b0f      	ldr	r3, [pc, #60]	; (802416c <tos_Menu_Controller+0xec>)
 802412e:	781b      	ldrb	r3, [r3, #0]
 8024130:	3301      	adds	r3, #1
 8024132:	b2da      	uxtb	r2, r3
 8024134:	4b0d      	ldr	r3, [pc, #52]	; (802416c <tos_Menu_Controller+0xec>)
 8024136:	701a      	strb	r2, [r3, #0]
 8024138:	e004      	b.n	8024144 <tos_Menu_Controller+0xc4>
							  	MenuS_TaskController=false;
 802413a:	4b0b      	ldr	r3, [pc, #44]	; (8024168 <tos_Menu_Controller+0xe8>)
 802413c:	2200      	movs	r2, #0
 802413e:	701a      	strb	r2, [r3, #0]
							  	tos_Set_Current_Screen();
 8024140:	f005 fb8a 	bl	8029858 <tos_Set_Current_Screen>
				  if(befItem!=item){
 8024144:	4b0a      	ldr	r3, [pc, #40]	; (8024170 <tos_Menu_Controller+0xf0>)
 8024146:	781a      	ldrb	r2, [r3, #0]
 8024148:	4b08      	ldr	r3, [pc, #32]	; (802416c <tos_Menu_Controller+0xec>)
 802414a:	781b      	ldrb	r3, [r3, #0]
 802414c:	429a      	cmp	r2, r3
 802414e:	d008      	beq.n	8024162 <tos_Menu_Controller+0xe2>
				  MenuScreen_ItemController(item);
 8024150:	4b06      	ldr	r3, [pc, #24]	; (802416c <tos_Menu_Controller+0xec>)
 8024152:	781b      	ldrb	r3, [r3, #0]
 8024154:	4618      	mov	r0, r3
 8024156:	f000 f88d 	bl	8024274 <MenuScreen_ItemController>
				  befItem=item;
 802415a:	4b04      	ldr	r3, [pc, #16]	; (802416c <tos_Menu_Controller+0xec>)
 802415c:	781a      	ldrb	r2, [r3, #0]
 802415e:	4b04      	ldr	r3, [pc, #16]	; (8024170 <tos_Menu_Controller+0xf0>)
 8024160:	701a      	strb	r2, [r3, #0]
}
 8024162:	bf00      	nop
 8024164:	bd80      	pop	{r7, pc}
 8024166:	bf00      	nop
 8024168:	2001bc9c 	.word	0x2001bc9c
 802416c:	2001ac69 	.word	0x2001ac69
 8024170:	20002830 	.word	0x20002830

08024174 <MenuScreen_OpenMenu>:

void MenuScreen_OpenMenu(uint8_t item){
 8024174:	b580      	push	{r7, lr}
 8024176:	b082      	sub	sp, #8
 8024178:	af00      	add	r7, sp, #0
 802417a:	4603      	mov	r3, r0
 802417c:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 802417e:	f7ff ff13 	bl	8023fa8 <lv_scr_act>
 8024182:	4603      	mov	r3, r0
 8024184:	4618      	mov	r0, r3
 8024186:	f7e4 fc01 	bl	800898c <lv_obj_clean>
	StepAndKcal_TaskControllerSet(false);
 802418a:	2000      	movs	r0, #0
 802418c:	f004 fada 	bl	8028744 <StepAndKcal_TaskControllerSet>
	StopWatch_TaskControllerSet(false);
 8024190:	2000      	movs	r0, #0
 8024192:	f004 fd93 	bl	8028cbc <StopWatch_TaskControllerSet>
	RunMode_TaskControllerSet(false);
 8024196:	2000      	movs	r0, #0
 8024198:	f002 f93c 	bl	8026414 <RunMode_TaskControllerSet>
	MusicPlayer_TaskControllerSet(false);
 802419c:	2000      	movs	r0, #0
 802419e:	f000 fca9 	bl	8024af4 <MusicPlayer_TaskControllerSet>
	NotificationScreen_TaskControllerSet(false);
 80241a2:	2000      	movs	r0, #0
 80241a4:	f001 f842 	bl	802522c <NotificationScreen_TaskControllerSet>

	if(!MenuIsOpen){
 80241a8:	4b2f      	ldr	r3, [pc, #188]	; (8024268 <MenuScreen_OpenMenu+0xf4>)
 80241aa:	781b      	ldrb	r3, [r3, #0]
 80241ac:	f083 0301 	eor.w	r3, r3, #1
 80241b0:	b2db      	uxtb	r3, r3
 80241b2:	2b00      	cmp	r3, #0
 80241b4:	d007      	beq.n	80241c6 <MenuScreen_OpenMenu+0x52>
		  MenuIsOpen=true;
 80241b6:	4b2c      	ldr	r3, [pc, #176]	; (8024268 <MenuScreen_OpenMenu+0xf4>)
 80241b8:	2201      	movs	r2, #1
 80241ba:	701a      	strb	r2, [r3, #0]
		  MenuScreen_ItemController(item);
 80241bc:	79fb      	ldrb	r3, [r7, #7]
 80241be:	4618      	mov	r0, r3
 80241c0:	f000 f858 	bl	8024274 <MenuScreen_ItemController>
		  return;
 80241c4:	e04d      	b.n	8024262 <MenuScreen_OpenMenu+0xee>
	}

	MenuIsOpen=false;
 80241c6:	4b28      	ldr	r3, [pc, #160]	; (8024268 <MenuScreen_OpenMenu+0xf4>)
 80241c8:	2200      	movs	r2, #0
 80241ca:	701a      	strb	r2, [r3, #0]

	switch(item){
 80241cc:	79fb      	ldrb	r3, [r7, #7]
 80241ce:	2b05      	cmp	r3, #5
 80241d0:	d846      	bhi.n	8024260 <MenuScreen_OpenMenu+0xec>
 80241d2:	a201      	add	r2, pc, #4	; (adr r2, 80241d8 <MenuScreen_OpenMenu+0x64>)
 80241d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80241d8:	080241f1 	.word	0x080241f1
 80241dc:	08024205 	.word	0x08024205
 80241e0:	08024217 	.word	0x08024217
 80241e4:	0802422b 	.word	0x0802422b
 80241e8:	0802423d 	.word	0x0802423d
 80241ec:	0802424f 	.word	0x0802424f
	case ITEM0:
	/*Steps And kCals*/
	tos_StepAndKcalScreen_Init(true,Menutheme);
 80241f0:	4b1e      	ldr	r3, [pc, #120]	; (802426c <MenuScreen_OpenMenu+0xf8>)
 80241f2:	781b      	ldrb	r3, [r3, #0]
 80241f4:	4619      	mov	r1, r3
 80241f6:	2001      	movs	r0, #1
 80241f8:	f003 fe18 	bl	8027e2c <tos_StepAndKcalScreen_Init>
	StepAndKcal_TaskControllerSet(true);
 80241fc:	2001      	movs	r0, #1
 80241fe:	f004 faa1 	bl	8028744 <StepAndKcal_TaskControllerSet>
	break;
 8024202:	e02e      	b.n	8024262 <MenuScreen_OpenMenu+0xee>

	case ITEM1:
	/*Stopwatch*/
	tos_StopWatchScreen_Init(Menutheme);
 8024204:	4b19      	ldr	r3, [pc, #100]	; (802426c <MenuScreen_OpenMenu+0xf8>)
 8024206:	781b      	ldrb	r3, [r3, #0]
 8024208:	4618      	mov	r0, r3
 802420a:	f004 fac5 	bl	8028798 <tos_StopWatchScreen_Init>
	StopWatch_TaskControllerSet(true);
 802420e:	2001      	movs	r0, #1
 8024210:	f004 fd54 	bl	8028cbc <StopWatch_TaskControllerSet>
		break;
 8024214:	e025      	b.n	8024262 <MenuScreen_OpenMenu+0xee>

	case ITEM2:
	/*Run Mode*/
	tos_RunModeScreen_Init(true,Menutheme); //unit type alma yazılacak
 8024216:	4b15      	ldr	r3, [pc, #84]	; (802426c <MenuScreen_OpenMenu+0xf8>)
 8024218:	781b      	ldrb	r3, [r3, #0]
 802421a:	4619      	mov	r1, r3
 802421c:	2001      	movs	r0, #1
 802421e:	f001 f873 	bl	8025308 <tos_RunModeScreen_Init>
	RunMode_TaskControllerSet(true);
 8024222:	2001      	movs	r0, #1
 8024224:	f002 f8f6 	bl	8026414 <RunMode_TaskControllerSet>
	break;
 8024228:	e01b      	b.n	8024262 <MenuScreen_OpenMenu+0xee>

	case ITEM3:
	/*Music Player*/
	tos_MusicPlayerScreen_Init(Menutheme);
 802422a:	4b10      	ldr	r3, [pc, #64]	; (802426c <MenuScreen_OpenMenu+0xf8>)
 802422c:	781b      	ldrb	r3, [r3, #0]
 802422e:	4618      	mov	r0, r3
 8024230:	f000 f916 	bl	8024460 <tos_MusicPlayerScreen_Init>
	MusicPlayer_TaskControllerSet(true);
 8024234:	2001      	movs	r0, #1
 8024236:	f000 fc5d 	bl	8024af4 <MusicPlayer_TaskControllerSet>
	break;
 802423a:	e012      	b.n	8024262 <MenuScreen_OpenMenu+0xee>

	case ITEM4:
	/*Notification*/
	tos_NotificationScreen_Init(Menutheme);
 802423c:	4b0b      	ldr	r3, [pc, #44]	; (802426c <MenuScreen_OpenMenu+0xf8>)
 802423e:	781b      	ldrb	r3, [r3, #0]
 8024240:	4618      	mov	r0, r3
 8024242:	f000 fca1 	bl	8024b88 <tos_NotificationScreen_Init>
	NotificationScreen_TaskControllerSet(true);
 8024246:	2001      	movs	r0, #1
 8024248:	f000 fff0 	bl	802522c <NotificationScreen_TaskControllerSet>
	break;
 802424c:	e009      	b.n	8024262 <MenuScreen_OpenMenu+0xee>

	case ITEM5:
	/*Sys Settings*/
	tos_SettingsScreen_Init(Menutheme,M_hrtc);
 802424e:	4b07      	ldr	r3, [pc, #28]	; (802426c <MenuScreen_OpenMenu+0xf8>)
 8024250:	781a      	ldrb	r2, [r3, #0]
 8024252:	4b07      	ldr	r3, [pc, #28]	; (8024270 <MenuScreen_OpenMenu+0xfc>)
 8024254:	681b      	ldr	r3, [r3, #0]
 8024256:	4619      	mov	r1, r3
 8024258:	4610      	mov	r0, r2
 802425a:	f002 f95d 	bl	8026518 <tos_SettingsScreen_Init>
	//Close a veya save e basınca buraya dönmüyor !!
	break;
 802425e:	e000      	b.n	8024262 <MenuScreen_OpenMenu+0xee>

	default: return;
 8024260:	bf00      	nop
	}
}
 8024262:	3708      	adds	r7, #8
 8024264:	46bd      	mov	sp, r7
 8024266:	bd80      	pop	{r7, pc}
 8024268:	2001ac68 	.word	0x2001ac68
 802426c:	2001bc9d 	.word	0x2001bc9d
 8024270:	2001bc98 	.word	0x2001bc98

08024274 <MenuScreen_ItemController>:

void MenuScreen_ItemController(uint8_t item){
 8024274:	b580      	push	{r7, lr}
 8024276:	b082      	sub	sp, #8
 8024278:	af00      	add	r7, sp, #0
 802427a:	4603      	mov	r3, r0
 802427c:	71fb      	strb	r3, [r7, #7]
		switch(item){
 802427e:	79fb      	ldrb	r3, [r7, #7]
 8024280:	2b05      	cmp	r3, #5
 8024282:	d82d      	bhi.n	80242e0 <MenuScreen_ItemController+0x6c>
 8024284:	a201      	add	r2, pc, #4	; (adr r2, 802428c <MenuScreen_ItemController+0x18>)
 8024286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802428a:	bf00      	nop
 802428c:	080242a5 	.word	0x080242a5
 8024290:	080242af 	.word	0x080242af
 8024294:	080242b9 	.word	0x080242b9
 8024298:	080242c3 	.word	0x080242c3
 802429c:	080242cd 	.word	0x080242cd
 80242a0:	080242d7 	.word	0x080242d7
		case ITEM0:	MenuScreen_MenuItem("STEPS AND KCALS", &tos75x75); break;
 80242a4:	4910      	ldr	r1, [pc, #64]	; (80242e8 <MenuScreen_ItemController+0x74>)
 80242a6:	4811      	ldr	r0, [pc, #68]	; (80242ec <MenuScreen_ItemController+0x78>)
 80242a8:	f000 f82c 	bl	8024304 <MenuScreen_MenuItem>
 80242ac:	e019      	b.n	80242e2 <MenuScreen_ItemController+0x6e>

		case ITEM1: MenuScreen_MenuItem("STOPWATCH", &tos75x75); break;
 80242ae:	490e      	ldr	r1, [pc, #56]	; (80242e8 <MenuScreen_ItemController+0x74>)
 80242b0:	480f      	ldr	r0, [pc, #60]	; (80242f0 <MenuScreen_ItemController+0x7c>)
 80242b2:	f000 f827 	bl	8024304 <MenuScreen_MenuItem>
 80242b6:	e014      	b.n	80242e2 <MenuScreen_ItemController+0x6e>

		case ITEM2: MenuScreen_MenuItem("RUN MODE", &tos75x75); break;
 80242b8:	490b      	ldr	r1, [pc, #44]	; (80242e8 <MenuScreen_ItemController+0x74>)
 80242ba:	480e      	ldr	r0, [pc, #56]	; (80242f4 <MenuScreen_ItemController+0x80>)
 80242bc:	f000 f822 	bl	8024304 <MenuScreen_MenuItem>
 80242c0:	e00f      	b.n	80242e2 <MenuScreen_ItemController+0x6e>

		case ITEM3: MenuScreen_MenuItem("MUSIC PLAYER", &tos75x75); break;
 80242c2:	4909      	ldr	r1, [pc, #36]	; (80242e8 <MenuScreen_ItemController+0x74>)
 80242c4:	480c      	ldr	r0, [pc, #48]	; (80242f8 <MenuScreen_ItemController+0x84>)
 80242c6:	f000 f81d 	bl	8024304 <MenuScreen_MenuItem>
 80242ca:	e00a      	b.n	80242e2 <MenuScreen_ItemController+0x6e>

		case ITEM4: MenuScreen_MenuItem("NOTIFICATIONS", &tos75x75); break;
 80242cc:	4906      	ldr	r1, [pc, #24]	; (80242e8 <MenuScreen_ItemController+0x74>)
 80242ce:	480b      	ldr	r0, [pc, #44]	; (80242fc <MenuScreen_ItemController+0x88>)
 80242d0:	f000 f818 	bl	8024304 <MenuScreen_MenuItem>
 80242d4:	e005      	b.n	80242e2 <MenuScreen_ItemController+0x6e>

		case ITEM5: MenuScreen_MenuItem("SYSTEM SETTINGS", &tos75x75); break;
 80242d6:	4904      	ldr	r1, [pc, #16]	; (80242e8 <MenuScreen_ItemController+0x74>)
 80242d8:	4809      	ldr	r0, [pc, #36]	; (8024300 <MenuScreen_ItemController+0x8c>)
 80242da:	f000 f813 	bl	8024304 <MenuScreen_MenuItem>
 80242de:	e000      	b.n	80242e2 <MenuScreen_ItemController+0x6e>

		default: return;
 80242e0:	bf00      	nop
		}
}
 80242e2:	3708      	adds	r7, #8
 80242e4:	46bd      	mov	sp, r7
 80242e6:	bd80      	pop	{r7, pc}
 80242e8:	08047c14 	.word	0x08047c14
 80242ec:	0802ca04 	.word	0x0802ca04
 80242f0:	0802ca14 	.word	0x0802ca14
 80242f4:	0802ca20 	.word	0x0802ca20
 80242f8:	0802ca2c 	.word	0x0802ca2c
 80242fc:	0802ca3c 	.word	0x0802ca3c
 8024300:	0802ca4c 	.word	0x0802ca4c

08024304 <MenuScreen_MenuItem>:

void MenuScreen_MenuItem(char * itemTitle,const void * itemImg){
 8024304:	b580      	push	{r7, lr}
 8024306:	b086      	sub	sp, #24
 8024308:	af02      	add	r7, sp, #8
 802430a:	6078      	str	r0, [r7, #4]
 802430c:	6039      	str	r1, [r7, #0]
	lv_obj_clean(lv_scr_act());
 802430e:	f7ff fe4b 	bl	8023fa8 <lv_scr_act>
 8024312:	4603      	mov	r3, r0
 8024314:	4618      	mov	r0, r3
 8024316:	f7e4 fb39 	bl	800898c <lv_obj_clean>
		lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 802431a:	f7ff fe45 	bl	8023fa8 <lv_scr_act>
 802431e:	4603      	mov	r3, r0
 8024320:	2100      	movs	r1, #0
 8024322:	4618      	mov	r0, r3
 8024324:	f7f7 fb30 	bl	801b988 <lv_img_create>
 8024328:	60f8      	str	r0, [r7, #12]
		lv_img_set_src(img1, itemImg);
 802432a:	6839      	ldr	r1, [r7, #0]
 802432c:	68f8      	ldr	r0, [r7, #12]
 802432e:	f7f7 fbc9 	bl	801bac4 <lv_img_set_src>
		lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -20);
 8024332:	f06f 0313 	mvn.w	r3, #19
 8024336:	9300      	str	r3, [sp, #0]
 8024338:	2300      	movs	r3, #0
 802433a:	2200      	movs	r2, #0
 802433c:	2100      	movs	r1, #0
 802433e:	68f8      	ldr	r0, [r7, #12]
 8024340:	f7e4 fd96 	bl	8008e70 <lv_obj_align>

		lv_obj_t * tosLbl =lv_label_create(lv_scr_act(), NULL);
 8024344:	f7ff fe30 	bl	8023fa8 <lv_scr_act>
 8024348:	4603      	mov	r3, r0
 802434a:	2100      	movs	r1, #0
 802434c:	4618      	mov	r0, r3
 802434e:	f7f7 fea7 	bl	801c0a0 <lv_label_create>
 8024352:	60b8      	str	r0, [r7, #8]
	 	lv_label_set_style(tosLbl, LV_LABEL_STYLE_MAIN, &style_screen);
 8024354:	4a0d      	ldr	r2, [pc, #52]	; (802438c <MenuScreen_MenuItem+0x88>)
 8024356:	2100      	movs	r1, #0
 8024358:	68b8      	ldr	r0, [r7, #8]
 802435a:	f7ff fe30 	bl	8023fbe <lv_label_set_style>
	   	snprintf(menuBuffer, 20, "%s", itemTitle);
 802435e:	687b      	ldr	r3, [r7, #4]
 8024360:	4a0b      	ldr	r2, [pc, #44]	; (8024390 <MenuScreen_MenuItem+0x8c>)
 8024362:	2114      	movs	r1, #20
 8024364:	480b      	ldr	r0, [pc, #44]	; (8024394 <MenuScreen_MenuItem+0x90>)
 8024366:	f006 fa4d 	bl	802a804 <sniprintf>
	 	lv_label_set_text(tosLbl,menuBuffer);
 802436a:	490a      	ldr	r1, [pc, #40]	; (8024394 <MenuScreen_MenuItem+0x90>)
 802436c:	68b8      	ldr	r0, [r7, #8]
 802436e:	f7f7 ffc9 	bl	801c304 <lv_label_set_text>
	 	lv_obj_align(tosLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8024372:	2332      	movs	r3, #50	; 0x32
 8024374:	9300      	str	r3, [sp, #0]
 8024376:	2300      	movs	r3, #0
 8024378:	2200      	movs	r2, #0
 802437a:	2100      	movs	r1, #0
 802437c:	68b8      	ldr	r0, [r7, #8]
 802437e:	f7e4 fd77 	bl	8008e70 <lv_obj_align>
}
 8024382:	bf00      	nop
 8024384:	3710      	adds	r7, #16
 8024386:	46bd      	mov	sp, r7
 8024388:	bd80      	pop	{r7, pc}
 802438a:	bf00      	nop
 802438c:	2001ac2c 	.word	0x2001ac2c
 8024390:	0802ca5c 	.word	0x0802ca5c
 8024394:	2001bca0 	.word	0x2001bca0

08024398 <MenuScreen_TaskControllerSet>:
//Setter And Getter Functions
bool MenuScreen_TaskControllerGet(void){
	return MenuS_TaskController;
}
void MenuScreen_TaskControllerSet(bool active){
 8024398:	b480      	push	{r7}
 802439a:	b083      	sub	sp, #12
 802439c:	af00      	add	r7, sp, #0
 802439e:	4603      	mov	r3, r0
 80243a0:	71fb      	strb	r3, [r7, #7]
	MenuS_TaskController=active;
 80243a2:	4a04      	ldr	r2, [pc, #16]	; (80243b4 <MenuScreen_TaskControllerSet+0x1c>)
 80243a4:	79fb      	ldrb	r3, [r7, #7]
 80243a6:	7013      	strb	r3, [r2, #0]
}
 80243a8:	bf00      	nop
 80243aa:	370c      	adds	r7, #12
 80243ac:	46bd      	mov	sp, r7
 80243ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243b2:	4770      	bx	lr
 80243b4:	2001bc9c 	.word	0x2001bc9c

080243b8 <MenuScreen_SetItem>:
void MenuScreen_SetItem(uint8_t SelectItem){
 80243b8:	b480      	push	{r7}
 80243ba:	b083      	sub	sp, #12
 80243bc:	af00      	add	r7, sp, #0
 80243be:	4603      	mov	r3, r0
 80243c0:	71fb      	strb	r3, [r7, #7]
	item=SelectItem;
 80243c2:	4a04      	ldr	r2, [pc, #16]	; (80243d4 <MenuScreen_SetItem+0x1c>)
 80243c4:	79fb      	ldrb	r3, [r7, #7]
 80243c6:	7013      	strb	r3, [r2, #0]
}
 80243c8:	bf00      	nop
 80243ca:	370c      	adds	r7, #12
 80243cc:	46bd      	mov	sp, r7
 80243ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243d2:	4770      	bx	lr
 80243d4:	2001ac69 	.word	0x2001ac69

080243d8 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 80243d8:	b480      	push	{r7}
 80243da:	b085      	sub	sp, #20
 80243dc:	af00      	add	r7, sp, #0
 80243de:	4603      	mov	r3, r0
 80243e0:	71fb      	strb	r3, [r7, #7]
 80243e2:	460b      	mov	r3, r1
 80243e4:	71bb      	strb	r3, [r7, #6]
 80243e6:	4613      	mov	r3, r2
 80243e8:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 80243ea:	79bb      	ldrb	r3, [r7, #6]
 80243ec:	095b      	lsrs	r3, r3, #5
 80243ee:	b2db      	uxtb	r3, r3
 80243f0:	f003 0307 	and.w	r3, r3, #7
 80243f4:	b2da      	uxtb	r2, r3
 80243f6:	7b3b      	ldrb	r3, [r7, #12]
 80243f8:	f362 0302 	bfi	r3, r2, #0, #3
 80243fc:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 80243fe:	79fb      	ldrb	r3, [r7, #7]
 8024400:	08db      	lsrs	r3, r3, #3
 8024402:	b2db      	uxtb	r3, r3
 8024404:	f003 031f 	and.w	r3, r3, #31
 8024408:	b2da      	uxtb	r2, r3
 802440a:	7b3b      	ldrb	r3, [r7, #12]
 802440c:	f362 03c7 	bfi	r3, r2, #3, #5
 8024410:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8024412:	797b      	ldrb	r3, [r7, #5]
 8024414:	08db      	lsrs	r3, r3, #3
 8024416:	b2db      	uxtb	r3, r3
 8024418:	f003 031f 	and.w	r3, r3, #31
 802441c:	b2da      	uxtb	r2, r3
 802441e:	7b7b      	ldrb	r3, [r7, #13]
 8024420:	f362 0304 	bfi	r3, r2, #0, #5
 8024424:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8024426:	79bb      	ldrb	r3, [r7, #6]
 8024428:	089b      	lsrs	r3, r3, #2
 802442a:	b2db      	uxtb	r3, r3
 802442c:	f003 0307 	and.w	r3, r3, #7
 8024430:	b2da      	uxtb	r2, r3
 8024432:	7b7b      	ldrb	r3, [r7, #13]
 8024434:	f362 1347 	bfi	r3, r2, #5, #3
 8024438:	737b      	strb	r3, [r7, #13]
    return color;
 802443a:	89bb      	ldrh	r3, [r7, #12]
}
 802443c:	4618      	mov	r0, r3
 802443e:	3714      	adds	r7, #20
 8024440:	46bd      	mov	sp, r7
 8024442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024446:	4770      	bx	lr

08024448 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8024448:	b580      	push	{r7, lr}
 802444a:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 802444c:	f7f0 fe72 	bl	8015134 <lv_disp_get_default>
 8024450:	4603      	mov	r3, r0
 8024452:	4618      	mov	r0, r3
 8024454:	f7e3 fb3a 	bl	8007acc <lv_disp_get_scr_act>
 8024458:	4603      	mov	r3, r0
}
 802445a:	4618      	mov	r0, r3
 802445c:	bd80      	pop	{r7, pc}
	...

08024460 <tos_MusicPlayerScreen_Init>:
void MusicPlayerUpdateVal(void);
void soundVolumeController(bool vol);


/*This function using for initialization Music Player screen*/
void tos_MusicPlayerScreen_Init(bool theme){
 8024460:	b590      	push	{r4, r7, lr}
 8024462:	b083      	sub	sp, #12
 8024464:	af00      	add	r7, sp, #0
 8024466:	4603      	mov	r3, r0
 8024468:	71fb      	strb	r3, [r7, #7]

	lv_obj_clean(lv_scr_act());
 802446a:	f7ff ffed 	bl	8024448 <lv_scr_act>
 802446e:	4603      	mov	r3, r0
 8024470:	4618      	mov	r0, r3
 8024472:	f7e4 fa8b 	bl	800898c <lv_obj_clean>
		lv_style_copy(&description_Style, &lv_style_plain);
 8024476:	492c      	ldr	r1, [pc, #176]	; (8024528 <tos_MusicPlayerScreen_Init+0xc8>)
 8024478:	482c      	ldr	r0, [pc, #176]	; (802452c <tos_MusicPlayerScreen_Init+0xcc>)
 802447a:	f7e6 ff3d 	bl	800b2f8 <lv_style_copy>
		description_Style.text.font = &lv_font_roboto_22;
 802447e:	4b2b      	ldr	r3, [pc, #172]	; (802452c <tos_MusicPlayerScreen_Init+0xcc>)
 8024480:	4a2b      	ldr	r2, [pc, #172]	; (8024530 <tos_MusicPlayerScreen_Init+0xd0>)
 8024482:	625a      	str	r2, [r3, #36]	; 0x24
		description_Style.text.color = LV_COLOR_GRAY;
 8024484:	4a29      	ldr	r2, [pc, #164]	; (802452c <tos_MusicPlayerScreen_Init+0xcc>)
 8024486:	4b2b      	ldr	r3, [pc, #172]	; (8024534 <tos_MusicPlayerScreen_Init+0xd4>)
 8024488:	881b      	ldrh	r3, [r3, #0]
 802448a:	8413      	strh	r3, [r2, #32]

		lv_style_copy(&style_screen, &lv_style_plain);
 802448c:	4926      	ldr	r1, [pc, #152]	; (8024528 <tos_MusicPlayerScreen_Init+0xc8>)
 802448e:	482a      	ldr	r0, [pc, #168]	; (8024538 <tos_MusicPlayerScreen_Init+0xd8>)
 8024490:	f7e6 ff32 	bl	800b2f8 <lv_style_copy>
		if(theme){
 8024494:	79fb      	ldrb	r3, [r7, #7]
 8024496:	2b00      	cmp	r3, #0
 8024498:	d00d      	beq.n	80244b6 <tos_MusicPlayerScreen_Init+0x56>
			style_screen.body.main_color = LV_COLOR_BLACK;
 802449a:	4b27      	ldr	r3, [pc, #156]	; (8024538 <tos_MusicPlayerScreen_Init+0xd8>)
 802449c:	2200      	movs	r2, #0
 802449e:	805a      	strh	r2, [r3, #2]
			style_screen.body.grad_color = LV_COLOR_BLACK;
 80244a0:	4b25      	ldr	r3, [pc, #148]	; (8024538 <tos_MusicPlayerScreen_Init+0xd8>)
 80244a2:	2200      	movs	r2, #0
 80244a4:	809a      	strh	r2, [r3, #4]
			description_Style.text.color = lv_color_make(0xc0, 0xc0, 0xc0);
 80244a6:	4c21      	ldr	r4, [pc, #132]	; (802452c <tos_MusicPlayerScreen_Init+0xcc>)
 80244a8:	22c0      	movs	r2, #192	; 0xc0
 80244aa:	21c0      	movs	r1, #192	; 0xc0
 80244ac:	20c0      	movs	r0, #192	; 0xc0
 80244ae:	f7ff ff93 	bl	80243d8 <lv_color_make>
 80244b2:	8420      	strh	r0, [r4, #32]
 80244b4:	e00e      	b.n	80244d4 <tos_MusicPlayerScreen_Init+0x74>
		}else{
			style_screen.body.main_color = LV_COLOR_WHITE;
 80244b6:	4a20      	ldr	r2, [pc, #128]	; (8024538 <tos_MusicPlayerScreen_Init+0xd8>)
 80244b8:	4b20      	ldr	r3, [pc, #128]	; (802453c <tos_MusicPlayerScreen_Init+0xdc>)
 80244ba:	881b      	ldrh	r3, [r3, #0]
 80244bc:	8053      	strh	r3, [r2, #2]
			style_screen.body.grad_color = LV_COLOR_WHITE;
 80244be:	4a1e      	ldr	r2, [pc, #120]	; (8024538 <tos_MusicPlayerScreen_Init+0xd8>)
 80244c0:	4b1e      	ldr	r3, [pc, #120]	; (802453c <tos_MusicPlayerScreen_Init+0xdc>)
 80244c2:	881b      	ldrh	r3, [r3, #0]
 80244c4:	8093      	strh	r3, [r2, #4]
			description_Style.text.color = lv_color_make(0x37, 0x37, 0x37);
 80244c6:	4c19      	ldr	r4, [pc, #100]	; (802452c <tos_MusicPlayerScreen_Init+0xcc>)
 80244c8:	2237      	movs	r2, #55	; 0x37
 80244ca:	2137      	movs	r1, #55	; 0x37
 80244cc:	2037      	movs	r0, #55	; 0x37
 80244ce:	f7ff ff83 	bl	80243d8 <lv_color_make>
 80244d2:	8420      	strh	r0, [r4, #32]
		}	lv_obj_set_style(lv_scr_act(), &style_screen);
 80244d4:	f7ff ffb8 	bl	8024448 <lv_scr_act>
 80244d8:	4603      	mov	r3, r0
 80244da:	4917      	ldr	r1, [pc, #92]	; (8024538 <tos_MusicPlayerScreen_Init+0xd8>)
 80244dc:	4618      	mov	r0, r3
 80244de:	f7e5 f96c 	bl	80097ba <lv_obj_set_style>

		MP_theme=theme;
 80244e2:	4a17      	ldr	r2, [pc, #92]	; (8024540 <tos_MusicPlayerScreen_Init+0xe0>)
 80244e4:	79fb      	ldrb	r3, [r7, #7]
 80244e6:	7013      	strb	r3, [r2, #0]
		MP_isButtonPressed=false;
 80244e8:	4b16      	ldr	r3, [pc, #88]	; (8024544 <tos_MusicPlayerScreen_Init+0xe4>)
 80244ea:	2200      	movs	r2, #0
 80244ec:	701a      	strb	r2, [r3, #0]
		MP_buttonMode=false;
 80244ee:	4b16      	ldr	r3, [pc, #88]	; (8024548 <tos_MusicPlayerScreen_Init+0xe8>)
 80244f0:	2200      	movs	r2, #0
 80244f2:	701a      	strb	r2, [r3, #0]

		MusicPlayerSound_Init(theme);
 80244f4:	79fb      	ldrb	r3, [r7, #7]
 80244f6:	4618      	mov	r0, r3
 80244f8:	f000 f89a 	bl	8024630 <MusicPlayerSound_Init>
		MusicPlayerPlayingVal_Init(theme);
 80244fc:	79fb      	ldrb	r3, [r7, #7]
 80244fe:	4618      	mov	r0, r3
 8024500:	f000 f984 	bl	802480c <MusicPlayerPlayingVal_Init>
		MusicPlayerDescriptionLbl_Init(theme);
 8024504:	79fb      	ldrb	r3, [r7, #7]
 8024506:	4618      	mov	r0, r3
 8024508:	f000 f9a8 	bl	802485c <MusicPlayerDescriptionLbl_Init>

		MP_taskController=true;
 802450c:	4b0f      	ldr	r3, [pc, #60]	; (802454c <tos_MusicPlayerScreen_Init+0xec>)
 802450e:	2201      	movs	r2, #1
 8024510:	701a      	strb	r2, [r3, #0]
		lv_task_create(MusicPlayerScreen_Updater, 750, LV_TASK_PRIO_LOWEST, NULL);
 8024512:	2300      	movs	r3, #0
 8024514:	2201      	movs	r2, #1
 8024516:	f240 21ee 	movw	r1, #750	; 0x2ee
 802451a:	480d      	ldr	r0, [pc, #52]	; (8024550 <tos_MusicPlayerScreen_Init+0xf0>)
 802451c:	f7f2 fa4e 	bl	80169bc <lv_task_create>
}
 8024520:	bf00      	nop
 8024522:	370c      	adds	r7, #12
 8024524:	46bd      	mov	sp, r7
 8024526:	bd90      	pop	{r4, r7, pc}
 8024528:	2001ba10 	.word	0x2001ba10
 802452c:	2001aca8 	.word	0x2001aca8
 8024530:	200017c4 	.word	0x200017c4
 8024534:	0802ca60 	.word	0x0802ca60
 8024538:	2001ac6c 	.word	0x2001ac6c
 802453c:	0802ca64 	.word	0x0802ca64
 8024540:	2001bcdd 	.word	0x2001bcdd
 8024544:	2001bcbc 	.word	0x2001bcbc
 8024548:	2001bccc 	.word	0x2001bccc
 802454c:	2001bcc4 	.word	0x2001bcc4
 8024550:	08024555 	.word	0x08024555

08024554 <MusicPlayerScreen_Updater>:


/*This function using for update variables*/
void MusicPlayerScreen_Updater(lv_task_t *t){
 8024554:	b580      	push	{r7, lr}
 8024556:	b084      	sub	sp, #16
 8024558:	af02      	add	r7, sp, #8
 802455a:	6078      	str	r0, [r7, #4]
	if(MP_taskController){
 802455c:	4b2a      	ldr	r3, [pc, #168]	; (8024608 <MusicPlayerScreen_Updater+0xb4>)
 802455e:	781b      	ldrb	r3, [r3, #0]
 8024560:	2b00      	cmp	r3, #0
 8024562:	d049      	beq.n	80245f8 <MusicPlayerScreen_Updater+0xa4>
		if(NULL != MP_SongName) 	lv_label_set_text(MP_SongNameLbl, MP_SongName);
 8024564:	4b29      	ldr	r3, [pc, #164]	; (802460c <MusicPlayerScreen_Updater+0xb8>)
 8024566:	681b      	ldr	r3, [r3, #0]
 8024568:	2b00      	cmp	r3, #0
 802456a:	d008      	beq.n	802457e <MusicPlayerScreen_Updater+0x2a>
 802456c:	4b28      	ldr	r3, [pc, #160]	; (8024610 <MusicPlayerScreen_Updater+0xbc>)
 802456e:	681a      	ldr	r2, [r3, #0]
 8024570:	4b26      	ldr	r3, [pc, #152]	; (802460c <MusicPlayerScreen_Updater+0xb8>)
 8024572:	681b      	ldr	r3, [r3, #0]
 8024574:	4619      	mov	r1, r3
 8024576:	4610      	mov	r0, r2
 8024578:	f7f7 fec4 	bl	801c304 <lv_label_set_text>
 802457c:	e005      	b.n	802458a <MusicPlayerScreen_Updater+0x36>
		else lv_label_set_text(MP_SongNameLbl, "unknow");
 802457e:	4b24      	ldr	r3, [pc, #144]	; (8024610 <MusicPlayerScreen_Updater+0xbc>)
 8024580:	681b      	ldr	r3, [r3, #0]
 8024582:	4924      	ldr	r1, [pc, #144]	; (8024614 <MusicPlayerScreen_Updater+0xc0>)
 8024584:	4618      	mov	r0, r3
 8024586:	f7f7 febd 	bl	801c304 <lv_label_set_text>
		if(NULL != MP_SongActrist) lv_label_set_text(MP_SingerLbl, MP_SongActrist);
 802458a:	4b23      	ldr	r3, [pc, #140]	; (8024618 <MusicPlayerScreen_Updater+0xc4>)
 802458c:	681b      	ldr	r3, [r3, #0]
 802458e:	2b00      	cmp	r3, #0
 8024590:	d008      	beq.n	80245a4 <MusicPlayerScreen_Updater+0x50>
 8024592:	4b22      	ldr	r3, [pc, #136]	; (802461c <MusicPlayerScreen_Updater+0xc8>)
 8024594:	681a      	ldr	r2, [r3, #0]
 8024596:	4b20      	ldr	r3, [pc, #128]	; (8024618 <MusicPlayerScreen_Updater+0xc4>)
 8024598:	681b      	ldr	r3, [r3, #0]
 802459a:	4619      	mov	r1, r3
 802459c:	4610      	mov	r0, r2
 802459e:	f7f7 feb1 	bl	801c304 <lv_label_set_text>
 80245a2:	e005      	b.n	80245b0 <MusicPlayerScreen_Updater+0x5c>
		else lv_label_set_text(MP_SingerLbl, "unknow");
 80245a4:	4b1d      	ldr	r3, [pc, #116]	; (802461c <MusicPlayerScreen_Updater+0xc8>)
 80245a6:	681b      	ldr	r3, [r3, #0]
 80245a8:	491a      	ldr	r1, [pc, #104]	; (8024614 <MusicPlayerScreen_Updater+0xc0>)
 80245aa:	4618      	mov	r0, r3
 80245ac:	f7f7 feaa 	bl	801c304 <lv_label_set_text>
	 	lv_obj_align(MP_SongNameLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 80245b0:	4b17      	ldr	r3, [pc, #92]	; (8024610 <MusicPlayerScreen_Updater+0xbc>)
 80245b2:	6818      	ldr	r0, [r3, #0]
 80245b4:	2332      	movs	r3, #50	; 0x32
 80245b6:	9300      	str	r3, [sp, #0]
 80245b8:	2300      	movs	r3, #0
 80245ba:	2200      	movs	r2, #0
 80245bc:	2100      	movs	r1, #0
 80245be:	f7e4 fc57 	bl	8008e70 <lv_obj_align>
	 	lv_obj_align(MP_SingerLbl, NULL, LV_ALIGN_CENTER, 0, 85);
 80245c2:	4b16      	ldr	r3, [pc, #88]	; (802461c <MusicPlayerScreen_Updater+0xc8>)
 80245c4:	6818      	ldr	r0, [r3, #0]
 80245c6:	2355      	movs	r3, #85	; 0x55
 80245c8:	9300      	str	r3, [sp, #0]
 80245ca:	2300      	movs	r3, #0
 80245cc:	2200      	movs	r2, #0
 80245ce:	2100      	movs	r1, #0
 80245d0:	f7e4 fc4e 	bl	8008e70 <lv_obj_align>
	    lv_bar_set_value(MP_soundValBar, MP_SoundVal, LV_ANIM_OFF);
 80245d4:	4b12      	ldr	r3, [pc, #72]	; (8024620 <MusicPlayerScreen_Updater+0xcc>)
 80245d6:	6818      	ldr	r0, [r3, #0]
 80245d8:	4b12      	ldr	r3, [pc, #72]	; (8024624 <MusicPlayerScreen_Updater+0xd0>)
 80245da:	781b      	ldrb	r3, [r3, #0]
 80245dc:	b21b      	sxth	r3, r3
 80245de:	2200      	movs	r2, #0
 80245e0:	4619      	mov	r1, r3
 80245e2:	f7f3 fad1 	bl	8017b88 <lv_bar_set_value>
		MusicPlayerImgSet(MP_statu,MP_theme);
 80245e6:	4b10      	ldr	r3, [pc, #64]	; (8024628 <MusicPlayerScreen_Updater+0xd4>)
 80245e8:	781a      	ldrb	r2, [r3, #0]
 80245ea:	4b10      	ldr	r3, [pc, #64]	; (802462c <MusicPlayerScreen_Updater+0xd8>)
 80245ec:	781b      	ldrb	r3, [r3, #0]
 80245ee:	4619      	mov	r1, r3
 80245f0:	4610      	mov	r0, r2
 80245f2:	f000 fa2b 	bl	8024a4c <MusicPlayerImgSet>
	}else lv_task_del(t);
}
 80245f6:	e002      	b.n	80245fe <MusicPlayerScreen_Updater+0xaa>
	}else lv_task_del(t);
 80245f8:	6878      	ldr	r0, [r7, #4]
 80245fa:	f7f2 fa17 	bl	8016a2c <lv_task_del>
}
 80245fe:	bf00      	nop
 8024600:	3708      	adds	r7, #8
 8024602:	46bd      	mov	sp, r7
 8024604:	bd80      	pop	{r7, pc}
 8024606:	bf00      	nop
 8024608:	2001bcc4 	.word	0x2001bcc4
 802460c:	2001bcc0 	.word	0x2001bcc0
 8024610:	2001bcd8 	.word	0x2001bcd8
 8024614:	0802ca68 	.word	0x0802ca68
 8024618:	2001bcc8 	.word	0x2001bcc8
 802461c:	2001bcd0 	.word	0x2001bcd0
 8024620:	2001bcb4 	.word	0x2001bcb4
 8024624:	2001bcd4 	.word	0x2001bcd4
 8024628:	2001bcdc 	.word	0x2001bcdc
 802462c:	2001bcdd 	.word	0x2001bcdd

08024630 <MusicPlayerSound_Init>:
/**/
void MusicPlayerSound_Init(bool theme){
 8024630:	b590      	push	{r4, r7, lr}
 8024632:	b087      	sub	sp, #28
 8024634:	af02      	add	r7, sp, #8
 8024636:	4603      	mov	r3, r0
 8024638:	71fb      	strb	r3, [r7, #7]

    static lv_style_t obj_Style,indic_Style;
    lv_style_copy(&obj_Style, &lv_style_plain);
 802463a:	496b      	ldr	r1, [pc, #428]	; (80247e8 <MusicPlayerSound_Init+0x1b8>)
 802463c:	486b      	ldr	r0, [pc, #428]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 802463e:	f7e6 fe5b 	bl	800b2f8 <lv_style_copy>
    obj_Style.text.color = LV_COLOR_BLACK;
 8024642:	4b6a      	ldr	r3, [pc, #424]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 8024644:	2200      	movs	r2, #0
 8024646:	841a      	strh	r2, [r3, #32]
    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 8024648:	79fb      	ldrb	r3, [r7, #7]
 802464a:	2b00      	cmp	r3, #0
 802464c:	d003      	beq.n	8024656 <MusicPlayerSound_Init+0x26>
 802464e:	4a67      	ldr	r2, [pc, #412]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 8024650:	4b67      	ldr	r3, [pc, #412]	; (80247f0 <MusicPlayerSound_Init+0x1c0>)
 8024652:	881b      	ldrh	r3, [r3, #0]
 8024654:	8413      	strh	r3, [r2, #32]
    obj_Style.text.font = &digital_font_for_number_30;	//373737
 8024656:	4b65      	ldr	r3, [pc, #404]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 8024658:	4a66      	ldr	r2, [pc, #408]	; (80247f4 <MusicPlayerSound_Init+0x1c4>)
 802465a:	625a      	str	r2, [r3, #36]	; 0x24
    if(theme){
 802465c:	79fb      	ldrb	r3, [r7, #7]
 802465e:	2b00      	cmp	r3, #0
 8024660:	d00e      	beq.n	8024680 <MusicPlayerSound_Init+0x50>
        obj_Style.body.main_color   = lv_color_make(0x00, 0x00, 0x00);
 8024662:	4c62      	ldr	r4, [pc, #392]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 8024664:	2200      	movs	r2, #0
 8024666:	2100      	movs	r1, #0
 8024668:	2000      	movs	r0, #0
 802466a:	f7ff feb5 	bl	80243d8 <lv_color_make>
 802466e:	8060      	strh	r0, [r4, #2]
        obj_Style.body.grad_color   = lv_color_make(0x00, 0x00, 0x00);
 8024670:	4c5e      	ldr	r4, [pc, #376]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 8024672:	2200      	movs	r2, #0
 8024674:	2100      	movs	r1, #0
 8024676:	2000      	movs	r0, #0
 8024678:	f7ff feae 	bl	80243d8 <lv_color_make>
 802467c:	80a0      	strh	r0, [r4, #4]
 802467e:	e00d      	b.n	802469c <MusicPlayerSound_Init+0x6c>
    }else {
        obj_Style.body.main_color   = lv_color_make(0x37, 0x37, 0x37);
 8024680:	4c5a      	ldr	r4, [pc, #360]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 8024682:	2237      	movs	r2, #55	; 0x37
 8024684:	2137      	movs	r1, #55	; 0x37
 8024686:	2037      	movs	r0, #55	; 0x37
 8024688:	f7ff fea6 	bl	80243d8 <lv_color_make>
 802468c:	8060      	strh	r0, [r4, #2]
        obj_Style.body.grad_color   = lv_color_make(0x37, 0x37, 0x37);
 802468e:	4c57      	ldr	r4, [pc, #348]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 8024690:	2237      	movs	r2, #55	; 0x37
 8024692:	2137      	movs	r1, #55	; 0x37
 8024694:	2037      	movs	r0, #55	; 0x37
 8024696:	f7ff fe9f 	bl	80243d8 <lv_color_make>
 802469a:	80a0      	strh	r0, [r4, #4]
    }
    obj_Style.body.radius= 10;
 802469c:	4b53      	ldr	r3, [pc, #332]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 802469e:	220a      	movs	r2, #10
 80246a0:	80da      	strh	r2, [r3, #6]
    obj_Style.body.opa=200;
 80246a2:	4b52      	ldr	r3, [pc, #328]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 80246a4:	22c8      	movs	r2, #200	; 0xc8
 80246a6:	721a      	strb	r2, [r3, #8]
    lv_style_copy(&indic_Style, &obj_Style);
 80246a8:	4950      	ldr	r1, [pc, #320]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 80246aa:	4853      	ldr	r0, [pc, #332]	; (80247f8 <MusicPlayerSound_Init+0x1c8>)
 80246ac:	f7e6 fe24 	bl	800b2f8 <lv_style_copy>
    if(theme){
 80246b0:	79fb      	ldrb	r3, [r7, #7]
 80246b2:	2b00      	cmp	r3, #0
 80246b4:	d00e      	beq.n	80246d4 <MusicPlayerSound_Init+0xa4>
        indic_Style.body.main_color   = lv_color_make(0xc0, 0xc0, 0xc0);
 80246b6:	4c50      	ldr	r4, [pc, #320]	; (80247f8 <MusicPlayerSound_Init+0x1c8>)
 80246b8:	22c0      	movs	r2, #192	; 0xc0
 80246ba:	21c0      	movs	r1, #192	; 0xc0
 80246bc:	20c0      	movs	r0, #192	; 0xc0
 80246be:	f7ff fe8b 	bl	80243d8 <lv_color_make>
 80246c2:	8060      	strh	r0, [r4, #2]
        indic_Style.body.grad_color   = lv_color_make(0xc0, 0xc0, 0xc0);
 80246c4:	4c4c      	ldr	r4, [pc, #304]	; (80247f8 <MusicPlayerSound_Init+0x1c8>)
 80246c6:	22c0      	movs	r2, #192	; 0xc0
 80246c8:	21c0      	movs	r1, #192	; 0xc0
 80246ca:	20c0      	movs	r0, #192	; 0xc0
 80246cc:	f7ff fe84 	bl	80243d8 <lv_color_make>
 80246d0:	80a0      	strh	r0, [r4, #4]
 80246d2:	e00d      	b.n	80246f0 <MusicPlayerSound_Init+0xc0>
    }else {
        indic_Style.body.main_color   = lv_color_make(0x37, 0x37, 0x37);
 80246d4:	4c48      	ldr	r4, [pc, #288]	; (80247f8 <MusicPlayerSound_Init+0x1c8>)
 80246d6:	2237      	movs	r2, #55	; 0x37
 80246d8:	2137      	movs	r1, #55	; 0x37
 80246da:	2037      	movs	r0, #55	; 0x37
 80246dc:	f7ff fe7c 	bl	80243d8 <lv_color_make>
 80246e0:	8060      	strh	r0, [r4, #2]
        indic_Style.body.grad_color   = lv_color_make(0x37, 0x37, 0x37);
 80246e2:	4c45      	ldr	r4, [pc, #276]	; (80247f8 <MusicPlayerSound_Init+0x1c8>)
 80246e4:	2237      	movs	r2, #55	; 0x37
 80246e6:	2137      	movs	r1, #55	; 0x37
 80246e8:	2037      	movs	r0, #55	; 0x37
 80246ea:	f7ff fe75 	bl	80243d8 <lv_color_make>
 80246ee:	80a0      	strh	r0, [r4, #4]
    }
    indic_Style.body.opa=255;
 80246f0:	4b41      	ldr	r3, [pc, #260]	; (80247f8 <MusicPlayerSound_Init+0x1c8>)
 80246f2:	22ff      	movs	r2, #255	; 0xff
 80246f4:	721a      	strb	r2, [r3, #8]

    MP_soundValBar = lv_bar_create(lv_scr_act(), NULL);
 80246f6:	f7ff fea7 	bl	8024448 <lv_scr_act>
 80246fa:	4603      	mov	r3, r0
 80246fc:	2100      	movs	r1, #0
 80246fe:	4618      	mov	r0, r3
 8024700:	f7f3 f97c 	bl	80179fc <lv_bar_create>
 8024704:	4602      	mov	r2, r0
 8024706:	4b3d      	ldr	r3, [pc, #244]	; (80247fc <MusicPlayerSound_Init+0x1cc>)
 8024708:	601a      	str	r2, [r3, #0]
    lv_bar_set_style(MP_soundValBar, LV_BAR_STYLE_BG, &obj_Style);
 802470a:	4b3c      	ldr	r3, [pc, #240]	; (80247fc <MusicPlayerSound_Init+0x1cc>)
 802470c:	681b      	ldr	r3, [r3, #0]
 802470e:	4a37      	ldr	r2, [pc, #220]	; (80247ec <MusicPlayerSound_Init+0x1bc>)
 8024710:	2100      	movs	r1, #0
 8024712:	4618      	mov	r0, r3
 8024714:	f7f3 fb08 	bl	8017d28 <lv_bar_set_style>
    lv_bar_set_style(MP_soundValBar, LV_BAR_STYLE_INDIC, &indic_Style);
 8024718:	4b38      	ldr	r3, [pc, #224]	; (80247fc <MusicPlayerSound_Init+0x1cc>)
 802471a:	681b      	ldr	r3, [r3, #0]
 802471c:	4a36      	ldr	r2, [pc, #216]	; (80247f8 <MusicPlayerSound_Init+0x1c8>)
 802471e:	2101      	movs	r1, #1
 8024720:	4618      	mov	r0, r3
 8024722:	f7f3 fb01 	bl	8017d28 <lv_bar_set_style>
    lv_obj_set_size(MP_soundValBar, 150, 25);
 8024726:	4b35      	ldr	r3, [pc, #212]	; (80247fc <MusicPlayerSound_Init+0x1cc>)
 8024728:	681b      	ldr	r3, [r3, #0]
 802472a:	2219      	movs	r2, #25
 802472c:	2196      	movs	r1, #150	; 0x96
 802472e:	4618      	mov	r0, r3
 8024730:	f7e4 fafb 	bl	8008d2a <lv_obj_set_size>
    lv_obj_align(MP_soundValBar, NULL, LV_ALIGN_CENTER, 0, -100);
 8024734:	4b31      	ldr	r3, [pc, #196]	; (80247fc <MusicPlayerSound_Init+0x1cc>)
 8024736:	6818      	ldr	r0, [r3, #0]
 8024738:	f06f 0363 	mvn.w	r3, #99	; 0x63
 802473c:	9300      	str	r3, [sp, #0]
 802473e:	2300      	movs	r3, #0
 8024740:	2200      	movs	r2, #0
 8024742:	2100      	movs	r1, #0
 8024744:	f7e4 fb94 	bl	8008e70 <lv_obj_align>
    lv_bar_set_range(MP_soundValBar,0,100);
 8024748:	4b2c      	ldr	r3, [pc, #176]	; (80247fc <MusicPlayerSound_Init+0x1cc>)
 802474a:	681b      	ldr	r3, [r3, #0]
 802474c:	2264      	movs	r2, #100	; 0x64
 802474e:	2100      	movs	r1, #0
 8024750:	4618      	mov	r0, r3
 8024752:	f7f3 fa9d 	bl	8017c90 <lv_bar_set_range>
    lv_bar_set_value(MP_soundValBar, 0, LV_ANIM_OFF);
 8024756:	4b29      	ldr	r3, [pc, #164]	; (80247fc <MusicPlayerSound_Init+0x1cc>)
 8024758:	681b      	ldr	r3, [r3, #0]
 802475a:	2200      	movs	r2, #0
 802475c:	2100      	movs	r1, #0
 802475e:	4618      	mov	r0, r3
 8024760:	f7f3 fa12 	bl	8017b88 <lv_bar_set_value>

    lv_obj_t * plusLbl = lv_label_create(lv_scr_act(), NULL);
 8024764:	f7ff fe70 	bl	8024448 <lv_scr_act>
 8024768:	4603      	mov	r3, r0
 802476a:	2100      	movs	r1, #0
 802476c:	4618      	mov	r0, r3
 802476e:	f7f7 fc97 	bl	801c0a0 <lv_label_create>
 8024772:	60f8      	str	r0, [r7, #12]
    lv_label_set_recolor(plusLbl, true);
 8024774:	2101      	movs	r1, #1
 8024776:	68f8      	ldr	r0, [r7, #12]
 8024778:	f7f7 fee0 	bl	801c53c <lv_label_set_recolor>
	lv_label_set_text(plusLbl, "#FFFFFF +#");
 802477c:	4920      	ldr	r1, [pc, #128]	; (8024800 <MusicPlayerSound_Init+0x1d0>)
 802477e:	68f8      	ldr	r0, [r7, #12]
 8024780:	f7f7 fdc0 	bl	801c304 <lv_label_set_text>
    lv_arc_set_style(plusLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8024784:	4a1f      	ldr	r2, [pc, #124]	; (8024804 <MusicPlayerSound_Init+0x1d4>)
 8024786:	2100      	movs	r1, #0
 8024788:	68f8      	ldr	r0, [r7, #12]
 802478a:	f7f2 ff2c 	bl	80175e6 <lv_arc_set_style>
 	lv_obj_align(plusLbl, MP_soundValBar, LV_ALIGN_CENTER, 65, 0);
 802478e:	4b1b      	ldr	r3, [pc, #108]	; (80247fc <MusicPlayerSound_Init+0x1cc>)
 8024790:	6819      	ldr	r1, [r3, #0]
 8024792:	2300      	movs	r3, #0
 8024794:	9300      	str	r3, [sp, #0]
 8024796:	2341      	movs	r3, #65	; 0x41
 8024798:	2200      	movs	r2, #0
 802479a:	68f8      	ldr	r0, [r7, #12]
 802479c:	f7e4 fb68 	bl	8008e70 <lv_obj_align>

    lv_obj_t * minusLbl = lv_label_create(lv_scr_act(), NULL);
 80247a0:	f7ff fe52 	bl	8024448 <lv_scr_act>
 80247a4:	4603      	mov	r3, r0
 80247a6:	2100      	movs	r1, #0
 80247a8:	4618      	mov	r0, r3
 80247aa:	f7f7 fc79 	bl	801c0a0 <lv_label_create>
 80247ae:	60b8      	str	r0, [r7, #8]
    lv_label_set_recolor(minusLbl, true);
 80247b0:	2101      	movs	r1, #1
 80247b2:	68b8      	ldr	r0, [r7, #8]
 80247b4:	f7f7 fec2 	bl	801c53c <lv_label_set_recolor>
	lv_label_set_text(minusLbl, "#FFFFFF -#");
 80247b8:	4913      	ldr	r1, [pc, #76]	; (8024808 <MusicPlayerSound_Init+0x1d8>)
 80247ba:	68b8      	ldr	r0, [r7, #8]
 80247bc:	f7f7 fda2 	bl	801c304 <lv_label_set_text>
    lv_arc_set_style(minusLbl, LV_ARC_STYLE_MAIN, &description_Style);
 80247c0:	4a10      	ldr	r2, [pc, #64]	; (8024804 <MusicPlayerSound_Init+0x1d4>)
 80247c2:	2100      	movs	r1, #0
 80247c4:	68b8      	ldr	r0, [r7, #8]
 80247c6:	f7f2 ff0e 	bl	80175e6 <lv_arc_set_style>
 	lv_obj_align(minusLbl, MP_soundValBar, LV_ALIGN_CENTER, -65, 0);
 80247ca:	4b0c      	ldr	r3, [pc, #48]	; (80247fc <MusicPlayerSound_Init+0x1cc>)
 80247cc:	6819      	ldr	r1, [r3, #0]
 80247ce:	2300      	movs	r3, #0
 80247d0:	9300      	str	r3, [sp, #0]
 80247d2:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80247d6:	2200      	movs	r2, #0
 80247d8:	68b8      	ldr	r0, [r7, #8]
 80247da:	f7e4 fb49 	bl	8008e70 <lv_obj_align>

}
 80247de:	bf00      	nop
 80247e0:	3714      	adds	r7, #20
 80247e2:	46bd      	mov	sp, r7
 80247e4:	bd90      	pop	{r4, r7, pc}
 80247e6:	bf00      	nop
 80247e8:	2001ba10 	.word	0x2001ba10
 80247ec:	2001ace8 	.word	0x2001ace8
 80247f0:	0802ca88 	.word	0x0802ca88
 80247f4:	200027ec 	.word	0x200027ec
 80247f8:	2001ad24 	.word	0x2001ad24
 80247fc:	2001bcb4 	.word	0x2001bcb4
 8024800:	0802ca70 	.word	0x0802ca70
 8024804:	2001aca8 	.word	0x2001aca8
 8024808:	0802ca7c 	.word	0x0802ca7c

0802480c <MusicPlayerPlayingVal_Init>:
/*his function using for initialization playing statu image obj.*/
void MusicPlayerPlayingVal_Init(bool theme){
 802480c:	b580      	push	{r7, lr}
 802480e:	b084      	sub	sp, #16
 8024810:	af02      	add	r7, sp, #8
 8024812:	4603      	mov	r3, r0
 8024814:	71fb      	strb	r3, [r7, #7]

	MP_PlayingVAl_Img = lv_img_create(lv_scr_act(), NULL);
 8024816:	f7ff fe17 	bl	8024448 <lv_scr_act>
 802481a:	4603      	mov	r3, r0
 802481c:	2100      	movs	r1, #0
 802481e:	4618      	mov	r0, r3
 8024820:	f7f7 f8b2 	bl	801b988 <lv_img_create>
 8024824:	4602      	mov	r2, r0
 8024826:	4b0b      	ldr	r3, [pc, #44]	; (8024854 <MusicPlayerPlayingVal_Init+0x48>)
 8024828:	601a      	str	r2, [r3, #0]
	MusicPlayerImgSet(MP_statu,theme);
 802482a:	4b0b      	ldr	r3, [pc, #44]	; (8024858 <MusicPlayerPlayingVal_Init+0x4c>)
 802482c:	781b      	ldrb	r3, [r3, #0]
 802482e:	79fa      	ldrb	r2, [r7, #7]
 8024830:	4611      	mov	r1, r2
 8024832:	4618      	mov	r0, r3
 8024834:	f000 f90a 	bl	8024a4c <MusicPlayerImgSet>
	lv_obj_align(MP_PlayingVAl_Img, NULL, LV_ALIGN_CENTER, 0,0);
 8024838:	4b06      	ldr	r3, [pc, #24]	; (8024854 <MusicPlayerPlayingVal_Init+0x48>)
 802483a:	6818      	ldr	r0, [r3, #0]
 802483c:	2300      	movs	r3, #0
 802483e:	9300      	str	r3, [sp, #0]
 8024840:	2300      	movs	r3, #0
 8024842:	2200      	movs	r2, #0
 8024844:	2100      	movs	r1, #0
 8024846:	f7e4 fb13 	bl	8008e70 <lv_obj_align>

}
 802484a:	bf00      	nop
 802484c:	3708      	adds	r7, #8
 802484e:	46bd      	mov	sp, r7
 8024850:	bd80      	pop	{r7, pc}
 8024852:	bf00      	nop
 8024854:	2001bcb8 	.word	0x2001bcb8
 8024858:	2001bcdc 	.word	0x2001bcdc

0802485c <MusicPlayerDescriptionLbl_Init>:
/*This funct}ion using for initialization description(name & songer) of music */
void MusicPlayerDescriptionLbl_Init(bool theme){
 802485c:	b580      	push	{r7, lr}
 802485e:	b084      	sub	sp, #16
 8024860:	af02      	add	r7, sp, #8
 8024862:	4603      	mov	r3, r0
 8024864:	71fb      	strb	r3, [r7, #7]

 	MP_SongNameLbl = lv_label_create(lv_scr_act(), NULL);
 8024866:	f7ff fdef 	bl	8024448 <lv_scr_act>
 802486a:	4603      	mov	r3, r0
 802486c:	2100      	movs	r1, #0
 802486e:	4618      	mov	r0, r3
 8024870:	f7f7 fc16 	bl	801c0a0 <lv_label_create>
 8024874:	4602      	mov	r2, r0
 8024876:	4b24      	ldr	r3, [pc, #144]	; (8024908 <MusicPlayerDescriptionLbl_Init+0xac>)
 8024878:	601a      	str	r2, [r3, #0]
 	lv_obj_set_width(MP_SongNameLbl, 240);
 802487a:	4b23      	ldr	r3, [pc, #140]	; (8024908 <MusicPlayerDescriptionLbl_Init+0xac>)
 802487c:	681b      	ldr	r3, [r3, #0]
 802487e:	21f0      	movs	r1, #240	; 0xf0
 8024880:	4618      	mov	r0, r3
 8024882:	f7e4 facb 	bl	8008e1c <lv_obj_set_width>
	lv_label_set_text(MP_SongNameLbl, "song name");
 8024886:	4b20      	ldr	r3, [pc, #128]	; (8024908 <MusicPlayerDescriptionLbl_Init+0xac>)
 8024888:	681b      	ldr	r3, [r3, #0]
 802488a:	4920      	ldr	r1, [pc, #128]	; (802490c <MusicPlayerDescriptionLbl_Init+0xb0>)
 802488c:	4618      	mov	r0, r3
 802488e:	f7f7 fd39 	bl	801c304 <lv_label_set_text>
    lv_arc_set_style(MP_SongNameLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8024892:	4b1d      	ldr	r3, [pc, #116]	; (8024908 <MusicPlayerDescriptionLbl_Init+0xac>)
 8024894:	681b      	ldr	r3, [r3, #0]
 8024896:	4a1e      	ldr	r2, [pc, #120]	; (8024910 <MusicPlayerDescriptionLbl_Init+0xb4>)
 8024898:	2100      	movs	r1, #0
 802489a:	4618      	mov	r0, r3
 802489c:	f7f2 fea3 	bl	80175e6 <lv_arc_set_style>
 	lv_obj_align(MP_SongNameLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 80248a0:	4b19      	ldr	r3, [pc, #100]	; (8024908 <MusicPlayerDescriptionLbl_Init+0xac>)
 80248a2:	6818      	ldr	r0, [r3, #0]
 80248a4:	2332      	movs	r3, #50	; 0x32
 80248a6:	9300      	str	r3, [sp, #0]
 80248a8:	2300      	movs	r3, #0
 80248aa:	2200      	movs	r2, #0
 80248ac:	2100      	movs	r1, #0
 80248ae:	f7e4 fadf 	bl	8008e70 <lv_obj_align>

	MP_SingerLbl = lv_label_create(lv_scr_act(), NULL);
 80248b2:	f7ff fdc9 	bl	8024448 <lv_scr_act>
 80248b6:	4603      	mov	r3, r0
 80248b8:	2100      	movs	r1, #0
 80248ba:	4618      	mov	r0, r3
 80248bc:	f7f7 fbf0 	bl	801c0a0 <lv_label_create>
 80248c0:	4602      	mov	r2, r0
 80248c2:	4b14      	ldr	r3, [pc, #80]	; (8024914 <MusicPlayerDescriptionLbl_Init+0xb8>)
 80248c4:	601a      	str	r2, [r3, #0]
 	lv_obj_set_width(MP_SingerLbl, 240);
 80248c6:	4b13      	ldr	r3, [pc, #76]	; (8024914 <MusicPlayerDescriptionLbl_Init+0xb8>)
 80248c8:	681b      	ldr	r3, [r3, #0]
 80248ca:	21f0      	movs	r1, #240	; 0xf0
 80248cc:	4618      	mov	r0, r3
 80248ce:	f7e4 faa5 	bl	8008e1c <lv_obj_set_width>
	lv_label_set_text(MP_SingerLbl, "song actrist");
 80248d2:	4b10      	ldr	r3, [pc, #64]	; (8024914 <MusicPlayerDescriptionLbl_Init+0xb8>)
 80248d4:	681b      	ldr	r3, [r3, #0]
 80248d6:	4910      	ldr	r1, [pc, #64]	; (8024918 <MusicPlayerDescriptionLbl_Init+0xbc>)
 80248d8:	4618      	mov	r0, r3
 80248da:	f7f7 fd13 	bl	801c304 <lv_label_set_text>
    lv_arc_set_style(MP_SingerLbl, LV_ARC_STYLE_MAIN, &description_Style);
 80248de:	4b0d      	ldr	r3, [pc, #52]	; (8024914 <MusicPlayerDescriptionLbl_Init+0xb8>)
 80248e0:	681b      	ldr	r3, [r3, #0]
 80248e2:	4a0b      	ldr	r2, [pc, #44]	; (8024910 <MusicPlayerDescriptionLbl_Init+0xb4>)
 80248e4:	2100      	movs	r1, #0
 80248e6:	4618      	mov	r0, r3
 80248e8:	f7f2 fe7d 	bl	80175e6 <lv_arc_set_style>
 	lv_obj_align(MP_SingerLbl, NULL, LV_ALIGN_CENTER, 0, 85);
 80248ec:	4b09      	ldr	r3, [pc, #36]	; (8024914 <MusicPlayerDescriptionLbl_Init+0xb8>)
 80248ee:	6818      	ldr	r0, [r3, #0]
 80248f0:	2355      	movs	r3, #85	; 0x55
 80248f2:	9300      	str	r3, [sp, #0]
 80248f4:	2300      	movs	r3, #0
 80248f6:	2200      	movs	r2, #0
 80248f8:	2100      	movs	r1, #0
 80248fa:	f7e4 fab9 	bl	8008e70 <lv_obj_align>


}
 80248fe:	bf00      	nop
 8024900:	3708      	adds	r7, #8
 8024902:	46bd      	mov	sp, r7
 8024904:	bd80      	pop	{r7, pc}
 8024906:	bf00      	nop
 8024908:	2001bcd8 	.word	0x2001bcd8
 802490c:	0802ca8c 	.word	0x0802ca8c
 8024910:	2001aca8 	.word	0x2001aca8
 8024914:	2001bcd0 	.word	0x2001bcd0
 8024918:	0802ca98 	.word	0x0802ca98

0802491c <MusicPlayer_ButtonController>:
/*This function using for control to buttons*/
void MusicPlayer_ButtonController(void){
 802491c:	b580      	push	{r7, lr}
 802491e:	af00      	add	r7, sp, #0
	if(!MP_isButtonPressed){
 8024920:	4b2f      	ldr	r3, [pc, #188]	; (80249e0 <MusicPlayer_ButtonController+0xc4>)
 8024922:	781b      	ldrb	r3, [r3, #0]
 8024924:	f083 0301 	eor.w	r3, r3, #1
 8024928:	b2db      	uxtb	r3, r3
 802492a:	2b00      	cmp	r3, #0
 802492c:	d056      	beq.n	80249dc <MusicPlayer_ButtonController+0xc0>
		  if(2==MP_leftBtnListen){
 802492e:	4b2d      	ldr	r3, [pc, #180]	; (80249e4 <MusicPlayer_ButtonController+0xc8>)
 8024930:	781b      	ldrb	r3, [r3, #0]
 8024932:	2b02      	cmp	r3, #2
 8024934:	d105      	bne.n	8024942 <MusicPlayer_ButtonController+0x26>
				MP_isButtonPressed=true;
 8024936:	4b2a      	ldr	r3, [pc, #168]	; (80249e0 <MusicPlayer_ButtonController+0xc4>)
 8024938:	2201      	movs	r2, #1
 802493a:	701a      	strb	r2, [r3, #0]
			   MP_statu=2;
 802493c:	4b2a      	ldr	r3, [pc, #168]	; (80249e8 <MusicPlayer_ButtonController+0xcc>)
 802493e:	2202      	movs	r2, #2
 8024940:	701a      	strb	r2, [r3, #0]
		  }
		if(2==MP_rightBtnListen){
 8024942:	4b2a      	ldr	r3, [pc, #168]	; (80249ec <MusicPlayer_ButtonController+0xd0>)
 8024944:	781b      	ldrb	r3, [r3, #0]
 8024946:	2b02      	cmp	r3, #2
 8024948:	d10d      	bne.n	8024966 <MusicPlayer_ButtonController+0x4a>
				MP_isButtonPressed=true;
 802494a:	4b25      	ldr	r3, [pc, #148]	; (80249e0 <MusicPlayer_ButtonController+0xc4>)
 802494c:	2201      	movs	r2, #1
 802494e:	701a      	strb	r2, [r3, #0]
			if(MP_buttonMode)MP_buttonMode=false;
 8024950:	4b27      	ldr	r3, [pc, #156]	; (80249f0 <MusicPlayer_ButtonController+0xd4>)
 8024952:	781b      	ldrb	r3, [r3, #0]
 8024954:	2b00      	cmp	r3, #0
 8024956:	d003      	beq.n	8024960 <MusicPlayer_ButtonController+0x44>
 8024958:	4b25      	ldr	r3, [pc, #148]	; (80249f0 <MusicPlayer_ButtonController+0xd4>)
 802495a:	2200      	movs	r2, #0
 802495c:	701a      	strb	r2, [r3, #0]
 802495e:	e002      	b.n	8024966 <MusicPlayer_ButtonController+0x4a>
			else MP_buttonMode=true;
 8024960:	4b23      	ldr	r3, [pc, #140]	; (80249f0 <MusicPlayer_ButtonController+0xd4>)
 8024962:	2201      	movs	r2, #1
 8024964:	701a      	strb	r2, [r3, #0]
				  }
	if(1==MP_leftBtnListen) {
 8024966:	4b1f      	ldr	r3, [pc, #124]	; (80249e4 <MusicPlayer_ButtonController+0xc8>)
 8024968:	781b      	ldrb	r3, [r3, #0]
 802496a:	2b01      	cmp	r3, #1
 802496c:	d119      	bne.n	80249a2 <MusicPlayer_ButtonController+0x86>
				MP_isButtonPressed=true;
 802496e:	4b1c      	ldr	r3, [pc, #112]	; (80249e0 <MusicPlayer_ButtonController+0xc4>)
 8024970:	2201      	movs	r2, #1
 8024972:	701a      	strb	r2, [r3, #0]
			if(MP_buttonMode) soundVolumeController(false);
 8024974:	4b1e      	ldr	r3, [pc, #120]	; (80249f0 <MusicPlayer_ButtonController+0xd4>)
 8024976:	781b      	ldrb	r3, [r3, #0]
 8024978:	2b00      	cmp	r3, #0
 802497a:	d003      	beq.n	8024984 <MusicPlayer_ButtonController+0x68>
 802497c:	2000      	movs	r0, #0
 802497e:	f000 f839 	bl	80249f4 <soundVolumeController>
 8024982:	e00e      	b.n	80249a2 <MusicPlayer_ButtonController+0x86>
			else{
				if((1==MP_statu) || (2==MP_statu)) MP_statu=0;
 8024984:	4b18      	ldr	r3, [pc, #96]	; (80249e8 <MusicPlayer_ButtonController+0xcc>)
 8024986:	781b      	ldrb	r3, [r3, #0]
 8024988:	2b01      	cmp	r3, #1
 802498a:	d003      	beq.n	8024994 <MusicPlayer_ButtonController+0x78>
 802498c:	4b16      	ldr	r3, [pc, #88]	; (80249e8 <MusicPlayer_ButtonController+0xcc>)
 802498e:	781b      	ldrb	r3, [r3, #0]
 8024990:	2b02      	cmp	r3, #2
 8024992:	d103      	bne.n	802499c <MusicPlayer_ButtonController+0x80>
 8024994:	4b14      	ldr	r3, [pc, #80]	; (80249e8 <MusicPlayer_ButtonController+0xcc>)
 8024996:	2200      	movs	r2, #0
 8024998:	701a      	strb	r2, [r3, #0]
 802499a:	e002      	b.n	80249a2 <MusicPlayer_ButtonController+0x86>
				else MP_statu=1;
 802499c:	4b12      	ldr	r3, [pc, #72]	; (80249e8 <MusicPlayer_ButtonController+0xcc>)
 802499e:	2201      	movs	r2, #1
 80249a0:	701a      	strb	r2, [r3, #0]
				  }
			  }


	if(1==MP_rightBtnListen) {
 80249a2:	4b12      	ldr	r3, [pc, #72]	; (80249ec <MusicPlayer_ButtonController+0xd0>)
 80249a4:	781b      	ldrb	r3, [r3, #0]
 80249a6:	2b01      	cmp	r3, #1
 80249a8:	d109      	bne.n	80249be <MusicPlayer_ButtonController+0xa2>
				MP_isButtonPressed=true;
 80249aa:	4b0d      	ldr	r3, [pc, #52]	; (80249e0 <MusicPlayer_ButtonController+0xc4>)
 80249ac:	2201      	movs	r2, #1
 80249ae:	701a      	strb	r2, [r3, #0]
				if(MP_buttonMode) soundVolumeController(true);
 80249b0:	4b0f      	ldr	r3, [pc, #60]	; (80249f0 <MusicPlayer_ButtonController+0xd4>)
 80249b2:	781b      	ldrb	r3, [r3, #0]
 80249b4:	2b00      	cmp	r3, #0
 80249b6:	d002      	beq.n	80249be <MusicPlayer_ButtonController+0xa2>
 80249b8:	2001      	movs	r0, #1
 80249ba:	f000 f81b 	bl	80249f4 <soundVolumeController>

			  }
				MP_isButtonPressed=false;
 80249be:	4b08      	ldr	r3, [pc, #32]	; (80249e0 <MusicPlayer_ButtonController+0xc4>)
 80249c0:	2200      	movs	r2, #0
 80249c2:	701a      	strb	r2, [r3, #0]
				MP_rightBtnListen=tos_RightButton_Listenner_For_MenuControl();
 80249c4:	f004 fc86 	bl	80292d4 <tos_RightButton_Listenner_For_MenuControl>
 80249c8:	4603      	mov	r3, r0
 80249ca:	461a      	mov	r2, r3
 80249cc:	4b07      	ldr	r3, [pc, #28]	; (80249ec <MusicPlayer_ButtonController+0xd0>)
 80249ce:	701a      	strb	r2, [r3, #0]
				MP_leftBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 80249d0:	f004 fca8 	bl	8029324 <tos_LeftButton_Listenner_For_MenuControl>
 80249d4:	4603      	mov	r3, r0
 80249d6:	461a      	mov	r2, r3
 80249d8:	4b02      	ldr	r3, [pc, #8]	; (80249e4 <MusicPlayer_ButtonController+0xc8>)
 80249da:	701a      	strb	r2, [r3, #0]
	}

}
 80249dc:	bf00      	nop
 80249de:	bd80      	pop	{r7, pc}
 80249e0:	2001bcbc 	.word	0x2001bcbc
 80249e4:	2001ace5 	.word	0x2001ace5
 80249e8:	2001bcdc 	.word	0x2001bcdc
 80249ec:	2001ace4 	.word	0x2001ace4
 80249f0:	2001bccc 	.word	0x2001bccc

080249f4 <soundVolumeController>:
/*This function using for plus or minus volume
 * @param vol
 * true -> plus
 * false -> minus */
void soundVolumeController(bool vol){
 80249f4:	b480      	push	{r7}
 80249f6:	b083      	sub	sp, #12
 80249f8:	af00      	add	r7, sp, #0
 80249fa:	4603      	mov	r3, r0
 80249fc:	71fb      	strb	r3, [r7, #7]
	if(vol && MP_SoundVal<100) MP_SoundVal+=5;
 80249fe:	79fb      	ldrb	r3, [r7, #7]
 8024a00:	2b00      	cmp	r3, #0
 8024a02:	d00a      	beq.n	8024a1a <soundVolumeController+0x26>
 8024a04:	4b10      	ldr	r3, [pc, #64]	; (8024a48 <soundVolumeController+0x54>)
 8024a06:	781b      	ldrb	r3, [r3, #0]
 8024a08:	2b63      	cmp	r3, #99	; 0x63
 8024a0a:	d806      	bhi.n	8024a1a <soundVolumeController+0x26>
 8024a0c:	4b0e      	ldr	r3, [pc, #56]	; (8024a48 <soundVolumeController+0x54>)
 8024a0e:	781b      	ldrb	r3, [r3, #0]
 8024a10:	3305      	adds	r3, #5
 8024a12:	b2da      	uxtb	r2, r3
 8024a14:	4b0c      	ldr	r3, [pc, #48]	; (8024a48 <soundVolumeController+0x54>)
 8024a16:	701a      	strb	r2, [r3, #0]
	else if(!vol && MP_SoundVal>0) MP_SoundVal-=5;
}
 8024a18:	e00f      	b.n	8024a3a <soundVolumeController+0x46>
	else if(!vol && MP_SoundVal>0) MP_SoundVal-=5;
 8024a1a:	79fb      	ldrb	r3, [r7, #7]
 8024a1c:	f083 0301 	eor.w	r3, r3, #1
 8024a20:	b2db      	uxtb	r3, r3
 8024a22:	2b00      	cmp	r3, #0
 8024a24:	d009      	beq.n	8024a3a <soundVolumeController+0x46>
 8024a26:	4b08      	ldr	r3, [pc, #32]	; (8024a48 <soundVolumeController+0x54>)
 8024a28:	781b      	ldrb	r3, [r3, #0]
 8024a2a:	2b00      	cmp	r3, #0
 8024a2c:	d005      	beq.n	8024a3a <soundVolumeController+0x46>
 8024a2e:	4b06      	ldr	r3, [pc, #24]	; (8024a48 <soundVolumeController+0x54>)
 8024a30:	781b      	ldrb	r3, [r3, #0]
 8024a32:	3b05      	subs	r3, #5
 8024a34:	b2da      	uxtb	r2, r3
 8024a36:	4b04      	ldr	r3, [pc, #16]	; (8024a48 <soundVolumeController+0x54>)
 8024a38:	701a      	strb	r2, [r3, #0]
}
 8024a3a:	bf00      	nop
 8024a3c:	370c      	adds	r7, #12
 8024a3e:	46bd      	mov	sp, r7
 8024a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a44:	4770      	bx	lr
 8024a46:	bf00      	nop
 8024a48:	2001bcd4 	.word	0x2001bcd4

08024a4c <MusicPlayerImgSet>:
 * 1 -> pause
 * 2 -> stop
 * @param theme using for image backgraud select
 * false -> white
 * true -> black*/
void  MusicPlayerImgSet(uint8_t statu,bool theme){
 8024a4c:	b580      	push	{r7, lr}
 8024a4e:	b082      	sub	sp, #8
 8024a50:	af00      	add	r7, sp, #0
 8024a52:	4603      	mov	r3, r0
 8024a54:	460a      	mov	r2, r1
 8024a56:	71fb      	strb	r3, [r7, #7]
 8024a58:	4613      	mov	r3, r2
 8024a5a:	71bb      	strb	r3, [r7, #6]

	switch(statu){
 8024a5c:	79fb      	ldrb	r3, [r7, #7]
 8024a5e:	2b01      	cmp	r3, #1
 8024a60:	d015      	beq.n	8024a8e <MusicPlayerImgSet+0x42>
 8024a62:	2b02      	cmp	r3, #2
 8024a64:	d024      	beq.n	8024ab0 <MusicPlayerImgSet+0x64>
 8024a66:	2b00      	cmp	r3, #0
 8024a68:	d000      	beq.n	8024a6c <MusicPlayerImgSet+0x20>
		break;
	case 2:
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&stopBlack50x50 );
		else lv_img_set_src(MP_PlayingVAl_Img,&stopWhite50x50 );
		break;
	default: return;
 8024a6a:	e032      	b.n	8024ad2 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&playBlack50x50 );
 8024a6c:	79bb      	ldrb	r3, [r7, #6]
 8024a6e:	2b00      	cmp	r3, #0
 8024a70:	d006      	beq.n	8024a80 <MusicPlayerImgSet+0x34>
 8024a72:	4b19      	ldr	r3, [pc, #100]	; (8024ad8 <MusicPlayerImgSet+0x8c>)
 8024a74:	681b      	ldr	r3, [r3, #0]
 8024a76:	4919      	ldr	r1, [pc, #100]	; (8024adc <MusicPlayerImgSet+0x90>)
 8024a78:	4618      	mov	r0, r3
 8024a7a:	f7f7 f823 	bl	801bac4 <lv_img_set_src>
		break;
 8024a7e:	e028      	b.n	8024ad2 <MusicPlayerImgSet+0x86>
		else lv_img_set_src(MP_PlayingVAl_Img,&playWhite50x50 );
 8024a80:	4b15      	ldr	r3, [pc, #84]	; (8024ad8 <MusicPlayerImgSet+0x8c>)
 8024a82:	681b      	ldr	r3, [r3, #0]
 8024a84:	4916      	ldr	r1, [pc, #88]	; (8024ae0 <MusicPlayerImgSet+0x94>)
 8024a86:	4618      	mov	r0, r3
 8024a88:	f7f7 f81c 	bl	801bac4 <lv_img_set_src>
		break;
 8024a8c:	e021      	b.n	8024ad2 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&pauseBlack50x50 );
 8024a8e:	79bb      	ldrb	r3, [r7, #6]
 8024a90:	2b00      	cmp	r3, #0
 8024a92:	d006      	beq.n	8024aa2 <MusicPlayerImgSet+0x56>
 8024a94:	4b10      	ldr	r3, [pc, #64]	; (8024ad8 <MusicPlayerImgSet+0x8c>)
 8024a96:	681b      	ldr	r3, [r3, #0]
 8024a98:	4912      	ldr	r1, [pc, #72]	; (8024ae4 <MusicPlayerImgSet+0x98>)
 8024a9a:	4618      	mov	r0, r3
 8024a9c:	f7f7 f812 	bl	801bac4 <lv_img_set_src>
		break;
 8024aa0:	e017      	b.n	8024ad2 <MusicPlayerImgSet+0x86>
		else lv_img_set_src(MP_PlayingVAl_Img,&pauseWhite50x50 );
 8024aa2:	4b0d      	ldr	r3, [pc, #52]	; (8024ad8 <MusicPlayerImgSet+0x8c>)
 8024aa4:	681b      	ldr	r3, [r3, #0]
 8024aa6:	4910      	ldr	r1, [pc, #64]	; (8024ae8 <MusicPlayerImgSet+0x9c>)
 8024aa8:	4618      	mov	r0, r3
 8024aaa:	f7f7 f80b 	bl	801bac4 <lv_img_set_src>
		break;
 8024aae:	e010      	b.n	8024ad2 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&stopBlack50x50 );
 8024ab0:	79bb      	ldrb	r3, [r7, #6]
 8024ab2:	2b00      	cmp	r3, #0
 8024ab4:	d006      	beq.n	8024ac4 <MusicPlayerImgSet+0x78>
 8024ab6:	4b08      	ldr	r3, [pc, #32]	; (8024ad8 <MusicPlayerImgSet+0x8c>)
 8024ab8:	681b      	ldr	r3, [r3, #0]
 8024aba:	490c      	ldr	r1, [pc, #48]	; (8024aec <MusicPlayerImgSet+0xa0>)
 8024abc:	4618      	mov	r0, r3
 8024abe:	f7f7 f801 	bl	801bac4 <lv_img_set_src>
		break;
 8024ac2:	e005      	b.n	8024ad0 <MusicPlayerImgSet+0x84>
		else lv_img_set_src(MP_PlayingVAl_Img,&stopWhite50x50 );
 8024ac4:	4b04      	ldr	r3, [pc, #16]	; (8024ad8 <MusicPlayerImgSet+0x8c>)
 8024ac6:	681b      	ldr	r3, [r3, #0]
 8024ac8:	4909      	ldr	r1, [pc, #36]	; (8024af0 <MusicPlayerImgSet+0xa4>)
 8024aca:	4618      	mov	r0, r3
 8024acc:	f7f6 fffa 	bl	801bac4 <lv_img_set_src>
		break;
 8024ad0:	bf00      	nop
	}
}
 8024ad2:	3708      	adds	r7, #8
 8024ad4:	46bd      	mov	sp, r7
 8024ad6:	bd80      	pop	{r7, pc}
 8024ad8:	2001bcb8 	.word	0x2001bcb8
 8024adc:	080402e0 	.word	0x080402e0
 8024ae0:	08041674 	.word	0x08041674
 8024ae4:	0803dbb8 	.word	0x0803dbb8
 8024ae8:	0803ef4c 	.word	0x0803ef4c
 8024aec:	08043c80 	.word	0x08043c80
 8024af0:	08045014 	.word	0x08045014

08024af4 <MusicPlayer_TaskControllerSet>:
//Setter Getter Functions
void MusicPlayer_TaskControllerSet(bool active){
 8024af4:	b480      	push	{r7}
 8024af6:	b083      	sub	sp, #12
 8024af8:	af00      	add	r7, sp, #0
 8024afa:	4603      	mov	r3, r0
 8024afc:	71fb      	strb	r3, [r7, #7]
	MP_taskController = active;
 8024afe:	4a04      	ldr	r2, [pc, #16]	; (8024b10 <MusicPlayer_TaskControllerSet+0x1c>)
 8024b00:	79fb      	ldrb	r3, [r7, #7]
 8024b02:	7013      	strb	r3, [r2, #0]
}
 8024b04:	bf00      	nop
 8024b06:	370c      	adds	r7, #12
 8024b08:	46bd      	mov	sp, r7
 8024b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b0e:	4770      	bx	lr
 8024b10:	2001bcc4 	.word	0x2001bcc4

08024b14 <MusicPlayer_TaskControllerGet>:
	MP_SongName = name;
}
void MusicPlayer_MP_SoundVAlSet(uint8_t volume){
	MP_SoundVal = volume;
}
bool MusicPlayer_TaskControllerGet(void){
 8024b14:	b480      	push	{r7}
 8024b16:	af00      	add	r7, sp, #0
	return MP_taskController;
 8024b18:	4b03      	ldr	r3, [pc, #12]	; (8024b28 <MusicPlayer_TaskControllerGet+0x14>)
 8024b1a:	781b      	ldrb	r3, [r3, #0]
}
 8024b1c:	4618      	mov	r0, r3
 8024b1e:	46bd      	mov	sp, r7
 8024b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b24:	4770      	bx	lr
 8024b26:	bf00      	nop
 8024b28:	2001bcc4 	.word	0x2001bcc4

08024b2c <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8024b2c:	b580      	push	{r7, lr}
 8024b2e:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8024b30:	f7f0 fb00 	bl	8015134 <lv_disp_get_default>
 8024b34:	4603      	mov	r3, r0
 8024b36:	4618      	mov	r0, r3
 8024b38:	f7e2 ffc8 	bl	8007acc <lv_disp_get_scr_act>
 8024b3c:	4603      	mov	r3, r0
}
 8024b3e:	4618      	mov	r0, r3
 8024b40:	bd80      	pop	{r7, pc}

08024b42 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8024b42:	b580      	push	{r7, lr}
 8024b44:	b084      	sub	sp, #16
 8024b46:	af00      	add	r7, sp, #0
 8024b48:	60f8      	str	r0, [r7, #12]
 8024b4a:	460b      	mov	r3, r1
 8024b4c:	607a      	str	r2, [r7, #4]
 8024b4e:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8024b50:	6879      	ldr	r1, [r7, #4]
 8024b52:	68f8      	ldr	r0, [r7, #12]
 8024b54:	f7e4 fe31 	bl	80097ba <lv_obj_set_style>
}
 8024b58:	bf00      	nop
 8024b5a:	3710      	adds	r7, #16
 8024b5c:	46bd      	mov	sp, r7
 8024b5e:	bd80      	pop	{r7, pc}

08024b60 <lv_cb_set_checked>:
 * Set the state of the check box
 * @param cb pointer to a check box object
 * @param checked true: make the check box checked; false: make it unchecked
 */
static inline void lv_cb_set_checked(lv_obj_t * cb, bool checked)
{
 8024b60:	b580      	push	{r7, lr}
 8024b62:	b082      	sub	sp, #8
 8024b64:	af00      	add	r7, sp, #0
 8024b66:	6078      	str	r0, [r7, #4]
 8024b68:	460b      	mov	r3, r1
 8024b6a:	70fb      	strb	r3, [r7, #3]
    lv_btn_set_state(cb, checked ? LV_BTN_STATE_TGL_REL : LV_BTN_STATE_REL);
 8024b6c:	78fb      	ldrb	r3, [r7, #3]
 8024b6e:	2b00      	cmp	r3, #0
 8024b70:	d001      	beq.n	8024b76 <lv_cb_set_checked+0x16>
 8024b72:	2302      	movs	r3, #2
 8024b74:	e000      	b.n	8024b78 <lv_cb_set_checked+0x18>
 8024b76:	2300      	movs	r3, #0
 8024b78:	4619      	mov	r1, r3
 8024b7a:	6878      	ldr	r0, [r7, #4]
 8024b7c:	f7f3 fd08 	bl	8018590 <lv_btn_set_state>
}
 8024b80:	bf00      	nop
 8024b82:	3708      	adds	r7, #8
 8024b84:	46bd      	mov	sp, r7
 8024b86:	bd80      	pop	{r7, pc}

08024b88 <tos_NotificationScreen_Init>:
int8_t NotificationScreen_GetMaxScroll(tos_Notification* node);
void NotificationScreen_Items(char *appName,char * appNotification,tos_Position pos,bool isSelected);
void NotificationScreen_SetOnScreenItems(tos_Notification * root,tos_Notification* node,int8_t posIndex);
void NotificationScreen_NotificationBox(char * appNotification);
/*This function using for initialization notification screen*/
void tos_NotificationScreen_Init(bool theme){
 8024b88:	b580      	push	{r7, lr}
 8024b8a:	b082      	sub	sp, #8
 8024b8c:	af00      	add	r7, sp, #0
 8024b8e:	4603      	mov	r3, r0
 8024b90:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 8024b92:	f7ff ffcb 	bl	8024b2c <lv_scr_act>
 8024b96:	4603      	mov	r3, r0
 8024b98:	4618      	mov	r0, r3
 8024b9a:	f7e3 fef7 	bl	800898c <lv_obj_clean>
	lv_style_copy(&style_screen, &lv_style_plain);
 8024b9e:	491d      	ldr	r1, [pc, #116]	; (8024c14 <tos_NotificationScreen_Init+0x8c>)
 8024ba0:	481d      	ldr	r0, [pc, #116]	; (8024c18 <tos_NotificationScreen_Init+0x90>)
 8024ba2:	f7e6 fba9 	bl	800b2f8 <lv_style_copy>
	if(theme){
 8024ba6:	79fb      	ldrb	r3, [r7, #7]
 8024ba8:	2b00      	cmp	r3, #0
 8024baa:	d006      	beq.n	8024bba <tos_NotificationScreen_Init+0x32>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8024bac:	4b1a      	ldr	r3, [pc, #104]	; (8024c18 <tos_NotificationScreen_Init+0x90>)
 8024bae:	2200      	movs	r2, #0
 8024bb0:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 8024bb2:	4b19      	ldr	r3, [pc, #100]	; (8024c18 <tos_NotificationScreen_Init+0x90>)
 8024bb4:	2200      	movs	r2, #0
 8024bb6:	809a      	strh	r2, [r3, #4]
 8024bb8:	e007      	b.n	8024bca <tos_NotificationScreen_Init+0x42>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 8024bba:	4a17      	ldr	r2, [pc, #92]	; (8024c18 <tos_NotificationScreen_Init+0x90>)
 8024bbc:	4b17      	ldr	r3, [pc, #92]	; (8024c1c <tos_NotificationScreen_Init+0x94>)
 8024bbe:	881b      	ldrh	r3, [r3, #0]
 8024bc0:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8024bc2:	4a15      	ldr	r2, [pc, #84]	; (8024c18 <tos_NotificationScreen_Init+0x90>)
 8024bc4:	4b15      	ldr	r3, [pc, #84]	; (8024c1c <tos_NotificationScreen_Init+0x94>)
 8024bc6:	881b      	ldrh	r3, [r3, #0]
 8024bc8:	8093      	strh	r3, [r2, #4]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8024bca:	f7ff ffaf 	bl	8024b2c <lv_scr_act>
 8024bce:	4603      	mov	r3, r0
 8024bd0:	4911      	ldr	r1, [pc, #68]	; (8024c18 <tos_NotificationScreen_Init+0x90>)
 8024bd2:	4618      	mov	r0, r3
 8024bd4:	f7e4 fdf1 	bl	80097ba <lv_obj_set_style>
    NotificationScreen_ItemsStyleInit(theme);
 8024bd8:	79fb      	ldrb	r3, [r7, #7]
 8024bda:	4618      	mov	r0, r3
 8024bdc:	f000 fa4c 	bl	8025078 <NotificationScreen_ItemsStyleInit>
    myPos=0;
 8024be0:	4b0f      	ldr	r3, [pc, #60]	; (8024c20 <tos_NotificationScreen_Init+0x98>)
 8024be2:	2200      	movs	r2, #0
 8024be4:	701a      	strb	r2, [r3, #0]
    isOpenNotificationBox=false;
 8024be6:	4b0f      	ldr	r3, [pc, #60]	; (8024c24 <tos_NotificationScreen_Init+0x9c>)
 8024be8:	2200      	movs	r2, #0
 8024bea:	701a      	strb	r2, [r3, #0]
    NS_isBtnPressed=false;
 8024bec:	4b0e      	ldr	r3, [pc, #56]	; (8024c28 <tos_NotificationScreen_Init+0xa0>)
 8024bee:	2200      	movs	r2, #0
 8024bf0:	701a      	strb	r2, [r3, #0]
    NotificationScreen_SetOnScreenItems(blNotroot,blNotnode,myPos);
 8024bf2:	4b0e      	ldr	r3, [pc, #56]	; (8024c2c <tos_NotificationScreen_Init+0xa4>)
 8024bf4:	6818      	ldr	r0, [r3, #0]
 8024bf6:	4b0e      	ldr	r3, [pc, #56]	; (8024c30 <tos_NotificationScreen_Init+0xa8>)
 8024bf8:	6819      	ldr	r1, [r3, #0]
 8024bfa:	4b09      	ldr	r3, [pc, #36]	; (8024c20 <tos_NotificationScreen_Init+0x98>)
 8024bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8024c00:	461a      	mov	r2, r3
 8024c02:	f000 f9e3 	bl	8024fcc <NotificationScreen_SetOnScreenItems>
    NS_taskController=true;
 8024c06:	4b0b      	ldr	r3, [pc, #44]	; (8024c34 <tos_NotificationScreen_Init+0xac>)
 8024c08:	2201      	movs	r2, #1
 8024c0a:	701a      	strb	r2, [r3, #0]

}
 8024c0c:	bf00      	nop
 8024c0e:	3708      	adds	r7, #8
 8024c10:	46bd      	mov	sp, r7
 8024c12:	bd80      	pop	{r7, pc}
 8024c14:	2001ba10 	.word	0x2001ba10
 8024c18:	2001ad60 	.word	0x2001ad60
 8024c1c:	0802caa8 	.word	0x0802caa8
 8024c20:	2001bd00 	.word	0x2001bd00
 8024c24:	2001bce8 	.word	0x2001bce8
 8024c28:	2001bce1 	.word	0x2001bce1
 8024c2c:	2001c168 	.word	0x2001c168
 8024c30:	2001c02c 	.word	0x2001c02c
 8024c34:	2001bce0 	.word	0x2001bce0

08024c38 <NotificationScreen_ButtonController>:
/*This function using for control to buttons*/
void NotificationScreen_ButtonController(void){
 8024c38:	b590      	push	{r4, r7, lr}
 8024c3a:	b083      	sub	sp, #12
 8024c3c:	af00      	add	r7, sp, #0
	if(!NS_isBtnPressed){
 8024c3e:	4b60      	ldr	r3, [pc, #384]	; (8024dc0 <NotificationScreen_ButtonController+0x188>)
 8024c40:	781b      	ldrb	r3, [r3, #0]
 8024c42:	f083 0301 	eor.w	r3, r3, #1
 8024c46:	b2db      	uxtb	r3, r3
 8024c48:	2b00      	cmp	r3, #0
 8024c4a:	f000 80b4 	beq.w	8024db6 <NotificationScreen_ButtonController+0x17e>
		NS_isBtnPressed=true;
 8024c4e:	4b5c      	ldr	r3, [pc, #368]	; (8024dc0 <NotificationScreen_ButtonController+0x188>)
 8024c50:	2201      	movs	r2, #1
 8024c52:	701a      	strb	r2, [r3, #0]
		  if(2==NS_rightBtnListen){
 8024c54:	4b5b      	ldr	r3, [pc, #364]	; (8024dc4 <NotificationScreen_ButtonController+0x18c>)
 8024c56:	781b      	ldrb	r3, [r3, #0]
 8024c58:	2b02      	cmp	r3, #2
 8024c5a:	d118      	bne.n	8024c8e <NotificationScreen_ButtonController+0x56>
			  //open
			  if(!isOpenNotificationBox){
 8024c5c:	4b5a      	ldr	r3, [pc, #360]	; (8024dc8 <NotificationScreen_ButtonController+0x190>)
 8024c5e:	781b      	ldrb	r3, [r3, #0]
 8024c60:	f083 0301 	eor.w	r3, r3, #1
 8024c64:	b2db      	uxtb	r3, r3
 8024c66:	2b00      	cmp	r3, #0
 8024c68:	d011      	beq.n	8024c8e <NotificationScreen_ButtonController+0x56>
				  isOpenNotificationBox=true;
 8024c6a:	4b57      	ldr	r3, [pc, #348]	; (8024dc8 <NotificationScreen_ButtonController+0x190>)
 8024c6c:	2201      	movs	r2, #1
 8024c6e:	701a      	strb	r2, [r3, #0]
				  char * tmp=tos_NotificationGetItem(blNotroot,selectedItem)->appNot;
 8024c70:	4b56      	ldr	r3, [pc, #344]	; (8024dcc <NotificationScreen_ButtonController+0x194>)
 8024c72:	681a      	ldr	r2, [r3, #0]
 8024c74:	4b56      	ldr	r3, [pc, #344]	; (8024dd0 <NotificationScreen_ButtonController+0x198>)
 8024c76:	781b      	ldrb	r3, [r3, #0]
 8024c78:	b29b      	uxth	r3, r3
 8024c7a:	4619      	mov	r1, r3
 8024c7c:	4610      	mov	r0, r2
 8024c7e:	f004 fea6 	bl	80299ce <tos_NotificationGetItem>
 8024c82:	4603      	mov	r3, r0
 8024c84:	685b      	ldr	r3, [r3, #4]
 8024c86:	607b      	str	r3, [r7, #4]
				    NotificationScreen_NotificationBox(tmp);
 8024c88:	6878      	ldr	r0, [r7, #4]
 8024c8a:	f000 f94d 	bl	8024f28 <NotificationScreen_NotificationBox>
			  }
		  }
		  if(1==NS_rightBtnListen) {
 8024c8e:	4b4d      	ldr	r3, [pc, #308]	; (8024dc4 <NotificationScreen_ButtonController+0x18c>)
 8024c90:	781b      	ldrb	r3, [r3, #0]
 8024c92:	2b01      	cmp	r3, #1
 8024c94:	d14d      	bne.n	8024d32 <NotificationScreen_ButtonController+0xfa>
		  			  if(!isOpenNotificationBox){
 8024c96:	4b4c      	ldr	r3, [pc, #304]	; (8024dc8 <NotificationScreen_ButtonController+0x190>)
 8024c98:	781b      	ldrb	r3, [r3, #0]
 8024c9a:	f083 0301 	eor.w	r3, r3, #1
 8024c9e:	b2db      	uxtb	r3, r3
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	d026      	beq.n	8024cf2 <NotificationScreen_ButtonController+0xba>
		  			  //minus
		  				lv_obj_clean(lv_scr_act());
 8024ca4:	f7ff ff42 	bl	8024b2c <lv_scr_act>
 8024ca8:	4603      	mov	r3, r0
 8024caa:	4618      	mov	r0, r3
 8024cac:	f7e3 fe6e 	bl	800898c <lv_obj_clean>
		  				if(myPos>-NotificationScreen_GetMaxScroll(blNotnode))myPos--;
 8024cb0:	4b48      	ldr	r3, [pc, #288]	; (8024dd4 <NotificationScreen_ButtonController+0x19c>)
 8024cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8024cb6:	461c      	mov	r4, r3
 8024cb8:	4b47      	ldr	r3, [pc, #284]	; (8024dd8 <NotificationScreen_ButtonController+0x1a0>)
 8024cba:	681b      	ldr	r3, [r3, #0]
 8024cbc:	4618      	mov	r0, r3
 8024cbe:	f000 fa9b 	bl	80251f8 <NotificationScreen_GetMaxScroll>
 8024cc2:	4603      	mov	r3, r0
 8024cc4:	425b      	negs	r3, r3
 8024cc6:	429c      	cmp	r4, r3
 8024cc8:	dd08      	ble.n	8024cdc <NotificationScreen_ButtonController+0xa4>
 8024cca:	4b42      	ldr	r3, [pc, #264]	; (8024dd4 <NotificationScreen_ButtonController+0x19c>)
 8024ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8024cd0:	b2db      	uxtb	r3, r3
 8024cd2:	3b01      	subs	r3, #1
 8024cd4:	b2db      	uxtb	r3, r3
 8024cd6:	b25a      	sxtb	r2, r3
 8024cd8:	4b3e      	ldr	r3, [pc, #248]	; (8024dd4 <NotificationScreen_ButtonController+0x19c>)
 8024cda:	701a      	strb	r2, [r3, #0]
		  				NotificationScreen_SetOnScreenItems(blNotroot,blNotnode,myPos);
 8024cdc:	4b3b      	ldr	r3, [pc, #236]	; (8024dcc <NotificationScreen_ButtonController+0x194>)
 8024cde:	6818      	ldr	r0, [r3, #0]
 8024ce0:	4b3d      	ldr	r3, [pc, #244]	; (8024dd8 <NotificationScreen_ButtonController+0x1a0>)
 8024ce2:	6819      	ldr	r1, [r3, #0]
 8024ce4:	4b3b      	ldr	r3, [pc, #236]	; (8024dd4 <NotificationScreen_ButtonController+0x19c>)
 8024ce6:	f993 3000 	ldrsb.w	r3, [r3]
 8024cea:	461a      	mov	r2, r3
 8024cec:	f000 f96e 	bl	8024fcc <NotificationScreen_SetOnScreenItems>
 8024cf0:	e01f      	b.n	8024d32 <NotificationScreen_ButtonController+0xfa>
		  			  }else {isOpenNotificationBox=false;
 8024cf2:	4b35      	ldr	r3, [pc, #212]	; (8024dc8 <NotificationScreen_ButtonController+0x190>)
 8024cf4:	2200      	movs	r2, #0
 8024cf6:	701a      	strb	r2, [r3, #0]
		  			  //remove
		  				lv_obj_clean(lv_scr_act());
 8024cf8:	f7ff ff18 	bl	8024b2c <lv_scr_act>
 8024cfc:	4603      	mov	r3, r0
 8024cfe:	4618      	mov	r0, r3
 8024d00:	f7e3 fe44 	bl	800898c <lv_obj_clean>
		  				notBox = NULL;
 8024d04:	4b35      	ldr	r3, [pc, #212]	; (8024ddc <NotificationScreen_ButtonController+0x1a4>)
 8024d06:	2200      	movs	r2, #0
 8024d08:	601a      	str	r2, [r3, #0]
		  			    tos_NotificationDelItem(blNotroot,blNotnode,selectedItem);
 8024d0a:	4b30      	ldr	r3, [pc, #192]	; (8024dcc <NotificationScreen_ButtonController+0x194>)
 8024d0c:	6818      	ldr	r0, [r3, #0]
 8024d0e:	4b32      	ldr	r3, [pc, #200]	; (8024dd8 <NotificationScreen_ButtonController+0x1a0>)
 8024d10:	6819      	ldr	r1, [r3, #0]
 8024d12:	4b2f      	ldr	r3, [pc, #188]	; (8024dd0 <NotificationScreen_ButtonController+0x198>)
 8024d14:	781b      	ldrb	r3, [r3, #0]
 8024d16:	b29b      	uxth	r3, r3
 8024d18:	461a      	mov	r2, r3
 8024d1a:	f004 fea7 	bl	8029a6c <tos_NotificationDelItem>
		  				NotificationScreen_SetOnScreenItems(blNotroot,blNotnode,myPos);
 8024d1e:	4b2b      	ldr	r3, [pc, #172]	; (8024dcc <NotificationScreen_ButtonController+0x194>)
 8024d20:	6818      	ldr	r0, [r3, #0]
 8024d22:	4b2d      	ldr	r3, [pc, #180]	; (8024dd8 <NotificationScreen_ButtonController+0x1a0>)
 8024d24:	6819      	ldr	r1, [r3, #0]
 8024d26:	4b2b      	ldr	r3, [pc, #172]	; (8024dd4 <NotificationScreen_ButtonController+0x19c>)
 8024d28:	f993 3000 	ldrsb.w	r3, [r3]
 8024d2c:	461a      	mov	r2, r3
 8024d2e:	f000 f94d 	bl	8024fcc <NotificationScreen_SetOnScreenItems>

		  			  }
		  		  }
		  if(1==NS_leftBtnListen) {
 8024d32:	4b2b      	ldr	r3, [pc, #172]	; (8024de0 <NotificationScreen_ButtonController+0x1a8>)
 8024d34:	781b      	ldrb	r3, [r3, #0]
 8024d36:	2b01      	cmp	r3, #1
 8024d38:	d12e      	bne.n	8024d98 <NotificationScreen_ButtonController+0x160>
			  //plus
			  if(!isOpenNotificationBox){
 8024d3a:	4b23      	ldr	r3, [pc, #140]	; (8024dc8 <NotificationScreen_ButtonController+0x190>)
 8024d3c:	781b      	ldrb	r3, [r3, #0]
 8024d3e:	f083 0301 	eor.w	r3, r3, #1
 8024d42:	b2db      	uxtb	r3, r3
 8024d44:	2b00      	cmp	r3, #0
 8024d46:	d01e      	beq.n	8024d86 <NotificationScreen_ButtonController+0x14e>
				lv_obj_clean(lv_scr_act());
 8024d48:	f7ff fef0 	bl	8024b2c <lv_scr_act>
 8024d4c:	4603      	mov	r3, r0
 8024d4e:	4618      	mov	r0, r3
 8024d50:	f7e3 fe1c 	bl	800898c <lv_obj_clean>
				if(myPos<0)myPos++;
 8024d54:	4b1f      	ldr	r3, [pc, #124]	; (8024dd4 <NotificationScreen_ButtonController+0x19c>)
 8024d56:	f993 3000 	ldrsb.w	r3, [r3]
 8024d5a:	2b00      	cmp	r3, #0
 8024d5c:	da08      	bge.n	8024d70 <NotificationScreen_ButtonController+0x138>
 8024d5e:	4b1d      	ldr	r3, [pc, #116]	; (8024dd4 <NotificationScreen_ButtonController+0x19c>)
 8024d60:	f993 3000 	ldrsb.w	r3, [r3]
 8024d64:	b2db      	uxtb	r3, r3
 8024d66:	3301      	adds	r3, #1
 8024d68:	b2db      	uxtb	r3, r3
 8024d6a:	b25a      	sxtb	r2, r3
 8024d6c:	4b19      	ldr	r3, [pc, #100]	; (8024dd4 <NotificationScreen_ButtonController+0x19c>)
 8024d6e:	701a      	strb	r2, [r3, #0]
				NotificationScreen_SetOnScreenItems(blNotroot,blNotnode,myPos);
 8024d70:	4b16      	ldr	r3, [pc, #88]	; (8024dcc <NotificationScreen_ButtonController+0x194>)
 8024d72:	6818      	ldr	r0, [r3, #0]
 8024d74:	4b18      	ldr	r3, [pc, #96]	; (8024dd8 <NotificationScreen_ButtonController+0x1a0>)
 8024d76:	6819      	ldr	r1, [r3, #0]
 8024d78:	4b16      	ldr	r3, [pc, #88]	; (8024dd4 <NotificationScreen_ButtonController+0x19c>)
 8024d7a:	f993 3000 	ldrsb.w	r3, [r3]
 8024d7e:	461a      	mov	r2, r3
 8024d80:	f000 f924 	bl	8024fcc <NotificationScreen_SetOnScreenItems>
 8024d84:	e008      	b.n	8024d98 <NotificationScreen_ButtonController+0x160>
			  }else{isOpenNotificationBox=false;
 8024d86:	4b10      	ldr	r3, [pc, #64]	; (8024dc8 <NotificationScreen_ButtonController+0x190>)
 8024d88:	2200      	movs	r2, #0
 8024d8a:	701a      	strb	r2, [r3, #0]
				  lv_mbox_start_auto_close(notBox,0);
 8024d8c:	4b13      	ldr	r3, [pc, #76]	; (8024ddc <NotificationScreen_ButtonController+0x1a4>)
 8024d8e:	681b      	ldr	r3, [r3, #0]
 8024d90:	2100      	movs	r1, #0
 8024d92:	4618      	mov	r0, r3
 8024d94:	f7f9 f92a 	bl	801dfec <lv_mbox_start_auto_close>
			  }
		  }
		  NS_isBtnPressed=false;
 8024d98:	4b09      	ldr	r3, [pc, #36]	; (8024dc0 <NotificationScreen_ButtonController+0x188>)
 8024d9a:	2200      	movs	r2, #0
 8024d9c:	701a      	strb	r2, [r3, #0]
		  NS_rightBtnListen=tos_RightButton_Listenner_For_MenuControl();
 8024d9e:	f004 fa99 	bl	80292d4 <tos_RightButton_Listenner_For_MenuControl>
 8024da2:	4603      	mov	r3, r0
 8024da4:	461a      	mov	r2, r3
 8024da6:	4b07      	ldr	r3, [pc, #28]	; (8024dc4 <NotificationScreen_ButtonController+0x18c>)
 8024da8:	701a      	strb	r2, [r3, #0]
		  NS_leftBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 8024daa:	f004 fabb 	bl	8029324 <tos_LeftButton_Listenner_For_MenuControl>
 8024dae:	4603      	mov	r3, r0
 8024db0:	461a      	mov	r2, r3
 8024db2:	4b0b      	ldr	r3, [pc, #44]	; (8024de0 <NotificationScreen_ButtonController+0x1a8>)
 8024db4:	701a      	strb	r2, [r3, #0]

	}
}
 8024db6:	bf00      	nop
 8024db8:	370c      	adds	r7, #12
 8024dba:	46bd      	mov	sp, r7
 8024dbc:	bd90      	pop	{r4, r7, pc}
 8024dbe:	bf00      	nop
 8024dc0:	2001bce1 	.word	0x2001bce1
 8024dc4:	2001aec8 	.word	0x2001aec8
 8024dc8:	2001bce8 	.word	0x2001bce8
 8024dcc:	2001c168 	.word	0x2001c168
 8024dd0:	2001bce9 	.word	0x2001bce9
 8024dd4:	2001bd00 	.word	0x2001bd00
 8024dd8:	2001c02c 	.word	0x2001c02c
 8024ddc:	2001bce4 	.word	0x2001bce4
 8024de0:	2001aec9 	.word	0x2001aec9

08024de4 <NotificationScreen_Items>:
/*This function using for create notification items
 * @param appName using for get app name
 * @param appNotification for get app notification text
 * @param pos set item position
 * @param isSelected get statu (is first item on screen?) */
void NotificationScreen_Items(char *appName,char * appNotification,tos_Position pos,bool isSelected){
 8024de4:	b580      	push	{r7, lr}
 8024de6:	b08a      	sub	sp, #40	; 0x28
 8024de8:	af02      	add	r7, sp, #8
 8024dea:	60f8      	str	r0, [r7, #12]
 8024dec:	60b9      	str	r1, [r7, #8]
 8024dee:	607a      	str	r2, [r7, #4]
 8024df0:	70fb      	strb	r3, [r7, #3]
	  lv_obj_t * itemCanvas = lv_page_create(lv_scr_act(), NULL);
 8024df2:	f7ff fe9b 	bl	8024b2c <lv_scr_act>
 8024df6:	4603      	mov	r3, r0
 8024df8:	2100      	movs	r1, #0
 8024dfa:	4618      	mov	r0, r3
 8024dfc:	f7f9 fc28 	bl	801e650 <lv_page_create>
 8024e00:	61f8      	str	r0, [r7, #28]
	  lv_obj_set_size(itemCanvas, 200, 50);
 8024e02:	2232      	movs	r2, #50	; 0x32
 8024e04:	21c8      	movs	r1, #200	; 0xc8
 8024e06:	69f8      	ldr	r0, [r7, #28]
 8024e08:	f7e3 ff8f 	bl	8008d2a <lv_obj_set_size>
	  lv_page_set_sb_mode(itemCanvas,LV_SB_MODE_OFF);
 8024e0c:	2100      	movs	r1, #0
 8024e0e:	69f8      	ldr	r0, [r7, #28]
 8024e10:	f7f9 fd90 	bl	801e934 <lv_page_set_sb_mode>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_BG, &bg_style);
 8024e14:	4a3b      	ldr	r2, [pc, #236]	; (8024f04 <NotificationScreen_Items+0x120>)
 8024e16:	2100      	movs	r1, #0
 8024e18:	69f8      	ldr	r0, [r7, #28]
 8024e1a:	f7f9 fdeb 	bl	801e9f4 <lv_page_set_style>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_SB, &sb_style);
 8024e1e:	4a3a      	ldr	r2, [pc, #232]	; (8024f08 <NotificationScreen_Items+0x124>)
 8024e20:	2102      	movs	r1, #2
 8024e22:	69f8      	ldr	r0, [r7, #28]
 8024e24:	f7f9 fde6 	bl	801e9f4 <lv_page_set_style>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_SCRL, &scrl_style);
 8024e28:	4a38      	ldr	r2, [pc, #224]	; (8024f0c <NotificationScreen_Items+0x128>)
 8024e2a:	2101      	movs	r1, #1
 8024e2c:	69f8      	ldr	r0, [r7, #28]
 8024e2e:	f7f9 fde1 	bl	801e9f4 <lv_page_set_style>
	  lv_obj_align(itemCanvas, NULL, LV_ALIGN_CENTER, pos.x, pos.y);
 8024e32:	88bb      	ldrh	r3, [r7, #4]
 8024e34:	b21a      	sxth	r2, r3
 8024e36:	88fb      	ldrh	r3, [r7, #6]
 8024e38:	b21b      	sxth	r3, r3
 8024e3a:	9300      	str	r3, [sp, #0]
 8024e3c:	4613      	mov	r3, r2
 8024e3e:	2200      	movs	r2, #0
 8024e40:	2100      	movs	r1, #0
 8024e42:	69f8      	ldr	r0, [r7, #28]
 8024e44:	f7e4 f814 	bl	8008e70 <lv_obj_align>

	  if(strlen(appName)>=12)  {
 8024e48:	68f8      	ldr	r0, [r7, #12]
 8024e4a:	f7db f9cb 	bl	80001e4 <strlen>
 8024e4e:	4603      	mov	r3, r0
 8024e50:	2b0b      	cmp	r3, #11
 8024e52:	d906      	bls.n	8024e62 <NotificationScreen_Items+0x7e>
		snprintf(NS_buffer,14, "%.9s ...",appName);
 8024e54:	68fb      	ldr	r3, [r7, #12]
 8024e56:	4a2e      	ldr	r2, [pc, #184]	; (8024f10 <NotificationScreen_Items+0x12c>)
 8024e58:	210e      	movs	r1, #14
 8024e5a:	482e      	ldr	r0, [pc, #184]	; (8024f14 <NotificationScreen_Items+0x130>)
 8024e5c:	f005 fcd2 	bl	802a804 <sniprintf>
 8024e60:	e005      	b.n	8024e6e <NotificationScreen_Items+0x8a>
	  }else snprintf(NS_buffer,14, "%s",appName);
 8024e62:	68fb      	ldr	r3, [r7, #12]
 8024e64:	4a2c      	ldr	r2, [pc, #176]	; (8024f18 <NotificationScreen_Items+0x134>)
 8024e66:	210e      	movs	r1, #14
 8024e68:	482a      	ldr	r0, [pc, #168]	; (8024f14 <NotificationScreen_Items+0x130>)
 8024e6a:	f005 fccb 	bl	802a804 <sniprintf>

	  lv_obj_t * appNameLbl = lv_label_create(itemCanvas, NULL);
 8024e6e:	2100      	movs	r1, #0
 8024e70:	69f8      	ldr	r0, [r7, #28]
 8024e72:	f7f7 f915 	bl	801c0a0 <lv_label_create>
 8024e76:	61b8      	str	r0, [r7, #24]
	  lv_obj_set_width(appNameLbl, 50);
 8024e78:	2132      	movs	r1, #50	; 0x32
 8024e7a:	69b8      	ldr	r0, [r7, #24]
 8024e7c:	f7e3 ffce 	bl	8008e1c <lv_obj_set_width>
	  lv_label_set_style(appNameLbl, LV_LABEL_STYLE_MAIN, &appName_Style);
 8024e80:	4a26      	ldr	r2, [pc, #152]	; (8024f1c <NotificationScreen_Items+0x138>)
 8024e82:	2100      	movs	r1, #0
 8024e84:	69b8      	ldr	r0, [r7, #24]
 8024e86:	f7ff fe5c 	bl	8024b42 <lv_label_set_style>
	  lv_label_set_text(appNameLbl, NS_buffer);
 8024e8a:	4922      	ldr	r1, [pc, #136]	; (8024f14 <NotificationScreen_Items+0x130>)
 8024e8c:	69b8      	ldr	r0, [r7, #24]
 8024e8e:	f7f7 fa39 	bl	801c304 <lv_label_set_text>
	  lv_obj_align(appNameLbl, itemCanvas, LV_ALIGN_IN_TOP_LEFT, 20, 0);
 8024e92:	2300      	movs	r3, #0
 8024e94:	9300      	str	r3, [sp, #0]
 8024e96:	2314      	movs	r3, #20
 8024e98:	2201      	movs	r2, #1
 8024e9a:	69f9      	ldr	r1, [r7, #28]
 8024e9c:	69b8      	ldr	r0, [r7, #24]
 8024e9e:	f7e3 ffe7 	bl	8008e70 <lv_obj_align>

	  lv_obj_t * appNotLbl = lv_label_create(itemCanvas, NULL);
 8024ea2:	2100      	movs	r1, #0
 8024ea4:	69f8      	ldr	r0, [r7, #28]
 8024ea6:	f7f7 f8fb 	bl	801c0a0 <lv_label_create>
 8024eaa:	6178      	str	r0, [r7, #20]
	  lv_label_set_text(appNotLbl, appNotification);
 8024eac:	68b9      	ldr	r1, [r7, #8]
 8024eae:	6978      	ldr	r0, [r7, #20]
 8024eb0:	f7f7 fa28 	bl	801c304 <lv_label_set_text>
	  lv_label_set_style(appNotLbl, LV_LABEL_STYLE_MAIN, &notification_Style);
 8024eb4:	4a1a      	ldr	r2, [pc, #104]	; (8024f20 <NotificationScreen_Items+0x13c>)
 8024eb6:	2100      	movs	r1, #0
 8024eb8:	6978      	ldr	r0, [r7, #20]
 8024eba:	f7ff fe42 	bl	8024b42 <lv_label_set_style>
	  lv_obj_align(appNotLbl, itemCanvas, LV_ALIGN_IN_BOTTOM_LEFT, 20, 0);
 8024ebe:	2300      	movs	r3, #0
 8024ec0:	9300      	str	r3, [sp, #0]
 8024ec2:	2314      	movs	r3, #20
 8024ec4:	2204      	movs	r2, #4
 8024ec6:	69f9      	ldr	r1, [r7, #28]
 8024ec8:	6978      	ldr	r0, [r7, #20]
 8024eca:	f7e3 ffd1 	bl	8008e70 <lv_obj_align>

	  lv_obj_t * isSelettedItem = lv_cb_create(itemCanvas, NULL);
 8024ece:	2100      	movs	r1, #0
 8024ed0:	69f8      	ldr	r0, [r7, #28]
 8024ed2:	f7f5 fa4b 	bl	801a36c <lv_cb_create>
 8024ed6:	6138      	str	r0, [r7, #16]
	  lv_obj_align(isSelettedItem, itemCanvas, LV_ALIGN_IN_RIGHT_MID, 80, 0);
 8024ed8:	2300      	movs	r3, #0
 8024eda:	9300      	str	r3, [sp, #0]
 8024edc:	2350      	movs	r3, #80	; 0x50
 8024ede:	2208      	movs	r2, #8
 8024ee0:	69f9      	ldr	r1, [r7, #28]
 8024ee2:	6938      	ldr	r0, [r7, #16]
 8024ee4:	f7e3 ffc4 	bl	8008e70 <lv_obj_align>
	  lv_cb_set_checked(isSelettedItem,isSelected);
 8024ee8:	78fb      	ldrb	r3, [r7, #3]
 8024eea:	4619      	mov	r1, r3
 8024eec:	6938      	ldr	r0, [r7, #16]
 8024eee:	f7ff fe37 	bl	8024b60 <lv_cb_set_checked>
	  lv_cb_set_text(isSelettedItem,"");
 8024ef2:	490c      	ldr	r1, [pc, #48]	; (8024f24 <NotificationScreen_Items+0x140>)
 8024ef4:	6938      	ldr	r0, [r7, #16]
 8024ef6:	f7f5 fb2b 	bl	801a550 <lv_cb_set_text>
}
 8024efa:	bf00      	nop
 8024efc:	3720      	adds	r7, #32
 8024efe:	46bd      	mov	sp, r7
 8024f00:	bd80      	pop	{r7, pc}
 8024f02:	bf00      	nop
 8024f04:	2001add8 	.word	0x2001add8
 8024f08:	2001ad9c 	.word	0x2001ad9c
 8024f0c:	2001ae14 	.word	0x2001ae14
 8024f10:	0802caac 	.word	0x0802caac
 8024f14:	2001bcec 	.word	0x2001bcec
 8024f18:	0802cab8 	.word	0x0802cab8
 8024f1c:	2001ae50 	.word	0x2001ae50
 8024f20:	2001ae8c 	.word	0x2001ae8c
 8024f24:	0802cabc 	.word	0x0802cabc

08024f28 <NotificationScreen_NotificationBox>:
/*This function using for notification box*/
void NotificationScreen_NotificationBox(char * appNotification){
 8024f28:	b580      	push	{r7, lr}
 8024f2a:	b084      	sub	sp, #16
 8024f2c:	af02      	add	r7, sp, #8
 8024f2e:	6078      	str	r0, [r7, #4]
    static const char * btns[] ={"Okey", "Delete", ""};

    notBox = lv_mbox_create(lv_scr_act(), NULL);
 8024f30:	f7ff fdfc 	bl	8024b2c <lv_scr_act>
 8024f34:	4603      	mov	r3, r0
 8024f36:	2100      	movs	r1, #0
 8024f38:	4618      	mov	r0, r3
 8024f3a:	f7f8 ff3d 	bl	801ddb8 <lv_mbox_create>
 8024f3e:	4602      	mov	r2, r0
 8024f40:	4b1d      	ldr	r3, [pc, #116]	; (8024fb8 <NotificationScreen_NotificationBox+0x90>)
 8024f42:	601a      	str	r2, [r3, #0]
    lv_mbox_add_btns(notBox, btns);
 8024f44:	4b1c      	ldr	r3, [pc, #112]	; (8024fb8 <NotificationScreen_NotificationBox+0x90>)
 8024f46:	681b      	ldr	r3, [r3, #0]
 8024f48:	491c      	ldr	r1, [pc, #112]	; (8024fbc <NotificationScreen_NotificationBox+0x94>)
 8024f4a:	4618      	mov	r0, r3
 8024f4c:	f7f8 ffe2 	bl	801df14 <lv_mbox_add_btns>
    lv_mbox_set_text(notBox, appNotification);
 8024f50:	4b19      	ldr	r3, [pc, #100]	; (8024fb8 <NotificationScreen_NotificationBox+0x90>)
 8024f52:	681b      	ldr	r3, [r3, #0]
 8024f54:	6879      	ldr	r1, [r7, #4]
 8024f56:	4618      	mov	r0, r3
 8024f58:	f7f9 f832 	bl	801dfc0 <lv_mbox_set_text>
    lv_obj_set_width(notBox, 200);
 8024f5c:	4b16      	ldr	r3, [pc, #88]	; (8024fb8 <NotificationScreen_NotificationBox+0x90>)
 8024f5e:	681b      	ldr	r3, [r3, #0]
 8024f60:	21c8      	movs	r1, #200	; 0xc8
 8024f62:	4618      	mov	r0, r3
 8024f64:	f7e3 ff5a 	bl	8008e1c <lv_obj_set_width>
    lv_obj_set_height(notBox, 150);
 8024f68:	4b13      	ldr	r3, [pc, #76]	; (8024fb8 <NotificationScreen_NotificationBox+0x90>)
 8024f6a:	681b      	ldr	r3, [r3, #0]
 8024f6c:	2196      	movs	r1, #150	; 0x96
 8024f6e:	4618      	mov	r0, r3
 8024f70:	f7e3 ff69 	bl	8008e46 <lv_obj_set_height>
    lv_obj_align(notBox, NULL, LV_ALIGN_CENTER, 0, 0);
 8024f74:	4b10      	ldr	r3, [pc, #64]	; (8024fb8 <NotificationScreen_NotificationBox+0x90>)
 8024f76:	6818      	ldr	r0, [r3, #0]
 8024f78:	2300      	movs	r3, #0
 8024f7a:	9300      	str	r3, [sp, #0]
 8024f7c:	2300      	movs	r3, #0
 8024f7e:	2200      	movs	r2, #0
 8024f80:	2100      	movs	r1, #0
 8024f82:	f7e3 ff75 	bl	8008e70 <lv_obj_align>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BG,  &sb_style);
 8024f86:	4b0c      	ldr	r3, [pc, #48]	; (8024fb8 <NotificationScreen_NotificationBox+0x90>)
 8024f88:	681b      	ldr	r3, [r3, #0]
 8024f8a:	4a0d      	ldr	r2, [pc, #52]	; (8024fc0 <NotificationScreen_NotificationBox+0x98>)
 8024f8c:	2100      	movs	r1, #0
 8024f8e:	4618      	mov	r0, r3
 8024f90:	f7f9 f8ae 	bl	801e0f0 <lv_mbox_set_style>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BTN_REL,  &scrl_style);
 8024f94:	4b08      	ldr	r3, [pc, #32]	; (8024fb8 <NotificationScreen_NotificationBox+0x90>)
 8024f96:	681b      	ldr	r3, [r3, #0]
 8024f98:	4a0a      	ldr	r2, [pc, #40]	; (8024fc4 <NotificationScreen_NotificationBox+0x9c>)
 8024f9a:	2102      	movs	r1, #2
 8024f9c:	4618      	mov	r0, r3
 8024f9e:	f7f9 f8a7 	bl	801e0f0 <lv_mbox_set_style>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BTN_TGL_PR,  &bg_style);
 8024fa2:	4b05      	ldr	r3, [pc, #20]	; (8024fb8 <NotificationScreen_NotificationBox+0x90>)
 8024fa4:	681b      	ldr	r3, [r3, #0]
 8024fa6:	4a08      	ldr	r2, [pc, #32]	; (8024fc8 <NotificationScreen_NotificationBox+0xa0>)
 8024fa8:	2105      	movs	r1, #5
 8024faa:	4618      	mov	r0, r3
 8024fac:	f7f9 f8a0 	bl	801e0f0 <lv_mbox_set_style>
}
 8024fb0:	bf00      	nop
 8024fb2:	3708      	adds	r7, #8
 8024fb4:	46bd      	mov	sp, r7
 8024fb6:	bd80      	pop	{r7, pc}
 8024fb8:	2001bce4 	.word	0x2001bce4
 8024fbc:	20002834 	.word	0x20002834
 8024fc0:	2001ad9c 	.word	0x2001ad9c
 8024fc4:	2001ae14 	.word	0x2001ae14
 8024fc8:	2001add8 	.word	0x2001add8

08024fcc <NotificationScreen_SetOnScreenItems>:

/*This function using for notification items set values(app name,app notification,position)
 * @param root using for first node
 * @param node using for all nodes
 * @param posIndex using for set position index*/
void NotificationScreen_SetOnScreenItems(tos_Notification * root,tos_Notification* node,int8_t posIndex){
 8024fcc:	b5b0      	push	{r4, r5, r7, lr}
 8024fce:	b086      	sub	sp, #24
 8024fd0:	af00      	add	r7, sp, #0
 8024fd2:	60f8      	str	r0, [r7, #12]
 8024fd4:	60b9      	str	r1, [r7, #8]
 8024fd6:	4613      	mov	r3, r2
 8024fd8:	71fb      	strb	r3, [r7, #7]
	bool selected= false;
 8024fda:	2300      	movs	r3, #0
 8024fdc:	75fb      	strb	r3, [r7, #23]
       for(uint16_t i=1;i<(uint16_t)tos_NotificationGetSize(node);i++){
 8024fde:	2301      	movs	r3, #1
 8024fe0:	82bb      	strh	r3, [r7, #20]
 8024fe2:	e038      	b.n	8025056 <NotificationScreen_SetOnScreenItems+0x8a>
    	   	   if(tos_NotificationGetItem(root,i) !=NULL){
 8024fe4:	8abb      	ldrh	r3, [r7, #20]
 8024fe6:	4619      	mov	r1, r3
 8024fe8:	68f8      	ldr	r0, [r7, #12]
 8024fea:	f004 fcf0 	bl	80299ce <tos_NotificationGetItem>
 8024fee:	4603      	mov	r3, r0
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	d02d      	beq.n	8025050 <NotificationScreen_SetOnScreenItems+0x84>
    	           if(posIndex==0){selectedItem=i; selected=true;}
 8024ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024ff8:	2b00      	cmp	r3, #0
 8024ffa:	d106      	bne.n	802500a <NotificationScreen_SetOnScreenItems+0x3e>
 8024ffc:	8abb      	ldrh	r3, [r7, #20]
 8024ffe:	b2da      	uxtb	r2, r3
 8025000:	4b1b      	ldr	r3, [pc, #108]	; (8025070 <NotificationScreen_SetOnScreenItems+0xa4>)
 8025002:	701a      	strb	r2, [r3, #0]
 8025004:	2301      	movs	r3, #1
 8025006:	75fb      	strb	r3, [r7, #23]
 8025008:	e001      	b.n	802500e <NotificationScreen_SetOnScreenItems+0x42>
    	           else selected=false;
 802500a:	2300      	movs	r3, #0
 802500c:	75fb      	strb	r3, [r7, #23]
    	           NStmpNot=tos_NotificationGetItem(root,i);
 802500e:	8abb      	ldrh	r3, [r7, #20]
 8025010:	4619      	mov	r1, r3
 8025012:	68f8      	ldr	r0, [r7, #12]
 8025014:	f004 fcdb 	bl	80299ce <tos_NotificationGetItem>
 8025018:	4602      	mov	r2, r0
 802501a:	4b16      	ldr	r3, [pc, #88]	; (8025074 <NotificationScreen_SetOnScreenItems+0xa8>)
 802501c:	601a      	str	r2, [r3, #0]
        NotificationScreen_Items(NStmpNot->appName,
 802501e:	4b15      	ldr	r3, [pc, #84]	; (8025074 <NotificationScreen_SetOnScreenItems+0xa8>)
 8025020:	681b      	ldr	r3, [r3, #0]
 8025022:	681c      	ldr	r4, [r3, #0]
        		NStmpNot->appNot,
 8025024:	4b13      	ldr	r3, [pc, #76]	; (8025074 <NotificationScreen_SetOnScreenItems+0xa8>)
 8025026:	681b      	ldr	r3, [r3, #0]
        NotificationScreen_Items(NStmpNot->appName,
 8025028:	685d      	ldr	r5, [r3, #4]
 802502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802502e:	4618      	mov	r0, r3
 8025030:	f000 f8c0 	bl	80251b4 <NotificationScreen_ItemsetPos>
 8025034:	4603      	mov	r3, r0
 8025036:	613b      	str	r3, [r7, #16]
 8025038:	7dfb      	ldrb	r3, [r7, #23]
 802503a:	693a      	ldr	r2, [r7, #16]
 802503c:	4629      	mov	r1, r5
 802503e:	4620      	mov	r0, r4
 8025040:	f7ff fed0 	bl	8024de4 <NotificationScreen_Items>
				NotificationScreen_ItemsetPos(posIndex),selected);
        posIndex++;
 8025044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025048:	b2db      	uxtb	r3, r3
 802504a:	3301      	adds	r3, #1
 802504c:	b2db      	uxtb	r3, r3
 802504e:	71fb      	strb	r3, [r7, #7]
       for(uint16_t i=1;i<(uint16_t)tos_NotificationGetSize(node);i++){
 8025050:	8abb      	ldrh	r3, [r7, #20]
 8025052:	3301      	adds	r3, #1
 8025054:	82bb      	strh	r3, [r7, #20]
 8025056:	68b8      	ldr	r0, [r7, #8]
 8025058:	f004 fc9c 	bl	8029994 <tos_NotificationGetSize>
 802505c:	4603      	mov	r3, r0
 802505e:	b29b      	uxth	r3, r3
 8025060:	8aba      	ldrh	r2, [r7, #20]
 8025062:	429a      	cmp	r2, r3
 8025064:	d3be      	bcc.n	8024fe4 <NotificationScreen_SetOnScreenItems+0x18>
    }
    }
}
 8025066:	bf00      	nop
 8025068:	3718      	adds	r7, #24
 802506a:	46bd      	mov	sp, r7
 802506c:	bdb0      	pop	{r4, r5, r7, pc}
 802506e:	bf00      	nop
 8025070:	2001bce9 	.word	0x2001bce9
 8025074:	2001bcfc 	.word	0x2001bcfc

08025078 <NotificationScreen_ItemsStyleInit>:
/*This function using for set notification style init
 * created a style init because when create a notification then be not get again memory
 * @param theme using for select theme
 * true -> dark
 * false -> light*/
void NotificationScreen_ItemsStyleInit(bool theme){
 8025078:	b580      	push	{r7, lr}
 802507a:	b082      	sub	sp, #8
 802507c:	af00      	add	r7, sp, #0
 802507e:	4603      	mov	r3, r0
 8025080:	71fb      	strb	r3, [r7, #7]
    lv_style_copy(&scrl_style, &lv_style_plain);
 8025082:	4941      	ldr	r1, [pc, #260]	; (8025188 <NotificationScreen_ItemsStyleInit+0x110>)
 8025084:	4841      	ldr	r0, [pc, #260]	; (802518c <NotificationScreen_ItemsStyleInit+0x114>)
 8025086:	f7e6 f937 	bl	800b2f8 <lv_style_copy>
    scrl_style.body.main_color = LV_COLOR_SILVER;
 802508a:	4a40      	ldr	r2, [pc, #256]	; (802518c <NotificationScreen_ItemsStyleInit+0x114>)
 802508c:	4b40      	ldr	r3, [pc, #256]	; (8025190 <NotificationScreen_ItemsStyleInit+0x118>)
 802508e:	881b      	ldrh	r3, [r3, #0]
 8025090:	8053      	strh	r3, [r2, #2]
    scrl_style.body.grad_color = LV_COLOR_SILVER;
 8025092:	4a3e      	ldr	r2, [pc, #248]	; (802518c <NotificationScreen_ItemsStyleInit+0x114>)
 8025094:	4b3e      	ldr	r3, [pc, #248]	; (8025190 <NotificationScreen_ItemsStyleInit+0x118>)
 8025096:	881b      	ldrh	r3, [r3, #0]
 8025098:	8093      	strh	r3, [r2, #4]
    scrl_style.body.border.color = LV_COLOR_BLACK;
 802509a:	4b3c      	ldr	r3, [pc, #240]	; (802518c <NotificationScreen_ItemsStyleInit+0x114>)
 802509c:	2200      	movs	r2, #0
 802509e:	815a      	strh	r2, [r3, #10]
    scrl_style.body.border.width = 0;
 80250a0:	4b3a      	ldr	r3, [pc, #232]	; (802518c <NotificationScreen_ItemsStyleInit+0x114>)
 80250a2:	2200      	movs	r2, #0
 80250a4:	819a      	strh	r2, [r3, #12]

    lv_style_copy(&sb_style, &lv_style_plain);
 80250a6:	4938      	ldr	r1, [pc, #224]	; (8025188 <NotificationScreen_ItemsStyleInit+0x110>)
 80250a8:	483a      	ldr	r0, [pc, #232]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250aa:	f7e6 f925 	bl	800b2f8 <lv_style_copy>
    sb_style.body.main_color = LV_COLOR_WHITE;
 80250ae:	4a39      	ldr	r2, [pc, #228]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250b0:	4b39      	ldr	r3, [pc, #228]	; (8025198 <NotificationScreen_ItemsStyleInit+0x120>)
 80250b2:	881b      	ldrh	r3, [r3, #0]
 80250b4:	8053      	strh	r3, [r2, #2]
    sb_style.body.grad_color = LV_COLOR_WHITE;
 80250b6:	4a37      	ldr	r2, [pc, #220]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250b8:	4b37      	ldr	r3, [pc, #220]	; (8025198 <NotificationScreen_ItemsStyleInit+0x120>)
 80250ba:	881b      	ldrh	r3, [r3, #0]
 80250bc:	8093      	strh	r3, [r2, #4]
    sb_style.body.border.color = LV_COLOR_BLACK;
 80250be:	4b35      	ldr	r3, [pc, #212]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250c0:	2200      	movs	r2, #0
 80250c2:	815a      	strh	r2, [r3, #10]
    sb_style.text.color =LV_COLOR_BLACK;
 80250c4:	4b33      	ldr	r3, [pc, #204]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250c6:	2200      	movs	r2, #0
 80250c8:	841a      	strh	r2, [r3, #32]
    sb_style.body.border.width = 1;
 80250ca:	4b32      	ldr	r3, [pc, #200]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250cc:	2201      	movs	r2, #1
 80250ce:	819a      	strh	r2, [r3, #12]
    sb_style.body.border.opa = LV_OPA_70;
 80250d0:	4b30      	ldr	r3, [pc, #192]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250d2:	22b2      	movs	r2, #178	; 0xb2
 80250d4:	73da      	strb	r2, [r3, #15]
    sb_style.body.opa = LV_OPA_70;
 80250d6:	4b2f      	ldr	r3, [pc, #188]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250d8:	22b2      	movs	r2, #178	; 0xb2
 80250da:	721a      	strb	r2, [r3, #8]
    sb_style.body.padding.right = 3;
 80250dc:	4b2d      	ldr	r3, [pc, #180]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250de:	2203      	movs	r2, #3
 80250e0:	839a      	strh	r2, [r3, #28]
    sb_style.body.padding.bottom = 3;
 80250e2:	4b2c      	ldr	r3, [pc, #176]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250e4:	2203      	movs	r2, #3
 80250e6:	831a      	strh	r2, [r3, #24]
    sb_style.body.padding.inner = 8;
 80250e8:	4b2a      	ldr	r3, [pc, #168]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 80250ea:	2208      	movs	r2, #8
 80250ec:	83da      	strh	r2, [r3, #30]
    lv_style_copy(&bg_style, &lv_style_plain);
 80250ee:	4926      	ldr	r1, [pc, #152]	; (8025188 <NotificationScreen_ItemsStyleInit+0x110>)
 80250f0:	482a      	ldr	r0, [pc, #168]	; (802519c <NotificationScreen_ItemsStyleInit+0x124>)
 80250f2:	f7e6 f901 	bl	800b2f8 <lv_style_copy>
    bg_style.body.main_color = LV_COLOR_WHITE;
 80250f6:	4a29      	ldr	r2, [pc, #164]	; (802519c <NotificationScreen_ItemsStyleInit+0x124>)
 80250f8:	4b27      	ldr	r3, [pc, #156]	; (8025198 <NotificationScreen_ItemsStyleInit+0x120>)
 80250fa:	881b      	ldrh	r3, [r3, #0]
 80250fc:	8053      	strh	r3, [r2, #2]
    bg_style.body.grad_color = LV_COLOR_WHITE;
 80250fe:	4a27      	ldr	r2, [pc, #156]	; (802519c <NotificationScreen_ItemsStyleInit+0x124>)
 8025100:	4b25      	ldr	r3, [pc, #148]	; (8025198 <NotificationScreen_ItemsStyleInit+0x120>)
 8025102:	881b      	ldrh	r3, [r3, #0]
 8025104:	8093      	strh	r3, [r2, #4]
    bg_style.body.border.color = LV_COLOR_WHITE;
 8025106:	4a25      	ldr	r2, [pc, #148]	; (802519c <NotificationScreen_ItemsStyleInit+0x124>)
 8025108:	4b23      	ldr	r3, [pc, #140]	; (8025198 <NotificationScreen_ItemsStyleInit+0x120>)
 802510a:	881b      	ldrh	r3, [r3, #0]
 802510c:	8153      	strh	r3, [r2, #10]
    bg_style.body.border.width = 0;
 802510e:	4b23      	ldr	r3, [pc, #140]	; (802519c <NotificationScreen_ItemsStyleInit+0x124>)
 8025110:	2200      	movs	r2, #0
 8025112:	819a      	strh	r2, [r3, #12]
    bg_style.body.border.opa = LV_OPA_70;
 8025114:	4b21      	ldr	r3, [pc, #132]	; (802519c <NotificationScreen_ItemsStyleInit+0x124>)
 8025116:	22b2      	movs	r2, #178	; 0xb2
 8025118:	73da      	strb	r2, [r3, #15]
    bg_style.body.opa = LV_OPA_70;
 802511a:	4b20      	ldr	r3, [pc, #128]	; (802519c <NotificationScreen_ItemsStyleInit+0x124>)
 802511c:	22b2      	movs	r2, #178	; 0xb2
 802511e:	721a      	strb	r2, [r3, #8]
    if(theme){
 8025120:	79fb      	ldrb	r3, [r7, #7]
 8025122:	2b00      	cmp	r3, #0
 8025124:	d016      	beq.n	8025154 <NotificationScreen_ItemsStyleInit+0xdc>
    	sb_style.body.main_color = LV_COLOR_BLACK;
 8025126:	4b1b      	ldr	r3, [pc, #108]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025128:	2200      	movs	r2, #0
 802512a:	805a      	strh	r2, [r3, #2]
        sb_style.body.grad_color = LV_COLOR_BLACK;
 802512c:	4b19      	ldr	r3, [pc, #100]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 802512e:	2200      	movs	r2, #0
 8025130:	809a      	strh	r2, [r3, #4]
        sb_style.body.border.color = LV_COLOR_WHITE;
 8025132:	4a18      	ldr	r2, [pc, #96]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 8025134:	4b18      	ldr	r3, [pc, #96]	; (8025198 <NotificationScreen_ItemsStyleInit+0x120>)
 8025136:	881b      	ldrh	r3, [r3, #0]
 8025138:	8153      	strh	r3, [r2, #10]
        bg_style.body.main_color = LV_COLOR_BLACK;
 802513a:	4b18      	ldr	r3, [pc, #96]	; (802519c <NotificationScreen_ItemsStyleInit+0x124>)
 802513c:	2200      	movs	r2, #0
 802513e:	805a      	strh	r2, [r3, #2]
        bg_style.body.grad_color = LV_COLOR_BLACK;
 8025140:	4b16      	ldr	r3, [pc, #88]	; (802519c <NotificationScreen_ItemsStyleInit+0x124>)
 8025142:	2200      	movs	r2, #0
 8025144:	809a      	strh	r2, [r3, #4]
        bg_style.body.border.color = LV_COLOR_BLACK;
 8025146:	4b15      	ldr	r3, [pc, #84]	; (802519c <NotificationScreen_ItemsStyleInit+0x124>)
 8025148:	2200      	movs	r2, #0
 802514a:	815a      	strh	r2, [r3, #10]
        sb_style.text.color =LV_COLOR_WHITE;
 802514c:	4a11      	ldr	r2, [pc, #68]	; (8025194 <NotificationScreen_ItemsStyleInit+0x11c>)
 802514e:	4b12      	ldr	r3, [pc, #72]	; (8025198 <NotificationScreen_ItemsStyleInit+0x120>)
 8025150:	881b      	ldrh	r3, [r3, #0]
 8025152:	8413      	strh	r3, [r2, #32]
    }

	lv_style_copy(&appName_Style, &lv_style_plain);
 8025154:	490c      	ldr	r1, [pc, #48]	; (8025188 <NotificationScreen_ItemsStyleInit+0x110>)
 8025156:	4812      	ldr	r0, [pc, #72]	; (80251a0 <NotificationScreen_ItemsStyleInit+0x128>)
 8025158:	f7e6 f8ce 	bl	800b2f8 <lv_style_copy>
	appName_Style.text.font = &lv_font_roboto_22;
 802515c:	4b10      	ldr	r3, [pc, #64]	; (80251a0 <NotificationScreen_ItemsStyleInit+0x128>)
 802515e:	4a11      	ldr	r2, [pc, #68]	; (80251a4 <NotificationScreen_ItemsStyleInit+0x12c>)
 8025160:	625a      	str	r2, [r3, #36]	; 0x24
	appName_Style.text.color = LV_COLOR_AQUA;
 8025162:	4a0f      	ldr	r2, [pc, #60]	; (80251a0 <NotificationScreen_ItemsStyleInit+0x128>)
 8025164:	4b10      	ldr	r3, [pc, #64]	; (80251a8 <NotificationScreen_ItemsStyleInit+0x130>)
 8025166:	881b      	ldrh	r3, [r3, #0]
 8025168:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&notification_Style, &lv_style_plain);
 802516a:	4907      	ldr	r1, [pc, #28]	; (8025188 <NotificationScreen_ItemsStyleInit+0x110>)
 802516c:	480f      	ldr	r0, [pc, #60]	; (80251ac <NotificationScreen_ItemsStyleInit+0x134>)
 802516e:	f7e6 f8c3 	bl	800b2f8 <lv_style_copy>
	notification_Style.text.font = &lv_font_roboto_16;
 8025172:	4b0e      	ldr	r3, [pc, #56]	; (80251ac <NotificationScreen_ItemsStyleInit+0x134>)
 8025174:	4a0e      	ldr	r2, [pc, #56]	; (80251b0 <NotificationScreen_ItemsStyleInit+0x138>)
 8025176:	625a      	str	r2, [r3, #36]	; 0x24
	notification_Style.text.color = LV_COLOR_BLACK;
 8025178:	4b0c      	ldr	r3, [pc, #48]	; (80251ac <NotificationScreen_ItemsStyleInit+0x134>)
 802517a:	2200      	movs	r2, #0
 802517c:	841a      	strh	r2, [r3, #32]
}
 802517e:	bf00      	nop
 8025180:	3708      	adds	r7, #8
 8025182:	46bd      	mov	sp, r7
 8025184:	bd80      	pop	{r7, pc}
 8025186:	bf00      	nop
 8025188:	2001ba10 	.word	0x2001ba10
 802518c:	2001ae14 	.word	0x2001ae14
 8025190:	0802cac0 	.word	0x0802cac0
 8025194:	2001ad9c 	.word	0x2001ad9c
 8025198:	0802caa8 	.word	0x0802caa8
 802519c:	2001add8 	.word	0x2001add8
 80251a0:	2001ae50 	.word	0x2001ae50
 80251a4:	200017c4 	.word	0x200017c4
 80251a8:	0802cac4 	.word	0x0802cac4
 80251ac:	2001ae8c 	.word	0x2001ae8c
 80251b0:	20000bf0 	.word	0x20000bf0

080251b4 <NotificationScreen_ItemsetPos>:
/*This function using for set items position
 * @param index using for set position axis y*/
tos_Position NotificationScreen_ItemsetPos(int8_t index){
 80251b4:	b480      	push	{r7}
 80251b6:	b085      	sub	sp, #20
 80251b8:	af00      	add	r7, sp, #0
 80251ba:	4603      	mov	r3, r0
 80251bc:	71fb      	strb	r3, [r7, #7]
	tos_Position tmp;
	tmp.x=0; tmp.y=(index*55)-90;
 80251be:	2300      	movs	r3, #0
 80251c0:	813b      	strh	r3, [r7, #8]
 80251c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80251c6:	b29b      	uxth	r3, r3
 80251c8:	461a      	mov	r2, r3
 80251ca:	00d2      	lsls	r2, r2, #3
 80251cc:	1ad2      	subs	r2, r2, r3
 80251ce:	00d2      	lsls	r2, r2, #3
 80251d0:	1ad3      	subs	r3, r2, r3
 80251d2:	b29b      	uxth	r3, r3
 80251d4:	3b5a      	subs	r3, #90	; 0x5a
 80251d6:	b29b      	uxth	r3, r3
 80251d8:	817b      	strh	r3, [r7, #10]
	return tmp;
 80251da:	68bb      	ldr	r3, [r7, #8]
 80251dc:	60fb      	str	r3, [r7, #12]
 80251de:	2300      	movs	r3, #0
 80251e0:	89ba      	ldrh	r2, [r7, #12]
 80251e2:	f362 030f 	bfi	r3, r2, #0, #16
 80251e6:	89fa      	ldrh	r2, [r7, #14]
 80251e8:	f362 431f 	bfi	r3, r2, #16, #16
}
 80251ec:	4618      	mov	r0, r3
 80251ee:	3714      	adds	r7, #20
 80251f0:	46bd      	mov	sp, r7
 80251f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251f6:	4770      	bx	lr

080251f8 <NotificationScreen_GetMaxScroll>:
/*This function using for return can get max going scroll value
 * @param node using for get node*/
int8_t NotificationScreen_GetMaxScroll(tos_Notification* node){
 80251f8:	b580      	push	{r7, lr}
 80251fa:	b084      	sub	sp, #16
 80251fc:	af00      	add	r7, sp, #0
 80251fe:	6078      	str	r0, [r7, #4]
	if(tos_NotificationGetSize(node)>=5){
 8025200:	6878      	ldr	r0, [r7, #4]
 8025202:	f004 fbc7 	bl	8029994 <tos_NotificationGetSize>
 8025206:	4603      	mov	r3, r0
 8025208:	2b04      	cmp	r3, #4
 802520a:	d909      	bls.n	8025220 <NotificationScreen_GetMaxScroll+0x28>
		int8_t max=tos_NotificationGetSize(node)-2;
 802520c:	6878      	ldr	r0, [r7, #4]
 802520e:	f004 fbc1 	bl	8029994 <tos_NotificationGetSize>
 8025212:	4603      	mov	r3, r0
 8025214:	3b02      	subs	r3, #2
 8025216:	b2db      	uxtb	r3, r3
 8025218:	73fb      	strb	r3, [r7, #15]
		return max;
 802521a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802521e:	e000      	b.n	8025222 <NotificationScreen_GetMaxScroll+0x2a>
	} return 0;
 8025220:	2300      	movs	r3, #0
}
 8025222:	4618      	mov	r0, r3
 8025224:	3710      	adds	r7, #16
 8025226:	46bd      	mov	sp, r7
 8025228:	bd80      	pop	{r7, pc}
	...

0802522c <NotificationScreen_TaskControllerSet>:

//Setter Getter Functions
void NotificationScreen_TaskControllerSet(bool active){
 802522c:	b480      	push	{r7}
 802522e:	b083      	sub	sp, #12
 8025230:	af00      	add	r7, sp, #0
 8025232:	4603      	mov	r3, r0
 8025234:	71fb      	strb	r3, [r7, #7]
	NS_taskController = active;
 8025236:	4a04      	ldr	r2, [pc, #16]	; (8025248 <NotificationScreen_TaskControllerSet+0x1c>)
 8025238:	79fb      	ldrb	r3, [r7, #7]
 802523a:	7013      	strb	r3, [r2, #0]
}
 802523c:	bf00      	nop
 802523e:	370c      	adds	r7, #12
 8025240:	46bd      	mov	sp, r7
 8025242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025246:	4770      	bx	lr
 8025248:	2001bce0 	.word	0x2001bce0

0802524c <NotificationScreen_TaskControllerGet>:
bool NotificationScreen_TaskControllerGet(void){
 802524c:	b480      	push	{r7}
 802524e:	af00      	add	r7, sp, #0
	return NS_taskController;
 8025250:	4b03      	ldr	r3, [pc, #12]	; (8025260 <NotificationScreen_TaskControllerGet+0x14>)
 8025252:	781b      	ldrb	r3, [r3, #0]
}
 8025254:	4618      	mov	r0, r3
 8025256:	46bd      	mov	sp, r7
 8025258:	f85d 7b04 	ldr.w	r7, [sp], #4
 802525c:	4770      	bx	lr
 802525e:	bf00      	nop
 8025260:	2001bce0 	.word	0x2001bce0

08025264 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8025264:	b480      	push	{r7}
 8025266:	b085      	sub	sp, #20
 8025268:	af00      	add	r7, sp, #0
 802526a:	4603      	mov	r3, r0
 802526c:	71fb      	strb	r3, [r7, #7]
 802526e:	460b      	mov	r3, r1
 8025270:	71bb      	strb	r3, [r7, #6]
 8025272:	4613      	mov	r3, r2
 8025274:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8025276:	79bb      	ldrb	r3, [r7, #6]
 8025278:	095b      	lsrs	r3, r3, #5
 802527a:	b2db      	uxtb	r3, r3
 802527c:	f003 0307 	and.w	r3, r3, #7
 8025280:	b2da      	uxtb	r2, r3
 8025282:	7b3b      	ldrb	r3, [r7, #12]
 8025284:	f362 0302 	bfi	r3, r2, #0, #3
 8025288:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 802528a:	79fb      	ldrb	r3, [r7, #7]
 802528c:	08db      	lsrs	r3, r3, #3
 802528e:	b2db      	uxtb	r3, r3
 8025290:	f003 031f 	and.w	r3, r3, #31
 8025294:	b2da      	uxtb	r2, r3
 8025296:	7b3b      	ldrb	r3, [r7, #12]
 8025298:	f362 03c7 	bfi	r3, r2, #3, #5
 802529c:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 802529e:	797b      	ldrb	r3, [r7, #5]
 80252a0:	08db      	lsrs	r3, r3, #3
 80252a2:	b2db      	uxtb	r3, r3
 80252a4:	f003 031f 	and.w	r3, r3, #31
 80252a8:	b2da      	uxtb	r2, r3
 80252aa:	7b7b      	ldrb	r3, [r7, #13]
 80252ac:	f362 0304 	bfi	r3, r2, #0, #5
 80252b0:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 80252b2:	79bb      	ldrb	r3, [r7, #6]
 80252b4:	089b      	lsrs	r3, r3, #2
 80252b6:	b2db      	uxtb	r3, r3
 80252b8:	f003 0307 	and.w	r3, r3, #7
 80252bc:	b2da      	uxtb	r2, r3
 80252be:	7b7b      	ldrb	r3, [r7, #13]
 80252c0:	f362 1347 	bfi	r3, r2, #5, #3
 80252c4:	737b      	strb	r3, [r7, #13]
    return color;
 80252c6:	89bb      	ldrh	r3, [r7, #12]
}
 80252c8:	4618      	mov	r0, r3
 80252ca:	3714      	adds	r7, #20
 80252cc:	46bd      	mov	sp, r7
 80252ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252d2:	4770      	bx	lr

080252d4 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 80252d4:	b580      	push	{r7, lr}
 80252d6:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 80252d8:	f7ef ff2c 	bl	8015134 <lv_disp_get_default>
 80252dc:	4603      	mov	r3, r0
 80252de:	4618      	mov	r0, r3
 80252e0:	f7e2 fbf4 	bl	8007acc <lv_disp_get_scr_act>
 80252e4:	4603      	mov	r3, r0
}
 80252e6:	4618      	mov	r0, r3
 80252e8:	bd80      	pop	{r7, pc}

080252ea <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 80252ea:	b580      	push	{r7, lr}
 80252ec:	b084      	sub	sp, #16
 80252ee:	af00      	add	r7, sp, #0
 80252f0:	60f8      	str	r0, [r7, #12]
 80252f2:	460b      	mov	r3, r1
 80252f4:	607a      	str	r2, [r7, #4]
 80252f6:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 80252f8:	6879      	ldr	r1, [r7, #4]
 80252fa:	68f8      	ldr	r0, [r7, #12]
 80252fc:	f7e4 fa5d 	bl	80097ba <lv_obj_set_style>
}
 8025300:	bf00      	nop
 8025302:	3710      	adds	r7, #16
 8025304:	46bd      	mov	sp, r7
 8025306:	bd80      	pop	{r7, pc}

08025308 <tos_RunModeScreen_Init>:
void RunMode_steps_angle_loader(void);
void RunMode_kCals_angle_loader(void);
void RunMode_distances_angle_loader(void);

/*This function using for initialization Run Mode screen*/
void tos_RunModeScreen_Init(bool unitType,bool theme){
 8025308:	b580      	push	{r7, lr}
 802530a:	b082      	sub	sp, #8
 802530c:	af00      	add	r7, sp, #0
 802530e:	4603      	mov	r3, r0
 8025310:	460a      	mov	r2, r1
 8025312:	71fb      	strb	r3, [r7, #7]
 8025314:	4613      	mov	r3, r2
 8025316:	71bb      	strb	r3, [r7, #6]
	lv_obj_clean(lv_scr_act());
 8025318:	f7ff ffdc 	bl	80252d4 <lv_scr_act>
 802531c:	4603      	mov	r3, r0
 802531e:	4618      	mov	r0, r3
 8025320:	f7e3 fb34 	bl	800898c <lv_obj_clean>
	lv_style_copy(&description_Style, &lv_style_plain);
 8025324:	492e      	ldr	r1, [pc, #184]	; (80253e0 <tos_RunModeScreen_Init+0xd8>)
 8025326:	482f      	ldr	r0, [pc, #188]	; (80253e4 <tos_RunModeScreen_Init+0xdc>)
 8025328:	f7e5 ffe6 	bl	800b2f8 <lv_style_copy>
	description_Style.text.font = &lv_font_unscii_8;
 802532c:	4b2d      	ldr	r3, [pc, #180]	; (80253e4 <tos_RunModeScreen_Init+0xdc>)
 802532e:	4a2e      	ldr	r2, [pc, #184]	; (80253e8 <tos_RunModeScreen_Init+0xe0>)
 8025330:	625a      	str	r2, [r3, #36]	; 0x24
	description_Style.text.color = LV_COLOR_GRAY;
 8025332:	4a2c      	ldr	r2, [pc, #176]	; (80253e4 <tos_RunModeScreen_Init+0xdc>)
 8025334:	4b2d      	ldr	r3, [pc, #180]	; (80253ec <tos_RunModeScreen_Init+0xe4>)
 8025336:	881b      	ldrh	r3, [r3, #0]
 8025338:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&style_screen, &lv_style_plain);
 802533a:	4929      	ldr	r1, [pc, #164]	; (80253e0 <tos_RunModeScreen_Init+0xd8>)
 802533c:	482c      	ldr	r0, [pc, #176]	; (80253f0 <tos_RunModeScreen_Init+0xe8>)
 802533e:	f7e5 ffdb 	bl	800b2f8 <lv_style_copy>
	if(theme){
 8025342:	79bb      	ldrb	r3, [r7, #6]
 8025344:	2b00      	cmp	r3, #0
 8025346:	d00a      	beq.n	802535e <tos_RunModeScreen_Init+0x56>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8025348:	4b29      	ldr	r3, [pc, #164]	; (80253f0 <tos_RunModeScreen_Init+0xe8>)
 802534a:	2200      	movs	r2, #0
 802534c:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 802534e:	4b28      	ldr	r3, [pc, #160]	; (80253f0 <tos_RunModeScreen_Init+0xe8>)
 8025350:	2200      	movs	r2, #0
 8025352:	809a      	strh	r2, [r3, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 8025354:	4a23      	ldr	r2, [pc, #140]	; (80253e4 <tos_RunModeScreen_Init+0xdc>)
 8025356:	4b27      	ldr	r3, [pc, #156]	; (80253f4 <tos_RunModeScreen_Init+0xec>)
 8025358:	881b      	ldrh	r3, [r3, #0]
 802535a:	8413      	strh	r3, [r2, #32]
 802535c:	e00b      	b.n	8025376 <tos_RunModeScreen_Init+0x6e>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 802535e:	4a24      	ldr	r2, [pc, #144]	; (80253f0 <tos_RunModeScreen_Init+0xe8>)
 8025360:	4b25      	ldr	r3, [pc, #148]	; (80253f8 <tos_RunModeScreen_Init+0xf0>)
 8025362:	881b      	ldrh	r3, [r3, #0]
 8025364:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8025366:	4a22      	ldr	r2, [pc, #136]	; (80253f0 <tos_RunModeScreen_Init+0xe8>)
 8025368:	4b23      	ldr	r3, [pc, #140]	; (80253f8 <tos_RunModeScreen_Init+0xf0>)
 802536a:	881b      	ldrh	r3, [r3, #0]
 802536c:	8093      	strh	r3, [r2, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 802536e:	4a1d      	ldr	r2, [pc, #116]	; (80253e4 <tos_RunModeScreen_Init+0xdc>)
 8025370:	4b20      	ldr	r3, [pc, #128]	; (80253f4 <tos_RunModeScreen_Init+0xec>)
 8025372:	881b      	ldrh	r3, [r3, #0]
 8025374:	8413      	strh	r3, [r2, #32]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8025376:	f7ff ffad 	bl	80252d4 <lv_scr_act>
 802537a:	4603      	mov	r3, r0
 802537c:	491c      	ldr	r1, [pc, #112]	; (80253f0 <tos_RunModeScreen_Init+0xe8>)
 802537e:	4618      	mov	r0, r3
 8025380:	f7e4 fa1b 	bl	80097ba <lv_obj_set_style>

	RMfirstVAl=true;
 8025384:	4b1d      	ldr	r3, [pc, #116]	; (80253fc <tos_RunModeScreen_Init+0xf4>)
 8025386:	2201      	movs	r2, #1
 8025388:	701a      	strb	r2, [r3, #0]
	RMtimeSetVal=0;
 802538a:	4b1d      	ldr	r3, [pc, #116]	; (8025400 <tos_RunModeScreen_Init+0xf8>)
 802538c:	2200      	movs	r2, #0
 802538e:	701a      	strb	r2, [r3, #0]
	isStartRun=false;
 8025390:	4b1c      	ldr	r3, [pc, #112]	; (8025404 <tos_RunModeScreen_Init+0xfc>)
 8025392:	2200      	movs	r2, #0
 8025394:	701a      	strb	r2, [r3, #0]

	RM_theme=theme;
 8025396:	4a1c      	ldr	r2, [pc, #112]	; (8025408 <tos_RunModeScreen_Init+0x100>)
 8025398:	79bb      	ldrb	r3, [r7, #6]
 802539a:	7013      	strb	r3, [r2, #0]
	RM_unitType=unitType;
 802539c:	4a1b      	ldr	r2, [pc, #108]	; (802540c <tos_RunModeScreen_Init+0x104>)
 802539e:	79fb      	ldrb	r3, [r7, #7]
 80253a0:	7013      	strb	r3, [r2, #0]
	RunMode_Obj_Init();
 80253a2:	f000 f839 	bl	8025418 <RunMode_Obj_Init>
	RunMode_Steps(theme);
 80253a6:	79bb      	ldrb	r3, [r7, #6]
 80253a8:	4618      	mov	r0, r3
 80253aa:	f000 f9bd 	bl	8025728 <RunMode_Steps>
	RunMode_kCals(theme);
 80253ae:	79bb      	ldrb	r3, [r7, #6]
 80253b0:	4618      	mov	r0, r3
 80253b2:	f000 f8ff 	bl	80255b4 <RunMode_kCals>
	RunMode_Distances(unitType,theme);
 80253b6:	79ba      	ldrb	r2, [r7, #6]
 80253b8:	79fb      	ldrb	r3, [r7, #7]
 80253ba:	4611      	mov	r1, r2
 80253bc:	4618      	mov	r0, r3
 80253be:	f000 fa69 	bl	8025894 <RunMode_Distances>
	RM_taskController=true;
 80253c2:	4b13      	ldr	r3, [pc, #76]	; (8025410 <tos_RunModeScreen_Init+0x108>)
 80253c4:	2201      	movs	r2, #1
 80253c6:	701a      	strb	r2, [r3, #0]
	lv_task_create(RunModeScreen_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 80253c8:	2300      	movs	r3, #0
 80253ca:	2201      	movs	r2, #1
 80253cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80253d0:	4810      	ldr	r0, [pc, #64]	; (8025414 <tos_RunModeScreen_Init+0x10c>)
 80253d2:	f7f1 faf3 	bl	80169bc <lv_task_create>
}
 80253d6:	bf00      	nop
 80253d8:	3708      	adds	r7, #8
 80253da:	46bd      	mov	sp, r7
 80253dc:	bd80      	pop	{r7, pc}
 80253de:	bf00      	nop
 80253e0:	2001ba10 	.word	0x2001ba10
 80253e4:	2001af08 	.word	0x2001af08
 80253e8:	200026d0 	.word	0x200026d0
 80253ec:	0802cad8 	.word	0x0802cad8
 80253f0:	2001aecc 	.word	0x2001aecc
 80253f4:	0802cadc 	.word	0x0802cadc
 80253f8:	0802cae0 	.word	0x0802cae0
 80253fc:	2001bd90 	.word	0x2001bd90
 8025400:	2001bd50 	.word	0x2001bd50
 8025404:	2001bd88 	.word	0x2001bd88
 8025408:	2001bd51 	.word	0x2001bd51
 802540c:	2001bd04 	.word	0x2001bd04
 8025410:	2001bd74 	.word	0x2001bd74
 8025414:	08025a1d 	.word	0x08025a1d

08025418 <RunMode_Obj_Init>:


/*This function using for create and set objects on screen*/
void RunMode_Obj_Init(void){
 8025418:	b590      	push	{r4, r7, lr}
 802541a:	b085      	sub	sp, #20
 802541c:	af04      	add	r7, sp, #16

    static lv_style_t obj_Style,indic_Style;
    lv_style_copy(&obj_Style, &lv_style_plain);
 802541e:	4957      	ldr	r1, [pc, #348]	; (802557c <RunMode_Obj_Init+0x164>)
 8025420:	4857      	ldr	r0, [pc, #348]	; (8025580 <RunMode_Obj_Init+0x168>)
 8025422:	f7e5 ff69 	bl	800b2f8 <lv_style_copy>
    obj_Style.text.color = LV_COLOR_BLACK;
 8025426:	4b56      	ldr	r3, [pc, #344]	; (8025580 <RunMode_Obj_Init+0x168>)
 8025428:	2200      	movs	r2, #0
 802542a:	841a      	strh	r2, [r3, #32]
    if(RM_theme) obj_Style.text.color = LV_COLOR_SILVER;
 802542c:	4b55      	ldr	r3, [pc, #340]	; (8025584 <RunMode_Obj_Init+0x16c>)
 802542e:	781b      	ldrb	r3, [r3, #0]
 8025430:	2b00      	cmp	r3, #0
 8025432:	d003      	beq.n	802543c <RunMode_Obj_Init+0x24>
 8025434:	4a52      	ldr	r2, [pc, #328]	; (8025580 <RunMode_Obj_Init+0x168>)
 8025436:	4b54      	ldr	r3, [pc, #336]	; (8025588 <RunMode_Obj_Init+0x170>)
 8025438:	881b      	ldrh	r3, [r3, #0]
 802543a:	8413      	strh	r3, [r2, #32]
    obj_Style.text.font = &digital_font_for_number_30;
 802543c:	4b50      	ldr	r3, [pc, #320]	; (8025580 <RunMode_Obj_Init+0x168>)
 802543e:	4a53      	ldr	r2, [pc, #332]	; (802558c <RunMode_Obj_Init+0x174>)
 8025440:	625a      	str	r2, [r3, #36]	; 0x24
    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8025442:	4c4f      	ldr	r4, [pc, #316]	; (8025580 <RunMode_Obj_Init+0x168>)
 8025444:	2200      	movs	r2, #0
 8025446:	21a5      	movs	r1, #165	; 0xa5
 8025448:	20ff      	movs	r0, #255	; 0xff
 802544a:	f7ff ff0b 	bl	8025264 <lv_color_make>
 802544e:	8060      	strh	r0, [r4, #2]
    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8025450:	4c4b      	ldr	r4, [pc, #300]	; (8025580 <RunMode_Obj_Init+0x168>)
 8025452:	2200      	movs	r2, #0
 8025454:	21a5      	movs	r1, #165	; 0xa5
 8025456:	20ff      	movs	r0, #255	; 0xff
 8025458:	f7ff ff04 	bl	8025264 <lv_color_make>
 802545c:	80a0      	strh	r0, [r4, #4]
    obj_Style.body.radius= 10;
 802545e:	4b48      	ldr	r3, [pc, #288]	; (8025580 <RunMode_Obj_Init+0x168>)
 8025460:	220a      	movs	r2, #10
 8025462:	80da      	strh	r2, [r3, #6]
    obj_Style.body.opa=200;
 8025464:	4b46      	ldr	r3, [pc, #280]	; (8025580 <RunMode_Obj_Init+0x168>)
 8025466:	22c8      	movs	r2, #200	; 0xc8
 8025468:	721a      	strb	r2, [r3, #8]
    lv_style_copy(&indic_Style, &obj_Style);
 802546a:	4945      	ldr	r1, [pc, #276]	; (8025580 <RunMode_Obj_Init+0x168>)
 802546c:	4848      	ldr	r0, [pc, #288]	; (8025590 <RunMode_Obj_Init+0x178>)
 802546e:	f7e5 ff43 	bl	800b2f8 <lv_style_copy>
    indic_Style.body.main_color   = lv_color_make(0x00, 0xFF, 0xFF);
 8025472:	4c47      	ldr	r4, [pc, #284]	; (8025590 <RunMode_Obj_Init+0x178>)
 8025474:	22ff      	movs	r2, #255	; 0xff
 8025476:	21ff      	movs	r1, #255	; 0xff
 8025478:	2000      	movs	r0, #0
 802547a:	f7ff fef3 	bl	8025264 <lv_color_make>
 802547e:	8060      	strh	r0, [r4, #2]
    indic_Style.body.grad_color   = lv_color_make(0x00, 0xFF, 0xFF);
 8025480:	4c43      	ldr	r4, [pc, #268]	; (8025590 <RunMode_Obj_Init+0x178>)
 8025482:	22ff      	movs	r2, #255	; 0xff
 8025484:	21ff      	movs	r1, #255	; 0xff
 8025486:	2000      	movs	r0, #0
 8025488:	f7ff feec 	bl	8025264 <lv_color_make>
 802548c:	80a0      	strh	r0, [r4, #4]
    indic_Style.body.opa=255;
 802548e:	4b40      	ldr	r3, [pc, #256]	; (8025590 <RunMode_Obj_Init+0x178>)
 8025490:	22ff      	movs	r2, #255	; 0xff
 8025492:	721a      	strb	r2, [r3, #8]

    RM_targetTimeBar = lv_bar_create(lv_scr_act(), NULL);
 8025494:	f7ff ff1e 	bl	80252d4 <lv_scr_act>
 8025498:	4603      	mov	r3, r0
 802549a:	2100      	movs	r1, #0
 802549c:	4618      	mov	r0, r3
 802549e:	f7f2 faad 	bl	80179fc <lv_bar_create>
 80254a2:	4602      	mov	r2, r0
 80254a4:	4b3b      	ldr	r3, [pc, #236]	; (8025594 <RunMode_Obj_Init+0x17c>)
 80254a6:	601a      	str	r2, [r3, #0]
    lv_bar_set_style(RM_targetTimeBar, LV_BAR_STYLE_BG, &obj_Style);
 80254a8:	4b3a      	ldr	r3, [pc, #232]	; (8025594 <RunMode_Obj_Init+0x17c>)
 80254aa:	681b      	ldr	r3, [r3, #0]
 80254ac:	4a34      	ldr	r2, [pc, #208]	; (8025580 <RunMode_Obj_Init+0x168>)
 80254ae:	2100      	movs	r1, #0
 80254b0:	4618      	mov	r0, r3
 80254b2:	f7f2 fc39 	bl	8017d28 <lv_bar_set_style>
    lv_bar_set_style(RM_targetTimeBar, LV_BAR_STYLE_INDIC, &indic_Style);
 80254b6:	4b37      	ldr	r3, [pc, #220]	; (8025594 <RunMode_Obj_Init+0x17c>)
 80254b8:	681b      	ldr	r3, [r3, #0]
 80254ba:	4a35      	ldr	r2, [pc, #212]	; (8025590 <RunMode_Obj_Init+0x178>)
 80254bc:	2101      	movs	r1, #1
 80254be:	4618      	mov	r0, r3
 80254c0:	f7f2 fc32 	bl	8017d28 <lv_bar_set_style>
    lv_obj_set_size(RM_targetTimeBar, 150, 30);
 80254c4:	4b33      	ldr	r3, [pc, #204]	; (8025594 <RunMode_Obj_Init+0x17c>)
 80254c6:	681b      	ldr	r3, [r3, #0]
 80254c8:	221e      	movs	r2, #30
 80254ca:	2196      	movs	r1, #150	; 0x96
 80254cc:	4618      	mov	r0, r3
 80254ce:	f7e3 fc2c 	bl	8008d2a <lv_obj_set_size>
    lv_obj_align(RM_targetTimeBar, NULL, LV_ALIGN_CENTER, 0, 80);
 80254d2:	4b30      	ldr	r3, [pc, #192]	; (8025594 <RunMode_Obj_Init+0x17c>)
 80254d4:	6818      	ldr	r0, [r3, #0]
 80254d6:	2350      	movs	r3, #80	; 0x50
 80254d8:	9300      	str	r3, [sp, #0]
 80254da:	2300      	movs	r3, #0
 80254dc:	2200      	movs	r2, #0
 80254de:	2100      	movs	r1, #0
 80254e0:	f7e3 fcc6 	bl	8008e70 <lv_obj_align>
    lv_bar_set_range(RM_targetTimeBar,0,100);
 80254e4:	4b2b      	ldr	r3, [pc, #172]	; (8025594 <RunMode_Obj_Init+0x17c>)
 80254e6:	681b      	ldr	r3, [r3, #0]
 80254e8:	2264      	movs	r2, #100	; 0x64
 80254ea:	2100      	movs	r1, #0
 80254ec:	4618      	mov	r0, r3
 80254ee:	f7f2 fbcf 	bl	8017c90 <lv_bar_set_range>
    lv_bar_set_value(RM_targetTimeBar, 0, LV_ANIM_OFF);
 80254f2:	4b28      	ldr	r3, [pc, #160]	; (8025594 <RunMode_Obj_Init+0x17c>)
 80254f4:	681b      	ldr	r3, [r3, #0]
 80254f6:	2200      	movs	r2, #0
 80254f8:	2100      	movs	r1, #0
 80254fa:	4618      	mov	r0, r3
 80254fc:	f7f2 fb44 	bl	8017b88 <lv_bar_set_value>

    //MAGENTA -> FF00FF
   	//AQUA -> 00FFFF
	//ORANGE -> FFA500

    RM_Lbl = lv_label_create(lv_scr_act(), NULL);
 8025500:	f7ff fee8 	bl	80252d4 <lv_scr_act>
 8025504:	4603      	mov	r3, r0
 8025506:	2100      	movs	r1, #0
 8025508:	4618      	mov	r0, r3
 802550a:	f7f6 fdc9 	bl	801c0a0 <lv_label_create>
 802550e:	4602      	mov	r2, r0
 8025510:	4b21      	ldr	r3, [pc, #132]	; (8025598 <RunMode_Obj_Init+0x180>)
 8025512:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(RM_Lbl, true);
 8025514:	4b20      	ldr	r3, [pc, #128]	; (8025598 <RunMode_Obj_Init+0x180>)
 8025516:	681b      	ldr	r3, [r3, #0]
 8025518:	2101      	movs	r1, #1
 802551a:	4618      	mov	r0, r3
 802551c:	f7f7 f80e 	bl	801c53c <lv_label_set_recolor>
 	lv_label_set_style(RM_Lbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 8025520:	4b1d      	ldr	r3, [pc, #116]	; (8025598 <RunMode_Obj_Init+0x180>)
 8025522:	681b      	ldr	r3, [r3, #0]
 8025524:	4a16      	ldr	r2, [pc, #88]	; (8025580 <RunMode_Obj_Init+0x168>)
 8025526:	2100      	movs	r1, #0
 8025528:	4618      	mov	r0, r3
 802552a:	f7ff fede 	bl	80252ea <lv_label_set_style>
	snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 802552e:	4b1b      	ldr	r3, [pc, #108]	; (802559c <RunMode_Obj_Init+0x184>)
 8025530:	781b      	ldrb	r3, [r3, #0]
 8025532:	4618      	mov	r0, r3
 8025534:	4b1a      	ldr	r3, [pc, #104]	; (80255a0 <RunMode_Obj_Init+0x188>)
 8025536:	781b      	ldrb	r3, [r3, #0]
 8025538:	461a      	mov	r2, r3
 802553a:	4b1a      	ldr	r3, [pc, #104]	; (80255a4 <RunMode_Obj_Init+0x18c>)
 802553c:	781b      	ldrb	r3, [r3, #0]
 802553e:	4619      	mov	r1, r3
 8025540:	4b19      	ldr	r3, [pc, #100]	; (80255a8 <RunMode_Obj_Init+0x190>)
 8025542:	881b      	ldrh	r3, [r3, #0]
 8025544:	9302      	str	r3, [sp, #8]
 8025546:	9101      	str	r1, [sp, #4]
 8025548:	9200      	str	r2, [sp, #0]
 802554a:	4603      	mov	r3, r0
 802554c:	4a17      	ldr	r2, [pc, #92]	; (80255ac <RunMode_Obj_Init+0x194>)
 802554e:	2140      	movs	r1, #64	; 0x40
 8025550:	4817      	ldr	r0, [pc, #92]	; (80255b0 <RunMode_Obj_Init+0x198>)
 8025552:	f005 f957 	bl	802a804 <sniprintf>
			RMhours,RMminutes,RMseconds,RMmilisecs);
	lv_label_set_text(RM_Lbl, runModeBuffer);
 8025556:	4b10      	ldr	r3, [pc, #64]	; (8025598 <RunMode_Obj_Init+0x180>)
 8025558:	681b      	ldr	r3, [r3, #0]
 802555a:	4915      	ldr	r1, [pc, #84]	; (80255b0 <RunMode_Obj_Init+0x198>)
 802555c:	4618      	mov	r0, r3
 802555e:	f7f6 fed1 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 8025562:	4b0d      	ldr	r3, [pc, #52]	; (8025598 <RunMode_Obj_Init+0x180>)
 8025564:	6818      	ldr	r0, [r3, #0]
 8025566:	2328      	movs	r3, #40	; 0x28
 8025568:	9300      	str	r3, [sp, #0]
 802556a:	2300      	movs	r3, #0
 802556c:	2200      	movs	r2, #0
 802556e:	2100      	movs	r1, #0
 8025570:	f7e3 fc7e 	bl	8008e70 <lv_obj_align>
}
 8025574:	bf00      	nop
 8025576:	3704      	adds	r7, #4
 8025578:	46bd      	mov	sp, r7
 802557a:	bd90      	pop	{r4, r7, pc}
 802557c:	2001ba10 	.word	0x2001ba10
 8025580:	2001af48 	.word	0x2001af48
 8025584:	2001bd51 	.word	0x2001bd51
 8025588:	0802cadc 	.word	0x0802cadc
 802558c:	200027ec 	.word	0x200027ec
 8025590:	2001af84 	.word	0x2001af84
 8025594:	2001bd68 	.word	0x2001bd68
 8025598:	2001bd08 	.word	0x2001bd08
 802559c:	2001bd05 	.word	0x2001bd05
 80255a0:	2001bd4c 	.word	0x2001bd4c
 80255a4:	2001bd58 	.word	0x2001bd58
 80255a8:	2001bd94 	.word	0x2001bd94
 80255ac:	0802cae4 	.word	0x0802cae4
 80255b0:	2001bd0c 	.word	0x2001bd0c

080255b4 <RunMode_kCals>:
/* This function using for initiation kCAls Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_kCals(bool theme){
 80255b4:	b590      	push	{r4, r7, lr}
 80255b6:	b087      	sub	sp, #28
 80255b8:	af02      	add	r7, sp, #8
 80255ba:	4603      	mov	r3, r0
 80255bc:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 80255be:	f7ff fe89 	bl	80252d4 <lv_scr_act>
 80255c2:	4603      	mov	r3, r0
 80255c4:	2100      	movs	r1, #0
 80255c6:	4618      	mov	r0, r3
 80255c8:	f7f6 f9de 	bl	801b988 <lv_img_create>
 80255cc:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &kCalsBlack42x28);
 80255ce:	79fb      	ldrb	r3, [r7, #7]
 80255d0:	2b00      	cmp	r3, #0
 80255d2:	d004      	beq.n	80255de <RunMode_kCals+0x2a>
 80255d4:	494a      	ldr	r1, [pc, #296]	; (8025700 <RunMode_kCals+0x14c>)
 80255d6:	68f8      	ldr	r0, [r7, #12]
 80255d8:	f7f6 fa74 	bl	801bac4 <lv_img_set_src>
 80255dc:	e003      	b.n	80255e6 <RunMode_kCals+0x32>
	else lv_img_set_src(img1, &kCalsWhite42x28);
 80255de:	4949      	ldr	r1, [pc, #292]	; (8025704 <RunMode_kCals+0x150>)
 80255e0:	68f8      	ldr	r0, [r7, #12]
 80255e2:	f7f6 fa6f 	bl	801bac4 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, -75, -60);
 80255e6:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80255ea:	9300      	str	r3, [sp, #0]
 80255ec:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80255f0:	2200      	movs	r2, #0
 80255f2:	2100      	movs	r1, #0
 80255f4:	68f8      	ldr	r0, [r7, #12]
 80255f6:	f7e3 fc3b 	bl	8008e70 <lv_obj_align>

 	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 80255fa:	f7ff fe6b 	bl	80252d4 <lv_scr_act>
 80255fe:	4603      	mov	r3, r0
 8025600:	2100      	movs	r1, #0
 8025602:	4618      	mov	r0, r3
 8025604:	f7f6 fd4c 	bl	801c0a0 <lv_label_create>
 8025608:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802560a:	4a3f      	ldr	r2, [pc, #252]	; (8025708 <RunMode_kCals+0x154>)
 802560c:	2100      	movs	r1, #0
 802560e:	68b8      	ldr	r0, [r7, #8]
 8025610:	f7ff fe6b 	bl	80252ea <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 8025614:	493d      	ldr	r1, [pc, #244]	; (802570c <RunMode_kCals+0x158>)
 8025616:	68b8      	ldr	r0, [r7, #8]
 8025618:	f7f6 fe74 	bl	801c304 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -75, 3);
 802561c:	2303      	movs	r3, #3
 802561e:	9300      	str	r3, [sp, #0]
 8025620:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8025624:	2200      	movs	r2, #0
 8025626:	2100      	movs	r1, #0
 8025628:	68b8      	ldr	r0, [r7, #8]
 802562a:	f7e3 fc21 	bl	8008e70 <lv_obj_align>

	static lv_style_t kCals_Style;
	lv_style_copy(&kCals_Style, &lv_style_plain);
 802562e:	4938      	ldr	r1, [pc, #224]	; (8025710 <RunMode_kCals+0x15c>)
 8025630:	4838      	ldr	r0, [pc, #224]	; (8025714 <RunMode_kCals+0x160>)
 8025632:	f7e5 fe61 	bl	800b2f8 <lv_style_copy>
	kCals_Style.line.color = lv_color_make(255,205,105);
 8025636:	4c37      	ldr	r4, [pc, #220]	; (8025714 <RunMode_kCals+0x160>)
 8025638:	2269      	movs	r2, #105	; 0x69
 802563a:	21cd      	movs	r1, #205	; 0xcd
 802563c:	20ff      	movs	r0, #255	; 0xff
 802563e:	f7ff fe11 	bl	8025264 <lv_color_make>
 8025642:	86a0      	strh	r0, [r4, #52]	; 0x34
    kCals_Style.line.width = 3;
 8025644:	4b33      	ldr	r3, [pc, #204]	; (8025714 <RunMode_kCals+0x160>)
 8025646:	2203      	movs	r2, #3
 8025648:	86da      	strh	r2, [r3, #54]	; 0x36
    kCals_Style.text.color = lv_color_make(255,205,105);
 802564a:	4c32      	ldr	r4, [pc, #200]	; (8025714 <RunMode_kCals+0x160>)
 802564c:	2269      	movs	r2, #105	; 0x69
 802564e:	21cd      	movs	r1, #205	; 0xcd
 8025650:	20ff      	movs	r0, #255	; 0xff
 8025652:	f7ff fe07 	bl	8025264 <lv_color_make>
 8025656:	8420      	strh	r0, [r4, #32]
    kCals_Style.text.font = &digital_font_for_number_30;
 8025658:	4b2e      	ldr	r3, [pc, #184]	; (8025714 <RunMode_kCals+0x160>)
 802565a:	4a2f      	ldr	r2, [pc, #188]	; (8025718 <RunMode_kCals+0x164>)
 802565c:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 802565e:	f7ff fe39 	bl	80252d4 <lv_scr_act>
 8025662:	4603      	mov	r3, r0
 8025664:	2100      	movs	r1, #0
 8025666:	4618      	mov	r0, r3
 8025668:	f7f1 ff18 	bl	801749c <lv_arc_create>
 802566c:	4602      	mov	r2, r0
 802566e:	4b2b      	ldr	r3, [pc, #172]	; (802571c <RunMode_kCals+0x168>)
 8025670:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_kCalsArc, 60, 60);
 8025672:	4b2a      	ldr	r3, [pc, #168]	; (802571c <RunMode_kCals+0x168>)
 8025674:	681b      	ldr	r3, [r3, #0]
 8025676:	223c      	movs	r2, #60	; 0x3c
 8025678:	213c      	movs	r1, #60	; 0x3c
 802567a:	4618      	mov	r0, r3
 802567c:	f7e3 fb55 	bl	8008d2a <lv_obj_set_size>
    lv_arc_set_angles(RM_kCalsArc, 0, 360);
 8025680:	4b26      	ldr	r3, [pc, #152]	; (802571c <RunMode_kCals+0x168>)
 8025682:	681b      	ldr	r3, [r3, #0]
 8025684:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8025688:	2100      	movs	r1, #0
 802568a:	4618      	mov	r0, r3
 802568c:	f7f1 ff82 	bl	8017594 <lv_arc_set_angles>
    lv_arc_set_style(RM_kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8025690:	4b22      	ldr	r3, [pc, #136]	; (802571c <RunMode_kCals+0x168>)
 8025692:	681b      	ldr	r3, [r3, #0]
 8025694:	4a1f      	ldr	r2, [pc, #124]	; (8025714 <RunMode_kCals+0x160>)
 8025696:	2100      	movs	r1, #0
 8025698:	4618      	mov	r0, r3
 802569a:	f7f1 ffa4 	bl	80175e6 <lv_arc_set_style>
    lv_obj_align(RM_kCalsArc, NULL, LV_ALIGN_CENTER, -75, -60);
 802569e:	4b1f      	ldr	r3, [pc, #124]	; (802571c <RunMode_kCals+0x168>)
 80256a0:	6818      	ldr	r0, [r3, #0]
 80256a2:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80256a6:	9300      	str	r3, [sp, #0]
 80256a8:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80256ac:	2200      	movs	r2, #0
 80256ae:	2100      	movs	r1, #0
 80256b0:	f7e3 fbde 	bl	8008e70 <lv_obj_align>

    RM_kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 80256b4:	f7ff fe0e 	bl	80252d4 <lv_scr_act>
 80256b8:	4603      	mov	r3, r0
 80256ba:	2100      	movs	r1, #0
 80256bc:	4618      	mov	r0, r3
 80256be:	f7f6 fcef 	bl	801c0a0 <lv_label_create>
 80256c2:	4602      	mov	r2, r0
 80256c4:	4b16      	ldr	r3, [pc, #88]	; (8025720 <RunMode_kCals+0x16c>)
 80256c6:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 80256c8:	4b15      	ldr	r3, [pc, #84]	; (8025720 <RunMode_kCals+0x16c>)
 80256ca:	681b      	ldr	r3, [r3, #0]
 80256cc:	4a11      	ldr	r2, [pc, #68]	; (8025714 <RunMode_kCals+0x160>)
 80256ce:	2100      	movs	r1, #0
 80256d0:	4618      	mov	r0, r3
 80256d2:	f7ff fe0a 	bl	80252ea <lv_label_set_style>
   	lv_label_set_text(RM_kCalsLbl, "0000");
 80256d6:	4b12      	ldr	r3, [pc, #72]	; (8025720 <RunMode_kCals+0x16c>)
 80256d8:	681b      	ldr	r3, [r3, #0]
 80256da:	4912      	ldr	r1, [pc, #72]	; (8025724 <RunMode_kCals+0x170>)
 80256dc:	4618      	mov	r0, r3
 80256de:	f7f6 fe11 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(RM_kCalsLbl, NULL, LV_ALIGN_CENTER, -75, -15);
 80256e2:	4b0f      	ldr	r3, [pc, #60]	; (8025720 <RunMode_kCals+0x16c>)
 80256e4:	6818      	ldr	r0, [r3, #0]
 80256e6:	f06f 030e 	mvn.w	r3, #14
 80256ea:	9300      	str	r3, [sp, #0]
 80256ec:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80256f0:	2200      	movs	r2, #0
 80256f2:	2100      	movs	r1, #0
 80256f4:	f7e3 fbbc 	bl	8008e70 <lv_obj_align>

}
 80256f8:	bf00      	nop
 80256fa:	3714      	adds	r7, #20
 80256fc:	46bd      	mov	sp, r7
 80256fe:	bd90      	pop	{r4, r7, pc}
 8025700:	0803ac70 	.word	0x0803ac70
 8025704:	0803b5ac 	.word	0x0803b5ac
 8025708:	2001af08 	.word	0x2001af08
 802570c:	0802cb14 	.word	0x0802cb14
 8025710:	2001ba10 	.word	0x2001ba10
 8025714:	2001afc0 	.word	0x2001afc0
 8025718:	200027ec 	.word	0x200027ec
 802571c:	2001bd84 	.word	0x2001bd84
 8025720:	2001bd78 	.word	0x2001bd78
 8025724:	0802cb1c 	.word	0x0802cb1c

08025728 <RunMode_Steps>:
/* This function using for initiation Steps Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_Steps(bool theme){
 8025728:	b590      	push	{r4, r7, lr}
 802572a:	b087      	sub	sp, #28
 802572c:	af02      	add	r7, sp, #8
 802572e:	4603      	mov	r3, r0
 8025730:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8025732:	f7ff fdcf 	bl	80252d4 <lv_scr_act>
 8025736:	4603      	mov	r3, r0
 8025738:	2100      	movs	r1, #0
 802573a:	4618      	mov	r0, r3
 802573c:	f7f6 f924 	bl	801b988 <lv_img_create>
 8025740:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &stepsBlack42x28);
 8025742:	79fb      	ldrb	r3, [r7, #7]
 8025744:	2b00      	cmp	r3, #0
 8025746:	d004      	beq.n	8025752 <RunMode_Steps+0x2a>
 8025748:	4948      	ldr	r1, [pc, #288]	; (802586c <RunMode_Steps+0x144>)
 802574a:	68f8      	ldr	r0, [r7, #12]
 802574c:	f7f6 f9ba 	bl	801bac4 <lv_img_set_src>
 8025750:	e003      	b.n	802575a <RunMode_Steps+0x32>
	else lv_img_set_src(img1, &stepsWhite42x28);
 8025752:	4947      	ldr	r1, [pc, #284]	; (8025870 <RunMode_Steps+0x148>)
 8025754:	68f8      	ldr	r0, [r7, #12]
 8025756:	f7f6 f9b5 	bl	801bac4 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -60);
 802575a:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802575e:	9300      	str	r3, [sp, #0]
 8025760:	2300      	movs	r3, #0
 8025762:	2200      	movs	r2, #0
 8025764:	2100      	movs	r1, #0
 8025766:	68f8      	ldr	r0, [r7, #12]
 8025768:	f7e3 fb82 	bl	8008e70 <lv_obj_align>

 	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 802576c:	f7ff fdb2 	bl	80252d4 <lv_scr_act>
 8025770:	4603      	mov	r3, r0
 8025772:	2100      	movs	r1, #0
 8025774:	4618      	mov	r0, r3
 8025776:	f7f6 fc93 	bl	801c0a0 <lv_label_create>
 802577a:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802577c:	4a3d      	ldr	r2, [pc, #244]	; (8025874 <RunMode_Steps+0x14c>)
 802577e:	2100      	movs	r1, #0
 8025780:	68b8      	ldr	r0, [r7, #8]
 8025782:	f7ff fdb2 	bl	80252ea <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 8025786:	493c      	ldr	r1, [pc, #240]	; (8025878 <RunMode_Steps+0x150>)
 8025788:	68b8      	ldr	r0, [r7, #8]
 802578a:	f7f6 fdbb 	bl	801c304 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, 0, 3);
 802578e:	2303      	movs	r3, #3
 8025790:	9300      	str	r3, [sp, #0]
 8025792:	2300      	movs	r3, #0
 8025794:	2200      	movs	r2, #0
 8025796:	2100      	movs	r1, #0
 8025798:	68b8      	ldr	r0, [r7, #8]
 802579a:	f7e3 fb69 	bl	8008e70 <lv_obj_align>

    static lv_style_t steps_Style;
    lv_style_copy(&steps_Style, &lv_style_plain);
 802579e:	4937      	ldr	r1, [pc, #220]	; (802587c <RunMode_Steps+0x154>)
 80257a0:	4837      	ldr	r0, [pc, #220]	; (8025880 <RunMode_Steps+0x158>)
 80257a2:	f7e5 fda9 	bl	800b2f8 <lv_style_copy>
    steps_Style.line.color = lv_color_make(101,204,53);
 80257a6:	4c36      	ldr	r4, [pc, #216]	; (8025880 <RunMode_Steps+0x158>)
 80257a8:	2235      	movs	r2, #53	; 0x35
 80257aa:	21cc      	movs	r1, #204	; 0xcc
 80257ac:	2065      	movs	r0, #101	; 0x65
 80257ae:	f7ff fd59 	bl	8025264 <lv_color_make>
 80257b2:	86a0      	strh	r0, [r4, #52]	; 0x34
    steps_Style.line.width = 3;
 80257b4:	4b32      	ldr	r3, [pc, #200]	; (8025880 <RunMode_Steps+0x158>)
 80257b6:	2203      	movs	r2, #3
 80257b8:	86da      	strh	r2, [r3, #54]	; 0x36
    steps_Style.text.color = lv_color_make(101,204,53);
 80257ba:	4c31      	ldr	r4, [pc, #196]	; (8025880 <RunMode_Steps+0x158>)
 80257bc:	2235      	movs	r2, #53	; 0x35
 80257be:	21cc      	movs	r1, #204	; 0xcc
 80257c0:	2065      	movs	r0, #101	; 0x65
 80257c2:	f7ff fd4f 	bl	8025264 <lv_color_make>
 80257c6:	8420      	strh	r0, [r4, #32]
    steps_Style.text.font = &digital_font_for_number_30;
 80257c8:	4b2d      	ldr	r3, [pc, #180]	; (8025880 <RunMode_Steps+0x158>)
 80257ca:	4a2e      	ldr	r2, [pc, #184]	; (8025884 <RunMode_Steps+0x15c>)
 80257cc:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_stepsArc = lv_arc_create(lv_scr_act(), NULL);
 80257ce:	f7ff fd81 	bl	80252d4 <lv_scr_act>
 80257d2:	4603      	mov	r3, r0
 80257d4:	2100      	movs	r1, #0
 80257d6:	4618      	mov	r0, r3
 80257d8:	f7f1 fe60 	bl	801749c <lv_arc_create>
 80257dc:	4602      	mov	r2, r0
 80257de:	4b2a      	ldr	r3, [pc, #168]	; (8025888 <RunMode_Steps+0x160>)
 80257e0:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_stepsArc, 60, 60);
 80257e2:	4b29      	ldr	r3, [pc, #164]	; (8025888 <RunMode_Steps+0x160>)
 80257e4:	681b      	ldr	r3, [r3, #0]
 80257e6:	223c      	movs	r2, #60	; 0x3c
 80257e8:	213c      	movs	r1, #60	; 0x3c
 80257ea:	4618      	mov	r0, r3
 80257ec:	f7e3 fa9d 	bl	8008d2a <lv_obj_set_size>
    lv_arc_set_angles(RM_stepsArc, 0, 360);
 80257f0:	4b25      	ldr	r3, [pc, #148]	; (8025888 <RunMode_Steps+0x160>)
 80257f2:	681b      	ldr	r3, [r3, #0]
 80257f4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80257f8:	2100      	movs	r1, #0
 80257fa:	4618      	mov	r0, r3
 80257fc:	f7f1 feca 	bl	8017594 <lv_arc_set_angles>
    lv_arc_set_style(RM_stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8025800:	4b21      	ldr	r3, [pc, #132]	; (8025888 <RunMode_Steps+0x160>)
 8025802:	681b      	ldr	r3, [r3, #0]
 8025804:	4a1e      	ldr	r2, [pc, #120]	; (8025880 <RunMode_Steps+0x158>)
 8025806:	2100      	movs	r1, #0
 8025808:	4618      	mov	r0, r3
 802580a:	f7f1 feec 	bl	80175e6 <lv_arc_set_style>
    lv_obj_align(RM_stepsArc, NULL, LV_ALIGN_CENTER, 0, -60);
 802580e:	4b1e      	ldr	r3, [pc, #120]	; (8025888 <RunMode_Steps+0x160>)
 8025810:	6818      	ldr	r0, [r3, #0]
 8025812:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8025816:	9300      	str	r3, [sp, #0]
 8025818:	2300      	movs	r3, #0
 802581a:	2200      	movs	r2, #0
 802581c:	2100      	movs	r1, #0
 802581e:	f7e3 fb27 	bl	8008e70 <lv_obj_align>

    RM_stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8025822:	f7ff fd57 	bl	80252d4 <lv_scr_act>
 8025826:	4603      	mov	r3, r0
 8025828:	2100      	movs	r1, #0
 802582a:	4618      	mov	r0, r3
 802582c:	f7f6 fc38 	bl	801c0a0 <lv_label_create>
 8025830:	4602      	mov	r2, r0
 8025832:	4b16      	ldr	r3, [pc, #88]	; (802588c <RunMode_Steps+0x164>)
 8025834:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8025836:	4b15      	ldr	r3, [pc, #84]	; (802588c <RunMode_Steps+0x164>)
 8025838:	681b      	ldr	r3, [r3, #0]
 802583a:	4a11      	ldr	r2, [pc, #68]	; (8025880 <RunMode_Steps+0x158>)
 802583c:	2100      	movs	r1, #0
 802583e:	4618      	mov	r0, r3
 8025840:	f7ff fd53 	bl	80252ea <lv_label_set_style>
   	lv_label_set_text(RM_stepsLbl, "00000");
 8025844:	4b11      	ldr	r3, [pc, #68]	; (802588c <RunMode_Steps+0x164>)
 8025846:	681b      	ldr	r3, [r3, #0]
 8025848:	4911      	ldr	r1, [pc, #68]	; (8025890 <RunMode_Steps+0x168>)
 802584a:	4618      	mov	r0, r3
 802584c:	f7f6 fd5a 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(RM_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -15);
 8025850:	4b0e      	ldr	r3, [pc, #56]	; (802588c <RunMode_Steps+0x164>)
 8025852:	6818      	ldr	r0, [r3, #0]
 8025854:	f06f 030e 	mvn.w	r3, #14
 8025858:	9300      	str	r3, [sp, #0]
 802585a:	2300      	movs	r3, #0
 802585c:	2200      	movs	r2, #0
 802585e:	2100      	movs	r1, #0
 8025860:	f7e3 fb06 	bl	8008e70 <lv_obj_align>

}
 8025864:	bf00      	nop
 8025866:	3714      	adds	r7, #20
 8025868:	46bd      	mov	sp, r7
 802586a:	bd90      	pop	{r4, r7, pc}
 802586c:	08041fb0 	.word	0x08041fb0
 8025870:	080428ec 	.word	0x080428ec
 8025874:	2001af08 	.word	0x2001af08
 8025878:	0802cb14 	.word	0x0802cb14
 802587c:	2001ba10 	.word	0x2001ba10
 8025880:	2001affc 	.word	0x2001affc
 8025884:	200027ec 	.word	0x200027ec
 8025888:	2001bd7c 	.word	0x2001bd7c
 802588c:	2001bd5c 	.word	0x2001bd5c
 8025890:	0802cb24 	.word	0x0802cb24

08025894 <RunMode_Distances>:
/* This function using for initiation Distances Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_Distances(bool unitType,bool theme){
 8025894:	b590      	push	{r4, r7, lr}
 8025896:	b087      	sub	sp, #28
 8025898:	af02      	add	r7, sp, #8
 802589a:	4603      	mov	r3, r0
 802589c:	460a      	mov	r2, r1
 802589e:	71fb      	strb	r3, [r7, #7]
 80258a0:	4613      	mov	r3, r2
 80258a2:	71bb      	strb	r3, [r7, #6]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 80258a4:	f7ff fd16 	bl	80252d4 <lv_scr_act>
 80258a8:	4603      	mov	r3, r0
 80258aa:	2100      	movs	r1, #0
 80258ac:	4618      	mov	r0, r3
 80258ae:	f7f6 f86b 	bl	801b988 <lv_img_create>
 80258b2:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &locationPointBlack42x28);
 80258b4:	79bb      	ldrb	r3, [r7, #6]
 80258b6:	2b00      	cmp	r3, #0
 80258b8:	d004      	beq.n	80258c4 <RunMode_Distances+0x30>
 80258ba:	494d      	ldr	r1, [pc, #308]	; (80259f0 <RunMode_Distances+0x15c>)
 80258bc:	68f8      	ldr	r0, [r7, #12]
 80258be:	f7f6 f901 	bl	801bac4 <lv_img_set_src>
 80258c2:	e003      	b.n	80258cc <RunMode_Distances+0x38>
	else lv_img_set_src(img1, &locationPointWhite42x28);
 80258c4:	494b      	ldr	r1, [pc, #300]	; (80259f4 <RunMode_Distances+0x160>)
 80258c6:	68f8      	ldr	r0, [r7, #12]
 80258c8:	f7f6 f8fc 	bl	801bac4 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 75, -60);
 80258cc:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80258d0:	9300      	str	r3, [sp, #0]
 80258d2:	234b      	movs	r3, #75	; 0x4b
 80258d4:	2200      	movs	r2, #0
 80258d6:	2100      	movs	r1, #0
 80258d8:	68f8      	ldr	r0, [r7, #12]
 80258da:	f7e3 fac9 	bl	8008e70 <lv_obj_align>

 	lv_obj_t * distDescLbl= lv_label_create(lv_scr_act(), NULL);
 80258de:	f7ff fcf9 	bl	80252d4 <lv_scr_act>
 80258e2:	4603      	mov	r3, r0
 80258e4:	2100      	movs	r1, #0
 80258e6:	4618      	mov	r0, r3
 80258e8:	f7f6 fbda 	bl	801c0a0 <lv_label_create>
 80258ec:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(distDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80258ee:	4a42      	ldr	r2, [pc, #264]	; (80259f8 <RunMode_Distances+0x164>)
 80258f0:	2100      	movs	r1, #0
 80258f2:	68b8      	ldr	r0, [r7, #8]
 80258f4:	f7ff fcf9 	bl	80252ea <lv_label_set_style>
 	if(unitType) lv_label_set_text(distDescLbl, "km");
 80258f8:	79fb      	ldrb	r3, [r7, #7]
 80258fa:	2b00      	cmp	r3, #0
 80258fc:	d004      	beq.n	8025908 <RunMode_Distances+0x74>
 80258fe:	493f      	ldr	r1, [pc, #252]	; (80259fc <RunMode_Distances+0x168>)
 8025900:	68b8      	ldr	r0, [r7, #8]
 8025902:	f7f6 fcff 	bl	801c304 <lv_label_set_text>
 8025906:	e003      	b.n	8025910 <RunMode_Distances+0x7c>
 	else lv_label_set_text(distDescLbl, "miles");
 8025908:	493d      	ldr	r1, [pc, #244]	; (8025a00 <RunMode_Distances+0x16c>)
 802590a:	68b8      	ldr	r0, [r7, #8]
 802590c:	f7f6 fcfa 	bl	801c304 <lv_label_set_text>
   	lv_obj_align(distDescLbl, NULL, LV_ALIGN_CENTER, 75, 3);
 8025910:	2303      	movs	r3, #3
 8025912:	9300      	str	r3, [sp, #0]
 8025914:	234b      	movs	r3, #75	; 0x4b
 8025916:	2200      	movs	r2, #0
 8025918:	2100      	movs	r1, #0
 802591a:	68b8      	ldr	r0, [r7, #8]
 802591c:	f7e3 faa8 	bl	8008e70 <lv_obj_align>

    static lv_style_t distance_Style;
    lv_style_copy(&distance_Style, &lv_style_plain);
 8025920:	4938      	ldr	r1, [pc, #224]	; (8025a04 <RunMode_Distances+0x170>)
 8025922:	4839      	ldr	r0, [pc, #228]	; (8025a08 <RunMode_Distances+0x174>)
 8025924:	f7e5 fce8 	bl	800b2f8 <lv_style_copy>
    distance_Style.line.color = lv_color_make(214,23,32);
 8025928:	4c37      	ldr	r4, [pc, #220]	; (8025a08 <RunMode_Distances+0x174>)
 802592a:	2220      	movs	r2, #32
 802592c:	2117      	movs	r1, #23
 802592e:	20d6      	movs	r0, #214	; 0xd6
 8025930:	f7ff fc98 	bl	8025264 <lv_color_make>
 8025934:	86a0      	strh	r0, [r4, #52]	; 0x34
    distance_Style.line.width = 3;
 8025936:	4b34      	ldr	r3, [pc, #208]	; (8025a08 <RunMode_Distances+0x174>)
 8025938:	2203      	movs	r2, #3
 802593a:	86da      	strh	r2, [r3, #54]	; 0x36
    distance_Style.text.color = lv_color_make(214,23,32);
 802593c:	4c32      	ldr	r4, [pc, #200]	; (8025a08 <RunMode_Distances+0x174>)
 802593e:	2220      	movs	r2, #32
 8025940:	2117      	movs	r1, #23
 8025942:	20d6      	movs	r0, #214	; 0xd6
 8025944:	f7ff fc8e 	bl	8025264 <lv_color_make>
 8025948:	8420      	strh	r0, [r4, #32]
    distance_Style.text.font = &digital_font_for_number_30;
 802594a:	4b2f      	ldr	r3, [pc, #188]	; (8025a08 <RunMode_Distances+0x174>)
 802594c:	4a2f      	ldr	r2, [pc, #188]	; (8025a0c <RunMode_Distances+0x178>)
 802594e:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_distArc = lv_arc_create(lv_scr_act(), NULL);
 8025950:	f7ff fcc0 	bl	80252d4 <lv_scr_act>
 8025954:	4603      	mov	r3, r0
 8025956:	2100      	movs	r1, #0
 8025958:	4618      	mov	r0, r3
 802595a:	f7f1 fd9f 	bl	801749c <lv_arc_create>
 802595e:	4602      	mov	r2, r0
 8025960:	4b2b      	ldr	r3, [pc, #172]	; (8025a10 <RunMode_Distances+0x17c>)
 8025962:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_distArc, 60, 60);
 8025964:	4b2a      	ldr	r3, [pc, #168]	; (8025a10 <RunMode_Distances+0x17c>)
 8025966:	681b      	ldr	r3, [r3, #0]
 8025968:	223c      	movs	r2, #60	; 0x3c
 802596a:	213c      	movs	r1, #60	; 0x3c
 802596c:	4618      	mov	r0, r3
 802596e:	f7e3 f9dc 	bl	8008d2a <lv_obj_set_size>
    lv_arc_set_angles(RM_distArc, 0, 360);
 8025972:	4b27      	ldr	r3, [pc, #156]	; (8025a10 <RunMode_Distances+0x17c>)
 8025974:	681b      	ldr	r3, [r3, #0]
 8025976:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802597a:	2100      	movs	r1, #0
 802597c:	4618      	mov	r0, r3
 802597e:	f7f1 fe09 	bl	8017594 <lv_arc_set_angles>
    lv_arc_set_style(RM_distArc, LV_ARC_STYLE_MAIN, &distance_Style);
 8025982:	4b23      	ldr	r3, [pc, #140]	; (8025a10 <RunMode_Distances+0x17c>)
 8025984:	681b      	ldr	r3, [r3, #0]
 8025986:	4a20      	ldr	r2, [pc, #128]	; (8025a08 <RunMode_Distances+0x174>)
 8025988:	2100      	movs	r1, #0
 802598a:	4618      	mov	r0, r3
 802598c:	f7f1 fe2b 	bl	80175e6 <lv_arc_set_style>
    lv_obj_align(RM_distArc, NULL, LV_ALIGN_CENTER, 75, -60);
 8025990:	4b1f      	ldr	r3, [pc, #124]	; (8025a10 <RunMode_Distances+0x17c>)
 8025992:	6818      	ldr	r0, [r3, #0]
 8025994:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8025998:	9300      	str	r3, [sp, #0]
 802599a:	234b      	movs	r3, #75	; 0x4b
 802599c:	2200      	movs	r2, #0
 802599e:	2100      	movs	r1, #0
 80259a0:	f7e3 fa66 	bl	8008e70 <lv_obj_align>

    RM_distLbl = lv_label_create(lv_scr_act(), NULL);
 80259a4:	f7ff fc96 	bl	80252d4 <lv_scr_act>
 80259a8:	4603      	mov	r3, r0
 80259aa:	2100      	movs	r1, #0
 80259ac:	4618      	mov	r0, r3
 80259ae:	f7f6 fb77 	bl	801c0a0 <lv_label_create>
 80259b2:	4602      	mov	r2, r0
 80259b4:	4b17      	ldr	r3, [pc, #92]	; (8025a14 <RunMode_Distances+0x180>)
 80259b6:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_distLbl, LV_LABEL_STYLE_MAIN, &distance_Style);
 80259b8:	4b16      	ldr	r3, [pc, #88]	; (8025a14 <RunMode_Distances+0x180>)
 80259ba:	681b      	ldr	r3, [r3, #0]
 80259bc:	4a12      	ldr	r2, [pc, #72]	; (8025a08 <RunMode_Distances+0x174>)
 80259be:	2100      	movs	r1, #0
 80259c0:	4618      	mov	r0, r3
 80259c2:	f7ff fc92 	bl	80252ea <lv_label_set_style>
   	lv_label_set_text(RM_distLbl, "00.000");
 80259c6:	4b13      	ldr	r3, [pc, #76]	; (8025a14 <RunMode_Distances+0x180>)
 80259c8:	681b      	ldr	r3, [r3, #0]
 80259ca:	4913      	ldr	r1, [pc, #76]	; (8025a18 <RunMode_Distances+0x184>)
 80259cc:	4618      	mov	r0, r3
 80259ce:	f7f6 fc99 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(RM_distLbl, NULL, LV_ALIGN_CENTER, 75, -15);
 80259d2:	4b10      	ldr	r3, [pc, #64]	; (8025a14 <RunMode_Distances+0x180>)
 80259d4:	6818      	ldr	r0, [r3, #0]
 80259d6:	f06f 030e 	mvn.w	r3, #14
 80259da:	9300      	str	r3, [sp, #0]
 80259dc:	234b      	movs	r3, #75	; 0x4b
 80259de:	2200      	movs	r2, #0
 80259e0:	2100      	movs	r1, #0
 80259e2:	f7e3 fa45 	bl	8008e70 <lv_obj_align>
}
 80259e6:	bf00      	nop
 80259e8:	3714      	adds	r7, #20
 80259ea:	46bd      	mov	sp, r7
 80259ec:	bd90      	pop	{r4, r7, pc}
 80259ee:	bf00      	nop
 80259f0:	0803bee8 	.word	0x0803bee8
 80259f4:	0803c824 	.word	0x0803c824
 80259f8:	2001af08 	.word	0x2001af08
 80259fc:	0802cb2c 	.word	0x0802cb2c
 8025a00:	0802cb30 	.word	0x0802cb30
 8025a04:	2001ba10 	.word	0x2001ba10
 8025a08:	2001b038 	.word	0x2001b038
 8025a0c:	200027ec 	.word	0x200027ec
 8025a10:	2001bd8c 	.word	0x2001bd8c
 8025a14:	2001bd54 	.word	0x2001bd54
 8025a18:	0802cb38 	.word	0x0802cb38

08025a1c <RunModeScreen_Updater>:
/*This function using for update all updater functions*/
void RunModeScreen_Updater(lv_task_t *t){
 8025a1c:	b580      	push	{r7, lr}
 8025a1e:	b082      	sub	sp, #8
 8025a20:	af00      	add	r7, sp, #0
 8025a22:	6078      	str	r0, [r7, #4]
	if(RM_taskController){
 8025a24:	4b09      	ldr	r3, [pc, #36]	; (8025a4c <RunModeScreen_Updater+0x30>)
 8025a26:	781b      	ldrb	r3, [r3, #0]
 8025a28:	2b00      	cmp	r3, #0
 8025a2a:	d008      	beq.n	8025a3e <RunModeScreen_Updater+0x22>
		 RunMode_RunMode_Updater();
 8025a2c:	f000 f810 	bl	8025a50 <RunMode_RunMode_Updater>
		 RunMode_steps_angle_loader();
 8025a30:	f000 f8ba 	bl	8025ba8 <RunMode_steps_angle_loader>
		 RunMode_kCals_angle_loader();
 8025a34:	f000 f950 	bl	8025cd8 <RunMode_kCals_angle_loader>
		 RunMode_distances_angle_loader();
 8025a38:	f000 f9ea 	bl	8025e10 <RunMode_distances_angle_loader>
	}else lv_task_del(t);
}
 8025a3c:	e002      	b.n	8025a44 <RunModeScreen_Updater+0x28>
	}else lv_task_del(t);
 8025a3e:	6878      	ldr	r0, [r7, #4]
 8025a40:	f7f0 fff4 	bl	8016a2c <lv_task_del>
}
 8025a44:	bf00      	nop
 8025a46:	3708      	adds	r7, #8
 8025a48:	46bd      	mov	sp, r7
 8025a4a:	bd80      	pop	{r7, pc}
 8025a4c:	2001bd74 	.word	0x2001bd74

08025a50 <RunMode_RunMode_Updater>:
/*This function using for update to current label*/
void RunMode_RunMode_Updater(void){
 8025a50:	b5b0      	push	{r4, r5, r7, lr}
 8025a52:	b086      	sub	sp, #24
 8025a54:	af04      	add	r7, sp, #16
		if(0==RMtimeSetVal){
 8025a56:	4b48      	ldr	r3, [pc, #288]	; (8025b78 <RunMode_RunMode_Updater+0x128>)
 8025a58:	781b      	ldrb	r3, [r3, #0]
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	d17e      	bne.n	8025b5c <RunMode_RunMode_Updater+0x10c>
			uint16_t targetValTmp = RMtargetSeconds+(RMtargetMinutes*60)+(RMtargetHours*60*60);
 8025a5e:	4b47      	ldr	r3, [pc, #284]	; (8025b7c <RunMode_RunMode_Updater+0x12c>)
 8025a60:	781b      	ldrb	r3, [r3, #0]
 8025a62:	b29a      	uxth	r2, r3
 8025a64:	4b46      	ldr	r3, [pc, #280]	; (8025b80 <RunMode_RunMode_Updater+0x130>)
 8025a66:	781b      	ldrb	r3, [r3, #0]
 8025a68:	b29b      	uxth	r3, r3
 8025a6a:	4619      	mov	r1, r3
 8025a6c:	0109      	lsls	r1, r1, #4
 8025a6e:	1acb      	subs	r3, r1, r3
 8025a70:	4619      	mov	r1, r3
 8025a72:	0109      	lsls	r1, r1, #4
 8025a74:	1acb      	subs	r3, r1, r3
 8025a76:	011b      	lsls	r3, r3, #4
 8025a78:	b299      	uxth	r1, r3
 8025a7a:	4b42      	ldr	r3, [pc, #264]	; (8025b84 <RunMode_RunMode_Updater+0x134>)
 8025a7c:	781b      	ldrb	r3, [r3, #0]
 8025a7e:	b29b      	uxth	r3, r3
 8025a80:	4618      	mov	r0, r3
 8025a82:	0100      	lsls	r0, r0, #4
 8025a84:	1ac3      	subs	r3, r0, r3
 8025a86:	009b      	lsls	r3, r3, #2
 8025a88:	b29b      	uxth	r3, r3
 8025a8a:	440b      	add	r3, r1
 8025a8c:	b29b      	uxth	r3, r3
 8025a8e:	4413      	add	r3, r2
 8025a90:	80fb      	strh	r3, [r7, #6]
			uint16_t nowValTmp = RMseconds+(RMminutes*60)+(RMhours*60*60);
 8025a92:	4b3d      	ldr	r3, [pc, #244]	; (8025b88 <RunMode_RunMode_Updater+0x138>)
 8025a94:	781b      	ldrb	r3, [r3, #0]
 8025a96:	b29a      	uxth	r2, r3
 8025a98:	4b3c      	ldr	r3, [pc, #240]	; (8025b8c <RunMode_RunMode_Updater+0x13c>)
 8025a9a:	781b      	ldrb	r3, [r3, #0]
 8025a9c:	b29b      	uxth	r3, r3
 8025a9e:	4619      	mov	r1, r3
 8025aa0:	0109      	lsls	r1, r1, #4
 8025aa2:	1acb      	subs	r3, r1, r3
 8025aa4:	4619      	mov	r1, r3
 8025aa6:	0109      	lsls	r1, r1, #4
 8025aa8:	1acb      	subs	r3, r1, r3
 8025aaa:	011b      	lsls	r3, r3, #4
 8025aac:	b299      	uxth	r1, r3
 8025aae:	4b38      	ldr	r3, [pc, #224]	; (8025b90 <RunMode_RunMode_Updater+0x140>)
 8025ab0:	781b      	ldrb	r3, [r3, #0]
 8025ab2:	b29b      	uxth	r3, r3
 8025ab4:	4618      	mov	r0, r3
 8025ab6:	0100      	lsls	r0, r0, #4
 8025ab8:	1ac3      	subs	r3, r0, r3
 8025aba:	009b      	lsls	r3, r3, #2
 8025abc:	b29b      	uxth	r3, r3
 8025abe:	440b      	add	r3, r1
 8025ac0:	b29b      	uxth	r3, r3
 8025ac2:	4413      	add	r3, r2
 8025ac4:	80bb      	strh	r3, [r7, #4]
			uint8_t targetBarTmp = tos_Ratio(nowValTmp, 0,targetValTmp ,0, 100);
 8025ac6:	88bb      	ldrh	r3, [r7, #4]
 8025ac8:	4618      	mov	r0, r3
 8025aca:	f7da fd2b 	bl	8000524 <__aeabi_ui2d>
 8025ace:	4604      	mov	r4, r0
 8025ad0:	460d      	mov	r5, r1
 8025ad2:	88fb      	ldrh	r3, [r7, #6]
 8025ad4:	4618      	mov	r0, r3
 8025ad6:	f7da fd25 	bl	8000524 <__aeabi_ui2d>
 8025ada:	4602      	mov	r2, r0
 8025adc:	460b      	mov	r3, r1
 8025ade:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8025b68 <RunMode_RunMode_Updater+0x118>
 8025ae2:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8025b70 <RunMode_RunMode_Updater+0x120>
 8025ae6:	ec43 2b12 	vmov	d2, r2, r3
 8025aea:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8025b70 <RunMode_RunMode_Updater+0x120>
 8025aee:	ec45 4b10 	vmov	d0, r4, r5
 8025af2:	f003 fc9d 	bl	8029430 <tos_Ratio>
 8025af6:	ec54 3b10 	vmov	r3, r4, d0
 8025afa:	4618      	mov	r0, r3
 8025afc:	4621      	mov	r1, r4
 8025afe:	f7db f863 	bl	8000bc8 <__aeabi_d2uiz>
 8025b02:	4603      	mov	r3, r0
 8025b04:	70fb      	strb	r3, [r7, #3]
		    lv_bar_set_value(RM_targetTimeBar, targetBarTmp, LV_ANIM_OFF);
 8025b06:	4b23      	ldr	r3, [pc, #140]	; (8025b94 <RunMode_RunMode_Updater+0x144>)
 8025b08:	681b      	ldr	r3, [r3, #0]
 8025b0a:	78fa      	ldrb	r2, [r7, #3]
 8025b0c:	b211      	sxth	r1, r2
 8025b0e:	2200      	movs	r2, #0
 8025b10:	4618      	mov	r0, r3
 8025b12:	f7f2 f839 	bl	8017b88 <lv_bar_set_value>

		snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8025b16:	4b1d      	ldr	r3, [pc, #116]	; (8025b8c <RunMode_RunMode_Updater+0x13c>)
 8025b18:	781b      	ldrb	r3, [r3, #0]
 8025b1a:	4618      	mov	r0, r3
 8025b1c:	4b1c      	ldr	r3, [pc, #112]	; (8025b90 <RunMode_RunMode_Updater+0x140>)
 8025b1e:	781b      	ldrb	r3, [r3, #0]
 8025b20:	461a      	mov	r2, r3
 8025b22:	4b19      	ldr	r3, [pc, #100]	; (8025b88 <RunMode_RunMode_Updater+0x138>)
 8025b24:	781b      	ldrb	r3, [r3, #0]
 8025b26:	4619      	mov	r1, r3
 8025b28:	4b1b      	ldr	r3, [pc, #108]	; (8025b98 <RunMode_RunMode_Updater+0x148>)
 8025b2a:	881b      	ldrh	r3, [r3, #0]
 8025b2c:	9302      	str	r3, [sp, #8]
 8025b2e:	9101      	str	r1, [sp, #4]
 8025b30:	9200      	str	r2, [sp, #0]
 8025b32:	4603      	mov	r3, r0
 8025b34:	4a19      	ldr	r2, [pc, #100]	; (8025b9c <RunMode_RunMode_Updater+0x14c>)
 8025b36:	2140      	movs	r1, #64	; 0x40
 8025b38:	4819      	ldr	r0, [pc, #100]	; (8025ba0 <RunMode_RunMode_Updater+0x150>)
 8025b3a:	f004 fe63 	bl	802a804 <sniprintf>
				RMhours,RMminutes,RMseconds,RMmilisecs);
		lv_label_set_text(RM_Lbl, runModeBuffer);
 8025b3e:	4b19      	ldr	r3, [pc, #100]	; (8025ba4 <RunMode_RunMode_Updater+0x154>)
 8025b40:	681b      	ldr	r3, [r3, #0]
 8025b42:	4917      	ldr	r1, [pc, #92]	; (8025ba0 <RunMode_RunMode_Updater+0x150>)
 8025b44:	4618      	mov	r0, r3
 8025b46:	f7f6 fbdd 	bl	801c304 <lv_label_set_text>
	 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 8025b4a:	4b16      	ldr	r3, [pc, #88]	; (8025ba4 <RunMode_RunMode_Updater+0x154>)
 8025b4c:	6818      	ldr	r0, [r3, #0]
 8025b4e:	2328      	movs	r3, #40	; 0x28
 8025b50:	9300      	str	r3, [sp, #0]
 8025b52:	2300      	movs	r3, #0
 8025b54:	2200      	movs	r2, #0
 8025b56:	2100      	movs	r1, #0
 8025b58:	f7e3 f98a 	bl	8008e70 <lv_obj_align>
	}
}
 8025b5c:	bf00      	nop
 8025b5e:	3708      	adds	r7, #8
 8025b60:	46bd      	mov	sp, r7
 8025b62:	bdb0      	pop	{r4, r5, r7, pc}
 8025b64:	f3af 8000 	nop.w
 8025b68:	00000000 	.word	0x00000000
 8025b6c:	40590000 	.word	0x40590000
	...
 8025b78:	2001bd50 	.word	0x2001bd50
 8025b7c:	2001bd80 	.word	0x2001bd80
 8025b80:	2001bd6c 	.word	0x2001bd6c
 8025b84:	2001bd75 	.word	0x2001bd75
 8025b88:	2001bd58 	.word	0x2001bd58
 8025b8c:	2001bd05 	.word	0x2001bd05
 8025b90:	2001bd4c 	.word	0x2001bd4c
 8025b94:	2001bd68 	.word	0x2001bd68
 8025b98:	2001bd94 	.word	0x2001bd94
 8025b9c:	0802cae4 	.word	0x0802cae4
 8025ba0:	2001bd0c 	.word	0x2001bd0c
 8025ba4:	2001bd08 	.word	0x2001bd08

08025ba8 <RunMode_steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void RunMode_steps_angle_loader(void)
{	    snprintf(runModeBuffer,8, "%05d",(RMsteps-RMstepsBeff));
 8025ba8:	b590      	push	{r4, r7, lr}
 8025baa:	b085      	sub	sp, #20
 8025bac:	af02      	add	r7, sp, #8
 8025bae:	4b42      	ldr	r3, [pc, #264]	; (8025cb8 <RunMode_steps_angle_loader+0x110>)
 8025bb0:	881b      	ldrh	r3, [r3, #0]
 8025bb2:	461a      	mov	r2, r3
 8025bb4:	4b41      	ldr	r3, [pc, #260]	; (8025cbc <RunMode_steps_angle_loader+0x114>)
 8025bb6:	881b      	ldrh	r3, [r3, #0]
 8025bb8:	1ad3      	subs	r3, r2, r3
 8025bba:	4a41      	ldr	r2, [pc, #260]	; (8025cc0 <RunMode_steps_angle_loader+0x118>)
 8025bbc:	2108      	movs	r1, #8
 8025bbe:	4841      	ldr	r0, [pc, #260]	; (8025cc4 <RunMode_steps_angle_loader+0x11c>)
 8025bc0:	f004 fe20 	bl	802a804 <sniprintf>
 		lv_label_set_text(RM_stepsLbl, runModeBuffer);
 8025bc4:	4b40      	ldr	r3, [pc, #256]	; (8025cc8 <RunMode_steps_angle_loader+0x120>)
 8025bc6:	681b      	ldr	r3, [r3, #0]
 8025bc8:	493e      	ldr	r1, [pc, #248]	; (8025cc4 <RunMode_steps_angle_loader+0x11c>)
 8025bca:	4618      	mov	r0, r3
 8025bcc:	f7f6 fb9a 	bl	801c304 <lv_label_set_text>
 		lv_obj_align(RM_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -15);
 8025bd0:	4b3d      	ldr	r3, [pc, #244]	; (8025cc8 <RunMode_steps_angle_loader+0x120>)
 8025bd2:	6818      	ldr	r0, [r3, #0]
 8025bd4:	f06f 030e 	mvn.w	r3, #14
 8025bd8:	9300      	str	r3, [sp, #0]
 8025bda:	2300      	movs	r3, #0
 8025bdc:	2200      	movs	r2, #0
 8025bde:	2100      	movs	r1, #0
 8025be0:	f7e3 f946 	bl	8008e70 <lv_obj_align>

 		if((RMsteps-RMstepsBeff)<=10000){
 8025be4:	4b34      	ldr	r3, [pc, #208]	; (8025cb8 <RunMode_steps_angle_loader+0x110>)
 8025be6:	881b      	ldrh	r3, [r3, #0]
 8025be8:	461a      	mov	r2, r3
 8025bea:	4b34      	ldr	r3, [pc, #208]	; (8025cbc <RunMode_steps_angle_loader+0x114>)
 8025bec:	881b      	ldrh	r3, [r3, #0]
 8025bee:	1ad3      	subs	r3, r2, r3
 8025bf0:	f242 7210 	movw	r2, #10000	; 0x2710
 8025bf4:	4293      	cmp	r3, r2
 8025bf6:	dc4f      	bgt.n	8025c98 <RunMode_steps_angle_loader+0xf0>
 			double stepsTemp = tos_Ratio((RMsteps-RMstepsBeff), 0, 10000, 0, 359);
 8025bf8:	4b2f      	ldr	r3, [pc, #188]	; (8025cb8 <RunMode_steps_angle_loader+0x110>)
 8025bfa:	881b      	ldrh	r3, [r3, #0]
 8025bfc:	461a      	mov	r2, r3
 8025bfe:	4b2f      	ldr	r3, [pc, #188]	; (8025cbc <RunMode_steps_angle_loader+0x114>)
 8025c00:	881b      	ldrh	r3, [r3, #0]
 8025c02:	1ad3      	subs	r3, r2, r3
 8025c04:	4618      	mov	r0, r3
 8025c06:	f7da fc9d 	bl	8000544 <__aeabi_i2d>
 8025c0a:	4603      	mov	r3, r0
 8025c0c:	460c      	mov	r4, r1
 8025c0e:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8025ca0 <RunMode_steps_angle_loader+0xf8>
 8025c12:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8025ca8 <RunMode_steps_angle_loader+0x100>
 8025c16:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8025cb0 <RunMode_steps_angle_loader+0x108>
 8025c1a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8025ca8 <RunMode_steps_angle_loader+0x100>
 8025c1e:	ec44 3b10 	vmov	d0, r3, r4
 8025c22:	f003 fc05 	bl	8029430 <tos_Ratio>
 8025c26:	ed87 0b00 	vstr	d0, [r7]
 			if(stepsTemp < 180) lv_arc_set_angles(RM_stepsArc, 180-stepsTemp ,180);
 8025c2a:	f04f 0200 	mov.w	r2, #0
 8025c2e:	4b27      	ldr	r3, [pc, #156]	; (8025ccc <RunMode_steps_angle_loader+0x124>)
 8025c30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8025c34:	f7da ff62 	bl	8000afc <__aeabi_dcmplt>
 8025c38:	4603      	mov	r3, r0
 8025c3a:	2b00      	cmp	r3, #0
 8025c3c:	d016      	beq.n	8025c6c <RunMode_steps_angle_loader+0xc4>
 8025c3e:	4b24      	ldr	r3, [pc, #144]	; (8025cd0 <RunMode_steps_angle_loader+0x128>)
 8025c40:	681c      	ldr	r4, [r3, #0]
 8025c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025c46:	f04f 0000 	mov.w	r0, #0
 8025c4a:	4920      	ldr	r1, [pc, #128]	; (8025ccc <RunMode_steps_angle_loader+0x124>)
 8025c4c:	f7da fb2c 	bl	80002a8 <__aeabi_dsub>
 8025c50:	4602      	mov	r2, r0
 8025c52:	460b      	mov	r3, r1
 8025c54:	4610      	mov	r0, r2
 8025c56:	4619      	mov	r1, r3
 8025c58:	f7da ffb6 	bl	8000bc8 <__aeabi_d2uiz>
 8025c5c:	4603      	mov	r3, r0
 8025c5e:	b29b      	uxth	r3, r3
 8025c60:	22b4      	movs	r2, #180	; 0xb4
 8025c62:	4619      	mov	r1, r3
 8025c64:	4620      	mov	r0, r4
 8025c66:	f7f1 fc95 	bl	8017594 <lv_arc_set_angles>
 			    else lv_arc_set_angles(RM_stepsArc, 540-stepsTemp ,180);
 		}
}
 8025c6a:	e015      	b.n	8025c98 <RunMode_steps_angle_loader+0xf0>
 			    else lv_arc_set_angles(RM_stepsArc, 540-stepsTemp ,180);
 8025c6c:	4b18      	ldr	r3, [pc, #96]	; (8025cd0 <RunMode_steps_angle_loader+0x128>)
 8025c6e:	681c      	ldr	r4, [r3, #0]
 8025c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025c74:	f04f 0000 	mov.w	r0, #0
 8025c78:	4916      	ldr	r1, [pc, #88]	; (8025cd4 <RunMode_steps_angle_loader+0x12c>)
 8025c7a:	f7da fb15 	bl	80002a8 <__aeabi_dsub>
 8025c7e:	4602      	mov	r2, r0
 8025c80:	460b      	mov	r3, r1
 8025c82:	4610      	mov	r0, r2
 8025c84:	4619      	mov	r1, r3
 8025c86:	f7da ff9f 	bl	8000bc8 <__aeabi_d2uiz>
 8025c8a:	4603      	mov	r3, r0
 8025c8c:	b29b      	uxth	r3, r3
 8025c8e:	22b4      	movs	r2, #180	; 0xb4
 8025c90:	4619      	mov	r1, r3
 8025c92:	4620      	mov	r0, r4
 8025c94:	f7f1 fc7e 	bl	8017594 <lv_arc_set_angles>
}
 8025c98:	bf00      	nop
 8025c9a:	370c      	adds	r7, #12
 8025c9c:	46bd      	mov	sp, r7
 8025c9e:	bd90      	pop	{r4, r7, pc}
 8025ca0:	00000000 	.word	0x00000000
 8025ca4:	40767000 	.word	0x40767000
	...
 8025cb4:	40c38800 	.word	0x40c38800
 8025cb8:	2001bd92 	.word	0x2001bd92
 8025cbc:	2001bd8a 	.word	0x2001bd8a
 8025cc0:	0802cb40 	.word	0x0802cb40
 8025cc4:	2001bd0c 	.word	0x2001bd0c
 8025cc8:	2001bd5c 	.word	0x2001bd5c
 8025ccc:	40668000 	.word	0x40668000
 8025cd0:	2001bd7c 	.word	0x2001bd7c
 8025cd4:	4080e000 	.word	0x4080e000

08025cd8 <RunMode_kCals_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void RunMode_kCals_angle_loader(void)
{ 		snprintf(runModeBuffer,8, "%05d",(RMkCals-RMkCalsBeff));
 8025cd8:	b590      	push	{r4, r7, lr}
 8025cda:	b085      	sub	sp, #20
 8025cdc:	af02      	add	r7, sp, #8
 8025cde:	4b44      	ldr	r3, [pc, #272]	; (8025df0 <RunMode_kCals_angle_loader+0x118>)
 8025ce0:	881b      	ldrh	r3, [r3, #0]
 8025ce2:	461a      	mov	r2, r3
 8025ce4:	4b43      	ldr	r3, [pc, #268]	; (8025df4 <RunMode_kCals_angle_loader+0x11c>)
 8025ce6:	881b      	ldrh	r3, [r3, #0]
 8025ce8:	1ad3      	subs	r3, r2, r3
 8025cea:	4a43      	ldr	r2, [pc, #268]	; (8025df8 <RunMode_kCals_angle_loader+0x120>)
 8025cec:	2108      	movs	r1, #8
 8025cee:	4843      	ldr	r0, [pc, #268]	; (8025dfc <RunMode_kCals_angle_loader+0x124>)
 8025cf0:	f004 fd88 	bl	802a804 <sniprintf>
 		lv_label_set_text(RM_kCalsLbl, runModeBuffer);
 8025cf4:	4b42      	ldr	r3, [pc, #264]	; (8025e00 <RunMode_kCals_angle_loader+0x128>)
 8025cf6:	681b      	ldr	r3, [r3, #0]
 8025cf8:	4940      	ldr	r1, [pc, #256]	; (8025dfc <RunMode_kCals_angle_loader+0x124>)
 8025cfa:	4618      	mov	r0, r3
 8025cfc:	f7f6 fb02 	bl	801c304 <lv_label_set_text>
 	   	lv_obj_align(RM_kCalsLbl, NULL, LV_ALIGN_CENTER, -75, -15);
 8025d00:	4b3f      	ldr	r3, [pc, #252]	; (8025e00 <RunMode_kCals_angle_loader+0x128>)
 8025d02:	6818      	ldr	r0, [r3, #0]
 8025d04:	f06f 030e 	mvn.w	r3, #14
 8025d08:	9300      	str	r3, [sp, #0]
 8025d0a:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8025d0e:	2200      	movs	r2, #0
 8025d10:	2100      	movs	r1, #0
 8025d12:	f7e3 f8ad 	bl	8008e70 <lv_obj_align>

 	   	if((RMkCals-RMkCalsBeff)<=10000){
 8025d16:	4b36      	ldr	r3, [pc, #216]	; (8025df0 <RunMode_kCals_angle_loader+0x118>)
 8025d18:	881b      	ldrh	r3, [r3, #0]
 8025d1a:	461a      	mov	r2, r3
 8025d1c:	4b35      	ldr	r3, [pc, #212]	; (8025df4 <RunMode_kCals_angle_loader+0x11c>)
 8025d1e:	881b      	ldrh	r3, [r3, #0]
 8025d20:	1ad3      	subs	r3, r2, r3
 8025d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8025d26:	4293      	cmp	r3, r2
 8025d28:	dc4f      	bgt.n	8025dca <RunMode_kCals_angle_loader+0xf2>
 			double kCalsTemp = tos_Ratio((RMkCals-RMkCalsBeff), 0, 10000, 0, 359);
 8025d2a:	4b31      	ldr	r3, [pc, #196]	; (8025df0 <RunMode_kCals_angle_loader+0x118>)
 8025d2c:	881b      	ldrh	r3, [r3, #0]
 8025d2e:	461a      	mov	r2, r3
 8025d30:	4b30      	ldr	r3, [pc, #192]	; (8025df4 <RunMode_kCals_angle_loader+0x11c>)
 8025d32:	881b      	ldrh	r3, [r3, #0]
 8025d34:	1ad3      	subs	r3, r2, r3
 8025d36:	4618      	mov	r0, r3
 8025d38:	f7da fc04 	bl	8000544 <__aeabi_i2d>
 8025d3c:	4603      	mov	r3, r0
 8025d3e:	460c      	mov	r4, r1
 8025d40:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8025dd8 <RunMode_kCals_angle_loader+0x100>
 8025d44:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8025de0 <RunMode_kCals_angle_loader+0x108>
 8025d48:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8025de8 <RunMode_kCals_angle_loader+0x110>
 8025d4c:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8025de0 <RunMode_kCals_angle_loader+0x108>
 8025d50:	ec44 3b10 	vmov	d0, r3, r4
 8025d54:	f003 fb6c 	bl	8029430 <tos_Ratio>
 8025d58:	ed87 0b00 	vstr	d0, [r7]
 			if(kCalsTemp < 180) lv_arc_set_angles(RM_kCalsArc, 180-kCalsTemp ,180);
 8025d5c:	f04f 0200 	mov.w	r2, #0
 8025d60:	4b28      	ldr	r3, [pc, #160]	; (8025e04 <RunMode_kCals_angle_loader+0x12c>)
 8025d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8025d66:	f7da fec9 	bl	8000afc <__aeabi_dcmplt>
 8025d6a:	4603      	mov	r3, r0
 8025d6c:	2b00      	cmp	r3, #0
 8025d6e:	d016      	beq.n	8025d9e <RunMode_kCals_angle_loader+0xc6>
 8025d70:	4b25      	ldr	r3, [pc, #148]	; (8025e08 <RunMode_kCals_angle_loader+0x130>)
 8025d72:	681c      	ldr	r4, [r3, #0]
 8025d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025d78:	f04f 0000 	mov.w	r0, #0
 8025d7c:	4921      	ldr	r1, [pc, #132]	; (8025e04 <RunMode_kCals_angle_loader+0x12c>)
 8025d7e:	f7da fa93 	bl	80002a8 <__aeabi_dsub>
 8025d82:	4602      	mov	r2, r0
 8025d84:	460b      	mov	r3, r1
 8025d86:	4610      	mov	r0, r2
 8025d88:	4619      	mov	r1, r3
 8025d8a:	f7da ff1d 	bl	8000bc8 <__aeabi_d2uiz>
 8025d8e:	4603      	mov	r3, r0
 8025d90:	b29b      	uxth	r3, r3
 8025d92:	22b4      	movs	r2, #180	; 0xb4
 8025d94:	4619      	mov	r1, r3
 8025d96:	4620      	mov	r0, r4
 8025d98:	f7f1 fbfc 	bl	8017594 <lv_arc_set_angles>
 			    else lv_arc_set_angles(RM_kCalsArc, 540-kCalsTemp ,180);
 	   	}
}
 8025d9c:	e015      	b.n	8025dca <RunMode_kCals_angle_loader+0xf2>
 			    else lv_arc_set_angles(RM_kCalsArc, 540-kCalsTemp ,180);
 8025d9e:	4b1a      	ldr	r3, [pc, #104]	; (8025e08 <RunMode_kCals_angle_loader+0x130>)
 8025da0:	681c      	ldr	r4, [r3, #0]
 8025da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025da6:	f04f 0000 	mov.w	r0, #0
 8025daa:	4918      	ldr	r1, [pc, #96]	; (8025e0c <RunMode_kCals_angle_loader+0x134>)
 8025dac:	f7da fa7c 	bl	80002a8 <__aeabi_dsub>
 8025db0:	4602      	mov	r2, r0
 8025db2:	460b      	mov	r3, r1
 8025db4:	4610      	mov	r0, r2
 8025db6:	4619      	mov	r1, r3
 8025db8:	f7da ff06 	bl	8000bc8 <__aeabi_d2uiz>
 8025dbc:	4603      	mov	r3, r0
 8025dbe:	b29b      	uxth	r3, r3
 8025dc0:	22b4      	movs	r2, #180	; 0xb4
 8025dc2:	4619      	mov	r1, r3
 8025dc4:	4620      	mov	r0, r4
 8025dc6:	f7f1 fbe5 	bl	8017594 <lv_arc_set_angles>
}
 8025dca:	bf00      	nop
 8025dcc:	370c      	adds	r7, #12
 8025dce:	46bd      	mov	sp, r7
 8025dd0:	bd90      	pop	{r4, r7, pc}
 8025dd2:	bf00      	nop
 8025dd4:	f3af 8000 	nop.w
 8025dd8:	00000000 	.word	0x00000000
 8025ddc:	40767000 	.word	0x40767000
	...
 8025dec:	40c38800 	.word	0x40c38800
 8025df0:	2001bd4e 	.word	0x2001bd4e
 8025df4:	2001bd64 	.word	0x2001bd64
 8025df8:	0802cb40 	.word	0x0802cb40
 8025dfc:	2001bd0c 	.word	0x2001bd0c
 8025e00:	2001bd78 	.word	0x2001bd78
 8025e04:	40668000 	.word	0x40668000
 8025e08:	2001bd84 	.word	0x2001bd84
 8025e0c:	4080e000 	.word	0x4080e000

08025e10 <RunMode_distances_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void RunMode_distances_angle_loader(void){
 8025e10:	b590      	push	{r4, r7, lr}
 8025e12:	b089      	sub	sp, #36	; 0x24
 8025e14:	af02      	add	r7, sp, #8
		RMdistances=(float)tos_distance_Calc(RM_unitType,RMsteps);
 8025e16:	4b54      	ldr	r3, [pc, #336]	; (8025f68 <RunMode_distances_angle_loader+0x158>)
 8025e18:	781a      	ldrb	r2, [r3, #0]
 8025e1a:	4b54      	ldr	r3, [pc, #336]	; (8025f6c <RunMode_distances_angle_loader+0x15c>)
 8025e1c:	881b      	ldrh	r3, [r3, #0]
 8025e1e:	4619      	mov	r1, r3
 8025e20:	4610      	mov	r0, r2
 8025e22:	f003 fb81 	bl	8029528 <tos_distance_Calc>
 8025e26:	eef0 7a40 	vmov.f32	s15, s0
 8025e2a:	4b51      	ldr	r3, [pc, #324]	; (8025f70 <RunMode_distances_angle_loader+0x160>)
 8025e2c:	edc3 7a00 	vstr	s15, [r3]
		float distTmp =RMdistances-RMdistancesBeff;
 8025e30:	4b4f      	ldr	r3, [pc, #316]	; (8025f70 <RunMode_distances_angle_loader+0x160>)
 8025e32:	ed93 7a00 	vldr	s14, [r3]
 8025e36:	4b4f      	ldr	r3, [pc, #316]	; (8025f74 <RunMode_distances_angle_loader+0x164>)
 8025e38:	edd3 7a00 	vldr	s15, [r3]
 8025e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025e40:	edc7 7a05 	vstr	s15, [r7, #20]
		uint16_t tmp1=distTmp; float tmp2=distTmp-tmp1; tmp2*=1000;
 8025e44:	edd7 7a05 	vldr	s15, [r7, #20]
 8025e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8025e4c:	ee17 3a90 	vmov	r3, s15
 8025e50:	827b      	strh	r3, [r7, #18]
 8025e52:	8a7b      	ldrh	r3, [r7, #18]
 8025e54:	ee07 3a90 	vmov	s15, r3
 8025e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025e5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8025e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025e64:	edc7 7a03 	vstr	s15, [r7, #12]
 8025e68:	edd7 7a03 	vldr	s15, [r7, #12]
 8025e6c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8025f78 <RunMode_distances_angle_loader+0x168>
 8025e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025e74:	edc7 7a03 	vstr	s15, [r7, #12]
	 	snprintf(runModeBuffer,8, "%02d.%03d",tmp1,(uint16_t)tmp2);
 8025e78:	8a7b      	ldrh	r3, [r7, #18]
 8025e7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8025e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8025e82:	ee17 2a90 	vmov	r2, s15
 8025e86:	b292      	uxth	r2, r2
 8025e88:	9200      	str	r2, [sp, #0]
 8025e8a:	4a3c      	ldr	r2, [pc, #240]	; (8025f7c <RunMode_distances_angle_loader+0x16c>)
 8025e8c:	2108      	movs	r1, #8
 8025e8e:	483c      	ldr	r0, [pc, #240]	; (8025f80 <RunMode_distances_angle_loader+0x170>)
 8025e90:	f004 fcb8 	bl	802a804 <sniprintf>
	 	lv_label_set_text(RM_distLbl, runModeBuffer);
 8025e94:	4b3b      	ldr	r3, [pc, #236]	; (8025f84 <RunMode_distances_angle_loader+0x174>)
 8025e96:	681b      	ldr	r3, [r3, #0]
 8025e98:	4939      	ldr	r1, [pc, #228]	; (8025f80 <RunMode_distances_angle_loader+0x170>)
 8025e9a:	4618      	mov	r0, r3
 8025e9c:	f7f6 fa32 	bl	801c304 <lv_label_set_text>
	 	lv_obj_align(RM_distLbl, NULL, LV_ALIGN_CENTER, 75,-15);
 8025ea0:	4b38      	ldr	r3, [pc, #224]	; (8025f84 <RunMode_distances_angle_loader+0x174>)
 8025ea2:	6818      	ldr	r0, [r3, #0]
 8025ea4:	f06f 030e 	mvn.w	r3, #14
 8025ea8:	9300      	str	r3, [sp, #0]
 8025eaa:	234b      	movs	r3, #75	; 0x4b
 8025eac:	2200      	movs	r2, #0
 8025eae:	2100      	movs	r1, #0
 8025eb0:	f7e2 ffde 	bl	8008e70 <lv_obj_align>

 	   	double distanceTemp = tos_Ratio(distTmp, 0, 1000, 0, 359);
 8025eb4:	6978      	ldr	r0, [r7, #20]
 8025eb6:	f7da fb57 	bl	8000568 <__aeabi_f2d>
 8025eba:	4603      	mov	r3, r0
 8025ebc:	460c      	mov	r4, r1
 8025ebe:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8025f50 <RunMode_distances_angle_loader+0x140>
 8025ec2:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8025f58 <RunMode_distances_angle_loader+0x148>
 8025ec6:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8025f60 <RunMode_distances_angle_loader+0x150>
 8025eca:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8025f58 <RunMode_distances_angle_loader+0x148>
 8025ece:	ec44 3b10 	vmov	d0, r3, r4
 8025ed2:	f003 faad 	bl	8029430 <tos_Ratio>
 8025ed6:	ed87 0b00 	vstr	d0, [r7]
 		if(distanceTemp < 180) lv_arc_set_angles(RM_distArc, 180-distanceTemp ,180);
 8025eda:	f04f 0200 	mov.w	r2, #0
 8025ede:	4b2a      	ldr	r3, [pc, #168]	; (8025f88 <RunMode_distances_angle_loader+0x178>)
 8025ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8025ee4:	f7da fe0a 	bl	8000afc <__aeabi_dcmplt>
 8025ee8:	4603      	mov	r3, r0
 8025eea:	2b00      	cmp	r3, #0
 8025eec:	d016      	beq.n	8025f1c <RunMode_distances_angle_loader+0x10c>
 8025eee:	4b27      	ldr	r3, [pc, #156]	; (8025f8c <RunMode_distances_angle_loader+0x17c>)
 8025ef0:	681c      	ldr	r4, [r3, #0]
 8025ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025ef6:	f04f 0000 	mov.w	r0, #0
 8025efa:	4923      	ldr	r1, [pc, #140]	; (8025f88 <RunMode_distances_angle_loader+0x178>)
 8025efc:	f7da f9d4 	bl	80002a8 <__aeabi_dsub>
 8025f00:	4602      	mov	r2, r0
 8025f02:	460b      	mov	r3, r1
 8025f04:	4610      	mov	r0, r2
 8025f06:	4619      	mov	r1, r3
 8025f08:	f7da fe5e 	bl	8000bc8 <__aeabi_d2uiz>
 8025f0c:	4603      	mov	r3, r0
 8025f0e:	b29b      	uxth	r3, r3
 8025f10:	22b4      	movs	r2, #180	; 0xb4
 8025f12:	4619      	mov	r1, r3
 8025f14:	4620      	mov	r0, r4
 8025f16:	f7f1 fb3d 	bl	8017594 <lv_arc_set_angles>
 			else lv_arc_set_angles(RM_distArc, 540-distanceTemp ,180);
}
 8025f1a:	e015      	b.n	8025f48 <RunMode_distances_angle_loader+0x138>
 			else lv_arc_set_angles(RM_distArc, 540-distanceTemp ,180);
 8025f1c:	4b1b      	ldr	r3, [pc, #108]	; (8025f8c <RunMode_distances_angle_loader+0x17c>)
 8025f1e:	681c      	ldr	r4, [r3, #0]
 8025f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025f24:	f04f 0000 	mov.w	r0, #0
 8025f28:	4919      	ldr	r1, [pc, #100]	; (8025f90 <RunMode_distances_angle_loader+0x180>)
 8025f2a:	f7da f9bd 	bl	80002a8 <__aeabi_dsub>
 8025f2e:	4602      	mov	r2, r0
 8025f30:	460b      	mov	r3, r1
 8025f32:	4610      	mov	r0, r2
 8025f34:	4619      	mov	r1, r3
 8025f36:	f7da fe47 	bl	8000bc8 <__aeabi_d2uiz>
 8025f3a:	4603      	mov	r3, r0
 8025f3c:	b29b      	uxth	r3, r3
 8025f3e:	22b4      	movs	r2, #180	; 0xb4
 8025f40:	4619      	mov	r1, r3
 8025f42:	4620      	mov	r0, r4
 8025f44:	f7f1 fb26 	bl	8017594 <lv_arc_set_angles>
}
 8025f48:	bf00      	nop
 8025f4a:	371c      	adds	r7, #28
 8025f4c:	46bd      	mov	sp, r7
 8025f4e:	bd90      	pop	{r4, r7, pc}
 8025f50:	00000000 	.word	0x00000000
 8025f54:	40767000 	.word	0x40767000
	...
 8025f64:	408f4000 	.word	0x408f4000
 8025f68:	2001bd04 	.word	0x2001bd04
 8025f6c:	2001bd92 	.word	0x2001bd92
 8025f70:	2001bd70 	.word	0x2001bd70
 8025f74:	2001bd60 	.word	0x2001bd60
 8025f78:	447a0000 	.word	0x447a0000
 8025f7c:	0802cb48 	.word	0x0802cb48
 8025f80:	2001bd0c 	.word	0x2001bd0c
 8025f84:	2001bd54 	.word	0x2001bd54
 8025f88:	40668000 	.word	0x40668000
 8025f8c:	2001bd8c 	.word	0x2001bd8c
 8025f90:	4080e000 	.word	0x4080e000

08025f94 <RunMode_ButtonController>:
/*This function using for control to buttons*/
void RunMode_ButtonController(void){
 8025f94:	b580      	push	{r7, lr}
 8025f96:	af00      	add	r7, sp, #0
	if(2==Rm_leftBtnListen){
 8025f98:	4b2c      	ldr	r3, [pc, #176]	; (802604c <RunMode_ButtonController+0xb8>)
 8025f9a:	781b      	ldrb	r3, [r3, #0]
 8025f9c:	2b02      	cmp	r3, #2
 8025f9e:	d101      	bne.n	8025fa4 <RunMode_ButtonController+0x10>
		  //Time Set Open/Close
		  RunMode_RunTimeSetVal();
 8025fa0:	f000 f8cc 	bl	802613c <RunMode_RunTimeSetVal>
	  }
	  if(2==Rm_rightBtnListen){
 8025fa4:	4b2a      	ldr	r3, [pc, #168]	; (8026050 <RunMode_ButtonController+0xbc>)
 8025fa6:	781b      	ldrb	r3, [r3, #0]
 8025fa8:	2b02      	cmp	r3, #2
 8025faa:	d11c      	bne.n	8025fe6 <RunMode_ButtonController+0x52>
		  //Clear and stop
		   RMmilisecs=0; RMfirstVAl=true;
 8025fac:	4b29      	ldr	r3, [pc, #164]	; (8026054 <RunMode_ButtonController+0xc0>)
 8025fae:	2200      	movs	r2, #0
 8025fb0:	801a      	strh	r2, [r3, #0]
 8025fb2:	4b29      	ldr	r3, [pc, #164]	; (8026058 <RunMode_ButtonController+0xc4>)
 8025fb4:	2201      	movs	r2, #1
 8025fb6:	701a      	strb	r2, [r3, #0]
			  RMseconds=0;RMminutes=0;RMhours=0;RMtargetSeconds=0;RMtargetMinutes=0;RMtargetHours=0;
 8025fb8:	4b28      	ldr	r3, [pc, #160]	; (802605c <RunMode_ButtonController+0xc8>)
 8025fba:	2200      	movs	r2, #0
 8025fbc:	701a      	strb	r2, [r3, #0]
 8025fbe:	4b28      	ldr	r3, [pc, #160]	; (8026060 <RunMode_ButtonController+0xcc>)
 8025fc0:	2200      	movs	r2, #0
 8025fc2:	701a      	strb	r2, [r3, #0]
 8025fc4:	4b27      	ldr	r3, [pc, #156]	; (8026064 <RunMode_ButtonController+0xd0>)
 8025fc6:	2200      	movs	r2, #0
 8025fc8:	701a      	strb	r2, [r3, #0]
 8025fca:	4b27      	ldr	r3, [pc, #156]	; (8026068 <RunMode_ButtonController+0xd4>)
 8025fcc:	2200      	movs	r2, #0
 8025fce:	701a      	strb	r2, [r3, #0]
 8025fd0:	4b26      	ldr	r3, [pc, #152]	; (802606c <RunMode_ButtonController+0xd8>)
 8025fd2:	2200      	movs	r2, #0
 8025fd4:	701a      	strb	r2, [r3, #0]
 8025fd6:	4b26      	ldr	r3, [pc, #152]	; (8026070 <RunMode_ButtonController+0xdc>)
 8025fd8:	2200      	movs	r2, #0
 8025fda:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 8025fdc:	4825      	ldr	r0, [pc, #148]	; (8026074 <RunMode_ButtonController+0xe0>)
 8025fde:	f7dd ff02 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
			  RunMode_RunTimeLblController();
 8025fe2:	f000 f907 	bl	80261f4 <RunMode_RunTimeLblController>
	  }
	 if(1==Rm_leftBtnListen) {
 8025fe6:	4b19      	ldr	r3, [pc, #100]	; (802604c <RunMode_ButtonController+0xb8>)
 8025fe8:	781b      	ldrb	r3, [r3, #0]
 8025fea:	2b01      	cmp	r3, #1
 8025fec:	d101      	bne.n	8025ff2 <RunMode_ButtonController+0x5e>
			  //Time Set
			  RunMode_RunTimeUpdateVal();
 8025fee:	f000 f8bb 	bl	8026168 <RunMode_RunTimeUpdateVal>
		  }
	 if(1==Rm_rightBtnListen) {
 8025ff2:	4b17      	ldr	r3, [pc, #92]	; (8026050 <RunMode_ButtonController+0xbc>)
 8025ff4:	781b      	ldrb	r3, [r3, #0]
 8025ff6:	2b01      	cmp	r3, #1
 8025ff8:	d119      	bne.n	802602e <RunMode_ButtonController+0x9a>
		  		  //Timer start/stop
		  		  if(0==RMtimeSetVal && !isStartRun){ RunMode_FistValueSet();
 8025ffa:	4b1f      	ldr	r3, [pc, #124]	; (8026078 <RunMode_ButtonController+0xe4>)
 8025ffc:	781b      	ldrb	r3, [r3, #0]
 8025ffe:	2b00      	cmp	r3, #0
 8026000:	d10f      	bne.n	8026022 <RunMode_ButtonController+0x8e>
 8026002:	4b1e      	ldr	r3, [pc, #120]	; (802607c <RunMode_ButtonController+0xe8>)
 8026004:	781b      	ldrb	r3, [r3, #0]
 8026006:	f083 0301 	eor.w	r3, r3, #1
 802600a:	b2db      	uxtb	r3, r3
 802600c:	2b00      	cmp	r3, #0
 802600e:	d008      	beq.n	8026022 <RunMode_ButtonController+0x8e>
 8026010:	f000 f9cc 	bl	80263ac <RunMode_FistValueSet>
		  			  HAL_TIM_Base_Start_IT(&TOS_RUNMODE_TIMER); isStartRun=true;
 8026014:	4817      	ldr	r0, [pc, #92]	; (8026074 <RunMode_ButtonController+0xe0>)
 8026016:	f7dd fec2 	bl	8003d9e <HAL_TIM_Base_Start_IT>
 802601a:	4b18      	ldr	r3, [pc, #96]	; (802607c <RunMode_ButtonController+0xe8>)
 802601c:	2201      	movs	r2, #1
 802601e:	701a      	strb	r2, [r3, #0]
 8026020:	e005      	b.n	802602e <RunMode_ButtonController+0x9a>
		  		  }
		  		  else { isStartRun=false;
 8026022:	4b16      	ldr	r3, [pc, #88]	; (802607c <RunMode_ButtonController+0xe8>)
 8026024:	2200      	movs	r2, #0
 8026026:	701a      	strb	r2, [r3, #0]
		  			  HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 8026028:	4812      	ldr	r0, [pc, #72]	; (8026074 <RunMode_ButtonController+0xe0>)
 802602a:	f7dd fedc 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
		  		  }
	 }

	 Rm_rightBtnListen=tos_RightButton_Listenner_For_MenuControl();
 802602e:	f003 f951 	bl	80292d4 <tos_RightButton_Listenner_For_MenuControl>
 8026032:	4603      	mov	r3, r0
 8026034:	461a      	mov	r2, r3
 8026036:	4b06      	ldr	r3, [pc, #24]	; (8026050 <RunMode_ButtonController+0xbc>)
 8026038:	701a      	strb	r2, [r3, #0]
	 Rm_leftBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 802603a:	f003 f973 	bl	8029324 <tos_LeftButton_Listenner_For_MenuControl>
 802603e:	4603      	mov	r3, r0
 8026040:	461a      	mov	r2, r3
 8026042:	4b02      	ldr	r3, [pc, #8]	; (802604c <RunMode_ButtonController+0xb8>)
 8026044:	701a      	strb	r2, [r3, #0]
}
 8026046:	bf00      	nop
 8026048:	bd80      	pop	{r7, pc}
 802604a:	bf00      	nop
 802604c:	2001af45 	.word	0x2001af45
 8026050:	2001af44 	.word	0x2001af44
 8026054:	2001bd94 	.word	0x2001bd94
 8026058:	2001bd90 	.word	0x2001bd90
 802605c:	2001bd58 	.word	0x2001bd58
 8026060:	2001bd4c 	.word	0x2001bd4c
 8026064:	2001bd05 	.word	0x2001bd05
 8026068:	2001bd80 	.word	0x2001bd80
 802606c:	2001bd75 	.word	0x2001bd75
 8026070:	2001bd6c 	.word	0x2001bd6c
 8026074:	2001b708 	.word	0x2001b708
 8026078:	2001bd50 	.word	0x2001bd50
 802607c:	2001bd88 	.word	0x2001bd88

08026080 <RunMode_Update_Time>:
/*This function using for update time
 * this function must be called in timer interupt function*/
void RunMode_Update_Time(void){
 8026080:	b580      	push	{r7, lr}
 8026082:	af00      	add	r7, sp, #0
	//Colled by stm32f4xx_it.c TIM4_IRQHandler func
	if(RM_taskController){
 8026084:	4b24      	ldr	r3, [pc, #144]	; (8026118 <RunMode_Update_Time+0x98>)
 8026086:	781b      	ldrb	r3, [r3, #0]
 8026088:	2b00      	cmp	r3, #0
 802608a:	d042      	beq.n	8026112 <RunMode_Update_Time+0x92>
		if(RMtargetHours==RMhours && RMtargetMinutes ==RMminutes && RMtargetSeconds==RMseconds)
 802608c:	4b23      	ldr	r3, [pc, #140]	; (802611c <RunMode_Update_Time+0x9c>)
 802608e:	781a      	ldrb	r2, [r3, #0]
 8026090:	4b23      	ldr	r3, [pc, #140]	; (8026120 <RunMode_Update_Time+0xa0>)
 8026092:	781b      	ldrb	r3, [r3, #0]
 8026094:	429a      	cmp	r2, r3
 8026096:	d10e      	bne.n	80260b6 <RunMode_Update_Time+0x36>
 8026098:	4b22      	ldr	r3, [pc, #136]	; (8026124 <RunMode_Update_Time+0xa4>)
 802609a:	781a      	ldrb	r2, [r3, #0]
 802609c:	4b22      	ldr	r3, [pc, #136]	; (8026128 <RunMode_Update_Time+0xa8>)
 802609e:	781b      	ldrb	r3, [r3, #0]
 80260a0:	429a      	cmp	r2, r3
 80260a2:	d108      	bne.n	80260b6 <RunMode_Update_Time+0x36>
 80260a4:	4b21      	ldr	r3, [pc, #132]	; (802612c <RunMode_Update_Time+0xac>)
 80260a6:	781a      	ldrb	r2, [r3, #0]
 80260a8:	4b21      	ldr	r3, [pc, #132]	; (8026130 <RunMode_Update_Time+0xb0>)
 80260aa:	781b      	ldrb	r3, [r3, #0]
 80260ac:	429a      	cmp	r2, r3
 80260ae:	d102      	bne.n	80260b6 <RunMode_Update_Time+0x36>
		HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 80260b0:	4820      	ldr	r0, [pc, #128]	; (8026134 <RunMode_Update_Time+0xb4>)
 80260b2:	f7dd fe98 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
		RMmilisecs++;
 80260b6:	4b20      	ldr	r3, [pc, #128]	; (8026138 <RunMode_Update_Time+0xb8>)
 80260b8:	881b      	ldrh	r3, [r3, #0]
 80260ba:	3301      	adds	r3, #1
 80260bc:	b29a      	uxth	r2, r3
 80260be:	4b1e      	ldr	r3, [pc, #120]	; (8026138 <RunMode_Update_Time+0xb8>)
 80260c0:	801a      	strh	r2, [r3, #0]
			if(RMmilisecs==1000){
 80260c2:	4b1d      	ldr	r3, [pc, #116]	; (8026138 <RunMode_Update_Time+0xb8>)
 80260c4:	881b      	ldrh	r3, [r3, #0]
 80260c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80260ca:	d122      	bne.n	8026112 <RunMode_Update_Time+0x92>
				RMmilisecs=0;
 80260cc:	4b1a      	ldr	r3, [pc, #104]	; (8026138 <RunMode_Update_Time+0xb8>)
 80260ce:	2200      	movs	r2, #0
 80260d0:	801a      	strh	r2, [r3, #0]
				RMseconds++;
 80260d2:	4b17      	ldr	r3, [pc, #92]	; (8026130 <RunMode_Update_Time+0xb0>)
 80260d4:	781b      	ldrb	r3, [r3, #0]
 80260d6:	3301      	adds	r3, #1
 80260d8:	b2da      	uxtb	r2, r3
 80260da:	4b15      	ldr	r3, [pc, #84]	; (8026130 <RunMode_Update_Time+0xb0>)
 80260dc:	701a      	strb	r2, [r3, #0]
				if(RMseconds==60){
 80260de:	4b14      	ldr	r3, [pc, #80]	; (8026130 <RunMode_Update_Time+0xb0>)
 80260e0:	781b      	ldrb	r3, [r3, #0]
 80260e2:	2b3c      	cmp	r3, #60	; 0x3c
 80260e4:	d115      	bne.n	8026112 <RunMode_Update_Time+0x92>
					RMseconds=0;
 80260e6:	4b12      	ldr	r3, [pc, #72]	; (8026130 <RunMode_Update_Time+0xb0>)
 80260e8:	2200      	movs	r2, #0
 80260ea:	701a      	strb	r2, [r3, #0]
					RMminutes++;
 80260ec:	4b0e      	ldr	r3, [pc, #56]	; (8026128 <RunMode_Update_Time+0xa8>)
 80260ee:	781b      	ldrb	r3, [r3, #0]
 80260f0:	3301      	adds	r3, #1
 80260f2:	b2da      	uxtb	r2, r3
 80260f4:	4b0c      	ldr	r3, [pc, #48]	; (8026128 <RunMode_Update_Time+0xa8>)
 80260f6:	701a      	strb	r2, [r3, #0]
					if(RMminutes==60){
 80260f8:	4b0b      	ldr	r3, [pc, #44]	; (8026128 <RunMode_Update_Time+0xa8>)
 80260fa:	781b      	ldrb	r3, [r3, #0]
 80260fc:	2b3c      	cmp	r3, #60	; 0x3c
 80260fe:	d108      	bne.n	8026112 <RunMode_Update_Time+0x92>
						RMminutes=0;
 8026100:	4b09      	ldr	r3, [pc, #36]	; (8026128 <RunMode_Update_Time+0xa8>)
 8026102:	2200      	movs	r2, #0
 8026104:	701a      	strb	r2, [r3, #0]
						RMhours++;
 8026106:	4b06      	ldr	r3, [pc, #24]	; (8026120 <RunMode_Update_Time+0xa0>)
 8026108:	781b      	ldrb	r3, [r3, #0]
 802610a:	3301      	adds	r3, #1
 802610c:	b2da      	uxtb	r2, r3
 802610e:	4b04      	ldr	r3, [pc, #16]	; (8026120 <RunMode_Update_Time+0xa0>)
 8026110:	701a      	strb	r2, [r3, #0]
					}
				}
			}
	}

}
 8026112:	bf00      	nop
 8026114:	bd80      	pop	{r7, pc}
 8026116:	bf00      	nop
 8026118:	2001bd74 	.word	0x2001bd74
 802611c:	2001bd6c 	.word	0x2001bd6c
 8026120:	2001bd05 	.word	0x2001bd05
 8026124:	2001bd75 	.word	0x2001bd75
 8026128:	2001bd4c 	.word	0x2001bd4c
 802612c:	2001bd80 	.word	0x2001bd80
 8026130:	2001bd58 	.word	0x2001bd58
 8026134:	2001b708 	.word	0x2001b708
 8026138:	2001bd94 	.word	0x2001bd94

0802613c <RunMode_RunTimeSetVal>:
/*This function using for  control the set target values chouser*/
void RunMode_RunTimeSetVal(void){
 802613c:	b580      	push	{r7, lr}
 802613e:	af00      	add	r7, sp, #0
	RMtimeSetVal++;
 8026140:	4b08      	ldr	r3, [pc, #32]	; (8026164 <RunMode_RunTimeSetVal+0x28>)
 8026142:	781b      	ldrb	r3, [r3, #0]
 8026144:	3301      	adds	r3, #1
 8026146:	b2da      	uxtb	r2, r3
 8026148:	4b06      	ldr	r3, [pc, #24]	; (8026164 <RunMode_RunTimeSetVal+0x28>)
 802614a:	701a      	strb	r2, [r3, #0]
	if(4==RMtimeSetVal)RMtimeSetVal=0;
 802614c:	4b05      	ldr	r3, [pc, #20]	; (8026164 <RunMode_RunTimeSetVal+0x28>)
 802614e:	781b      	ldrb	r3, [r3, #0]
 8026150:	2b04      	cmp	r3, #4
 8026152:	d102      	bne.n	802615a <RunMode_RunTimeSetVal+0x1e>
 8026154:	4b03      	ldr	r3, [pc, #12]	; (8026164 <RunMode_RunTimeSetVal+0x28>)
 8026156:	2200      	movs	r2, #0
 8026158:	701a      	strb	r2, [r3, #0]
	RunMode_RunTimeLblController();
 802615a:	f000 f84b 	bl	80261f4 <RunMode_RunTimeLblController>
}
 802615e:	bf00      	nop
 8026160:	bd80      	pop	{r7, pc}
 8026162:	bf00      	nop
 8026164:	2001bd50 	.word	0x2001bd50

08026168 <RunMode_RunTimeUpdateVal>:

/*This function using for  update and plus the target values*/
void RunMode_RunTimeUpdateVal(void){
 8026168:	b580      	push	{r7, lr}
 802616a:	af00      	add	r7, sp, #0
	switch(RMtimeSetVal){
 802616c:	4b1d      	ldr	r3, [pc, #116]	; (80261e4 <RunMode_RunTimeUpdateVal+0x7c>)
 802616e:	781b      	ldrb	r3, [r3, #0]
 8026170:	2b02      	cmp	r3, #2
 8026172:	d012      	beq.n	802619a <RunMode_RunTimeUpdateVal+0x32>
 8026174:	2b03      	cmp	r3, #3
 8026176:	d01e      	beq.n	80261b6 <RunMode_RunTimeUpdateVal+0x4e>
 8026178:	2b01      	cmp	r3, #1
 802617a:	d000      	beq.n	802617e <RunMode_RunTimeUpdateVal+0x16>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
	default: break;
 802617c:	e02e      	b.n	80261dc <RunMode_RunTimeUpdateVal+0x74>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
 802617e:	4b1a      	ldr	r3, [pc, #104]	; (80261e8 <RunMode_RunTimeUpdateVal+0x80>)
 8026180:	781b      	ldrb	r3, [r3, #0]
 8026182:	3301      	adds	r3, #1
 8026184:	b2da      	uxtb	r2, r3
 8026186:	4b18      	ldr	r3, [pc, #96]	; (80261e8 <RunMode_RunTimeUpdateVal+0x80>)
 8026188:	701a      	strb	r2, [r3, #0]
 802618a:	4b17      	ldr	r3, [pc, #92]	; (80261e8 <RunMode_RunTimeUpdateVal+0x80>)
 802618c:	781b      	ldrb	r3, [r3, #0]
 802618e:	2b18      	cmp	r3, #24
 8026190:	d11f      	bne.n	80261d2 <RunMode_RunTimeUpdateVal+0x6a>
 8026192:	4b15      	ldr	r3, [pc, #84]	; (80261e8 <RunMode_RunTimeUpdateVal+0x80>)
 8026194:	2200      	movs	r2, #0
 8026196:	701a      	strb	r2, [r3, #0]
 8026198:	e01b      	b.n	80261d2 <RunMode_RunTimeUpdateVal+0x6a>
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
 802619a:	4b14      	ldr	r3, [pc, #80]	; (80261ec <RunMode_RunTimeUpdateVal+0x84>)
 802619c:	781b      	ldrb	r3, [r3, #0]
 802619e:	3301      	adds	r3, #1
 80261a0:	b2da      	uxtb	r2, r3
 80261a2:	4b12      	ldr	r3, [pc, #72]	; (80261ec <RunMode_RunTimeUpdateVal+0x84>)
 80261a4:	701a      	strb	r2, [r3, #0]
 80261a6:	4b11      	ldr	r3, [pc, #68]	; (80261ec <RunMode_RunTimeUpdateVal+0x84>)
 80261a8:	781b      	ldrb	r3, [r3, #0]
 80261aa:	2b3c      	cmp	r3, #60	; 0x3c
 80261ac:	d113      	bne.n	80261d6 <RunMode_RunTimeUpdateVal+0x6e>
 80261ae:	4b0f      	ldr	r3, [pc, #60]	; (80261ec <RunMode_RunTimeUpdateVal+0x84>)
 80261b0:	2200      	movs	r2, #0
 80261b2:	701a      	strb	r2, [r3, #0]
 80261b4:	e00f      	b.n	80261d6 <RunMode_RunTimeUpdateVal+0x6e>
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
 80261b6:	4b0e      	ldr	r3, [pc, #56]	; (80261f0 <RunMode_RunTimeUpdateVal+0x88>)
 80261b8:	781b      	ldrb	r3, [r3, #0]
 80261ba:	3301      	adds	r3, #1
 80261bc:	b2da      	uxtb	r2, r3
 80261be:	4b0c      	ldr	r3, [pc, #48]	; (80261f0 <RunMode_RunTimeUpdateVal+0x88>)
 80261c0:	701a      	strb	r2, [r3, #0]
 80261c2:	4b0b      	ldr	r3, [pc, #44]	; (80261f0 <RunMode_RunTimeUpdateVal+0x88>)
 80261c4:	781b      	ldrb	r3, [r3, #0]
 80261c6:	2b3c      	cmp	r3, #60	; 0x3c
 80261c8:	d107      	bne.n	80261da <RunMode_RunTimeUpdateVal+0x72>
 80261ca:	4b09      	ldr	r3, [pc, #36]	; (80261f0 <RunMode_RunTimeUpdateVal+0x88>)
 80261cc:	2200      	movs	r2, #0
 80261ce:	701a      	strb	r2, [r3, #0]
 80261d0:	e003      	b.n	80261da <RunMode_RunTimeUpdateVal+0x72>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
 80261d2:	bf00      	nop
 80261d4:	e002      	b.n	80261dc <RunMode_RunTimeUpdateVal+0x74>
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
 80261d6:	bf00      	nop
 80261d8:	e000      	b.n	80261dc <RunMode_RunTimeUpdateVal+0x74>
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
 80261da:	bf00      	nop
	}
	RunMode_RunTimeLblController();
 80261dc:	f000 f80a 	bl	80261f4 <RunMode_RunTimeLblController>
}
 80261e0:	bf00      	nop
 80261e2:	bd80      	pop	{r7, pc}
 80261e4:	2001bd50 	.word	0x2001bd50
 80261e8:	2001bd6c 	.word	0x2001bd6c
 80261ec:	2001bd75 	.word	0x2001bd75
 80261f0:	2001bd80 	.word	0x2001bd80

080261f4 <RunMode_RunTimeLblController>:

/*This function using for update set time label*/
void RunMode_RunTimeLblController(void){
 80261f4:	b580      	push	{r7, lr}
 80261f6:	b084      	sub	sp, #16
 80261f8:	af04      	add	r7, sp, #16
	switch(RMtimeSetVal){
 80261fa:	4b5d      	ldr	r3, [pc, #372]	; (8026370 <RunMode_RunTimeLblController+0x17c>)
 80261fc:	781b      	ldrb	r3, [r3, #0]
 80261fe:	2b02      	cmp	r3, #2
 8026200:	d032      	beq.n	8026268 <RunMode_RunTimeLblController+0x74>
 8026202:	2b03      	cmp	r3, #3
 8026204:	d05e      	beq.n	80262c4 <RunMode_RunTimeLblController+0xd0>
 8026206:	2b01      	cmp	r3, #1
 8026208:	f040 808a 	bne.w	8026320 <RunMode_RunTimeLblController+0x12c>
	case 1:
			if(RM_theme)
 802620c:	4b59      	ldr	r3, [pc, #356]	; (8026374 <RunMode_RunTimeLblController+0x180>)
 802620e:	781b      	ldrb	r3, [r3, #0]
 8026210:	2b00      	cmp	r3, #0
 8026212:	d014      	beq.n	802623e <RunMode_RunTimeLblController+0x4a>
				 snprintf(runModeBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8026214:	4b58      	ldr	r3, [pc, #352]	; (8026378 <RunMode_RunTimeLblController+0x184>)
 8026216:	781b      	ldrb	r3, [r3, #0]
 8026218:	4618      	mov	r0, r3
 802621a:	4b58      	ldr	r3, [pc, #352]	; (802637c <RunMode_RunTimeLblController+0x188>)
 802621c:	781b      	ldrb	r3, [r3, #0]
 802621e:	461a      	mov	r2, r3
 8026220:	4b57      	ldr	r3, [pc, #348]	; (8026380 <RunMode_RunTimeLblController+0x18c>)
 8026222:	781b      	ldrb	r3, [r3, #0]
 8026224:	4619      	mov	r1, r3
 8026226:	4b57      	ldr	r3, [pc, #348]	; (8026384 <RunMode_RunTimeLblController+0x190>)
 8026228:	881b      	ldrh	r3, [r3, #0]
 802622a:	9302      	str	r3, [sp, #8]
 802622c:	9101      	str	r1, [sp, #4]
 802622e:	9200      	str	r2, [sp, #0]
 8026230:	4603      	mov	r3, r0
 8026232:	4a55      	ldr	r2, [pc, #340]	; (8026388 <RunMode_RunTimeLblController+0x194>)
 8026234:	2140      	movs	r1, #64	; 0x40
 8026236:	4855      	ldr	r0, [pc, #340]	; (802638c <RunMode_RunTimeLblController+0x198>)
 8026238:	f004 fae4 	bl	802a804 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
			else snprintf(runModeBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 802623c:	e085      	b.n	802634a <RunMode_RunTimeLblController+0x156>
			else snprintf(runModeBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 802623e:	4b4e      	ldr	r3, [pc, #312]	; (8026378 <RunMode_RunTimeLblController+0x184>)
 8026240:	781b      	ldrb	r3, [r3, #0]
 8026242:	4618      	mov	r0, r3
 8026244:	4b4d      	ldr	r3, [pc, #308]	; (802637c <RunMode_RunTimeLblController+0x188>)
 8026246:	781b      	ldrb	r3, [r3, #0]
 8026248:	461a      	mov	r2, r3
 802624a:	4b4d      	ldr	r3, [pc, #308]	; (8026380 <RunMode_RunTimeLblController+0x18c>)
 802624c:	781b      	ldrb	r3, [r3, #0]
 802624e:	4619      	mov	r1, r3
 8026250:	4b4c      	ldr	r3, [pc, #304]	; (8026384 <RunMode_RunTimeLblController+0x190>)
 8026252:	881b      	ldrh	r3, [r3, #0]
 8026254:	9302      	str	r3, [sp, #8]
 8026256:	9101      	str	r1, [sp, #4]
 8026258:	9200      	str	r2, [sp, #0]
 802625a:	4603      	mov	r3, r0
 802625c:	4a4c      	ldr	r2, [pc, #304]	; (8026390 <RunMode_RunTimeLblController+0x19c>)
 802625e:	2140      	movs	r1, #64	; 0x40
 8026260:	484a      	ldr	r0, [pc, #296]	; (802638c <RunMode_RunTimeLblController+0x198>)
 8026262:	f004 facf 	bl	802a804 <sniprintf>
		break;
 8026266:	e070      	b.n	802634a <RunMode_RunTimeLblController+0x156>
	case 2:
			if(RM_theme)
 8026268:	4b42      	ldr	r3, [pc, #264]	; (8026374 <RunMode_RunTimeLblController+0x180>)
 802626a:	781b      	ldrb	r3, [r3, #0]
 802626c:	2b00      	cmp	r3, #0
 802626e:	d014      	beq.n	802629a <RunMode_RunTimeLblController+0xa6>
				 snprintf(runModeBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %02d#.%03d",
 8026270:	4b41      	ldr	r3, [pc, #260]	; (8026378 <RunMode_RunTimeLblController+0x184>)
 8026272:	781b      	ldrb	r3, [r3, #0]
 8026274:	4618      	mov	r0, r3
 8026276:	4b41      	ldr	r3, [pc, #260]	; (802637c <RunMode_RunTimeLblController+0x188>)
 8026278:	781b      	ldrb	r3, [r3, #0]
 802627a:	461a      	mov	r2, r3
 802627c:	4b40      	ldr	r3, [pc, #256]	; (8026380 <RunMode_RunTimeLblController+0x18c>)
 802627e:	781b      	ldrb	r3, [r3, #0]
 8026280:	4619      	mov	r1, r3
 8026282:	4b40      	ldr	r3, [pc, #256]	; (8026384 <RunMode_RunTimeLblController+0x190>)
 8026284:	881b      	ldrh	r3, [r3, #0]
 8026286:	9302      	str	r3, [sp, #8]
 8026288:	9101      	str	r1, [sp, #4]
 802628a:	9200      	str	r2, [sp, #0]
 802628c:	4603      	mov	r3, r0
 802628e:	4a41      	ldr	r2, [pc, #260]	; (8026394 <RunMode_RunTimeLblController+0x1a0>)
 8026290:	2140      	movs	r1, #64	; 0x40
 8026292:	483e      	ldr	r0, [pc, #248]	; (802638c <RunMode_RunTimeLblController+0x198>)
 8026294:	f004 fab6 	bl	802a804 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
			else snprintf(runModeBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 8026298:	e057      	b.n	802634a <RunMode_RunTimeLblController+0x156>
			else snprintf(runModeBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#.%03d",
 802629a:	4b37      	ldr	r3, [pc, #220]	; (8026378 <RunMode_RunTimeLblController+0x184>)
 802629c:	781b      	ldrb	r3, [r3, #0]
 802629e:	4618      	mov	r0, r3
 80262a0:	4b36      	ldr	r3, [pc, #216]	; (802637c <RunMode_RunTimeLblController+0x188>)
 80262a2:	781b      	ldrb	r3, [r3, #0]
 80262a4:	461a      	mov	r2, r3
 80262a6:	4b36      	ldr	r3, [pc, #216]	; (8026380 <RunMode_RunTimeLblController+0x18c>)
 80262a8:	781b      	ldrb	r3, [r3, #0]
 80262aa:	4619      	mov	r1, r3
 80262ac:	4b35      	ldr	r3, [pc, #212]	; (8026384 <RunMode_RunTimeLblController+0x190>)
 80262ae:	881b      	ldrh	r3, [r3, #0]
 80262b0:	9302      	str	r3, [sp, #8]
 80262b2:	9101      	str	r1, [sp, #4]
 80262b4:	9200      	str	r2, [sp, #0]
 80262b6:	4603      	mov	r3, r0
 80262b8:	4a37      	ldr	r2, [pc, #220]	; (8026398 <RunMode_RunTimeLblController+0x1a4>)
 80262ba:	2140      	movs	r1, #64	; 0x40
 80262bc:	4833      	ldr	r0, [pc, #204]	; (802638c <RunMode_RunTimeLblController+0x198>)
 80262be:	f004 faa1 	bl	802a804 <sniprintf>
		break;
 80262c2:	e042      	b.n	802634a <RunMode_RunTimeLblController+0x156>
	case 3:
		if(RM_theme)
 80262c4:	4b2b      	ldr	r3, [pc, #172]	; (8026374 <RunMode_RunTimeLblController+0x180>)
 80262c6:	781b      	ldrb	r3, [r3, #0]
 80262c8:	2b00      	cmp	r3, #0
 80262ca:	d014      	beq.n	80262f6 <RunMode_RunTimeLblController+0x102>
			 snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %02d#.%03d",
 80262cc:	4b2a      	ldr	r3, [pc, #168]	; (8026378 <RunMode_RunTimeLblController+0x184>)
 80262ce:	781b      	ldrb	r3, [r3, #0]
 80262d0:	4618      	mov	r0, r3
 80262d2:	4b2a      	ldr	r3, [pc, #168]	; (802637c <RunMode_RunTimeLblController+0x188>)
 80262d4:	781b      	ldrb	r3, [r3, #0]
 80262d6:	461a      	mov	r2, r3
 80262d8:	4b29      	ldr	r3, [pc, #164]	; (8026380 <RunMode_RunTimeLblController+0x18c>)
 80262da:	781b      	ldrb	r3, [r3, #0]
 80262dc:	4619      	mov	r1, r3
 80262de:	4b29      	ldr	r3, [pc, #164]	; (8026384 <RunMode_RunTimeLblController+0x190>)
 80262e0:	881b      	ldrh	r3, [r3, #0]
 80262e2:	9302      	str	r3, [sp, #8]
 80262e4:	9101      	str	r1, [sp, #4]
 80262e6:	9200      	str	r2, [sp, #0]
 80262e8:	4603      	mov	r3, r0
 80262ea:	4a2c      	ldr	r2, [pc, #176]	; (802639c <RunMode_RunTimeLblController+0x1a8>)
 80262ec:	2140      	movs	r1, #64	; 0x40
 80262ee:	4827      	ldr	r0, [pc, #156]	; (802638c <RunMode_RunTimeLblController+0x198>)
 80262f0:	f004 fa88 	bl	802a804 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		else snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 80262f4:	e029      	b.n	802634a <RunMode_RunTimeLblController+0x156>
		else snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#.%03d",
 80262f6:	4b20      	ldr	r3, [pc, #128]	; (8026378 <RunMode_RunTimeLblController+0x184>)
 80262f8:	781b      	ldrb	r3, [r3, #0]
 80262fa:	4618      	mov	r0, r3
 80262fc:	4b1f      	ldr	r3, [pc, #124]	; (802637c <RunMode_RunTimeLblController+0x188>)
 80262fe:	781b      	ldrb	r3, [r3, #0]
 8026300:	461a      	mov	r2, r3
 8026302:	4b1f      	ldr	r3, [pc, #124]	; (8026380 <RunMode_RunTimeLblController+0x18c>)
 8026304:	781b      	ldrb	r3, [r3, #0]
 8026306:	4619      	mov	r1, r3
 8026308:	4b1e      	ldr	r3, [pc, #120]	; (8026384 <RunMode_RunTimeLblController+0x190>)
 802630a:	881b      	ldrh	r3, [r3, #0]
 802630c:	9302      	str	r3, [sp, #8]
 802630e:	9101      	str	r1, [sp, #4]
 8026310:	9200      	str	r2, [sp, #0]
 8026312:	4603      	mov	r3, r0
 8026314:	4a22      	ldr	r2, [pc, #136]	; (80263a0 <RunMode_RunTimeLblController+0x1ac>)
 8026316:	2140      	movs	r1, #64	; 0x40
 8026318:	481c      	ldr	r0, [pc, #112]	; (802638c <RunMode_RunTimeLblController+0x198>)
 802631a:	f004 fa73 	bl	802a804 <sniprintf>
		break;
 802631e:	e014      	b.n	802634a <RunMode_RunTimeLblController+0x156>
	default: snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8026320:	4b15      	ldr	r3, [pc, #84]	; (8026378 <RunMode_RunTimeLblController+0x184>)
 8026322:	781b      	ldrb	r3, [r3, #0]
 8026324:	4618      	mov	r0, r3
 8026326:	4b15      	ldr	r3, [pc, #84]	; (802637c <RunMode_RunTimeLblController+0x188>)
 8026328:	781b      	ldrb	r3, [r3, #0]
 802632a:	461a      	mov	r2, r3
 802632c:	4b14      	ldr	r3, [pc, #80]	; (8026380 <RunMode_RunTimeLblController+0x18c>)
 802632e:	781b      	ldrb	r3, [r3, #0]
 8026330:	4619      	mov	r1, r3
 8026332:	4b14      	ldr	r3, [pc, #80]	; (8026384 <RunMode_RunTimeLblController+0x190>)
 8026334:	881b      	ldrh	r3, [r3, #0]
 8026336:	9302      	str	r3, [sp, #8]
 8026338:	9101      	str	r1, [sp, #4]
 802633a:	9200      	str	r2, [sp, #0]
 802633c:	4603      	mov	r3, r0
 802633e:	4a19      	ldr	r2, [pc, #100]	; (80263a4 <RunMode_RunTimeLblController+0x1b0>)
 8026340:	2140      	movs	r1, #64	; 0x40
 8026342:	4812      	ldr	r0, [pc, #72]	; (802638c <RunMode_RunTimeLblController+0x198>)
 8026344:	f004 fa5e 	bl	802a804 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs); break;
 8026348:	bf00      	nop
	}
	lv_label_set_text(RM_Lbl, runModeBuffer);
 802634a:	4b17      	ldr	r3, [pc, #92]	; (80263a8 <RunMode_RunTimeLblController+0x1b4>)
 802634c:	681b      	ldr	r3, [r3, #0]
 802634e:	490f      	ldr	r1, [pc, #60]	; (802638c <RunMode_RunTimeLblController+0x198>)
 8026350:	4618      	mov	r0, r3
 8026352:	f7f5 ffd7 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 8026356:	4b14      	ldr	r3, [pc, #80]	; (80263a8 <RunMode_RunTimeLblController+0x1b4>)
 8026358:	6818      	ldr	r0, [r3, #0]
 802635a:	2328      	movs	r3, #40	; 0x28
 802635c:	9300      	str	r3, [sp, #0]
 802635e:	2300      	movs	r3, #0
 8026360:	2200      	movs	r2, #0
 8026362:	2100      	movs	r1, #0
 8026364:	f7e2 fd84 	bl	8008e70 <lv_obj_align>

}
 8026368:	bf00      	nop
 802636a:	46bd      	mov	sp, r7
 802636c:	bd80      	pop	{r7, pc}
 802636e:	bf00      	nop
 8026370:	2001bd50 	.word	0x2001bd50
 8026374:	2001bd51 	.word	0x2001bd51
 8026378:	2001bd6c 	.word	0x2001bd6c
 802637c:	2001bd75 	.word	0x2001bd75
 8026380:	2001bd80 	.word	0x2001bd80
 8026384:	2001bd94 	.word	0x2001bd94
 8026388:	0802cb54 	.word	0x0802cb54
 802638c:	2001bd0c 	.word	0x2001bd0c
 8026390:	0802cb84 	.word	0x0802cb84
 8026394:	0802cbb4 	.word	0x0802cbb4
 8026398:	0802cbe4 	.word	0x0802cbe4
 802639c:	0802cc14 	.word	0x0802cc14
 80263a0:	0802cc44 	.word	0x0802cc44
 80263a4:	0802cae4 	.word	0x0802cae4
 80263a8:	2001bd08 	.word	0x2001bd08

080263ac <RunMode_FistValueSet>:
//Setter Getter Functions
void RunMode_FistValueSet(void){
 80263ac:	b580      	push	{r7, lr}
 80263ae:	af00      	add	r7, sp, #0
	if(RMfirstVAl){
 80263b0:	4b10      	ldr	r3, [pc, #64]	; (80263f4 <RunMode_FistValueSet+0x48>)
 80263b2:	781b      	ldrb	r3, [r3, #0]
 80263b4:	2b00      	cmp	r3, #0
 80263b6:	d01b      	beq.n	80263f0 <RunMode_FistValueSet+0x44>
		RMstepsBeff=RMsteps;
 80263b8:	4b0f      	ldr	r3, [pc, #60]	; (80263f8 <RunMode_FistValueSet+0x4c>)
 80263ba:	881a      	ldrh	r2, [r3, #0]
 80263bc:	4b0f      	ldr	r3, [pc, #60]	; (80263fc <RunMode_FistValueSet+0x50>)
 80263be:	801a      	strh	r2, [r3, #0]
		RMkCalsBeff=RMkCals;
 80263c0:	4b0f      	ldr	r3, [pc, #60]	; (8026400 <RunMode_FistValueSet+0x54>)
 80263c2:	881a      	ldrh	r2, [r3, #0]
 80263c4:	4b0f      	ldr	r3, [pc, #60]	; (8026404 <RunMode_FistValueSet+0x58>)
 80263c6:	801a      	strh	r2, [r3, #0]
		RMdistances=(float)tos_distance_Calc(RM_unitType,RMsteps);
 80263c8:	4b0f      	ldr	r3, [pc, #60]	; (8026408 <RunMode_FistValueSet+0x5c>)
 80263ca:	781a      	ldrb	r2, [r3, #0]
 80263cc:	4b0a      	ldr	r3, [pc, #40]	; (80263f8 <RunMode_FistValueSet+0x4c>)
 80263ce:	881b      	ldrh	r3, [r3, #0]
 80263d0:	4619      	mov	r1, r3
 80263d2:	4610      	mov	r0, r2
 80263d4:	f003 f8a8 	bl	8029528 <tos_distance_Calc>
 80263d8:	eef0 7a40 	vmov.f32	s15, s0
 80263dc:	4b0b      	ldr	r3, [pc, #44]	; (802640c <RunMode_FistValueSet+0x60>)
 80263de:	edc3 7a00 	vstr	s15, [r3]
		RMdistancesBeff=RMdistances;
 80263e2:	4b0a      	ldr	r3, [pc, #40]	; (802640c <RunMode_FistValueSet+0x60>)
 80263e4:	681b      	ldr	r3, [r3, #0]
 80263e6:	4a0a      	ldr	r2, [pc, #40]	; (8026410 <RunMode_FistValueSet+0x64>)
 80263e8:	6013      	str	r3, [r2, #0]
		RMfirstVAl=false;
 80263ea:	4b02      	ldr	r3, [pc, #8]	; (80263f4 <RunMode_FistValueSet+0x48>)
 80263ec:	2200      	movs	r2, #0
 80263ee:	701a      	strb	r2, [r3, #0]
	}

}
 80263f0:	bf00      	nop
 80263f2:	bd80      	pop	{r7, pc}
 80263f4:	2001bd90 	.word	0x2001bd90
 80263f8:	2001bd92 	.word	0x2001bd92
 80263fc:	2001bd8a 	.word	0x2001bd8a
 8026400:	2001bd4e 	.word	0x2001bd4e
 8026404:	2001bd64 	.word	0x2001bd64
 8026408:	2001bd04 	.word	0x2001bd04
 802640c:	2001bd70 	.word	0x2001bd70
 8026410:	2001bd60 	.word	0x2001bd60

08026414 <RunMode_TaskControllerSet>:
void RunMode_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
	RMsteps =getSteps;
	RMkCals =getKcals;
}
void RunMode_TaskControllerSet(bool active){
 8026414:	b480      	push	{r7}
 8026416:	b083      	sub	sp, #12
 8026418:	af00      	add	r7, sp, #0
 802641a:	4603      	mov	r3, r0
 802641c:	71fb      	strb	r3, [r7, #7]
	RM_taskController = active;
 802641e:	4a04      	ldr	r2, [pc, #16]	; (8026430 <RunMode_TaskControllerSet+0x1c>)
 8026420:	79fb      	ldrb	r3, [r7, #7]
 8026422:	7013      	strb	r3, [r2, #0]
}
 8026424:	bf00      	nop
 8026426:	370c      	adds	r7, #12
 8026428:	46bd      	mov	sp, r7
 802642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802642e:	4770      	bx	lr
 8026430:	2001bd74 	.word	0x2001bd74

08026434 <RunMode_TaskControllerGet>:
bool RunMode_TaskControllerGet(void){
 8026434:	b480      	push	{r7}
 8026436:	af00      	add	r7, sp, #0
	return RM_taskController;
 8026438:	4b03      	ldr	r3, [pc, #12]	; (8026448 <RunMode_TaskControllerGet+0x14>)
 802643a:	781b      	ldrb	r3, [r3, #0]
}
 802643c:	4618      	mov	r0, r3
 802643e:	46bd      	mov	sp, r7
 8026440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026444:	4770      	bx	lr
 8026446:	bf00      	nop
 8026448:	2001bd74 	.word	0x2001bd74

0802644c <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 802644c:	b480      	push	{r7}
 802644e:	b085      	sub	sp, #20
 8026450:	af00      	add	r7, sp, #0
 8026452:	4603      	mov	r3, r0
 8026454:	71fb      	strb	r3, [r7, #7]
 8026456:	460b      	mov	r3, r1
 8026458:	71bb      	strb	r3, [r7, #6]
 802645a:	4613      	mov	r3, r2
 802645c:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 802645e:	79bb      	ldrb	r3, [r7, #6]
 8026460:	095b      	lsrs	r3, r3, #5
 8026462:	b2db      	uxtb	r3, r3
 8026464:	f003 0307 	and.w	r3, r3, #7
 8026468:	b2da      	uxtb	r2, r3
 802646a:	7b3b      	ldrb	r3, [r7, #12]
 802646c:	f362 0302 	bfi	r3, r2, #0, #3
 8026470:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8026472:	79fb      	ldrb	r3, [r7, #7]
 8026474:	08db      	lsrs	r3, r3, #3
 8026476:	b2db      	uxtb	r3, r3
 8026478:	f003 031f 	and.w	r3, r3, #31
 802647c:	b2da      	uxtb	r2, r3
 802647e:	7b3b      	ldrb	r3, [r7, #12]
 8026480:	f362 03c7 	bfi	r3, r2, #3, #5
 8026484:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8026486:	797b      	ldrb	r3, [r7, #5]
 8026488:	08db      	lsrs	r3, r3, #3
 802648a:	b2db      	uxtb	r3, r3
 802648c:	f003 031f 	and.w	r3, r3, #31
 8026490:	b2da      	uxtb	r2, r3
 8026492:	7b7b      	ldrb	r3, [r7, #13]
 8026494:	f362 0304 	bfi	r3, r2, #0, #5
 8026498:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 802649a:	79bb      	ldrb	r3, [r7, #6]
 802649c:	089b      	lsrs	r3, r3, #2
 802649e:	b2db      	uxtb	r3, r3
 80264a0:	f003 0307 	and.w	r3, r3, #7
 80264a4:	b2da      	uxtb	r2, r3
 80264a6:	7b7b      	ldrb	r3, [r7, #13]
 80264a8:	f362 1347 	bfi	r3, r2, #5, #3
 80264ac:	737b      	strb	r3, [r7, #13]
    return color;
 80264ae:	89bb      	ldrh	r3, [r7, #12]
}
 80264b0:	4618      	mov	r0, r3
 80264b2:	3714      	adds	r7, #20
 80264b4:	46bd      	mov	sp, r7
 80264b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264ba:	4770      	bx	lr

080264bc <lv_color_hex>:
    return color;
}
#endif

static inline lv_color_t lv_color_hex(uint32_t c)
{
 80264bc:	b580      	push	{r7, lr}
 80264be:	b082      	sub	sp, #8
 80264c0:	af00      	add	r7, sp, #0
 80264c2:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 80264c4:	687b      	ldr	r3, [r7, #4]
 80264c6:	0c1b      	lsrs	r3, r3, #16
 80264c8:	b2d8      	uxtb	r0, r3
 80264ca:	687b      	ldr	r3, [r7, #4]
 80264cc:	0a1b      	lsrs	r3, r3, #8
 80264ce:	b2db      	uxtb	r3, r3
 80264d0:	687a      	ldr	r2, [r7, #4]
 80264d2:	b2d2      	uxtb	r2, r2
 80264d4:	4619      	mov	r1, r3
 80264d6:	f7ff ffb9 	bl	802644c <lv_color_make>
 80264da:	4603      	mov	r3, r0
}
 80264dc:	4618      	mov	r0, r3
 80264de:	3708      	adds	r7, #8
 80264e0:	46bd      	mov	sp, r7
 80264e2:	bd80      	pop	{r7, pc}

080264e4 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 80264e4:	b580      	push	{r7, lr}
 80264e6:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 80264e8:	f7ee fe24 	bl	8015134 <lv_disp_get_default>
 80264ec:	4603      	mov	r3, r0
 80264ee:	4618      	mov	r0, r3
 80264f0:	f7e1 faec 	bl	8007acc <lv_disp_get_scr_act>
 80264f4:	4603      	mov	r3, r0
}
 80264f6:	4618      	mov	r0, r3
 80264f8:	bd80      	pop	{r7, pc}

080264fa <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 80264fa:	b580      	push	{r7, lr}
 80264fc:	b084      	sub	sp, #16
 80264fe:	af00      	add	r7, sp, #0
 8026500:	60f8      	str	r0, [r7, #12]
 8026502:	460b      	mov	r3, r1
 8026504:	607a      	str	r2, [r7, #4]
 8026506:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8026508:	6879      	ldr	r1, [r7, #4]
 802650a:	68f8      	ldr	r0, [r7, #12]
 802650c:	f7e3 f955 	bl	80097ba <lv_obj_set_style>
}
 8026510:	bf00      	nop
 8026512:	3710      	adds	r7, #16
 8026514:	46bd      	mov	sp, r7
 8026516:	bd80      	pop	{r7, pc}

08026518 <tos_SettingsScreen_Init>:
void SettingsScreen_UnitUpdateVal(bool val);


void SettingsScreen_SetNewValues(void);

void tos_SettingsScreen_Init(bool theme,RTC_HandleTypeDef *hrtc){
 8026518:	b580      	push	{r7, lr}
 802651a:	b082      	sub	sp, #8
 802651c:	af00      	add	r7, sp, #0
 802651e:	4603      	mov	r3, r0
 8026520:	6039      	str	r1, [r7, #0]
 8026522:	71fb      	strb	r3, [r7, #7]
			lv_obj_clean(lv_scr_act());
 8026524:	f7ff ffde 	bl	80264e4 <lv_scr_act>
 8026528:	4603      	mov	r3, r0
 802652a:	4618      	mov	r0, r3
 802652c:	f7e2 fa2e 	bl	800898c <lv_obj_clean>
    		lv_style_copy(&description_Style, &lv_style_plain);
 8026530:	4925      	ldr	r1, [pc, #148]	; (80265c8 <tos_SettingsScreen_Init+0xb0>)
 8026532:	4826      	ldr	r0, [pc, #152]	; (80265cc <tos_SettingsScreen_Init+0xb4>)
 8026534:	f7e4 fee0 	bl	800b2f8 <lv_style_copy>
    		description_Style.text.font = &lv_font_roboto_28;
 8026538:	4b24      	ldr	r3, [pc, #144]	; (80265cc <tos_SettingsScreen_Init+0xb4>)
 802653a:	4a25      	ldr	r2, [pc, #148]	; (80265d0 <tos_SettingsScreen_Init+0xb8>)
 802653c:	625a      	str	r2, [r3, #36]	; 0x24
			lv_style_copy(&style_screen, &lv_style_plain);
 802653e:	4922      	ldr	r1, [pc, #136]	; (80265c8 <tos_SettingsScreen_Init+0xb0>)
 8026540:	4824      	ldr	r0, [pc, #144]	; (80265d4 <tos_SettingsScreen_Init+0xbc>)
 8026542:	f7e4 fed9 	bl	800b2f8 <lv_style_copy>
			style_screen.body.main_color = LV_COLOR_WHITE;
 8026546:	4a23      	ldr	r2, [pc, #140]	; (80265d4 <tos_SettingsScreen_Init+0xbc>)
 8026548:	4b23      	ldr	r3, [pc, #140]	; (80265d8 <tos_SettingsScreen_Init+0xc0>)
 802654a:	881b      	ldrh	r3, [r3, #0]
 802654c:	8053      	strh	r3, [r2, #2]
			style_screen.body.grad_color = LV_COLOR_WHITE;
 802654e:	4a21      	ldr	r2, [pc, #132]	; (80265d4 <tos_SettingsScreen_Init+0xbc>)
 8026550:	4b21      	ldr	r3, [pc, #132]	; (80265d8 <tos_SettingsScreen_Init+0xc0>)
 8026552:	881b      	ldrh	r3, [r3, #0]
 8026554:	8093      	strh	r3, [r2, #4]
		    description_Style.text.color = LV_COLOR_BLACK;
 8026556:	4b1d      	ldr	r3, [pc, #116]	; (80265cc <tos_SettingsScreen_Init+0xb4>)
 8026558:	2200      	movs	r2, #0
 802655a:	841a      	strh	r2, [r3, #32]
			if(theme){
 802655c:	79fb      	ldrb	r3, [r7, #7]
 802655e:	2b00      	cmp	r3, #0
 8026560:	d009      	beq.n	8026576 <tos_SettingsScreen_Init+0x5e>
				style_screen.body.main_color = LV_COLOR_BLACK;
 8026562:	4b1c      	ldr	r3, [pc, #112]	; (80265d4 <tos_SettingsScreen_Init+0xbc>)
 8026564:	2200      	movs	r2, #0
 8026566:	805a      	strh	r2, [r3, #2]
				style_screen.body.grad_color = LV_COLOR_BLACK;
 8026568:	4b1a      	ldr	r3, [pc, #104]	; (80265d4 <tos_SettingsScreen_Init+0xbc>)
 802656a:	2200      	movs	r2, #0
 802656c:	809a      	strh	r2, [r3, #4]
				description_Style.text.color = LV_COLOR_WHITE;
 802656e:	4a17      	ldr	r2, [pc, #92]	; (80265cc <tos_SettingsScreen_Init+0xb4>)
 8026570:	4b19      	ldr	r3, [pc, #100]	; (80265d8 <tos_SettingsScreen_Init+0xc0>)
 8026572:	881b      	ldrh	r3, [r3, #0]
 8026574:	8413      	strh	r3, [r2, #32]
			}lv_obj_set_style(lv_scr_act(), &style_screen);
 8026576:	f7ff ffb5 	bl	80264e4 <lv_scr_act>
 802657a:	4603      	mov	r3, r0
 802657c:	4915      	ldr	r1, [pc, #84]	; (80265d4 <tos_SettingsScreen_Init+0xbc>)
 802657e:	4618      	mov	r0, r3
 8026580:	f7e3 f91b 	bl	80097ba <lv_obj_set_style>
			Stheme=theme;
 8026584:	4a15      	ldr	r2, [pc, #84]	; (80265dc <tos_SettingsScreen_Init+0xc4>)
 8026586:	79fb      	ldrb	r3, [r7, #7]
 8026588:	7013      	strb	r3, [r2, #0]
			isMenuOpen=true;
 802658a:	4b15      	ldr	r3, [pc, #84]	; (80265e0 <tos_SettingsScreen_Init+0xc8>)
 802658c:	2201      	movs	r2, #1
 802658e:	701a      	strb	r2, [r3, #0]
			S_hrtc=hrtc;
 8026590:	4a14      	ldr	r2, [pc, #80]	; (80265e4 <tos_SettingsScreen_Init+0xcc>)
 8026592:	683b      	ldr	r3, [r7, #0]
 8026594:	6013      	str	r3, [r2, #0]
			SettingsScreen_clockInit(theme);
 8026596:	79fb      	ldrb	r3, [r7, #7]
 8026598:	4618      	mov	r0, r3
 802659a:	f000 f825 	bl	80265e8 <SettingsScreen_clockInit>
			SettingsScreen_dateInit(theme);
 802659e:	79fb      	ldrb	r3, [r7, #7]
 80265a0:	4618      	mov	r0, r3
 80265a2:	f000 f8b7 	bl	8026714 <SettingsScreen_dateInit>
			SettingsScreen_bluetoothInit(theme);
 80265a6:	79fb      	ldrb	r3, [r7, #7]
 80265a8:	4618      	mov	r0, r3
 80265aa:	f000 f949 	bl	8026840 <SettingsScreen_bluetoothInit>
			SettingsScreen_unitTypeInit(theme);
 80265ae:	79fb      	ldrb	r3, [r7, #7]
 80265b0:	4618      	mov	r0, r3
 80265b2:	f000 f9cb 	bl	802694c <SettingsScreen_unitTypeInit>
			SettingsScreen_buttonsInit(theme);
 80265b6:	79fb      	ldrb	r3, [r7, #7]
 80265b8:	4618      	mov	r0, r3
 80265ba:	f000 fa77 	bl	8026aac <SettingsScreen_buttonsInit>

}
 80265be:	bf00      	nop
 80265c0:	3708      	adds	r7, #8
 80265c2:	46bd      	mov	sp, r7
 80265c4:	bd80      	pop	{r7, pc}
 80265c6:	bf00      	nop
 80265c8:	2001ba10 	.word	0x2001ba10
 80265cc:	2001b0b0 	.word	0x2001b0b0
 80265d0:	20002398 	.word	0x20002398
 80265d4:	2001b074 	.word	0x2001b074
 80265d8:	0802cc74 	.word	0x0802cc74
 80265dc:	2001bda7 	.word	0x2001bda7
 80265e0:	2001bdc0 	.word	0x2001bdc0
 80265e4:	2001bdc4 	.word	0x2001bdc4

080265e8 <SettingsScreen_clockInit>:
/**/
void SettingsScreen_clockInit(bool theme){
 80265e8:	b590      	push	{r4, r7, lr}
 80265ea:	b087      	sub	sp, #28
 80265ec:	af02      	add	r7, sp, #8
 80265ee:	4603      	mov	r3, r0
 80265f0:	71fb      	strb	r3, [r7, #7]

	 	static lv_style_t obj_Style;
	    lv_style_copy(&obj_Style, &lv_style_plain);
 80265f2:	493c      	ldr	r1, [pc, #240]	; (80266e4 <SettingsScreen_clockInit+0xfc>)
 80265f4:	483c      	ldr	r0, [pc, #240]	; (80266e8 <SettingsScreen_clockInit+0x100>)
 80265f6:	f7e4 fe7f 	bl	800b2f8 <lv_style_copy>
	    obj_Style.text.color = LV_COLOR_BLACK;
 80265fa:	4b3b      	ldr	r3, [pc, #236]	; (80266e8 <SettingsScreen_clockInit+0x100>)
 80265fc:	2200      	movs	r2, #0
 80265fe:	841a      	strh	r2, [r3, #32]
	    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 8026600:	79fb      	ldrb	r3, [r7, #7]
 8026602:	2b00      	cmp	r3, #0
 8026604:	d003      	beq.n	802660e <SettingsScreen_clockInit+0x26>
 8026606:	4a38      	ldr	r2, [pc, #224]	; (80266e8 <SettingsScreen_clockInit+0x100>)
 8026608:	4b38      	ldr	r3, [pc, #224]	; (80266ec <SettingsScreen_clockInit+0x104>)
 802660a:	881b      	ldrh	r3, [r3, #0]
 802660c:	8413      	strh	r3, [r2, #32]
	    obj_Style.text.font = &digital_font_for_number_30;
 802660e:	4b36      	ldr	r3, [pc, #216]	; (80266e8 <SettingsScreen_clockInit+0x100>)
 8026610:	4a37      	ldr	r2, [pc, #220]	; (80266f0 <SettingsScreen_clockInit+0x108>)
 8026612:	625a      	str	r2, [r3, #36]	; 0x24
	    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8026614:	4c34      	ldr	r4, [pc, #208]	; (80266e8 <SettingsScreen_clockInit+0x100>)
 8026616:	2200      	movs	r2, #0
 8026618:	21a5      	movs	r1, #165	; 0xa5
 802661a:	20ff      	movs	r0, #255	; 0xff
 802661c:	f7ff ff16 	bl	802644c <lv_color_make>
 8026620:	8060      	strh	r0, [r4, #2]
	    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8026622:	4c31      	ldr	r4, [pc, #196]	; (80266e8 <SettingsScreen_clockInit+0x100>)
 8026624:	2200      	movs	r2, #0
 8026626:	21a5      	movs	r1, #165	; 0xa5
 8026628:	20ff      	movs	r0, #255	; 0xff
 802662a:	f7ff ff0f 	bl	802644c <lv_color_make>
 802662e:	80a0      	strh	r0, [r4, #4]
	    obj_Style.body.radius= 10;
 8026630:	4b2d      	ldr	r3, [pc, #180]	; (80266e8 <SettingsScreen_clockInit+0x100>)
 8026632:	220a      	movs	r2, #10
 8026634:	80da      	strh	r2, [r3, #6]
	    obj_Style.body.opa=200;
 8026636:	4b2c      	ldr	r3, [pc, #176]	; (80266e8 <SettingsScreen_clockInit+0x100>)
 8026638:	22c8      	movs	r2, #200	; 0xc8
 802663a:	721a      	strb	r2, [r3, #8]

	    lv_obj_t * clockLbl = lv_label_create(lv_scr_act(), NULL);
 802663c:	f7ff ff52 	bl	80264e4 <lv_scr_act>
 8026640:	4603      	mov	r3, r0
 8026642:	2100      	movs	r1, #0
 8026644:	4618      	mov	r0, r3
 8026646:	f7f5 fd2b 	bl	801c0a0 <lv_label_create>
 802664a:	60f8      	str	r0, [r7, #12]
	 	lv_label_set_style(clockLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802664c:	4a29      	ldr	r2, [pc, #164]	; (80266f4 <SettingsScreen_clockInit+0x10c>)
 802664e:	2100      	movs	r1, #0
 8026650:	68f8      	ldr	r0, [r7, #12]
 8026652:	f7ff ff52 	bl	80264fa <lv_label_set_style>
		lv_label_set_text(clockLbl, "Clock:");
 8026656:	4928      	ldr	r1, [pc, #160]	; (80266f8 <SettingsScreen_clockInit+0x110>)
 8026658:	68f8      	ldr	r0, [r7, #12]
 802665a:	f7f5 fe53 	bl	801c304 <lv_label_set_text>
	 	lv_obj_align(clockLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 40);
 802665e:	2328      	movs	r3, #40	; 0x28
 8026660:	9300      	str	r3, [sp, #0]
 8026662:	2314      	movs	r3, #20
 8026664:	2201      	movs	r2, #1
 8026666:	2100      	movs	r1, #0
 8026668:	68f8      	ldr	r0, [r7, #12]
 802666a:	f7e2 fc01 	bl	8008e70 <lv_obj_align>

    S_ClockLbl = lv_label_create(lv_scr_act(), NULL);
 802666e:	f7ff ff39 	bl	80264e4 <lv_scr_act>
 8026672:	4603      	mov	r3, r0
 8026674:	2100      	movs	r1, #0
 8026676:	4618      	mov	r0, r3
 8026678:	f7f5 fd12 	bl	801c0a0 <lv_label_create>
 802667c:	4602      	mov	r2, r0
 802667e:	4b1f      	ldr	r3, [pc, #124]	; (80266fc <SettingsScreen_clockInit+0x114>)
 8026680:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(S_ClockLbl, true);
 8026682:	4b1e      	ldr	r3, [pc, #120]	; (80266fc <SettingsScreen_clockInit+0x114>)
 8026684:	681b      	ldr	r3, [r3, #0]
 8026686:	2101      	movs	r1, #1
 8026688:	4618      	mov	r0, r3
 802668a:	f7f5 ff57 	bl	801c53c <lv_label_set_recolor>
 	lv_label_set_style(S_ClockLbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 802668e:	4b1b      	ldr	r3, [pc, #108]	; (80266fc <SettingsScreen_clockInit+0x114>)
 8026690:	681b      	ldr	r3, [r3, #0]
 8026692:	4a15      	ldr	r2, [pc, #84]	; (80266e8 <SettingsScreen_clockInit+0x100>)
 8026694:	2100      	movs	r1, #0
 8026696:	4618      	mov	r0, r3
 8026698:	f7ff ff2f 	bl	80264fa <lv_label_set_style>
	snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 802669c:	4b18      	ldr	r3, [pc, #96]	; (8026700 <SettingsScreen_clockInit+0x118>)
 802669e:	781b      	ldrb	r3, [r3, #0]
 80266a0:	4619      	mov	r1, r3
 80266a2:	4b18      	ldr	r3, [pc, #96]	; (8026704 <SettingsScreen_clockInit+0x11c>)
 80266a4:	781b      	ldrb	r3, [r3, #0]
 80266a6:	461a      	mov	r2, r3
 80266a8:	4b17      	ldr	r3, [pc, #92]	; (8026708 <SettingsScreen_clockInit+0x120>)
 80266aa:	781b      	ldrb	r3, [r3, #0]
 80266ac:	9301      	str	r3, [sp, #4]
 80266ae:	9200      	str	r2, [sp, #0]
 80266b0:	460b      	mov	r3, r1
 80266b2:	4a16      	ldr	r2, [pc, #88]	; (802670c <SettingsScreen_clockInit+0x124>)
 80266b4:	2140      	movs	r1, #64	; 0x40
 80266b6:	4816      	ldr	r0, [pc, #88]	; (8026710 <SettingsScreen_clockInit+0x128>)
 80266b8:	f004 f8a4 	bl	802a804 <sniprintf>
			Shours,Sminutes,Sseconds);
	lv_label_set_text(S_ClockLbl, settingsBuffer);
 80266bc:	4b0f      	ldr	r3, [pc, #60]	; (80266fc <SettingsScreen_clockInit+0x114>)
 80266be:	681b      	ldr	r3, [r3, #0]
 80266c0:	4913      	ldr	r1, [pc, #76]	; (8026710 <SettingsScreen_clockInit+0x128>)
 80266c2:	4618      	mov	r0, r3
 80266c4:	f7f5 fe1e 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(S_ClockLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 40);
 80266c8:	4b0c      	ldr	r3, [pc, #48]	; (80266fc <SettingsScreen_clockInit+0x114>)
 80266ca:	6818      	ldr	r0, [r3, #0]
 80266cc:	2328      	movs	r3, #40	; 0x28
 80266ce:	9300      	str	r3, [sp, #0]
 80266d0:	f06f 0313 	mvn.w	r3, #19
 80266d4:	2203      	movs	r2, #3
 80266d6:	2100      	movs	r1, #0
 80266d8:	f7e2 fbca 	bl	8008e70 <lv_obj_align>
}
 80266dc:	bf00      	nop
 80266de:	3714      	adds	r7, #20
 80266e0:	46bd      	mov	sp, r7
 80266e2:	bd90      	pop	{r4, r7, pc}
 80266e4:	2001ba10 	.word	0x2001ba10
 80266e8:	2001b164 	.word	0x2001b164
 80266ec:	0802ccac 	.word	0x0802ccac
 80266f0:	200027ec 	.word	0x200027ec
 80266f4:	2001b0b0 	.word	0x2001b0b0
 80266f8:	0802cc78 	.word	0x0802cc78
 80266fc:	2001bdac 	.word	0x2001bdac
 8026700:	2001bda5 	.word	0x2001bda5
 8026704:	2001bdb0 	.word	0x2001bdb0
 8026708:	2001bdc3 	.word	0x2001bdc3
 802670c:	0802cc80 	.word	0x0802cc80
 8026710:	2001bdc8 	.word	0x2001bdc8

08026714 <SettingsScreen_dateInit>:
/**/
void SettingsScreen_dateInit(bool theme){
 8026714:	b590      	push	{r4, r7, lr}
 8026716:	b087      	sub	sp, #28
 8026718:	af02      	add	r7, sp, #8
 802671a:	4603      	mov	r3, r0
 802671c:	71fb      	strb	r3, [r7, #7]

	 	static lv_style_t obj_Style;
	    lv_style_copy(&obj_Style, &lv_style_plain);
 802671e:	493c      	ldr	r1, [pc, #240]	; (8026810 <SettingsScreen_dateInit+0xfc>)
 8026720:	483c      	ldr	r0, [pc, #240]	; (8026814 <SettingsScreen_dateInit+0x100>)
 8026722:	f7e4 fde9 	bl	800b2f8 <lv_style_copy>
	    obj_Style.text.color = LV_COLOR_BLACK;
 8026726:	4b3b      	ldr	r3, [pc, #236]	; (8026814 <SettingsScreen_dateInit+0x100>)
 8026728:	2200      	movs	r2, #0
 802672a:	841a      	strh	r2, [r3, #32]
	    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 802672c:	79fb      	ldrb	r3, [r7, #7]
 802672e:	2b00      	cmp	r3, #0
 8026730:	d003      	beq.n	802673a <SettingsScreen_dateInit+0x26>
 8026732:	4a38      	ldr	r2, [pc, #224]	; (8026814 <SettingsScreen_dateInit+0x100>)
 8026734:	4b38      	ldr	r3, [pc, #224]	; (8026818 <SettingsScreen_dateInit+0x104>)
 8026736:	881b      	ldrh	r3, [r3, #0]
 8026738:	8413      	strh	r3, [r2, #32]
	    obj_Style.text.font = &digital_font_for_number_30;
 802673a:	4b36      	ldr	r3, [pc, #216]	; (8026814 <SettingsScreen_dateInit+0x100>)
 802673c:	4a37      	ldr	r2, [pc, #220]	; (802681c <SettingsScreen_dateInit+0x108>)
 802673e:	625a      	str	r2, [r3, #36]	; 0x24
	    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8026740:	4c34      	ldr	r4, [pc, #208]	; (8026814 <SettingsScreen_dateInit+0x100>)
 8026742:	2200      	movs	r2, #0
 8026744:	21a5      	movs	r1, #165	; 0xa5
 8026746:	20ff      	movs	r0, #255	; 0xff
 8026748:	f7ff fe80 	bl	802644c <lv_color_make>
 802674c:	8060      	strh	r0, [r4, #2]
	    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 802674e:	4c31      	ldr	r4, [pc, #196]	; (8026814 <SettingsScreen_dateInit+0x100>)
 8026750:	2200      	movs	r2, #0
 8026752:	21a5      	movs	r1, #165	; 0xa5
 8026754:	20ff      	movs	r0, #255	; 0xff
 8026756:	f7ff fe79 	bl	802644c <lv_color_make>
 802675a:	80a0      	strh	r0, [r4, #4]
	    obj_Style.body.radius= 10;
 802675c:	4b2d      	ldr	r3, [pc, #180]	; (8026814 <SettingsScreen_dateInit+0x100>)
 802675e:	220a      	movs	r2, #10
 8026760:	80da      	strh	r2, [r3, #6]
	    obj_Style.body.opa=200;
 8026762:	4b2c      	ldr	r3, [pc, #176]	; (8026814 <SettingsScreen_dateInit+0x100>)
 8026764:	22c8      	movs	r2, #200	; 0xc8
 8026766:	721a      	strb	r2, [r3, #8]

	    lv_obj_t * dateLbl = lv_label_create(lv_scr_act(), NULL);
 8026768:	f7ff febc 	bl	80264e4 <lv_scr_act>
 802676c:	4603      	mov	r3, r0
 802676e:	2100      	movs	r1, #0
 8026770:	4618      	mov	r0, r3
 8026772:	f7f5 fc95 	bl	801c0a0 <lv_label_create>
 8026776:	60f8      	str	r0, [r7, #12]
	 	lv_label_set_style(dateLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8026778:	4a29      	ldr	r2, [pc, #164]	; (8026820 <SettingsScreen_dateInit+0x10c>)
 802677a:	2100      	movs	r1, #0
 802677c:	68f8      	ldr	r0, [r7, #12]
 802677e:	f7ff febc 	bl	80264fa <lv_label_set_style>
		lv_label_set_text(dateLbl, "Date:");
 8026782:	4928      	ldr	r1, [pc, #160]	; (8026824 <SettingsScreen_dateInit+0x110>)
 8026784:	68f8      	ldr	r0, [r7, #12]
 8026786:	f7f5 fdbd 	bl	801c304 <lv_label_set_text>
	 	lv_obj_align(dateLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 80);
 802678a:	2350      	movs	r3, #80	; 0x50
 802678c:	9300      	str	r3, [sp, #0]
 802678e:	2314      	movs	r3, #20
 8026790:	2201      	movs	r2, #1
 8026792:	2100      	movs	r1, #0
 8026794:	68f8      	ldr	r0, [r7, #12]
 8026796:	f7e2 fb6b 	bl	8008e70 <lv_obj_align>

    S_DateLbl = lv_label_create(lv_scr_act(), NULL);
 802679a:	f7ff fea3 	bl	80264e4 <lv_scr_act>
 802679e:	4603      	mov	r3, r0
 80267a0:	2100      	movs	r1, #0
 80267a2:	4618      	mov	r0, r3
 80267a4:	f7f5 fc7c 	bl	801c0a0 <lv_label_create>
 80267a8:	4602      	mov	r2, r0
 80267aa:	4b1f      	ldr	r3, [pc, #124]	; (8026828 <SettingsScreen_dateInit+0x114>)
 80267ac:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(S_DateLbl, true);
 80267ae:	4b1e      	ldr	r3, [pc, #120]	; (8026828 <SettingsScreen_dateInit+0x114>)
 80267b0:	681b      	ldr	r3, [r3, #0]
 80267b2:	2101      	movs	r1, #1
 80267b4:	4618      	mov	r0, r3
 80267b6:	f7f5 fec1 	bl	801c53c <lv_label_set_recolor>
 	lv_label_set_style(S_DateLbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 80267ba:	4b1b      	ldr	r3, [pc, #108]	; (8026828 <SettingsScreen_dateInit+0x114>)
 80267bc:	681b      	ldr	r3, [r3, #0]
 80267be:	4a15      	ldr	r2, [pc, #84]	; (8026814 <SettingsScreen_dateInit+0x100>)
 80267c0:	2100      	movs	r1, #0
 80267c2:	4618      	mov	r0, r3
 80267c4:	f7ff fe99 	bl	80264fa <lv_label_set_style>
	snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 80267c8:	4b18      	ldr	r3, [pc, #96]	; (802682c <SettingsScreen_dateInit+0x118>)
 80267ca:	781b      	ldrb	r3, [r3, #0]
 80267cc:	4619      	mov	r1, r3
 80267ce:	4b18      	ldr	r3, [pc, #96]	; (8026830 <SettingsScreen_dateInit+0x11c>)
 80267d0:	781b      	ldrb	r3, [r3, #0]
 80267d2:	461a      	mov	r2, r3
 80267d4:	4b17      	ldr	r3, [pc, #92]	; (8026834 <SettingsScreen_dateInit+0x120>)
 80267d6:	881b      	ldrh	r3, [r3, #0]
 80267d8:	9301      	str	r3, [sp, #4]
 80267da:	9200      	str	r2, [sp, #0]
 80267dc:	460b      	mov	r3, r1
 80267de:	4a16      	ldr	r2, [pc, #88]	; (8026838 <SettingsScreen_dateInit+0x124>)
 80267e0:	2140      	movs	r1, #64	; 0x40
 80267e2:	4816      	ldr	r0, [pc, #88]	; (802683c <SettingsScreen_dateInit+0x128>)
 80267e4:	f004 f80e 	bl	802a804 <sniprintf>
			Sdates,Smonths,Syears);
	lv_label_set_text(S_DateLbl, settingsBuffer);
 80267e8:	4b0f      	ldr	r3, [pc, #60]	; (8026828 <SettingsScreen_dateInit+0x114>)
 80267ea:	681b      	ldr	r3, [r3, #0]
 80267ec:	4913      	ldr	r1, [pc, #76]	; (802683c <SettingsScreen_dateInit+0x128>)
 80267ee:	4618      	mov	r0, r3
 80267f0:	f7f5 fd88 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(S_DateLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 80);
 80267f4:	4b0c      	ldr	r3, [pc, #48]	; (8026828 <SettingsScreen_dateInit+0x114>)
 80267f6:	6818      	ldr	r0, [r3, #0]
 80267f8:	2350      	movs	r3, #80	; 0x50
 80267fa:	9300      	str	r3, [sp, #0]
 80267fc:	f06f 0313 	mvn.w	r3, #19
 8026800:	2203      	movs	r2, #3
 8026802:	2100      	movs	r1, #0
 8026804:	f7e2 fb34 	bl	8008e70 <lv_obj_align>
}
 8026808:	bf00      	nop
 802680a:	3714      	adds	r7, #20
 802680c:	46bd      	mov	sp, r7
 802680e:	bd90      	pop	{r4, r7, pc}
 8026810:	2001ba10 	.word	0x2001ba10
 8026814:	2001b1a0 	.word	0x2001b1a0
 8026818:	0802ccac 	.word	0x0802ccac
 802681c:	200027ec 	.word	0x200027ec
 8026820:	2001b0b0 	.word	0x2001b0b0
 8026824:	0802ccb0 	.word	0x0802ccb0
 8026828:	2001bdbc 	.word	0x2001bdbc
 802682c:	2001bda4 	.word	0x2001bda4
 8026830:	2001bdc2 	.word	0x2001bdc2
 8026834:	2001bdb8 	.word	0x2001bdb8
 8026838:	0802ccb8 	.word	0x0802ccb8
 802683c:	2001bdc8 	.word	0x2001bdc8

08026840 <SettingsScreen_bluetoothInit>:

void SettingsScreen_bluetoothInit(bool theme){
 8026840:	b590      	push	{r4, r7, lr}
 8026842:	b087      	sub	sp, #28
 8026844:	af02      	add	r7, sp, #8
 8026846:	4603      	mov	r3, r0
 8026848:	71fb      	strb	r3, [r7, #7]

    lv_style_copy(&bluetooth_indic_style, &lv_style_pretty_color);
 802684a:	493a      	ldr	r1, [pc, #232]	; (8026934 <SettingsScreen_bluetoothInit+0xf4>)
 802684c:	483a      	ldr	r0, [pc, #232]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 802684e:	f7e4 fd53 	bl	800b2f8 <lv_style_copy>
    bluetooth_indic_style.body.radius = LV_RADIUS_CIRCLE;
 8026852:	4b39      	ldr	r3, [pc, #228]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 8026854:	f647 4218 	movw	r2, #31768	; 0x7c18
 8026858:	80da      	strh	r2, [r3, #6]
    bluetooth_indic_style.body.main_color = lv_color_hex(0x000000);
 802685a:	4c37      	ldr	r4, [pc, #220]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 802685c:	2000      	movs	r0, #0
 802685e:	f7ff fe2d 	bl	80264bc <lv_color_hex>
 8026862:	8060      	strh	r0, [r4, #2]
    bluetooth_indic_style.body.grad_color = lv_color_hex(0x000000);
 8026864:	4c34      	ldr	r4, [pc, #208]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 8026866:	2000      	movs	r0, #0
 8026868:	f7ff fe28 	bl	80264bc <lv_color_hex>
 802686c:	80a0      	strh	r0, [r4, #4]
    if(theme){
 802686e:	79fb      	ldrb	r3, [r7, #7]
 8026870:	2b00      	cmp	r3, #0
 8026872:	d00b      	beq.n	802688c <SettingsScreen_bluetoothInit+0x4c>
    	bluetooth_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8026874:	4c30      	ldr	r4, [pc, #192]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 8026876:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802687a:	f7ff fe1f 	bl	80264bc <lv_color_hex>
 802687e:	8060      	strh	r0, [r4, #2]
    	bluetooth_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 8026880:	4c2d      	ldr	r4, [pc, #180]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 8026882:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8026886:	f7ff fe19 	bl	80264bc <lv_color_hex>
 802688a:	80a0      	strh	r0, [r4, #4]
    }
    bluetooth_indic_style.body.padding.left = 0;
 802688c:	4b2a      	ldr	r3, [pc, #168]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 802688e:	2200      	movs	r2, #0
 8026890:	835a      	strh	r2, [r3, #26]
    bluetooth_indic_style.body.padding.right = 0;
 8026892:	4b29      	ldr	r3, [pc, #164]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 8026894:	2200      	movs	r2, #0
 8026896:	839a      	strh	r2, [r3, #28]
    bluetooth_indic_style.body.padding.top = 0;
 8026898:	4b27      	ldr	r3, [pc, #156]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 802689a:	2200      	movs	r2, #0
 802689c:	82da      	strh	r2, [r3, #22]
    bluetooth_indic_style.body.padding.bottom = 0;
 802689e:	4b26      	ldr	r3, [pc, #152]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 80268a0:	2200      	movs	r2, #0
 80268a2:	831a      	strh	r2, [r3, #24]

    lv_obj_t * bluetoothLbl = lv_label_create(lv_scr_act(), NULL);
 80268a4:	f7ff fe1e 	bl	80264e4 <lv_scr_act>
 80268a8:	4603      	mov	r3, r0
 80268aa:	2100      	movs	r1, #0
 80268ac:	4618      	mov	r0, r3
 80268ae:	f7f5 fbf7 	bl	801c0a0 <lv_label_create>
 80268b2:	60f8      	str	r0, [r7, #12]
 	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80268b4:	4a21      	ldr	r2, [pc, #132]	; (802693c <SettingsScreen_bluetoothInit+0xfc>)
 80268b6:	2100      	movs	r1, #0
 80268b8:	68f8      	ldr	r0, [r7, #12]
 80268ba:	f7ff fe1e 	bl	80264fa <lv_label_set_style>
	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH "Statu:");
 80268be:	4920      	ldr	r1, [pc, #128]	; (8026940 <SettingsScreen_bluetoothInit+0x100>)
 80268c0:	68f8      	ldr	r0, [r7, #12]
 80268c2:	f7f5 fd1f 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 120);
 80268c6:	2378      	movs	r3, #120	; 0x78
 80268c8:	9300      	str	r3, [sp, #0]
 80268ca:	2314      	movs	r3, #20
 80268cc:	2201      	movs	r2, #1
 80268ce:	2100      	movs	r1, #0
 80268d0:	68f8      	ldr	r0, [r7, #12]
 80268d2:	f7e2 facd 	bl	8008e70 <lv_obj_align>

    SbluetoothSwitch = lv_sw_create(lv_scr_act(), NULL);
 80268d6:	f7ff fe05 	bl	80264e4 <lv_scr_act>
 80268da:	4603      	mov	r3, r0
 80268dc:	2100      	movs	r1, #0
 80268de:	4618      	mov	r0, r3
 80268e0:	f7fa fe36 	bl	8021550 <lv_sw_create>
 80268e4:	4602      	mov	r2, r0
 80268e6:	4b17      	ldr	r3, [pc, #92]	; (8026944 <SettingsScreen_bluetoothInit+0x104>)
 80268e8:	601a      	str	r2, [r3, #0]
    lv_sw_set_style(SbluetoothSwitch, LV_SW_STYLE_INDIC, &bluetooth_indic_style);
 80268ea:	4b16      	ldr	r3, [pc, #88]	; (8026944 <SettingsScreen_bluetoothInit+0x104>)
 80268ec:	681b      	ldr	r3, [r3, #0]
 80268ee:	4a12      	ldr	r2, [pc, #72]	; (8026938 <SettingsScreen_bluetoothInit+0xf8>)
 80268f0:	2101      	movs	r1, #1
 80268f2:	4618      	mov	r0, r3
 80268f4:	f7fa ff0a 	bl	802170c <lv_sw_set_style>
    lv_sw_on(SbluetoothSwitch, LV_ANIM_OFF);
 80268f8:	4b12      	ldr	r3, [pc, #72]	; (8026944 <SettingsScreen_bluetoothInit+0x104>)
 80268fa:	681b      	ldr	r3, [r3, #0]
 80268fc:	2100      	movs	r1, #0
 80268fe:	4618      	mov	r0, r3
 8026900:	f7fa fece 	bl	80216a0 <lv_sw_on>
    if(SbluetoothStatu)lv_sw_on(SbluetoothSwitch, LV_ANIM_ON);
 8026904:	4b10      	ldr	r3, [pc, #64]	; (8026948 <SettingsScreen_bluetoothInit+0x108>)
 8026906:	781b      	ldrb	r3, [r3, #0]
 8026908:	2b00      	cmp	r3, #0
 802690a:	d005      	beq.n	8026918 <SettingsScreen_bluetoothInit+0xd8>
 802690c:	4b0d      	ldr	r3, [pc, #52]	; (8026944 <SettingsScreen_bluetoothInit+0x104>)
 802690e:	681b      	ldr	r3, [r3, #0]
 8026910:	2101      	movs	r1, #1
 8026912:	4618      	mov	r0, r3
 8026914:	f7fa fec4 	bl	80216a0 <lv_sw_on>
    lv_obj_align(SbluetoothSwitch, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 120);
 8026918:	4b0a      	ldr	r3, [pc, #40]	; (8026944 <SettingsScreen_bluetoothInit+0x104>)
 802691a:	6818      	ldr	r0, [r3, #0]
 802691c:	2378      	movs	r3, #120	; 0x78
 802691e:	9300      	str	r3, [sp, #0]
 8026920:	f06f 0313 	mvn.w	r3, #19
 8026924:	2203      	movs	r2, #3
 8026926:	2100      	movs	r1, #0
 8026928:	f7e2 faa2 	bl	8008e70 <lv_obj_align>
}
 802692c:	bf00      	nop
 802692e:	3714      	adds	r7, #20
 8026930:	46bd      	mov	sp, r7
 8026932:	bd90      	pop	{r4, r7, pc}
 8026934:	2001b830 	.word	0x2001b830
 8026938:	2001b0ec 	.word	0x2001b0ec
 802693c:	2001b0b0 	.word	0x2001b0b0
 8026940:	0802cce4 	.word	0x0802cce4
 8026944:	2001bda8 	.word	0x2001bda8
 8026948:	2001bd99 	.word	0x2001bd99

0802694c <SettingsScreen_unitTypeInit>:
/**/
void SettingsScreen_unitTypeInit(bool theme){
 802694c:	b590      	push	{r4, r7, lr}
 802694e:	b087      	sub	sp, #28
 8026950:	af02      	add	r7, sp, #8
 8026952:	4603      	mov	r3, r0
 8026954:	71fb      	strb	r3, [r7, #7]
	static lv_style_t unitDesc_Style;
	lv_style_copy(&unitDesc_Style, &description_Style);
 8026956:	494c      	ldr	r1, [pc, #304]	; (8026a88 <SettingsScreen_unitTypeInit+0x13c>)
 8026958:	484c      	ldr	r0, [pc, #304]	; (8026a8c <SettingsScreen_unitTypeInit+0x140>)
 802695a:	f7e4 fccd 	bl	800b2f8 <lv_style_copy>
	unitDesc_Style.text.font = &lv_font_unscii_8;
 802695e:	4b4b      	ldr	r3, [pc, #300]	; (8026a8c <SettingsScreen_unitTypeInit+0x140>)
 8026960:	4a4b      	ldr	r2, [pc, #300]	; (8026a90 <SettingsScreen_unitTypeInit+0x144>)
 8026962:	625a      	str	r2, [r3, #36]	; 0x24

    lv_style_copy(&unit_indic_style, &lv_style_pretty_color);
 8026964:	494b      	ldr	r1, [pc, #300]	; (8026a94 <SettingsScreen_unitTypeInit+0x148>)
 8026966:	484c      	ldr	r0, [pc, #304]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 8026968:	f7e4 fcc6 	bl	800b2f8 <lv_style_copy>
    unit_indic_style.body.radius = LV_RADIUS_CIRCLE;
 802696c:	4b4a      	ldr	r3, [pc, #296]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 802696e:	f647 4218 	movw	r2, #31768	; 0x7c18
 8026972:	80da      	strh	r2, [r3, #6]
    unit_indic_style.body.main_color = lv_color_hex(0x000000);
 8026974:	4c48      	ldr	r4, [pc, #288]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 8026976:	2000      	movs	r0, #0
 8026978:	f7ff fda0 	bl	80264bc <lv_color_hex>
 802697c:	8060      	strh	r0, [r4, #2]
    unit_indic_style.body.grad_color = lv_color_hex(0x000000);
 802697e:	4c46      	ldr	r4, [pc, #280]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 8026980:	2000      	movs	r0, #0
 8026982:	f7ff fd9b 	bl	80264bc <lv_color_hex>
 8026986:	80a0      	strh	r0, [r4, #4]
    if(theme){
 8026988:	79fb      	ldrb	r3, [r7, #7]
 802698a:	2b00      	cmp	r3, #0
 802698c:	d00b      	beq.n	80269a6 <SettingsScreen_unitTypeInit+0x5a>
    	unit_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 802698e:	4c42      	ldr	r4, [pc, #264]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 8026990:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8026994:	f7ff fd92 	bl	80264bc <lv_color_hex>
 8026998:	8060      	strh	r0, [r4, #2]
    	unit_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 802699a:	4c3f      	ldr	r4, [pc, #252]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 802699c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80269a0:	f7ff fd8c 	bl	80264bc <lv_color_hex>
 80269a4:	80a0      	strh	r0, [r4, #4]
    }
    unit_indic_style.body.padding.left = 0;
 80269a6:	4b3c      	ldr	r3, [pc, #240]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 80269a8:	2200      	movs	r2, #0
 80269aa:	835a      	strh	r2, [r3, #26]
    unit_indic_style.body.padding.right = 0;
 80269ac:	4b3a      	ldr	r3, [pc, #232]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 80269ae:	2200      	movs	r2, #0
 80269b0:	839a      	strh	r2, [r3, #28]
    unit_indic_style.body.padding.top = 0;
 80269b2:	4b39      	ldr	r3, [pc, #228]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 80269b4:	2200      	movs	r2, #0
 80269b6:	82da      	strh	r2, [r3, #22]
    unit_indic_style.body.padding.bottom = 0;
 80269b8:	4b37      	ldr	r3, [pc, #220]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 80269ba:	2200      	movs	r2, #0
 80269bc:	831a      	strh	r2, [r3, #24]

    lv_obj_t * unitLbl = lv_label_create(lv_scr_act(), NULL);
 80269be:	f7ff fd91 	bl	80264e4 <lv_scr_act>
 80269c2:	4603      	mov	r3, r0
 80269c4:	2100      	movs	r1, #0
 80269c6:	4618      	mov	r0, r3
 80269c8:	f7f5 fb6a 	bl	801c0a0 <lv_label_create>
 80269cc:	60f8      	str	r0, [r7, #12]
    lv_label_set_style(unitLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80269ce:	4a2e      	ldr	r2, [pc, #184]	; (8026a88 <SettingsScreen_unitTypeInit+0x13c>)
 80269d0:	2100      	movs	r1, #0
 80269d2:	68f8      	ldr	r0, [r7, #12]
 80269d4:	f7ff fd91 	bl	80264fa <lv_label_set_style>
	lv_label_set_text(unitLbl, "Unit:");
 80269d8:	4930      	ldr	r1, [pc, #192]	; (8026a9c <SettingsScreen_unitTypeInit+0x150>)
 80269da:	68f8      	ldr	r0, [r7, #12]
 80269dc:	f7f5 fc92 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(unitLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 160);
 80269e0:	23a0      	movs	r3, #160	; 0xa0
 80269e2:	9300      	str	r3, [sp, #0]
 80269e4:	2314      	movs	r3, #20
 80269e6:	2201      	movs	r2, #1
 80269e8:	2100      	movs	r1, #0
 80269ea:	68f8      	ldr	r0, [r7, #12]
 80269ec:	f7e2 fa40 	bl	8008e70 <lv_obj_align>

    lv_obj_t * unitDescLbl = lv_label_create(lv_scr_act(), NULL);
 80269f0:	f7ff fd78 	bl	80264e4 <lv_scr_act>
 80269f4:	4603      	mov	r3, r0
 80269f6:	2100      	movs	r1, #0
 80269f8:	4618      	mov	r0, r3
 80269fa:	f7f5 fb51 	bl	801c0a0 <lv_label_create>
 80269fe:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(unitDescLbl, LV_LABEL_STYLE_MAIN, &unitDesc_Style);
 8026a00:	4a22      	ldr	r2, [pc, #136]	; (8026a8c <SettingsScreen_unitTypeInit+0x140>)
 8026a02:	2100      	movs	r1, #0
 8026a04:	68b8      	ldr	r0, [r7, #8]
 8026a06:	f7ff fd78 	bl	80264fa <lv_label_set_style>
 	lv_label_set_align(unitDescLbl, LV_LABEL_ALIGN_CENTER);
 8026a0a:	2101      	movs	r1, #1
 8026a0c:	68b8      	ldr	r0, [r7, #8]
 8026a0e:	f7f5 fd71 	bl	801c4f4 <lv_label_set_align>
	lv_label_set_text(unitDescLbl, "KM\n/\nMILES");
 8026a12:	4923      	ldr	r1, [pc, #140]	; (8026aa0 <SettingsScreen_unitTypeInit+0x154>)
 8026a14:	68b8      	ldr	r0, [r7, #8]
 8026a16:	f7f5 fc75 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(unitDescLbl, NULL, LV_ALIGN_IN_TOP_MID, 0, 160);
 8026a1a:	23a0      	movs	r3, #160	; 0xa0
 8026a1c:	9300      	str	r3, [sp, #0]
 8026a1e:	2300      	movs	r3, #0
 8026a20:	2202      	movs	r2, #2
 8026a22:	2100      	movs	r1, #0
 8026a24:	68b8      	ldr	r0, [r7, #8]
 8026a26:	f7e2 fa23 	bl	8008e70 <lv_obj_align>

    unitTypeSwitch = lv_sw_create(lv_scr_act(), NULL);
 8026a2a:	f7ff fd5b 	bl	80264e4 <lv_scr_act>
 8026a2e:	4603      	mov	r3, r0
 8026a30:	2100      	movs	r1, #0
 8026a32:	4618      	mov	r0, r3
 8026a34:	f7fa fd8c 	bl	8021550 <lv_sw_create>
 8026a38:	4602      	mov	r2, r0
 8026a3a:	4b1a      	ldr	r3, [pc, #104]	; (8026aa4 <SettingsScreen_unitTypeInit+0x158>)
 8026a3c:	601a      	str	r2, [r3, #0]
    lv_sw_set_style(unitTypeSwitch, LV_SW_STYLE_INDIC, &unit_indic_style);
 8026a3e:	4b19      	ldr	r3, [pc, #100]	; (8026aa4 <SettingsScreen_unitTypeInit+0x158>)
 8026a40:	681b      	ldr	r3, [r3, #0]
 8026a42:	4a15      	ldr	r2, [pc, #84]	; (8026a98 <SettingsScreen_unitTypeInit+0x14c>)
 8026a44:	2101      	movs	r1, #1
 8026a46:	4618      	mov	r0, r3
 8026a48:	f7fa fe60 	bl	802170c <lv_sw_set_style>
    lv_sw_on(unitTypeSwitch, LV_ANIM_OFF);
 8026a4c:	4b15      	ldr	r3, [pc, #84]	; (8026aa4 <SettingsScreen_unitTypeInit+0x158>)
 8026a4e:	681b      	ldr	r3, [r3, #0]
 8026a50:	2100      	movs	r1, #0
 8026a52:	4618      	mov	r0, r3
 8026a54:	f7fa fe24 	bl	80216a0 <lv_sw_on>
    if(SunitType)lv_sw_on(unitTypeSwitch, LV_ANIM_ON);
 8026a58:	4b13      	ldr	r3, [pc, #76]	; (8026aa8 <SettingsScreen_unitTypeInit+0x15c>)
 8026a5a:	781b      	ldrb	r3, [r3, #0]
 8026a5c:	2b00      	cmp	r3, #0
 8026a5e:	d005      	beq.n	8026a6c <SettingsScreen_unitTypeInit+0x120>
 8026a60:	4b10      	ldr	r3, [pc, #64]	; (8026aa4 <SettingsScreen_unitTypeInit+0x158>)
 8026a62:	681b      	ldr	r3, [r3, #0]
 8026a64:	2101      	movs	r1, #1
 8026a66:	4618      	mov	r0, r3
 8026a68:	f7fa fe1a 	bl	80216a0 <lv_sw_on>
    lv_obj_align(unitTypeSwitch, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 160);
 8026a6c:	4b0d      	ldr	r3, [pc, #52]	; (8026aa4 <SettingsScreen_unitTypeInit+0x158>)
 8026a6e:	6818      	ldr	r0, [r3, #0]
 8026a70:	23a0      	movs	r3, #160	; 0xa0
 8026a72:	9300      	str	r3, [sp, #0]
 8026a74:	f06f 0313 	mvn.w	r3, #19
 8026a78:	2203      	movs	r2, #3
 8026a7a:	2100      	movs	r1, #0
 8026a7c:	f7e2 f9f8 	bl	8008e70 <lv_obj_align>
}
 8026a80:	bf00      	nop
 8026a82:	3714      	adds	r7, #20
 8026a84:	46bd      	mov	sp, r7
 8026a86:	bd90      	pop	{r4, r7, pc}
 8026a88:	2001b0b0 	.word	0x2001b0b0
 8026a8c:	2001b1dc 	.word	0x2001b1dc
 8026a90:	200026d0 	.word	0x200026d0
 8026a94:	2001b830 	.word	0x2001b830
 8026a98:	2001b128 	.word	0x2001b128
 8026a9c:	0802ccf0 	.word	0x0802ccf0
 8026aa0:	0802ccf8 	.word	0x0802ccf8
 8026aa4:	2001bda0 	.word	0x2001bda0
 8026aa8:	2001be0a 	.word	0x2001be0a

08026aac <SettingsScreen_buttonsInit>:
/**/
void SettingsScreen_buttonsInit(bool theme){
 8026aac:	b580      	push	{r7, lr}
 8026aae:	b086      	sub	sp, #24
 8026ab0:	af02      	add	r7, sp, #8
 8026ab2:	4603      	mov	r3, r0
 8026ab4:	71fb      	strb	r3, [r7, #7]
	static lv_style_t scrl_style,bg_style;
	lv_style_copy(&scrl_style, &lv_style_plain);
 8026ab6:	4963      	ldr	r1, [pc, #396]	; (8026c44 <SettingsScreen_buttonsInit+0x198>)
 8026ab8:	4863      	ldr	r0, [pc, #396]	; (8026c48 <SettingsScreen_buttonsInit+0x19c>)
 8026aba:	f7e4 fc1d 	bl	800b2f8 <lv_style_copy>
	scrl_style.body.main_color = LV_COLOR_SILVER;
 8026abe:	4a62      	ldr	r2, [pc, #392]	; (8026c48 <SettingsScreen_buttonsInit+0x19c>)
 8026ac0:	4b62      	ldr	r3, [pc, #392]	; (8026c4c <SettingsScreen_buttonsInit+0x1a0>)
 8026ac2:	881b      	ldrh	r3, [r3, #0]
 8026ac4:	8053      	strh	r3, [r2, #2]
	scrl_style.body.grad_color = LV_COLOR_SILVER;
 8026ac6:	4a60      	ldr	r2, [pc, #384]	; (8026c48 <SettingsScreen_buttonsInit+0x19c>)
 8026ac8:	4b60      	ldr	r3, [pc, #384]	; (8026c4c <SettingsScreen_buttonsInit+0x1a0>)
 8026aca:	881b      	ldrh	r3, [r3, #0]
 8026acc:	8093      	strh	r3, [r2, #4]
	scrl_style.body.border.color = LV_COLOR_BLACK;
 8026ace:	4b5e      	ldr	r3, [pc, #376]	; (8026c48 <SettingsScreen_buttonsInit+0x19c>)
 8026ad0:	2200      	movs	r2, #0
 8026ad2:	815a      	strh	r2, [r3, #10]
	scrl_style.body.border.width = 0;
 8026ad4:	4b5c      	ldr	r3, [pc, #368]	; (8026c48 <SettingsScreen_buttonsInit+0x19c>)
 8026ad6:	2200      	movs	r2, #0
 8026ad8:	819a      	strh	r2, [r3, #12]
	scrl_style.text.color = LV_COLOR_WHITE;
 8026ada:	4a5b      	ldr	r2, [pc, #364]	; (8026c48 <SettingsScreen_buttonsInit+0x19c>)
 8026adc:	4b5c      	ldr	r3, [pc, #368]	; (8026c50 <SettingsScreen_buttonsInit+0x1a4>)
 8026ade:	881b      	ldrh	r3, [r3, #0]
 8026ae0:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&bg_style, &lv_style_plain);
 8026ae2:	4958      	ldr	r1, [pc, #352]	; (8026c44 <SettingsScreen_buttonsInit+0x198>)
 8026ae4:	485b      	ldr	r0, [pc, #364]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026ae6:	f7e4 fc07 	bl	800b2f8 <lv_style_copy>
	bg_style.body.main_color = LV_COLOR_BLACK;
 8026aea:	4b5a      	ldr	r3, [pc, #360]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026aec:	2200      	movs	r2, #0
 8026aee:	805a      	strh	r2, [r3, #2]
	bg_style.body.grad_color = LV_COLOR_BLACK;
 8026af0:	4b58      	ldr	r3, [pc, #352]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026af2:	2200      	movs	r2, #0
 8026af4:	809a      	strh	r2, [r3, #4]
	bg_style.body.border.color = LV_COLOR_WHITE;
 8026af6:	4a57      	ldr	r2, [pc, #348]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026af8:	4b55      	ldr	r3, [pc, #340]	; (8026c50 <SettingsScreen_buttonsInit+0x1a4>)
 8026afa:	881b      	ldrh	r3, [r3, #0]
 8026afc:	8153      	strh	r3, [r2, #10]
	bg_style.body.border.width = 0;
 8026afe:	4b55      	ldr	r3, [pc, #340]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026b00:	2200      	movs	r2, #0
 8026b02:	819a      	strh	r2, [r3, #12]
	bg_style.body.border.opa = LV_OPA_90;
 8026b04:	4b53      	ldr	r3, [pc, #332]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026b06:	22e5      	movs	r2, #229	; 0xe5
 8026b08:	73da      	strb	r2, [r3, #15]
	bg_style.body.opa = LV_OPA_90;
 8026b0a:	4b52      	ldr	r3, [pc, #328]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026b0c:	22e5      	movs	r2, #229	; 0xe5
 8026b0e:	721a      	strb	r2, [r3, #8]
	bg_style.text.color = LV_COLOR_WHITE;
 8026b10:	4a50      	ldr	r2, [pc, #320]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026b12:	4b4f      	ldr	r3, [pc, #316]	; (8026c50 <SettingsScreen_buttonsInit+0x1a4>)
 8026b14:	881b      	ldrh	r3, [r3, #0]
 8026b16:	8413      	strh	r3, [r2, #32]
    if(theme){
 8026b18:	79fb      	ldrb	r3, [r7, #7]
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d010      	beq.n	8026b40 <SettingsScreen_buttonsInit+0x94>
		bg_style.body.main_color = LV_COLOR_WHITE;
 8026b1e:	4a4d      	ldr	r2, [pc, #308]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026b20:	4b4b      	ldr	r3, [pc, #300]	; (8026c50 <SettingsScreen_buttonsInit+0x1a4>)
 8026b22:	881b      	ldrh	r3, [r3, #0]
 8026b24:	8053      	strh	r3, [r2, #2]
		bg_style.body.grad_color = LV_COLOR_WHITE;
 8026b26:	4a4b      	ldr	r2, [pc, #300]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026b28:	4b49      	ldr	r3, [pc, #292]	; (8026c50 <SettingsScreen_buttonsInit+0x1a4>)
 8026b2a:	881b      	ldrh	r3, [r3, #0]
 8026b2c:	8093      	strh	r3, [r2, #4]
		bg_style.body.border.color = LV_COLOR_BLACK;
 8026b2e:	4b49      	ldr	r3, [pc, #292]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026b30:	2200      	movs	r2, #0
 8026b32:	815a      	strh	r2, [r3, #10]
		scrl_style.text.color = LV_COLOR_BLACK;
 8026b34:	4b44      	ldr	r3, [pc, #272]	; (8026c48 <SettingsScreen_buttonsInit+0x19c>)
 8026b36:	2200      	movs	r2, #0
 8026b38:	841a      	strh	r2, [r3, #32]
		bg_style.text.color = LV_COLOR_BLACK;
 8026b3a:	4b46      	ldr	r3, [pc, #280]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026b3c:	2200      	movs	r2, #0
 8026b3e:	841a      	strh	r2, [r3, #32]
	 }
    //LV_BTN_STATE_TGL_PR
    //LV_BTN_STATE_REL
    lv_obj_t * saveBtnLbl;

    S_saveBtn = lv_btn_create(lv_scr_act(), NULL);
 8026b40:	f7ff fcd0 	bl	80264e4 <lv_scr_act>
 8026b44:	4603      	mov	r3, r0
 8026b46:	2100      	movs	r1, #0
 8026b48:	4618      	mov	r0, r3
 8026b4a:	f7f1 fc3d 	bl	80183c8 <lv_btn_create>
 8026b4e:	4602      	mov	r2, r0
 8026b50:	4b41      	ldr	r3, [pc, #260]	; (8026c58 <SettingsScreen_buttonsInit+0x1ac>)
 8026b52:	601a      	str	r2, [r3, #0]
    lv_obj_set_width(S_saveBtn,80);
 8026b54:	4b40      	ldr	r3, [pc, #256]	; (8026c58 <SettingsScreen_buttonsInit+0x1ac>)
 8026b56:	681b      	ldr	r3, [r3, #0]
 8026b58:	2150      	movs	r1, #80	; 0x50
 8026b5a:	4618      	mov	r0, r3
 8026b5c:	f7e2 f95e 	bl	8008e1c <lv_obj_set_width>
    lv_obj_set_height(S_saveBtn,30);
 8026b60:	4b3d      	ldr	r3, [pc, #244]	; (8026c58 <SettingsScreen_buttonsInit+0x1ac>)
 8026b62:	681b      	ldr	r3, [r3, #0]
 8026b64:	211e      	movs	r1, #30
 8026b66:	4618      	mov	r0, r3
 8026b68:	f7e2 f96d 	bl	8008e46 <lv_obj_set_height>
    lv_btn_set_style(S_saveBtn, LV_BTN_STYLE_REL,  &scrl_style);
 8026b6c:	4b3a      	ldr	r3, [pc, #232]	; (8026c58 <SettingsScreen_buttonsInit+0x1ac>)
 8026b6e:	681b      	ldr	r3, [r3, #0]
 8026b70:	4a35      	ldr	r2, [pc, #212]	; (8026c48 <SettingsScreen_buttonsInit+0x19c>)
 8026b72:	2100      	movs	r1, #0
 8026b74:	4618      	mov	r0, r3
 8026b76:	f7f1 fd35 	bl	80185e4 <lv_btn_set_style>
    lv_btn_set_style(S_saveBtn, LV_BTN_STYLE_TGL_PR,  &bg_style);
 8026b7a:	4b37      	ldr	r3, [pc, #220]	; (8026c58 <SettingsScreen_buttonsInit+0x1ac>)
 8026b7c:	681b      	ldr	r3, [r3, #0]
 8026b7e:	4a35      	ldr	r2, [pc, #212]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026b80:	2103      	movs	r1, #3
 8026b82:	4618      	mov	r0, r3
 8026b84:	f7f1 fd2e 	bl	80185e4 <lv_btn_set_style>
    lv_obj_align(S_saveBtn, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 200);
 8026b88:	4b33      	ldr	r3, [pc, #204]	; (8026c58 <SettingsScreen_buttonsInit+0x1ac>)
 8026b8a:	6818      	ldr	r0, [r3, #0]
 8026b8c:	23c8      	movs	r3, #200	; 0xc8
 8026b8e:	9300      	str	r3, [sp, #0]
 8026b90:	f06f 0313 	mvn.w	r3, #19
 8026b94:	2203      	movs	r2, #3
 8026b96:	2100      	movs	r1, #0
 8026b98:	f7e2 f96a 	bl	8008e70 <lv_obj_align>
    lv_btn_set_state(S_saveBtn, LV_BTN_STATE_TGL_PR);
 8026b9c:	4b2e      	ldr	r3, [pc, #184]	; (8026c58 <SettingsScreen_buttonsInit+0x1ac>)
 8026b9e:	681b      	ldr	r3, [r3, #0]
 8026ba0:	2103      	movs	r1, #3
 8026ba2:	4618      	mov	r0, r3
 8026ba4:	f7f1 fcf4 	bl	8018590 <lv_btn_set_state>

    saveBtnLbl = lv_label_create(S_saveBtn, NULL);
 8026ba8:	4b2b      	ldr	r3, [pc, #172]	; (8026c58 <SettingsScreen_buttonsInit+0x1ac>)
 8026baa:	681b      	ldr	r3, [r3, #0]
 8026bac:	2100      	movs	r1, #0
 8026bae:	4618      	mov	r0, r3
 8026bb0:	f7f5 fa76 	bl	801c0a0 <lv_label_create>
 8026bb4:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(saveBtnLbl, "Save");
 8026bb6:	4929      	ldr	r1, [pc, #164]	; (8026c5c <SettingsScreen_buttonsInit+0x1b0>)
 8026bb8:	68f8      	ldr	r0, [r7, #12]
 8026bba:	f7f5 fba3 	bl	801c304 <lv_label_set_text>

    lv_obj_t * closeBtnLbl;

    S_closeBtn = lv_btn_create(lv_scr_act(), NULL);
 8026bbe:	f7ff fc91 	bl	80264e4 <lv_scr_act>
 8026bc2:	4603      	mov	r3, r0
 8026bc4:	2100      	movs	r1, #0
 8026bc6:	4618      	mov	r0, r3
 8026bc8:	f7f1 fbfe 	bl	80183c8 <lv_btn_create>
 8026bcc:	4602      	mov	r2, r0
 8026bce:	4b24      	ldr	r3, [pc, #144]	; (8026c60 <SettingsScreen_buttonsInit+0x1b4>)
 8026bd0:	601a      	str	r2, [r3, #0]
    lv_obj_set_width(S_closeBtn,80);
 8026bd2:	4b23      	ldr	r3, [pc, #140]	; (8026c60 <SettingsScreen_buttonsInit+0x1b4>)
 8026bd4:	681b      	ldr	r3, [r3, #0]
 8026bd6:	2150      	movs	r1, #80	; 0x50
 8026bd8:	4618      	mov	r0, r3
 8026bda:	f7e2 f91f 	bl	8008e1c <lv_obj_set_width>
    lv_obj_set_height(S_closeBtn,30);
 8026bde:	4b20      	ldr	r3, [pc, #128]	; (8026c60 <SettingsScreen_buttonsInit+0x1b4>)
 8026be0:	681b      	ldr	r3, [r3, #0]
 8026be2:	211e      	movs	r1, #30
 8026be4:	4618      	mov	r0, r3
 8026be6:	f7e2 f92e 	bl	8008e46 <lv_obj_set_height>
    lv_btn_set_style(S_closeBtn, LV_BTN_STYLE_REL,  &scrl_style);
 8026bea:	4b1d      	ldr	r3, [pc, #116]	; (8026c60 <SettingsScreen_buttonsInit+0x1b4>)
 8026bec:	681b      	ldr	r3, [r3, #0]
 8026bee:	4a16      	ldr	r2, [pc, #88]	; (8026c48 <SettingsScreen_buttonsInit+0x19c>)
 8026bf0:	2100      	movs	r1, #0
 8026bf2:	4618      	mov	r0, r3
 8026bf4:	f7f1 fcf6 	bl	80185e4 <lv_btn_set_style>
    lv_btn_set_style(S_closeBtn, LV_BTN_STYLE_TGL_PR,  &bg_style);
 8026bf8:	4b19      	ldr	r3, [pc, #100]	; (8026c60 <SettingsScreen_buttonsInit+0x1b4>)
 8026bfa:	681b      	ldr	r3, [r3, #0]
 8026bfc:	4a15      	ldr	r2, [pc, #84]	; (8026c54 <SettingsScreen_buttonsInit+0x1a8>)
 8026bfe:	2103      	movs	r1, #3
 8026c00:	4618      	mov	r0, r3
 8026c02:	f7f1 fcef 	bl	80185e4 <lv_btn_set_style>
    lv_obj_align(S_closeBtn, NULL,LV_ALIGN_IN_TOP_LEFT, 20, 200);
 8026c06:	4b16      	ldr	r3, [pc, #88]	; (8026c60 <SettingsScreen_buttonsInit+0x1b4>)
 8026c08:	6818      	ldr	r0, [r3, #0]
 8026c0a:	23c8      	movs	r3, #200	; 0xc8
 8026c0c:	9300      	str	r3, [sp, #0]
 8026c0e:	2314      	movs	r3, #20
 8026c10:	2201      	movs	r2, #1
 8026c12:	2100      	movs	r1, #0
 8026c14:	f7e2 f92c 	bl	8008e70 <lv_obj_align>
    lv_btn_set_state(S_closeBtn, LV_BTN_STATE_TGL_PR);
 8026c18:	4b11      	ldr	r3, [pc, #68]	; (8026c60 <SettingsScreen_buttonsInit+0x1b4>)
 8026c1a:	681b      	ldr	r3, [r3, #0]
 8026c1c:	2103      	movs	r1, #3
 8026c1e:	4618      	mov	r0, r3
 8026c20:	f7f1 fcb6 	bl	8018590 <lv_btn_set_state>

    closeBtnLbl = lv_label_create(S_closeBtn, NULL);
 8026c24:	4b0e      	ldr	r3, [pc, #56]	; (8026c60 <SettingsScreen_buttonsInit+0x1b4>)
 8026c26:	681b      	ldr	r3, [r3, #0]
 8026c28:	2100      	movs	r1, #0
 8026c2a:	4618      	mov	r0, r3
 8026c2c:	f7f5 fa38 	bl	801c0a0 <lv_label_create>
 8026c30:	60b8      	str	r0, [r7, #8]
    lv_label_set_text(closeBtnLbl, "close");
 8026c32:	490c      	ldr	r1, [pc, #48]	; (8026c64 <SettingsScreen_buttonsInit+0x1b8>)
 8026c34:	68b8      	ldr	r0, [r7, #8]
 8026c36:	f7f5 fb65 	bl	801c304 <lv_label_set_text>
}
 8026c3a:	bf00      	nop
 8026c3c:	3710      	adds	r7, #16
 8026c3e:	46bd      	mov	sp, r7
 8026c40:	bd80      	pop	{r7, pc}
 8026c42:	bf00      	nop
 8026c44:	2001ba10 	.word	0x2001ba10
 8026c48:	2001b218 	.word	0x2001b218
 8026c4c:	0802ccac 	.word	0x0802ccac
 8026c50:	0802cc74 	.word	0x0802cc74
 8026c54:	2001b254 	.word	0x2001b254
 8026c58:	2001bdb4 	.word	0x2001bdb4
 8026c5c:	0802cd04 	.word	0x0802cd04
 8026c60:	2001bd9c 	.word	0x2001bd9c
 8026c64:	0802cd0c 	.word	0x0802cd0c

08026c68 <SettingsScreen_ButtonController>:

/*This function using for control to buttons*/
void SettingsScreen_ButtonController(void){
 8026c68:	b580      	push	{r7, lr}
 8026c6a:	af00      	add	r7, sp, #0
	  if(1==tos_LeftButton_Listenner_For_MenuControl()) {	SettingsScreen_DateUpdateVal(false);
 8026c6c:	f002 fb5a 	bl	8029324 <tos_LeftButton_Listenner_For_MenuControl>
 8026c70:	4603      	mov	r3, r0
 8026c72:	2b01      	cmp	r3, #1
 8026c74:	d134      	bne.n	8026ce0 <SettingsScreen_ButtonController+0x78>
 8026c76:	2000      	movs	r0, #0
 8026c78:	f000 f96c 	bl	8026f54 <SettingsScreen_DateUpdateVal>
		  switch(S_whichItem){
 8026c7c:	4b36      	ldr	r3, [pc, #216]	; (8026d58 <SettingsScreen_ButtonController+0xf0>)
 8026c7e:	781b      	ldrb	r3, [r3, #0]
 8026c80:	2b04      	cmp	r3, #4
 8026c82:	d82d      	bhi.n	8026ce0 <SettingsScreen_ButtonController+0x78>
 8026c84:	a201      	add	r2, pc, #4	; (adr r2, 8026c8c <SettingsScreen_ButtonController+0x24>)
 8026c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026c8a:	bf00      	nop
 8026c8c:	08026ca1 	.word	0x08026ca1
 8026c90:	08026ca9 	.word	0x08026ca9
 8026c94:	08026cb1 	.word	0x08026cb1
 8026c98:	08026cb9 	.word	0x08026cb9
 8026c9c:	08026cc1 	.word	0x08026cc1
		  case 0: SettingsScreen_TimeUpdateVal(false); break;
 8026ca0:	2000      	movs	r0, #0
 8026ca2:	f000 f8e1 	bl	8026e68 <SettingsScreen_TimeUpdateVal>
 8026ca6:	e01b      	b.n	8026ce0 <SettingsScreen_ButtonController+0x78>
		  case 1: SettingsScreen_DateUpdateVal(false); break;
 8026ca8:	2000      	movs	r0, #0
 8026caa:	f000 f953 	bl	8026f54 <SettingsScreen_DateUpdateVal>
 8026cae:	e017      	b.n	8026ce0 <SettingsScreen_ButtonController+0x78>
		  case 2: SettingsScreen_BluetoothUpdateVal(false); break;
 8026cb0:	2000      	movs	r0, #0
 8026cb2:	f000 f9d9 	bl	8027068 <SettingsScreen_BluetoothUpdateVal>
 8026cb6:	e013      	b.n	8026ce0 <SettingsScreen_ButtonController+0x78>
		  case 3: SettingsScreen_UnitUpdateVal(false); break;
 8026cb8:	2000      	movs	r0, #0
 8026cba:	f000 f9fd 	bl	80270b8 <SettingsScreen_UnitUpdateVal>
 8026cbe:	e00f      	b.n	8026ce0 <SettingsScreen_ButtonController+0x78>
		  case 4: lv_btn_set_state(S_closeBtn, LV_BTN_STATE_REL); isMenuOpen=false;
 8026cc0:	4b26      	ldr	r3, [pc, #152]	; (8026d5c <SettingsScreen_ButtonController+0xf4>)
 8026cc2:	681b      	ldr	r3, [r3, #0]
 8026cc4:	2100      	movs	r1, #0
 8026cc6:	4618      	mov	r0, r3
 8026cc8:	f7f1 fc62 	bl	8018590 <lv_btn_set_state>
 8026ccc:	4b24      	ldr	r3, [pc, #144]	; (8026d60 <SettingsScreen_ButtonController+0xf8>)
 8026cce:	2200      	movs	r2, #0
 8026cd0:	701a      	strb	r2, [r3, #0]
			tos_MenuScreen_Init(true,S_hrtc);
 8026cd2:	4b24      	ldr	r3, [pc, #144]	; (8026d64 <SettingsScreen_ButtonController+0xfc>)
 8026cd4:	681b      	ldr	r3, [r3, #0]
 8026cd6:	4619      	mov	r1, r3
 8026cd8:	2001      	movs	r0, #1
 8026cda:	f7fd f97f 	bl	8023fdc <tos_MenuScreen_Init>
		  break;
 8026cde:	bf00      	nop
		  }
	  }
	  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 8026ce0:	f002 faf8 	bl	80292d4 <tos_RightButton_Listenner_For_MenuControl>
 8026ce4:	4603      	mov	r3, r0
 8026ce6:	2b01      	cmp	r3, #1
 8026ce8:	d12c      	bne.n	8026d44 <SettingsScreen_ButtonController+0xdc>
		  //SettingsScreen_DateUpdateVal(true);
		  switch(S_whichItem){
 8026cea:	4b1b      	ldr	r3, [pc, #108]	; (8026d58 <SettingsScreen_ButtonController+0xf0>)
 8026cec:	781b      	ldrb	r3, [r3, #0]
 8026cee:	2b04      	cmp	r3, #4
 8026cf0:	d828      	bhi.n	8026d44 <SettingsScreen_ButtonController+0xdc>
 8026cf2:	a201      	add	r2, pc, #4	; (adr r2, 8026cf8 <SettingsScreen_ButtonController+0x90>)
 8026cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026cf8:	08026d0d 	.word	0x08026d0d
 8026cfc:	08026d15 	.word	0x08026d15
 8026d00:	08026d1d 	.word	0x08026d1d
 8026d04:	08026d25 	.word	0x08026d25
 8026d08:	08026d2d 	.word	0x08026d2d
		  case 0: SettingsScreen_TimeUpdateVal(true); break;
 8026d0c:	2001      	movs	r0, #1
 8026d0e:	f000 f8ab 	bl	8026e68 <SettingsScreen_TimeUpdateVal>
 8026d12:	e017      	b.n	8026d44 <SettingsScreen_ButtonController+0xdc>
		  case 1: SettingsScreen_DateUpdateVal(true); break;
 8026d14:	2001      	movs	r0, #1
 8026d16:	f000 f91d 	bl	8026f54 <SettingsScreen_DateUpdateVal>
 8026d1a:	e013      	b.n	8026d44 <SettingsScreen_ButtonController+0xdc>
		  case 2: SettingsScreen_BluetoothUpdateVal(true); break;
 8026d1c:	2001      	movs	r0, #1
 8026d1e:	f000 f9a3 	bl	8027068 <SettingsScreen_BluetoothUpdateVal>
 8026d22:	e00f      	b.n	8026d44 <SettingsScreen_ButtonController+0xdc>
		  case 3: SettingsScreen_UnitUpdateVal(true); break;
 8026d24:	2001      	movs	r0, #1
 8026d26:	f000 f9c7 	bl	80270b8 <SettingsScreen_UnitUpdateVal>
 8026d2a:	e00b      	b.n	8026d44 <SettingsScreen_ButtonController+0xdc>
		  case 4: lv_btn_set_state(S_saveBtn, LV_BTN_STATE_REL); isMenuOpen=false;
 8026d2c:	4b0e      	ldr	r3, [pc, #56]	; (8026d68 <SettingsScreen_ButtonController+0x100>)
 8026d2e:	681b      	ldr	r3, [r3, #0]
 8026d30:	2100      	movs	r1, #0
 8026d32:	4618      	mov	r0, r3
 8026d34:	f7f1 fc2c 	bl	8018590 <lv_btn_set_state>
 8026d38:	4b09      	ldr	r3, [pc, #36]	; (8026d60 <SettingsScreen_ButtonController+0xf8>)
 8026d3a:	2200      	movs	r2, #0
 8026d3c:	701a      	strb	r2, [r3, #0]
		  SettingsScreen_SetNewValues();
 8026d3e:	f000 fbd5 	bl	80274ec <SettingsScreen_SetNewValues>
		  break;
 8026d42:	bf00      	nop
		  }
	  }
	  if(1==tos_EnterButton_Listenner_For_MenuControl()) {
 8026d44:	f002 fb16 	bl	8029374 <tos_EnterButton_Listenner_For_MenuControl>
 8026d48:	4603      	mov	r3, r0
 8026d4a:	2b01      	cmp	r3, #1
 8026d4c:	d101      	bne.n	8026d52 <SettingsScreen_ButtonController+0xea>
		  SettingsScreen_WhichItemSetVal();
 8026d4e:	f000 f80d 	bl	8026d6c <SettingsScreen_WhichItemSetVal>
		 // SettingsScreen_DateSetVal();
	  }

}
 8026d52:	bf00      	nop
 8026d54:	bd80      	pop	{r7, pc}
 8026d56:	bf00      	nop
 8026d58:	2001be09 	.word	0x2001be09
 8026d5c:	2001bd9c 	.word	0x2001bd9c
 8026d60:	2001bdc0 	.word	0x2001bdc0
 8026d64:	2001bdc4 	.word	0x2001bdc4
 8026d68:	2001bdb4 	.word	0x2001bdb4

08026d6c <SettingsScreen_WhichItemSetVal>:


/*This function using for  control the set which item chouser*/
void SettingsScreen_WhichItemSetVal(void){	//	"%d -%d \n",StimeSetVal,S_whichItem
 8026d6c:	b580      	push	{r7, lr}
 8026d6e:	af00      	add	r7, sp, #0
	if(4==S_whichItem)S_whichItem=0;
 8026d70:	4b1c      	ldr	r3, [pc, #112]	; (8026de4 <SettingsScreen_WhichItemSetVal+0x78>)
 8026d72:	781b      	ldrb	r3, [r3, #0]
 8026d74:	2b04      	cmp	r3, #4
 8026d76:	d102      	bne.n	8026d7e <SettingsScreen_WhichItemSetVal+0x12>
 8026d78:	4b1a      	ldr	r3, [pc, #104]	; (8026de4 <SettingsScreen_WhichItemSetVal+0x78>)
 8026d7a:	2200      	movs	r2, #0
 8026d7c:	701a      	strb	r2, [r3, #0]

	if(0==S_whichItem)SettingsScreen_TimeSetVal();
 8026d7e:	4b19      	ldr	r3, [pc, #100]	; (8026de4 <SettingsScreen_WhichItemSetVal+0x78>)
 8026d80:	781b      	ldrb	r3, [r3, #0]
 8026d82:	2b00      	cmp	r3, #0
 8026d84:	d102      	bne.n	8026d8c <SettingsScreen_WhichItemSetVal+0x20>
 8026d86:	f000 f833 	bl	8026df0 <SettingsScreen_TimeSetVal>
 8026d8a:	e00c      	b.n	8026da6 <SettingsScreen_WhichItemSetVal+0x3a>
	else if(1==S_whichItem)SettingsScreen_DateSetVal();
 8026d8c:	4b15      	ldr	r3, [pc, #84]	; (8026de4 <SettingsScreen_WhichItemSetVal+0x78>)
 8026d8e:	781b      	ldrb	r3, [r3, #0]
 8026d90:	2b01      	cmp	r3, #1
 8026d92:	d102      	bne.n	8026d9a <SettingsScreen_WhichItemSetVal+0x2e>
 8026d94:	f000 f84a 	bl	8026e2c <SettingsScreen_DateSetVal>
 8026d98:	e005      	b.n	8026da6 <SettingsScreen_WhichItemSetVal+0x3a>
	else S_whichItem++;
 8026d9a:	4b12      	ldr	r3, [pc, #72]	; (8026de4 <SettingsScreen_WhichItemSetVal+0x78>)
 8026d9c:	781b      	ldrb	r3, [r3, #0]
 8026d9e:	3301      	adds	r3, #1
 8026da0:	b2da      	uxtb	r2, r3
 8026da2:	4b10      	ldr	r3, [pc, #64]	; (8026de4 <SettingsScreen_WhichItemSetVal+0x78>)
 8026da4:	701a      	strb	r2, [r3, #0]

	SbluetoothSetVal=false;
 8026da6:	4b10      	ldr	r3, [pc, #64]	; (8026de8 <SettingsScreen_WhichItemSetVal+0x7c>)
 8026da8:	2200      	movs	r2, #0
 8026daa:	701a      	strb	r2, [r3, #0]
	if(2==S_whichItem)SbluetoothSetVal=true;
 8026dac:	4b0d      	ldr	r3, [pc, #52]	; (8026de4 <SettingsScreen_WhichItemSetVal+0x78>)
 8026dae:	781b      	ldrb	r3, [r3, #0]
 8026db0:	2b02      	cmp	r3, #2
 8026db2:	d102      	bne.n	8026dba <SettingsScreen_WhichItemSetVal+0x4e>
 8026db4:	4b0c      	ldr	r3, [pc, #48]	; (8026de8 <SettingsScreen_WhichItemSetVal+0x7c>)
 8026db6:	2201      	movs	r2, #1
 8026db8:	701a      	strb	r2, [r3, #0]
	SunitSetVal=false;
 8026dba:	4b0c      	ldr	r3, [pc, #48]	; (8026dec <SettingsScreen_WhichItemSetVal+0x80>)
 8026dbc:	2200      	movs	r2, #0
 8026dbe:	701a      	strb	r2, [r3, #0]
	if(3==S_whichItem)SunitSetVal=true;
 8026dc0:	4b08      	ldr	r3, [pc, #32]	; (8026de4 <SettingsScreen_WhichItemSetVal+0x78>)
 8026dc2:	781b      	ldrb	r3, [r3, #0]
 8026dc4:	2b03      	cmp	r3, #3
 8026dc6:	d102      	bne.n	8026dce <SettingsScreen_WhichItemSetVal+0x62>
 8026dc8:	4b08      	ldr	r3, [pc, #32]	; (8026dec <SettingsScreen_WhichItemSetVal+0x80>)
 8026dca:	2201      	movs	r2, #1
 8026dcc:	701a      	strb	r2, [r3, #0]

	SettingsScreen_newTimeLblController();
 8026dce:	f000 f995 	bl	80270fc <SettingsScreen_newTimeLblController>
	SettingsScreen_newDateLblController();
 8026dd2:	f000 fa51 	bl	8027278 <SettingsScreen_newDateLblController>
	SettingsScreen_newBluetoothValController();
 8026dd6:	f000 fb0d 	bl	80273f4 <SettingsScreen_newBluetoothValController>
	SettingsScreen_newUnitTypeController();
 8026dda:	f000 fb49 	bl	8027470 <SettingsScreen_newUnitTypeController>
}
 8026dde:	bf00      	nop
 8026de0:	bd80      	pop	{r7, pc}
 8026de2:	bf00      	nop
 8026de4:	2001be09 	.word	0x2001be09
 8026de8:	2001be08 	.word	0x2001be08
 8026dec:	2001bda6 	.word	0x2001bda6

08026df0 <SettingsScreen_TimeSetVal>:
/*This function using for  control the set time values chouser*/
void SettingsScreen_TimeSetVal(void){
 8026df0:	b580      	push	{r7, lr}
 8026df2:	af00      	add	r7, sp, #0
	StimeSetVal++;
 8026df4:	4b0b      	ldr	r3, [pc, #44]	; (8026e24 <SettingsScreen_TimeSetVal+0x34>)
 8026df6:	781b      	ldrb	r3, [r3, #0]
 8026df8:	3301      	adds	r3, #1
 8026dfa:	b2da      	uxtb	r2, r3
 8026dfc:	4b09      	ldr	r3, [pc, #36]	; (8026e24 <SettingsScreen_TimeSetVal+0x34>)
 8026dfe:	701a      	strb	r2, [r3, #0]
	if(4==StimeSetVal){StimeSetVal=0; S_whichItem++;}
 8026e00:	4b08      	ldr	r3, [pc, #32]	; (8026e24 <SettingsScreen_TimeSetVal+0x34>)
 8026e02:	781b      	ldrb	r3, [r3, #0]
 8026e04:	2b04      	cmp	r3, #4
 8026e06:	d108      	bne.n	8026e1a <SettingsScreen_TimeSetVal+0x2a>
 8026e08:	4b06      	ldr	r3, [pc, #24]	; (8026e24 <SettingsScreen_TimeSetVal+0x34>)
 8026e0a:	2200      	movs	r2, #0
 8026e0c:	701a      	strb	r2, [r3, #0]
 8026e0e:	4b06      	ldr	r3, [pc, #24]	; (8026e28 <SettingsScreen_TimeSetVal+0x38>)
 8026e10:	781b      	ldrb	r3, [r3, #0]
 8026e12:	3301      	adds	r3, #1
 8026e14:	b2da      	uxtb	r2, r3
 8026e16:	4b04      	ldr	r3, [pc, #16]	; (8026e28 <SettingsScreen_TimeSetVal+0x38>)
 8026e18:	701a      	strb	r2, [r3, #0]
	SettingsScreen_newTimeLblController();
 8026e1a:	f000 f96f 	bl	80270fc <SettingsScreen_newTimeLblController>
}
 8026e1e:	bf00      	nop
 8026e20:	bd80      	pop	{r7, pc}
 8026e22:	bf00      	nop
 8026e24:	2001bdc1 	.word	0x2001bdc1
 8026e28:	2001be09 	.word	0x2001be09

08026e2c <SettingsScreen_DateSetVal>:
/*This function using for  control the set date values chouser*/
void SettingsScreen_DateSetVal(void){
 8026e2c:	b580      	push	{r7, lr}
 8026e2e:	af00      	add	r7, sp, #0
	SdateSetVal++;
 8026e30:	4b0b      	ldr	r3, [pc, #44]	; (8026e60 <SettingsScreen_DateSetVal+0x34>)
 8026e32:	781b      	ldrb	r3, [r3, #0]
 8026e34:	3301      	adds	r3, #1
 8026e36:	b2da      	uxtb	r2, r3
 8026e38:	4b09      	ldr	r3, [pc, #36]	; (8026e60 <SettingsScreen_DateSetVal+0x34>)
 8026e3a:	701a      	strb	r2, [r3, #0]
	if(4==SdateSetVal){SdateSetVal=0; S_whichItem++;}
 8026e3c:	4b08      	ldr	r3, [pc, #32]	; (8026e60 <SettingsScreen_DateSetVal+0x34>)
 8026e3e:	781b      	ldrb	r3, [r3, #0]
 8026e40:	2b04      	cmp	r3, #4
 8026e42:	d108      	bne.n	8026e56 <SettingsScreen_DateSetVal+0x2a>
 8026e44:	4b06      	ldr	r3, [pc, #24]	; (8026e60 <SettingsScreen_DateSetVal+0x34>)
 8026e46:	2200      	movs	r2, #0
 8026e48:	701a      	strb	r2, [r3, #0]
 8026e4a:	4b06      	ldr	r3, [pc, #24]	; (8026e64 <SettingsScreen_DateSetVal+0x38>)
 8026e4c:	781b      	ldrb	r3, [r3, #0]
 8026e4e:	3301      	adds	r3, #1
 8026e50:	b2da      	uxtb	r2, r3
 8026e52:	4b04      	ldr	r3, [pc, #16]	; (8026e64 <SettingsScreen_DateSetVal+0x38>)
 8026e54:	701a      	strb	r2, [r3, #0]
	SettingsScreen_newDateLblController();
 8026e56:	f000 fa0f 	bl	8027278 <SettingsScreen_newDateLblController>
}
 8026e5a:	bf00      	nop
 8026e5c:	bd80      	pop	{r7, pc}
 8026e5e:	bf00      	nop
 8026e60:	2001bd98 	.word	0x2001bd98
 8026e64:	2001be09 	.word	0x2001be09

08026e68 <SettingsScreen_TimeUpdateVal>:
/*This function using for update and plus or minus the time values*/
void SettingsScreen_TimeUpdateVal(bool plus){
 8026e68:	b580      	push	{r7, lr}
 8026e6a:	b082      	sub	sp, #8
 8026e6c:	af00      	add	r7, sp, #0
 8026e6e:	4603      	mov	r3, r0
 8026e70:	71fb      	strb	r3, [r7, #7]
	switch(StimeSetVal){
 8026e72:	4b34      	ldr	r3, [pc, #208]	; (8026f44 <SettingsScreen_TimeUpdateVal+0xdc>)
 8026e74:	781b      	ldrb	r3, [r3, #0]
 8026e76:	2b02      	cmp	r3, #2
 8026e78:	d020      	beq.n	8026ebc <SettingsScreen_TimeUpdateVal+0x54>
 8026e7a:	2b03      	cmp	r3, #3
 8026e7c:	d03a      	beq.n	8026ef4 <SettingsScreen_TimeUpdateVal+0x8c>
 8026e7e:	2b01      	cmp	r3, #1
 8026e80:	d000      	beq.n	8026e84 <SettingsScreen_TimeUpdateVal+0x1c>
	case 3:
		if(plus){
			Sseconds++; if(60==Sseconds)Sseconds=0;
		}else{if(Sseconds>0)Sseconds--;}
		break;
	default: break;
 8026e82:	e058      	b.n	8026f36 <SettingsScreen_TimeUpdateVal+0xce>
		if(plus){
 8026e84:	79fb      	ldrb	r3, [r7, #7]
 8026e86:	2b00      	cmp	r3, #0
 8026e88:	d00d      	beq.n	8026ea6 <SettingsScreen_TimeUpdateVal+0x3e>
			Shours++; if(24==Shours)Shours=0;
 8026e8a:	4b2f      	ldr	r3, [pc, #188]	; (8026f48 <SettingsScreen_TimeUpdateVal+0xe0>)
 8026e8c:	781b      	ldrb	r3, [r3, #0]
 8026e8e:	3301      	adds	r3, #1
 8026e90:	b2da      	uxtb	r2, r3
 8026e92:	4b2d      	ldr	r3, [pc, #180]	; (8026f48 <SettingsScreen_TimeUpdateVal+0xe0>)
 8026e94:	701a      	strb	r2, [r3, #0]
 8026e96:	4b2c      	ldr	r3, [pc, #176]	; (8026f48 <SettingsScreen_TimeUpdateVal+0xe0>)
 8026e98:	781b      	ldrb	r3, [r3, #0]
 8026e9a:	2b18      	cmp	r3, #24
 8026e9c:	d146      	bne.n	8026f2c <SettingsScreen_TimeUpdateVal+0xc4>
 8026e9e:	4b2a      	ldr	r3, [pc, #168]	; (8026f48 <SettingsScreen_TimeUpdateVal+0xe0>)
 8026ea0:	2200      	movs	r2, #0
 8026ea2:	701a      	strb	r2, [r3, #0]
		break;
 8026ea4:	e042      	b.n	8026f2c <SettingsScreen_TimeUpdateVal+0xc4>
		}else{if(Shours>0)Shours--;}
 8026ea6:	4b28      	ldr	r3, [pc, #160]	; (8026f48 <SettingsScreen_TimeUpdateVal+0xe0>)
 8026ea8:	781b      	ldrb	r3, [r3, #0]
 8026eaa:	2b00      	cmp	r3, #0
 8026eac:	d03e      	beq.n	8026f2c <SettingsScreen_TimeUpdateVal+0xc4>
 8026eae:	4b26      	ldr	r3, [pc, #152]	; (8026f48 <SettingsScreen_TimeUpdateVal+0xe0>)
 8026eb0:	781b      	ldrb	r3, [r3, #0]
 8026eb2:	3b01      	subs	r3, #1
 8026eb4:	b2da      	uxtb	r2, r3
 8026eb6:	4b24      	ldr	r3, [pc, #144]	; (8026f48 <SettingsScreen_TimeUpdateVal+0xe0>)
 8026eb8:	701a      	strb	r2, [r3, #0]
		break;
 8026eba:	e037      	b.n	8026f2c <SettingsScreen_TimeUpdateVal+0xc4>
		if(plus){
 8026ebc:	79fb      	ldrb	r3, [r7, #7]
 8026ebe:	2b00      	cmp	r3, #0
 8026ec0:	d00d      	beq.n	8026ede <SettingsScreen_TimeUpdateVal+0x76>
			Sminutes++; if(60==Sminutes)Sminutes=0;
 8026ec2:	4b22      	ldr	r3, [pc, #136]	; (8026f4c <SettingsScreen_TimeUpdateVal+0xe4>)
 8026ec4:	781b      	ldrb	r3, [r3, #0]
 8026ec6:	3301      	adds	r3, #1
 8026ec8:	b2da      	uxtb	r2, r3
 8026eca:	4b20      	ldr	r3, [pc, #128]	; (8026f4c <SettingsScreen_TimeUpdateVal+0xe4>)
 8026ecc:	701a      	strb	r2, [r3, #0]
 8026ece:	4b1f      	ldr	r3, [pc, #124]	; (8026f4c <SettingsScreen_TimeUpdateVal+0xe4>)
 8026ed0:	781b      	ldrb	r3, [r3, #0]
 8026ed2:	2b3c      	cmp	r3, #60	; 0x3c
 8026ed4:	d12c      	bne.n	8026f30 <SettingsScreen_TimeUpdateVal+0xc8>
 8026ed6:	4b1d      	ldr	r3, [pc, #116]	; (8026f4c <SettingsScreen_TimeUpdateVal+0xe4>)
 8026ed8:	2200      	movs	r2, #0
 8026eda:	701a      	strb	r2, [r3, #0]
		break;
 8026edc:	e028      	b.n	8026f30 <SettingsScreen_TimeUpdateVal+0xc8>
		}else{if(Sminutes>0)Sminutes--;}
 8026ede:	4b1b      	ldr	r3, [pc, #108]	; (8026f4c <SettingsScreen_TimeUpdateVal+0xe4>)
 8026ee0:	781b      	ldrb	r3, [r3, #0]
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	d024      	beq.n	8026f30 <SettingsScreen_TimeUpdateVal+0xc8>
 8026ee6:	4b19      	ldr	r3, [pc, #100]	; (8026f4c <SettingsScreen_TimeUpdateVal+0xe4>)
 8026ee8:	781b      	ldrb	r3, [r3, #0]
 8026eea:	3b01      	subs	r3, #1
 8026eec:	b2da      	uxtb	r2, r3
 8026eee:	4b17      	ldr	r3, [pc, #92]	; (8026f4c <SettingsScreen_TimeUpdateVal+0xe4>)
 8026ef0:	701a      	strb	r2, [r3, #0]
		break;
 8026ef2:	e01d      	b.n	8026f30 <SettingsScreen_TimeUpdateVal+0xc8>
		if(plus){
 8026ef4:	79fb      	ldrb	r3, [r7, #7]
 8026ef6:	2b00      	cmp	r3, #0
 8026ef8:	d00d      	beq.n	8026f16 <SettingsScreen_TimeUpdateVal+0xae>
			Sseconds++; if(60==Sseconds)Sseconds=0;
 8026efa:	4b15      	ldr	r3, [pc, #84]	; (8026f50 <SettingsScreen_TimeUpdateVal+0xe8>)
 8026efc:	781b      	ldrb	r3, [r3, #0]
 8026efe:	3301      	adds	r3, #1
 8026f00:	b2da      	uxtb	r2, r3
 8026f02:	4b13      	ldr	r3, [pc, #76]	; (8026f50 <SettingsScreen_TimeUpdateVal+0xe8>)
 8026f04:	701a      	strb	r2, [r3, #0]
 8026f06:	4b12      	ldr	r3, [pc, #72]	; (8026f50 <SettingsScreen_TimeUpdateVal+0xe8>)
 8026f08:	781b      	ldrb	r3, [r3, #0]
 8026f0a:	2b3c      	cmp	r3, #60	; 0x3c
 8026f0c:	d112      	bne.n	8026f34 <SettingsScreen_TimeUpdateVal+0xcc>
 8026f0e:	4b10      	ldr	r3, [pc, #64]	; (8026f50 <SettingsScreen_TimeUpdateVal+0xe8>)
 8026f10:	2200      	movs	r2, #0
 8026f12:	701a      	strb	r2, [r3, #0]
		break;
 8026f14:	e00e      	b.n	8026f34 <SettingsScreen_TimeUpdateVal+0xcc>
		}else{if(Sseconds>0)Sseconds--;}
 8026f16:	4b0e      	ldr	r3, [pc, #56]	; (8026f50 <SettingsScreen_TimeUpdateVal+0xe8>)
 8026f18:	781b      	ldrb	r3, [r3, #0]
 8026f1a:	2b00      	cmp	r3, #0
 8026f1c:	d00a      	beq.n	8026f34 <SettingsScreen_TimeUpdateVal+0xcc>
 8026f1e:	4b0c      	ldr	r3, [pc, #48]	; (8026f50 <SettingsScreen_TimeUpdateVal+0xe8>)
 8026f20:	781b      	ldrb	r3, [r3, #0]
 8026f22:	3b01      	subs	r3, #1
 8026f24:	b2da      	uxtb	r2, r3
 8026f26:	4b0a      	ldr	r3, [pc, #40]	; (8026f50 <SettingsScreen_TimeUpdateVal+0xe8>)
 8026f28:	701a      	strb	r2, [r3, #0]
		break;
 8026f2a:	e003      	b.n	8026f34 <SettingsScreen_TimeUpdateVal+0xcc>
		break;
 8026f2c:	bf00      	nop
 8026f2e:	e002      	b.n	8026f36 <SettingsScreen_TimeUpdateVal+0xce>
		break;
 8026f30:	bf00      	nop
 8026f32:	e000      	b.n	8026f36 <SettingsScreen_TimeUpdateVal+0xce>
		break;
 8026f34:	bf00      	nop
	}
	SettingsScreen_newTimeLblController();
 8026f36:	f000 f8e1 	bl	80270fc <SettingsScreen_newTimeLblController>
}
 8026f3a:	bf00      	nop
 8026f3c:	3708      	adds	r7, #8
 8026f3e:	46bd      	mov	sp, r7
 8026f40:	bd80      	pop	{r7, pc}
 8026f42:	bf00      	nop
 8026f44:	2001bdc1 	.word	0x2001bdc1
 8026f48:	2001bda5 	.word	0x2001bda5
 8026f4c:	2001bdb0 	.word	0x2001bdb0
 8026f50:	2001bdc3 	.word	0x2001bdc3

08026f54 <SettingsScreen_DateUpdateVal>:
/*This function using for  update and plus or minus the date values*/
void SettingsScreen_DateUpdateVal(bool plus){
 8026f54:	b580      	push	{r7, lr}
 8026f56:	b082      	sub	sp, #8
 8026f58:	af00      	add	r7, sp, #0
 8026f5a:	4603      	mov	r3, r0
 8026f5c:	71fb      	strb	r3, [r7, #7]
	switch(SdateSetVal){
 8026f5e:	4b3d      	ldr	r3, [pc, #244]	; (8027054 <SettingsScreen_DateUpdateVal+0x100>)
 8026f60:	781b      	ldrb	r3, [r3, #0]
 8026f62:	2b02      	cmp	r3, #2
 8026f64:	d03b      	beq.n	8026fde <SettingsScreen_DateUpdateVal+0x8a>
 8026f66:	2b03      	cmp	r3, #3
 8026f68:	d052      	beq.n	8027010 <SettingsScreen_DateUpdateVal+0xbc>
 8026f6a:	2b01      	cmp	r3, #1
 8026f6c:	d000      	beq.n	8026f70 <SettingsScreen_DateUpdateVal+0x1c>
	case 3:
		if(plus){
			Syears++;
		}else{if(2020<Syears)Syears--;}
		break;
	default: break;
 8026f6e:	e06b      	b.n	8027048 <SettingsScreen_DateUpdateVal+0xf4>
		if(plus){if(0==Syears%4 && (Sdates<daysofmonths[Smonths-1]+1))Sdates++;
 8026f70:	79fb      	ldrb	r3, [r7, #7]
 8026f72:	2b00      	cmp	r3, #0
 8026f74:	d028      	beq.n	8026fc8 <SettingsScreen_DateUpdateVal+0x74>
 8026f76:	4b38      	ldr	r3, [pc, #224]	; (8027058 <SettingsScreen_DateUpdateVal+0x104>)
 8026f78:	881b      	ldrh	r3, [r3, #0]
 8026f7a:	f003 0303 	and.w	r3, r3, #3
 8026f7e:	b29b      	uxth	r3, r3
 8026f80:	2b00      	cmp	r3, #0
 8026f82:	d111      	bne.n	8026fa8 <SettingsScreen_DateUpdateVal+0x54>
 8026f84:	4b35      	ldr	r3, [pc, #212]	; (802705c <SettingsScreen_DateUpdateVal+0x108>)
 8026f86:	781b      	ldrb	r3, [r3, #0]
 8026f88:	4619      	mov	r1, r3
 8026f8a:	4b35      	ldr	r3, [pc, #212]	; (8027060 <SettingsScreen_DateUpdateVal+0x10c>)
 8026f8c:	781b      	ldrb	r3, [r3, #0]
 8026f8e:	3b01      	subs	r3, #1
 8026f90:	4a34      	ldr	r2, [pc, #208]	; (8027064 <SettingsScreen_DateUpdateVal+0x110>)
 8026f92:	5cd3      	ldrb	r3, [r2, r3]
 8026f94:	3301      	adds	r3, #1
 8026f96:	4299      	cmp	r1, r3
 8026f98:	da06      	bge.n	8026fa8 <SettingsScreen_DateUpdateVal+0x54>
 8026f9a:	4b30      	ldr	r3, [pc, #192]	; (802705c <SettingsScreen_DateUpdateVal+0x108>)
 8026f9c:	781b      	ldrb	r3, [r3, #0]
 8026f9e:	3301      	adds	r3, #1
 8026fa0:	b2da      	uxtb	r2, r3
 8026fa2:	4b2e      	ldr	r3, [pc, #184]	; (802705c <SettingsScreen_DateUpdateVal+0x108>)
 8026fa4:	701a      	strb	r2, [r3, #0]
		break;
 8026fa6:	e04a      	b.n	802703e <SettingsScreen_DateUpdateVal+0xea>
		else if(Sdates<daysofmonths[Smonths-1])Sdates++;
 8026fa8:	4b2d      	ldr	r3, [pc, #180]	; (8027060 <SettingsScreen_DateUpdateVal+0x10c>)
 8026faa:	781b      	ldrb	r3, [r3, #0]
 8026fac:	3b01      	subs	r3, #1
 8026fae:	4a2d      	ldr	r2, [pc, #180]	; (8027064 <SettingsScreen_DateUpdateVal+0x110>)
 8026fb0:	5cd2      	ldrb	r2, [r2, r3]
 8026fb2:	4b2a      	ldr	r3, [pc, #168]	; (802705c <SettingsScreen_DateUpdateVal+0x108>)
 8026fb4:	781b      	ldrb	r3, [r3, #0]
 8026fb6:	429a      	cmp	r2, r3
 8026fb8:	d941      	bls.n	802703e <SettingsScreen_DateUpdateVal+0xea>
 8026fba:	4b28      	ldr	r3, [pc, #160]	; (802705c <SettingsScreen_DateUpdateVal+0x108>)
 8026fbc:	781b      	ldrb	r3, [r3, #0]
 8026fbe:	3301      	adds	r3, #1
 8026fc0:	b2da      	uxtb	r2, r3
 8026fc2:	4b26      	ldr	r3, [pc, #152]	; (802705c <SettingsScreen_DateUpdateVal+0x108>)
 8026fc4:	701a      	strb	r2, [r3, #0]
		break;
 8026fc6:	e03a      	b.n	802703e <SettingsScreen_DateUpdateVal+0xea>
		}else{if(1<Sdates)Sdates--;}
 8026fc8:	4b24      	ldr	r3, [pc, #144]	; (802705c <SettingsScreen_DateUpdateVal+0x108>)
 8026fca:	781b      	ldrb	r3, [r3, #0]
 8026fcc:	2b01      	cmp	r3, #1
 8026fce:	d936      	bls.n	802703e <SettingsScreen_DateUpdateVal+0xea>
 8026fd0:	4b22      	ldr	r3, [pc, #136]	; (802705c <SettingsScreen_DateUpdateVal+0x108>)
 8026fd2:	781b      	ldrb	r3, [r3, #0]
 8026fd4:	3b01      	subs	r3, #1
 8026fd6:	b2da      	uxtb	r2, r3
 8026fd8:	4b20      	ldr	r3, [pc, #128]	; (802705c <SettingsScreen_DateUpdateVal+0x108>)
 8026fda:	701a      	strb	r2, [r3, #0]
		break;
 8026fdc:	e02f      	b.n	802703e <SettingsScreen_DateUpdateVal+0xea>
		if(plus){
 8026fde:	79fb      	ldrb	r3, [r7, #7]
 8026fe0:	2b00      	cmp	r3, #0
 8026fe2:	d00a      	beq.n	8026ffa <SettingsScreen_DateUpdateVal+0xa6>
			if(Smonths<12)Smonths++;
 8026fe4:	4b1e      	ldr	r3, [pc, #120]	; (8027060 <SettingsScreen_DateUpdateVal+0x10c>)
 8026fe6:	781b      	ldrb	r3, [r3, #0]
 8026fe8:	2b0b      	cmp	r3, #11
 8026fea:	d82a      	bhi.n	8027042 <SettingsScreen_DateUpdateVal+0xee>
 8026fec:	4b1c      	ldr	r3, [pc, #112]	; (8027060 <SettingsScreen_DateUpdateVal+0x10c>)
 8026fee:	781b      	ldrb	r3, [r3, #0]
 8026ff0:	3301      	adds	r3, #1
 8026ff2:	b2da      	uxtb	r2, r3
 8026ff4:	4b1a      	ldr	r3, [pc, #104]	; (8027060 <SettingsScreen_DateUpdateVal+0x10c>)
 8026ff6:	701a      	strb	r2, [r3, #0]
		break;
 8026ff8:	e023      	b.n	8027042 <SettingsScreen_DateUpdateVal+0xee>
		}else{if(1<Smonths)Smonths--;}
 8026ffa:	4b19      	ldr	r3, [pc, #100]	; (8027060 <SettingsScreen_DateUpdateVal+0x10c>)
 8026ffc:	781b      	ldrb	r3, [r3, #0]
 8026ffe:	2b01      	cmp	r3, #1
 8027000:	d91f      	bls.n	8027042 <SettingsScreen_DateUpdateVal+0xee>
 8027002:	4b17      	ldr	r3, [pc, #92]	; (8027060 <SettingsScreen_DateUpdateVal+0x10c>)
 8027004:	781b      	ldrb	r3, [r3, #0]
 8027006:	3b01      	subs	r3, #1
 8027008:	b2da      	uxtb	r2, r3
 802700a:	4b15      	ldr	r3, [pc, #84]	; (8027060 <SettingsScreen_DateUpdateVal+0x10c>)
 802700c:	701a      	strb	r2, [r3, #0]
		break;
 802700e:	e018      	b.n	8027042 <SettingsScreen_DateUpdateVal+0xee>
		if(plus){
 8027010:	79fb      	ldrb	r3, [r7, #7]
 8027012:	2b00      	cmp	r3, #0
 8027014:	d006      	beq.n	8027024 <SettingsScreen_DateUpdateVal+0xd0>
			Syears++;
 8027016:	4b10      	ldr	r3, [pc, #64]	; (8027058 <SettingsScreen_DateUpdateVal+0x104>)
 8027018:	881b      	ldrh	r3, [r3, #0]
 802701a:	3301      	adds	r3, #1
 802701c:	b29a      	uxth	r2, r3
 802701e:	4b0e      	ldr	r3, [pc, #56]	; (8027058 <SettingsScreen_DateUpdateVal+0x104>)
 8027020:	801a      	strh	r2, [r3, #0]
		break;
 8027022:	e010      	b.n	8027046 <SettingsScreen_DateUpdateVal+0xf2>
		}else{if(2020<Syears)Syears--;}
 8027024:	4b0c      	ldr	r3, [pc, #48]	; (8027058 <SettingsScreen_DateUpdateVal+0x104>)
 8027026:	881b      	ldrh	r3, [r3, #0]
 8027028:	f240 72e4 	movw	r2, #2020	; 0x7e4
 802702c:	4293      	cmp	r3, r2
 802702e:	d90a      	bls.n	8027046 <SettingsScreen_DateUpdateVal+0xf2>
 8027030:	4b09      	ldr	r3, [pc, #36]	; (8027058 <SettingsScreen_DateUpdateVal+0x104>)
 8027032:	881b      	ldrh	r3, [r3, #0]
 8027034:	3b01      	subs	r3, #1
 8027036:	b29a      	uxth	r2, r3
 8027038:	4b07      	ldr	r3, [pc, #28]	; (8027058 <SettingsScreen_DateUpdateVal+0x104>)
 802703a:	801a      	strh	r2, [r3, #0]
		break;
 802703c:	e003      	b.n	8027046 <SettingsScreen_DateUpdateVal+0xf2>
		break;
 802703e:	bf00      	nop
 8027040:	e002      	b.n	8027048 <SettingsScreen_DateUpdateVal+0xf4>
		break;
 8027042:	bf00      	nop
 8027044:	e000      	b.n	8027048 <SettingsScreen_DateUpdateVal+0xf4>
		break;
 8027046:	bf00      	nop
	}
	SettingsScreen_newDateLblController();
 8027048:	f000 f916 	bl	8027278 <SettingsScreen_newDateLblController>
}
 802704c:	bf00      	nop
 802704e:	3708      	adds	r7, #8
 8027050:	46bd      	mov	sp, r7
 8027052:	bd80      	pop	{r7, pc}
 8027054:	2001bd98 	.word	0x2001bd98
 8027058:	2001bdb8 	.word	0x2001bdb8
 802705c:	2001bda4 	.word	0x2001bda4
 8027060:	2001bdc2 	.word	0x2001bdc2
 8027064:	20002840 	.word	0x20002840

08027068 <SettingsScreen_BluetoothUpdateVal>:
/**/
void SettingsScreen_BluetoothUpdateVal(bool val){
 8027068:	b580      	push	{r7, lr}
 802706a:	b082      	sub	sp, #8
 802706c:	af00      	add	r7, sp, #0
 802706e:	4603      	mov	r3, r0
 8027070:	71fb      	strb	r3, [r7, #7]
	SbluetoothSetVal=true;
 8027072:	4b0e      	ldr	r3, [pc, #56]	; (80270ac <SettingsScreen_BluetoothUpdateVal+0x44>)
 8027074:	2201      	movs	r2, #1
 8027076:	701a      	strb	r2, [r3, #0]

    if(val)lv_sw_on(SbluetoothSwitch, LV_ANIM_ON);
 8027078:	79fb      	ldrb	r3, [r7, #7]
 802707a:	2b00      	cmp	r3, #0
 802707c:	d006      	beq.n	802708c <SettingsScreen_BluetoothUpdateVal+0x24>
 802707e:	4b0c      	ldr	r3, [pc, #48]	; (80270b0 <SettingsScreen_BluetoothUpdateVal+0x48>)
 8027080:	681b      	ldr	r3, [r3, #0]
 8027082:	2101      	movs	r1, #1
 8027084:	4618      	mov	r0, r3
 8027086:	f7fa fb0b 	bl	80216a0 <lv_sw_on>
 802708a:	e005      	b.n	8027098 <SettingsScreen_BluetoothUpdateVal+0x30>
    else lv_sw_off(SbluetoothSwitch, LV_ANIM_ON);
 802708c:	4b08      	ldr	r3, [pc, #32]	; (80270b0 <SettingsScreen_BluetoothUpdateVal+0x48>)
 802708e:	681b      	ldr	r3, [r3, #0]
 8027090:	2101      	movs	r1, #1
 8027092:	4618      	mov	r0, r3
 8027094:	f7fa fb1f 	bl	80216d6 <lv_sw_off>
    SettingsScreen_newBluetoothValController();
 8027098:	f000 f9ac 	bl	80273f4 <SettingsScreen_newBluetoothValController>
    SbluetoothStatu =val;
 802709c:	4a05      	ldr	r2, [pc, #20]	; (80270b4 <SettingsScreen_BluetoothUpdateVal+0x4c>)
 802709e:	79fb      	ldrb	r3, [r7, #7]
 80270a0:	7013      	strb	r3, [r2, #0]
}
 80270a2:	bf00      	nop
 80270a4:	3708      	adds	r7, #8
 80270a6:	46bd      	mov	sp, r7
 80270a8:	bd80      	pop	{r7, pc}
 80270aa:	bf00      	nop
 80270ac:	2001be08 	.word	0x2001be08
 80270b0:	2001bda8 	.word	0x2001bda8
 80270b4:	2001bd99 	.word	0x2001bd99

080270b8 <SettingsScreen_UnitUpdateVal>:
/**/
void SettingsScreen_UnitUpdateVal(bool val){
 80270b8:	b580      	push	{r7, lr}
 80270ba:	b082      	sub	sp, #8
 80270bc:	af00      	add	r7, sp, #0
 80270be:	4603      	mov	r3, r0
 80270c0:	71fb      	strb	r3, [r7, #7]

    if(val)lv_sw_on(unitTypeSwitch, LV_ANIM_ON);
 80270c2:	79fb      	ldrb	r3, [r7, #7]
 80270c4:	2b00      	cmp	r3, #0
 80270c6:	d006      	beq.n	80270d6 <SettingsScreen_UnitUpdateVal+0x1e>
 80270c8:	4b0a      	ldr	r3, [pc, #40]	; (80270f4 <SettingsScreen_UnitUpdateVal+0x3c>)
 80270ca:	681b      	ldr	r3, [r3, #0]
 80270cc:	2101      	movs	r1, #1
 80270ce:	4618      	mov	r0, r3
 80270d0:	f7fa fae6 	bl	80216a0 <lv_sw_on>
 80270d4:	e005      	b.n	80270e2 <SettingsScreen_UnitUpdateVal+0x2a>
    else lv_sw_off(unitTypeSwitch, LV_ANIM_ON);
 80270d6:	4b07      	ldr	r3, [pc, #28]	; (80270f4 <SettingsScreen_UnitUpdateVal+0x3c>)
 80270d8:	681b      	ldr	r3, [r3, #0]
 80270da:	2101      	movs	r1, #1
 80270dc:	4618      	mov	r0, r3
 80270de:	f7fa fafa 	bl	80216d6 <lv_sw_off>
    SettingsScreen_newUnitTypeController();
 80270e2:	f000 f9c5 	bl	8027470 <SettingsScreen_newUnitTypeController>
	SunitType=val;
 80270e6:	4a04      	ldr	r2, [pc, #16]	; (80270f8 <SettingsScreen_UnitUpdateVal+0x40>)
 80270e8:	79fb      	ldrb	r3, [r7, #7]
 80270ea:	7013      	strb	r3, [r2, #0]
}
 80270ec:	bf00      	nop
 80270ee:	3708      	adds	r7, #8
 80270f0:	46bd      	mov	sp, r7
 80270f2:	bd80      	pop	{r7, pc}
 80270f4:	2001bda0 	.word	0x2001bda0
 80270f8:	2001be0a 	.word	0x2001be0a

080270fc <SettingsScreen_newTimeLblController>:

/*This function using for update set time label*/
void SettingsScreen_newTimeLblController(void){
 80270fc:	b580      	push	{r7, lr}
 80270fe:	b082      	sub	sp, #8
 8027100:	af02      	add	r7, sp, #8
	switch(StimeSetVal){
 8027102:	4b4f      	ldr	r3, [pc, #316]	; (8027240 <SettingsScreen_newTimeLblController+0x144>)
 8027104:	781b      	ldrb	r3, [r3, #0]
 8027106:	2b02      	cmp	r3, #2
 8027108:	d029      	beq.n	802715e <SettingsScreen_newTimeLblController+0x62>
 802710a:	2b03      	cmp	r3, #3
 802710c:	d04d      	beq.n	80271aa <SettingsScreen_newTimeLblController+0xae>
 802710e:	2b01      	cmp	r3, #1
 8027110:	d171      	bne.n	80271f6 <SettingsScreen_newTimeLblController+0xfa>
	case 1:
			if(Stheme)
 8027112:	4b4c      	ldr	r3, [pc, #304]	; (8027244 <SettingsScreen_newTimeLblController+0x148>)
 8027114:	781b      	ldrb	r3, [r3, #0]
 8027116:	2b00      	cmp	r3, #0
 8027118:	d010      	beq.n	802713c <SettingsScreen_newTimeLblController+0x40>
				 snprintf(settingsBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 802711a:	4b4b      	ldr	r3, [pc, #300]	; (8027248 <SettingsScreen_newTimeLblController+0x14c>)
 802711c:	781b      	ldrb	r3, [r3, #0]
 802711e:	4619      	mov	r1, r3
 8027120:	4b4a      	ldr	r3, [pc, #296]	; (802724c <SettingsScreen_newTimeLblController+0x150>)
 8027122:	781b      	ldrb	r3, [r3, #0]
 8027124:	461a      	mov	r2, r3
 8027126:	4b4a      	ldr	r3, [pc, #296]	; (8027250 <SettingsScreen_newTimeLblController+0x154>)
 8027128:	781b      	ldrb	r3, [r3, #0]
 802712a:	9301      	str	r3, [sp, #4]
 802712c:	9200      	str	r2, [sp, #0]
 802712e:	460b      	mov	r3, r1
 8027130:	4a48      	ldr	r2, [pc, #288]	; (8027254 <SettingsScreen_newTimeLblController+0x158>)
 8027132:	2140      	movs	r1, #64	; 0x40
 8027134:	4848      	ldr	r0, [pc, #288]	; (8027258 <SettingsScreen_newTimeLblController+0x15c>)
 8027136:	f003 fb65 	bl	802a804 <sniprintf>
					Shours,Sminutes,Sseconds);
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 802713a:	e06d      	b.n	8027218 <SettingsScreen_newTimeLblController+0x11c>
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#",
 802713c:	4b42      	ldr	r3, [pc, #264]	; (8027248 <SettingsScreen_newTimeLblController+0x14c>)
 802713e:	781b      	ldrb	r3, [r3, #0]
 8027140:	4619      	mov	r1, r3
 8027142:	4b42      	ldr	r3, [pc, #264]	; (802724c <SettingsScreen_newTimeLblController+0x150>)
 8027144:	781b      	ldrb	r3, [r3, #0]
 8027146:	461a      	mov	r2, r3
 8027148:	4b41      	ldr	r3, [pc, #260]	; (8027250 <SettingsScreen_newTimeLblController+0x154>)
 802714a:	781b      	ldrb	r3, [r3, #0]
 802714c:	9301      	str	r3, [sp, #4]
 802714e:	9200      	str	r2, [sp, #0]
 8027150:	460b      	mov	r3, r1
 8027152:	4a42      	ldr	r2, [pc, #264]	; (802725c <SettingsScreen_newTimeLblController+0x160>)
 8027154:	2140      	movs	r1, #64	; 0x40
 8027156:	4840      	ldr	r0, [pc, #256]	; (8027258 <SettingsScreen_newTimeLblController+0x15c>)
 8027158:	f003 fb54 	bl	802a804 <sniprintf>
		break;
 802715c:	e05c      	b.n	8027218 <SettingsScreen_newTimeLblController+0x11c>
	case 2:
			if(Stheme)
 802715e:	4b39      	ldr	r3, [pc, #228]	; (8027244 <SettingsScreen_newTimeLblController+0x148>)
 8027160:	781b      	ldrb	r3, [r3, #0]
 8027162:	2b00      	cmp	r3, #0
 8027164:	d010      	beq.n	8027188 <SettingsScreen_newTimeLblController+0x8c>
				 snprintf(settingsBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %02d#",
 8027166:	4b38      	ldr	r3, [pc, #224]	; (8027248 <SettingsScreen_newTimeLblController+0x14c>)
 8027168:	781b      	ldrb	r3, [r3, #0]
 802716a:	4619      	mov	r1, r3
 802716c:	4b37      	ldr	r3, [pc, #220]	; (802724c <SettingsScreen_newTimeLblController+0x150>)
 802716e:	781b      	ldrb	r3, [r3, #0]
 8027170:	461a      	mov	r2, r3
 8027172:	4b37      	ldr	r3, [pc, #220]	; (8027250 <SettingsScreen_newTimeLblController+0x154>)
 8027174:	781b      	ldrb	r3, [r3, #0]
 8027176:	9301      	str	r3, [sp, #4]
 8027178:	9200      	str	r2, [sp, #0]
 802717a:	460b      	mov	r3, r1
 802717c:	4a38      	ldr	r2, [pc, #224]	; (8027260 <SettingsScreen_newTimeLblController+0x164>)
 802717e:	2140      	movs	r1, #64	; 0x40
 8027180:	4835      	ldr	r0, [pc, #212]	; (8027258 <SettingsScreen_newTimeLblController+0x15c>)
 8027182:	f003 fb3f 	bl	802a804 <sniprintf>
					Shours,Sminutes,Sseconds);
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 8027186:	e047      	b.n	8027218 <SettingsScreen_newTimeLblController+0x11c>
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#",
 8027188:	4b2f      	ldr	r3, [pc, #188]	; (8027248 <SettingsScreen_newTimeLblController+0x14c>)
 802718a:	781b      	ldrb	r3, [r3, #0]
 802718c:	4619      	mov	r1, r3
 802718e:	4b2f      	ldr	r3, [pc, #188]	; (802724c <SettingsScreen_newTimeLblController+0x150>)
 8027190:	781b      	ldrb	r3, [r3, #0]
 8027192:	461a      	mov	r2, r3
 8027194:	4b2e      	ldr	r3, [pc, #184]	; (8027250 <SettingsScreen_newTimeLblController+0x154>)
 8027196:	781b      	ldrb	r3, [r3, #0]
 8027198:	9301      	str	r3, [sp, #4]
 802719a:	9200      	str	r2, [sp, #0]
 802719c:	460b      	mov	r3, r1
 802719e:	4a31      	ldr	r2, [pc, #196]	; (8027264 <SettingsScreen_newTimeLblController+0x168>)
 80271a0:	2140      	movs	r1, #64	; 0x40
 80271a2:	482d      	ldr	r0, [pc, #180]	; (8027258 <SettingsScreen_newTimeLblController+0x15c>)
 80271a4:	f003 fb2e 	bl	802a804 <sniprintf>
		break;
 80271a8:	e036      	b.n	8027218 <SettingsScreen_newTimeLblController+0x11c>
	case 3:
		if(Stheme)
 80271aa:	4b26      	ldr	r3, [pc, #152]	; (8027244 <SettingsScreen_newTimeLblController+0x148>)
 80271ac:	781b      	ldrb	r3, [r3, #0]
 80271ae:	2b00      	cmp	r3, #0
 80271b0:	d010      	beq.n	80271d4 <SettingsScreen_newTimeLblController+0xd8>
			 snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %02d#",
 80271b2:	4b25      	ldr	r3, [pc, #148]	; (8027248 <SettingsScreen_newTimeLblController+0x14c>)
 80271b4:	781b      	ldrb	r3, [r3, #0]
 80271b6:	4619      	mov	r1, r3
 80271b8:	4b24      	ldr	r3, [pc, #144]	; (802724c <SettingsScreen_newTimeLblController+0x150>)
 80271ba:	781b      	ldrb	r3, [r3, #0]
 80271bc:	461a      	mov	r2, r3
 80271be:	4b24      	ldr	r3, [pc, #144]	; (8027250 <SettingsScreen_newTimeLblController+0x154>)
 80271c0:	781b      	ldrb	r3, [r3, #0]
 80271c2:	9301      	str	r3, [sp, #4]
 80271c4:	9200      	str	r2, [sp, #0]
 80271c6:	460b      	mov	r3, r1
 80271c8:	4a27      	ldr	r2, [pc, #156]	; (8027268 <SettingsScreen_newTimeLblController+0x16c>)
 80271ca:	2140      	movs	r1, #64	; 0x40
 80271cc:	4822      	ldr	r0, [pc, #136]	; (8027258 <SettingsScreen_newTimeLblController+0x15c>)
 80271ce:	f003 fb19 	bl	802a804 <sniprintf>
					Shours,Sminutes,Sseconds);
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 80271d2:	e021      	b.n	8027218 <SettingsScreen_newTimeLblController+0x11c>
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#",
 80271d4:	4b1c      	ldr	r3, [pc, #112]	; (8027248 <SettingsScreen_newTimeLblController+0x14c>)
 80271d6:	781b      	ldrb	r3, [r3, #0]
 80271d8:	4619      	mov	r1, r3
 80271da:	4b1c      	ldr	r3, [pc, #112]	; (802724c <SettingsScreen_newTimeLblController+0x150>)
 80271dc:	781b      	ldrb	r3, [r3, #0]
 80271de:	461a      	mov	r2, r3
 80271e0:	4b1b      	ldr	r3, [pc, #108]	; (8027250 <SettingsScreen_newTimeLblController+0x154>)
 80271e2:	781b      	ldrb	r3, [r3, #0]
 80271e4:	9301      	str	r3, [sp, #4]
 80271e6:	9200      	str	r2, [sp, #0]
 80271e8:	460b      	mov	r3, r1
 80271ea:	4a20      	ldr	r2, [pc, #128]	; (802726c <SettingsScreen_newTimeLblController+0x170>)
 80271ec:	2140      	movs	r1, #64	; 0x40
 80271ee:	481a      	ldr	r0, [pc, #104]	; (8027258 <SettingsScreen_newTimeLblController+0x15c>)
 80271f0:	f003 fb08 	bl	802a804 <sniprintf>
		break;
 80271f4:	e010      	b.n	8027218 <SettingsScreen_newTimeLblController+0x11c>
	default: snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 80271f6:	4b14      	ldr	r3, [pc, #80]	; (8027248 <SettingsScreen_newTimeLblController+0x14c>)
 80271f8:	781b      	ldrb	r3, [r3, #0]
 80271fa:	4619      	mov	r1, r3
 80271fc:	4b13      	ldr	r3, [pc, #76]	; (802724c <SettingsScreen_newTimeLblController+0x150>)
 80271fe:	781b      	ldrb	r3, [r3, #0]
 8027200:	461a      	mov	r2, r3
 8027202:	4b13      	ldr	r3, [pc, #76]	; (8027250 <SettingsScreen_newTimeLblController+0x154>)
 8027204:	781b      	ldrb	r3, [r3, #0]
 8027206:	9301      	str	r3, [sp, #4]
 8027208:	9200      	str	r2, [sp, #0]
 802720a:	460b      	mov	r3, r1
 802720c:	4a18      	ldr	r2, [pc, #96]	; (8027270 <SettingsScreen_newTimeLblController+0x174>)
 802720e:	2140      	movs	r1, #64	; 0x40
 8027210:	4811      	ldr	r0, [pc, #68]	; (8027258 <SettingsScreen_newTimeLblController+0x15c>)
 8027212:	f003 faf7 	bl	802a804 <sniprintf>
					Shours,Sminutes,Sseconds); break;
 8027216:	bf00      	nop
	}
	lv_label_set_text(S_ClockLbl, settingsBuffer);
 8027218:	4b16      	ldr	r3, [pc, #88]	; (8027274 <SettingsScreen_newTimeLblController+0x178>)
 802721a:	681b      	ldr	r3, [r3, #0]
 802721c:	490e      	ldr	r1, [pc, #56]	; (8027258 <SettingsScreen_newTimeLblController+0x15c>)
 802721e:	4618      	mov	r0, r3
 8027220:	f7f5 f870 	bl	801c304 <lv_label_set_text>
	lv_obj_align(S_ClockLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 40);
 8027224:	4b13      	ldr	r3, [pc, #76]	; (8027274 <SettingsScreen_newTimeLblController+0x178>)
 8027226:	6818      	ldr	r0, [r3, #0]
 8027228:	2328      	movs	r3, #40	; 0x28
 802722a:	9300      	str	r3, [sp, #0]
 802722c:	f06f 0313 	mvn.w	r3, #19
 8027230:	2203      	movs	r2, #3
 8027232:	2100      	movs	r1, #0
 8027234:	f7e1 fe1c 	bl	8008e70 <lv_obj_align>

}
 8027238:	bf00      	nop
 802723a:	46bd      	mov	sp, r7
 802723c:	bd80      	pop	{r7, pc}
 802723e:	bf00      	nop
 8027240:	2001bdc1 	.word	0x2001bdc1
 8027244:	2001bda7 	.word	0x2001bda7
 8027248:	2001bda5 	.word	0x2001bda5
 802724c:	2001bdb0 	.word	0x2001bdb0
 8027250:	2001bdc3 	.word	0x2001bdc3
 8027254:	0802cd14 	.word	0x0802cd14
 8027258:	2001bdc8 	.word	0x2001bdc8
 802725c:	0802cd40 	.word	0x0802cd40
 8027260:	0802cd6c 	.word	0x0802cd6c
 8027264:	0802cd98 	.word	0x0802cd98
 8027268:	0802cdc4 	.word	0x0802cdc4
 802726c:	0802cdf0 	.word	0x0802cdf0
 8027270:	0802cc80 	.word	0x0802cc80
 8027274:	2001bdac 	.word	0x2001bdac

08027278 <SettingsScreen_newDateLblController>:
/*This function using for update set date label*/
void SettingsScreen_newDateLblController(void){
 8027278:	b580      	push	{r7, lr}
 802727a:	b082      	sub	sp, #8
 802727c:	af02      	add	r7, sp, #8
	switch(SdateSetVal){
 802727e:	4b4f      	ldr	r3, [pc, #316]	; (80273bc <SettingsScreen_newDateLblController+0x144>)
 8027280:	781b      	ldrb	r3, [r3, #0]
 8027282:	2b02      	cmp	r3, #2
 8027284:	d029      	beq.n	80272da <SettingsScreen_newDateLblController+0x62>
 8027286:	2b03      	cmp	r3, #3
 8027288:	d04d      	beq.n	8027326 <SettingsScreen_newDateLblController+0xae>
 802728a:	2b01      	cmp	r3, #1
 802728c:	d171      	bne.n	8027372 <SettingsScreen_newDateLblController+0xfa>
	case 1:
			if(Stheme)
 802728e:	4b4c      	ldr	r3, [pc, #304]	; (80273c0 <SettingsScreen_newDateLblController+0x148>)
 8027290:	781b      	ldrb	r3, [r3, #0]
 8027292:	2b00      	cmp	r3, #0
 8027294:	d010      	beq.n	80272b8 <SettingsScreen_newDateLblController+0x40>
				 snprintf(settingsBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 8027296:	4b4b      	ldr	r3, [pc, #300]	; (80273c4 <SettingsScreen_newDateLblController+0x14c>)
 8027298:	781b      	ldrb	r3, [r3, #0]
 802729a:	4619      	mov	r1, r3
 802729c:	4b4a      	ldr	r3, [pc, #296]	; (80273c8 <SettingsScreen_newDateLblController+0x150>)
 802729e:	781b      	ldrb	r3, [r3, #0]
 80272a0:	461a      	mov	r2, r3
 80272a2:	4b4a      	ldr	r3, [pc, #296]	; (80273cc <SettingsScreen_newDateLblController+0x154>)
 80272a4:	881b      	ldrh	r3, [r3, #0]
 80272a6:	9301      	str	r3, [sp, #4]
 80272a8:	9200      	str	r2, [sp, #0]
 80272aa:	460b      	mov	r3, r1
 80272ac:	4a48      	ldr	r2, [pc, #288]	; (80273d0 <SettingsScreen_newDateLblController+0x158>)
 80272ae:	2140      	movs	r1, #64	; 0x40
 80272b0:	4848      	ldr	r0, [pc, #288]	; (80273d4 <SettingsScreen_newDateLblController+0x15c>)
 80272b2:	f003 faa7 	bl	802a804 <sniprintf>
				Sdates,Smonths,Syears);
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %04d#",
				Sdates,Smonths,Syears);
		break;
 80272b6:	e06d      	b.n	8027394 <SettingsScreen_newDateLblController+0x11c>
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %04d#",
 80272b8:	4b42      	ldr	r3, [pc, #264]	; (80273c4 <SettingsScreen_newDateLblController+0x14c>)
 80272ba:	781b      	ldrb	r3, [r3, #0]
 80272bc:	4619      	mov	r1, r3
 80272be:	4b42      	ldr	r3, [pc, #264]	; (80273c8 <SettingsScreen_newDateLblController+0x150>)
 80272c0:	781b      	ldrb	r3, [r3, #0]
 80272c2:	461a      	mov	r2, r3
 80272c4:	4b41      	ldr	r3, [pc, #260]	; (80273cc <SettingsScreen_newDateLblController+0x154>)
 80272c6:	881b      	ldrh	r3, [r3, #0]
 80272c8:	9301      	str	r3, [sp, #4]
 80272ca:	9200      	str	r2, [sp, #0]
 80272cc:	460b      	mov	r3, r1
 80272ce:	4a42      	ldr	r2, [pc, #264]	; (80273d8 <SettingsScreen_newDateLblController+0x160>)
 80272d0:	2140      	movs	r1, #64	; 0x40
 80272d2:	4840      	ldr	r0, [pc, #256]	; (80273d4 <SettingsScreen_newDateLblController+0x15c>)
 80272d4:	f003 fa96 	bl	802a804 <sniprintf>
		break;
 80272d8:	e05c      	b.n	8027394 <SettingsScreen_newDateLblController+0x11c>
	case 2:
			if(Stheme)
 80272da:	4b39      	ldr	r3, [pc, #228]	; (80273c0 <SettingsScreen_newDateLblController+0x148>)
 80272dc:	781b      	ldrb	r3, [r3, #0]
 80272de:	2b00      	cmp	r3, #0
 80272e0:	d010      	beq.n	8027304 <SettingsScreen_newDateLblController+0x8c>
				 snprintf(settingsBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %04d#",
 80272e2:	4b38      	ldr	r3, [pc, #224]	; (80273c4 <SettingsScreen_newDateLblController+0x14c>)
 80272e4:	781b      	ldrb	r3, [r3, #0]
 80272e6:	4619      	mov	r1, r3
 80272e8:	4b37      	ldr	r3, [pc, #220]	; (80273c8 <SettingsScreen_newDateLblController+0x150>)
 80272ea:	781b      	ldrb	r3, [r3, #0]
 80272ec:	461a      	mov	r2, r3
 80272ee:	4b37      	ldr	r3, [pc, #220]	; (80273cc <SettingsScreen_newDateLblController+0x154>)
 80272f0:	881b      	ldrh	r3, [r3, #0]
 80272f2:	9301      	str	r3, [sp, #4]
 80272f4:	9200      	str	r2, [sp, #0]
 80272f6:	460b      	mov	r3, r1
 80272f8:	4a38      	ldr	r2, [pc, #224]	; (80273dc <SettingsScreen_newDateLblController+0x164>)
 80272fa:	2140      	movs	r1, #64	; 0x40
 80272fc:	4835      	ldr	r0, [pc, #212]	; (80273d4 <SettingsScreen_newDateLblController+0x15c>)
 80272fe:	f003 fa81 	bl	802a804 <sniprintf>
				Sdates,Smonths,Syears);
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %04d#",
				Sdates,Smonths,Syears);
		break;
 8027302:	e047      	b.n	8027394 <SettingsScreen_newDateLblController+0x11c>
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %04d#",
 8027304:	4b2f      	ldr	r3, [pc, #188]	; (80273c4 <SettingsScreen_newDateLblController+0x14c>)
 8027306:	781b      	ldrb	r3, [r3, #0]
 8027308:	4619      	mov	r1, r3
 802730a:	4b2f      	ldr	r3, [pc, #188]	; (80273c8 <SettingsScreen_newDateLblController+0x150>)
 802730c:	781b      	ldrb	r3, [r3, #0]
 802730e:	461a      	mov	r2, r3
 8027310:	4b2e      	ldr	r3, [pc, #184]	; (80273cc <SettingsScreen_newDateLblController+0x154>)
 8027312:	881b      	ldrh	r3, [r3, #0]
 8027314:	9301      	str	r3, [sp, #4]
 8027316:	9200      	str	r2, [sp, #0]
 8027318:	460b      	mov	r3, r1
 802731a:	4a31      	ldr	r2, [pc, #196]	; (80273e0 <SettingsScreen_newDateLblController+0x168>)
 802731c:	2140      	movs	r1, #64	; 0x40
 802731e:	482d      	ldr	r0, [pc, #180]	; (80273d4 <SettingsScreen_newDateLblController+0x15c>)
 8027320:	f003 fa70 	bl	802a804 <sniprintf>
		break;
 8027324:	e036      	b.n	8027394 <SettingsScreen_newDateLblController+0x11c>
	case 3:
		if(Stheme)
 8027326:	4b26      	ldr	r3, [pc, #152]	; (80273c0 <SettingsScreen_newDateLblController+0x148>)
 8027328:	781b      	ldrb	r3, [r3, #0]
 802732a:	2b00      	cmp	r3, #0
 802732c:	d010      	beq.n	8027350 <SettingsScreen_newDateLblController+0xd8>
			 snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %04d#",
 802732e:	4b25      	ldr	r3, [pc, #148]	; (80273c4 <SettingsScreen_newDateLblController+0x14c>)
 8027330:	781b      	ldrb	r3, [r3, #0]
 8027332:	4619      	mov	r1, r3
 8027334:	4b24      	ldr	r3, [pc, #144]	; (80273c8 <SettingsScreen_newDateLblController+0x150>)
 8027336:	781b      	ldrb	r3, [r3, #0]
 8027338:	461a      	mov	r2, r3
 802733a:	4b24      	ldr	r3, [pc, #144]	; (80273cc <SettingsScreen_newDateLblController+0x154>)
 802733c:	881b      	ldrh	r3, [r3, #0]
 802733e:	9301      	str	r3, [sp, #4]
 8027340:	9200      	str	r2, [sp, #0]
 8027342:	460b      	mov	r3, r1
 8027344:	4a27      	ldr	r2, [pc, #156]	; (80273e4 <SettingsScreen_newDateLblController+0x16c>)
 8027346:	2140      	movs	r1, #64	; 0x40
 8027348:	4822      	ldr	r0, [pc, #136]	; (80273d4 <SettingsScreen_newDateLblController+0x15c>)
 802734a:	f003 fa5b 	bl	802a804 <sniprintf>
				Sdates,Smonths,Syears);
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %04d#",
				Sdates,Smonths,Syears);
		break;
 802734e:	e021      	b.n	8027394 <SettingsScreen_newDateLblController+0x11c>
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %04d#",
 8027350:	4b1c      	ldr	r3, [pc, #112]	; (80273c4 <SettingsScreen_newDateLblController+0x14c>)
 8027352:	781b      	ldrb	r3, [r3, #0]
 8027354:	4619      	mov	r1, r3
 8027356:	4b1c      	ldr	r3, [pc, #112]	; (80273c8 <SettingsScreen_newDateLblController+0x150>)
 8027358:	781b      	ldrb	r3, [r3, #0]
 802735a:	461a      	mov	r2, r3
 802735c:	4b1b      	ldr	r3, [pc, #108]	; (80273cc <SettingsScreen_newDateLblController+0x154>)
 802735e:	881b      	ldrh	r3, [r3, #0]
 8027360:	9301      	str	r3, [sp, #4]
 8027362:	9200      	str	r2, [sp, #0]
 8027364:	460b      	mov	r3, r1
 8027366:	4a20      	ldr	r2, [pc, #128]	; (80273e8 <SettingsScreen_newDateLblController+0x170>)
 8027368:	2140      	movs	r1, #64	; 0x40
 802736a:	481a      	ldr	r0, [pc, #104]	; (80273d4 <SettingsScreen_newDateLblController+0x15c>)
 802736c:	f003 fa4a 	bl	802a804 <sniprintf>
		break;
 8027370:	e010      	b.n	8027394 <SettingsScreen_newDateLblController+0x11c>
	default: snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 8027372:	4b14      	ldr	r3, [pc, #80]	; (80273c4 <SettingsScreen_newDateLblController+0x14c>)
 8027374:	781b      	ldrb	r3, [r3, #0]
 8027376:	4619      	mov	r1, r3
 8027378:	4b13      	ldr	r3, [pc, #76]	; (80273c8 <SettingsScreen_newDateLblController+0x150>)
 802737a:	781b      	ldrb	r3, [r3, #0]
 802737c:	461a      	mov	r2, r3
 802737e:	4b13      	ldr	r3, [pc, #76]	; (80273cc <SettingsScreen_newDateLblController+0x154>)
 8027380:	881b      	ldrh	r3, [r3, #0]
 8027382:	9301      	str	r3, [sp, #4]
 8027384:	9200      	str	r2, [sp, #0]
 8027386:	460b      	mov	r3, r1
 8027388:	4a18      	ldr	r2, [pc, #96]	; (80273ec <SettingsScreen_newDateLblController+0x174>)
 802738a:	2140      	movs	r1, #64	; 0x40
 802738c:	4811      	ldr	r0, [pc, #68]	; (80273d4 <SettingsScreen_newDateLblController+0x15c>)
 802738e:	f003 fa39 	bl	802a804 <sniprintf>
				Sdates,Smonths,Syears); break;
 8027392:	bf00      	nop
	}
	lv_label_set_text(S_DateLbl, settingsBuffer);
 8027394:	4b16      	ldr	r3, [pc, #88]	; (80273f0 <SettingsScreen_newDateLblController+0x178>)
 8027396:	681b      	ldr	r3, [r3, #0]
 8027398:	490e      	ldr	r1, [pc, #56]	; (80273d4 <SettingsScreen_newDateLblController+0x15c>)
 802739a:	4618      	mov	r0, r3
 802739c:	f7f4 ffb2 	bl	801c304 <lv_label_set_text>
	lv_obj_align(S_DateLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 80);
 80273a0:	4b13      	ldr	r3, [pc, #76]	; (80273f0 <SettingsScreen_newDateLblController+0x178>)
 80273a2:	6818      	ldr	r0, [r3, #0]
 80273a4:	2350      	movs	r3, #80	; 0x50
 80273a6:	9300      	str	r3, [sp, #0]
 80273a8:	f06f 0313 	mvn.w	r3, #19
 80273ac:	2203      	movs	r2, #3
 80273ae:	2100      	movs	r1, #0
 80273b0:	f7e1 fd5e 	bl	8008e70 <lv_obj_align>

}
 80273b4:	bf00      	nop
 80273b6:	46bd      	mov	sp, r7
 80273b8:	bd80      	pop	{r7, pc}
 80273ba:	bf00      	nop
 80273bc:	2001bd98 	.word	0x2001bd98
 80273c0:	2001bda7 	.word	0x2001bda7
 80273c4:	2001bda4 	.word	0x2001bda4
 80273c8:	2001bdc2 	.word	0x2001bdc2
 80273cc:	2001bdb8 	.word	0x2001bdb8
 80273d0:	0802ce1c 	.word	0x0802ce1c
 80273d4:	2001bdc8 	.word	0x2001bdc8
 80273d8:	0802ce48 	.word	0x0802ce48
 80273dc:	0802ce74 	.word	0x0802ce74
 80273e0:	0802cea0 	.word	0x0802cea0
 80273e4:	0802cecc 	.word	0x0802cecc
 80273e8:	0802cef8 	.word	0x0802cef8
 80273ec:	0802ccb8 	.word	0x0802ccb8
 80273f0:	2001bdbc 	.word	0x2001bdbc

080273f4 <SettingsScreen_newBluetoothValController>:
/*This function using for update set bluetooth switch*/
void SettingsScreen_newBluetoothValController(void){
 80273f4:	b598      	push	{r3, r4, r7, lr}
 80273f6:	af00      	add	r7, sp, #0
	if(SbluetoothSetVal){
 80273f8:	4b18      	ldr	r3, [pc, #96]	; (802745c <SettingsScreen_newBluetoothValController+0x68>)
 80273fa:	781b      	ldrb	r3, [r3, #0]
 80273fc:	2b00      	cmp	r3, #0
 80273fe:	d00a      	beq.n	8027416 <SettingsScreen_newBluetoothValController+0x22>
	    bluetooth_indic_style.body.main_color = lv_color_hex(0x9fc8ef);
 8027400:	4c17      	ldr	r4, [pc, #92]	; (8027460 <SettingsScreen_newBluetoothValController+0x6c>)
 8027402:	4818      	ldr	r0, [pc, #96]	; (8027464 <SettingsScreen_newBluetoothValController+0x70>)
 8027404:	f7ff f85a 	bl	80264bc <lv_color_hex>
 8027408:	8060      	strh	r0, [r4, #2]
	    bluetooth_indic_style.body.grad_color = lv_color_hex(0x9fc8ef);
 802740a:	4c15      	ldr	r4, [pc, #84]	; (8027460 <SettingsScreen_newBluetoothValController+0x6c>)
 802740c:	4815      	ldr	r0, [pc, #84]	; (8027464 <SettingsScreen_newBluetoothValController+0x70>)
 802740e:	f7ff f855 	bl	80264bc <lv_color_hex>
 8027412:	80a0      	strh	r0, [r4, #4]
 8027414:	e019      	b.n	802744a <SettingsScreen_newBluetoothValController+0x56>
	}else{
	    bluetooth_indic_style.body.main_color = lv_color_hex(0x000000);
 8027416:	4c12      	ldr	r4, [pc, #72]	; (8027460 <SettingsScreen_newBluetoothValController+0x6c>)
 8027418:	2000      	movs	r0, #0
 802741a:	f7ff f84f 	bl	80264bc <lv_color_hex>
 802741e:	8060      	strh	r0, [r4, #2]
	    bluetooth_indic_style.body.grad_color = lv_color_hex(0x000000);
 8027420:	4c0f      	ldr	r4, [pc, #60]	; (8027460 <SettingsScreen_newBluetoothValController+0x6c>)
 8027422:	2000      	movs	r0, #0
 8027424:	f7ff f84a 	bl	80264bc <lv_color_hex>
 8027428:	80a0      	strh	r0, [r4, #4]
	    if(Stheme){
 802742a:	4b0f      	ldr	r3, [pc, #60]	; (8027468 <SettingsScreen_newBluetoothValController+0x74>)
 802742c:	781b      	ldrb	r3, [r3, #0]
 802742e:	2b00      	cmp	r3, #0
 8027430:	d00b      	beq.n	802744a <SettingsScreen_newBluetoothValController+0x56>
	    	bluetooth_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8027432:	4c0b      	ldr	r4, [pc, #44]	; (8027460 <SettingsScreen_newBluetoothValController+0x6c>)
 8027434:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8027438:	f7ff f840 	bl	80264bc <lv_color_hex>
 802743c:	8060      	strh	r0, [r4, #2]
	    	bluetooth_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 802743e:	4c08      	ldr	r4, [pc, #32]	; (8027460 <SettingsScreen_newBluetoothValController+0x6c>)
 8027440:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8027444:	f7ff f83a 	bl	80264bc <lv_color_hex>
 8027448:	80a0      	strh	r0, [r4, #4]
	    }
	}
    lv_sw_set_style(SbluetoothSwitch, LV_SW_STYLE_INDIC, &bluetooth_indic_style);
 802744a:	4b08      	ldr	r3, [pc, #32]	; (802746c <SettingsScreen_newBluetoothValController+0x78>)
 802744c:	681b      	ldr	r3, [r3, #0]
 802744e:	4a04      	ldr	r2, [pc, #16]	; (8027460 <SettingsScreen_newBluetoothValController+0x6c>)
 8027450:	2101      	movs	r1, #1
 8027452:	4618      	mov	r0, r3
 8027454:	f7fa f95a 	bl	802170c <lv_sw_set_style>
}
 8027458:	bf00      	nop
 802745a:	bd98      	pop	{r3, r4, r7, pc}
 802745c:	2001be08 	.word	0x2001be08
 8027460:	2001b0ec 	.word	0x2001b0ec
 8027464:	009fc8ef 	.word	0x009fc8ef
 8027468:	2001bda7 	.word	0x2001bda7
 802746c:	2001bda8 	.word	0x2001bda8

08027470 <SettingsScreen_newUnitTypeController>:
/*This function using for update set unit switch*/
void SettingsScreen_newUnitTypeController(void){
 8027470:	b598      	push	{r3, r4, r7, lr}
 8027472:	af00      	add	r7, sp, #0
	if(SunitSetVal){
 8027474:	4b18      	ldr	r3, [pc, #96]	; (80274d8 <SettingsScreen_newUnitTypeController+0x68>)
 8027476:	781b      	ldrb	r3, [r3, #0]
 8027478:	2b00      	cmp	r3, #0
 802747a:	d00a      	beq.n	8027492 <SettingsScreen_newUnitTypeController+0x22>
	    unit_indic_style.body.main_color = lv_color_hex(0x9fc8ef);
 802747c:	4c17      	ldr	r4, [pc, #92]	; (80274dc <SettingsScreen_newUnitTypeController+0x6c>)
 802747e:	4818      	ldr	r0, [pc, #96]	; (80274e0 <SettingsScreen_newUnitTypeController+0x70>)
 8027480:	f7ff f81c 	bl	80264bc <lv_color_hex>
 8027484:	8060      	strh	r0, [r4, #2]
	    unit_indic_style.body.grad_color = lv_color_hex(0x9fc8ef);
 8027486:	4c15      	ldr	r4, [pc, #84]	; (80274dc <SettingsScreen_newUnitTypeController+0x6c>)
 8027488:	4815      	ldr	r0, [pc, #84]	; (80274e0 <SettingsScreen_newUnitTypeController+0x70>)
 802748a:	f7ff f817 	bl	80264bc <lv_color_hex>
 802748e:	80a0      	strh	r0, [r4, #4]
 8027490:	e019      	b.n	80274c6 <SettingsScreen_newUnitTypeController+0x56>
	}else{
		unit_indic_style.body.main_color = lv_color_hex(0x000000);
 8027492:	4c12      	ldr	r4, [pc, #72]	; (80274dc <SettingsScreen_newUnitTypeController+0x6c>)
 8027494:	2000      	movs	r0, #0
 8027496:	f7ff f811 	bl	80264bc <lv_color_hex>
 802749a:	8060      	strh	r0, [r4, #2]
		unit_indic_style.body.grad_color = lv_color_hex(0x000000);
 802749c:	4c0f      	ldr	r4, [pc, #60]	; (80274dc <SettingsScreen_newUnitTypeController+0x6c>)
 802749e:	2000      	movs	r0, #0
 80274a0:	f7ff f80c 	bl	80264bc <lv_color_hex>
 80274a4:	80a0      	strh	r0, [r4, #4]
	    if(Stheme){
 80274a6:	4b0f      	ldr	r3, [pc, #60]	; (80274e4 <SettingsScreen_newUnitTypeController+0x74>)
 80274a8:	781b      	ldrb	r3, [r3, #0]
 80274aa:	2b00      	cmp	r3, #0
 80274ac:	d00b      	beq.n	80274c6 <SettingsScreen_newUnitTypeController+0x56>
	    	unit_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 80274ae:	4c0b      	ldr	r4, [pc, #44]	; (80274dc <SettingsScreen_newUnitTypeController+0x6c>)
 80274b0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80274b4:	f7ff f802 	bl	80264bc <lv_color_hex>
 80274b8:	8060      	strh	r0, [r4, #2]
	    	unit_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 80274ba:	4c08      	ldr	r4, [pc, #32]	; (80274dc <SettingsScreen_newUnitTypeController+0x6c>)
 80274bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80274c0:	f7fe fffc 	bl	80264bc <lv_color_hex>
 80274c4:	80a0      	strh	r0, [r4, #4]
	    }
	}

    lv_sw_set_style(unitTypeSwitch, LV_SW_STYLE_INDIC, &unit_indic_style);
 80274c6:	4b08      	ldr	r3, [pc, #32]	; (80274e8 <SettingsScreen_newUnitTypeController+0x78>)
 80274c8:	681b      	ldr	r3, [r3, #0]
 80274ca:	4a04      	ldr	r2, [pc, #16]	; (80274dc <SettingsScreen_newUnitTypeController+0x6c>)
 80274cc:	2101      	movs	r1, #1
 80274ce:	4618      	mov	r0, r3
 80274d0:	f7fa f91c 	bl	802170c <lv_sw_set_style>
}
 80274d4:	bf00      	nop
 80274d6:	bd98      	pop	{r3, r4, r7, pc}
 80274d8:	2001bda6 	.word	0x2001bda6
 80274dc:	2001b128 	.word	0x2001b128
 80274e0:	009fc8ef 	.word	0x009fc8ef
 80274e4:	2001bda7 	.word	0x2001bda7
 80274e8:	2001bda0 	.word	0x2001bda0

080274ec <SettingsScreen_SetNewValues>:



//Setter Getter Functions

void SettingsScreen_SetNewValues(void){
 80274ec:	b580      	push	{r7, lr}
 80274ee:	af00      	add	r7, sp, #0
	  tos_RTC_SetTime(S_hrtc,Shours,Sminutes,Sseconds);
 80274f0:	4b10      	ldr	r3, [pc, #64]	; (8027534 <SettingsScreen_SetNewValues+0x48>)
 80274f2:	6818      	ldr	r0, [r3, #0]
 80274f4:	4b10      	ldr	r3, [pc, #64]	; (8027538 <SettingsScreen_SetNewValues+0x4c>)
 80274f6:	7819      	ldrb	r1, [r3, #0]
 80274f8:	4b10      	ldr	r3, [pc, #64]	; (802753c <SettingsScreen_SetNewValues+0x50>)
 80274fa:	781a      	ldrb	r2, [r3, #0]
 80274fc:	4b10      	ldr	r3, [pc, #64]	; (8027540 <SettingsScreen_SetNewValues+0x54>)
 80274fe:	781b      	ldrb	r3, [r3, #0]
 8027500:	f002 fb4c 	bl	8029b9c <tos_RTC_SetTime>
	  tos_RTC_SetDate(S_hrtc,(Syears-2000),Smonths,Sdates);
 8027504:	4b0b      	ldr	r3, [pc, #44]	; (8027534 <SettingsScreen_SetNewValues+0x48>)
 8027506:	6818      	ldr	r0, [r3, #0]
 8027508:	4b0e      	ldr	r3, [pc, #56]	; (8027544 <SettingsScreen_SetNewValues+0x58>)
 802750a:	881b      	ldrh	r3, [r3, #0]
 802750c:	b2db      	uxtb	r3, r3
 802750e:	3330      	adds	r3, #48	; 0x30
 8027510:	b2d9      	uxtb	r1, r3
 8027512:	4b0d      	ldr	r3, [pc, #52]	; (8027548 <SettingsScreen_SetNewValues+0x5c>)
 8027514:	781a      	ldrb	r2, [r3, #0]
 8027516:	4b0d      	ldr	r3, [pc, #52]	; (802754c <SettingsScreen_SetNewValues+0x60>)
 8027518:	781b      	ldrb	r3, [r3, #0]
 802751a:	f002 fb61 	bl	8029be0 <tos_RTC_SetDate>
	  tos_BluetoothSetStepsVal(SbluetoothStatu,SunitType);
 802751e:	4b0c      	ldr	r3, [pc, #48]	; (8027550 <SettingsScreen_SetNewValues+0x64>)
 8027520:	781b      	ldrb	r3, [r3, #0]
 8027522:	461a      	mov	r2, r3
 8027524:	4b0b      	ldr	r3, [pc, #44]	; (8027554 <SettingsScreen_SetNewValues+0x68>)
 8027526:	781b      	ldrb	r3, [r3, #0]
 8027528:	4619      	mov	r1, r3
 802752a:	4610      	mov	r0, r2
 802752c:	f001 feb8 	bl	80292a0 <tos_BluetoothSetStepsVal>
}
 8027530:	bf00      	nop
 8027532:	bd80      	pop	{r7, pc}
 8027534:	2001bdc4 	.word	0x2001bdc4
 8027538:	2001bda5 	.word	0x2001bda5
 802753c:	2001bdb0 	.word	0x2001bdb0
 8027540:	2001bdc3 	.word	0x2001bdc3
 8027544:	2001bdb8 	.word	0x2001bdb8
 8027548:	2001bdc2 	.word	0x2001bdc2
 802754c:	2001bda4 	.word	0x2001bda4
 8027550:	2001bd99 	.word	0x2001bd99
 8027554:	2001be0a 	.word	0x2001be0a

08027558 <SettingsScreen_SetTime>:

void SettingsScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 8027558:	b480      	push	{r7}
 802755a:	b083      	sub	sp, #12
 802755c:	af00      	add	r7, sp, #0
 802755e:	4603      	mov	r3, r0
 8027560:	71fb      	strb	r3, [r7, #7]
 8027562:	460b      	mov	r3, r1
 8027564:	71bb      	strb	r3, [r7, #6]
 8027566:	4613      	mov	r3, r2
 8027568:	717b      	strb	r3, [r7, #5]
	if(!isMenuOpen){
 802756a:	4b0b      	ldr	r3, [pc, #44]	; (8027598 <SettingsScreen_SetTime+0x40>)
 802756c:	781b      	ldrb	r3, [r3, #0]
 802756e:	f083 0301 	eor.w	r3, r3, #1
 8027572:	b2db      	uxtb	r3, r3
 8027574:	2b00      	cmp	r3, #0
 8027576:	d008      	beq.n	802758a <SettingsScreen_SetTime+0x32>
		Shours = getHours;
 8027578:	4a08      	ldr	r2, [pc, #32]	; (802759c <SettingsScreen_SetTime+0x44>)
 802757a:	79fb      	ldrb	r3, [r7, #7]
 802757c:	7013      	strb	r3, [r2, #0]
		Sminutes = getMinutes;
 802757e:	4a08      	ldr	r2, [pc, #32]	; (80275a0 <SettingsScreen_SetTime+0x48>)
 8027580:	79bb      	ldrb	r3, [r7, #6]
 8027582:	7013      	strb	r3, [r2, #0]
		Sseconds = getSeconds;
 8027584:	4a07      	ldr	r2, [pc, #28]	; (80275a4 <SettingsScreen_SetTime+0x4c>)
 8027586:	797b      	ldrb	r3, [r7, #5]
 8027588:	7013      	strb	r3, [r2, #0]
	}
}
 802758a:	bf00      	nop
 802758c:	370c      	adds	r7, #12
 802758e:	46bd      	mov	sp, r7
 8027590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027594:	4770      	bx	lr
 8027596:	bf00      	nop
 8027598:	2001bdc0 	.word	0x2001bdc0
 802759c:	2001bda5 	.word	0x2001bda5
 80275a0:	2001bdb0 	.word	0x2001bdb0
 80275a4:	2001bdc3 	.word	0x2001bdc3

080275a8 <SettingsScreen_SetDate>:
void SettingsScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate) {
 80275a8:	b480      	push	{r7}
 80275aa:	b083      	sub	sp, #12
 80275ac:	af00      	add	r7, sp, #0
 80275ae:	4603      	mov	r3, r0
 80275b0:	71fb      	strb	r3, [r7, #7]
 80275b2:	460b      	mov	r3, r1
 80275b4:	71bb      	strb	r3, [r7, #6]
 80275b6:	4613      	mov	r3, r2
 80275b8:	717b      	strb	r3, [r7, #5]
	if(!isMenuOpen){
 80275ba:	4b0d      	ldr	r3, [pc, #52]	; (80275f0 <SettingsScreen_SetDate+0x48>)
 80275bc:	781b      	ldrb	r3, [r3, #0]
 80275be:	f083 0301 	eor.w	r3, r3, #1
 80275c2:	b2db      	uxtb	r3, r3
 80275c4:	2b00      	cmp	r3, #0
 80275c6:	d00c      	beq.n	80275e2 <SettingsScreen_SetDate+0x3a>
		Syears =getYear+2000;
 80275c8:	79fb      	ldrb	r3, [r7, #7]
 80275ca:	b29b      	uxth	r3, r3
 80275cc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80275d0:	b29a      	uxth	r2, r3
 80275d2:	4b08      	ldr	r3, [pc, #32]	; (80275f4 <SettingsScreen_SetDate+0x4c>)
 80275d4:	801a      	strh	r2, [r3, #0]
		Smonths = getMonth;
 80275d6:	4a08      	ldr	r2, [pc, #32]	; (80275f8 <SettingsScreen_SetDate+0x50>)
 80275d8:	79bb      	ldrb	r3, [r7, #6]
 80275da:	7013      	strb	r3, [r2, #0]
		Sdates = getDate;
 80275dc:	4a07      	ldr	r2, [pc, #28]	; (80275fc <SettingsScreen_SetDate+0x54>)
 80275de:	797b      	ldrb	r3, [r7, #5]
 80275e0:	7013      	strb	r3, [r2, #0]
	}
}
 80275e2:	bf00      	nop
 80275e4:	370c      	adds	r7, #12
 80275e6:	46bd      	mov	sp, r7
 80275e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275ec:	4770      	bx	lr
 80275ee:	bf00      	nop
 80275f0:	2001bdc0 	.word	0x2001bdc0
 80275f4:	2001bdb8 	.word	0x2001bdb8
 80275f8:	2001bdc2 	.word	0x2001bdc2
 80275fc:	2001bda4 	.word	0x2001bda4

08027600 <SettingsScreen_isSettingsOpen>:
	if(!isMenuOpen)SbluetoothStatu=statu;
}
void SettingsScreen_SetUnitType(bool val){
	if(!isMenuOpen)SunitType=val;
}
bool SettingsScreen_isSettingsOpen(void){
 8027600:	b480      	push	{r7}
 8027602:	af00      	add	r7, sp, #0
	return isMenuOpen;
 8027604:	4b03      	ldr	r3, [pc, #12]	; (8027614 <SettingsScreen_isSettingsOpen+0x14>)
 8027606:	781b      	ldrb	r3, [r3, #0]
}
 8027608:	4618      	mov	r0, r3
 802760a:	46bd      	mov	sp, r7
 802760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027610:	4770      	bx	lr
 8027612:	bf00      	nop
 8027614:	2001bdc0 	.word	0x2001bdc0

08027618 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8027618:	b580      	push	{r7, lr}
 802761a:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 802761c:	f7ed fd8a 	bl	8015134 <lv_disp_get_default>
 8027620:	4603      	mov	r3, r0
 8027622:	4618      	mov	r0, r3
 8027624:	f7e0 fa52 	bl	8007acc <lv_disp_get_scr_act>
 8027628:	4603      	mov	r3, r0
}
 802762a:	4618      	mov	r0, r3
 802762c:	bd80      	pop	{r7, pc}

0802762e <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 802762e:	b580      	push	{r7, lr}
 8027630:	b084      	sub	sp, #16
 8027632:	af00      	add	r7, sp, #0
 8027634:	60f8      	str	r0, [r7, #12]
 8027636:	460b      	mov	r3, r1
 8027638:	607a      	str	r2, [r7, #4]
 802763a:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 802763c:	6879      	ldr	r1, [r7, #4]
 802763e:	68f8      	ldr	r0, [r7, #12]
 8027640:	f7e2 f8bb 	bl	80097ba <lv_obj_set_style>
}
 8027644:	bf00      	nop
 8027646:	3710      	adds	r7, #16
 8027648:	46bd      	mov	sp, r7
 802764a:	bd80      	pop	{r7, pc}

0802764c <tos_SleepModeScreen_Init>:
void SMS_digitalTimePrintTheScreen(void);
void SMS_batteryValueUpdater(void);
void SMS_bluetoothStatusUpdater(void);
void SMS_Updater(lv_task_t * t);

void tos_SleepModeScreen_Init(void) {
 802764c:	b580      	push	{r7, lr}
 802764e:	b082      	sub	sp, #8
 8027650:	af02      	add	r7, sp, #8
	slptaskController=true;
 8027652:	4ba1      	ldr	r3, [pc, #644]	; (80278d8 <tos_SleepModeScreen_Init+0x28c>)
 8027654:	2201      	movs	r2, #1
 8027656:	701a      	strb	r2, [r3, #0]
	static lv_style_t slpStyle_screen;
	lv_style_copy(&slpStyle_screen, &lv_style_plain);
 8027658:	49a0      	ldr	r1, [pc, #640]	; (80278dc <tos_SleepModeScreen_Init+0x290>)
 802765a:	48a1      	ldr	r0, [pc, #644]	; (80278e0 <tos_SleepModeScreen_Init+0x294>)
 802765c:	f7e3 fe4c 	bl	800b2f8 <lv_style_copy>
	slpStyle_screen.body.main_color = LV_COLOR_BLACK;
 8027660:	4b9f      	ldr	r3, [pc, #636]	; (80278e0 <tos_SleepModeScreen_Init+0x294>)
 8027662:	2200      	movs	r2, #0
 8027664:	805a      	strh	r2, [r3, #2]
	slpStyle_screen.body.grad_color = LV_COLOR_BLACK;
 8027666:	4b9e      	ldr	r3, [pc, #632]	; (80278e0 <tos_SleepModeScreen_Init+0x294>)
 8027668:	2200      	movs	r2, #0
 802766a:	809a      	strh	r2, [r3, #4]
		lv_obj_set_style(lv_scr_act(), &slpStyle_screen);
 802766c:	f7ff ffd4 	bl	8027618 <lv_scr_act>
 8027670:	4603      	mov	r3, r0
 8027672:	499b      	ldr	r1, [pc, #620]	; (80278e0 <tos_SleepModeScreen_Init+0x294>)
 8027674:	4618      	mov	r0, r3
 8027676:	f7e2 f8a0 	bl	80097ba <lv_obj_set_style>

	//Battery
	slpbatteryLbl= lv_label_create(lv_scr_act(), NULL);
 802767a:	f7ff ffcd 	bl	8027618 <lv_scr_act>
 802767e:	4603      	mov	r3, r0
 8027680:	2100      	movs	r1, #0
 8027682:	4618      	mov	r0, r3
 8027684:	f7f4 fd0c 	bl	801c0a0 <lv_label_create>
 8027688:	4602      	mov	r2, r0
 802768a:	4b96      	ldr	r3, [pc, #600]	; (80278e4 <tos_SleepModeScreen_Init+0x298>)
 802768c:	601a      	str	r2, [r3, #0]
	lv_style_copy(&slpbattery_style, &lv_style_plain);
 802768e:	4993      	ldr	r1, [pc, #588]	; (80278dc <tos_SleepModeScreen_Init+0x290>)
 8027690:	4895      	ldr	r0, [pc, #596]	; (80278e8 <tos_SleepModeScreen_Init+0x29c>)
 8027692:	f7e3 fe31 	bl	800b2f8 <lv_style_copy>
	slpbattery_style.text.color = LV_COLOR_GREEN;
 8027696:	4a94      	ldr	r2, [pc, #592]	; (80278e8 <tos_SleepModeScreen_Init+0x29c>)
 8027698:	f892 3020 	ldrb.w	r3, [r2, #32]
 802769c:	2104      	movs	r1, #4
 802769e:	f361 0302 	bfi	r3, r1, #0, #3
 80276a2:	f882 3020 	strb.w	r3, [r2, #32]
 80276a6:	4a90      	ldr	r2, [pc, #576]	; (80278e8 <tos_SleepModeScreen_Init+0x29c>)
 80276a8:	f892 3020 	ldrb.w	r3, [r2, #32]
 80276ac:	f36f 03c7 	bfc	r3, #3, #5
 80276b0:	f882 3020 	strb.w	r3, [r2, #32]
 80276b4:	4a8c      	ldr	r2, [pc, #560]	; (80278e8 <tos_SleepModeScreen_Init+0x29c>)
 80276b6:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80276ba:	f36f 0304 	bfc	r3, #0, #5
 80276be:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80276c2:	4a89      	ldr	r2, [pc, #548]	; (80278e8 <tos_SleepModeScreen_Init+0x29c>)
 80276c4:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80276c8:	f36f 1347 	bfc	r3, #5, #3
 80276cc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	lv_label_set_style(slpbatteryLbl, LV_LABEL_STYLE_MAIN, &slpbattery_style);
 80276d0:	4b84      	ldr	r3, [pc, #528]	; (80278e4 <tos_SleepModeScreen_Init+0x298>)
 80276d2:	681b      	ldr	r3, [r3, #0]
 80276d4:	4a84      	ldr	r2, [pc, #528]	; (80278e8 <tos_SleepModeScreen_Init+0x29c>)
 80276d6:	2100      	movs	r1, #0
 80276d8:	4618      	mov	r0, r3
 80276da:	f7ff ffa8 	bl	802762e <lv_label_set_style>
	lv_label_set_text(slpbatteryLbl, LV_SYMBOL_BATTERY_FULL);
 80276de:	4b81      	ldr	r3, [pc, #516]	; (80278e4 <tos_SleepModeScreen_Init+0x298>)
 80276e0:	681b      	ldr	r3, [r3, #0]
 80276e2:	4982      	ldr	r1, [pc, #520]	; (80278ec <tos_SleepModeScreen_Init+0x2a0>)
 80276e4:	4618      	mov	r0, r3
 80276e6:	f7f4 fe0d 	bl	801c304 <lv_label_set_text>
	lv_obj_align(slpbatteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 80276ea:	4b7e      	ldr	r3, [pc, #504]	; (80278e4 <tos_SleepModeScreen_Init+0x298>)
 80276ec:	6818      	ldr	r0, [r3, #0]
 80276ee:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80276f2:	9300      	str	r3, [sp, #0]
 80276f4:	2364      	movs	r3, #100	; 0x64
 80276f6:	2200      	movs	r2, #0
 80276f8:	2100      	movs	r1, #0
 80276fa:	f7e1 fbb9 	bl	8008e70 <lv_obj_align>

	//Bluetooth
	slpbluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 80276fe:	f7ff ff8b 	bl	8027618 <lv_scr_act>
 8027702:	4603      	mov	r3, r0
 8027704:	2100      	movs	r1, #0
 8027706:	4618      	mov	r0, r3
 8027708:	f7f4 fcca 	bl	801c0a0 <lv_label_create>
 802770c:	4602      	mov	r2, r0
 802770e:	4b78      	ldr	r3, [pc, #480]	; (80278f0 <tos_SleepModeScreen_Init+0x2a4>)
 8027710:	601a      	str	r2, [r3, #0]
    lv_style_copy(&slpbluetooth_style, &lv_style_plain);
 8027712:	4972      	ldr	r1, [pc, #456]	; (80278dc <tos_SleepModeScreen_Init+0x290>)
 8027714:	4877      	ldr	r0, [pc, #476]	; (80278f4 <tos_SleepModeScreen_Init+0x2a8>)
 8027716:	f7e3 fdef 	bl	800b2f8 <lv_style_copy>
    slpbluetooth_style.text.color = LV_COLOR_WHITE;
 802771a:	4a76      	ldr	r2, [pc, #472]	; (80278f4 <tos_SleepModeScreen_Init+0x2a8>)
 802771c:	4b76      	ldr	r3, [pc, #472]	; (80278f8 <tos_SleepModeScreen_Init+0x2ac>)
 802771e:	881b      	ldrh	r3, [r3, #0]
 8027720:	8413      	strh	r3, [r2, #32]
	lv_label_set_style(slpbluetoothLbl, LV_LABEL_STYLE_MAIN, &slpbluetooth_style);
 8027722:	4b73      	ldr	r3, [pc, #460]	; (80278f0 <tos_SleepModeScreen_Init+0x2a4>)
 8027724:	681b      	ldr	r3, [r3, #0]
 8027726:	4a73      	ldr	r2, [pc, #460]	; (80278f4 <tos_SleepModeScreen_Init+0x2a8>)
 8027728:	2100      	movs	r1, #0
 802772a:	4618      	mov	r0, r3
 802772c:	f7ff ff7f 	bl	802762e <lv_label_set_style>
	lv_label_set_text(slpbluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8027730:	4b6f      	ldr	r3, [pc, #444]	; (80278f0 <tos_SleepModeScreen_Init+0x2a4>)
 8027732:	681b      	ldr	r3, [r3, #0]
 8027734:	4971      	ldr	r1, [pc, #452]	; (80278fc <tos_SleepModeScreen_Init+0x2b0>)
 8027736:	4618      	mov	r0, r3
 8027738:	f7f4 fde4 	bl	801c304 <lv_label_set_text>
	lv_obj_align(slpbluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 802773c:	4b6c      	ldr	r3, [pc, #432]	; (80278f0 <tos_SleepModeScreen_Init+0x2a4>)
 802773e:	6818      	ldr	r0, [r3, #0]
 8027740:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8027744:	9300      	str	r3, [sp, #0]
 8027746:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 802774a:	2200      	movs	r2, #0
 802774c:	2100      	movs	r1, #0
 802774e:	f7e1 fb8f 	bl	8008e70 <lv_obj_align>

	//Digital Clock
		static lv_style_t slpdClock_style,slpdDate_style,slpweekD_style;
				lv_style_copy(&slpdClock_style, &lv_style_plain);
 8027752:	4962      	ldr	r1, [pc, #392]	; (80278dc <tos_SleepModeScreen_Init+0x290>)
 8027754:	486a      	ldr	r0, [pc, #424]	; (8027900 <tos_SleepModeScreen_Init+0x2b4>)
 8027756:	f7e3 fdcf 	bl	800b2f8 <lv_style_copy>
				slpdClock_style.text.font =&digital_font_for_number_65;
 802775a:	4b69      	ldr	r3, [pc, #420]	; (8027900 <tos_SleepModeScreen_Init+0x2b4>)
 802775c:	4a69      	ldr	r2, [pc, #420]	; (8027904 <tos_SleepModeScreen_Init+0x2b8>)
 802775e:	625a      	str	r2, [r3, #36]	; 0x24
				slpdClock_style.text.color= LV_COLOR_SILVER;
 8027760:	4a67      	ldr	r2, [pc, #412]	; (8027900 <tos_SleepModeScreen_Init+0x2b4>)
 8027762:	4b69      	ldr	r3, [pc, #420]	; (8027908 <tos_SleepModeScreen_Init+0x2bc>)
 8027764:	881b      	ldrh	r3, [r3, #0]
 8027766:	8413      	strh	r3, [r2, #32]
			    lv_style_copy(&slpdDate_style, &lv_style_plain);
 8027768:	495c      	ldr	r1, [pc, #368]	; (80278dc <tos_SleepModeScreen_Init+0x290>)
 802776a:	4868      	ldr	r0, [pc, #416]	; (802790c <tos_SleepModeScreen_Init+0x2c0>)
 802776c:	f7e3 fdc4 	bl	800b2f8 <lv_style_copy>
			    slpdDate_style.text.font =&digital_font_for_number_30;
 8027770:	4b66      	ldr	r3, [pc, #408]	; (802790c <tos_SleepModeScreen_Init+0x2c0>)
 8027772:	4a67      	ldr	r2, [pc, #412]	; (8027910 <tos_SleepModeScreen_Init+0x2c4>)
 8027774:	625a      	str	r2, [r3, #36]	; 0x24
			    slpdDate_style.text.color= LV_COLOR_SILVER;
 8027776:	4a65      	ldr	r2, [pc, #404]	; (802790c <tos_SleepModeScreen_Init+0x2c0>)
 8027778:	4b63      	ldr	r3, [pc, #396]	; (8027908 <tos_SleepModeScreen_Init+0x2bc>)
 802777a:	881b      	ldrh	r3, [r3, #0]
 802777c:	8413      	strh	r3, [r2, #32]
				lv_style_copy(&slpweekD_style, &lv_style_plain);
 802777e:	4957      	ldr	r1, [pc, #348]	; (80278dc <tos_SleepModeScreen_Init+0x290>)
 8027780:	4864      	ldr	r0, [pc, #400]	; (8027914 <tos_SleepModeScreen_Init+0x2c8>)
 8027782:	f7e3 fdb9 	bl	800b2f8 <lv_style_copy>
				slpweekD_style.text.font =&lv_font_roboto_22;
 8027786:	4b63      	ldr	r3, [pc, #396]	; (8027914 <tos_SleepModeScreen_Init+0x2c8>)
 8027788:	4a63      	ldr	r2, [pc, #396]	; (8027918 <tos_SleepModeScreen_Init+0x2cc>)
 802778a:	625a      	str	r2, [r3, #36]	; 0x24
				slpweekD_style.text.color= LV_COLOR_SILVER;
 802778c:	4a61      	ldr	r2, [pc, #388]	; (8027914 <tos_SleepModeScreen_Init+0x2c8>)
 802778e:	4b5e      	ldr	r3, [pc, #376]	; (8027908 <tos_SleepModeScreen_Init+0x2bc>)
 8027790:	881b      	ldrh	r3, [r3, #0]
 8027792:	8413      	strh	r3, [r2, #32]

				slpdigitalClock = lv_label_create(lv_scr_act(), NULL);
 8027794:	f7ff ff40 	bl	8027618 <lv_scr_act>
 8027798:	4603      	mov	r3, r0
 802779a:	2100      	movs	r1, #0
 802779c:	4618      	mov	r0, r3
 802779e:	f7f4 fc7f 	bl	801c0a0 <lv_label_create>
 80277a2:	4602      	mov	r2, r0
 80277a4:	4b5d      	ldr	r3, [pc, #372]	; (802791c <tos_SleepModeScreen_Init+0x2d0>)
 80277a6:	601a      	str	r2, [r3, #0]
			    lv_label_set_style(slpdigitalClock, LV_LABEL_STYLE_MAIN, &slpdClock_style);
 80277a8:	4b5c      	ldr	r3, [pc, #368]	; (802791c <tos_SleepModeScreen_Init+0x2d0>)
 80277aa:	681b      	ldr	r3, [r3, #0]
 80277ac:	4a54      	ldr	r2, [pc, #336]	; (8027900 <tos_SleepModeScreen_Init+0x2b4>)
 80277ae:	2100      	movs	r1, #0
 80277b0:	4618      	mov	r0, r3
 80277b2:	f7ff ff3c 	bl	802762e <lv_label_set_style>
			    lv_obj_set_width(slpdigitalClock, 200);
 80277b6:	4b59      	ldr	r3, [pc, #356]	; (802791c <tos_SleepModeScreen_Init+0x2d0>)
 80277b8:	681b      	ldr	r3, [r3, #0]
 80277ba:	21c8      	movs	r1, #200	; 0xc8
 80277bc:	4618      	mov	r0, r3
 80277be:	f7e1 fb2d 	bl	8008e1c <lv_obj_set_width>
			    snprintf(slpbuffer, 8, "%02d:%02d:%02d", hours,minutes,seconds);
 80277c2:	4b57      	ldr	r3, [pc, #348]	; (8027920 <tos_SleepModeScreen_Init+0x2d4>)
 80277c4:	781b      	ldrb	r3, [r3, #0]
 80277c6:	4619      	mov	r1, r3
 80277c8:	4b56      	ldr	r3, [pc, #344]	; (8027924 <tos_SleepModeScreen_Init+0x2d8>)
 80277ca:	781b      	ldrb	r3, [r3, #0]
 80277cc:	461a      	mov	r2, r3
 80277ce:	4b56      	ldr	r3, [pc, #344]	; (8027928 <tos_SleepModeScreen_Init+0x2dc>)
 80277d0:	781b      	ldrb	r3, [r3, #0]
 80277d2:	9301      	str	r3, [sp, #4]
 80277d4:	9200      	str	r2, [sp, #0]
 80277d6:	460b      	mov	r3, r1
 80277d8:	4a54      	ldr	r2, [pc, #336]	; (802792c <tos_SleepModeScreen_Init+0x2e0>)
 80277da:	2108      	movs	r1, #8
 80277dc:	4854      	ldr	r0, [pc, #336]	; (8027930 <tos_SleepModeScreen_Init+0x2e4>)
 80277de:	f003 f811 	bl	802a804 <sniprintf>
			    lv_label_set_text(slpdigitalClock, slpbuffer);
 80277e2:	4b4e      	ldr	r3, [pc, #312]	; (802791c <tos_SleepModeScreen_Init+0x2d0>)
 80277e4:	681b      	ldr	r3, [r3, #0]
 80277e6:	4952      	ldr	r1, [pc, #328]	; (8027930 <tos_SleepModeScreen_Init+0x2e4>)
 80277e8:	4618      	mov	r0, r3
 80277ea:	f7f4 fd8b 	bl	801c304 <lv_label_set_text>
			    lv_label_set_align(slpdigitalClock, LV_LABEL_ALIGN_CENTER);
 80277ee:	4b4b      	ldr	r3, [pc, #300]	; (802791c <tos_SleepModeScreen_Init+0x2d0>)
 80277f0:	681b      	ldr	r3, [r3, #0]
 80277f2:	2101      	movs	r1, #1
 80277f4:	4618      	mov	r0, r3
 80277f6:	f7f4 fe7d 	bl	801c4f4 <lv_label_set_align>
			    lv_obj_align(slpdigitalClock, NULL, LV_ALIGN_CENTER, 0, -35);
 80277fa:	4b48      	ldr	r3, [pc, #288]	; (802791c <tos_SleepModeScreen_Init+0x2d0>)
 80277fc:	6818      	ldr	r0, [r3, #0]
 80277fe:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8027802:	9300      	str	r3, [sp, #0]
 8027804:	2300      	movs	r3, #0
 8027806:	2200      	movs	r2, #0
 8027808:	2100      	movs	r1, #0
 802780a:	f7e1 fb31 	bl	8008e70 <lv_obj_align>

			   //Digital Date
			    dateTmp=date;
 802780e:	4b49      	ldr	r3, [pc, #292]	; (8027934 <tos_SleepModeScreen_Init+0x2e8>)
 8027810:	781a      	ldrb	r2, [r3, #0]
 8027812:	4b49      	ldr	r3, [pc, #292]	; (8027938 <tos_SleepModeScreen_Init+0x2ec>)
 8027814:	701a      	strb	r2, [r3, #0]
			    slpdigitalDate = lv_label_create(lv_scr_act(), NULL);
 8027816:	f7ff feff 	bl	8027618 <lv_scr_act>
 802781a:	4603      	mov	r3, r0
 802781c:	2100      	movs	r1, #0
 802781e:	4618      	mov	r0, r3
 8027820:	f7f4 fc3e 	bl	801c0a0 <lv_label_create>
 8027824:	4602      	mov	r2, r0
 8027826:	4b45      	ldr	r3, [pc, #276]	; (802793c <tos_SleepModeScreen_Init+0x2f0>)
 8027828:	601a      	str	r2, [r3, #0]
			    lv_label_set_style(slpdigitalDate, LV_LABEL_STYLE_MAIN, &slpdDate_style);
 802782a:	4b44      	ldr	r3, [pc, #272]	; (802793c <tos_SleepModeScreen_Init+0x2f0>)
 802782c:	681b      	ldr	r3, [r3, #0]
 802782e:	4a37      	ldr	r2, [pc, #220]	; (802790c <tos_SleepModeScreen_Init+0x2c0>)
 8027830:	2100      	movs	r1, #0
 8027832:	4618      	mov	r0, r3
 8027834:	f7ff fefb 	bl	802762e <lv_label_set_style>
		    	snprintf(slpbuffer, 16, "%02d:%02d:%04d", date,month,year);
 8027838:	4b3e      	ldr	r3, [pc, #248]	; (8027934 <tos_SleepModeScreen_Init+0x2e8>)
 802783a:	781b      	ldrb	r3, [r3, #0]
 802783c:	4619      	mov	r1, r3
 802783e:	4b40      	ldr	r3, [pc, #256]	; (8027940 <tos_SleepModeScreen_Init+0x2f4>)
 8027840:	781b      	ldrb	r3, [r3, #0]
 8027842:	461a      	mov	r2, r3
 8027844:	4b3f      	ldr	r3, [pc, #252]	; (8027944 <tos_SleepModeScreen_Init+0x2f8>)
 8027846:	881b      	ldrh	r3, [r3, #0]
 8027848:	9301      	str	r3, [sp, #4]
 802784a:	9200      	str	r2, [sp, #0]
 802784c:	460b      	mov	r3, r1
 802784e:	4a3e      	ldr	r2, [pc, #248]	; (8027948 <tos_SleepModeScreen_Init+0x2fc>)
 8027850:	2110      	movs	r1, #16
 8027852:	4837      	ldr	r0, [pc, #220]	; (8027930 <tos_SleepModeScreen_Init+0x2e4>)
 8027854:	f002 ffd6 	bl	802a804 <sniprintf>
				lv_label_set_text(slpdigitalDate, slpbuffer);
 8027858:	4b38      	ldr	r3, [pc, #224]	; (802793c <tos_SleepModeScreen_Init+0x2f0>)
 802785a:	681b      	ldr	r3, [r3, #0]
 802785c:	4934      	ldr	r1, [pc, #208]	; (8027930 <tos_SleepModeScreen_Init+0x2e4>)
 802785e:	4618      	mov	r0, r3
 8027860:	f7f4 fd50 	bl	801c304 <lv_label_set_text>
			    lv_obj_align(slpdigitalDate, NULL, LV_ALIGN_CENTER, 0, 10);
 8027864:	4b35      	ldr	r3, [pc, #212]	; (802793c <tos_SleepModeScreen_Init+0x2f0>)
 8027866:	6818      	ldr	r0, [r3, #0]
 8027868:	230a      	movs	r3, #10
 802786a:	9300      	str	r3, [sp, #0]
 802786c:	2300      	movs	r3, #0
 802786e:	2200      	movs	r2, #0
 8027870:	2100      	movs	r1, #0
 8027872:	f7e1 fafd 	bl	8008e70 <lv_obj_align>

			    //Week Day
			    slpweekDay = lv_label_create(lv_scr_act(), NULL);
 8027876:	f7ff fecf 	bl	8027618 <lv_scr_act>
 802787a:	4603      	mov	r3, r0
 802787c:	2100      	movs	r1, #0
 802787e:	4618      	mov	r0, r3
 8027880:	f7f4 fc0e 	bl	801c0a0 <lv_label_create>
 8027884:	4602      	mov	r2, r0
 8027886:	4b31      	ldr	r3, [pc, #196]	; (802794c <tos_SleepModeScreen_Init+0x300>)
 8027888:	601a      	str	r2, [r3, #0]
			    lv_obj_set_width(slpweekDay, 150);
 802788a:	4b30      	ldr	r3, [pc, #192]	; (802794c <tos_SleepModeScreen_Init+0x300>)
 802788c:	681b      	ldr	r3, [r3, #0]
 802788e:	2196      	movs	r1, #150	; 0x96
 8027890:	4618      	mov	r0, r3
 8027892:	f7e1 fac3 	bl	8008e1c <lv_obj_set_width>
			    lv_label_set_style(slpweekDay, LV_LABEL_STYLE_MAIN, &slpweekD_style);
 8027896:	4b2d      	ldr	r3, [pc, #180]	; (802794c <tos_SleepModeScreen_Init+0x300>)
 8027898:	681b      	ldr	r3, [r3, #0]
 802789a:	4a1e      	ldr	r2, [pc, #120]	; (8027914 <tos_SleepModeScreen_Init+0x2c8>)
 802789c:	2100      	movs	r1, #0
 802789e:	4618      	mov	r0, r3
 80278a0:	f7ff fec5 	bl	802762e <lv_label_set_style>
			    lv_label_set_text(slpweekDay,slpweekDayStr);
 80278a4:	4b29      	ldr	r3, [pc, #164]	; (802794c <tos_SleepModeScreen_Init+0x300>)
 80278a6:	681a      	ldr	r2, [r3, #0]
 80278a8:	4b29      	ldr	r3, [pc, #164]	; (8027950 <tos_SleepModeScreen_Init+0x304>)
 80278aa:	681b      	ldr	r3, [r3, #0]
 80278ac:	4619      	mov	r1, r3
 80278ae:	4610      	mov	r0, r2
 80278b0:	f7f4 fd28 	bl	801c304 <lv_label_set_text>
			    lv_obj_align(slpweekDay, NULL, LV_ALIGN_CENTER, 0, 35);
 80278b4:	4b25      	ldr	r3, [pc, #148]	; (802794c <tos_SleepModeScreen_Init+0x300>)
 80278b6:	6818      	ldr	r0, [r3, #0]
 80278b8:	2323      	movs	r3, #35	; 0x23
 80278ba:	9300      	str	r3, [sp, #0]
 80278bc:	2300      	movs	r3, #0
 80278be:	2200      	movs	r2, #0
 80278c0:	2100      	movs	r1, #0
 80278c2:	f7e1 fad5 	bl	8008e70 <lv_obj_align>
				lv_task_create(SMS_Updater, 250, _LV_TASK_PRIO_NUM, NULL);
 80278c6:	2300      	movs	r3, #0
 80278c8:	2206      	movs	r2, #6
 80278ca:	21fa      	movs	r1, #250	; 0xfa
 80278cc:	4821      	ldr	r0, [pc, #132]	; (8027954 <tos_SleepModeScreen_Init+0x308>)
 80278ce:	f7ef f875 	bl	80169bc <lv_task_create>
}
 80278d2:	bf00      	nop
 80278d4:	46bd      	mov	sp, r7
 80278d6:	bd80      	pop	{r7, pc}
 80278d8:	2001be98 	.word	0x2001be98
 80278dc:	2001ba10 	.word	0x2001ba10
 80278e0:	2001b290 	.word	0x2001b290
 80278e4:	2001be9c 	.word	0x2001be9c
 80278e8:	2001be5c 	.word	0x2001be5c
 80278ec:	0802cf24 	.word	0x0802cf24
 80278f0:	2001be54 	.word	0x2001be54
 80278f4:	2001be18 	.word	0x2001be18
 80278f8:	0802cf4c 	.word	0x0802cf4c
 80278fc:	0802cf28 	.word	0x0802cf28
 8027900:	2001b2cc 	.word	0x2001b2cc
 8027904:	2000281c 	.word	0x2000281c
 8027908:	0802cf50 	.word	0x0802cf50
 802790c:	2001b308 	.word	0x2001b308
 8027910:	200027ec 	.word	0x200027ec
 8027914:	2001b344 	.word	0x2001b344
 8027918:	200017c4 	.word	0x200017c4
 802791c:	2001be10 	.word	0x2001be10
 8027920:	2001bc91 	.word	0x2001bc91
 8027924:	2001bc90 	.word	0x2001bc90
 8027928:	2001bc80 	.word	0x2001bc80
 802792c:	0802cf2c 	.word	0x0802cf2c
 8027930:	2001bea8 	.word	0x2001bea8
 8027934:	2001c160 	.word	0x2001c160
 8027938:	2001bba8 	.word	0x2001bba8
 802793c:	2001be0c 	.word	0x2001be0c
 8027940:	2001bbc0 	.word	0x2001bbc0
 8027944:	2001bc82 	.word	0x2001bc82
 8027948:	0802cf3c 	.word	0x0802cf3c
 802794c:	2001be58 	.word	0x2001be58
 8027950:	2001beb8 	.word	0x2001beb8
 8027954:	08027959 	.word	0x08027959

08027958 <SMS_Updater>:
/*This function using for update all updater functions*/
void SMS_Updater(lv_task_t *t){
 8027958:	b580      	push	{r7, lr}
 802795a:	b082      	sub	sp, #8
 802795c:	af00      	add	r7, sp, #0
 802795e:	6078      	str	r0, [r7, #4]
	if(slptaskController){
 8027960:	4b08      	ldr	r3, [pc, #32]	; (8027984 <SMS_Updater+0x2c>)
 8027962:	781b      	ldrb	r3, [r3, #0]
 8027964:	2b00      	cmp	r3, #0
 8027966:	d006      	beq.n	8027976 <SMS_Updater+0x1e>
		SMS_batteryValueUpdater();
 8027968:	f000 f88a 	bl	8027a80 <SMS_batteryValueUpdater>
		SMS_bluetoothStatusUpdater();
 802796c:	f000 f8ac 	bl	8027ac8 <SMS_bluetoothStatusUpdater>
		SMS_digitalTimePrintTheScreen();
 8027970:	f000 f80a 	bl	8027988 <SMS_digitalTimePrintTheScreen>
	}else lv_task_del(t);
}
 8027974:	e002      	b.n	802797c <SMS_Updater+0x24>
	}else lv_task_del(t);
 8027976:	6878      	ldr	r0, [r7, #4]
 8027978:	f7ef f858 	bl	8016a2c <lv_task_del>
}
 802797c:	bf00      	nop
 802797e:	3708      	adds	r7, #8
 8027980:	46bd      	mov	sp, r7
 8027982:	bd80      	pop	{r7, pc}
 8027984:	2001be98 	.word	0x2001be98

08027988 <SMS_digitalTimePrintTheScreen>:
/* This function using for digital clock print to screen*/
void SMS_digitalTimePrintTheScreen(void){
 8027988:	b580      	push	{r7, lr}
 802798a:	b082      	sub	sp, #8
 802798c:	af02      	add	r7, sp, #8
		snprintf(slpbuffer, 16, "%02d:%02d:%02d", hours,minutes,seconds);
 802798e:	4b2e      	ldr	r3, [pc, #184]	; (8027a48 <SMS_digitalTimePrintTheScreen+0xc0>)
 8027990:	781b      	ldrb	r3, [r3, #0]
 8027992:	4619      	mov	r1, r3
 8027994:	4b2d      	ldr	r3, [pc, #180]	; (8027a4c <SMS_digitalTimePrintTheScreen+0xc4>)
 8027996:	781b      	ldrb	r3, [r3, #0]
 8027998:	461a      	mov	r2, r3
 802799a:	4b2d      	ldr	r3, [pc, #180]	; (8027a50 <SMS_digitalTimePrintTheScreen+0xc8>)
 802799c:	781b      	ldrb	r3, [r3, #0]
 802799e:	9301      	str	r3, [sp, #4]
 80279a0:	9200      	str	r2, [sp, #0]
 80279a2:	460b      	mov	r3, r1
 80279a4:	4a2b      	ldr	r2, [pc, #172]	; (8027a54 <SMS_digitalTimePrintTheScreen+0xcc>)
 80279a6:	2110      	movs	r1, #16
 80279a8:	482b      	ldr	r0, [pc, #172]	; (8027a58 <SMS_digitalTimePrintTheScreen+0xd0>)
 80279aa:	f002 ff2b 	bl	802a804 <sniprintf>
		    lv_label_set_text(slpdigitalClock, slpbuffer);
 80279ae:	4b2b      	ldr	r3, [pc, #172]	; (8027a5c <SMS_digitalTimePrintTheScreen+0xd4>)
 80279b0:	681b      	ldr	r3, [r3, #0]
 80279b2:	4929      	ldr	r1, [pc, #164]	; (8027a58 <SMS_digitalTimePrintTheScreen+0xd0>)
 80279b4:	4618      	mov	r0, r3
 80279b6:	f7f4 fca5 	bl	801c304 <lv_label_set_text>
			lv_obj_align(slpdigitalClock, NULL, LV_ALIGN_CENTER, 0, -35);
 80279ba:	4b28      	ldr	r3, [pc, #160]	; (8027a5c <SMS_digitalTimePrintTheScreen+0xd4>)
 80279bc:	6818      	ldr	r0, [r3, #0]
 80279be:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80279c2:	9300      	str	r3, [sp, #0]
 80279c4:	2300      	movs	r3, #0
 80279c6:	2200      	movs	r2, #0
 80279c8:	2100      	movs	r1, #0
 80279ca:	f7e1 fa51 	bl	8008e70 <lv_obj_align>
				if(dateTmp!=date){
 80279ce:	4b24      	ldr	r3, [pc, #144]	; (8027a60 <SMS_digitalTimePrintTheScreen+0xd8>)
 80279d0:	781a      	ldrb	r2, [r3, #0]
 80279d2:	4b24      	ldr	r3, [pc, #144]	; (8027a64 <SMS_digitalTimePrintTheScreen+0xdc>)
 80279d4:	781b      	ldrb	r3, [r3, #0]
 80279d6:	429a      	cmp	r2, r3
 80279d8:	d033      	beq.n	8027a42 <SMS_digitalTimePrintTheScreen+0xba>
					 //Digital Date
					    	snprintf(slpbuffer, 16, "%02d:%02d:%04d", date,month,year);
 80279da:	4b22      	ldr	r3, [pc, #136]	; (8027a64 <SMS_digitalTimePrintTheScreen+0xdc>)
 80279dc:	781b      	ldrb	r3, [r3, #0]
 80279de:	4619      	mov	r1, r3
 80279e0:	4b21      	ldr	r3, [pc, #132]	; (8027a68 <SMS_digitalTimePrintTheScreen+0xe0>)
 80279e2:	781b      	ldrb	r3, [r3, #0]
 80279e4:	461a      	mov	r2, r3
 80279e6:	4b21      	ldr	r3, [pc, #132]	; (8027a6c <SMS_digitalTimePrintTheScreen+0xe4>)
 80279e8:	881b      	ldrh	r3, [r3, #0]
 80279ea:	9301      	str	r3, [sp, #4]
 80279ec:	9200      	str	r2, [sp, #0]
 80279ee:	460b      	mov	r3, r1
 80279f0:	4a1f      	ldr	r2, [pc, #124]	; (8027a70 <SMS_digitalTimePrintTheScreen+0xe8>)
 80279f2:	2110      	movs	r1, #16
 80279f4:	4818      	ldr	r0, [pc, #96]	; (8027a58 <SMS_digitalTimePrintTheScreen+0xd0>)
 80279f6:	f002 ff05 	bl	802a804 <sniprintf>
							lv_label_set_text(slpdigitalDate, slpbuffer);
 80279fa:	4b1e      	ldr	r3, [pc, #120]	; (8027a74 <SMS_digitalTimePrintTheScreen+0xec>)
 80279fc:	681b      	ldr	r3, [r3, #0]
 80279fe:	4916      	ldr	r1, [pc, #88]	; (8027a58 <SMS_digitalTimePrintTheScreen+0xd0>)
 8027a00:	4618      	mov	r0, r3
 8027a02:	f7f4 fc7f 	bl	801c304 <lv_label_set_text>
					    	//Week Day
					    	lv_label_set_text(slpweekDay, slpweekDayStr);
 8027a06:	4b1c      	ldr	r3, [pc, #112]	; (8027a78 <SMS_digitalTimePrintTheScreen+0xf0>)
 8027a08:	681a      	ldr	r2, [r3, #0]
 8027a0a:	4b1c      	ldr	r3, [pc, #112]	; (8027a7c <SMS_digitalTimePrintTheScreen+0xf4>)
 8027a0c:	681b      	ldr	r3, [r3, #0]
 8027a0e:	4619      	mov	r1, r3
 8027a10:	4610      	mov	r0, r2
 8027a12:	f7f4 fc77 	bl	801c304 <lv_label_set_text>
					    	dateTmp=date;
 8027a16:	4b13      	ldr	r3, [pc, #76]	; (8027a64 <SMS_digitalTimePrintTheScreen+0xdc>)
 8027a18:	781a      	ldrb	r2, [r3, #0]
 8027a1a:	4b11      	ldr	r3, [pc, #68]	; (8027a60 <SMS_digitalTimePrintTheScreen+0xd8>)
 8027a1c:	701a      	strb	r2, [r3, #0]


					    	lv_obj_align(slpdigitalDate, NULL, LV_ALIGN_CENTER, 0, 10);
 8027a1e:	4b15      	ldr	r3, [pc, #84]	; (8027a74 <SMS_digitalTimePrintTheScreen+0xec>)
 8027a20:	6818      	ldr	r0, [r3, #0]
 8027a22:	230a      	movs	r3, #10
 8027a24:	9300      	str	r3, [sp, #0]
 8027a26:	2300      	movs	r3, #0
 8027a28:	2200      	movs	r2, #0
 8027a2a:	2100      	movs	r1, #0
 8027a2c:	f7e1 fa20 	bl	8008e70 <lv_obj_align>
					    	lv_obj_align(slpweekDay, NULL, LV_ALIGN_CENTER, 0, 35);
 8027a30:	4b11      	ldr	r3, [pc, #68]	; (8027a78 <SMS_digitalTimePrintTheScreen+0xf0>)
 8027a32:	6818      	ldr	r0, [r3, #0]
 8027a34:	2323      	movs	r3, #35	; 0x23
 8027a36:	9300      	str	r3, [sp, #0]
 8027a38:	2300      	movs	r3, #0
 8027a3a:	2200      	movs	r2, #0
 8027a3c:	2100      	movs	r1, #0
 8027a3e:	f7e1 fa17 	bl	8008e70 <lv_obj_align>
				}
}
 8027a42:	bf00      	nop
 8027a44:	46bd      	mov	sp, r7
 8027a46:	bd80      	pop	{r7, pc}
 8027a48:	2001bc91 	.word	0x2001bc91
 8027a4c:	2001bc90 	.word	0x2001bc90
 8027a50:	2001bc80 	.word	0x2001bc80
 8027a54:	0802cf2c 	.word	0x0802cf2c
 8027a58:	2001bea8 	.word	0x2001bea8
 8027a5c:	2001be10 	.word	0x2001be10
 8027a60:	2001bba8 	.word	0x2001bba8
 8027a64:	2001c160 	.word	0x2001c160
 8027a68:	2001bbc0 	.word	0x2001bbc0
 8027a6c:	2001bc82 	.word	0x2001bc82
 8027a70:	0802cf3c 	.word	0x0802cf3c
 8027a74:	2001be0c 	.word	0x2001be0c
 8027a78:	2001be58 	.word	0x2001be58
 8027a7c:	2001beb8 	.word	0x2001beb8

08027a80 <SMS_batteryValueUpdater>:
/* This function using for battery value update
*/
void SMS_batteryValueUpdater(void){
 8027a80:	b580      	push	{r7, lr}
 8027a82:	b082      	sub	sp, #8
 8027a84:	af02      	add	r7, sp, #8
		  lv_label_set_text(slpbatteryLbl, slpbatteryVal);
 8027a86:	4b0c      	ldr	r3, [pc, #48]	; (8027ab8 <SMS_batteryValueUpdater+0x38>)
 8027a88:	681a      	ldr	r2, [r3, #0]
 8027a8a:	4b0c      	ldr	r3, [pc, #48]	; (8027abc <SMS_batteryValueUpdater+0x3c>)
 8027a8c:	681b      	ldr	r3, [r3, #0]
 8027a8e:	4619      	mov	r1, r3
 8027a90:	4610      	mov	r0, r2
 8027a92:	f7f4 fc37 	bl	801c304 <lv_label_set_text>
		  slpbattery_style.text.color = slpbatteryColor;
 8027a96:	4a0a      	ldr	r2, [pc, #40]	; (8027ac0 <SMS_batteryValueUpdater+0x40>)
 8027a98:	4b0a      	ldr	r3, [pc, #40]	; (8027ac4 <SMS_batteryValueUpdater+0x44>)
 8027a9a:	881b      	ldrh	r3, [r3, #0]
 8027a9c:	8413      	strh	r3, [r2, #32]
		  lv_obj_align(slpbatteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8027a9e:	4b06      	ldr	r3, [pc, #24]	; (8027ab8 <SMS_batteryValueUpdater+0x38>)
 8027aa0:	6818      	ldr	r0, [r3, #0]
 8027aa2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8027aa6:	9300      	str	r3, [sp, #0]
 8027aa8:	2364      	movs	r3, #100	; 0x64
 8027aaa:	2200      	movs	r2, #0
 8027aac:	2100      	movs	r1, #0
 8027aae:	f7e1 f9df 	bl	8008e70 <lv_obj_align>
}
 8027ab2:	bf00      	nop
 8027ab4:	46bd      	mov	sp, r7
 8027ab6:	bd80      	pop	{r7, pc}
 8027ab8:	2001be9c 	.word	0x2001be9c
 8027abc:	2001bea4 	.word	0x2001bea4
 8027ac0:	2001be5c 	.word	0x2001be5c
 8027ac4:	2001bea0 	.word	0x2001bea0

08027ac8 <SMS_bluetoothStatusUpdater>:
/* This function using for bluetooth status update
*/
void SMS_bluetoothStatusUpdater(void){
 8027ac8:	b580      	push	{r7, lr}
 8027aca:	b082      	sub	sp, #8
 8027acc:	af02      	add	r7, sp, #8
		if(slpbluetoothStatus){
 8027ace:	4b11      	ldr	r3, [pc, #68]	; (8027b14 <SMS_bluetoothStatusUpdater+0x4c>)
 8027ad0:	781b      	ldrb	r3, [r3, #0]
 8027ad2:	2b00      	cmp	r3, #0
 8027ad4:	d015      	beq.n	8027b02 <SMS_bluetoothStatusUpdater+0x3a>
			slpbluetooth_style.text.color = slpbluetoothColor;
 8027ad6:	4a10      	ldr	r2, [pc, #64]	; (8027b18 <SMS_bluetoothStatusUpdater+0x50>)
 8027ad8:	4b10      	ldr	r3, [pc, #64]	; (8027b1c <SMS_bluetoothStatusUpdater+0x54>)
 8027ada:	881b      	ldrh	r3, [r3, #0]
 8027adc:	8413      	strh	r3, [r2, #32]
			  lv_label_set_text(slpbluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8027ade:	4b10      	ldr	r3, [pc, #64]	; (8027b20 <SMS_bluetoothStatusUpdater+0x58>)
 8027ae0:	681b      	ldr	r3, [r3, #0]
 8027ae2:	4910      	ldr	r1, [pc, #64]	; (8027b24 <SMS_bluetoothStatusUpdater+0x5c>)
 8027ae4:	4618      	mov	r0, r3
 8027ae6:	f7f4 fc0d 	bl	801c304 <lv_label_set_text>
			  lv_obj_align(slpbluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8027aea:	4b0d      	ldr	r3, [pc, #52]	; (8027b20 <SMS_bluetoothStatusUpdater+0x58>)
 8027aec:	6818      	ldr	r0, [r3, #0]
 8027aee:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8027af2:	9300      	str	r3, [sp, #0]
 8027af4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8027af8:	2200      	movs	r2, #0
 8027afa:	2100      	movs	r1, #0
 8027afc:	f7e1 f9b8 	bl	8008e70 <lv_obj_align>
		}
		else lv_label_set_text(slpbluetoothLbl, " ");
}
 8027b00:	e005      	b.n	8027b0e <SMS_bluetoothStatusUpdater+0x46>
		else lv_label_set_text(slpbluetoothLbl, " ");
 8027b02:	4b07      	ldr	r3, [pc, #28]	; (8027b20 <SMS_bluetoothStatusUpdater+0x58>)
 8027b04:	681b      	ldr	r3, [r3, #0]
 8027b06:	4908      	ldr	r1, [pc, #32]	; (8027b28 <SMS_bluetoothStatusUpdater+0x60>)
 8027b08:	4618      	mov	r0, r3
 8027b0a:	f7f4 fbfb 	bl	801c304 <lv_label_set_text>
}
 8027b0e:	bf00      	nop
 8027b10:	46bd      	mov	sp, r7
 8027b12:	bd80      	pop	{r7, pc}
 8027b14:	2001be99 	.word	0x2001be99
 8027b18:	2001be18 	.word	0x2001be18
 8027b1c:	2001be14 	.word	0x2001be14
 8027b20:	2001be54 	.word	0x2001be54
 8027b24:	0802cf28 	.word	0x0802cf28
 8027b28:	0802cf54 	.word	0x0802cf54

08027b2c <SleepModeScreen_SetTime>:

//Getter and setter functions
void SleepModeScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 8027b2c:	b480      	push	{r7}
 8027b2e:	b083      	sub	sp, #12
 8027b30:	af00      	add	r7, sp, #0
 8027b32:	4603      	mov	r3, r0
 8027b34:	71fb      	strb	r3, [r7, #7]
 8027b36:	460b      	mov	r3, r1
 8027b38:	71bb      	strb	r3, [r7, #6]
 8027b3a:	4613      	mov	r3, r2
 8027b3c:	717b      	strb	r3, [r7, #5]
	hours = getHours;
 8027b3e:	4a07      	ldr	r2, [pc, #28]	; (8027b5c <SleepModeScreen_SetTime+0x30>)
 8027b40:	79fb      	ldrb	r3, [r7, #7]
 8027b42:	7013      	strb	r3, [r2, #0]
	minutes = getMinutes;
 8027b44:	4a06      	ldr	r2, [pc, #24]	; (8027b60 <SleepModeScreen_SetTime+0x34>)
 8027b46:	79bb      	ldrb	r3, [r7, #6]
 8027b48:	7013      	strb	r3, [r2, #0]
	seconds = getSeconds;
 8027b4a:	4a06      	ldr	r2, [pc, #24]	; (8027b64 <SleepModeScreen_SetTime+0x38>)
 8027b4c:	797b      	ldrb	r3, [r7, #5]
 8027b4e:	7013      	strb	r3, [r2, #0]
}
 8027b50:	bf00      	nop
 8027b52:	370c      	adds	r7, #12
 8027b54:	46bd      	mov	sp, r7
 8027b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b5a:	4770      	bx	lr
 8027b5c:	2001bc91 	.word	0x2001bc91
 8027b60:	2001bc90 	.word	0x2001bc90
 8027b64:	2001bc80 	.word	0x2001bc80

08027b68 <SleepModeScreen_SetDate>:
void SleepModeScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate, char* getWeekDay) {
 8027b68:	b480      	push	{r7}
 8027b6a:	b083      	sub	sp, #12
 8027b6c:	af00      	add	r7, sp, #0
 8027b6e:	603b      	str	r3, [r7, #0]
 8027b70:	4603      	mov	r3, r0
 8027b72:	71fb      	strb	r3, [r7, #7]
 8027b74:	460b      	mov	r3, r1
 8027b76:	71bb      	strb	r3, [r7, #6]
 8027b78:	4613      	mov	r3, r2
 8027b7a:	717b      	strb	r3, [r7, #5]
	year =getYear+2000;
 8027b7c:	79fb      	ldrb	r3, [r7, #7]
 8027b7e:	b29b      	uxth	r3, r3
 8027b80:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8027b84:	b29a      	uxth	r2, r3
 8027b86:	4b08      	ldr	r3, [pc, #32]	; (8027ba8 <SleepModeScreen_SetDate+0x40>)
 8027b88:	801a      	strh	r2, [r3, #0]
	month = getMonth;
 8027b8a:	4a08      	ldr	r2, [pc, #32]	; (8027bac <SleepModeScreen_SetDate+0x44>)
 8027b8c:	79bb      	ldrb	r3, [r7, #6]
 8027b8e:	7013      	strb	r3, [r2, #0]
	date = getDate;
 8027b90:	4a07      	ldr	r2, [pc, #28]	; (8027bb0 <SleepModeScreen_SetDate+0x48>)
 8027b92:	797b      	ldrb	r3, [r7, #5]
 8027b94:	7013      	strb	r3, [r2, #0]
	slpweekDayStr =getWeekDay;
 8027b96:	4a07      	ldr	r2, [pc, #28]	; (8027bb4 <SleepModeScreen_SetDate+0x4c>)
 8027b98:	683b      	ldr	r3, [r7, #0]
 8027b9a:	6013      	str	r3, [r2, #0]

}
 8027b9c:	bf00      	nop
 8027b9e:	370c      	adds	r7, #12
 8027ba0:	46bd      	mov	sp, r7
 8027ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ba6:	4770      	bx	lr
 8027ba8:	2001bc82 	.word	0x2001bc82
 8027bac:	2001bbc0 	.word	0x2001bbc0
 8027bb0:	2001c160 	.word	0x2001c160
 8027bb4:	2001beb8 	.word	0x2001beb8

08027bb8 <SleepModeScreen_SetBatteryVal>:
void SleepModeScreen_SetBatteryVal(char* getBatteryVal, lv_color_t getBatteryColor) {
 8027bb8:	b480      	push	{r7}
 8027bba:	b083      	sub	sp, #12
 8027bbc:	af00      	add	r7, sp, #0
 8027bbe:	6078      	str	r0, [r7, #4]
 8027bc0:	8039      	strh	r1, [r7, #0]
	slpbatteryVal =getBatteryVal;
 8027bc2:	4a06      	ldr	r2, [pc, #24]	; (8027bdc <SleepModeScreen_SetBatteryVal+0x24>)
 8027bc4:	687b      	ldr	r3, [r7, #4]
 8027bc6:	6013      	str	r3, [r2, #0]
	slpbatteryColor =getBatteryColor;
 8027bc8:	4a05      	ldr	r2, [pc, #20]	; (8027be0 <SleepModeScreen_SetBatteryVal+0x28>)
 8027bca:	883b      	ldrh	r3, [r7, #0]
 8027bcc:	8013      	strh	r3, [r2, #0]
}
 8027bce:	bf00      	nop
 8027bd0:	370c      	adds	r7, #12
 8027bd2:	46bd      	mov	sp, r7
 8027bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027bd8:	4770      	bx	lr
 8027bda:	bf00      	nop
 8027bdc:	2001bea4 	.word	0x2001bea4
 8027be0:	2001bea0 	.word	0x2001bea0

08027be4 <SleepModeScreen_SetBluetoothStatusVal>:
void SleepModeScreen_SetBluetoothStatusVal(bool getBluetoothStatus, lv_color_t getBluetoothColor) {
 8027be4:	b480      	push	{r7}
 8027be6:	b083      	sub	sp, #12
 8027be8:	af00      	add	r7, sp, #0
 8027bea:	4603      	mov	r3, r0
 8027bec:	80b9      	strh	r1, [r7, #4]
 8027bee:	71fb      	strb	r3, [r7, #7]
	slpbluetoothStatus =getBluetoothStatus;
 8027bf0:	4a05      	ldr	r2, [pc, #20]	; (8027c08 <SleepModeScreen_SetBluetoothStatusVal+0x24>)
 8027bf2:	79fb      	ldrb	r3, [r7, #7]
 8027bf4:	7013      	strb	r3, [r2, #0]
	slpbluetoothColor =getBluetoothColor;
 8027bf6:	4a05      	ldr	r2, [pc, #20]	; (8027c0c <SleepModeScreen_SetBluetoothStatusVal+0x28>)
 8027bf8:	88bb      	ldrh	r3, [r7, #4]
 8027bfa:	8013      	strh	r3, [r2, #0]
}
 8027bfc:	bf00      	nop
 8027bfe:	370c      	adds	r7, #12
 8027c00:	46bd      	mov	sp, r7
 8027c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c06:	4770      	bx	lr
 8027c08:	2001be99 	.word	0x2001be99
 8027c0c:	2001be14 	.word	0x2001be14

08027c10 <SleepModeScreen_TaskControllerSet>:
void SleepModeScreen_TaskControllerSet(bool active){
 8027c10:	b480      	push	{r7}
 8027c12:	b083      	sub	sp, #12
 8027c14:	af00      	add	r7, sp, #0
 8027c16:	4603      	mov	r3, r0
 8027c18:	71fb      	strb	r3, [r7, #7]
	slptaskController = active;
 8027c1a:	4a04      	ldr	r2, [pc, #16]	; (8027c2c <SleepModeScreen_TaskControllerSet+0x1c>)
 8027c1c:	79fb      	ldrb	r3, [r7, #7]
 8027c1e:	7013      	strb	r3, [r2, #0]
}
 8027c20:	bf00      	nop
 8027c22:	370c      	adds	r7, #12
 8027c24:	46bd      	mov	sp, r7
 8027c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c2a:	4770      	bx	lr
 8027c2c:	2001be98 	.word	0x2001be98

08027c30 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8027c30:	b480      	push	{r7}
 8027c32:	b085      	sub	sp, #20
 8027c34:	af00      	add	r7, sp, #0
 8027c36:	4603      	mov	r3, r0
 8027c38:	71fb      	strb	r3, [r7, #7]
 8027c3a:	460b      	mov	r3, r1
 8027c3c:	71bb      	strb	r3, [r7, #6]
 8027c3e:	4613      	mov	r3, r2
 8027c40:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8027c42:	79bb      	ldrb	r3, [r7, #6]
 8027c44:	095b      	lsrs	r3, r3, #5
 8027c46:	b2db      	uxtb	r3, r3
 8027c48:	f003 0307 	and.w	r3, r3, #7
 8027c4c:	b2da      	uxtb	r2, r3
 8027c4e:	7b3b      	ldrb	r3, [r7, #12]
 8027c50:	f362 0302 	bfi	r3, r2, #0, #3
 8027c54:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8027c56:	79fb      	ldrb	r3, [r7, #7]
 8027c58:	08db      	lsrs	r3, r3, #3
 8027c5a:	b2db      	uxtb	r3, r3
 8027c5c:	f003 031f 	and.w	r3, r3, #31
 8027c60:	b2da      	uxtb	r2, r3
 8027c62:	7b3b      	ldrb	r3, [r7, #12]
 8027c64:	f362 03c7 	bfi	r3, r2, #3, #5
 8027c68:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8027c6a:	797b      	ldrb	r3, [r7, #5]
 8027c6c:	08db      	lsrs	r3, r3, #3
 8027c6e:	b2db      	uxtb	r3, r3
 8027c70:	f003 031f 	and.w	r3, r3, #31
 8027c74:	b2da      	uxtb	r2, r3
 8027c76:	7b7b      	ldrb	r3, [r7, #13]
 8027c78:	f362 0304 	bfi	r3, r2, #0, #5
 8027c7c:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8027c7e:	79bb      	ldrb	r3, [r7, #6]
 8027c80:	089b      	lsrs	r3, r3, #2
 8027c82:	b2db      	uxtb	r3, r3
 8027c84:	f003 0307 	and.w	r3, r3, #7
 8027c88:	b2da      	uxtb	r2, r3
 8027c8a:	7b7b      	ldrb	r3, [r7, #13]
 8027c8c:	f362 1347 	bfi	r3, r2, #5, #3
 8027c90:	737b      	strb	r3, [r7, #13]
    return color;
 8027c92:	89bb      	ldrh	r3, [r7, #12]
}
 8027c94:	4618      	mov	r0, r3
 8027c96:	3714      	adds	r7, #20
 8027c98:	46bd      	mov	sp, r7
 8027c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c9e:	4770      	bx	lr

08027ca0 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8027ca0:	b580      	push	{r7, lr}
 8027ca2:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8027ca4:	f7ed fa46 	bl	8015134 <lv_disp_get_default>
 8027ca8:	4603      	mov	r3, r0
 8027caa:	4618      	mov	r0, r3
 8027cac:	f7df ff0e 	bl	8007acc <lv_disp_get_scr_act>
 8027cb0:	4603      	mov	r3, r0
}
 8027cb2:	4618      	mov	r0, r3
 8027cb4:	bd80      	pop	{r7, pc}

08027cb6 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8027cb6:	b580      	push	{r7, lr}
 8027cb8:	b084      	sub	sp, #16
 8027cba:	af00      	add	r7, sp, #0
 8027cbc:	60f8      	str	r0, [r7, #12]
 8027cbe:	460b      	mov	r3, r1
 8027cc0:	607a      	str	r2, [r7, #4]
 8027cc2:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8027cc4:	6879      	ldr	r1, [r7, #4]
 8027cc6:	68f8      	ldr	r0, [r7, #12]
 8027cc8:	f7e1 fd77 	bl	80097ba <lv_obj_set_style>
}
 8027ccc:	bf00      	nop
 8027cce:	3710      	adds	r7, #16
 8027cd0:	46bd      	mov	sp, r7
 8027cd2:	bd80      	pop	{r7, pc}

08027cd4 <tos_StartScreen_Init>:
#include "StartScreen.h"
#include "../../tOSbaga.h"
#include "stdio.h"


void tos_StartScreen_Init(void) {
 8027cd4:	b590      	push	{r4, r7, lr}
 8027cd6:	b085      	sub	sp, #20
 8027cd8:	af02      	add	r7, sp, #8
	static lv_style_t style_screen;
	lv_style_copy(&style_screen, &lv_style_plain);
 8027cda:	4926      	ldr	r1, [pc, #152]	; (8027d74 <tos_StartScreen_Init+0xa0>)
 8027cdc:	4826      	ldr	r0, [pc, #152]	; (8027d78 <tos_StartScreen_Init+0xa4>)
 8027cde:	f7e3 fb0b 	bl	800b2f8 <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_BLACK;
 8027ce2:	4b25      	ldr	r3, [pc, #148]	; (8027d78 <tos_StartScreen_Init+0xa4>)
 8027ce4:	2200      	movs	r2, #0
 8027ce6:	805a      	strh	r2, [r3, #2]
	style_screen.body.grad_color = LV_COLOR_BLACK;
 8027ce8:	4b23      	ldr	r3, [pc, #140]	; (8027d78 <tos_StartScreen_Init+0xa4>)
 8027cea:	2200      	movs	r2, #0
 8027cec:	809a      	strh	r2, [r3, #4]
	style_screen.text.color = lv_color_make(68,133,247);
 8027cee:	4c22      	ldr	r4, [pc, #136]	; (8027d78 <tos_StartScreen_Init+0xa4>)
 8027cf0:	22f7      	movs	r2, #247	; 0xf7
 8027cf2:	2185      	movs	r1, #133	; 0x85
 8027cf4:	2044      	movs	r0, #68	; 0x44
 8027cf6:	f7ff ff9b 	bl	8027c30 <lv_color_make>
 8027cfa:	8420      	strh	r0, [r4, #32]
	style_screen.text.font = &lv_font_roboto_28;
 8027cfc:	4b1e      	ldr	r3, [pc, #120]	; (8027d78 <tos_StartScreen_Init+0xa4>)
 8027cfe:	4a1f      	ldr	r2, [pc, #124]	; (8027d7c <tos_StartScreen_Init+0xa8>)
 8027d00:	625a      	str	r2, [r3, #36]	; 0x24
	lv_obj_set_style(lv_scr_act(), &style_screen);
 8027d02:	f7ff ffcd 	bl	8027ca0 <lv_scr_act>
 8027d06:	4603      	mov	r3, r0
 8027d08:	491b      	ldr	r1, [pc, #108]	; (8027d78 <tos_StartScreen_Init+0xa4>)
 8027d0a:	4618      	mov	r0, r3
 8027d0c:	f7e1 fd55 	bl	80097ba <lv_obj_set_style>

	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8027d10:	f7ff ffc6 	bl	8027ca0 <lv_scr_act>
 8027d14:	4603      	mov	r3, r0
 8027d16:	2100      	movs	r1, #0
 8027d18:	4618      	mov	r0, r3
 8027d1a:	f7f3 fe35 	bl	801b988 <lv_img_create>
 8027d1e:	6078      	str	r0, [r7, #4]
	lv_img_set_src(img1, &tos75x75);
 8027d20:	4917      	ldr	r1, [pc, #92]	; (8027d80 <tos_StartScreen_Init+0xac>)
 8027d22:	6878      	ldr	r0, [r7, #4]
 8027d24:	f7f3 fece 	bl	801bac4 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -20);
 8027d28:	f06f 0313 	mvn.w	r3, #19
 8027d2c:	9300      	str	r3, [sp, #0]
 8027d2e:	2300      	movs	r3, #0
 8027d30:	2200      	movs	r2, #0
 8027d32:	2100      	movs	r1, #0
 8027d34:	6878      	ldr	r0, [r7, #4]
 8027d36:	f7e1 f89b 	bl	8008e70 <lv_obj_align>

	lv_obj_t * tosLbl =lv_label_create(lv_scr_act(), NULL);
 8027d3a:	f7ff ffb1 	bl	8027ca0 <lv_scr_act>
 8027d3e:	4603      	mov	r3, r0
 8027d40:	2100      	movs	r1, #0
 8027d42:	4618      	mov	r0, r3
 8027d44:	f7f4 f9ac 	bl	801c0a0 <lv_label_create>
 8027d48:	6038      	str	r0, [r7, #0]
 	lv_label_set_style(tosLbl, LV_LABEL_STYLE_MAIN, &style_screen);
 8027d4a:	4a0b      	ldr	r2, [pc, #44]	; (8027d78 <tos_StartScreen_Init+0xa4>)
 8027d4c:	2100      	movs	r1, #0
 8027d4e:	6838      	ldr	r0, [r7, #0]
 8027d50:	f7ff ffb1 	bl	8027cb6 <lv_label_set_style>
 	lv_label_set_text(tosLbl, "tOSbaga fsw 1.0");
 8027d54:	490b      	ldr	r1, [pc, #44]	; (8027d84 <tos_StartScreen_Init+0xb0>)
 8027d56:	6838      	ldr	r0, [r7, #0]
 8027d58:	f7f4 fad4 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(tosLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8027d5c:	2332      	movs	r3, #50	; 0x32
 8027d5e:	9300      	str	r3, [sp, #0]
 8027d60:	2300      	movs	r3, #0
 8027d62:	2200      	movs	r2, #0
 8027d64:	2100      	movs	r1, #0
 8027d66:	6838      	ldr	r0, [r7, #0]
 8027d68:	f7e1 f882 	bl	8008e70 <lv_obj_align>
}
 8027d6c:	bf00      	nop
 8027d6e:	370c      	adds	r7, #12
 8027d70:	46bd      	mov	sp, r7
 8027d72:	bd90      	pop	{r4, r7, pc}
 8027d74:	2001ba10 	.word	0x2001ba10
 8027d78:	2001b380 	.word	0x2001b380
 8027d7c:	20002398 	.word	0x20002398
 8027d80:	08047c14 	.word	0x08047c14
 8027d84:	0802cf58 	.word	0x0802cf58

08027d88 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8027d88:	b480      	push	{r7}
 8027d8a:	b085      	sub	sp, #20
 8027d8c:	af00      	add	r7, sp, #0
 8027d8e:	4603      	mov	r3, r0
 8027d90:	71fb      	strb	r3, [r7, #7]
 8027d92:	460b      	mov	r3, r1
 8027d94:	71bb      	strb	r3, [r7, #6]
 8027d96:	4613      	mov	r3, r2
 8027d98:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8027d9a:	79bb      	ldrb	r3, [r7, #6]
 8027d9c:	095b      	lsrs	r3, r3, #5
 8027d9e:	b2db      	uxtb	r3, r3
 8027da0:	f003 0307 	and.w	r3, r3, #7
 8027da4:	b2da      	uxtb	r2, r3
 8027da6:	7b3b      	ldrb	r3, [r7, #12]
 8027da8:	f362 0302 	bfi	r3, r2, #0, #3
 8027dac:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8027dae:	79fb      	ldrb	r3, [r7, #7]
 8027db0:	08db      	lsrs	r3, r3, #3
 8027db2:	b2db      	uxtb	r3, r3
 8027db4:	f003 031f 	and.w	r3, r3, #31
 8027db8:	b2da      	uxtb	r2, r3
 8027dba:	7b3b      	ldrb	r3, [r7, #12]
 8027dbc:	f362 03c7 	bfi	r3, r2, #3, #5
 8027dc0:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8027dc2:	797b      	ldrb	r3, [r7, #5]
 8027dc4:	08db      	lsrs	r3, r3, #3
 8027dc6:	b2db      	uxtb	r3, r3
 8027dc8:	f003 031f 	and.w	r3, r3, #31
 8027dcc:	b2da      	uxtb	r2, r3
 8027dce:	7b7b      	ldrb	r3, [r7, #13]
 8027dd0:	f362 0304 	bfi	r3, r2, #0, #5
 8027dd4:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8027dd6:	79bb      	ldrb	r3, [r7, #6]
 8027dd8:	089b      	lsrs	r3, r3, #2
 8027dda:	b2db      	uxtb	r3, r3
 8027ddc:	f003 0307 	and.w	r3, r3, #7
 8027de0:	b2da      	uxtb	r2, r3
 8027de2:	7b7b      	ldrb	r3, [r7, #13]
 8027de4:	f362 1347 	bfi	r3, r2, #5, #3
 8027de8:	737b      	strb	r3, [r7, #13]
    return color;
 8027dea:	89bb      	ldrh	r3, [r7, #12]
}
 8027dec:	4618      	mov	r0, r3
 8027dee:	3714      	adds	r7, #20
 8027df0:	46bd      	mov	sp, r7
 8027df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027df6:	4770      	bx	lr

08027df8 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8027df8:	b580      	push	{r7, lr}
 8027dfa:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8027dfc:	f7ed f99a 	bl	8015134 <lv_disp_get_default>
 8027e00:	4603      	mov	r3, r0
 8027e02:	4618      	mov	r0, r3
 8027e04:	f7df fe62 	bl	8007acc <lv_disp_get_scr_act>
 8027e08:	4603      	mov	r3, r0
}
 8027e0a:	4618      	mov	r0, r3
 8027e0c:	bd80      	pop	{r7, pc}

08027e0e <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8027e0e:	b580      	push	{r7, lr}
 8027e10:	b084      	sub	sp, #16
 8027e12:	af00      	add	r7, sp, #0
 8027e14:	60f8      	str	r0, [r7, #12]
 8027e16:	460b      	mov	r3, r1
 8027e18:	607a      	str	r2, [r7, #4]
 8027e1a:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8027e1c:	6879      	ldr	r1, [r7, #4]
 8027e1e:	68f8      	ldr	r0, [r7, #12]
 8027e20:	f7e1 fccb 	bl	80097ba <lv_obj_set_style>
}
 8027e24:	bf00      	nop
 8027e26:	3710      	adds	r7, #16
 8027e28:	46bd      	mov	sp, r7
 8027e2a:	bd80      	pop	{r7, pc}

08027e2c <tos_StepAndKcalScreen_Init>:
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param theme using for set Theme
 * true->dark || false->light
*/
void tos_StepAndKcalScreen_Init(bool unitType, bool theme){
 8027e2c:	b580      	push	{r7, lr}
 8027e2e:	b082      	sub	sp, #8
 8027e30:	af00      	add	r7, sp, #0
 8027e32:	4603      	mov	r3, r0
 8027e34:	460a      	mov	r2, r1
 8027e36:	71fb      	strb	r3, [r7, #7]
 8027e38:	4613      	mov	r3, r2
 8027e3a:	71bb      	strb	r3, [r7, #6]
	lv_obj_clean(lv_scr_act());
 8027e3c:	f7ff ffdc 	bl	8027df8 <lv_scr_act>
 8027e40:	4603      	mov	r3, r0
 8027e42:	4618      	mov	r0, r3
 8027e44:	f7e0 fda2 	bl	800898c <lv_obj_clean>
	lv_style_copy(&description_Style, &lv_style_plain);
 8027e48:	4928      	ldr	r1, [pc, #160]	; (8027eec <tos_StepAndKcalScreen_Init+0xc0>)
 8027e4a:	4829      	ldr	r0, [pc, #164]	; (8027ef0 <tos_StepAndKcalScreen_Init+0xc4>)
 8027e4c:	f7e3 fa54 	bl	800b2f8 <lv_style_copy>
	description_Style.text.font = &lv_font_unscii_8;
 8027e50:	4b27      	ldr	r3, [pc, #156]	; (8027ef0 <tos_StepAndKcalScreen_Init+0xc4>)
 8027e52:	4a28      	ldr	r2, [pc, #160]	; (8027ef4 <tos_StepAndKcalScreen_Init+0xc8>)
 8027e54:	625a      	str	r2, [r3, #36]	; 0x24
	description_Style.text.color = LV_COLOR_GRAY;
 8027e56:	4a26      	ldr	r2, [pc, #152]	; (8027ef0 <tos_StepAndKcalScreen_Init+0xc4>)
 8027e58:	4b27      	ldr	r3, [pc, #156]	; (8027ef8 <tos_StepAndKcalScreen_Init+0xcc>)
 8027e5a:	881b      	ldrh	r3, [r3, #0]
 8027e5c:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&style_screen, &lv_style_plain);
 8027e5e:	4923      	ldr	r1, [pc, #140]	; (8027eec <tos_StepAndKcalScreen_Init+0xc0>)
 8027e60:	4826      	ldr	r0, [pc, #152]	; (8027efc <tos_StepAndKcalScreen_Init+0xd0>)
 8027e62:	f7e3 fa49 	bl	800b2f8 <lv_style_copy>
	if(theme){
 8027e66:	79bb      	ldrb	r3, [r7, #6]
 8027e68:	2b00      	cmp	r3, #0
 8027e6a:	d00a      	beq.n	8027e82 <tos_StepAndKcalScreen_Init+0x56>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8027e6c:	4b23      	ldr	r3, [pc, #140]	; (8027efc <tos_StepAndKcalScreen_Init+0xd0>)
 8027e6e:	2200      	movs	r2, #0
 8027e70:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 8027e72:	4b22      	ldr	r3, [pc, #136]	; (8027efc <tos_StepAndKcalScreen_Init+0xd0>)
 8027e74:	2200      	movs	r2, #0
 8027e76:	809a      	strh	r2, [r3, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 8027e78:	4a1d      	ldr	r2, [pc, #116]	; (8027ef0 <tos_StepAndKcalScreen_Init+0xc4>)
 8027e7a:	4b21      	ldr	r3, [pc, #132]	; (8027f00 <tos_StepAndKcalScreen_Init+0xd4>)
 8027e7c:	881b      	ldrh	r3, [r3, #0]
 8027e7e:	8413      	strh	r3, [r2, #32]
 8027e80:	e00b      	b.n	8027e9a <tos_StepAndKcalScreen_Init+0x6e>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 8027e82:	4a1e      	ldr	r2, [pc, #120]	; (8027efc <tos_StepAndKcalScreen_Init+0xd0>)
 8027e84:	4b1f      	ldr	r3, [pc, #124]	; (8027f04 <tos_StepAndKcalScreen_Init+0xd8>)
 8027e86:	881b      	ldrh	r3, [r3, #0]
 8027e88:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8027e8a:	4a1c      	ldr	r2, [pc, #112]	; (8027efc <tos_StepAndKcalScreen_Init+0xd0>)
 8027e8c:	4b1d      	ldr	r3, [pc, #116]	; (8027f04 <tos_StepAndKcalScreen_Init+0xd8>)
 8027e8e:	881b      	ldrh	r3, [r3, #0]
 8027e90:	8093      	strh	r3, [r2, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 8027e92:	4a17      	ldr	r2, [pc, #92]	; (8027ef0 <tos_StepAndKcalScreen_Init+0xc4>)
 8027e94:	4b1a      	ldr	r3, [pc, #104]	; (8027f00 <tos_StepAndKcalScreen_Init+0xd4>)
 8027e96:	881b      	ldrh	r3, [r3, #0]
 8027e98:	8413      	strh	r3, [r2, #32]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8027e9a:	f7ff ffad 	bl	8027df8 <lv_scr_act>
 8027e9e:	4603      	mov	r3, r0
 8027ea0:	4916      	ldr	r1, [pc, #88]	; (8027efc <tos_StepAndKcalScreen_Init+0xd0>)
 8027ea2:	4618      	mov	r0, r3
 8027ea4:	f7e1 fc89 	bl	80097ba <lv_obj_set_style>

	SAK_unitType=unitType;
 8027ea8:	4a17      	ldr	r2, [pc, #92]	; (8027f08 <tos_StepAndKcalScreen_Init+0xdc>)
 8027eaa:	79fb      	ldrb	r3, [r7, #7]
 8027eac:	7013      	strb	r3, [r2, #0]
	SAK_buffTmp="null";
 8027eae:	4b17      	ldr	r3, [pc, #92]	; (8027f0c <tos_StepAndKcalScreen_Init+0xe0>)
 8027eb0:	4a17      	ldr	r2, [pc, #92]	; (8027f10 <tos_StepAndKcalScreen_Init+0xe4>)
 8027eb2:	601a      	str	r2, [r3, #0]

	StepAndKcal_Steps(theme);
 8027eb4:	79bb      	ldrb	r3, [r7, #6]
 8027eb6:	4618      	mov	r0, r3
 8027eb8:	f000 f830 	bl	8027f1c <StepAndKcal_Steps>
	StepAndKcal_kCals(theme);
 8027ebc:	79bb      	ldrb	r3, [r7, #6]
 8027ebe:	4618      	mov	r0, r3
 8027ec0:	f000 f8e4 	bl	802808c <StepAndKcal_kCals>
	StepAndKcal_Distances(unitType,theme);
 8027ec4:	79ba      	ldrb	r2, [r7, #6]
 8027ec6:	79fb      	ldrb	r3, [r7, #7]
 8027ec8:	4611      	mov	r1, r2
 8027eca:	4618      	mov	r0, r3
 8027ecc:	f000 f996 	bl	80281fc <StepAndKcal_Distances>
	SAk_taskController=true;
 8027ed0:	4b10      	ldr	r3, [pc, #64]	; (8027f14 <tos_StepAndKcalScreen_Init+0xe8>)
 8027ed2:	2201      	movs	r2, #1
 8027ed4:	701a      	strb	r2, [r3, #0]
	lv_task_create(SAK_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 8027ed6:	2300      	movs	r3, #0
 8027ed8:	2201      	movs	r2, #1
 8027eda:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8027ede:	480e      	ldr	r0, [pc, #56]	; (8027f18 <tos_StepAndKcalScreen_Init+0xec>)
 8027ee0:	f7ee fd6c 	bl	80169bc <lv_task_create>
}
 8027ee4:	bf00      	nop
 8027ee6:	3708      	adds	r7, #8
 8027ee8:	46bd      	mov	sp, r7
 8027eea:	bd80      	pop	{r7, pc}
 8027eec:	2001ba10 	.word	0x2001ba10
 8027ef0:	2001b3f8 	.word	0x2001b3f8
 8027ef4:	200026d0 	.word	0x200026d0
 8027ef8:	0802cf70 	.word	0x0802cf70
 8027efc:	2001b3bc 	.word	0x2001b3bc
 8027f00:	0802cf74 	.word	0x0802cf74
 8027f04:	0802cf78 	.word	0x0802cf78
 8027f08:	2001bef0 	.word	0x2001bef0
 8027f0c:	2001bec4 	.word	0x2001bec4
 8027f10:	0802cf68 	.word	0x0802cf68
 8027f14:	2001bee8 	.word	0x2001bee8
 8027f18:	0802837d 	.word	0x0802837d

08027f1c <StepAndKcal_Steps>:
/* This function using for initiation steps Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_Steps(bool theme){
 8027f1c:	b590      	push	{r4, r7, lr}
 8027f1e:	b087      	sub	sp, #28
 8027f20:	af02      	add	r7, sp, #8
 8027f22:	4603      	mov	r3, r0
 8027f24:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8027f26:	f7ff ff67 	bl	8027df8 <lv_scr_act>
 8027f2a:	4603      	mov	r3, r0
 8027f2c:	2100      	movs	r1, #0
 8027f2e:	4618      	mov	r0, r3
 8027f30:	f7f3 fd2a 	bl	801b988 <lv_img_create>
 8027f34:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &stepsBlack42x28);
 8027f36:	79fb      	ldrb	r3, [r7, #7]
 8027f38:	2b00      	cmp	r3, #0
 8027f3a:	d004      	beq.n	8027f46 <StepAndKcal_Steps+0x2a>
 8027f3c:	4949      	ldr	r1, [pc, #292]	; (8028064 <StepAndKcal_Steps+0x148>)
 8027f3e:	68f8      	ldr	r0, [r7, #12]
 8027f40:	f7f3 fdc0 	bl	801bac4 <lv_img_set_src>
 8027f44:	e003      	b.n	8027f4e <StepAndKcal_Steps+0x32>
	else lv_img_set_src(img1, &stepsWhite42x28);
 8027f46:	4948      	ldr	r1, [pc, #288]	; (8028068 <StepAndKcal_Steps+0x14c>)
 8027f48:	68f8      	ldr	r0, [r7, #12]
 8027f4a:	f7f3 fdbb 	bl	801bac4 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -83);
 8027f4e:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8027f52:	9300      	str	r3, [sp, #0]
 8027f54:	2300      	movs	r3, #0
 8027f56:	2200      	movs	r2, #0
 8027f58:	2100      	movs	r1, #0
 8027f5a:	68f8      	ldr	r0, [r7, #12]
 8027f5c:	f7e0 ff88 	bl	8008e70 <lv_obj_align>

   	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8027f60:	f7ff ff4a 	bl	8027df8 <lv_scr_act>
 8027f64:	4603      	mov	r3, r0
 8027f66:	2100      	movs	r1, #0
 8027f68:	4618      	mov	r0, r3
 8027f6a:	f7f4 f899 	bl	801c0a0 <lv_label_create>
 8027f6e:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8027f70:	4a3e      	ldr	r2, [pc, #248]	; (802806c <StepAndKcal_Steps+0x150>)
 8027f72:	2100      	movs	r1, #0
 8027f74:	68b8      	ldr	r0, [r7, #8]
 8027f76:	f7ff ff4a 	bl	8027e0e <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 8027f7a:	493d      	ldr	r1, [pc, #244]	; (8028070 <StepAndKcal_Steps+0x154>)
 8027f7c:	68b8      	ldr	r0, [r7, #8]
 8027f7e:	f7f4 f9c1 	bl	801c304 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, 0, -9);
 8027f82:	f06f 0308 	mvn.w	r3, #8
 8027f86:	9300      	str	r3, [sp, #0]
 8027f88:	2300      	movs	r3, #0
 8027f8a:	2200      	movs	r2, #0
 8027f8c:	2100      	movs	r1, #0
 8027f8e:	68b8      	ldr	r0, [r7, #8]
 8027f90:	f7e0 ff6e 	bl	8008e70 <lv_obj_align>

    static lv_style_t steps_Style;
    lv_style_copy(&steps_Style, &lv_style_plain);
 8027f94:	4937      	ldr	r1, [pc, #220]	; (8028074 <StepAndKcal_Steps+0x158>)
 8027f96:	4838      	ldr	r0, [pc, #224]	; (8028078 <StepAndKcal_Steps+0x15c>)
 8027f98:	f7e3 f9ae 	bl	800b2f8 <lv_style_copy>
    steps_Style.line.color = lv_color_make(101,204,53);
 8027f9c:	4c36      	ldr	r4, [pc, #216]	; (8028078 <StepAndKcal_Steps+0x15c>)
 8027f9e:	2235      	movs	r2, #53	; 0x35
 8027fa0:	21cc      	movs	r1, #204	; 0xcc
 8027fa2:	2065      	movs	r0, #101	; 0x65
 8027fa4:	f7ff fef0 	bl	8027d88 <lv_color_make>
 8027fa8:	86a0      	strh	r0, [r4, #52]	; 0x34
    steps_Style.line.width = 3;
 8027faa:	4b33      	ldr	r3, [pc, #204]	; (8028078 <StepAndKcal_Steps+0x15c>)
 8027fac:	2203      	movs	r2, #3
 8027fae:	86da      	strh	r2, [r3, #54]	; 0x36
    steps_Style.text.color = lv_color_make(101,204,53);
 8027fb0:	4c31      	ldr	r4, [pc, #196]	; (8028078 <StepAndKcal_Steps+0x15c>)
 8027fb2:	2235      	movs	r2, #53	; 0x35
 8027fb4:	21cc      	movs	r1, #204	; 0xcc
 8027fb6:	2065      	movs	r0, #101	; 0x65
 8027fb8:	f7ff fee6 	bl	8027d88 <lv_color_make>
 8027fbc:	8420      	strh	r0, [r4, #32]
    steps_Style.text.font = &digital_font_for_number_30;
 8027fbe:	4b2e      	ldr	r3, [pc, #184]	; (8028078 <StepAndKcal_Steps+0x15c>)
 8027fc0:	4a2e      	ldr	r2, [pc, #184]	; (802807c <StepAndKcal_Steps+0x160>)
 8027fc2:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    SAK_stepsArc = lv_arc_create(lv_scr_act(), NULL);
 8027fc4:	f7ff ff18 	bl	8027df8 <lv_scr_act>
 8027fc8:	4603      	mov	r3, r0
 8027fca:	2100      	movs	r1, #0
 8027fcc:	4618      	mov	r0, r3
 8027fce:	f7ef fa65 	bl	801749c <lv_arc_create>
 8027fd2:	4602      	mov	r2, r0
 8027fd4:	4b2a      	ldr	r3, [pc, #168]	; (8028080 <StepAndKcal_Steps+0x164>)
 8027fd6:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_stepsArc, 65, 65);
 8027fd8:	4b29      	ldr	r3, [pc, #164]	; (8028080 <StepAndKcal_Steps+0x164>)
 8027fda:	681b      	ldr	r3, [r3, #0]
 8027fdc:	2241      	movs	r2, #65	; 0x41
 8027fde:	2141      	movs	r1, #65	; 0x41
 8027fe0:	4618      	mov	r0, r3
 8027fe2:	f7e0 fea2 	bl	8008d2a <lv_obj_set_size>
    lv_arc_set_angles(SAK_stepsArc, 0, 360);
 8027fe6:	4b26      	ldr	r3, [pc, #152]	; (8028080 <StepAndKcal_Steps+0x164>)
 8027fe8:	681b      	ldr	r3, [r3, #0]
 8027fea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8027fee:	2100      	movs	r1, #0
 8027ff0:	4618      	mov	r0, r3
 8027ff2:	f7ef facf 	bl	8017594 <lv_arc_set_angles>
    lv_arc_set_style(SAK_stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8027ff6:	4b22      	ldr	r3, [pc, #136]	; (8028080 <StepAndKcal_Steps+0x164>)
 8027ff8:	681b      	ldr	r3, [r3, #0]
 8027ffa:	4a1f      	ldr	r2, [pc, #124]	; (8028078 <StepAndKcal_Steps+0x15c>)
 8027ffc:	2100      	movs	r1, #0
 8027ffe:	4618      	mov	r0, r3
 8028000:	f7ef faf1 	bl	80175e6 <lv_arc_set_style>
    lv_obj_align(SAK_stepsArc, NULL, LV_ALIGN_CENTER, 0, -83);
 8028004:	4b1e      	ldr	r3, [pc, #120]	; (8028080 <StepAndKcal_Steps+0x164>)
 8028006:	6818      	ldr	r0, [r3, #0]
 8028008:	f06f 0352 	mvn.w	r3, #82	; 0x52
 802800c:	9300      	str	r3, [sp, #0]
 802800e:	2300      	movs	r3, #0
 8028010:	2200      	movs	r2, #0
 8028012:	2100      	movs	r1, #0
 8028014:	f7e0 ff2c 	bl	8008e70 <lv_obj_align>

    SAK_stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8028018:	f7ff feee 	bl	8027df8 <lv_scr_act>
 802801c:	4603      	mov	r3, r0
 802801e:	2100      	movs	r1, #0
 8028020:	4618      	mov	r0, r3
 8028022:	f7f4 f83d 	bl	801c0a0 <lv_label_create>
 8028026:	4602      	mov	r2, r0
 8028028:	4b16      	ldr	r3, [pc, #88]	; (8028084 <StepAndKcal_Steps+0x168>)
 802802a:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(SAK_stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 802802c:	4b15      	ldr	r3, [pc, #84]	; (8028084 <StepAndKcal_Steps+0x168>)
 802802e:	681b      	ldr	r3, [r3, #0]
 8028030:	4a11      	ldr	r2, [pc, #68]	; (8028078 <StepAndKcal_Steps+0x15c>)
 8028032:	2100      	movs	r1, #0
 8028034:	4618      	mov	r0, r3
 8028036:	f7ff feea 	bl	8027e0e <lv_label_set_style>
   	lv_label_set_text(SAK_stepsLbl, "0000");
 802803a:	4b12      	ldr	r3, [pc, #72]	; (8028084 <StepAndKcal_Steps+0x168>)
 802803c:	681b      	ldr	r3, [r3, #0]
 802803e:	4912      	ldr	r1, [pc, #72]	; (8028088 <StepAndKcal_Steps+0x16c>)
 8028040:	4618      	mov	r0, r3
 8028042:	f7f4 f95f 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(SAK_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -30);
 8028046:	4b0f      	ldr	r3, [pc, #60]	; (8028084 <StepAndKcal_Steps+0x168>)
 8028048:	6818      	ldr	r0, [r3, #0]
 802804a:	f06f 031d 	mvn.w	r3, #29
 802804e:	9300      	str	r3, [sp, #0]
 8028050:	2300      	movs	r3, #0
 8028052:	2200      	movs	r2, #0
 8028054:	2100      	movs	r1, #0
 8028056:	f7e0 ff0b 	bl	8008e70 <lv_obj_align>
}
 802805a:	bf00      	nop
 802805c:	3714      	adds	r7, #20
 802805e:	46bd      	mov	sp, r7
 8028060:	bd90      	pop	{r4, r7, pc}
 8028062:	bf00      	nop
 8028064:	08041fb0 	.word	0x08041fb0
 8028068:	080428ec 	.word	0x080428ec
 802806c:	2001b3f8 	.word	0x2001b3f8
 8028070:	0802cf7c 	.word	0x0802cf7c
 8028074:	2001ba10 	.word	0x2001ba10
 8028078:	2001b434 	.word	0x2001b434
 802807c:	200027ec 	.word	0x200027ec
 8028080:	2001bec0 	.word	0x2001bec0
 8028084:	2001bee4 	.word	0x2001bee4
 8028088:	0802cf84 	.word	0x0802cf84

0802808c <StepAndKcal_kCals>:
/* This function using for initiation kCals Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_kCals(bool theme){
 802808c:	b590      	push	{r4, r7, lr}
 802808e:	b087      	sub	sp, #28
 8028090:	af02      	add	r7, sp, #8
 8028092:	4603      	mov	r3, r0
 8028094:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8028096:	f7ff feaf 	bl	8027df8 <lv_scr_act>
 802809a:	4603      	mov	r3, r0
 802809c:	2100      	movs	r1, #0
 802809e:	4618      	mov	r0, r3
 80280a0:	f7f3 fc72 	bl	801b988 <lv_img_create>
 80280a4:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &kCalsBlack42x28);
 80280a6:	79fb      	ldrb	r3, [r7, #7]
 80280a8:	2b00      	cmp	r3, #0
 80280aa:	d004      	beq.n	80280b6 <StepAndKcal_kCals+0x2a>
 80280ac:	4949      	ldr	r1, [pc, #292]	; (80281d4 <StepAndKcal_kCals+0x148>)
 80280ae:	68f8      	ldr	r0, [r7, #12]
 80280b0:	f7f3 fd08 	bl	801bac4 <lv_img_set_src>
 80280b4:	e003      	b.n	80280be <StepAndKcal_kCals+0x32>
	else lv_img_set_src(img1, &kCalsWhite42x28);
 80280b6:	4948      	ldr	r1, [pc, #288]	; (80281d8 <StepAndKcal_kCals+0x14c>)
 80280b8:	68f8      	ldr	r0, [r7, #12]
 80280ba:	f7f3 fd03 	bl	801bac4 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, -60, 37);
 80280be:	2325      	movs	r3, #37	; 0x25
 80280c0:	9300      	str	r3, [sp, #0]
 80280c2:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80280c6:	2200      	movs	r2, #0
 80280c8:	2100      	movs	r1, #0
 80280ca:	68f8      	ldr	r0, [r7, #12]
 80280cc:	f7e0 fed0 	bl	8008e70 <lv_obj_align>

	static lv_style_t kCals_Style;
	lv_style_copy(&kCals_Style, &lv_style_plain);
 80280d0:	4942      	ldr	r1, [pc, #264]	; (80281dc <StepAndKcal_kCals+0x150>)
 80280d2:	4843      	ldr	r0, [pc, #268]	; (80281e0 <StepAndKcal_kCals+0x154>)
 80280d4:	f7e3 f910 	bl	800b2f8 <lv_style_copy>
	kCals_Style.line.color = lv_color_make(255,205,105);
 80280d8:	4c41      	ldr	r4, [pc, #260]	; (80281e0 <StepAndKcal_kCals+0x154>)
 80280da:	2269      	movs	r2, #105	; 0x69
 80280dc:	21cd      	movs	r1, #205	; 0xcd
 80280de:	20ff      	movs	r0, #255	; 0xff
 80280e0:	f7ff fe52 	bl	8027d88 <lv_color_make>
 80280e4:	86a0      	strh	r0, [r4, #52]	; 0x34
    kCals_Style.line.width = 3;
 80280e6:	4b3e      	ldr	r3, [pc, #248]	; (80281e0 <StepAndKcal_kCals+0x154>)
 80280e8:	2203      	movs	r2, #3
 80280ea:	86da      	strh	r2, [r3, #54]	; 0x36
    kCals_Style.text.color = lv_color_make(255,205,105);
 80280ec:	4c3c      	ldr	r4, [pc, #240]	; (80281e0 <StepAndKcal_kCals+0x154>)
 80280ee:	2269      	movs	r2, #105	; 0x69
 80280f0:	21cd      	movs	r1, #205	; 0xcd
 80280f2:	20ff      	movs	r0, #255	; 0xff
 80280f4:	f7ff fe48 	bl	8027d88 <lv_color_make>
 80280f8:	8420      	strh	r0, [r4, #32]
    kCals_Style.text.font = &digital_font_for_number_30;
 80280fa:	4b39      	ldr	r3, [pc, #228]	; (80281e0 <StepAndKcal_kCals+0x154>)
 80280fc:	4a39      	ldr	r2, [pc, #228]	; (80281e4 <StepAndKcal_kCals+0x158>)
 80280fe:	625a      	str	r2, [r3, #36]	; 0x24

   	lv_obj_t * kCalsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8028100:	f7ff fe7a 	bl	8027df8 <lv_scr_act>
 8028104:	4603      	mov	r3, r0
 8028106:	2100      	movs	r1, #0
 8028108:	4618      	mov	r0, r3
 802810a:	f7f3 ffc9 	bl	801c0a0 <lv_label_create>
 802810e:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8028110:	4a35      	ldr	r2, [pc, #212]	; (80281e8 <StepAndKcal_kCals+0x15c>)
 8028112:	2100      	movs	r1, #0
 8028114:	68b8      	ldr	r0, [r7, #8]
 8028116:	f7ff fe7a 	bl	8027e0e <lv_label_set_style>
   	lv_label_set_text(kCalsDescLbl, "kCals");
 802811a:	4934      	ldr	r1, [pc, #208]	; (80281ec <StepAndKcal_kCals+0x160>)
 802811c:	68b8      	ldr	r0, [r7, #8]
 802811e:	f7f4 f8f1 	bl	801c304 <lv_label_set_text>
   	lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, -60, 111);
 8028122:	236f      	movs	r3, #111	; 0x6f
 8028124:	9300      	str	r3, [sp, #0]
 8028126:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802812a:	2200      	movs	r2, #0
 802812c:	2100      	movs	r1, #0
 802812e:	68b8      	ldr	r0, [r7, #8]
 8028130:	f7e0 fe9e 	bl	8008e70 <lv_obj_align>

    //Dynamic objs
    SAK_kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 8028134:	f7ff fe60 	bl	8027df8 <lv_scr_act>
 8028138:	4603      	mov	r3, r0
 802813a:	2100      	movs	r1, #0
 802813c:	4618      	mov	r0, r3
 802813e:	f7ef f9ad 	bl	801749c <lv_arc_create>
 8028142:	4602      	mov	r2, r0
 8028144:	4b2a      	ldr	r3, [pc, #168]	; (80281f0 <StepAndKcal_kCals+0x164>)
 8028146:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_kCalsArc, 80, 80);
 8028148:	4b29      	ldr	r3, [pc, #164]	; (80281f0 <StepAndKcal_kCals+0x164>)
 802814a:	681b      	ldr	r3, [r3, #0]
 802814c:	2250      	movs	r2, #80	; 0x50
 802814e:	2150      	movs	r1, #80	; 0x50
 8028150:	4618      	mov	r0, r3
 8028152:	f7e0 fdea 	bl	8008d2a <lv_obj_set_size>
    lv_arc_set_angles(SAK_kCalsArc, 0, 360);
 8028156:	4b26      	ldr	r3, [pc, #152]	; (80281f0 <StepAndKcal_kCals+0x164>)
 8028158:	681b      	ldr	r3, [r3, #0]
 802815a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802815e:	2100      	movs	r1, #0
 8028160:	4618      	mov	r0, r3
 8028162:	f7ef fa17 	bl	8017594 <lv_arc_set_angles>
    lv_arc_set_style(SAK_kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8028166:	4b22      	ldr	r3, [pc, #136]	; (80281f0 <StepAndKcal_kCals+0x164>)
 8028168:	681b      	ldr	r3, [r3, #0]
 802816a:	4a1d      	ldr	r2, [pc, #116]	; (80281e0 <StepAndKcal_kCals+0x154>)
 802816c:	2100      	movs	r1, #0
 802816e:	4618      	mov	r0, r3
 8028170:	f7ef fa39 	bl	80175e6 <lv_arc_set_style>
    lv_obj_align(SAK_kCalsArc, NULL, LV_ALIGN_CENTER,-60, 37);
 8028174:	4b1e      	ldr	r3, [pc, #120]	; (80281f0 <StepAndKcal_kCals+0x164>)
 8028176:	6818      	ldr	r0, [r3, #0]
 8028178:	2325      	movs	r3, #37	; 0x25
 802817a:	9300      	str	r3, [sp, #0]
 802817c:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8028180:	2200      	movs	r2, #0
 8028182:	2100      	movs	r1, #0
 8028184:	f7e0 fe74 	bl	8008e70 <lv_obj_align>

    SAK_kcalsLbl = lv_label_create(lv_scr_act(), NULL);
 8028188:	f7ff fe36 	bl	8027df8 <lv_scr_act>
 802818c:	4603      	mov	r3, r0
 802818e:	2100      	movs	r1, #0
 8028190:	4618      	mov	r0, r3
 8028192:	f7f3 ff85 	bl	801c0a0 <lv_label_create>
 8028196:	4602      	mov	r2, r0
 8028198:	4b16      	ldr	r3, [pc, #88]	; (80281f4 <StepAndKcal_kCals+0x168>)
 802819a:	601a      	str	r2, [r3, #0]
   	lv_label_set_style(SAK_kcalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 802819c:	4b15      	ldr	r3, [pc, #84]	; (80281f4 <StepAndKcal_kCals+0x168>)
 802819e:	681b      	ldr	r3, [r3, #0]
 80281a0:	4a0f      	ldr	r2, [pc, #60]	; (80281e0 <StepAndKcal_kCals+0x154>)
 80281a2:	2100      	movs	r1, #0
 80281a4:	4618      	mov	r0, r3
 80281a6:	f7ff fe32 	bl	8027e0e <lv_label_set_style>
   	lv_label_set_text(SAK_kcalsLbl, "0000");
 80281aa:	4b12      	ldr	r3, [pc, #72]	; (80281f4 <StepAndKcal_kCals+0x168>)
 80281ac:	681b      	ldr	r3, [r3, #0]
 80281ae:	4912      	ldr	r1, [pc, #72]	; (80281f8 <StepAndKcal_kCals+0x16c>)
 80281b0:	4618      	mov	r0, r3
 80281b2:	f7f4 f8a7 	bl	801c304 <lv_label_set_text>
   	lv_obj_align(SAK_kcalsLbl, NULL, LV_ALIGN_CENTER, -60, 90);
 80281b6:	4b0f      	ldr	r3, [pc, #60]	; (80281f4 <StepAndKcal_kCals+0x168>)
 80281b8:	6818      	ldr	r0, [r3, #0]
 80281ba:	235a      	movs	r3, #90	; 0x5a
 80281bc:	9300      	str	r3, [sp, #0]
 80281be:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80281c2:	2200      	movs	r2, #0
 80281c4:	2100      	movs	r1, #0
 80281c6:	f7e0 fe53 	bl	8008e70 <lv_obj_align>
}
 80281ca:	bf00      	nop
 80281cc:	3714      	adds	r7, #20
 80281ce:	46bd      	mov	sp, r7
 80281d0:	bd90      	pop	{r4, r7, pc}
 80281d2:	bf00      	nop
 80281d4:	0803ac70 	.word	0x0803ac70
 80281d8:	0803b5ac 	.word	0x0803b5ac
 80281dc:	2001ba10 	.word	0x2001ba10
 80281e0:	2001b470 	.word	0x2001b470
 80281e4:	200027ec 	.word	0x200027ec
 80281e8:	2001b3f8 	.word	0x2001b3f8
 80281ec:	0802cf8c 	.word	0x0802cf8c
 80281f0:	2001beec 	.word	0x2001beec
 80281f4:	2001bec8 	.word	0x2001bec8
 80281f8:	0802cf84 	.word	0x0802cf84

080281fc <StepAndKcal_Distances>:
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_Distances(bool unitType,bool theme){
 80281fc:	b590      	push	{r4, r7, lr}
 80281fe:	b087      	sub	sp, #28
 8028200:	af02      	add	r7, sp, #8
 8028202:	4603      	mov	r3, r0
 8028204:	460a      	mov	r2, r1
 8028206:	71fb      	strb	r3, [r7, #7]
 8028208:	4613      	mov	r3, r2
 802820a:	71bb      	strb	r3, [r7, #6]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 802820c:	f7ff fdf4 	bl	8027df8 <lv_scr_act>
 8028210:	4603      	mov	r3, r0
 8028212:	2100      	movs	r1, #0
 8028214:	4618      	mov	r0, r3
 8028216:	f7f3 fbb7 	bl	801b988 <lv_img_create>
 802821a:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &locationPointBlack42x28);
 802821c:	79bb      	ldrb	r3, [r7, #6]
 802821e:	2b00      	cmp	r3, #0
 8028220:	d004      	beq.n	802822c <StepAndKcal_Distances+0x30>
 8028222:	494b      	ldr	r1, [pc, #300]	; (8028350 <StepAndKcal_Distances+0x154>)
 8028224:	68f8      	ldr	r0, [r7, #12]
 8028226:	f7f3 fc4d 	bl	801bac4 <lv_img_set_src>
 802822a:	e003      	b.n	8028234 <StepAndKcal_Distances+0x38>
	else lv_img_set_src(img1, &locationPointWhite42x28);
 802822c:	4949      	ldr	r1, [pc, #292]	; (8028354 <StepAndKcal_Distances+0x158>)
 802822e:	68f8      	ldr	r0, [r7, #12]
 8028230:	f7f3 fc48 	bl	801bac4 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 60, 37);
 8028234:	2325      	movs	r3, #37	; 0x25
 8028236:	9300      	str	r3, [sp, #0]
 8028238:	233c      	movs	r3, #60	; 0x3c
 802823a:	2200      	movs	r2, #0
 802823c:	2100      	movs	r1, #0
 802823e:	68f8      	ldr	r0, [r7, #12]
 8028240:	f7e0 fe16 	bl	8008e70 <lv_obj_align>

    static lv_style_t distance_Style;
    lv_style_copy(&distance_Style, &lv_style_plain);
 8028244:	4944      	ldr	r1, [pc, #272]	; (8028358 <StepAndKcal_Distances+0x15c>)
 8028246:	4845      	ldr	r0, [pc, #276]	; (802835c <StepAndKcal_Distances+0x160>)
 8028248:	f7e3 f856 	bl	800b2f8 <lv_style_copy>
    distance_Style.line.color = lv_color_make(214,23,32);
 802824c:	4c43      	ldr	r4, [pc, #268]	; (802835c <StepAndKcal_Distances+0x160>)
 802824e:	2220      	movs	r2, #32
 8028250:	2117      	movs	r1, #23
 8028252:	20d6      	movs	r0, #214	; 0xd6
 8028254:	f7ff fd98 	bl	8027d88 <lv_color_make>
 8028258:	86a0      	strh	r0, [r4, #52]	; 0x34
    distance_Style.line.width = 3;
 802825a:	4b40      	ldr	r3, [pc, #256]	; (802835c <StepAndKcal_Distances+0x160>)
 802825c:	2203      	movs	r2, #3
 802825e:	86da      	strh	r2, [r3, #54]	; 0x36
    distance_Style.text.color = lv_color_make(214,23,32);
 8028260:	4c3e      	ldr	r4, [pc, #248]	; (802835c <StepAndKcal_Distances+0x160>)
 8028262:	2220      	movs	r2, #32
 8028264:	2117      	movs	r1, #23
 8028266:	20d6      	movs	r0, #214	; 0xd6
 8028268:	f7ff fd8e 	bl	8027d88 <lv_color_make>
 802826c:	8420      	strh	r0, [r4, #32]
    distance_Style.text.font = &digital_font_for_number_30;
 802826e:	4b3b      	ldr	r3, [pc, #236]	; (802835c <StepAndKcal_Distances+0x160>)
 8028270:	4a3b      	ldr	r2, [pc, #236]	; (8028360 <StepAndKcal_Distances+0x164>)
 8028272:	625a      	str	r2, [r3, #36]	; 0x24

   	lv_obj_t * distDescLbl= lv_label_create(lv_scr_act(), NULL);
 8028274:	f7ff fdc0 	bl	8027df8 <lv_scr_act>
 8028278:	4603      	mov	r3, r0
 802827a:	2100      	movs	r1, #0
 802827c:	4618      	mov	r0, r3
 802827e:	f7f3 ff0f 	bl	801c0a0 <lv_label_create>
 8028282:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(distDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8028284:	4a37      	ldr	r2, [pc, #220]	; (8028364 <StepAndKcal_Distances+0x168>)
 8028286:	2100      	movs	r1, #0
 8028288:	68b8      	ldr	r0, [r7, #8]
 802828a:	f7ff fdc0 	bl	8027e0e <lv_label_set_style>
 	if(unitType) lv_label_set_text(distDescLbl, "km");
 802828e:	79fb      	ldrb	r3, [r7, #7]
 8028290:	2b00      	cmp	r3, #0
 8028292:	d004      	beq.n	802829e <StepAndKcal_Distances+0xa2>
 8028294:	4934      	ldr	r1, [pc, #208]	; (8028368 <StepAndKcal_Distances+0x16c>)
 8028296:	68b8      	ldr	r0, [r7, #8]
 8028298:	f7f4 f834 	bl	801c304 <lv_label_set_text>
 802829c:	e003      	b.n	80282a6 <StepAndKcal_Distances+0xaa>
 	else lv_label_set_text(distDescLbl, "miles");
 802829e:	4933      	ldr	r1, [pc, #204]	; (802836c <StepAndKcal_Distances+0x170>)
 80282a0:	68b8      	ldr	r0, [r7, #8]
 80282a2:	f7f4 f82f 	bl	801c304 <lv_label_set_text>
   	lv_obj_align(distDescLbl, NULL, LV_ALIGN_CENTER, 60, 111);
 80282a6:	236f      	movs	r3, #111	; 0x6f
 80282a8:	9300      	str	r3, [sp, #0]
 80282aa:	233c      	movs	r3, #60	; 0x3c
 80282ac:	2200      	movs	r2, #0
 80282ae:	2100      	movs	r1, #0
 80282b0:	68b8      	ldr	r0, [r7, #8]
 80282b2:	f7e0 fddd 	bl	8008e70 <lv_obj_align>

    //Dynamic objs
    SAK_distancesArc = lv_arc_create(lv_scr_act(), NULL);
 80282b6:	f7ff fd9f 	bl	8027df8 <lv_scr_act>
 80282ba:	4603      	mov	r3, r0
 80282bc:	2100      	movs	r1, #0
 80282be:	4618      	mov	r0, r3
 80282c0:	f7ef f8ec 	bl	801749c <lv_arc_create>
 80282c4:	4602      	mov	r2, r0
 80282c6:	4b2a      	ldr	r3, [pc, #168]	; (8028370 <StepAndKcal_Distances+0x174>)
 80282c8:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_distancesArc, 80, 80);
 80282ca:	4b29      	ldr	r3, [pc, #164]	; (8028370 <StepAndKcal_Distances+0x174>)
 80282cc:	681b      	ldr	r3, [r3, #0]
 80282ce:	2250      	movs	r2, #80	; 0x50
 80282d0:	2150      	movs	r1, #80	; 0x50
 80282d2:	4618      	mov	r0, r3
 80282d4:	f7e0 fd29 	bl	8008d2a <lv_obj_set_size>
    lv_arc_set_angles(SAK_distancesArc, 0, 360);
 80282d8:	4b25      	ldr	r3, [pc, #148]	; (8028370 <StepAndKcal_Distances+0x174>)
 80282da:	681b      	ldr	r3, [r3, #0]
 80282dc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80282e0:	2100      	movs	r1, #0
 80282e2:	4618      	mov	r0, r3
 80282e4:	f7ef f956 	bl	8017594 <lv_arc_set_angles>
    lv_arc_set_style(SAK_distancesArc, LV_ARC_STYLE_MAIN, &distance_Style);
 80282e8:	4b21      	ldr	r3, [pc, #132]	; (8028370 <StepAndKcal_Distances+0x174>)
 80282ea:	681b      	ldr	r3, [r3, #0]
 80282ec:	4a1b      	ldr	r2, [pc, #108]	; (802835c <StepAndKcal_Distances+0x160>)
 80282ee:	2100      	movs	r1, #0
 80282f0:	4618      	mov	r0, r3
 80282f2:	f7ef f978 	bl	80175e6 <lv_arc_set_style>
    lv_obj_align(SAK_distancesArc, NULL, LV_ALIGN_CENTER, 60, 37);
 80282f6:	4b1e      	ldr	r3, [pc, #120]	; (8028370 <StepAndKcal_Distances+0x174>)
 80282f8:	6818      	ldr	r0, [r3, #0]
 80282fa:	2325      	movs	r3, #37	; 0x25
 80282fc:	9300      	str	r3, [sp, #0]
 80282fe:	233c      	movs	r3, #60	; 0x3c
 8028300:	2200      	movs	r2, #0
 8028302:	2100      	movs	r1, #0
 8028304:	f7e0 fdb4 	bl	8008e70 <lv_obj_align>

    SAK_distanceLbl = lv_label_create(lv_scr_act(), NULL);
 8028308:	f7ff fd76 	bl	8027df8 <lv_scr_act>
 802830c:	4603      	mov	r3, r0
 802830e:	2100      	movs	r1, #0
 8028310:	4618      	mov	r0, r3
 8028312:	f7f3 fec5 	bl	801c0a0 <lv_label_create>
 8028316:	4602      	mov	r2, r0
 8028318:	4b16      	ldr	r3, [pc, #88]	; (8028374 <StepAndKcal_Distances+0x178>)
 802831a:	601a      	str	r2, [r3, #0]
   	lv_label_set_style(SAK_distanceLbl, LV_LABEL_STYLE_MAIN, &distance_Style);
 802831c:	4b15      	ldr	r3, [pc, #84]	; (8028374 <StepAndKcal_Distances+0x178>)
 802831e:	681b      	ldr	r3, [r3, #0]
 8028320:	4a0e      	ldr	r2, [pc, #56]	; (802835c <StepAndKcal_Distances+0x160>)
 8028322:	2100      	movs	r1, #0
 8028324:	4618      	mov	r0, r3
 8028326:	f7ff fd72 	bl	8027e0e <lv_label_set_style>
   	lv_label_set_text(SAK_distanceLbl, "0000.00");
 802832a:	4b12      	ldr	r3, [pc, #72]	; (8028374 <StepAndKcal_Distances+0x178>)
 802832c:	681b      	ldr	r3, [r3, #0]
 802832e:	4912      	ldr	r1, [pc, #72]	; (8028378 <StepAndKcal_Distances+0x17c>)
 8028330:	4618      	mov	r0, r3
 8028332:	f7f3 ffe7 	bl	801c304 <lv_label_set_text>
   	lv_obj_align(SAK_distanceLbl, NULL, LV_ALIGN_CENTER, 60, 90);
 8028336:	4b0f      	ldr	r3, [pc, #60]	; (8028374 <StepAndKcal_Distances+0x178>)
 8028338:	6818      	ldr	r0, [r3, #0]
 802833a:	235a      	movs	r3, #90	; 0x5a
 802833c:	9300      	str	r3, [sp, #0]
 802833e:	233c      	movs	r3, #60	; 0x3c
 8028340:	2200      	movs	r2, #0
 8028342:	2100      	movs	r1, #0
 8028344:	f7e0 fd94 	bl	8008e70 <lv_obj_align>
}
 8028348:	bf00      	nop
 802834a:	3714      	adds	r7, #20
 802834c:	46bd      	mov	sp, r7
 802834e:	bd90      	pop	{r4, r7, pc}
 8028350:	0803bee8 	.word	0x0803bee8
 8028354:	0803c824 	.word	0x0803c824
 8028358:	2001ba10 	.word	0x2001ba10
 802835c:	2001b4ac 	.word	0x2001b4ac
 8028360:	200027ec 	.word	0x200027ec
 8028364:	2001b3f8 	.word	0x2001b3f8
 8028368:	0802cf94 	.word	0x0802cf94
 802836c:	0802cf98 	.word	0x0802cf98
 8028370:	2001bee0 	.word	0x2001bee0
 8028374:	2001becc 	.word	0x2001becc
 8028378:	0802cfa0 	.word	0x0802cfa0

0802837c <SAK_Updater>:

//Update Functions
/*This function using for update all update functions*/
void SAK_Updater(lv_task_t *t){
 802837c:	b580      	push	{r7, lr}
 802837e:	b082      	sub	sp, #8
 8028380:	af00      	add	r7, sp, #0
 8028382:	6078      	str	r0, [r7, #4]
	if(SAk_taskController){
 8028384:	4b08      	ldr	r3, [pc, #32]	; (80283a8 <SAK_Updater+0x2c>)
 8028386:	781b      	ldrb	r3, [r3, #0]
 8028388:	2b00      	cmp	r3, #0
 802838a:	d005      	beq.n	8028398 <SAK_Updater+0x1c>
		SAK_steps_angle_loader();
 802838c:	f000 f810 	bl	80283b0 <SAK_steps_angle_loader>
		SAK_kCals_angle_loader();
 8028390:	f000 f89a 	bl	80284c8 <SAK_kCals_angle_loader>
		SAK_distances_angle_loader();
 8028394:	f000 f924 	bl	80285e0 <SAK_distances_angle_loader>
	}lv_task_del(t);
 8028398:	6878      	ldr	r0, [r7, #4]
 802839a:	f7ee fb47 	bl	8016a2c <lv_task_del>
}
 802839e:	bf00      	nop
 80283a0:	3708      	adds	r7, #8
 80283a2:	46bd      	mov	sp, r7
 80283a4:	bd80      	pop	{r7, pc}
 80283a6:	bf00      	nop
 80283a8:	2001bee8 	.word	0x2001bee8
 80283ac:	00000000 	.word	0x00000000

080283b0 <SAK_steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void SAK_steps_angle_loader(void)
{
 80283b0:	b590      	push	{r4, r7, lr}
 80283b2:	b085      	sub	sp, #20
 80283b4:	af02      	add	r7, sp, #8
 		snprintf(stepAndKcalBuffer,8, "%05d",SAK_steps);
 80283b6:	4b3c      	ldr	r3, [pc, #240]	; (80284a8 <SAK_steps_angle_loader+0xf8>)
 80283b8:	881b      	ldrh	r3, [r3, #0]
 80283ba:	4a3c      	ldr	r2, [pc, #240]	; (80284ac <SAK_steps_angle_loader+0xfc>)
 80283bc:	2108      	movs	r1, #8
 80283be:	483c      	ldr	r0, [pc, #240]	; (80284b0 <SAK_steps_angle_loader+0x100>)
 80283c0:	f002 fa20 	bl	802a804 <sniprintf>
 		lv_label_set_text(SAK_stepsLbl, stepAndKcalBuffer);
 80283c4:	4b3b      	ldr	r3, [pc, #236]	; (80284b4 <SAK_steps_angle_loader+0x104>)
 80283c6:	681b      	ldr	r3, [r3, #0]
 80283c8:	4939      	ldr	r1, [pc, #228]	; (80284b0 <SAK_steps_angle_loader+0x100>)
 80283ca:	4618      	mov	r0, r3
 80283cc:	f7f3 ff9a 	bl	801c304 <lv_label_set_text>
 		lv_obj_align(SAK_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -30);
 80283d0:	4b38      	ldr	r3, [pc, #224]	; (80284b4 <SAK_steps_angle_loader+0x104>)
 80283d2:	6818      	ldr	r0, [r3, #0]
 80283d4:	f06f 031d 	mvn.w	r3, #29
 80283d8:	9300      	str	r3, [sp, #0]
 80283da:	2300      	movs	r3, #0
 80283dc:	2200      	movs	r2, #0
 80283de:	2100      	movs	r1, #0
 80283e0:	f7e0 fd46 	bl	8008e70 <lv_obj_align>

 		if(SAK_steps<=10000){
 80283e4:	4b30      	ldr	r3, [pc, #192]	; (80284a8 <SAK_steps_angle_loader+0xf8>)
 80283e6:	881b      	ldrh	r3, [r3, #0]
 80283e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80283ec:	4293      	cmp	r3, r2
 80283ee:	d84b      	bhi.n	8028488 <SAK_steps_angle_loader+0xd8>
 			double stepsTemp = tos_Ratio(SAK_steps, 0, 10000, 0, 359);
 80283f0:	4b2d      	ldr	r3, [pc, #180]	; (80284a8 <SAK_steps_angle_loader+0xf8>)
 80283f2:	881b      	ldrh	r3, [r3, #0]
 80283f4:	4618      	mov	r0, r3
 80283f6:	f7d8 f895 	bl	8000524 <__aeabi_ui2d>
 80283fa:	4603      	mov	r3, r0
 80283fc:	460c      	mov	r4, r1
 80283fe:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8028490 <SAK_steps_angle_loader+0xe0>
 8028402:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8028498 <SAK_steps_angle_loader+0xe8>
 8028406:	ed9f 2b26 	vldr	d2, [pc, #152]	; 80284a0 <SAK_steps_angle_loader+0xf0>
 802840a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8028498 <SAK_steps_angle_loader+0xe8>
 802840e:	ec44 3b10 	vmov	d0, r3, r4
 8028412:	f001 f80d 	bl	8029430 <tos_Ratio>
 8028416:	ed87 0b00 	vstr	d0, [r7]
 			if(stepsTemp < 180) lv_arc_set_angles(SAK_stepsArc, 180-stepsTemp ,180);
 802841a:	f04f 0200 	mov.w	r2, #0
 802841e:	4b26      	ldr	r3, [pc, #152]	; (80284b8 <SAK_steps_angle_loader+0x108>)
 8028420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8028424:	f7d8 fb6a 	bl	8000afc <__aeabi_dcmplt>
 8028428:	4603      	mov	r3, r0
 802842a:	2b00      	cmp	r3, #0
 802842c:	d016      	beq.n	802845c <SAK_steps_angle_loader+0xac>
 802842e:	4b23      	ldr	r3, [pc, #140]	; (80284bc <SAK_steps_angle_loader+0x10c>)
 8028430:	681c      	ldr	r4, [r3, #0]
 8028432:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028436:	f04f 0000 	mov.w	r0, #0
 802843a:	491f      	ldr	r1, [pc, #124]	; (80284b8 <SAK_steps_angle_loader+0x108>)
 802843c:	f7d7 ff34 	bl	80002a8 <__aeabi_dsub>
 8028440:	4602      	mov	r2, r0
 8028442:	460b      	mov	r3, r1
 8028444:	4610      	mov	r0, r2
 8028446:	4619      	mov	r1, r3
 8028448:	f7d8 fbbe 	bl	8000bc8 <__aeabi_d2uiz>
 802844c:	4603      	mov	r3, r0
 802844e:	b29b      	uxth	r3, r3
 8028450:	22b4      	movs	r2, #180	; 0xb4
 8028452:	4619      	mov	r1, r3
 8028454:	4620      	mov	r0, r4
 8028456:	f7ef f89d 	bl	8017594 <lv_arc_set_angles>
 			    else lv_arc_set_angles(SAK_stepsArc, 540-stepsTemp ,180);
 		}
}
 802845a:	e015      	b.n	8028488 <SAK_steps_angle_loader+0xd8>
 			    else lv_arc_set_angles(SAK_stepsArc, 540-stepsTemp ,180);
 802845c:	4b17      	ldr	r3, [pc, #92]	; (80284bc <SAK_steps_angle_loader+0x10c>)
 802845e:	681c      	ldr	r4, [r3, #0]
 8028460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028464:	f04f 0000 	mov.w	r0, #0
 8028468:	4915      	ldr	r1, [pc, #84]	; (80284c0 <SAK_steps_angle_loader+0x110>)
 802846a:	f7d7 ff1d 	bl	80002a8 <__aeabi_dsub>
 802846e:	4602      	mov	r2, r0
 8028470:	460b      	mov	r3, r1
 8028472:	4610      	mov	r0, r2
 8028474:	4619      	mov	r1, r3
 8028476:	f7d8 fba7 	bl	8000bc8 <__aeabi_d2uiz>
 802847a:	4603      	mov	r3, r0
 802847c:	b29b      	uxth	r3, r3
 802847e:	22b4      	movs	r2, #180	; 0xb4
 8028480:	4619      	mov	r1, r3
 8028482:	4620      	mov	r0, r4
 8028484:	f7ef f886 	bl	8017594 <lv_arc_set_angles>
}
 8028488:	bf00      	nop
 802848a:	370c      	adds	r7, #12
 802848c:	46bd      	mov	sp, r7
 802848e:	bd90      	pop	{r4, r7, pc}
 8028490:	00000000 	.word	0x00000000
 8028494:	40767000 	.word	0x40767000
	...
 80284a4:	40c38800 	.word	0x40c38800
 80284a8:	2001beea 	.word	0x2001beea
 80284ac:	0802cfa8 	.word	0x0802cfa8
 80284b0:	2001bef4 	.word	0x2001bef4
 80284b4:	2001bee4 	.word	0x2001bee4
 80284b8:	40668000 	.word	0x40668000
 80284bc:	2001bec0 	.word	0x2001bec0
 80284c0:	4080e000 	.word	0x4080e000
 80284c4:	00000000 	.word	0x00000000

080284c8 <SAK_kCals_angle_loader>:

/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void SAK_kCals_angle_loader(void)
{
 80284c8:	b590      	push	{r4, r7, lr}
 80284ca:	b085      	sub	sp, #20
 80284cc:	af02      	add	r7, sp, #8
 		snprintf(stepAndKcalBuffer,8, "%05d",SAK_kCals);
 80284ce:	4b3c      	ldr	r3, [pc, #240]	; (80285c0 <SAK_kCals_angle_loader+0xf8>)
 80284d0:	881b      	ldrh	r3, [r3, #0]
 80284d2:	4a3c      	ldr	r2, [pc, #240]	; (80285c4 <SAK_kCals_angle_loader+0xfc>)
 80284d4:	2108      	movs	r1, #8
 80284d6:	483c      	ldr	r0, [pc, #240]	; (80285c8 <SAK_kCals_angle_loader+0x100>)
 80284d8:	f002 f994 	bl	802a804 <sniprintf>
 		lv_label_set_text(SAK_kcalsLbl, stepAndKcalBuffer);
 80284dc:	4b3b      	ldr	r3, [pc, #236]	; (80285cc <SAK_kCals_angle_loader+0x104>)
 80284de:	681b      	ldr	r3, [r3, #0]
 80284e0:	4939      	ldr	r1, [pc, #228]	; (80285c8 <SAK_kCals_angle_loader+0x100>)
 80284e2:	4618      	mov	r0, r3
 80284e4:	f7f3 ff0e 	bl	801c304 <lv_label_set_text>
 	   	lv_obj_align(SAK_kcalsLbl, NULL, LV_ALIGN_CENTER, -60, 90);
 80284e8:	4b38      	ldr	r3, [pc, #224]	; (80285cc <SAK_kCals_angle_loader+0x104>)
 80284ea:	6818      	ldr	r0, [r3, #0]
 80284ec:	235a      	movs	r3, #90	; 0x5a
 80284ee:	9300      	str	r3, [sp, #0]
 80284f0:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80284f4:	2200      	movs	r2, #0
 80284f6:	2100      	movs	r1, #0
 80284f8:	f7e0 fcba 	bl	8008e70 <lv_obj_align>

 	   	if(SAK_kCals<=10000){
 80284fc:	4b30      	ldr	r3, [pc, #192]	; (80285c0 <SAK_kCals_angle_loader+0xf8>)
 80284fe:	881b      	ldrh	r3, [r3, #0]
 8028500:	f242 7210 	movw	r2, #10000	; 0x2710
 8028504:	4293      	cmp	r3, r2
 8028506:	d84b      	bhi.n	80285a0 <SAK_kCals_angle_loader+0xd8>
 			double kCalsTemp = tos_Ratio(SAK_kCals, 0, 10000, 0, 359);
 8028508:	4b2d      	ldr	r3, [pc, #180]	; (80285c0 <SAK_kCals_angle_loader+0xf8>)
 802850a:	881b      	ldrh	r3, [r3, #0]
 802850c:	4618      	mov	r0, r3
 802850e:	f7d8 f809 	bl	8000524 <__aeabi_ui2d>
 8028512:	4603      	mov	r3, r0
 8028514:	460c      	mov	r4, r1
 8028516:	ed9f 4b24 	vldr	d4, [pc, #144]	; 80285a8 <SAK_kCals_angle_loader+0xe0>
 802851a:	ed9f 3b25 	vldr	d3, [pc, #148]	; 80285b0 <SAK_kCals_angle_loader+0xe8>
 802851e:	ed9f 2b26 	vldr	d2, [pc, #152]	; 80285b8 <SAK_kCals_angle_loader+0xf0>
 8028522:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80285b0 <SAK_kCals_angle_loader+0xe8>
 8028526:	ec44 3b10 	vmov	d0, r3, r4
 802852a:	f000 ff81 	bl	8029430 <tos_Ratio>
 802852e:	ed87 0b00 	vstr	d0, [r7]
 			if(kCalsTemp < 180) lv_arc_set_angles(SAK_kCalsArc, 180-kCalsTemp ,180);
 8028532:	f04f 0200 	mov.w	r2, #0
 8028536:	4b26      	ldr	r3, [pc, #152]	; (80285d0 <SAK_kCals_angle_loader+0x108>)
 8028538:	e9d7 0100 	ldrd	r0, r1, [r7]
 802853c:	f7d8 fade 	bl	8000afc <__aeabi_dcmplt>
 8028540:	4603      	mov	r3, r0
 8028542:	2b00      	cmp	r3, #0
 8028544:	d016      	beq.n	8028574 <SAK_kCals_angle_loader+0xac>
 8028546:	4b23      	ldr	r3, [pc, #140]	; (80285d4 <SAK_kCals_angle_loader+0x10c>)
 8028548:	681c      	ldr	r4, [r3, #0]
 802854a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802854e:	f04f 0000 	mov.w	r0, #0
 8028552:	491f      	ldr	r1, [pc, #124]	; (80285d0 <SAK_kCals_angle_loader+0x108>)
 8028554:	f7d7 fea8 	bl	80002a8 <__aeabi_dsub>
 8028558:	4602      	mov	r2, r0
 802855a:	460b      	mov	r3, r1
 802855c:	4610      	mov	r0, r2
 802855e:	4619      	mov	r1, r3
 8028560:	f7d8 fb32 	bl	8000bc8 <__aeabi_d2uiz>
 8028564:	4603      	mov	r3, r0
 8028566:	b29b      	uxth	r3, r3
 8028568:	22b4      	movs	r2, #180	; 0xb4
 802856a:	4619      	mov	r1, r3
 802856c:	4620      	mov	r0, r4
 802856e:	f7ef f811 	bl	8017594 <lv_arc_set_angles>
 			    else lv_arc_set_angles(SAK_kCalsArc, 540-kCalsTemp ,180);
 	   	}
}
 8028572:	e015      	b.n	80285a0 <SAK_kCals_angle_loader+0xd8>
 			    else lv_arc_set_angles(SAK_kCalsArc, 540-kCalsTemp ,180);
 8028574:	4b17      	ldr	r3, [pc, #92]	; (80285d4 <SAK_kCals_angle_loader+0x10c>)
 8028576:	681c      	ldr	r4, [r3, #0]
 8028578:	e9d7 2300 	ldrd	r2, r3, [r7]
 802857c:	f04f 0000 	mov.w	r0, #0
 8028580:	4915      	ldr	r1, [pc, #84]	; (80285d8 <SAK_kCals_angle_loader+0x110>)
 8028582:	f7d7 fe91 	bl	80002a8 <__aeabi_dsub>
 8028586:	4602      	mov	r2, r0
 8028588:	460b      	mov	r3, r1
 802858a:	4610      	mov	r0, r2
 802858c:	4619      	mov	r1, r3
 802858e:	f7d8 fb1b 	bl	8000bc8 <__aeabi_d2uiz>
 8028592:	4603      	mov	r3, r0
 8028594:	b29b      	uxth	r3, r3
 8028596:	22b4      	movs	r2, #180	; 0xb4
 8028598:	4619      	mov	r1, r3
 802859a:	4620      	mov	r0, r4
 802859c:	f7ee fffa 	bl	8017594 <lv_arc_set_angles>
}
 80285a0:	bf00      	nop
 80285a2:	370c      	adds	r7, #12
 80285a4:	46bd      	mov	sp, r7
 80285a6:	bd90      	pop	{r4, r7, pc}
 80285a8:	00000000 	.word	0x00000000
 80285ac:	40767000 	.word	0x40767000
	...
 80285bc:	40c38800 	.word	0x40c38800
 80285c0:	2001bed0 	.word	0x2001bed0
 80285c4:	0802cfa8 	.word	0x0802cfa8
 80285c8:	2001bef4 	.word	0x2001bef4
 80285cc:	2001bec8 	.word	0x2001bec8
 80285d0:	40668000 	.word	0x40668000
 80285d4:	2001beec 	.word	0x2001beec
 80285d8:	4080e000 	.word	0x4080e000
 80285dc:	00000000 	.word	0x00000000

080285e0 <SAK_distances_angle_loader>:

/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void SAK_distances_angle_loader(void){
 80285e0:	b590      	push	{r4, r7, lr}
 80285e2:	b089      	sub	sp, #36	; 0x24
 80285e4:	af02      	add	r7, sp, #8
		float distTmp=(float)tos_distance_Calc(SAK_unitType,SAK_steps);
 80285e6:	4b4e      	ldr	r3, [pc, #312]	; (8028720 <SAK_distances_angle_loader+0x140>)
 80285e8:	781a      	ldrb	r2, [r3, #0]
 80285ea:	4b4e      	ldr	r3, [pc, #312]	; (8028724 <SAK_distances_angle_loader+0x144>)
 80285ec:	881b      	ldrh	r3, [r3, #0]
 80285ee:	4619      	mov	r1, r3
 80285f0:	4610      	mov	r0, r2
 80285f2:	f000 ff99 	bl	8029528 <tos_distance_Calc>
 80285f6:	ed87 0a05 	vstr	s0, [r7, #20]

		uint16_t tmp1=distTmp; float tmp2=distTmp-tmp1; tmp2*=1000;
 80285fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80285fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028602:	ee17 3a90 	vmov	r3, s15
 8028606:	827b      	strh	r3, [r7, #18]
 8028608:	8a7b      	ldrh	r3, [r7, #18]
 802860a:	ee07 3a90 	vmov	s15, r3
 802860e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028612:	ed97 7a05 	vldr	s14, [r7, #20]
 8028616:	ee77 7a67 	vsub.f32	s15, s14, s15
 802861a:	edc7 7a03 	vstr	s15, [r7, #12]
 802861e:	edd7 7a03 	vldr	s15, [r7, #12]
 8028622:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8028728 <SAK_distances_angle_loader+0x148>
 8028626:	ee67 7a87 	vmul.f32	s15, s15, s14
 802862a:	edc7 7a03 	vstr	s15, [r7, #12]
	 	snprintf(stepAndKcalBuffer,8, "%03d.%03d",tmp1,(uint16_t)tmp2);
 802862e:	8a7b      	ldrh	r3, [r7, #18]
 8028630:	edd7 7a03 	vldr	s15, [r7, #12]
 8028634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028638:	ee17 2a90 	vmov	r2, s15
 802863c:	b292      	uxth	r2, r2
 802863e:	9200      	str	r2, [sp, #0]
 8028640:	4a3a      	ldr	r2, [pc, #232]	; (802872c <SAK_distances_angle_loader+0x14c>)
 8028642:	2108      	movs	r1, #8
 8028644:	483a      	ldr	r0, [pc, #232]	; (8028730 <SAK_distances_angle_loader+0x150>)
 8028646:	f002 f8dd 	bl	802a804 <sniprintf>
	 	lv_label_set_text(SAK_distanceLbl, stepAndKcalBuffer);
 802864a:	4b3a      	ldr	r3, [pc, #232]	; (8028734 <SAK_distances_angle_loader+0x154>)
 802864c:	681b      	ldr	r3, [r3, #0]
 802864e:	4938      	ldr	r1, [pc, #224]	; (8028730 <SAK_distances_angle_loader+0x150>)
 8028650:	4618      	mov	r0, r3
 8028652:	f7f3 fe57 	bl	801c304 <lv_label_set_text>
	 	lv_obj_align(SAK_distanceLbl, NULL, LV_ALIGN_CENTER, 60, 90);
 8028656:	4b37      	ldr	r3, [pc, #220]	; (8028734 <SAK_distances_angle_loader+0x154>)
 8028658:	6818      	ldr	r0, [r3, #0]
 802865a:	235a      	movs	r3, #90	; 0x5a
 802865c:	9300      	str	r3, [sp, #0]
 802865e:	233c      	movs	r3, #60	; 0x3c
 8028660:	2200      	movs	r2, #0
 8028662:	2100      	movs	r1, #0
 8028664:	f7e0 fc04 	bl	8008e70 <lv_obj_align>

 	   	double distanceTemp = tos_Ratio(distTmp, 0, 1000, 0, 359);
 8028668:	6978      	ldr	r0, [r7, #20]
 802866a:	f7d7 ff7d 	bl	8000568 <__aeabi_f2d>
 802866e:	4603      	mov	r3, r0
 8028670:	460c      	mov	r4, r1
 8028672:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8028708 <SAK_distances_angle_loader+0x128>
 8028676:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8028710 <SAK_distances_angle_loader+0x130>
 802867a:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8028718 <SAK_distances_angle_loader+0x138>
 802867e:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8028710 <SAK_distances_angle_loader+0x130>
 8028682:	ec44 3b10 	vmov	d0, r3, r4
 8028686:	f000 fed3 	bl	8029430 <tos_Ratio>
 802868a:	ed87 0b00 	vstr	d0, [r7]
 		if(distanceTemp < 180) lv_arc_set_angles(SAK_distancesArc, 180-distanceTemp ,180);
 802868e:	f04f 0200 	mov.w	r2, #0
 8028692:	4b29      	ldr	r3, [pc, #164]	; (8028738 <SAK_distances_angle_loader+0x158>)
 8028694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8028698:	f7d8 fa30 	bl	8000afc <__aeabi_dcmplt>
 802869c:	4603      	mov	r3, r0
 802869e:	2b00      	cmp	r3, #0
 80286a0:	d016      	beq.n	80286d0 <SAK_distances_angle_loader+0xf0>
 80286a2:	4b26      	ldr	r3, [pc, #152]	; (802873c <SAK_distances_angle_loader+0x15c>)
 80286a4:	681c      	ldr	r4, [r3, #0]
 80286a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80286aa:	f04f 0000 	mov.w	r0, #0
 80286ae:	4922      	ldr	r1, [pc, #136]	; (8028738 <SAK_distances_angle_loader+0x158>)
 80286b0:	f7d7 fdfa 	bl	80002a8 <__aeabi_dsub>
 80286b4:	4602      	mov	r2, r0
 80286b6:	460b      	mov	r3, r1
 80286b8:	4610      	mov	r0, r2
 80286ba:	4619      	mov	r1, r3
 80286bc:	f7d8 fa84 	bl	8000bc8 <__aeabi_d2uiz>
 80286c0:	4603      	mov	r3, r0
 80286c2:	b29b      	uxth	r3, r3
 80286c4:	22b4      	movs	r2, #180	; 0xb4
 80286c6:	4619      	mov	r1, r3
 80286c8:	4620      	mov	r0, r4
 80286ca:	f7ee ff63 	bl	8017594 <lv_arc_set_angles>
 			else lv_arc_set_angles(SAK_distancesArc, 540-distanceTemp ,180);
}
 80286ce:	e015      	b.n	80286fc <SAK_distances_angle_loader+0x11c>
 			else lv_arc_set_angles(SAK_distancesArc, 540-distanceTemp ,180);
 80286d0:	4b1a      	ldr	r3, [pc, #104]	; (802873c <SAK_distances_angle_loader+0x15c>)
 80286d2:	681c      	ldr	r4, [r3, #0]
 80286d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80286d8:	f04f 0000 	mov.w	r0, #0
 80286dc:	4918      	ldr	r1, [pc, #96]	; (8028740 <SAK_distances_angle_loader+0x160>)
 80286de:	f7d7 fde3 	bl	80002a8 <__aeabi_dsub>
 80286e2:	4602      	mov	r2, r0
 80286e4:	460b      	mov	r3, r1
 80286e6:	4610      	mov	r0, r2
 80286e8:	4619      	mov	r1, r3
 80286ea:	f7d8 fa6d 	bl	8000bc8 <__aeabi_d2uiz>
 80286ee:	4603      	mov	r3, r0
 80286f0:	b29b      	uxth	r3, r3
 80286f2:	22b4      	movs	r2, #180	; 0xb4
 80286f4:	4619      	mov	r1, r3
 80286f6:	4620      	mov	r0, r4
 80286f8:	f7ee ff4c 	bl	8017594 <lv_arc_set_angles>
}
 80286fc:	bf00      	nop
 80286fe:	371c      	adds	r7, #28
 8028700:	46bd      	mov	sp, r7
 8028702:	bd90      	pop	{r4, r7, pc}
 8028704:	f3af 8000 	nop.w
 8028708:	00000000 	.word	0x00000000
 802870c:	40767000 	.word	0x40767000
	...
 802871c:	408f4000 	.word	0x408f4000
 8028720:	2001bef0 	.word	0x2001bef0
 8028724:	2001beea 	.word	0x2001beea
 8028728:	447a0000 	.word	0x447a0000
 802872c:	0802cfb0 	.word	0x0802cfb0
 8028730:	2001bef4 	.word	0x2001bef4
 8028734:	2001becc 	.word	0x2001becc
 8028738:	40668000 	.word	0x40668000
 802873c:	2001bee0 	.word	0x2001bee0
 8028740:	4080e000 	.word	0x4080e000

08028744 <StepAndKcal_TaskControllerSet>:
//Setter Getter Functions
void StepAndKcal_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
	SAK_steps =getSteps;
	SAK_kCals =getKcals;
}
void StepAndKcal_TaskControllerSet(bool active){
 8028744:	b480      	push	{r7}
 8028746:	b083      	sub	sp, #12
 8028748:	af00      	add	r7, sp, #0
 802874a:	4603      	mov	r3, r0
 802874c:	71fb      	strb	r3, [r7, #7]
	SAk_taskController = active;
 802874e:	4a04      	ldr	r2, [pc, #16]	; (8028760 <StepAndKcal_TaskControllerSet+0x1c>)
 8028750:	79fb      	ldrb	r3, [r7, #7]
 8028752:	7013      	strb	r3, [r2, #0]
}
 8028754:	bf00      	nop
 8028756:	370c      	adds	r7, #12
 8028758:	46bd      	mov	sp, r7
 802875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802875e:	4770      	bx	lr
 8028760:	2001bee8 	.word	0x2001bee8

08028764 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8028764:	b580      	push	{r7, lr}
 8028766:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8028768:	f7ec fce4 	bl	8015134 <lv_disp_get_default>
 802876c:	4603      	mov	r3, r0
 802876e:	4618      	mov	r0, r3
 8028770:	f7df f9ac 	bl	8007acc <lv_disp_get_scr_act>
 8028774:	4603      	mov	r3, r0
}
 8028776:	4618      	mov	r0, r3
 8028778:	bd80      	pop	{r7, pc}

0802877a <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 802877a:	b580      	push	{r7, lr}
 802877c:	b084      	sub	sp, #16
 802877e:	af00      	add	r7, sp, #0
 8028780:	60f8      	str	r0, [r7, #12]
 8028782:	460b      	mov	r3, r1
 8028784:	607a      	str	r2, [r7, #4]
 8028786:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8028788:	6879      	ldr	r1, [r7, #4]
 802878a:	68f8      	ldr	r0, [r7, #12]
 802878c:	f7e1 f815 	bl	80097ba <lv_obj_set_style>
}
 8028790:	bf00      	nop
 8028792:	3710      	adds	r7, #16
 8028794:	46bd      	mov	sp, r7
 8028796:	bd80      	pop	{r7, pc}

08028798 <tos_StopWatchScreen_Init>:
void StopWatch_Update_Lbl(void);
void StopWatch_Update_saveLbl(void);
void StopWatch_Update_StatuImg(uint8_t statu);

/*This function using for initialization StopWatch screen*/
void tos_StopWatchScreen_Init(bool theme){
 8028798:	b580      	push	{r7, lr}
 802879a:	b082      	sub	sp, #8
 802879c:	af00      	add	r7, sp, #0
 802879e:	4603      	mov	r3, r0
 80287a0:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 80287a2:	f7ff ffdf 	bl	8028764 <lv_scr_act>
 80287a6:	4603      	mov	r3, r0
 80287a8:	4618      	mov	r0, r3
 80287aa:	f7e0 f8ef 	bl	800898c <lv_obj_clean>

	lv_style_copy(&style_screen, &lv_style_plain);
 80287ae:	4919      	ldr	r1, [pc, #100]	; (8028814 <tos_StopWatchScreen_Init+0x7c>)
 80287b0:	4819      	ldr	r0, [pc, #100]	; (8028818 <tos_StopWatchScreen_Init+0x80>)
 80287b2:	f7e2 fda1 	bl	800b2f8 <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_WHITE;
 80287b6:	4a18      	ldr	r2, [pc, #96]	; (8028818 <tos_StopWatchScreen_Init+0x80>)
 80287b8:	4b18      	ldr	r3, [pc, #96]	; (802881c <tos_StopWatchScreen_Init+0x84>)
 80287ba:	881b      	ldrh	r3, [r3, #0]
 80287bc:	8053      	strh	r3, [r2, #2]
	style_screen.body.grad_color = LV_COLOR_WHITE;
 80287be:	4a16      	ldr	r2, [pc, #88]	; (8028818 <tos_StopWatchScreen_Init+0x80>)
 80287c0:	4b16      	ldr	r3, [pc, #88]	; (802881c <tos_StopWatchScreen_Init+0x84>)
 80287c2:	881b      	ldrh	r3, [r3, #0]
 80287c4:	8093      	strh	r3, [r2, #4]
	if(theme){
 80287c6:	79fb      	ldrb	r3, [r7, #7]
 80287c8:	2b00      	cmp	r3, #0
 80287ca:	d005      	beq.n	80287d8 <tos_StopWatchScreen_Init+0x40>
		style_screen.body.main_color = LV_COLOR_BLACK;
 80287cc:	4b12      	ldr	r3, [pc, #72]	; (8028818 <tos_StopWatchScreen_Init+0x80>)
 80287ce:	2200      	movs	r2, #0
 80287d0:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 80287d2:	4b11      	ldr	r3, [pc, #68]	; (8028818 <tos_StopWatchScreen_Init+0x80>)
 80287d4:	2200      	movs	r2, #0
 80287d6:	809a      	strh	r2, [r3, #4]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 80287d8:	f7ff ffc4 	bl	8028764 <lv_scr_act>
 80287dc:	4603      	mov	r3, r0
 80287de:	490e      	ldr	r1, [pc, #56]	; (8028818 <tos_StopWatchScreen_Init+0x80>)
 80287e0:	4618      	mov	r0, r3
 80287e2:	f7e0 ffea 	bl	80097ba <lv_obj_set_style>
 	isStartCount=false;
 80287e6:	4b0e      	ldr	r3, [pc, #56]	; (8028820 <tos_StopWatchScreen_Init+0x88>)
 80287e8:	2200      	movs	r2, #0
 80287ea:	701a      	strb	r2, [r3, #0]
 	SWtheme=theme;
 80287ec:	4a0d      	ldr	r2, [pc, #52]	; (8028824 <tos_StopWatchScreen_Init+0x8c>)
 80287ee:	79fb      	ldrb	r3, [r7, #7]
 80287f0:	7013      	strb	r3, [r2, #0]

	StopWatch_Obj_Init();
 80287f2:	f000 f81d 	bl	8028830 <StopWatch_Obj_Init>
 	SW_taskController=true;
 80287f6:	4b0c      	ldr	r3, [pc, #48]	; (8028828 <tos_StopWatchScreen_Init+0x90>)
 80287f8:	2201      	movs	r2, #1
 80287fa:	701a      	strb	r2, [r3, #0]
	lv_task_create(StopWatch_Stopwatch_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 80287fc:	2300      	movs	r3, #0
 80287fe:	2201      	movs	r2, #1
 8028800:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8028804:	4809      	ldr	r0, [pc, #36]	; (802882c <tos_StopWatchScreen_Init+0x94>)
 8028806:	f7ee f8d9 	bl	80169bc <lv_task_create>

}
 802880a:	bf00      	nop
 802880c:	3708      	adds	r7, #8
 802880e:	46bd      	mov	sp, r7
 8028810:	bd80      	pop	{r7, pc}
 8028812:	bf00      	nop
 8028814:	2001ba10 	.word	0x2001ba10
 8028818:	2001b4e8 	.word	0x2001b4e8
 802881c:	0802cfbc 	.word	0x0802cfbc
 8028820:	2001bf52 	.word	0x2001bf52
 8028824:	2001befc 	.word	0x2001befc
 8028828:	2001bf55 	.word	0x2001bf55
 802882c:	080289e9 	.word	0x080289e9

08028830 <StopWatch_Obj_Init>:

/*This function using for create and set objects on screen*/
void StopWatch_Obj_Init(void){
 8028830:	b580      	push	{r7, lr}
 8028832:	b084      	sub	sp, #16
 8028834:	af04      	add	r7, sp, #16

	SW_Statu_Img = lv_img_create(lv_scr_act(), NULL);
 8028836:	f7ff ff95 	bl	8028764 <lv_scr_act>
 802883a:	4603      	mov	r3, r0
 802883c:	2100      	movs	r1, #0
 802883e:	4618      	mov	r0, r3
 8028840:	f7f3 f8a2 	bl	801b988 <lv_img_create>
 8028844:	4602      	mov	r2, r0
 8028846:	4b57      	ldr	r3, [pc, #348]	; (80289a4 <StopWatch_Obj_Init+0x174>)
 8028848:	601a      	str	r2, [r3, #0]
	if(SWtheme) lv_img_set_src(SW_Statu_Img, &stopBlack50x50);
 802884a:	4b57      	ldr	r3, [pc, #348]	; (80289a8 <StopWatch_Obj_Init+0x178>)
 802884c:	781b      	ldrb	r3, [r3, #0]
 802884e:	2b00      	cmp	r3, #0
 8028850:	d006      	beq.n	8028860 <StopWatch_Obj_Init+0x30>
 8028852:	4b54      	ldr	r3, [pc, #336]	; (80289a4 <StopWatch_Obj_Init+0x174>)
 8028854:	681b      	ldr	r3, [r3, #0]
 8028856:	4955      	ldr	r1, [pc, #340]	; (80289ac <StopWatch_Obj_Init+0x17c>)
 8028858:	4618      	mov	r0, r3
 802885a:	f7f3 f933 	bl	801bac4 <lv_img_set_src>
 802885e:	e005      	b.n	802886c <StopWatch_Obj_Init+0x3c>
	else lv_img_set_src(SW_Statu_Img, &stopWhite50x50);
 8028860:	4b50      	ldr	r3, [pc, #320]	; (80289a4 <StopWatch_Obj_Init+0x174>)
 8028862:	681b      	ldr	r3, [r3, #0]
 8028864:	4952      	ldr	r1, [pc, #328]	; (80289b0 <StopWatch_Obj_Init+0x180>)
 8028866:	4618      	mov	r0, r3
 8028868:	f7f3 f92c 	bl	801bac4 <lv_img_set_src>
	lv_obj_align(SW_Statu_Img, NULL, LV_ALIGN_CENTER, 0, 0);
 802886c:	4b4d      	ldr	r3, [pc, #308]	; (80289a4 <StopWatch_Obj_Init+0x174>)
 802886e:	6818      	ldr	r0, [r3, #0]
 8028870:	2300      	movs	r3, #0
 8028872:	9300      	str	r3, [sp, #0]
 8028874:	2300      	movs	r3, #0
 8028876:	2200      	movs	r2, #0
 8028878:	2100      	movs	r1, #0
 802887a:	f7e0 faf9 	bl	8008e70 <lv_obj_align>

    static lv_style_t text_Style,save_text_Style;
    lv_style_copy(&text_Style, &lv_style_plain);
 802887e:	494d      	ldr	r1, [pc, #308]	; (80289b4 <StopWatch_Obj_Init+0x184>)
 8028880:	484d      	ldr	r0, [pc, #308]	; (80289b8 <StopWatch_Obj_Init+0x188>)
 8028882:	f7e2 fd39 	bl	800b2f8 <lv_style_copy>
    text_Style.text.color = LV_COLOR_BLACK;
 8028886:	4b4c      	ldr	r3, [pc, #304]	; (80289b8 <StopWatch_Obj_Init+0x188>)
 8028888:	2200      	movs	r2, #0
 802888a:	841a      	strh	r2, [r3, #32]
    if(SWtheme) text_Style.text.color = LV_COLOR_SILVER;
 802888c:	4b46      	ldr	r3, [pc, #280]	; (80289a8 <StopWatch_Obj_Init+0x178>)
 802888e:	781b      	ldrb	r3, [r3, #0]
 8028890:	2b00      	cmp	r3, #0
 8028892:	d003      	beq.n	802889c <StopWatch_Obj_Init+0x6c>
 8028894:	4a48      	ldr	r2, [pc, #288]	; (80289b8 <StopWatch_Obj_Init+0x188>)
 8028896:	4b49      	ldr	r3, [pc, #292]	; (80289bc <StopWatch_Obj_Init+0x18c>)
 8028898:	881b      	ldrh	r3, [r3, #0]
 802889a:	8413      	strh	r3, [r2, #32]
    text_Style.text.font = &digital_font_for_number_30;
 802889c:	4b46      	ldr	r3, [pc, #280]	; (80289b8 <StopWatch_Obj_Init+0x188>)
 802889e:	4a48      	ldr	r2, [pc, #288]	; (80289c0 <StopWatch_Obj_Init+0x190>)
 80288a0:	625a      	str	r2, [r3, #36]	; 0x24
    lv_style_copy(&save_text_Style, &text_Style);
 80288a2:	4945      	ldr	r1, [pc, #276]	; (80289b8 <StopWatch_Obj_Init+0x188>)
 80288a4:	4847      	ldr	r0, [pc, #284]	; (80289c4 <StopWatch_Obj_Init+0x194>)
 80288a6:	f7e2 fd27 	bl	800b2f8 <lv_style_copy>
    save_text_Style.text.opa=200;
 80288aa:	4b46      	ldr	r3, [pc, #280]	; (80289c4 <StopWatch_Obj_Init+0x194>)
 80288ac:	22c8      	movs	r2, #200	; 0xc8
 80288ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    	   //MAGENTA -> FF00FF
   	       //AQUA -> 00FFFF
	       //ORANGE -> FFA500

    SW_Lbl = lv_label_create(lv_scr_act(), NULL);
 80288b2:	f7ff ff57 	bl	8028764 <lv_scr_act>
 80288b6:	4603      	mov	r3, r0
 80288b8:	2100      	movs	r1, #0
 80288ba:	4618      	mov	r0, r3
 80288bc:	f7f3 fbf0 	bl	801c0a0 <lv_label_create>
 80288c0:	4602      	mov	r2, r0
 80288c2:	4b41      	ldr	r3, [pc, #260]	; (80289c8 <StopWatch_Obj_Init+0x198>)
 80288c4:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(SW_Lbl, true);
 80288c6:	4b40      	ldr	r3, [pc, #256]	; (80289c8 <StopWatch_Obj_Init+0x198>)
 80288c8:	681b      	ldr	r3, [r3, #0]
 80288ca:	2101      	movs	r1, #1
 80288cc:	4618      	mov	r0, r3
 80288ce:	f7f3 fe35 	bl	801c53c <lv_label_set_recolor>
 	lv_label_set_style(SW_Lbl, LV_LABEL_STYLE_MAIN, &text_Style);
 80288d2:	4b3d      	ldr	r3, [pc, #244]	; (80289c8 <StopWatch_Obj_Init+0x198>)
 80288d4:	681b      	ldr	r3, [r3, #0]
 80288d6:	4a38      	ldr	r2, [pc, #224]	; (80289b8 <StopWatch_Obj_Init+0x188>)
 80288d8:	2100      	movs	r1, #0
 80288da:	4618      	mov	r0, r3
 80288dc:	f7ff ff4d 	bl	802877a <lv_label_set_style>
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 80288e0:	4b3a      	ldr	r3, [pc, #232]	; (80289cc <StopWatch_Obj_Init+0x19c>)
 80288e2:	781b      	ldrb	r3, [r3, #0]
 80288e4:	4618      	mov	r0, r3
 80288e6:	4b3a      	ldr	r3, [pc, #232]	; (80289d0 <StopWatch_Obj_Init+0x1a0>)
 80288e8:	781b      	ldrb	r3, [r3, #0]
 80288ea:	461a      	mov	r2, r3
 80288ec:	4b39      	ldr	r3, [pc, #228]	; (80289d4 <StopWatch_Obj_Init+0x1a4>)
 80288ee:	781b      	ldrb	r3, [r3, #0]
 80288f0:	4619      	mov	r1, r3
 80288f2:	4b39      	ldr	r3, [pc, #228]	; (80289d8 <StopWatch_Obj_Init+0x1a8>)
 80288f4:	881b      	ldrh	r3, [r3, #0]
 80288f6:	9302      	str	r3, [sp, #8]
 80288f8:	9101      	str	r1, [sp, #4]
 80288fa:	9200      	str	r2, [sp, #0]
 80288fc:	4603      	mov	r3, r0
 80288fe:	4a37      	ldr	r2, [pc, #220]	; (80289dc <StopWatch_Obj_Init+0x1ac>)
 8028900:	2140      	movs	r1, #64	; 0x40
 8028902:	4837      	ldr	r0, [pc, #220]	; (80289e0 <StopWatch_Obj_Init+0x1b0>)
 8028904:	f001 ff7e 	bl	802a804 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_Lbl, stopWatchBuffer);
 8028908:	4b2f      	ldr	r3, [pc, #188]	; (80289c8 <StopWatch_Obj_Init+0x198>)
 802890a:	681b      	ldr	r3, [r3, #0]
 802890c:	4934      	ldr	r1, [pc, #208]	; (80289e0 <StopWatch_Obj_Init+0x1b0>)
 802890e:	4618      	mov	r0, r3
 8028910:	f7f3 fcf8 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(SW_Lbl, NULL, LV_ALIGN_CENTER, 0, -70);
 8028914:	4b2c      	ldr	r3, [pc, #176]	; (80289c8 <StopWatch_Obj_Init+0x198>)
 8028916:	6818      	ldr	r0, [r3, #0]
 8028918:	f06f 0345 	mvn.w	r3, #69	; 0x45
 802891c:	9300      	str	r3, [sp, #0]
 802891e:	2300      	movs	r3, #0
 8028920:	2200      	movs	r2, #0
 8028922:	2100      	movs	r1, #0
 8028924:	f7e0 faa4 	bl	8008e70 <lv_obj_align>


 	SW_saveLbl= lv_label_create(lv_scr_act(), NULL);
 8028928:	f7ff ff1c 	bl	8028764 <lv_scr_act>
 802892c:	4603      	mov	r3, r0
 802892e:	2100      	movs	r1, #0
 8028930:	4618      	mov	r0, r3
 8028932:	f7f3 fbb5 	bl	801c0a0 <lv_label_create>
 8028936:	4602      	mov	r2, r0
 8028938:	4b2a      	ldr	r3, [pc, #168]	; (80289e4 <StopWatch_Obj_Init+0x1b4>)
 802893a:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(SW_saveLbl, true);
 802893c:	4b29      	ldr	r3, [pc, #164]	; (80289e4 <StopWatch_Obj_Init+0x1b4>)
 802893e:	681b      	ldr	r3, [r3, #0]
 8028940:	2101      	movs	r1, #1
 8028942:	4618      	mov	r0, r3
 8028944:	f7f3 fdfa 	bl	801c53c <lv_label_set_recolor>
 	lv_label_set_style(SW_saveLbl, LV_LABEL_STYLE_MAIN, &save_text_Style);
 8028948:	4b26      	ldr	r3, [pc, #152]	; (80289e4 <StopWatch_Obj_Init+0x1b4>)
 802894a:	681b      	ldr	r3, [r3, #0]
 802894c:	4a1d      	ldr	r2, [pc, #116]	; (80289c4 <StopWatch_Obj_Init+0x194>)
 802894e:	2100      	movs	r1, #0
 8028950:	4618      	mov	r0, r3
 8028952:	f7ff ff12 	bl	802877a <lv_label_set_style>
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8028956:	4b1d      	ldr	r3, [pc, #116]	; (80289cc <StopWatch_Obj_Init+0x19c>)
 8028958:	781b      	ldrb	r3, [r3, #0]
 802895a:	4618      	mov	r0, r3
 802895c:	4b1c      	ldr	r3, [pc, #112]	; (80289d0 <StopWatch_Obj_Init+0x1a0>)
 802895e:	781b      	ldrb	r3, [r3, #0]
 8028960:	461a      	mov	r2, r3
 8028962:	4b1c      	ldr	r3, [pc, #112]	; (80289d4 <StopWatch_Obj_Init+0x1a4>)
 8028964:	781b      	ldrb	r3, [r3, #0]
 8028966:	4619      	mov	r1, r3
 8028968:	4b1b      	ldr	r3, [pc, #108]	; (80289d8 <StopWatch_Obj_Init+0x1a8>)
 802896a:	881b      	ldrh	r3, [r3, #0]
 802896c:	9302      	str	r3, [sp, #8]
 802896e:	9101      	str	r1, [sp, #4]
 8028970:	9200      	str	r2, [sp, #0]
 8028972:	4603      	mov	r3, r0
 8028974:	4a19      	ldr	r2, [pc, #100]	; (80289dc <StopWatch_Obj_Init+0x1ac>)
 8028976:	2140      	movs	r1, #64	; 0x40
 8028978:	4819      	ldr	r0, [pc, #100]	; (80289e0 <StopWatch_Obj_Init+0x1b0>)
 802897a:	f001 ff43 	bl	802a804 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_saveLbl, stopWatchBuffer);
 802897e:	4b19      	ldr	r3, [pc, #100]	; (80289e4 <StopWatch_Obj_Init+0x1b4>)
 8028980:	681b      	ldr	r3, [r3, #0]
 8028982:	4917      	ldr	r1, [pc, #92]	; (80289e0 <StopWatch_Obj_Init+0x1b0>)
 8028984:	4618      	mov	r0, r3
 8028986:	f7f3 fcbd 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(SW_saveLbl, NULL, LV_ALIGN_CENTER, 0, 70);
 802898a:	4b16      	ldr	r3, [pc, #88]	; (80289e4 <StopWatch_Obj_Init+0x1b4>)
 802898c:	6818      	ldr	r0, [r3, #0]
 802898e:	2346      	movs	r3, #70	; 0x46
 8028990:	9300      	str	r3, [sp, #0]
 8028992:	2300      	movs	r3, #0
 8028994:	2200      	movs	r2, #0
 8028996:	2100      	movs	r1, #0
 8028998:	f7e0 fa6a 	bl	8008e70 <lv_obj_align>
}
 802899c:	bf00      	nop
 802899e:	46bd      	mov	sp, r7
 80289a0:	bd80      	pop	{r7, pc}
 80289a2:	bf00      	nop
 80289a4:	2001bf4c 	.word	0x2001bf4c
 80289a8:	2001befc 	.word	0x2001befc
 80289ac:	08043c80 	.word	0x08043c80
 80289b0:	08045014 	.word	0x08045014
 80289b4:	2001ba10 	.word	0x2001ba10
 80289b8:	2001b524 	.word	0x2001b524
 80289bc:	0802cff0 	.word	0x0802cff0
 80289c0:	200027ec 	.word	0x200027ec
 80289c4:	2001b560 	.word	0x2001b560
 80289c8:	2001bf00 	.word	0x2001bf00
 80289cc:	2001bf54 	.word	0x2001bf54
 80289d0:	2001bf08 	.word	0x2001bf08
 80289d4:	2001bf53 	.word	0x2001bf53
 80289d8:	2001bf50 	.word	0x2001bf50
 80289dc:	0802cfc0 	.word	0x0802cfc0
 80289e0:	2001bf0c 	.word	0x2001bf0c
 80289e4:	2001bf04 	.word	0x2001bf04

080289e8 <StopWatch_Stopwatch_Updater>:

/*This function using for update to current label*/
void StopWatch_Stopwatch_Updater(lv_task_t *t){
 80289e8:	b580      	push	{r7, lr}
 80289ea:	b082      	sub	sp, #8
 80289ec:	af00      	add	r7, sp, #0
 80289ee:	6078      	str	r0, [r7, #4]
	if(SW_taskController){
 80289f0:	4b06      	ldr	r3, [pc, #24]	; (8028a0c <StopWatch_Stopwatch_Updater+0x24>)
 80289f2:	781b      	ldrb	r3, [r3, #0]
 80289f4:	2b00      	cmp	r3, #0
 80289f6:	d002      	beq.n	80289fe <StopWatch_Stopwatch_Updater+0x16>
		StopWatch_Update_Lbl();
 80289f8:	f000 f8a2 	bl	8028b40 <StopWatch_Update_Lbl>
		}else lv_task_del(t);
}
 80289fc:	e002      	b.n	8028a04 <StopWatch_Stopwatch_Updater+0x1c>
		}else lv_task_del(t);
 80289fe:	6878      	ldr	r0, [r7, #4]
 8028a00:	f7ee f814 	bl	8016a2c <lv_task_del>
}
 8028a04:	bf00      	nop
 8028a06:	3708      	adds	r7, #8
 8028a08:	46bd      	mov	sp, r7
 8028a0a:	bd80      	pop	{r7, pc}
 8028a0c:	2001bf55 	.word	0x2001bf55

08028a10 <StopWatch_ButtonController>:

/*This function using for control to buttons*/
void StopWatch_ButtonController(void){
 8028a10:	b580      	push	{r7, lr}
 8028a12:	b082      	sub	sp, #8
 8028a14:	af00      	add	r7, sp, #0
	uint8_t rightBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 8028a16:	f000 fc85 	bl	8029324 <tos_LeftButton_Listenner_For_MenuControl>
 8028a1a:	4603      	mov	r3, r0
 8028a1c:	71fb      	strb	r3, [r7, #7]
	  if(2==rightBtnListen){
 8028a1e:	79fb      	ldrb	r3, [r7, #7]
 8028a20:	2b02      	cmp	r3, #2
 8028a22:	d114      	bne.n	8028a4e <StopWatch_ButtonController+0x3e>
		  //Clear and stop
		  SWseconds=0; SWminutes=0; SWhours=0; SWmilisecs=0; isStartCount=false;
 8028a24:	4b1e      	ldr	r3, [pc, #120]	; (8028aa0 <StopWatch_ButtonController+0x90>)
 8028a26:	2200      	movs	r2, #0
 8028a28:	701a      	strb	r2, [r3, #0]
 8028a2a:	4b1e      	ldr	r3, [pc, #120]	; (8028aa4 <StopWatch_ButtonController+0x94>)
 8028a2c:	2200      	movs	r2, #0
 8028a2e:	701a      	strb	r2, [r3, #0]
 8028a30:	4b1d      	ldr	r3, [pc, #116]	; (8028aa8 <StopWatch_ButtonController+0x98>)
 8028a32:	2200      	movs	r2, #0
 8028a34:	701a      	strb	r2, [r3, #0]
 8028a36:	4b1d      	ldr	r3, [pc, #116]	; (8028aac <StopWatch_ButtonController+0x9c>)
 8028a38:	2200      	movs	r2, #0
 8028a3a:	801a      	strh	r2, [r3, #0]
 8028a3c:	4b1c      	ldr	r3, [pc, #112]	; (8028ab0 <StopWatch_ButtonController+0xa0>)
 8028a3e:	2200      	movs	r2, #0
 8028a40:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&TOS_STOPWATCH_TIMER);
 8028a42:	481c      	ldr	r0, [pc, #112]	; (8028ab4 <StopWatch_ButtonController+0xa4>)
 8028a44:	f7db f9cf 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
		  StopWatch_Update_StatuImg(0);}
 8028a48:	2000      	movs	r0, #0
 8028a4a:	f000 f8df 	bl	8028c0c <StopWatch_Update_StatuImg>
	  if(1==rightBtnListen){
 8028a4e:	79fb      	ldrb	r3, [r7, #7]
 8028a50:	2b01      	cmp	r3, #1
 8028a52:	d119      	bne.n	8028a88 <StopWatch_ButtonController+0x78>
		  //Start Stop
		  if(!isStartCount){HAL_TIM_Base_Start_IT(&TOS_STOPWATCH_TIMER); isStartCount=true;
 8028a54:	4b16      	ldr	r3, [pc, #88]	; (8028ab0 <StopWatch_ButtonController+0xa0>)
 8028a56:	781b      	ldrb	r3, [r3, #0]
 8028a58:	f083 0301 	eor.w	r3, r3, #1
 8028a5c:	b2db      	uxtb	r3, r3
 8028a5e:	2b00      	cmp	r3, #0
 8028a60:	d009      	beq.n	8028a76 <StopWatch_ButtonController+0x66>
 8028a62:	4814      	ldr	r0, [pc, #80]	; (8028ab4 <StopWatch_ButtonController+0xa4>)
 8028a64:	f7db f99b 	bl	8003d9e <HAL_TIM_Base_Start_IT>
 8028a68:	4b11      	ldr	r3, [pc, #68]	; (8028ab0 <StopWatch_ButtonController+0xa0>)
 8028a6a:	2201      	movs	r2, #1
 8028a6c:	701a      	strb	r2, [r3, #0]
		  StopWatch_Update_StatuImg(2);}
 8028a6e:	2002      	movs	r0, #2
 8028a70:	f000 f8cc 	bl	8028c0c <StopWatch_Update_StatuImg>
 8028a74:	e008      	b.n	8028a88 <StopWatch_ButtonController+0x78>
		  else { HAL_TIM_Base_Stop_IT(&TOS_STOPWATCH_TIMER);  isStartCount=false;
 8028a76:	480f      	ldr	r0, [pc, #60]	; (8028ab4 <StopWatch_ButtonController+0xa4>)
 8028a78:	f7db f9b5 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
 8028a7c:	4b0c      	ldr	r3, [pc, #48]	; (8028ab0 <StopWatch_ButtonController+0xa0>)
 8028a7e:	2200      	movs	r2, #0
 8028a80:	701a      	strb	r2, [r3, #0]
		  StopWatch_Update_StatuImg(1);}}
 8028a82:	2001      	movs	r0, #1
 8028a84:	f000 f8c2 	bl	8028c0c <StopWatch_Update_StatuImg>
	  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 8028a88:	f000 fc24 	bl	80292d4 <tos_RightButton_Listenner_For_MenuControl>
 8028a8c:	4603      	mov	r3, r0
 8028a8e:	2b01      	cmp	r3, #1
 8028a90:	d101      	bne.n	8028a96 <StopWatch_ButtonController+0x86>
				  //Save
				  StopWatch_Update_saveLbl();
 8028a92:	f000 f883 	bl	8028b9c <StopWatch_Update_saveLbl>
		  }




}
 8028a96:	bf00      	nop
 8028a98:	3708      	adds	r7, #8
 8028a9a:	46bd      	mov	sp, r7
 8028a9c:	bd80      	pop	{r7, pc}
 8028a9e:	bf00      	nop
 8028aa0:	2001bf53 	.word	0x2001bf53
 8028aa4:	2001bf08 	.word	0x2001bf08
 8028aa8:	2001bf54 	.word	0x2001bf54
 8028aac:	2001bf50 	.word	0x2001bf50
 8028ab0:	2001bf52 	.word	0x2001bf52
 8028ab4:	2001b708 	.word	0x2001b708

08028ab8 <StopWatch_Update_Time>:

/*This function using for update time
 * this function must be called in timer interupt function*/
void StopWatch_Update_Time(void){
 8028ab8:	b480      	push	{r7}
 8028aba:	af00      	add	r7, sp, #0
	//Colled by stm32f4xx_it.c TIM4_IRQHandler func
	if(SW_taskController){
 8028abc:	4b1b      	ldr	r3, [pc, #108]	; (8028b2c <StopWatch_Update_Time+0x74>)
 8028abe:	781b      	ldrb	r3, [r3, #0]
 8028ac0:	2b00      	cmp	r3, #0
 8028ac2:	d02d      	beq.n	8028b20 <StopWatch_Update_Time+0x68>
		SWmilisecs++;
 8028ac4:	4b1a      	ldr	r3, [pc, #104]	; (8028b30 <StopWatch_Update_Time+0x78>)
 8028ac6:	881b      	ldrh	r3, [r3, #0]
 8028ac8:	3301      	adds	r3, #1
 8028aca:	b29a      	uxth	r2, r3
 8028acc:	4b18      	ldr	r3, [pc, #96]	; (8028b30 <StopWatch_Update_Time+0x78>)
 8028ace:	801a      	strh	r2, [r3, #0]
			if(SWmilisecs==1000){
 8028ad0:	4b17      	ldr	r3, [pc, #92]	; (8028b30 <StopWatch_Update_Time+0x78>)
 8028ad2:	881b      	ldrh	r3, [r3, #0]
 8028ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8028ad8:	d122      	bne.n	8028b20 <StopWatch_Update_Time+0x68>
				SWmilisecs=0;
 8028ada:	4b15      	ldr	r3, [pc, #84]	; (8028b30 <StopWatch_Update_Time+0x78>)
 8028adc:	2200      	movs	r2, #0
 8028ade:	801a      	strh	r2, [r3, #0]
				SWseconds++;
 8028ae0:	4b14      	ldr	r3, [pc, #80]	; (8028b34 <StopWatch_Update_Time+0x7c>)
 8028ae2:	781b      	ldrb	r3, [r3, #0]
 8028ae4:	3301      	adds	r3, #1
 8028ae6:	b2da      	uxtb	r2, r3
 8028ae8:	4b12      	ldr	r3, [pc, #72]	; (8028b34 <StopWatch_Update_Time+0x7c>)
 8028aea:	701a      	strb	r2, [r3, #0]
				if(SWseconds==60){
 8028aec:	4b11      	ldr	r3, [pc, #68]	; (8028b34 <StopWatch_Update_Time+0x7c>)
 8028aee:	781b      	ldrb	r3, [r3, #0]
 8028af0:	2b3c      	cmp	r3, #60	; 0x3c
 8028af2:	d115      	bne.n	8028b20 <StopWatch_Update_Time+0x68>
					SWseconds=0;
 8028af4:	4b0f      	ldr	r3, [pc, #60]	; (8028b34 <StopWatch_Update_Time+0x7c>)
 8028af6:	2200      	movs	r2, #0
 8028af8:	701a      	strb	r2, [r3, #0]
					SWminutes++;
 8028afa:	4b0f      	ldr	r3, [pc, #60]	; (8028b38 <StopWatch_Update_Time+0x80>)
 8028afc:	781b      	ldrb	r3, [r3, #0]
 8028afe:	3301      	adds	r3, #1
 8028b00:	b2da      	uxtb	r2, r3
 8028b02:	4b0d      	ldr	r3, [pc, #52]	; (8028b38 <StopWatch_Update_Time+0x80>)
 8028b04:	701a      	strb	r2, [r3, #0]
					if(SWminutes==60){
 8028b06:	4b0c      	ldr	r3, [pc, #48]	; (8028b38 <StopWatch_Update_Time+0x80>)
 8028b08:	781b      	ldrb	r3, [r3, #0]
 8028b0a:	2b3c      	cmp	r3, #60	; 0x3c
 8028b0c:	d108      	bne.n	8028b20 <StopWatch_Update_Time+0x68>
						SWminutes=0;
 8028b0e:	4b0a      	ldr	r3, [pc, #40]	; (8028b38 <StopWatch_Update_Time+0x80>)
 8028b10:	2200      	movs	r2, #0
 8028b12:	701a      	strb	r2, [r3, #0]
						SWhours++;
 8028b14:	4b09      	ldr	r3, [pc, #36]	; (8028b3c <StopWatch_Update_Time+0x84>)
 8028b16:	781b      	ldrb	r3, [r3, #0]
 8028b18:	3301      	adds	r3, #1
 8028b1a:	b2da      	uxtb	r2, r3
 8028b1c:	4b07      	ldr	r3, [pc, #28]	; (8028b3c <StopWatch_Update_Time+0x84>)
 8028b1e:	701a      	strb	r2, [r3, #0]
					}
				}
			}
	}
}
 8028b20:	bf00      	nop
 8028b22:	46bd      	mov	sp, r7
 8028b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b28:	4770      	bx	lr
 8028b2a:	bf00      	nop
 8028b2c:	2001bf55 	.word	0x2001bf55
 8028b30:	2001bf50 	.word	0x2001bf50
 8028b34:	2001bf53 	.word	0x2001bf53
 8028b38:	2001bf08 	.word	0x2001bf08
 8028b3c:	2001bf54 	.word	0x2001bf54

08028b40 <StopWatch_Update_Lbl>:

/*This function using for set current value to label*/
void StopWatch_Update_Lbl(void){
 8028b40:	b580      	push	{r7, lr}
 8028b42:	b084      	sub	sp, #16
 8028b44:	af04      	add	r7, sp, #16
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8028b46:	4b0e      	ldr	r3, [pc, #56]	; (8028b80 <StopWatch_Update_Lbl+0x40>)
 8028b48:	781b      	ldrb	r3, [r3, #0]
 8028b4a:	4618      	mov	r0, r3
 8028b4c:	4b0d      	ldr	r3, [pc, #52]	; (8028b84 <StopWatch_Update_Lbl+0x44>)
 8028b4e:	781b      	ldrb	r3, [r3, #0]
 8028b50:	461a      	mov	r2, r3
 8028b52:	4b0d      	ldr	r3, [pc, #52]	; (8028b88 <StopWatch_Update_Lbl+0x48>)
 8028b54:	781b      	ldrb	r3, [r3, #0]
 8028b56:	4619      	mov	r1, r3
 8028b58:	4b0c      	ldr	r3, [pc, #48]	; (8028b8c <StopWatch_Update_Lbl+0x4c>)
 8028b5a:	881b      	ldrh	r3, [r3, #0]
 8028b5c:	9302      	str	r3, [sp, #8]
 8028b5e:	9101      	str	r1, [sp, #4]
 8028b60:	9200      	str	r2, [sp, #0]
 8028b62:	4603      	mov	r3, r0
 8028b64:	4a0a      	ldr	r2, [pc, #40]	; (8028b90 <StopWatch_Update_Lbl+0x50>)
 8028b66:	2140      	movs	r1, #64	; 0x40
 8028b68:	480a      	ldr	r0, [pc, #40]	; (8028b94 <StopWatch_Update_Lbl+0x54>)
 8028b6a:	f001 fe4b 	bl	802a804 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_Lbl, stopWatchBuffer);
 8028b6e:	4b0a      	ldr	r3, [pc, #40]	; (8028b98 <StopWatch_Update_Lbl+0x58>)
 8028b70:	681b      	ldr	r3, [r3, #0]
 8028b72:	4908      	ldr	r1, [pc, #32]	; (8028b94 <StopWatch_Update_Lbl+0x54>)
 8028b74:	4618      	mov	r0, r3
 8028b76:	f7f3 fbc5 	bl	801c304 <lv_label_set_text>
}
 8028b7a:	bf00      	nop
 8028b7c:	46bd      	mov	sp, r7
 8028b7e:	bd80      	pop	{r7, pc}
 8028b80:	2001bf54 	.word	0x2001bf54
 8028b84:	2001bf08 	.word	0x2001bf08
 8028b88:	2001bf53 	.word	0x2001bf53
 8028b8c:	2001bf50 	.word	0x2001bf50
 8028b90:	0802cfc0 	.word	0x0802cfc0
 8028b94:	2001bf0c 	.word	0x2001bf0c
 8028b98:	2001bf00 	.word	0x2001bf00

08028b9c <StopWatch_Update_saveLbl>:
/*This function using for set saved value to label*/
void StopWatch_Update_saveLbl(void){
 8028b9c:	b580      	push	{r7, lr}
 8028b9e:	b084      	sub	sp, #16
 8028ba0:	af04      	add	r7, sp, #16
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8028ba2:	4b13      	ldr	r3, [pc, #76]	; (8028bf0 <StopWatch_Update_saveLbl+0x54>)
 8028ba4:	781b      	ldrb	r3, [r3, #0]
 8028ba6:	4618      	mov	r0, r3
 8028ba8:	4b12      	ldr	r3, [pc, #72]	; (8028bf4 <StopWatch_Update_saveLbl+0x58>)
 8028baa:	781b      	ldrb	r3, [r3, #0]
 8028bac:	461a      	mov	r2, r3
 8028bae:	4b12      	ldr	r3, [pc, #72]	; (8028bf8 <StopWatch_Update_saveLbl+0x5c>)
 8028bb0:	781b      	ldrb	r3, [r3, #0]
 8028bb2:	4619      	mov	r1, r3
 8028bb4:	4b11      	ldr	r3, [pc, #68]	; (8028bfc <StopWatch_Update_saveLbl+0x60>)
 8028bb6:	881b      	ldrh	r3, [r3, #0]
 8028bb8:	9302      	str	r3, [sp, #8]
 8028bba:	9101      	str	r1, [sp, #4]
 8028bbc:	9200      	str	r2, [sp, #0]
 8028bbe:	4603      	mov	r3, r0
 8028bc0:	4a0f      	ldr	r2, [pc, #60]	; (8028c00 <StopWatch_Update_saveLbl+0x64>)
 8028bc2:	2140      	movs	r1, #64	; 0x40
 8028bc4:	480f      	ldr	r0, [pc, #60]	; (8028c04 <StopWatch_Update_saveLbl+0x68>)
 8028bc6:	f001 fe1d 	bl	802a804 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_saveLbl, stopWatchBuffer);
 8028bca:	4b0f      	ldr	r3, [pc, #60]	; (8028c08 <StopWatch_Update_saveLbl+0x6c>)
 8028bcc:	681b      	ldr	r3, [r3, #0]
 8028bce:	490d      	ldr	r1, [pc, #52]	; (8028c04 <StopWatch_Update_saveLbl+0x68>)
 8028bd0:	4618      	mov	r0, r3
 8028bd2:	f7f3 fb97 	bl	801c304 <lv_label_set_text>
 	lv_obj_align(SW_saveLbl, NULL, LV_ALIGN_CENTER, 0, 70);
 8028bd6:	4b0c      	ldr	r3, [pc, #48]	; (8028c08 <StopWatch_Update_saveLbl+0x6c>)
 8028bd8:	6818      	ldr	r0, [r3, #0]
 8028bda:	2346      	movs	r3, #70	; 0x46
 8028bdc:	9300      	str	r3, [sp, #0]
 8028bde:	2300      	movs	r3, #0
 8028be0:	2200      	movs	r2, #0
 8028be2:	2100      	movs	r1, #0
 8028be4:	f7e0 f944 	bl	8008e70 <lv_obj_align>
}
 8028be8:	bf00      	nop
 8028bea:	46bd      	mov	sp, r7
 8028bec:	bd80      	pop	{r7, pc}
 8028bee:	bf00      	nop
 8028bf0:	2001bf54 	.word	0x2001bf54
 8028bf4:	2001bf08 	.word	0x2001bf08
 8028bf8:	2001bf53 	.word	0x2001bf53
 8028bfc:	2001bf50 	.word	0x2001bf50
 8028c00:	0802cfc0 	.word	0x0802cfc0
 8028c04:	2001bf0c 	.word	0x2001bf0c
 8028c08:	2001bf04 	.word	0x2001bf04

08028c0c <StopWatch_Update_StatuImg>:
/*This function using for set statu image
 * @param statu using for select count statu
 * 0 -> stop statu
 * 1 -> pause statu
 * 2 -> play statu*/
void StopWatch_Update_StatuImg(uint8_t statu){
 8028c0c:	b580      	push	{r7, lr}
 8028c0e:	b082      	sub	sp, #8
 8028c10:	af00      	add	r7, sp, #0
 8028c12:	4603      	mov	r3, r0
 8028c14:	71fb      	strb	r3, [r7, #7]
	if(0==statu){
 8028c16:	79fb      	ldrb	r3, [r7, #7]
 8028c18:	2b00      	cmp	r3, #0
 8028c1a:	d111      	bne.n	8028c40 <StopWatch_Update_StatuImg+0x34>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &stopBlack50x50);
 8028c1c:	4b1f      	ldr	r3, [pc, #124]	; (8028c9c <StopWatch_Update_StatuImg+0x90>)
 8028c1e:	781b      	ldrb	r3, [r3, #0]
 8028c20:	2b00      	cmp	r3, #0
 8028c22:	d006      	beq.n	8028c32 <StopWatch_Update_StatuImg+0x26>
 8028c24:	4b1e      	ldr	r3, [pc, #120]	; (8028ca0 <StopWatch_Update_StatuImg+0x94>)
 8028c26:	681b      	ldr	r3, [r3, #0]
 8028c28:	491e      	ldr	r1, [pc, #120]	; (8028ca4 <StopWatch_Update_StatuImg+0x98>)
 8028c2a:	4618      	mov	r0, r3
 8028c2c:	f7f2 ff4a 	bl	801bac4 <lv_img_set_src>
	}
	else if(2==statu){
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &playBlack50x50);
		else lv_img_set_src(SW_Statu_Img, &playWhite50x50);
	}
}
 8028c30:	e02f      	b.n	8028c92 <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &stopWhite50x50);
 8028c32:	4b1b      	ldr	r3, [pc, #108]	; (8028ca0 <StopWatch_Update_StatuImg+0x94>)
 8028c34:	681b      	ldr	r3, [r3, #0]
 8028c36:	491c      	ldr	r1, [pc, #112]	; (8028ca8 <StopWatch_Update_StatuImg+0x9c>)
 8028c38:	4618      	mov	r0, r3
 8028c3a:	f7f2 ff43 	bl	801bac4 <lv_img_set_src>
}
 8028c3e:	e028      	b.n	8028c92 <StopWatch_Update_StatuImg+0x86>
	else if(1==statu){
 8028c40:	79fb      	ldrb	r3, [r7, #7]
 8028c42:	2b01      	cmp	r3, #1
 8028c44:	d111      	bne.n	8028c6a <StopWatch_Update_StatuImg+0x5e>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &pauseBlack50x50);
 8028c46:	4b15      	ldr	r3, [pc, #84]	; (8028c9c <StopWatch_Update_StatuImg+0x90>)
 8028c48:	781b      	ldrb	r3, [r3, #0]
 8028c4a:	2b00      	cmp	r3, #0
 8028c4c:	d006      	beq.n	8028c5c <StopWatch_Update_StatuImg+0x50>
 8028c4e:	4b14      	ldr	r3, [pc, #80]	; (8028ca0 <StopWatch_Update_StatuImg+0x94>)
 8028c50:	681b      	ldr	r3, [r3, #0]
 8028c52:	4916      	ldr	r1, [pc, #88]	; (8028cac <StopWatch_Update_StatuImg+0xa0>)
 8028c54:	4618      	mov	r0, r3
 8028c56:	f7f2 ff35 	bl	801bac4 <lv_img_set_src>
}
 8028c5a:	e01a      	b.n	8028c92 <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &pauseWhite50x50);
 8028c5c:	4b10      	ldr	r3, [pc, #64]	; (8028ca0 <StopWatch_Update_StatuImg+0x94>)
 8028c5e:	681b      	ldr	r3, [r3, #0]
 8028c60:	4913      	ldr	r1, [pc, #76]	; (8028cb0 <StopWatch_Update_StatuImg+0xa4>)
 8028c62:	4618      	mov	r0, r3
 8028c64:	f7f2 ff2e 	bl	801bac4 <lv_img_set_src>
}
 8028c68:	e013      	b.n	8028c92 <StopWatch_Update_StatuImg+0x86>
	else if(2==statu){
 8028c6a:	79fb      	ldrb	r3, [r7, #7]
 8028c6c:	2b02      	cmp	r3, #2
 8028c6e:	d110      	bne.n	8028c92 <StopWatch_Update_StatuImg+0x86>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &playBlack50x50);
 8028c70:	4b0a      	ldr	r3, [pc, #40]	; (8028c9c <StopWatch_Update_StatuImg+0x90>)
 8028c72:	781b      	ldrb	r3, [r3, #0]
 8028c74:	2b00      	cmp	r3, #0
 8028c76:	d006      	beq.n	8028c86 <StopWatch_Update_StatuImg+0x7a>
 8028c78:	4b09      	ldr	r3, [pc, #36]	; (8028ca0 <StopWatch_Update_StatuImg+0x94>)
 8028c7a:	681b      	ldr	r3, [r3, #0]
 8028c7c:	490d      	ldr	r1, [pc, #52]	; (8028cb4 <StopWatch_Update_StatuImg+0xa8>)
 8028c7e:	4618      	mov	r0, r3
 8028c80:	f7f2 ff20 	bl	801bac4 <lv_img_set_src>
}
 8028c84:	e005      	b.n	8028c92 <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &playWhite50x50);
 8028c86:	4b06      	ldr	r3, [pc, #24]	; (8028ca0 <StopWatch_Update_StatuImg+0x94>)
 8028c88:	681b      	ldr	r3, [r3, #0]
 8028c8a:	490b      	ldr	r1, [pc, #44]	; (8028cb8 <StopWatch_Update_StatuImg+0xac>)
 8028c8c:	4618      	mov	r0, r3
 8028c8e:	f7f2 ff19 	bl	801bac4 <lv_img_set_src>
}
 8028c92:	bf00      	nop
 8028c94:	3708      	adds	r7, #8
 8028c96:	46bd      	mov	sp, r7
 8028c98:	bd80      	pop	{r7, pc}
 8028c9a:	bf00      	nop
 8028c9c:	2001befc 	.word	0x2001befc
 8028ca0:	2001bf4c 	.word	0x2001bf4c
 8028ca4:	08043c80 	.word	0x08043c80
 8028ca8:	08045014 	.word	0x08045014
 8028cac:	0803dbb8 	.word	0x0803dbb8
 8028cb0:	0803ef4c 	.word	0x0803ef4c
 8028cb4:	080402e0 	.word	0x080402e0
 8028cb8:	08041674 	.word	0x08041674

08028cbc <StopWatch_TaskControllerSet>:



//Setter Getter Functions

void StopWatch_TaskControllerSet(bool active){
 8028cbc:	b480      	push	{r7}
 8028cbe:	b083      	sub	sp, #12
 8028cc0:	af00      	add	r7, sp, #0
 8028cc2:	4603      	mov	r3, r0
 8028cc4:	71fb      	strb	r3, [r7, #7]
	SW_taskController = active;
 8028cc6:	4a04      	ldr	r2, [pc, #16]	; (8028cd8 <StopWatch_TaskControllerSet+0x1c>)
 8028cc8:	79fb      	ldrb	r3, [r7, #7]
 8028cca:	7013      	strb	r3, [r2, #0]
}
 8028ccc:	bf00      	nop
 8028cce:	370c      	adds	r7, #12
 8028cd0:	46bd      	mov	sp, r7
 8028cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028cd6:	4770      	bx	lr
 8028cd8:	2001bf55 	.word	0x2001bf55

08028cdc <StopWatch_TaskControllerGet>:
bool StopWatch_TaskControllerGet(void){
 8028cdc:	b480      	push	{r7}
 8028cde:	af00      	add	r7, sp, #0
	return SW_taskController;
 8028ce0:	4b03      	ldr	r3, [pc, #12]	; (8028cf0 <StopWatch_TaskControllerGet+0x14>)
 8028ce2:	781b      	ldrb	r3, [r3, #0]
}
 8028ce4:	4618      	mov	r0, r3
 8028ce6:	46bd      	mov	sp, r7
 8028ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028cec:	4770      	bx	lr
 8028cee:	bf00      	nop
 8028cf0:	2001bf55 	.word	0x2001bf55

08028cf4 <tos_getBatteryVAl>:
#include "../../lvgl/lvgl.h"

char * tos_BatteryVal_Sym_Helper(uint8_t batteryVal,uint8_t batteryValueTemp);
lv_color_t tos_BatteryVal_SymColor_Helper(uint8_t batteryVal);

void tos_getBatteryVAl(uint8_t batteryVal,uint8_t Screen){
 8028cf4:	b580      	push	{r7, lr}
 8028cf6:	b084      	sub	sp, #16
 8028cf8:	af00      	add	r7, sp, #0
 8028cfa:	4603      	mov	r3, r0
 8028cfc:	460a      	mov	r2, r1
 8028cfe:	71fb      	strb	r3, [r7, #7]
 8028d00:	4613      	mov	r3, r2
 8028d02:	71bb      	strb	r3, [r7, #6]
	static uint8_t batteryValueTemp = 0;
	if (batteryVal != batteryValueTemp){
 8028d04:	4b12      	ldr	r3, [pc, #72]	; (8028d50 <tos_getBatteryVAl+0x5c>)
 8028d06:	781b      	ldrb	r3, [r3, #0]
 8028d08:	79fa      	ldrb	r2, [r7, #7]
 8028d0a:	429a      	cmp	r2, r3
 8028d0c:	d01d      	beq.n	8028d4a <tos_getBatteryVAl+0x56>
	char * batterySym= tos_BatteryVal_Sym_Helper(batteryVal,batteryValueTemp);
 8028d0e:	4b10      	ldr	r3, [pc, #64]	; (8028d50 <tos_getBatteryVAl+0x5c>)
 8028d10:	781a      	ldrb	r2, [r3, #0]
 8028d12:	79fb      	ldrb	r3, [r7, #7]
 8028d14:	4611      	mov	r1, r2
 8028d16:	4618      	mov	r0, r3
 8028d18:	f000 f81c 	bl	8028d54 <tos_BatteryVal_Sym_Helper>
 8028d1c:	60f8      	str	r0, [r7, #12]
	lv_color_t batteryClr = tos_BatteryVal_SymColor_Helper(batteryVal);
 8028d1e:	79fb      	ldrb	r3, [r7, #7]
 8028d20:	4618      	mov	r0, r3
 8028d22:	f000 f889 	bl	8028e38 <tos_BatteryVal_SymColor_Helper>
 8028d26:	4603      	mov	r3, r0
 8028d28:	813b      	strh	r3, [r7, #8]
	switch(Screen){
 8028d2a:	79bb      	ldrb	r3, [r7, #6]
 8028d2c:	2b00      	cmp	r3, #0
 8028d2e:	d002      	beq.n	8028d36 <tos_getBatteryVAl+0x42>
 8028d30:	2b01      	cmp	r3, #1
 8028d32:	d005      	beq.n	8028d40 <tos_getBatteryVAl+0x4c>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBatteryVal(batterySym, batteryClr); break;
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBatteryVal(batterySym, batteryClr); break;
	/*case TOS_SCREEN_STOPWATCH_: tos_MainScreen_Init(1,1);break;
	case TOS_SCREEN_NOTIFICATIONS_: break;*/
	default: return;
 8028d34:	e009      	b.n	8028d4a <tos_getBatteryVAl+0x56>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBatteryVal(batterySym, batteryClr); break;
 8028d36:	8939      	ldrh	r1, [r7, #8]
 8028d38:	68f8      	ldr	r0, [r7, #12]
 8028d3a:	f7fb f8c1 	bl	8023ec0 <MainScreen_SetBatteryVal>
 8028d3e:	e004      	b.n	8028d4a <tos_getBatteryVAl+0x56>
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBatteryVal(batterySym, batteryClr); break;
 8028d40:	8939      	ldrh	r1, [r7, #8]
 8028d42:	68f8      	ldr	r0, [r7, #12]
 8028d44:	f7fe ff38 	bl	8027bb8 <SleepModeScreen_SetBatteryVal>
 8028d48:	bf00      	nop
	}

	}
}
 8028d4a:	3710      	adds	r7, #16
 8028d4c:	46bd      	mov	sp, r7
 8028d4e:	bd80      	pop	{r7, pc}
 8028d50:	2001b59c 	.word	0x2001b59c

08028d54 <tos_BatteryVal_Sym_Helper>:

char * tos_BatteryVal_Sym_Helper(uint8_t batteryVal,uint8_t batteryValueTemp){
 8028d54:	b480      	push	{r7}
 8028d56:	b083      	sub	sp, #12
 8028d58:	af00      	add	r7, sp, #0
 8028d5a:	4603      	mov	r3, r0
 8028d5c:	460a      	mov	r2, r1
 8028d5e:	71fb      	strb	r3, [r7, #7]
 8028d60:	4613      	mov	r3, r2
 8028d62:	71bb      	strb	r3, [r7, #6]
		if(batteryVal <= batteryValueTemp){
 8028d64:	79fa      	ldrb	r2, [r7, #7]
 8028d66:	79bb      	ldrb	r3, [r7, #6]
 8028d68:	429a      	cmp	r2, r3
 8028d6a:	d824      	bhi.n	8028db6 <tos_BatteryVal_Sym_Helper+0x62>
			if (batteryVal < 10 && batteryVal >= 0) return LV_SYMBOL_BATTERY_EMPTY;
 8028d6c:	79fb      	ldrb	r3, [r7, #7]
 8028d6e:	2b09      	cmp	r3, #9
 8028d70:	d801      	bhi.n	8028d76 <tos_BatteryVal_Sym_Helper+0x22>
 8028d72:	4b27      	ldr	r3, [pc, #156]	; (8028e10 <tos_BatteryVal_Sym_Helper+0xbc>)
 8028d74:	e045      	b.n	8028e02 <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_SYMBOL_BATTERY_1;
 8028d76:	79fb      	ldrb	r3, [r7, #7]
 8028d78:	2b09      	cmp	r3, #9
 8028d7a:	d904      	bls.n	8028d86 <tos_BatteryVal_Sym_Helper+0x32>
 8028d7c:	79fb      	ldrb	r3, [r7, #7]
 8028d7e:	2b18      	cmp	r3, #24
 8028d80:	d801      	bhi.n	8028d86 <tos_BatteryVal_Sym_Helper+0x32>
 8028d82:	4b24      	ldr	r3, [pc, #144]	; (8028e14 <tos_BatteryVal_Sym_Helper+0xc0>)
 8028d84:	e03d      	b.n	8028e02 <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_SYMBOL_BATTERY_2;
 8028d86:	79fb      	ldrb	r3, [r7, #7]
 8028d88:	2b18      	cmp	r3, #24
 8028d8a:	d904      	bls.n	8028d96 <tos_BatteryVal_Sym_Helper+0x42>
 8028d8c:	79fb      	ldrb	r3, [r7, #7]
 8028d8e:	2b31      	cmp	r3, #49	; 0x31
 8028d90:	d801      	bhi.n	8028d96 <tos_BatteryVal_Sym_Helper+0x42>
 8028d92:	4b21      	ldr	r3, [pc, #132]	; (8028e18 <tos_BatteryVal_Sym_Helper+0xc4>)
 8028d94:	e035      	b.n	8028e02 <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_SYMBOL_BATTERY_3;
 8028d96:	79fb      	ldrb	r3, [r7, #7]
 8028d98:	2b31      	cmp	r3, #49	; 0x31
 8028d9a:	d904      	bls.n	8028da6 <tos_BatteryVal_Sym_Helper+0x52>
 8028d9c:	79fb      	ldrb	r3, [r7, #7]
 8028d9e:	2b4f      	cmp	r3, #79	; 0x4f
 8028da0:	d801      	bhi.n	8028da6 <tos_BatteryVal_Sym_Helper+0x52>
 8028da2:	4b1e      	ldr	r3, [pc, #120]	; (8028e1c <tos_BatteryVal_Sym_Helper+0xc8>)
 8028da4:	e02d      	b.n	8028e02 <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_SYMBOL_BATTERY_FULL;
 8028da6:	79fb      	ldrb	r3, [r7, #7]
 8028da8:	2b4f      	cmp	r3, #79	; 0x4f
 8028daa:	d929      	bls.n	8028e00 <tos_BatteryVal_Sym_Helper+0xac>
 8028dac:	79fb      	ldrb	r3, [r7, #7]
 8028dae:	2b64      	cmp	r3, #100	; 0x64
 8028db0:	d826      	bhi.n	8028e00 <tos_BatteryVal_Sym_Helper+0xac>
 8028db2:	4b1b      	ldr	r3, [pc, #108]	; (8028e20 <tos_BatteryVal_Sym_Helper+0xcc>)
 8028db4:	e025      	b.n	8028e02 <tos_BatteryVal_Sym_Helper+0xae>
	}else{
			if (batteryVal < 10 && batteryVal >= 0) return LV_SYMBOL_BATTERY_EMPTY;
 8028db6:	79fb      	ldrb	r3, [r7, #7]
 8028db8:	2b09      	cmp	r3, #9
 8028dba:	d801      	bhi.n	8028dc0 <tos_BatteryVal_Sym_Helper+0x6c>
 8028dbc:	4b14      	ldr	r3, [pc, #80]	; (8028e10 <tos_BatteryVal_Sym_Helper+0xbc>)
 8028dbe:	e020      	b.n	8028e02 <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_1;
 8028dc0:	79fb      	ldrb	r3, [r7, #7]
 8028dc2:	2b09      	cmp	r3, #9
 8028dc4:	d904      	bls.n	8028dd0 <tos_BatteryVal_Sym_Helper+0x7c>
 8028dc6:	79fb      	ldrb	r3, [r7, #7]
 8028dc8:	2b18      	cmp	r3, #24
 8028dca:	d801      	bhi.n	8028dd0 <tos_BatteryVal_Sym_Helper+0x7c>
 8028dcc:	4b15      	ldr	r3, [pc, #84]	; (8028e24 <tos_BatteryVal_Sym_Helper+0xd0>)
 8028dce:	e018      	b.n	8028e02 <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_2;
 8028dd0:	79fb      	ldrb	r3, [r7, #7]
 8028dd2:	2b18      	cmp	r3, #24
 8028dd4:	d904      	bls.n	8028de0 <tos_BatteryVal_Sym_Helper+0x8c>
 8028dd6:	79fb      	ldrb	r3, [r7, #7]
 8028dd8:	2b31      	cmp	r3, #49	; 0x31
 8028dda:	d801      	bhi.n	8028de0 <tos_BatteryVal_Sym_Helper+0x8c>
 8028ddc:	4b12      	ldr	r3, [pc, #72]	; (8028e28 <tos_BatteryVal_Sym_Helper+0xd4>)
 8028dde:	e010      	b.n	8028e02 <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_3;
 8028de0:	79fb      	ldrb	r3, [r7, #7]
 8028de2:	2b31      	cmp	r3, #49	; 0x31
 8028de4:	d904      	bls.n	8028df0 <tos_BatteryVal_Sym_Helper+0x9c>
 8028de6:	79fb      	ldrb	r3, [r7, #7]
 8028de8:	2b4f      	cmp	r3, #79	; 0x4f
 8028dea:	d801      	bhi.n	8028df0 <tos_BatteryVal_Sym_Helper+0x9c>
 8028dec:	4b0f      	ldr	r3, [pc, #60]	; (8028e2c <tos_BatteryVal_Sym_Helper+0xd8>)
 8028dee:	e008      	b.n	8028e02 <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_FULL;
 8028df0:	79fb      	ldrb	r3, [r7, #7]
 8028df2:	2b4f      	cmp	r3, #79	; 0x4f
 8028df4:	d904      	bls.n	8028e00 <tos_BatteryVal_Sym_Helper+0xac>
 8028df6:	79fb      	ldrb	r3, [r7, #7]
 8028df8:	2b64      	cmp	r3, #100	; 0x64
 8028dfa:	d801      	bhi.n	8028e00 <tos_BatteryVal_Sym_Helper+0xac>
 8028dfc:	4b0c      	ldr	r3, [pc, #48]	; (8028e30 <tos_BatteryVal_Sym_Helper+0xdc>)
 8028dfe:	e000      	b.n	8028e02 <tos_BatteryVal_Sym_Helper+0xae>
			}
		return "err";
 8028e00:	4b0c      	ldr	r3, [pc, #48]	; (8028e34 <tos_BatteryVal_Sym_Helper+0xe0>)
}
 8028e02:	4618      	mov	r0, r3
 8028e04:	370c      	adds	r7, #12
 8028e06:	46bd      	mov	sp, r7
 8028e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028e0c:	4770      	bx	lr
 8028e0e:	bf00      	nop
 8028e10:	0802cff4 	.word	0x0802cff4
 8028e14:	0802cff8 	.word	0x0802cff8
 8028e18:	0802cffc 	.word	0x0802cffc
 8028e1c:	0802d000 	.word	0x0802d000
 8028e20:	0802d004 	.word	0x0802d004
 8028e24:	0802d008 	.word	0x0802d008
 8028e28:	0802d010 	.word	0x0802d010
 8028e2c:	0802d018 	.word	0x0802d018
 8028e30:	0802d020 	.word	0x0802d020
 8028e34:	0802d028 	.word	0x0802d028

08028e38 <tos_BatteryVal_SymColor_Helper>:
lv_color_t tos_BatteryVal_SymColor_Helper(uint8_t batteryVal){
 8028e38:	b480      	push	{r7}
 8028e3a:	b083      	sub	sp, #12
 8028e3c:	af00      	add	r7, sp, #0
 8028e3e:	4602      	mov	r2, r0
 8028e40:	71fa      	strb	r2, [r7, #7]
			if (batteryVal < 10 && batteryVal >= 0) return LV_COLOR_RED;
 8028e42:	79fa      	ldrb	r2, [r7, #7]
 8028e44:	2a09      	cmp	r2, #9
 8028e46:	d808      	bhi.n	8028e5a <tos_BatteryVal_SymColor_Helper+0x22>
 8028e48:	f36f 0302 	bfc	r3, #0, #3
 8028e4c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8028e50:	f36f 230c 	bfc	r3, #8, #5
 8028e54:	f36f 334f 	bfc	r3, #13, #3
 8028e58:	e038      	b.n	8028ecc <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_COLOR_RED;
 8028e5a:	79fa      	ldrb	r2, [r7, #7]
 8028e5c:	2a09      	cmp	r2, #9
 8028e5e:	d90b      	bls.n	8028e78 <tos_BatteryVal_SymColor_Helper+0x40>
 8028e60:	79fa      	ldrb	r2, [r7, #7]
 8028e62:	2a18      	cmp	r2, #24
 8028e64:	d808      	bhi.n	8028e78 <tos_BatteryVal_SymColor_Helper+0x40>
 8028e66:	f36f 0302 	bfc	r3, #0, #3
 8028e6a:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8028e6e:	f36f 230c 	bfc	r3, #8, #5
 8028e72:	f36f 334f 	bfc	r3, #13, #3
 8028e76:	e029      	b.n	8028ecc <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_COLOR_ORANGE;
 8028e78:	79fa      	ldrb	r2, [r7, #7]
 8028e7a:	2a18      	cmp	r2, #24
 8028e7c:	d905      	bls.n	8028e8a <tos_BatteryVal_SymColor_Helper+0x52>
 8028e7e:	79fa      	ldrb	r2, [r7, #7]
 8028e80:	2a31      	cmp	r2, #49	; 0x31
 8028e82:	d802      	bhi.n	8028e8a <tos_BatteryVal_SymColor_Helper+0x52>
 8028e84:	4b14      	ldr	r3, [pc, #80]	; (8028ed8 <tos_BatteryVal_SymColor_Helper+0xa0>)
 8028e86:	881b      	ldrh	r3, [r3, #0]
 8028e88:	e020      	b.n	8028ecc <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_COLOR_ORANGE;
 8028e8a:	79fa      	ldrb	r2, [r7, #7]
 8028e8c:	2a31      	cmp	r2, #49	; 0x31
 8028e8e:	d905      	bls.n	8028e9c <tos_BatteryVal_SymColor_Helper+0x64>
 8028e90:	79fa      	ldrb	r2, [r7, #7]
 8028e92:	2a4f      	cmp	r2, #79	; 0x4f
 8028e94:	d802      	bhi.n	8028e9c <tos_BatteryVal_SymColor_Helper+0x64>
 8028e96:	4b10      	ldr	r3, [pc, #64]	; (8028ed8 <tos_BatteryVal_SymColor_Helper+0xa0>)
 8028e98:	881b      	ldrh	r3, [r3, #0]
 8028e9a:	e017      	b.n	8028ecc <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_COLOR_GREEN;
 8028e9c:	79fa      	ldrb	r2, [r7, #7]
 8028e9e:	2a4f      	cmp	r2, #79	; 0x4f
 8028ea0:	d90c      	bls.n	8028ebc <tos_BatteryVal_SymColor_Helper+0x84>
 8028ea2:	79fa      	ldrb	r2, [r7, #7]
 8028ea4:	2a64      	cmp	r2, #100	; 0x64
 8028ea6:	d809      	bhi.n	8028ebc <tos_BatteryVal_SymColor_Helper+0x84>
 8028ea8:	2204      	movs	r2, #4
 8028eaa:	f362 0302 	bfi	r3, r2, #0, #3
 8028eae:	f36f 03c7 	bfc	r3, #3, #5
 8028eb2:	f36f 230c 	bfc	r3, #8, #5
 8028eb6:	f36f 334f 	bfc	r3, #13, #3
 8028eba:	e007      	b.n	8028ecc <tos_BatteryVal_SymColor_Helper+0x94>

			return LV_COLOR_BLUE;
 8028ebc:	f36f 0302 	bfc	r3, #0, #3
 8028ec0:	f36f 03c7 	bfc	r3, #3, #5
 8028ec4:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 8028ec8:	f36f 334f 	bfc	r3, #13, #3
}
 8028ecc:	4618      	mov	r0, r3
 8028ece:	370c      	adds	r7, #12
 8028ed0:	46bd      	mov	sp, r7
 8028ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ed6:	4770      	bx	lr
 8028ed8:	0802d02c 	.word	0x0802d02c

08028edc <tos_Bluetooth_NotificationItemInit>:
void tos_Bluetooth_FirstConnectGetValues(RTC_HandleTypeDef *hrtc);
void tos_Bluetooth_GetAndPushNotification(void);
void tos_Bluetooth_SetBatteryVal(uint8_t batteryVal);
void tos_Bluetooth_SetStepsVal(uint8_t stepsVal);
void tos_Bluetooth_GetCurrentTime(RTC_HandleTypeDef *hrtc);
void tos_Bluetooth_NotificationItemInit(void){
 8028edc:	b580      	push	{r7, lr}
 8028ede:	af00      	add	r7, sp, #0
	blNotroot=tos_Notification_CreateRoot(blNotroot);
 8028ee0:	4b0a      	ldr	r3, [pc, #40]	; (8028f0c <tos_Bluetooth_NotificationItemInit+0x30>)
 8028ee2:	681b      	ldr	r3, [r3, #0]
 8028ee4:	4618      	mov	r0, r3
 8028ee6:	f000 fcfd 	bl	80298e4 <tos_Notification_CreateRoot>
 8028eea:	4602      	mov	r2, r0
 8028eec:	4b07      	ldr	r3, [pc, #28]	; (8028f0c <tos_Bluetooth_NotificationItemInit+0x30>)
 8028eee:	601a      	str	r2, [r3, #0]
	blNotnode=tos_Notification_SetFirstNode(blNotroot,blNotnode);
 8028ef0:	4b06      	ldr	r3, [pc, #24]	; (8028f0c <tos_Bluetooth_NotificationItemInit+0x30>)
 8028ef2:	681a      	ldr	r2, [r3, #0]
 8028ef4:	4b06      	ldr	r3, [pc, #24]	; (8028f10 <tos_Bluetooth_NotificationItemInit+0x34>)
 8028ef6:	681b      	ldr	r3, [r3, #0]
 8028ef8:	4619      	mov	r1, r3
 8028efa:	4610      	mov	r0, r2
 8028efc:	f000 fd0a 	bl	8029914 <tos_Notification_SetFirstNode>
 8028f00:	4602      	mov	r2, r0
 8028f02:	4b03      	ldr	r3, [pc, #12]	; (8028f10 <tos_Bluetooth_NotificationItemInit+0x34>)
 8028f04:	601a      	str	r2, [r3, #0]
}
 8028f06:	bf00      	nop
 8028f08:	bd80      	pop	{r7, pc}
 8028f0a:	bf00      	nop
 8028f0c:	2001c168 	.word	0x2001c168
 8028f10:	2001c02c 	.word	0x2001c02c

08028f14 <tos_BluetoothReceiverAndTransmitter>:
void tos_BluetoothReceiverAndTransmitter(RTC_HandleTypeDef *hrtc){
 8028f14:	b580      	push	{r7, lr}
 8028f16:	b082      	sub	sp, #8
 8028f18:	af00      	add	r7, sp, #0
 8028f1a:	6078      	str	r0, [r7, #4]
	if(bluetoothEnable){
 8028f1c:	4b06      	ldr	r3, [pc, #24]	; (8028f38 <tos_BluetoothReceiverAndTransmitter+0x24>)
 8028f1e:	781b      	ldrb	r3, [r3, #0]
 8028f20:	2b00      	cmp	r3, #0
 8028f22:	d004      	beq.n	8028f2e <tos_BluetoothReceiverAndTransmitter+0x1a>
		tos_Bluetooth_FirstConnectGetValues(hrtc);
 8028f24:	6878      	ldr	r0, [r7, #4]
 8028f26:	f000 f809 	bl	8028f3c <tos_Bluetooth_FirstConnectGetValues>
		tos_Bluetooth_GetAndPushNotification();
 8028f2a:	f000 f8e9 	bl	8029100 <tos_Bluetooth_GetAndPushNotification>
	//	tos_Bluetooth_SetBatteryVal(BluetoothBatteryVal);
	//	tos_Bluetooth_SetStepsVal(BluetoothStepsVal);
	}
}
 8028f2e:	bf00      	nop
 8028f30:	3708      	adds	r7, #8
 8028f32:	46bd      	mov	sp, r7
 8028f34:	bd80      	pop	{r7, pc}
 8028f36:	bf00      	nop
 8028f38:	2000284c 	.word	0x2000284c

08028f3c <tos_Bluetooth_FirstConnectGetValues>:
/*This function using for first connect get time and date values and set Rtc
 * @param hrtc using for get rtc module*/
void tos_Bluetooth_FirstConnectGetValues(RTC_HandleTypeDef *hrtc){
 8028f3c:	b580      	push	{r7, lr}
 8028f3e:	b084      	sub	sp, #16
 8028f40:	af02      	add	r7, sp, #8
 8028f42:	6078      	str	r0, [r7, #4]
	  isConnected=BLUETOOTH_IS_CONNECT;
 8028f44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8028f48:	485a      	ldr	r0, [pc, #360]	; (80290b4 <tos_Bluetooth_FirstConnectGetValues+0x178>)
 8028f4a:	f7d9 fbdf 	bl	800270c <HAL_GPIO_ReadPin>
 8028f4e:	4603      	mov	r3, r0
 8028f50:	2b00      	cmp	r3, #0
 8028f52:	bf14      	ite	ne
 8028f54:	2301      	movne	r3, #1
 8028f56:	2300      	moveq	r3, #0
 8028f58:	b2da      	uxtb	r2, r3
 8028f5a:	4b57      	ldr	r3, [pc, #348]	; (80290b8 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 8028f5c:	701a      	strb	r2, [r3, #0]
	  if(befConnectVal!=isConnected){
 8028f5e:	4b57      	ldr	r3, [pc, #348]	; (80290bc <tos_Bluetooth_FirstConnectGetValues+0x180>)
 8028f60:	781a      	ldrb	r2, [r3, #0]
 8028f62:	4b55      	ldr	r3, [pc, #340]	; (80290b8 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 8028f64:	781b      	ldrb	r3, [r3, #0]
 8028f66:	429a      	cmp	r2, r3
 8028f68:	f000 80a0 	beq.w	80290ac <tos_Bluetooth_FirstConnectGetValues+0x170>
	  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "connected", 20,50);
 8028f6c:	2332      	movs	r3, #50	; 0x32
 8028f6e:	2214      	movs	r2, #20
 8028f70:	4953      	ldr	r1, [pc, #332]	; (80290c0 <tos_Bluetooth_FirstConnectGetValues+0x184>)
 8028f72:	4854      	ldr	r0, [pc, #336]	; (80290c4 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 8028f74:	f7db fb61 	bl	800463a <HAL_UART_Transmit>
	 if(isConnected){
 8028f78:	4b4f      	ldr	r3, [pc, #316]	; (80290b8 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 8028f7a:	781b      	ldrb	r3, [r3, #0]
 8028f7c:	2b00      	cmp	r3, #0
 8028f7e:	f000 8087 	beq.w	8029090 <tos_Bluetooth_FirstConnectGetValues+0x154>
		  timeTryAgain:
 8028f82:	bf00      	nop
		  if(!isConnected) return;
 8028f84:	4b4c      	ldr	r3, [pc, #304]	; (80290b8 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 8028f86:	781b      	ldrb	r3, [r3, #0]
 8028f88:	f083 0301 	eor.w	r3, r3, #1
 8028f8c:	b2db      	uxtb	r3, r3
 8028f8e:	2b00      	cmp	r3, #0
 8028f90:	f040 8089 	bne.w	80290a6 <tos_Bluetooth_FirstConnectGetValues+0x16a>
		  HAL_UART_Receive(&TOS_BLUETOOTH_PORT, (uint8_t*)rx_buffer, 13, 100);
 8028f94:	2364      	movs	r3, #100	; 0x64
 8028f96:	220d      	movs	r2, #13
 8028f98:	494b      	ldr	r1, [pc, #300]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8028f9a:	484a      	ldr	r0, [pc, #296]	; (80290c4 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 8028f9c:	f7db fbe6 	bl	800476c <HAL_UART_Receive>
		  tmp=&rx_buffer[0];
 8028fa0:	4b4a      	ldr	r3, [pc, #296]	; (80290cc <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8028fa2:	4a49      	ldr	r2, [pc, #292]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8028fa4:	601a      	str	r2, [r3, #0]
		  if(!(rx_buffer[0]=='t' && rx_buffer[1]=='i' && rx_buffer[2]=='m' && rx_buffer[3]=='e'))
 8028fa6:	4b48      	ldr	r3, [pc, #288]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8028fa8:	781b      	ldrb	r3, [r3, #0]
 8028faa:	2b74      	cmp	r3, #116	; 0x74
 8028fac:	d1e9      	bne.n	8028f82 <tos_Bluetooth_FirstConnectGetValues+0x46>
 8028fae:	4b46      	ldr	r3, [pc, #280]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8028fb0:	785b      	ldrb	r3, [r3, #1]
 8028fb2:	2b69      	cmp	r3, #105	; 0x69
 8028fb4:	d1e5      	bne.n	8028f82 <tos_Bluetooth_FirstConnectGetValues+0x46>
 8028fb6:	4b44      	ldr	r3, [pc, #272]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8028fb8:	789b      	ldrb	r3, [r3, #2]
 8028fba:	2b6d      	cmp	r3, #109	; 0x6d
 8028fbc:	d1e1      	bne.n	8028f82 <tos_Bluetooth_FirstConnectGetValues+0x46>
 8028fbe:	4b42      	ldr	r3, [pc, #264]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8028fc0:	78db      	ldrb	r3, [r3, #3]
 8028fc2:	2b65      	cmp	r3, #101	; 0x65
 8028fc4:	d1dd      	bne.n	8028f82 <tos_Bluetooth_FirstConnectGetValues+0x46>
			  goto timeTryAgain;
		  else{
			  sscanf(tmp,"time %2d %2d %2d",&time[0],&time[1],&time[2]);
 8028fc6:	4b41      	ldr	r3, [pc, #260]	; (80290cc <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8028fc8:	6818      	ldr	r0, [r3, #0]
 8028fca:	4b41      	ldr	r3, [pc, #260]	; (80290d0 <tos_Bluetooth_FirstConnectGetValues+0x194>)
 8028fcc:	9300      	str	r3, [sp, #0]
 8028fce:	4b41      	ldr	r3, [pc, #260]	; (80290d4 <tos_Bluetooth_FirstConnectGetValues+0x198>)
 8028fd0:	4a41      	ldr	r2, [pc, #260]	; (80290d8 <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 8028fd2:	4942      	ldr	r1, [pc, #264]	; (80290dc <tos_Bluetooth_FirstConnectGetValues+0x1a0>)
 8028fd4:	f001 fc4a 	bl	802a86c <siscanf>
			  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasSetTime", 20,50);
 8028fd8:	2332      	movs	r3, #50	; 0x32
 8028fda:	2214      	movs	r2, #20
 8028fdc:	4940      	ldr	r1, [pc, #256]	; (80290e0 <tos_Bluetooth_FirstConnectGetValues+0x1a4>)
 8028fde:	4839      	ldr	r0, [pc, #228]	; (80290c4 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 8028fe0:	f7db fb2b 	bl	800463a <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 8028fe4:	4b38      	ldr	r3, [pc, #224]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8028fe6:	4a3f      	ldr	r2, [pc, #252]	; (80290e4 <tos_Bluetooth_FirstConnectGetValues+0x1a8>)
 8028fe8:	8811      	ldrh	r1, [r2, #0]
 8028fea:	7892      	ldrb	r2, [r2, #2]
 8028fec:	8019      	strh	r1, [r3, #0]
 8028fee:	709a      	strb	r2, [r3, #2]
 8028ff0:	e000      	b.n	8028ff4 <tos_Bluetooth_FirstConnectGetValues+0xb8>
		  }
		 dateTryAgain:
 8028ff2:	bf00      	nop
		  if(!isConnected) return;
 8028ff4:	4b30      	ldr	r3, [pc, #192]	; (80290b8 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 8028ff6:	781b      	ldrb	r3, [r3, #0]
 8028ff8:	f083 0301 	eor.w	r3, r3, #1
 8028ffc:	b2db      	uxtb	r3, r3
 8028ffe:	2b00      	cmp	r3, #0
 8029000:	d153      	bne.n	80290aa <tos_Bluetooth_FirstConnectGetValues+0x16e>
		  HAL_UART_Receive(&TOS_BLUETOOTH_PORT, (uint8_t*)rx_buffer, 15, 100);
 8029002:	2364      	movs	r3, #100	; 0x64
 8029004:	220f      	movs	r2, #15
 8029006:	4930      	ldr	r1, [pc, #192]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8029008:	482e      	ldr	r0, [pc, #184]	; (80290c4 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 802900a:	f7db fbaf 	bl	800476c <HAL_UART_Receive>
		  tmp=&rx_buffer[0];
 802900e:	4b2f      	ldr	r3, [pc, #188]	; (80290cc <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8029010:	4a2d      	ldr	r2, [pc, #180]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8029012:	601a      	str	r2, [r3, #0]
		  if(!(rx_buffer[0]=='d' && rx_buffer[1]=='a' && rx_buffer[2]=='t' && rx_buffer[3]=='e'))
 8029014:	4b2c      	ldr	r3, [pc, #176]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8029016:	781b      	ldrb	r3, [r3, #0]
 8029018:	2b64      	cmp	r3, #100	; 0x64
 802901a:	d1ea      	bne.n	8028ff2 <tos_Bluetooth_FirstConnectGetValues+0xb6>
 802901c:	4b2a      	ldr	r3, [pc, #168]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 802901e:	785b      	ldrb	r3, [r3, #1]
 8029020:	2b61      	cmp	r3, #97	; 0x61
 8029022:	d1e6      	bne.n	8028ff2 <tos_Bluetooth_FirstConnectGetValues+0xb6>
 8029024:	4b28      	ldr	r3, [pc, #160]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8029026:	789b      	ldrb	r3, [r3, #2]
 8029028:	2b74      	cmp	r3, #116	; 0x74
 802902a:	d1e2      	bne.n	8028ff2 <tos_Bluetooth_FirstConnectGetValues+0xb6>
 802902c:	4b26      	ldr	r3, [pc, #152]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 802902e:	78db      	ldrb	r3, [r3, #3]
 8029030:	2b65      	cmp	r3, #101	; 0x65
 8029032:	d1de      	bne.n	8028ff2 <tos_Bluetooth_FirstConnectGetValues+0xb6>
			  goto dateTryAgain;
		  else{
			  sscanf(tmp,"date %2d %2d %2d",
 8029034:	4b25      	ldr	r3, [pc, #148]	; (80290cc <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8029036:	6818      	ldr	r0, [r3, #0]
 8029038:	4b2b      	ldr	r3, [pc, #172]	; (80290e8 <tos_Bluetooth_FirstConnectGetValues+0x1ac>)
 802903a:	9300      	str	r3, [sp, #0]
 802903c:	4b2b      	ldr	r3, [pc, #172]	; (80290ec <tos_Bluetooth_FirstConnectGetValues+0x1b0>)
 802903e:	4a2c      	ldr	r2, [pc, #176]	; (80290f0 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 8029040:	492c      	ldr	r1, [pc, #176]	; (80290f4 <tos_Bluetooth_FirstConnectGetValues+0x1b8>)
 8029042:	f001 fc13 	bl	802a86c <siscanf>
			  					  &date[0],&date[1],&date[2]);
			  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasSetDate", 20,50);
 8029046:	2332      	movs	r3, #50	; 0x32
 8029048:	2214      	movs	r2, #20
 802904a:	492b      	ldr	r1, [pc, #172]	; (80290f8 <tos_Bluetooth_FirstConnectGetValues+0x1bc>)
 802904c:	481d      	ldr	r0, [pc, #116]	; (80290c4 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 802904e:	f7db faf4 	bl	800463a <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 8029052:	4b1d      	ldr	r3, [pc, #116]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8029054:	4a23      	ldr	r2, [pc, #140]	; (80290e4 <tos_Bluetooth_FirstConnectGetValues+0x1a8>)
 8029056:	8811      	ldrh	r1, [r2, #0]
 8029058:	7892      	ldrb	r2, [r2, #2]
 802905a:	8019      	strh	r1, [r3, #0]
 802905c:	709a      	strb	r2, [r3, #2]
		  }
		  tos_RTC_SetDate(hrtc,date[0],date[1],date[2]);
 802905e:	4b24      	ldr	r3, [pc, #144]	; (80290f0 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 8029060:	881b      	ldrh	r3, [r3, #0]
 8029062:	b2d9      	uxtb	r1, r3
 8029064:	4b22      	ldr	r3, [pc, #136]	; (80290f0 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 8029066:	885b      	ldrh	r3, [r3, #2]
 8029068:	b2da      	uxtb	r2, r3
 802906a:	4b21      	ldr	r3, [pc, #132]	; (80290f0 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 802906c:	889b      	ldrh	r3, [r3, #4]
 802906e:	b2db      	uxtb	r3, r3
 8029070:	6878      	ldr	r0, [r7, #4]
 8029072:	f000 fdb5 	bl	8029be0 <tos_RTC_SetDate>
		  tos_RTC_SetTime(hrtc,time[0],time[1],time[2]);
 8029076:	4b18      	ldr	r3, [pc, #96]	; (80290d8 <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 8029078:	881b      	ldrh	r3, [r3, #0]
 802907a:	b2d9      	uxtb	r1, r3
 802907c:	4b16      	ldr	r3, [pc, #88]	; (80290d8 <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 802907e:	885b      	ldrh	r3, [r3, #2]
 8029080:	b2da      	uxtb	r2, r3
 8029082:	4b15      	ldr	r3, [pc, #84]	; (80290d8 <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 8029084:	889b      	ldrh	r3, [r3, #4]
 8029086:	b2db      	uxtb	r3, r3
 8029088:	6878      	ldr	r0, [r7, #4]
 802908a:	f000 fd87 	bl	8029b9c <tos_RTC_SetTime>
 802908e:	e005      	b.n	802909c <tos_Bluetooth_FirstConnectGetValues+0x160>
	  }else{
		  tmp=&rx_buffer[0];
 8029090:	4b0e      	ldr	r3, [pc, #56]	; (80290cc <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8029092:	4a0d      	ldr	r2, [pc, #52]	; (80290c8 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8029094:	601a      	str	r2, [r3, #0]
		  tmp ="notConnected";
 8029096:	4b0d      	ldr	r3, [pc, #52]	; (80290cc <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8029098:	4a18      	ldr	r2, [pc, #96]	; (80290fc <tos_Bluetooth_FirstConnectGetValues+0x1c0>)
 802909a:	601a      	str	r2, [r3, #0]
	  }
	  befConnectVal=isConnected;
 802909c:	4b06      	ldr	r3, [pc, #24]	; (80290b8 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 802909e:	781a      	ldrb	r2, [r3, #0]
 80290a0:	4b06      	ldr	r3, [pc, #24]	; (80290bc <tos_Bluetooth_FirstConnectGetValues+0x180>)
 80290a2:	701a      	strb	r2, [r3, #0]
 80290a4:	e002      	b.n	80290ac <tos_Bluetooth_FirstConnectGetValues+0x170>
		  if(!isConnected) return;
 80290a6:	bf00      	nop
 80290a8:	e000      	b.n	80290ac <tos_Bluetooth_FirstConnectGetValues+0x170>
		  if(!isConnected) return;
 80290aa:	bf00      	nop
	  }
}
 80290ac:	3708      	adds	r7, #8
 80290ae:	46bd      	mov	sp, r7
 80290b0:	bd80      	pop	{r7, pc}
 80290b2:	bf00      	nop
 80290b4:	40020800 	.word	0x40020800
 80290b8:	2001c044 	.word	0x2001c044
 80290bc:	2001c16c 	.word	0x2001c16c
 80290c0:	0802d030 	.word	0x0802d030
 80290c4:	2001b670 	.word	0x2001b670
 80290c8:	2001c048 	.word	0x2001c048
 80290cc:	2001bf58 	.word	0x2001bf58
 80290d0:	2001c15c 	.word	0x2001c15c
 80290d4:	2001c15a 	.word	0x2001c15a
 80290d8:	2001c158 	.word	0x2001c158
 80290dc:	0802d03c 	.word	0x0802d03c
 80290e0:	0802d050 	.word	0x0802d050
 80290e4:	0802d05c 	.word	0x0802d05c
 80290e8:	2001c164 	.word	0x2001c164
 80290ec:	2001c162 	.word	0x2001c162
 80290f0:	2001c160 	.word	0x2001c160
 80290f4:	0802d060 	.word	0x0802d060
 80290f8:	0802d074 	.word	0x0802d074
 80290fc:	0802d080 	.word	0x0802d080

08029100 <tos_Bluetooth_GetAndPushNotification>:
void tos_Bluetooth_GetTimeAndDate(void){

}

/*This function using for get notifications and push notification list*/
void tos_Bluetooth_GetAndPushNotification(void){
 8029100:	b580      	push	{r7, lr}
 8029102:	af00      	add	r7, sp, #0
	if(isConnected){
 8029104:	4b25      	ldr	r3, [pc, #148]	; (802919c <tos_Bluetooth_GetAndPushNotification+0x9c>)
 8029106:	781b      	ldrb	r3, [r3, #0]
 8029108:	2b00      	cmp	r3, #0
 802910a:	d045      	beq.n	8029198 <tos_Bluetooth_GetAndPushNotification+0x98>
		  HAL_UART_Receive(&TOS_BLUETOOTH_PORT, (uint8_t*)rx_buffer, 250, 100);
 802910c:	2364      	movs	r3, #100	; 0x64
 802910e:	22fa      	movs	r2, #250	; 0xfa
 8029110:	4923      	ldr	r1, [pc, #140]	; (80291a0 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 8029112:	4824      	ldr	r0, [pc, #144]	; (80291a4 <tos_Bluetooth_GetAndPushNotification+0xa4>)
 8029114:	f7db fb2a 	bl	800476c <HAL_UART_Receive>
		  if(rx_buffer[0]=='n' && rx_buffer[1]=='o' && rx_buffer[2]=='t' && rx_buffer[3]=='f'){
 8029118:	4b21      	ldr	r3, [pc, #132]	; (80291a0 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 802911a:	781b      	ldrb	r3, [r3, #0]
 802911c:	2b6e      	cmp	r3, #110	; 0x6e
 802911e:	d13b      	bne.n	8029198 <tos_Bluetooth_GetAndPushNotification+0x98>
 8029120:	4b1f      	ldr	r3, [pc, #124]	; (80291a0 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 8029122:	785b      	ldrb	r3, [r3, #1]
 8029124:	2b6f      	cmp	r3, #111	; 0x6f
 8029126:	d137      	bne.n	8029198 <tos_Bluetooth_GetAndPushNotification+0x98>
 8029128:	4b1d      	ldr	r3, [pc, #116]	; (80291a0 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 802912a:	789b      	ldrb	r3, [r3, #2]
 802912c:	2b74      	cmp	r3, #116	; 0x74
 802912e:	d133      	bne.n	8029198 <tos_Bluetooth_GetAndPushNotification+0x98>
 8029130:	4b1b      	ldr	r3, [pc, #108]	; (80291a0 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 8029132:	78db      	ldrb	r3, [r3, #3]
 8029134:	2b66      	cmp	r3, #102	; 0x66
 8029136:	d12f      	bne.n	8029198 <tos_Bluetooth_GetAndPushNotification+0x98>
			  tmp=&rx_buffer[0];
 8029138:	4b1b      	ldr	r3, [pc, #108]	; (80291a8 <tos_Bluetooth_GetAndPushNotification+0xa8>)
 802913a:	4a19      	ldr	r2, [pc, #100]	; (80291a0 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 802913c:	601a      	str	r2, [r3, #0]
			  sscanf(tmp,"notf: appName %s appNotf %s",BluetoothAppName,BluetoothNotf);
 802913e:	4b1a      	ldr	r3, [pc, #104]	; (80291a8 <tos_Bluetooth_GetAndPushNotification+0xa8>)
 8029140:	6818      	ldr	r0, [r3, #0]
 8029142:	4b1a      	ldr	r3, [pc, #104]	; (80291ac <tos_Bluetooth_GetAndPushNotification+0xac>)
 8029144:	4a1a      	ldr	r2, [pc, #104]	; (80291b0 <tos_Bluetooth_GetAndPushNotification+0xb0>)
 8029146:	491b      	ldr	r1, [pc, #108]	; (80291b4 <tos_Bluetooth_GetAndPushNotification+0xb4>)
 8029148:	f001 fb90 	bl	802a86c <siscanf>
			  BluetoothAppNameP=&BluetoothAppName[0];
 802914c:	4b1a      	ldr	r3, [pc, #104]	; (80291b8 <tos_Bluetooth_GetAndPushNotification+0xb8>)
 802914e:	4a18      	ldr	r2, [pc, #96]	; (80291b0 <tos_Bluetooth_GetAndPushNotification+0xb0>)
 8029150:	601a      	str	r2, [r3, #0]
			  BluetoothNotfP=&BluetoothNotf[0];
 8029152:	4b1a      	ldr	r3, [pc, #104]	; (80291bc <tos_Bluetooth_GetAndPushNotification+0xbc>)
 8029154:	4a15      	ldr	r2, [pc, #84]	; (80291ac <tos_Bluetooth_GetAndPushNotification+0xac>)
 8029156:	601a      	str	r2, [r3, #0]
			  if(BluetoothAppNameP!=NULL && BluetoothNotfP!=NULL)
 8029158:	4b17      	ldr	r3, [pc, #92]	; (80291b8 <tos_Bluetooth_GetAndPushNotification+0xb8>)
 802915a:	681b      	ldr	r3, [r3, #0]
 802915c:	2b00      	cmp	r3, #0
 802915e:	d00f      	beq.n	8029180 <tos_Bluetooth_GetAndPushNotification+0x80>
 8029160:	4b16      	ldr	r3, [pc, #88]	; (80291bc <tos_Bluetooth_GetAndPushNotification+0xbc>)
 8029162:	681b      	ldr	r3, [r3, #0]
 8029164:	2b00      	cmp	r3, #0
 8029166:	d00b      	beq.n	8029180 <tos_Bluetooth_GetAndPushNotification+0x80>
			  blNotnode=tos_NotificationPushItem(blNotnode,BluetoothAppNameP,BluetoothNotfP);
 8029168:	4b15      	ldr	r3, [pc, #84]	; (80291c0 <tos_Bluetooth_GetAndPushNotification+0xc0>)
 802916a:	6818      	ldr	r0, [r3, #0]
 802916c:	4b12      	ldr	r3, [pc, #72]	; (80291b8 <tos_Bluetooth_GetAndPushNotification+0xb8>)
 802916e:	6819      	ldr	r1, [r3, #0]
 8029170:	4b12      	ldr	r3, [pc, #72]	; (80291bc <tos_Bluetooth_GetAndPushNotification+0xbc>)
 8029172:	681b      	ldr	r3, [r3, #0]
 8029174:	461a      	mov	r2, r3
 8029176:	f000 fc4d 	bl	8029a14 <tos_NotificationPushItem>
 802917a:	4602      	mov	r2, r0
 802917c:	4b10      	ldr	r3, [pc, #64]	; (80291c0 <tos_Bluetooth_GetAndPushNotification+0xc0>)
 802917e:	601a      	str	r2, [r3, #0]
			  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasPushNotf", 20,50);
 8029180:	2332      	movs	r3, #50	; 0x32
 8029182:	2214      	movs	r2, #20
 8029184:	490f      	ldr	r1, [pc, #60]	; (80291c4 <tos_Bluetooth_GetAndPushNotification+0xc4>)
 8029186:	4807      	ldr	r0, [pc, #28]	; (80291a4 <tos_Bluetooth_GetAndPushNotification+0xa4>)
 8029188:	f7db fa57 	bl	800463a <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 802918c:	4b04      	ldr	r3, [pc, #16]	; (80291a0 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 802918e:	4a0e      	ldr	r2, [pc, #56]	; (80291c8 <tos_Bluetooth_GetAndPushNotification+0xc8>)
 8029190:	8811      	ldrh	r1, [r2, #0]
 8029192:	7892      	ldrb	r2, [r2, #2]
 8029194:	8019      	strh	r1, [r3, #0]
 8029196:	709a      	strb	r2, [r3, #2]
		  }
	}

}
 8029198:	bf00      	nop
 802919a:	bd80      	pop	{r7, pc}
 802919c:	2001c044 	.word	0x2001c044
 80291a0:	2001c048 	.word	0x2001c048
 80291a4:	2001b670 	.word	0x2001b670
 80291a8:	2001bf58 	.word	0x2001bf58
 80291ac:	2001bf5c 	.word	0x2001bf5c
 80291b0:	2001c030 	.word	0x2001c030
 80291b4:	0802d090 	.word	0x0802d090
 80291b8:	2001c024 	.word	0x2001c024
 80291bc:	2001c170 	.word	0x2001c170
 80291c0:	2001c02c 	.word	0x2001c02c
 80291c4:	0802d0ac 	.word	0x0802d0ac
 80291c8:	0802d05c 	.word	0x0802d05c

080291cc <tos_BluetoothGetStatusVAl>:
	if(isConnected){
		  sprintf(tx_buffer, "stepsVal %d",stepsVal);
		    HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, tx_buffer, 20,50);
		  }
}
void tos_BluetoothGetStatusVAl(bool bluetoothStatus,uint8_t Screen){
 80291cc:	b580      	push	{r7, lr}
 80291ce:	b084      	sub	sp, #16
 80291d0:	af00      	add	r7, sp, #0
 80291d2:	4603      	mov	r3, r0
 80291d4:	460a      	mov	r2, r1
 80291d6:	71fb      	strb	r3, [r7, #7]
 80291d8:	4613      	mov	r3, r2
 80291da:	71bb      	strb	r3, [r7, #6]
	if(bluetoothStatus){
 80291dc:	79fb      	ldrb	r3, [r7, #7]
 80291de:	2b00      	cmp	r3, #0
 80291e0:	d018      	beq.n	8029214 <tos_BluetoothGetStatusVAl+0x48>
			lv_color_t bluetoothClr = tos_BluetoothStatus_SymColor_Helper(isConnected);
 80291e2:	4b19      	ldr	r3, [pc, #100]	; (8029248 <tos_BluetoothGetStatusVAl+0x7c>)
 80291e4:	781b      	ldrb	r3, [r3, #0]
 80291e6:	4618      	mov	r0, r3
 80291e8:	f000 f832 	bl	8029250 <tos_BluetoothStatus_SymColor_Helper>
 80291ec:	4603      	mov	r3, r0
 80291ee:	81bb      	strh	r3, [r7, #12]
			switch(Screen){
 80291f0:	79bb      	ldrb	r3, [r7, #6]
 80291f2:	2b00      	cmp	r3, #0
 80291f4:	d002      	beq.n	80291fc <tos_BluetoothGetStatusVAl+0x30>
 80291f6:	2b01      	cmp	r3, #1
 80291f8:	d006      	beq.n	8029208 <tos_BluetoothGetStatusVAl+0x3c>
				case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
				case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
				default: return;
 80291fa:	e021      	b.n	8029240 <tos_BluetoothGetStatusVAl+0x74>
				case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
 80291fc:	79fb      	ldrb	r3, [r7, #7]
 80291fe:	89b9      	ldrh	r1, [r7, #12]
 8029200:	4618      	mov	r0, r3
 8029202:	f7fa fe73 	bl	8023eec <MainScreen_SetBluetoothStatusVal>
 8029206:	e01b      	b.n	8029240 <tos_BluetoothGetStatusVAl+0x74>
				case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
 8029208:	79fb      	ldrb	r3, [r7, #7]
 802920a:	89b9      	ldrh	r1, [r7, #12]
 802920c:	4618      	mov	r0, r3
 802920e:	f7fe fce9 	bl	8027be4 <SleepModeScreen_SetBluetoothStatusVal>
 8029212:	e015      	b.n	8029240 <tos_BluetoothGetStatusVAl+0x74>
				}
	}else switch(Screen){
 8029214:	79bb      	ldrb	r3, [r7, #6]
 8029216:	2b00      	cmp	r3, #0
 8029218:	d002      	beq.n	8029220 <tos_BluetoothGetStatusVAl+0x54>
 802921a:	2b01      	cmp	r3, #1
 802921c:	d008      	beq.n	8029230 <tos_BluetoothGetStatusVAl+0x64>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
	default: return;
 802921e:	e00f      	b.n	8029240 <tos_BluetoothGetStatusVAl+0x74>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
 8029220:	4b0a      	ldr	r3, [pc, #40]	; (802924c <tos_BluetoothGetStatusVAl+0x80>)
 8029222:	881a      	ldrh	r2, [r3, #0]
 8029224:	79fb      	ldrb	r3, [r7, #7]
 8029226:	4611      	mov	r1, r2
 8029228:	4618      	mov	r0, r3
 802922a:	f7fa fe5f 	bl	8023eec <MainScreen_SetBluetoothStatusVal>
 802922e:	e007      	b.n	8029240 <tos_BluetoothGetStatusVAl+0x74>
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
 8029230:	4b06      	ldr	r3, [pc, #24]	; (802924c <tos_BluetoothGetStatusVAl+0x80>)
 8029232:	881a      	ldrh	r2, [r3, #0]
 8029234:	79fb      	ldrb	r3, [r7, #7]
 8029236:	4611      	mov	r1, r2
 8029238:	4618      	mov	r0, r3
 802923a:	f7fe fcd3 	bl	8027be4 <SleepModeScreen_SetBluetoothStatusVal>
 802923e:	bf00      	nop
	}
}
 8029240:	3710      	adds	r7, #16
 8029242:	46bd      	mov	sp, r7
 8029244:	bd80      	pop	{r7, pc}
 8029246:	bf00      	nop
 8029248:	2001c044 	.word	0x2001c044
 802924c:	0802d0d4 	.word	0x0802d0d4

08029250 <tos_BluetoothStatus_SymColor_Helper>:
lv_color_t tos_BluetoothStatus_SymColor_Helper(bool bluetoothConnected){
 8029250:	b480      	push	{r7}
 8029252:	b083      	sub	sp, #12
 8029254:	af00      	add	r7, sp, #0
 8029256:	4602      	mov	r2, r0
 8029258:	71fa      	strb	r2, [r7, #7]
			if (bluetoothConnected) return LV_COLOR_BLUE;
 802925a:	79fa      	ldrb	r2, [r7, #7]
 802925c:	2a00      	cmp	r2, #0
 802925e:	d008      	beq.n	8029272 <tos_BluetoothStatus_SymColor_Helper+0x22>
 8029260:	f36f 0302 	bfc	r3, #0, #3
 8029264:	f36f 03c7 	bfc	r3, #3, #5
 8029268:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 802926c:	f36f 334f 	bfc	r3, #13, #3
 8029270:	e001      	b.n	8029276 <tos_BluetoothStatus_SymColor_Helper+0x26>
			else return LV_COLOR_GRAY;
 8029272:	4b04      	ldr	r3, [pc, #16]	; (8029284 <tos_BluetoothStatus_SymColor_Helper+0x34>)
 8029274:	881b      	ldrh	r3, [r3, #0]
}
 8029276:	4618      	mov	r0, r3
 8029278:	370c      	adds	r7, #12
 802927a:	46bd      	mov	sp, r7
 802927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029280:	4770      	bx	lr
 8029282:	bf00      	nop
 8029284:	0802d0d8 	.word	0x0802d0d8

08029288 <tos_BluetoothGetEnableVal>:
void tos_BluetoothEnableController(void){
	//Bluetooth u aktif ve pasif edecek pin belirlenecek burası ona gore duzenlenecek.
	//Modul uzerinde regulator oldugu icin sonraya kaldı

}
bool tos_BluetoothGetEnableVal(void){
 8029288:	b480      	push	{r7}
 802928a:	af00      	add	r7, sp, #0
	return bluetoothEnable;
 802928c:	4b03      	ldr	r3, [pc, #12]	; (802929c <tos_BluetoothGetEnableVal+0x14>)
 802928e:	781b      	ldrb	r3, [r3, #0]
}
 8029290:	4618      	mov	r0, r3
 8029292:	46bd      	mov	sp, r7
 8029294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029298:	4770      	bx	lr
 802929a:	bf00      	nop
 802929c:	2000284c 	.word	0x2000284c

080292a0 <tos_BluetoothSetStepsVal>:
	BluetoothBatteryVal=batteryVal;
}
uint16_t tos_BluetoothGetStepsVal(void){
	return BluetoothStepsVal;
}
void tos_BluetoothSetStepsVal(uint8_t steps,bool unitType){
 80292a0:	b480      	push	{r7}
 80292a2:	b083      	sub	sp, #12
 80292a4:	af00      	add	r7, sp, #0
 80292a6:	4603      	mov	r3, r0
 80292a8:	460a      	mov	r2, r1
 80292aa:	71fb      	strb	r3, [r7, #7]
 80292ac:	4613      	mov	r3, r2
 80292ae:	71bb      	strb	r3, [r7, #6]
	BluetoothStepsVal=steps;
 80292b0:	79fb      	ldrb	r3, [r7, #7]
 80292b2:	b29a      	uxth	r2, r3
 80292b4:	4b05      	ldr	r3, [pc, #20]	; (80292cc <tos_BluetoothSetStepsVal+0x2c>)
 80292b6:	801a      	strh	r2, [r3, #0]
	BluetoothUnitType=unitType;
 80292b8:	4a05      	ldr	r2, [pc, #20]	; (80292d0 <tos_BluetoothSetStepsVal+0x30>)
 80292ba:	79bb      	ldrb	r3, [r7, #6]
 80292bc:	7013      	strb	r3, [r2, #0]
}
 80292be:	bf00      	nop
 80292c0:	370c      	adds	r7, #12
 80292c2:	46bd      	mov	sp, r7
 80292c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292c8:	4770      	bx	lr
 80292ca:	bf00      	nop
 80292cc:	2001c176 	.word	0x2001c176
 80292d0:	2001c028 	.word	0x2001c028

080292d4 <tos_RightButton_Listenner_For_MenuControl>:
 *      Author: neset
 */

#include "tos_Button_Helper.h"
static uint16_t enterbtncounter=0,rightbtncounter=0,leftbtncounter=0;
uint8_t tos_RightButton_Listenner_For_MenuControl(void) {
 80292d4:	b580      	push	{r7, lr}
 80292d6:	af00      	add	r7, sp, #0
	if(READ_RIGHT_BTN){
 80292d8:	2140      	movs	r1, #64	; 0x40
 80292da:	4810      	ldr	r0, [pc, #64]	; (802931c <tos_RightButton_Listenner_For_MenuControl+0x48>)
 80292dc:	f7d9 fa16 	bl	800270c <HAL_GPIO_ReadPin>
 80292e0:	4603      	mov	r3, r0
 80292e2:	2b00      	cmp	r3, #0
 80292e4:	d016      	beq.n	8029314 <tos_RightButton_Listenner_For_MenuControl+0x40>
		if(rightbtncounter>=BTN_LONG_PRESS_TIME){ rightbtncounter=0;return 2;}
 80292e6:	4b0e      	ldr	r3, [pc, #56]	; (8029320 <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 80292e8:	881b      	ldrh	r3, [r3, #0]
 80292ea:	f240 2225 	movw	r2, #549	; 0x225
 80292ee:	4293      	cmp	r3, r2
 80292f0:	d904      	bls.n	80292fc <tos_RightButton_Listenner_For_MenuControl+0x28>
 80292f2:	4b0b      	ldr	r3, [pc, #44]	; (8029320 <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 80292f4:	2200      	movs	r2, #0
 80292f6:	801a      	strh	r2, [r3, #0]
 80292f8:	2302      	movs	r3, #2
 80292fa:	e00c      	b.n	8029316 <tos_RightButton_Listenner_For_MenuControl+0x42>
		if(rightbtncounter>=BTN_SHORT_PRESS_TIME){ rightbtncounter=0;return 1;}
 80292fc:	4b08      	ldr	r3, [pc, #32]	; (8029320 <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 80292fe:	881b      	ldrh	r3, [r3, #0]
 8029300:	2b04      	cmp	r3, #4
 8029302:	d904      	bls.n	802930e <tos_RightButton_Listenner_For_MenuControl+0x3a>
 8029304:	4b06      	ldr	r3, [pc, #24]	; (8029320 <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 8029306:	2200      	movs	r2, #0
 8029308:	801a      	strh	r2, [r3, #0]
 802930a:	2301      	movs	r3, #1
 802930c:	e003      	b.n	8029316 <tos_RightButton_Listenner_For_MenuControl+0x42>
		 rightbtncounter=0;
 802930e:	4b04      	ldr	r3, [pc, #16]	; (8029320 <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 8029310:	2200      	movs	r2, #0
 8029312:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8029314:	2300      	movs	r3, #0
}
 8029316:	4618      	mov	r0, r3
 8029318:	bd80      	pop	{r7, pc}
 802931a:	bf00      	nop
 802931c:	40021000 	.word	0x40021000
 8029320:	2001b5a0 	.word	0x2001b5a0

08029324 <tos_LeftButton_Listenner_For_MenuControl>:
uint8_t tos_LeftButton_Listenner_For_MenuControl(void) {
 8029324:	b580      	push	{r7, lr}
 8029326:	af00      	add	r7, sp, #0

			if(READ_LEFT_BTN){
 8029328:	2110      	movs	r1, #16
 802932a:	4810      	ldr	r0, [pc, #64]	; (802936c <tos_LeftButton_Listenner_For_MenuControl+0x48>)
 802932c:	f7d9 f9ee 	bl	800270c <HAL_GPIO_ReadPin>
 8029330:	4603      	mov	r3, r0
 8029332:	2b00      	cmp	r3, #0
 8029334:	d016      	beq.n	8029364 <tos_LeftButton_Listenner_For_MenuControl+0x40>
				if(leftbtncounter>=BTN_LONG_PRESS_TIME){ leftbtncounter=0;return 2;}
 8029336:	4b0e      	ldr	r3, [pc, #56]	; (8029370 <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 8029338:	881b      	ldrh	r3, [r3, #0]
 802933a:	f240 2225 	movw	r2, #549	; 0x225
 802933e:	4293      	cmp	r3, r2
 8029340:	d904      	bls.n	802934c <tos_LeftButton_Listenner_For_MenuControl+0x28>
 8029342:	4b0b      	ldr	r3, [pc, #44]	; (8029370 <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 8029344:	2200      	movs	r2, #0
 8029346:	801a      	strh	r2, [r3, #0]
 8029348:	2302      	movs	r3, #2
 802934a:	e00c      	b.n	8029366 <tos_LeftButton_Listenner_For_MenuControl+0x42>
				if(leftbtncounter>=BTN_SHORT_PRESS_TIME){ leftbtncounter=0;return 1;}
 802934c:	4b08      	ldr	r3, [pc, #32]	; (8029370 <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 802934e:	881b      	ldrh	r3, [r3, #0]
 8029350:	2b04      	cmp	r3, #4
 8029352:	d904      	bls.n	802935e <tos_LeftButton_Listenner_For_MenuControl+0x3a>
 8029354:	4b06      	ldr	r3, [pc, #24]	; (8029370 <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 8029356:	2200      	movs	r2, #0
 8029358:	801a      	strh	r2, [r3, #0]
 802935a:	2301      	movs	r3, #1
 802935c:	e003      	b.n	8029366 <tos_LeftButton_Listenner_For_MenuControl+0x42>
				 leftbtncounter=0;
 802935e:	4b04      	ldr	r3, [pc, #16]	; (8029370 <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 8029360:	2200      	movs	r2, #0
 8029362:	801a      	strh	r2, [r3, #0]
			}
			return 0;
 8029364:	2300      	movs	r3, #0
}
 8029366:	4618      	mov	r0, r3
 8029368:	bd80      	pop	{r7, pc}
 802936a:	bf00      	nop
 802936c:	40021000 	.word	0x40021000
 8029370:	2001b5a2 	.word	0x2001b5a2

08029374 <tos_EnterButton_Listenner_For_MenuControl>:

uint8_t tos_EnterButton_Listenner_For_MenuControl(void) {
 8029374:	b580      	push	{r7, lr}
 8029376:	af00      	add	r7, sp, #0
			if(READ_ENTER_BTN){
 8029378:	2120      	movs	r1, #32
 802937a:	4810      	ldr	r0, [pc, #64]	; (80293bc <tos_EnterButton_Listenner_For_MenuControl+0x48>)
 802937c:	f7d9 f9c6 	bl	800270c <HAL_GPIO_ReadPin>
 8029380:	4603      	mov	r3, r0
 8029382:	2b00      	cmp	r3, #0
 8029384:	d016      	beq.n	80293b4 <tos_EnterButton_Listenner_For_MenuControl+0x40>
				if(enterbtncounter>=BTN_LONG_PRESS_TIME){ enterbtncounter=0;return 2;}
 8029386:	4b0e      	ldr	r3, [pc, #56]	; (80293c0 <tos_EnterButton_Listenner_For_MenuControl+0x4c>)
 8029388:	881b      	ldrh	r3, [r3, #0]
 802938a:	f240 2225 	movw	r2, #549	; 0x225
 802938e:	4293      	cmp	r3, r2
 8029390:	d904      	bls.n	802939c <tos_EnterButton_Listenner_For_MenuControl+0x28>
 8029392:	4b0b      	ldr	r3, [pc, #44]	; (80293c0 <tos_EnterButton_Listenner_For_MenuControl+0x4c>)
 8029394:	2200      	movs	r2, #0
 8029396:	801a      	strh	r2, [r3, #0]
 8029398:	2302      	movs	r3, #2
 802939a:	e00c      	b.n	80293b6 <tos_EnterButton_Listenner_For_MenuControl+0x42>
				if(enterbtncounter>=BTN_SHORT_PRESS_TIME){ enterbtncounter=0;return 1;}
 802939c:	4b08      	ldr	r3, [pc, #32]	; (80293c0 <tos_EnterButton_Listenner_For_MenuControl+0x4c>)
 802939e:	881b      	ldrh	r3, [r3, #0]
 80293a0:	2b04      	cmp	r3, #4
 80293a2:	d904      	bls.n	80293ae <tos_EnterButton_Listenner_For_MenuControl+0x3a>
 80293a4:	4b06      	ldr	r3, [pc, #24]	; (80293c0 <tos_EnterButton_Listenner_For_MenuControl+0x4c>)
 80293a6:	2200      	movs	r2, #0
 80293a8:	801a      	strh	r2, [r3, #0]
 80293aa:	2301      	movs	r3, #1
 80293ac:	e003      	b.n	80293b6 <tos_EnterButton_Listenner_For_MenuControl+0x42>
				 enterbtncounter=0;
 80293ae:	4b04      	ldr	r3, [pc, #16]	; (80293c0 <tos_EnterButton_Listenner_For_MenuControl+0x4c>)
 80293b0:	2200      	movs	r2, #0
 80293b2:	801a      	strh	r2, [r3, #0]
			}
			return 0;
 80293b4:	2300      	movs	r3, #0
}
 80293b6:	4618      	mov	r0, r3
 80293b8:	bd80      	pop	{r7, pc}
 80293ba:	bf00      	nop
 80293bc:	40021000 	.word	0x40021000
 80293c0:	2001b59e 	.word	0x2001b59e

080293c4 <tos_ButtonCounterIncrease>:
void tos_ButtonCounterIncrease(void){
 80293c4:	b580      	push	{r7, lr}
 80293c6:	af00      	add	r7, sp, #0
	if(!READ_ENTER_BTN)enterbtncounter++;
 80293c8:	2120      	movs	r1, #32
 80293ca:	4815      	ldr	r0, [pc, #84]	; (8029420 <tos_ButtonCounterIncrease+0x5c>)
 80293cc:	f7d9 f99e 	bl	800270c <HAL_GPIO_ReadPin>
 80293d0:	4603      	mov	r3, r0
 80293d2:	2b00      	cmp	r3, #0
 80293d4:	d106      	bne.n	80293e4 <tos_ButtonCounterIncrease+0x20>
 80293d6:	4b13      	ldr	r3, [pc, #76]	; (8029424 <tos_ButtonCounterIncrease+0x60>)
 80293d8:	881b      	ldrh	r3, [r3, #0]
 80293da:	3301      	adds	r3, #1
 80293dc:	b29a      	uxth	r2, r3
 80293de:	4b11      	ldr	r3, [pc, #68]	; (8029424 <tos_ButtonCounterIncrease+0x60>)
 80293e0:	801a      	strh	r2, [r3, #0]
	else if(!READ_LEFT_BTN)leftbtncounter++;
	else if(!READ_RIGHT_BTN)rightbtncounter++;
}
 80293e2:	e01a      	b.n	802941a <tos_ButtonCounterIncrease+0x56>
	else if(!READ_LEFT_BTN)leftbtncounter++;
 80293e4:	2110      	movs	r1, #16
 80293e6:	480e      	ldr	r0, [pc, #56]	; (8029420 <tos_ButtonCounterIncrease+0x5c>)
 80293e8:	f7d9 f990 	bl	800270c <HAL_GPIO_ReadPin>
 80293ec:	4603      	mov	r3, r0
 80293ee:	2b00      	cmp	r3, #0
 80293f0:	d106      	bne.n	8029400 <tos_ButtonCounterIncrease+0x3c>
 80293f2:	4b0d      	ldr	r3, [pc, #52]	; (8029428 <tos_ButtonCounterIncrease+0x64>)
 80293f4:	881b      	ldrh	r3, [r3, #0]
 80293f6:	3301      	adds	r3, #1
 80293f8:	b29a      	uxth	r2, r3
 80293fa:	4b0b      	ldr	r3, [pc, #44]	; (8029428 <tos_ButtonCounterIncrease+0x64>)
 80293fc:	801a      	strh	r2, [r3, #0]
}
 80293fe:	e00c      	b.n	802941a <tos_ButtonCounterIncrease+0x56>
	else if(!READ_RIGHT_BTN)rightbtncounter++;
 8029400:	2140      	movs	r1, #64	; 0x40
 8029402:	4807      	ldr	r0, [pc, #28]	; (8029420 <tos_ButtonCounterIncrease+0x5c>)
 8029404:	f7d9 f982 	bl	800270c <HAL_GPIO_ReadPin>
 8029408:	4603      	mov	r3, r0
 802940a:	2b00      	cmp	r3, #0
 802940c:	d105      	bne.n	802941a <tos_ButtonCounterIncrease+0x56>
 802940e:	4b07      	ldr	r3, [pc, #28]	; (802942c <tos_ButtonCounterIncrease+0x68>)
 8029410:	881b      	ldrh	r3, [r3, #0]
 8029412:	3301      	adds	r3, #1
 8029414:	b29a      	uxth	r2, r3
 8029416:	4b05      	ldr	r3, [pc, #20]	; (802942c <tos_ButtonCounterIncrease+0x68>)
 8029418:	801a      	strh	r2, [r3, #0]
}
 802941a:	bf00      	nop
 802941c:	bd80      	pop	{r7, pc}
 802941e:	bf00      	nop
 8029420:	40021000 	.word	0x40021000
 8029424:	2001b59e 	.word	0x2001b59e
 8029428:	2001b5a2 	.word	0x2001b5a2
 802942c:	2001b5a0 	.word	0x2001b5a0

08029430 <tos_Ratio>:
*inMin input minumun
*inMax input maximun
*outMin output minumun
*outMax output maximun
*/
double tos_Ratio(double inValue, double inMin, double inMax, double outMin, double outMax) {
 8029430:	b5b0      	push	{r4, r5, r7, lr}
 8029432:	b08a      	sub	sp, #40	; 0x28
 8029434:	af00      	add	r7, sp, #0
 8029436:	ed87 0b08 	vstr	d0, [r7, #32]
 802943a:	ed87 1b06 	vstr	d1, [r7, #24]
 802943e:	ed87 2b04 	vstr	d2, [r7, #16]
 8029442:	ed87 3b02 	vstr	d3, [r7, #8]
 8029446:	ed87 4b00 	vstr	d4, [r7]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 802944a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802944e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8029452:	f7d6 ff29 	bl	80002a8 <__aeabi_dsub>
 8029456:	4603      	mov	r3, r0
 8029458:	460c      	mov	r4, r1
 802945a:	4625      	mov	r5, r4
 802945c:	461c      	mov	r4, r3
 802945e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8029462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029466:	f7d6 ff1f 	bl	80002a8 <__aeabi_dsub>
 802946a:	4602      	mov	r2, r0
 802946c:	460b      	mov	r3, r1
 802946e:	4620      	mov	r0, r4
 8029470:	4629      	mov	r1, r5
 8029472:	f7d7 f8d1 	bl	8000618 <__aeabi_dmul>
 8029476:	4603      	mov	r3, r0
 8029478:	460c      	mov	r4, r1
 802947a:	4625      	mov	r5, r4
 802947c:	461c      	mov	r4, r3
 802947e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8029482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8029486:	f7d6 ff0f 	bl	80002a8 <__aeabi_dsub>
 802948a:	4602      	mov	r2, r0
 802948c:	460b      	mov	r3, r1
 802948e:	4620      	mov	r0, r4
 8029490:	4629      	mov	r1, r5
 8029492:	f7d7 f9eb 	bl	800086c <__aeabi_ddiv>
 8029496:	4603      	mov	r3, r0
 8029498:	460c      	mov	r4, r1
 802949a:	4618      	mov	r0, r3
 802949c:	4621      	mov	r1, r4
 802949e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80294a2:	f7d6 ff03 	bl	80002ac <__adddf3>
 80294a6:	4603      	mov	r3, r0
 80294a8:	460c      	mov	r4, r1
 80294aa:	ec44 3b17 	vmov	d7, r3, r4
}
 80294ae:	eeb0 0a47 	vmov.f32	s0, s14
 80294b2:	eef0 0a67 	vmov.f32	s1, s15
 80294b6:	3728      	adds	r7, #40	; 0x28
 80294b8:	46bd      	mov	sp, r7
 80294ba:	bdb0      	pop	{r4, r5, r7, pc}

080294bc <tos_Rounding>:
/*This function using for Rounding a floating value to int
*getValue input value
*/
uint8_t tos_Rounding(double getValue){
 80294bc:	b590      	push	{r4, r7, lr}
 80294be:	b083      	sub	sp, #12
 80294c0:	af00      	add	r7, sp, #0
 80294c2:	ed87 0b00 	vstr	d0, [r7]
	if(getValue<(((uint8_t)getValue)+0.5f)) return (uint8_t)getValue;
 80294c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80294ca:	f7d7 fb7d 	bl	8000bc8 <__aeabi_d2uiz>
 80294ce:	4603      	mov	r3, r0
 80294d0:	b2db      	uxtb	r3, r3
 80294d2:	ee07 3a90 	vmov	s15, r3
 80294d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80294da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80294de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80294e2:	ee17 0a90 	vmov	r0, s15
 80294e6:	f7d7 f83f 	bl	8000568 <__aeabi_f2d>
 80294ea:	4603      	mov	r3, r0
 80294ec:	460c      	mov	r4, r1
 80294ee:	461a      	mov	r2, r3
 80294f0:	4623      	mov	r3, r4
 80294f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80294f6:	f7d7 fb01 	bl	8000afc <__aeabi_dcmplt>
 80294fa:	4603      	mov	r3, r0
 80294fc:	2b00      	cmp	r3, #0
 80294fe:	d006      	beq.n	802950e <tos_Rounding+0x52>
 8029500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029504:	f7d7 fb60 	bl	8000bc8 <__aeabi_d2uiz>
 8029508:	4603      	mov	r3, r0
 802950a:	b2db      	uxtb	r3, r3
 802950c:	e007      	b.n	802951e <tos_Rounding+0x62>
	else return (uint8_t)getValue+1;
 802950e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029512:	f7d7 fb59 	bl	8000bc8 <__aeabi_d2uiz>
 8029516:	4603      	mov	r3, r0
 8029518:	b2db      	uxtb	r3, r3
 802951a:	3301      	adds	r3, #1
 802951c:	b2db      	uxtb	r3, r3
}
 802951e:	4618      	mov	r0, r3
 8029520:	370c      	adds	r7, #12
 8029522:	46bd      	mov	sp, r7
 8029524:	bd90      	pop	{r4, r7, pc}
	...

08029528 <tos_distance_Calc>:
/*This function using for calculate how much was go distance (kilometers or miles)
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param steps using for get steps value
*/
float tos_distance_Calc(bool unitType,uint16_t steps){
 8029528:	b590      	push	{r4, r7, lr}
 802952a:	b085      	sub	sp, #20
 802952c:	af00      	add	r7, sp, #0
 802952e:	4603      	mov	r3, r0
 8029530:	460a      	mov	r2, r1
 8029532:	71fb      	strb	r3, [r7, #7]
 8029534:	4613      	mov	r3, r2
 8029536:	80bb      	strh	r3, [r7, #4]
	float meterTmp=(float)steps*0.707;
 8029538:	88bb      	ldrh	r3, [r7, #4]
 802953a:	ee07 3a90 	vmov	s15, r3
 802953e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8029542:	ee17 0a90 	vmov	r0, s15
 8029546:	f7d7 f80f 	bl	8000568 <__aeabi_f2d>
 802954a:	a310      	add	r3, pc, #64	; (adr r3, 802958c <tos_distance_Calc+0x64>)
 802954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029550:	f7d7 f862 	bl	8000618 <__aeabi_dmul>
 8029554:	4603      	mov	r3, r0
 8029556:	460c      	mov	r4, r1
 8029558:	4618      	mov	r0, r3
 802955a:	4621      	mov	r1, r4
 802955c:	f7d7 fb54 	bl	8000c08 <__aeabi_d2f>
 8029560:	4603      	mov	r3, r0
 8029562:	60fb      	str	r3, [r7, #12]
	meterTmp/=1000;
 8029564:	ed97 7a03 	vldr	s14, [r7, #12]
 8029568:	eddf 6a07 	vldr	s13, [pc, #28]	; 8029588 <tos_distance_Calc+0x60>
 802956c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8029570:	edc7 7a03 	vstr	s15, [r7, #12]
	//if(!unitType) return meterTmp*0.621371192;
	return meterTmp;
 8029574:	68fb      	ldr	r3, [r7, #12]
 8029576:	ee07 3a90 	vmov	s15, r3
}
 802957a:	eeb0 0a67 	vmov.f32	s0, s15
 802957e:	3714      	adds	r7, #20
 8029580:	46bd      	mov	sp, r7
 8029582:	bd90      	pop	{r4, r7, pc}
 8029584:	f3af 8000 	nop.w
 8029588:	447a0000 	.word	0x447a0000
 802958c:	76c8b439 	.word	0x76c8b439
 8029590:	3fe69fbe 	.word	0x3fe69fbe

08029594 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8029594:	b580      	push	{r7, lr}
 8029596:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8029598:	f7eb fdcc 	bl	8015134 <lv_disp_get_default>
 802959c:	4603      	mov	r3, r0
 802959e:	4618      	mov	r0, r3
 80295a0:	f7de fa94 	bl	8007acc <lv_disp_get_scr_act>
 80295a4:	4603      	mov	r3, r0
}
 80295a6:	4618      	mov	r0, r3
 80295a8:	bd80      	pop	{r7, pc}
	...

080295ac <tos_Screen_Init>:
uint8_t currentScreen;
void tos_Gui_Init(void);



void tos_Screen_Init(void){
 80295ac:	b580      	push	{r7, lr}
 80295ae:	af00      	add	r7, sp, #0
	ST7789_UnSelect();
 80295b0:	2201      	movs	r2, #1
 80295b2:	2108      	movs	r1, #8
 80295b4:	4810      	ldr	r0, [pc, #64]	; (80295f8 <tos_Screen_Init+0x4c>)
 80295b6:	f7d9 f8c1 	bl	800273c <HAL_GPIO_WritePin>
	isScreenCounterEnable=true;
 80295ba:	4b10      	ldr	r3, [pc, #64]	; (80295fc <tos_Screen_Init+0x50>)
 80295bc:	2201      	movs	r2, #1
 80295be:	701a      	strb	r2, [r3, #0]
	screenStatu=true;
 80295c0:	4b0f      	ldr	r3, [pc, #60]	; (8029600 <tos_Screen_Init+0x54>)
 80295c2:	2201      	movs	r2, #1
 80295c4:	701a      	strb	r2, [r3, #0]
	GuiHelperOpen=true;
 80295c6:	4b0f      	ldr	r3, [pc, #60]	; (8029604 <tos_Screen_Init+0x58>)
 80295c8:	2201      	movs	r2, #1
 80295ca:	701a      	strb	r2, [r3, #0]
	screenType=1;
 80295cc:	4b0e      	ldr	r3, [pc, #56]	; (8029608 <tos_Screen_Init+0x5c>)
 80295ce:	2201      	movs	r2, #1
 80295d0:	701a      	strb	r2, [r3, #0]
	screenTheme=0;
 80295d2:	4b0e      	ldr	r3, [pc, #56]	; (802960c <tos_Screen_Init+0x60>)
 80295d4:	2200      	movs	r2, #0
 80295d6:	701a      	strb	r2, [r3, #0]
	currentScreen=1;
 80295d8:	4b0d      	ldr	r3, [pc, #52]	; (8029610 <tos_Screen_Init+0x64>)
 80295da:	2201      	movs	r2, #1
 80295dc:	701a      	strb	r2, [r3, #0]
	screenCounter=0;
 80295de:	4b0d      	ldr	r3, [pc, #52]	; (8029614 <tos_Screen_Init+0x68>)
 80295e0:	2200      	movs	r2, #0
 80295e2:	801a      	strh	r2, [r3, #0]
	tos_StartScreen_Init();
 80295e4:	f7fe fb76 	bl	8027cd4 <tos_StartScreen_Init>
	HAL_TIM_Base_Start_IT(&TOS_GUI_TIMER);
 80295e8:	480b      	ldr	r0, [pc, #44]	; (8029618 <tos_Screen_Init+0x6c>)
 80295ea:	f7da fbd8 	bl	8003d9e <HAL_TIM_Base_Start_IT>
	isWorkingSystem=true;
 80295ee:	4b0b      	ldr	r3, [pc, #44]	; (802961c <tos_Screen_Init+0x70>)
 80295f0:	2201      	movs	r2, #1
 80295f2:	701a      	strb	r2, [r3, #0]


}
 80295f4:	bf00      	nop
 80295f6:	bd80      	pop	{r7, pc}
 80295f8:	40020000 	.word	0x40020000
 80295fc:	2001c17b 	.word	0x2001c17b
 8029600:	2001c17f 	.word	0x2001c17f
 8029604:	2001c179 	.word	0x2001c179
 8029608:	2001c17e 	.word	0x2001c17e
 802960c:	2001c178 	.word	0x2001c178
 8029610:	2001c17a 	.word	0x2001c17a
 8029614:	2001c17c 	.word	0x2001c17c
 8029618:	2001b5c8 	.word	0x2001b5c8
 802961c:	2001b5a4 	.word	0x2001b5a4

08029620 <tos_firstScreen_Update>:
void tos_firstScreen_Update(void){
 8029620:	b580      	push	{r7, lr}
 8029622:	af00      	add	r7, sp, #0
	if(isScreenCounterEnable){
 8029624:	4b09      	ldr	r3, [pc, #36]	; (802964c <tos_firstScreen_Update+0x2c>)
 8029626:	781b      	ldrb	r3, [r3, #0]
 8029628:	2b00      	cmp	r3, #0
 802962a:	d00d      	beq.n	8029648 <tos_firstScreen_Update+0x28>
		screenCounter++;
 802962c:	4b08      	ldr	r3, [pc, #32]	; (8029650 <tos_firstScreen_Update+0x30>)
 802962e:	881b      	ldrh	r3, [r3, #0]
 8029630:	3301      	adds	r3, #1
 8029632:	b29a      	uxth	r2, r3
 8029634:	4b06      	ldr	r3, [pc, #24]	; (8029650 <tos_firstScreen_Update+0x30>)
 8029636:	801a      	strh	r2, [r3, #0]
		if(screenCounter>=5000){
 8029638:	4b05      	ldr	r3, [pc, #20]	; (8029650 <tos_firstScreen_Update+0x30>)
 802963a:	881b      	ldrh	r3, [r3, #0]
 802963c:	f241 3287 	movw	r2, #4999	; 0x1387
 8029640:	4293      	cmp	r3, r2
 8029642:	d901      	bls.n	8029648 <tos_firstScreen_Update+0x28>
			tos_Gui_Init();
 8029644:	f000 f806 	bl	8029654 <tos_Gui_Init>
		}
	}

}
 8029648:	bf00      	nop
 802964a:	bd80      	pop	{r7, pc}
 802964c:	2001c17b 	.word	0x2001c17b
 8029650:	2001c17c 	.word	0x2001c17c

08029654 <tos_Gui_Init>:

void tos_Gui_Init(void){
 8029654:	b580      	push	{r7, lr}
 8029656:	af00      	add	r7, sp, #0
	screenCounter=0;
 8029658:	4b0a      	ldr	r3, [pc, #40]	; (8029684 <tos_Gui_Init+0x30>)
 802965a:	2200      	movs	r2, #0
 802965c:	801a      	strh	r2, [r3, #0]
	currentScreen=0;
 802965e:	4b0a      	ldr	r3, [pc, #40]	; (8029688 <tos_Gui_Init+0x34>)
 8029660:	2200      	movs	r2, #0
 8029662:	701a      	strb	r2, [r3, #0]
	isScreenCounterEnable=false;
 8029664:	4b09      	ldr	r3, [pc, #36]	; (802968c <tos_Gui_Init+0x38>)
 8029666:	2200      	movs	r2, #0
 8029668:	701a      	strb	r2, [r3, #0]
	lv_obj_clean(lv_scr_act());
 802966a:	f7ff ff93 	bl	8029594 <lv_scr_act>
 802966e:	4603      	mov	r3, r0
 8029670:	4618      	mov	r0, r3
 8029672:	f7df f98b 	bl	800898c <lv_obj_clean>
	tos_Screen_Chooser(currentScreen);
 8029676:	4b04      	ldr	r3, [pc, #16]	; (8029688 <tos_Gui_Init+0x34>)
 8029678:	781b      	ldrb	r3, [r3, #0]
 802967a:	4618      	mov	r0, r3
 802967c:	f000 f876 	bl	802976c <tos_Screen_Chooser>
}
 8029680:	bf00      	nop
 8029682:	bd80      	pop	{r7, pc}
 8029684:	2001c17c 	.word	0x2001c17c
 8029688:	2001c17a 	.word	0x2001c17a
 802968c:	2001c17b 	.word	0x2001c17b

08029690 <tos_ScreenController>:


void tos_ScreenController(void){
 8029690:	b580      	push	{r7, lr}
 8029692:	af00      	add	r7, sp, #0
	 tos_Menu_Controller();
 8029694:	f7fa fcf4 	bl	8024080 <tos_Menu_Controller>
	if(screenCounter==0 && GuiHelperOpen){
 8029698:	4b2e      	ldr	r3, [pc, #184]	; (8029754 <tos_ScreenController+0xc4>)
 802969a:	881b      	ldrh	r3, [r3, #0]
 802969c:	2b00      	cmp	r3, #0
 802969e:	d158      	bne.n	8029752 <tos_ScreenController+0xc2>
 80296a0:	4b2d      	ldr	r3, [pc, #180]	; (8029758 <tos_ScreenController+0xc8>)
 80296a2:	781b      	ldrb	r3, [r3, #0]
 80296a4:	2b00      	cmp	r3, #0
 80296a6:	d054      	beq.n	8029752 <tos_ScreenController+0xc2>

		if(1==tos_EnterButton_Listenner_For_MenuControl()){ sleepCounter=0;
 80296a8:	f7ff fe64 	bl	8029374 <tos_EnterButton_Listenner_For_MenuControl>
 80296ac:	4603      	mov	r3, r0
 80296ae:	2b01      	cmp	r3, #1
 80296b0:	d11f      	bne.n	80296f2 <tos_ScreenController+0x62>
 80296b2:	4b2a      	ldr	r3, [pc, #168]	; (802975c <tos_ScreenController+0xcc>)
 80296b4:	2200      	movs	r2, #0
 80296b6:	801a      	strh	r2, [r3, #0]
			if(!screenStatu){screenStatu=true;	ST7789_UnSelect(); return;}
 80296b8:	4b29      	ldr	r3, [pc, #164]	; (8029760 <tos_ScreenController+0xd0>)
 80296ba:	781b      	ldrb	r3, [r3, #0]
 80296bc:	f083 0301 	eor.w	r3, r3, #1
 80296c0:	b2db      	uxtb	r3, r3
 80296c2:	2b00      	cmp	r3, #0
 80296c4:	d008      	beq.n	80296d8 <tos_ScreenController+0x48>
 80296c6:	4b26      	ldr	r3, [pc, #152]	; (8029760 <tos_ScreenController+0xd0>)
 80296c8:	2201      	movs	r2, #1
 80296ca:	701a      	strb	r2, [r3, #0]
 80296cc:	2201      	movs	r2, #1
 80296ce:	2108      	movs	r1, #8
 80296d0:	4824      	ldr	r0, [pc, #144]	; (8029764 <tos_ScreenController+0xd4>)
 80296d2:	f7d9 f833 	bl	800273c <HAL_GPIO_WritePin>
 80296d6:	e03c      	b.n	8029752 <tos_ScreenController+0xc2>
			else if(1==currentScreen){currentScreen=0; tos_Screen_Chooser(currentScreen);	return;}
 80296d8:	4b23      	ldr	r3, [pc, #140]	; (8029768 <tos_ScreenController+0xd8>)
 80296da:	781b      	ldrb	r3, [r3, #0]
 80296dc:	2b01      	cmp	r3, #1
 80296de:	d10a      	bne.n	80296f6 <tos_ScreenController+0x66>
 80296e0:	4b21      	ldr	r3, [pc, #132]	; (8029768 <tos_ScreenController+0xd8>)
 80296e2:	2200      	movs	r2, #0
 80296e4:	701a      	strb	r2, [r3, #0]
 80296e6:	4b20      	ldr	r3, [pc, #128]	; (8029768 <tos_ScreenController+0xd8>)
 80296e8:	781b      	ldrb	r3, [r3, #0]
 80296ea:	4618      	mov	r0, r3
 80296ec:	f000 f83e 	bl	802976c <tos_Screen_Chooser>
 80296f0:	e02f      	b.n	8029752 <tos_ScreenController+0xc2>
		}
		else if(2==tos_EnterButton_Listenner_For_MenuControl()){
 80296f2:	f7ff fe3f 	bl	8029374 <tos_EnterButton_Listenner_For_MenuControl>
				//screenStatu=false; currentScreen=1;tos_Screen_Chooser(currentScreen); return;
		}
		if(1==tos_LeftButton_Listenner_For_MenuControl()){ sleepCounter=0;
 80296f6:	f7ff fe15 	bl	8029324 <tos_LeftButton_Listenner_For_MenuControl>
 80296fa:	4603      	mov	r3, r0
 80296fc:	2b01      	cmp	r3, #1
 80296fe:	d111      	bne.n	8029724 <tos_ScreenController+0x94>
 8029700:	4b16      	ldr	r3, [pc, #88]	; (802975c <tos_ScreenController+0xcc>)
 8029702:	2200      	movs	r2, #0
 8029704:	801a      	strh	r2, [r3, #0]
			MenuScreen_SetItem(5); currentScreen=2; tos_Screen_Chooser(currentScreen);
 8029706:	2005      	movs	r0, #5
 8029708:	f7fa fe56 	bl	80243b8 <MenuScreen_SetItem>
 802970c:	4b16      	ldr	r3, [pc, #88]	; (8029768 <tos_ScreenController+0xd8>)
 802970e:	2202      	movs	r2, #2
 8029710:	701a      	strb	r2, [r3, #0]
 8029712:	4b15      	ldr	r3, [pc, #84]	; (8029768 <tos_ScreenController+0xd8>)
 8029714:	781b      	ldrb	r3, [r3, #0]
 8029716:	4618      	mov	r0, r3
 8029718:	f000 f828 	bl	802976c <tos_Screen_Chooser>
			GuiHelperOpen=false; 	return;
 802971c:	4b0e      	ldr	r3, [pc, #56]	; (8029758 <tos_ScreenController+0xc8>)
 802971e:	2200      	movs	r2, #0
 8029720:	701a      	strb	r2, [r3, #0]
 8029722:	e016      	b.n	8029752 <tos_ScreenController+0xc2>
			}
		if(1==tos_RightButton_Listenner_For_MenuControl()){ sleepCounter=0;
 8029724:	f7ff fdd6 	bl	80292d4 <tos_RightButton_Listenner_For_MenuControl>
 8029728:	4603      	mov	r3, r0
 802972a:	2b01      	cmp	r3, #1
 802972c:	d111      	bne.n	8029752 <tos_ScreenController+0xc2>
 802972e:	4b0b      	ldr	r3, [pc, #44]	; (802975c <tos_ScreenController+0xcc>)
 8029730:	2200      	movs	r2, #0
 8029732:	801a      	strh	r2, [r3, #0]
			MenuScreen_SetItem(0); currentScreen=2; tos_Screen_Chooser(currentScreen);
 8029734:	2000      	movs	r0, #0
 8029736:	f7fa fe3f 	bl	80243b8 <MenuScreen_SetItem>
 802973a:	4b0b      	ldr	r3, [pc, #44]	; (8029768 <tos_ScreenController+0xd8>)
 802973c:	2202      	movs	r2, #2
 802973e:	701a      	strb	r2, [r3, #0]
 8029740:	4b09      	ldr	r3, [pc, #36]	; (8029768 <tos_ScreenController+0xd8>)
 8029742:	781b      	ldrb	r3, [r3, #0]
 8029744:	4618      	mov	r0, r3
 8029746:	f000 f811 	bl	802976c <tos_Screen_Chooser>
			GuiHelperOpen=false; 	return;
 802974a:	4b03      	ldr	r3, [pc, #12]	; (8029758 <tos_ScreenController+0xc8>)
 802974c:	2200      	movs	r2, #0
 802974e:	701a      	strb	r2, [r3, #0]
 8029750:	bf00      	nop
		}


	}

}
 8029752:	bd80      	pop	{r7, pc}
 8029754:	2001c17c 	.word	0x2001c17c
 8029758:	2001c179 	.word	0x2001c179
 802975c:	2001b5a6 	.word	0x2001b5a6
 8029760:	2001c17f 	.word	0x2001c17f
 8029764:	40020000 	.word	0x40020000
 8029768:	2001c17a 	.word	0x2001c17a

0802976c <tos_Screen_Chooser>:
/*This function using for set new screen*/
void tos_Screen_Chooser(uint8_t currentScreen){
 802976c:	b580      	push	{r7, lr}
 802976e:	b082      	sub	sp, #8
 8029770:	af00      	add	r7, sp, #0
 8029772:	4603      	mov	r3, r0
 8029774:	71fb      	strb	r3, [r7, #7]
	SleepModeScreen_TaskControllerSet(false);
 8029776:	2000      	movs	r0, #0
 8029778:	f7fe fa4a 	bl	8027c10 <SleepModeScreen_TaskControllerSet>
	MainScreen_TaskControllerSet(false);
 802977c:	2000      	movs	r0, #0
 802977e:	f7fa fbcb 	bl	8023f18 <MainScreen_TaskControllerSet>
	MenuScreen_TaskControllerSet(false);
 8029782:	2000      	movs	r0, #0
 8029784:	f7fa fe08 	bl	8024398 <MenuScreen_TaskControllerSet>
	lv_obj_clean(lv_scr_act());
 8029788:	f7ff ff04 	bl	8029594 <lv_scr_act>
 802978c:	4603      	mov	r3, r0
 802978e:	4618      	mov	r0, r3
 8029790:	f7df f8fc 	bl	800898c <lv_obj_clean>
	switch(currentScreen){
 8029794:	79fb      	ldrb	r3, [r7, #7]
 8029796:	2b01      	cmp	r3, #1
 8029798:	d00f      	beq.n	80297ba <tos_Screen_Chooser+0x4e>
 802979a:	2b02      	cmp	r3, #2
 802979c:	d013      	beq.n	80297c6 <tos_Screen_Chooser+0x5a>
 802979e:	2b00      	cmp	r3, #0
 80297a0:	d000      	beq.n	80297a4 <tos_Screen_Chooser+0x38>
	case TOS_SCREEN_MENU:
		HAL_TIM_Base_Stop_IT(&TOS_SCREENUPDATE_TIMER);
		MenuScreen_TaskControllerSet(true);
		tos_MenuScreen_Init(true,ScreenRtc);
		break;
	default: return;
 80297a2:	e01d      	b.n	80297e0 <tos_Screen_Chooser+0x74>
		HAL_TIM_Base_Start_IT(&TOS_SCREENUPDATE_TIMER);
 80297a4:	4810      	ldr	r0, [pc, #64]	; (80297e8 <tos_Screen_Chooser+0x7c>)
 80297a6:	f7da fafa 	bl	8003d9e <HAL_TIM_Base_Start_IT>
		MainScreen_TaskControllerSet(true);
 80297aa:	2001      	movs	r0, #1
 80297ac:	f7fa fbb4 	bl	8023f18 <MainScreen_TaskControllerSet>
		tos_MainScreen_Init(1,1);break;
 80297b0:	2101      	movs	r1, #1
 80297b2:	2001      	movs	r0, #1
 80297b4:	f7f8 fc40 	bl	8022038 <tos_MainScreen_Init>
 80297b8:	e012      	b.n	80297e0 <tos_Screen_Chooser+0x74>
		SleepModeScreen_TaskControllerSet(true);
 80297ba:	2001      	movs	r0, #1
 80297bc:	f7fe fa28 	bl	8027c10 <SleepModeScreen_TaskControllerSet>
		tos_SleepModeScreen_Init();break;
 80297c0:	f7fd ff44 	bl	802764c <tos_SleepModeScreen_Init>
 80297c4:	e00c      	b.n	80297e0 <tos_Screen_Chooser+0x74>
		HAL_TIM_Base_Stop_IT(&TOS_SCREENUPDATE_TIMER);
 80297c6:	4808      	ldr	r0, [pc, #32]	; (80297e8 <tos_Screen_Chooser+0x7c>)
 80297c8:	f7da fb0d 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
		MenuScreen_TaskControllerSet(true);
 80297cc:	2001      	movs	r0, #1
 80297ce:	f7fa fde3 	bl	8024398 <MenuScreen_TaskControllerSet>
		tos_MenuScreen_Init(true,ScreenRtc);
 80297d2:	4b06      	ldr	r3, [pc, #24]	; (80297ec <tos_Screen_Chooser+0x80>)
 80297d4:	681b      	ldr	r3, [r3, #0]
 80297d6:	4619      	mov	r1, r3
 80297d8:	2001      	movs	r0, #1
 80297da:	f7fa fbff 	bl	8023fdc <tos_MenuScreen_Init>
		break;
 80297de:	bf00      	nop
	}
}
 80297e0:	3708      	adds	r7, #8
 80297e2:	46bd      	mov	sp, r7
 80297e4:	bd80      	pop	{r7, pc}
 80297e6:	bf00      	nop
 80297e8:	2001b60c 	.word	0x2001b60c
 80297ec:	2001c180 	.word	0x2001c180

080297f0 <tos_Screen_Variables_Getter>:
void tos_Screen_Variables_Getter(uint8_t Screen){
 80297f0:	b580      	push	{r7, lr}
 80297f2:	b082      	sub	sp, #8
 80297f4:	af00      	add	r7, sp, #0
 80297f6:	4603      	mov	r3, r0
 80297f8:	71fb      	strb	r3, [r7, #7]

	  tos_RTC_GetTime(ScreenRtc,Screen);
 80297fa:	4b08      	ldr	r3, [pc, #32]	; (802981c <tos_Screen_Variables_Getter+0x2c>)
 80297fc:	681b      	ldr	r3, [r3, #0]
 80297fe:	79fa      	ldrb	r2, [r7, #7]
 8029800:	4611      	mov	r1, r2
 8029802:	4618      	mov	r0, r3
 8029804:	f000 f95a 	bl	8029abc <tos_RTC_GetTime>
	  tos_getBatteryVAl(50,Screen);
 8029808:	79fb      	ldrb	r3, [r7, #7]
 802980a:	4619      	mov	r1, r3
 802980c:	2032      	movs	r0, #50	; 0x32
 802980e:	f7ff fa71 	bl	8028cf4 <tos_getBatteryVAl>

}
 8029812:	bf00      	nop
 8029814:	3708      	adds	r7, #8
 8029816:	46bd      	mov	sp, r7
 8029818:	bd80      	pop	{r7, pc}
 802981a:	bf00      	nop
 802981c:	2001c180 	.word	0x2001c180

08029820 <tos_Get_Rtc>:
void tos_Get_Rtc(RTC_HandleTypeDef *hrtc){
 8029820:	b480      	push	{r7}
 8029822:	b083      	sub	sp, #12
 8029824:	af00      	add	r7, sp, #0
 8029826:	6078      	str	r0, [r7, #4]
	ScreenRtc=hrtc;
 8029828:	4a04      	ldr	r2, [pc, #16]	; (802983c <tos_Get_Rtc+0x1c>)
 802982a:	687b      	ldr	r3, [r7, #4]
 802982c:	6013      	str	r3, [r2, #0]
}
 802982e:	bf00      	nop
 8029830:	370c      	adds	r7, #12
 8029832:	46bd      	mov	sp, r7
 8029834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029838:	4770      	bx	lr
 802983a:	bf00      	nop
 802983c:	2001c180 	.word	0x2001c180

08029840 <tos_Get_Current_Screen>:
uint8_t tos_Get_Current_Screen(void){
 8029840:	b480      	push	{r7}
 8029842:	af00      	add	r7, sp, #0
	return currentScreen;
 8029844:	4b03      	ldr	r3, [pc, #12]	; (8029854 <tos_Get_Current_Screen+0x14>)
 8029846:	781b      	ldrb	r3, [r3, #0]
}
 8029848:	4618      	mov	r0, r3
 802984a:	46bd      	mov	sp, r7
 802984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029850:	4770      	bx	lr
 8029852:	bf00      	nop
 8029854:	2001c17a 	.word	0x2001c17a

08029858 <tos_Set_Current_Screen>:
void tos_Set_Current_Screen(void){
 8029858:	b580      	push	{r7, lr}
 802985a:	af00      	add	r7, sp, #0
	currentScreen=0; tos_Screen_Chooser(currentScreen);
 802985c:	4b06      	ldr	r3, [pc, #24]	; (8029878 <tos_Set_Current_Screen+0x20>)
 802985e:	2200      	movs	r2, #0
 8029860:	701a      	strb	r2, [r3, #0]
 8029862:	4b05      	ldr	r3, [pc, #20]	; (8029878 <tos_Set_Current_Screen+0x20>)
 8029864:	781b      	ldrb	r3, [r3, #0]
 8029866:	4618      	mov	r0, r3
 8029868:	f7ff ff80 	bl	802976c <tos_Screen_Chooser>
	GuiHelperOpen=true;
 802986c:	4b03      	ldr	r3, [pc, #12]	; (802987c <tos_Set_Current_Screen+0x24>)
 802986e:	2201      	movs	r2, #1
 8029870:	701a      	strb	r2, [r3, #0]
}
 8029872:	bf00      	nop
 8029874:	bd80      	pop	{r7, pc}
 8029876:	bf00      	nop
 8029878:	2001c17a 	.word	0x2001c17a
 802987c:	2001c179 	.word	0x2001c179

08029880 <tos_SleepScreen_Counter>:
void tos_SleepScreen_Counter(void){
 8029880:	b580      	push	{r7, lr}
 8029882:	af00      	add	r7, sp, #0
	if(screenStatu)sleepCounter++;
 8029884:	4b13      	ldr	r3, [pc, #76]	; (80298d4 <tos_SleepScreen_Counter+0x54>)
 8029886:	781b      	ldrb	r3, [r3, #0]
 8029888:	2b00      	cmp	r3, #0
 802988a:	d005      	beq.n	8029898 <tos_SleepScreen_Counter+0x18>
 802988c:	4b12      	ldr	r3, [pc, #72]	; (80298d8 <tos_SleepScreen_Counter+0x58>)
 802988e:	881b      	ldrh	r3, [r3, #0]
 8029890:	3301      	adds	r3, #1
 8029892:	b29a      	uxth	r2, r3
 8029894:	4b10      	ldr	r3, [pc, #64]	; (80298d8 <tos_SleepScreen_Counter+0x58>)
 8029896:	801a      	strh	r2, [r3, #0]
	if(sleepCounter>=450){
 8029898:	4b0f      	ldr	r3, [pc, #60]	; (80298d8 <tos_SleepScreen_Counter+0x58>)
 802989a:	881b      	ldrh	r3, [r3, #0]
 802989c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80298a0:	d316      	bcc.n	80298d0 <tos_SleepScreen_Counter+0x50>
		if(1==currentScreen) { screenStatu=false; ST7789_Select(); }
 80298a2:	4b0e      	ldr	r3, [pc, #56]	; (80298dc <tos_SleepScreen_Counter+0x5c>)
 80298a4:	781b      	ldrb	r3, [r3, #0]
 80298a6:	2b01      	cmp	r3, #1
 80298a8:	d107      	bne.n	80298ba <tos_SleepScreen_Counter+0x3a>
 80298aa:	4b0a      	ldr	r3, [pc, #40]	; (80298d4 <tos_SleepScreen_Counter+0x54>)
 80298ac:	2200      	movs	r2, #0
 80298ae:	701a      	strb	r2, [r3, #0]
 80298b0:	2200      	movs	r2, #0
 80298b2:	2108      	movs	r1, #8
 80298b4:	480a      	ldr	r0, [pc, #40]	; (80298e0 <tos_SleepScreen_Counter+0x60>)
 80298b6:	f7d8 ff41 	bl	800273c <HAL_GPIO_WritePin>
		currentScreen=1; tos_Screen_Chooser(currentScreen);
 80298ba:	4b08      	ldr	r3, [pc, #32]	; (80298dc <tos_SleepScreen_Counter+0x5c>)
 80298bc:	2201      	movs	r2, #1
 80298be:	701a      	strb	r2, [r3, #0]
 80298c0:	4b06      	ldr	r3, [pc, #24]	; (80298dc <tos_SleepScreen_Counter+0x5c>)
 80298c2:	781b      	ldrb	r3, [r3, #0]
 80298c4:	4618      	mov	r0, r3
 80298c6:	f7ff ff51 	bl	802976c <tos_Screen_Chooser>
		sleepCounter=0;
 80298ca:	4b03      	ldr	r3, [pc, #12]	; (80298d8 <tos_SleepScreen_Counter+0x58>)
 80298cc:	2200      	movs	r2, #0
 80298ce:	801a      	strh	r2, [r3, #0]
	}
}
 80298d0:	bf00      	nop
 80298d2:	bd80      	pop	{r7, pc}
 80298d4:	2001c17f 	.word	0x2001c17f
 80298d8:	2001b5a6 	.word	0x2001b5a6
 80298dc:	2001c17a 	.word	0x2001c17a
 80298e0:	40020000 	.word	0x40020000

080298e4 <tos_Notification_CreateRoot>:
#include "tos_Notification_Helper.h"



tos_Notification *  tos_Notification_CreateRoot(tos_Notification * root){
 80298e4:	b580      	push	{r7, lr}
 80298e6:	b082      	sub	sp, #8
 80298e8:	af00      	add	r7, sp, #0
 80298ea:	6078      	str	r0, [r7, #4]
	root=NULL;
 80298ec:	2300      	movs	r3, #0
 80298ee:	607b      	str	r3, [r7, #4]
	root=tos_Notification_CreateNode(0);
 80298f0:	2000      	movs	r0, #0
 80298f2:	f000 f81f 	bl	8029934 <tos_Notification_CreateNode>
 80298f6:	6078      	str	r0, [r7, #4]
	root->appName="root";
 80298f8:	687b      	ldr	r3, [r7, #4]
 80298fa:	4a05      	ldr	r2, [pc, #20]	; (8029910 <tos_Notification_CreateRoot+0x2c>)
 80298fc:	601a      	str	r2, [r3, #0]
	root->appName="root";
 80298fe:	687b      	ldr	r3, [r7, #4]
 8029900:	4a03      	ldr	r2, [pc, #12]	; (8029910 <tos_Notification_CreateRoot+0x2c>)
 8029902:	601a      	str	r2, [r3, #0]
    return root;
 8029904:	687b      	ldr	r3, [r7, #4]
}
 8029906:	4618      	mov	r0, r3
 8029908:	3708      	adds	r7, #8
 802990a:	46bd      	mov	sp, r7
 802990c:	bd80      	pop	{r7, pc}
 802990e:	bf00      	nop
 8029910:	0802d0dc 	.word	0x0802d0dc

08029914 <tos_Notification_SetFirstNode>:
tos_Notification *  tos_Notification_SetFirstNode(tos_Notification * root,tos_Notification * node){
 8029914:	b480      	push	{r7}
 8029916:	b083      	sub	sp, #12
 8029918:	af00      	add	r7, sp, #0
 802991a:	6078      	str	r0, [r7, #4]
 802991c:	6039      	str	r1, [r7, #0]
    node=NULL;
 802991e:	2300      	movs	r3, #0
 8029920:	603b      	str	r3, [r7, #0]
    node=root;
 8029922:	687b      	ldr	r3, [r7, #4]
 8029924:	603b      	str	r3, [r7, #0]
    return node;
 8029926:	683b      	ldr	r3, [r7, #0]
}
 8029928:	4618      	mov	r0, r3
 802992a:	370c      	adds	r7, #12
 802992c:	46bd      	mov	sp, r7
 802992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029932:	4770      	bx	lr

08029934 <tos_Notification_CreateNode>:

tos_Notification * tos_Notification_CreateNode(uint16_t index){
 8029934:	b580      	push	{r7, lr}
 8029936:	b084      	sub	sp, #16
 8029938:	af00      	add	r7, sp, #0
 802993a:	4603      	mov	r3, r0
 802993c:	80fb      	strh	r3, [r7, #6]
	tos_Notification * node;
	node=(tos_Notification *)malloc(sizeof(tos_Notification));
 802993e:	2010      	movs	r0, #16
 8029940:	f000 fa28 	bl	8029d94 <malloc>
 8029944:	4603      	mov	r3, r0
 8029946:	60fb      	str	r3, [r7, #12]
	if(node){
 8029948:	68fb      	ldr	r3, [r7, #12]
 802994a:	2b00      	cmp	r3, #0
 802994c:	d005      	beq.n	802995a <tos_Notification_CreateNode+0x26>
		node->index=index;
 802994e:	68fb      	ldr	r3, [r7, #12]
 8029950:	88fa      	ldrh	r2, [r7, #6]
 8029952:	811a      	strh	r2, [r3, #8]
		node->next=NULL;
 8029954:	68fb      	ldr	r3, [r7, #12]
 8029956:	2200      	movs	r2, #0
 8029958:	60da      	str	r2, [r3, #12]
	}
	return node;
 802995a:	68fb      	ldr	r3, [r7, #12]
}
 802995c:	4618      	mov	r0, r3
 802995e:	3710      	adds	r7, #16
 8029960:	46bd      	mov	sp, r7
 8029962:	bd80      	pop	{r7, pc}

08029964 <tos_Notification_RemoveNode>:

void tos_Notification_RemoveNode(tos_Notification *previous,tos_Notification *node){
 8029964:	b580      	push	{r7, lr}
 8029966:	b082      	sub	sp, #8
 8029968:	af00      	add	r7, sp, #0
 802996a:	6078      	str	r0, [r7, #4]
 802996c:	6039      	str	r1, [r7, #0]

	if(!node){
 802996e:	683b      	ldr	r3, [r7, #0]
 8029970:	2b00      	cmp	r3, #0
 8029972:	d00b      	beq.n	802998c <tos_Notification_RemoveNode+0x28>
		return;
	}
	if(previous){
 8029974:	687b      	ldr	r3, [r7, #4]
 8029976:	2b00      	cmp	r3, #0
 8029978:	d003      	beq.n	8029982 <tos_Notification_RemoveNode+0x1e>
		previous->next=node->next;
 802997a:	683b      	ldr	r3, [r7, #0]
 802997c:	68da      	ldr	r2, [r3, #12]
 802997e:	687b      	ldr	r3, [r7, #4]
 8029980:	60da      	str	r2, [r3, #12]
	}
	free(node);
 8029982:	6838      	ldr	r0, [r7, #0]
 8029984:	f000 fa0e 	bl	8029da4 <free>
	return;
 8029988:	bf00      	nop
 802998a:	e000      	b.n	802998e <tos_Notification_RemoveNode+0x2a>
		return;
 802998c:	bf00      	nop
}
 802998e:	3708      	adds	r7, #8
 8029990:	46bd      	mov	sp, r7
 8029992:	bd80      	pop	{r7, pc}

08029994 <tos_NotificationGetSize>:
		tmp=tmp->next;
	}
	return;
}

uint8_t tos_NotificationGetSize(tos_Notification * root){
 8029994:	b480      	push	{r7}
 8029996:	b085      	sub	sp, #20
 8029998:	af00      	add	r7, sp, #0
 802999a:	6078      	str	r0, [r7, #4]
	tos_Notification * tmp=root;
 802999c:	687b      	ldr	r3, [r7, #4]
 802999e:	60fb      	str	r3, [r7, #12]
	while(tmp){
 80299a0:	e00c      	b.n	80299bc <tos_NotificationGetSize+0x28>
    if(tmp->next==NULL)	return (tmp->index+1);
 80299a2:	68fb      	ldr	r3, [r7, #12]
 80299a4:	68db      	ldr	r3, [r3, #12]
 80299a6:	2b00      	cmp	r3, #0
 80299a8:	d105      	bne.n	80299b6 <tos_NotificationGetSize+0x22>
 80299aa:	68fb      	ldr	r3, [r7, #12]
 80299ac:	891b      	ldrh	r3, [r3, #8]
 80299ae:	b2db      	uxtb	r3, r3
 80299b0:	3301      	adds	r3, #1
 80299b2:	b2db      	uxtb	r3, r3
 80299b4:	e005      	b.n	80299c2 <tos_NotificationGetSize+0x2e>
	tmp=tmp->next;
 80299b6:	68fb      	ldr	r3, [r7, #12]
 80299b8:	68db      	ldr	r3, [r3, #12]
 80299ba:	60fb      	str	r3, [r7, #12]
	while(tmp){
 80299bc:	68fb      	ldr	r3, [r7, #12]
 80299be:	2b00      	cmp	r3, #0
 80299c0:	d1ef      	bne.n	80299a2 <tos_NotificationGetSize+0xe>
	}

}
 80299c2:	4618      	mov	r0, r3
 80299c4:	3714      	adds	r7, #20
 80299c6:	46bd      	mov	sp, r7
 80299c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80299cc:	4770      	bx	lr

080299ce <tos_NotificationGetItem>:


tos_Notification *tos_NotificationGetItem(tos_Notification * root,uint16_t itemIndex){
 80299ce:	b580      	push	{r7, lr}
 80299d0:	b084      	sub	sp, #16
 80299d2:	af00      	add	r7, sp, #0
 80299d4:	6078      	str	r0, [r7, #4]
 80299d6:	460b      	mov	r3, r1
 80299d8:	807b      	strh	r3, [r7, #2]
		tos_Notification * tmp=root;
 80299da:	687b      	ldr	r3, [r7, #4]
 80299dc:	60fb      	str	r3, [r7, #12]
	if( itemIndex<tos_NotificationGetSize(root)){
 80299de:	6878      	ldr	r0, [r7, #4]
 80299e0:	f7ff ffd8 	bl	8029994 <tos_NotificationGetSize>
 80299e4:	4603      	mov	r3, r0
 80299e6:	b29b      	uxth	r3, r3
 80299e8:	887a      	ldrh	r2, [r7, #2]
 80299ea:	429a      	cmp	r2, r3
 80299ec:	d20d      	bcs.n	8029a0a <tos_NotificationGetItem+0x3c>
		while(tmp){
 80299ee:	e009      	b.n	8029a04 <tos_NotificationGetItem+0x36>
	if(tmp->index==itemIndex){
 80299f0:	68fb      	ldr	r3, [r7, #12]
 80299f2:	891b      	ldrh	r3, [r3, #8]
 80299f4:	887a      	ldrh	r2, [r7, #2]
 80299f6:	429a      	cmp	r2, r3
 80299f8:	d101      	bne.n	80299fe <tos_NotificationGetItem+0x30>
		return tmp;
 80299fa:	68fb      	ldr	r3, [r7, #12]
 80299fc:	e006      	b.n	8029a0c <tos_NotificationGetItem+0x3e>
	}tmp=tmp->next;
 80299fe:	68fb      	ldr	r3, [r7, #12]
 8029a00:	68db      	ldr	r3, [r3, #12]
 8029a02:	60fb      	str	r3, [r7, #12]
		while(tmp){
 8029a04:	68fb      	ldr	r3, [r7, #12]
 8029a06:	2b00      	cmp	r3, #0
 8029a08:	d1f2      	bne.n	80299f0 <tos_NotificationGetItem+0x22>
	}}
        return NULL;
 8029a0a:	2300      	movs	r3, #0
}
 8029a0c:	4618      	mov	r0, r3
 8029a0e:	3710      	adds	r7, #16
 8029a10:	46bd      	mov	sp, r7
 8029a12:	bd80      	pop	{r7, pc}

08029a14 <tos_NotificationPushItem>:


tos_Notification * tos_NotificationPushItem(tos_Notification * node,char *appName,char *notification){
 8029a14:	b580      	push	{r7, lr}
 8029a16:	b086      	sub	sp, #24
 8029a18:	af00      	add	r7, sp, #0
 8029a1a:	60f8      	str	r0, [r7, #12]
 8029a1c:	60b9      	str	r1, [r7, #8]
 8029a1e:	607a      	str	r2, [r7, #4]
		tos_Notification * tmp;
		tmp=tos_Notification_CreateNode(tos_NotificationGetSize(node));
 8029a20:	68f8      	ldr	r0, [r7, #12]
 8029a22:	f7ff ffb7 	bl	8029994 <tos_NotificationGetSize>
 8029a26:	4603      	mov	r3, r0
 8029a28:	b29b      	uxth	r3, r3
 8029a2a:	4618      	mov	r0, r3
 8029a2c:	f7ff ff82 	bl	8029934 <tos_Notification_CreateNode>
 8029a30:	6178      	str	r0, [r7, #20]
		if(appName!=NULL)sprintf(tmp->appName,"%s",appName);
 8029a32:	68bb      	ldr	r3, [r7, #8]
 8029a34:	2b00      	cmp	r3, #0
 8029a36:	d005      	beq.n	8029a44 <tos_NotificationPushItem+0x30>
 8029a38:	697b      	ldr	r3, [r7, #20]
 8029a3a:	681b      	ldr	r3, [r3, #0]
 8029a3c:	68b9      	ldr	r1, [r7, #8]
 8029a3e:	4618      	mov	r0, r3
 8029a40:	f000 ff40 	bl	802a8c4 <strcpy>
		if(notification!=NULL) sprintf(tmp->appNot,"%s",notification);
 8029a44:	687b      	ldr	r3, [r7, #4]
 8029a46:	2b00      	cmp	r3, #0
 8029a48:	d005      	beq.n	8029a56 <tos_NotificationPushItem+0x42>
 8029a4a:	697b      	ldr	r3, [r7, #20]
 8029a4c:	685b      	ldr	r3, [r3, #4]
 8029a4e:	6879      	ldr	r1, [r7, #4]
 8029a50:	4618      	mov	r0, r3
 8029a52:	f000 ff37 	bl	802a8c4 <strcpy>
        node->next=tmp;
 8029a56:	68fb      	ldr	r3, [r7, #12]
 8029a58:	697a      	ldr	r2, [r7, #20]
 8029a5a:	60da      	str	r2, [r3, #12]
        node=node->next;
 8029a5c:	68fb      	ldr	r3, [r7, #12]
 8029a5e:	68db      	ldr	r3, [r3, #12]
 8029a60:	60fb      	str	r3, [r7, #12]
        return node;
 8029a62:	68fb      	ldr	r3, [r7, #12]

}
 8029a64:	4618      	mov	r0, r3
 8029a66:	3718      	adds	r7, #24
 8029a68:	46bd      	mov	sp, r7
 8029a6a:	bd80      	pop	{r7, pc}

08029a6c <tos_NotificationDelItem>:

void tos_NotificationDelItem(tos_Notification *root,tos_Notification *node,uint16_t index){
 8029a6c:	b580      	push	{r7, lr}
 8029a6e:	b086      	sub	sp, #24
 8029a70:	af00      	add	r7, sp, #0
 8029a72:	60f8      	str	r0, [r7, #12]
 8029a74:	60b9      	str	r1, [r7, #8]
 8029a76:	4613      	mov	r3, r2
 8029a78:	80fb      	strh	r3, [r7, #6]
		node=root;
 8029a7a:	68fb      	ldr	r3, [r7, #12]
 8029a7c:	60bb      	str	r3, [r7, #8]
		tos_Notification * tmp=NULL;
 8029a7e:	2300      	movs	r3, #0
 8029a80:	617b      	str	r3, [r7, #20]
		while(node){
 8029a82:	e014      	b.n	8029aae <tos_NotificationDelItem+0x42>
			if(node->index==index){
 8029a84:	68bb      	ldr	r3, [r7, #8]
 8029a86:	891b      	ldrh	r3, [r3, #8]
 8029a88:	88fa      	ldrh	r2, [r7, #6]
 8029a8a:	429a      	cmp	r2, r3
 8029a8c:	d10a      	bne.n	8029aa4 <tos_NotificationDelItem+0x38>
				if(tmp==NULL){
 8029a8e:	697b      	ldr	r3, [r7, #20]
 8029a90:	2b00      	cmp	r3, #0
 8029a92:	d102      	bne.n	8029a9a <tos_NotificationDelItem+0x2e>
					root=node->next;
 8029a94:	68bb      	ldr	r3, [r7, #8]
 8029a96:	68db      	ldr	r3, [r3, #12]
 8029a98:	60fb      	str	r3, [r7, #12]
				}
				tos_Notification_RemoveNode(tmp,node);
 8029a9a:	68b9      	ldr	r1, [r7, #8]
 8029a9c:	6978      	ldr	r0, [r7, #20]
 8029a9e:	f7ff ff61 	bl	8029964 <tos_Notification_RemoveNode>
				break;
 8029aa2:	e007      	b.n	8029ab4 <tos_NotificationDelItem+0x48>
			}
			tmp=node;
 8029aa4:	68bb      	ldr	r3, [r7, #8]
 8029aa6:	617b      	str	r3, [r7, #20]
			node=node->next;
 8029aa8:	68bb      	ldr	r3, [r7, #8]
 8029aaa:	68db      	ldr	r3, [r3, #12]
 8029aac:	60bb      	str	r3, [r7, #8]
		while(node){
 8029aae:	68bb      	ldr	r3, [r7, #8]
 8029ab0:	2b00      	cmp	r3, #0
 8029ab2:	d1e7      	bne.n	8029a84 <tos_NotificationDelItem+0x18>
		}
}
 8029ab4:	bf00      	nop
 8029ab6:	3718      	adds	r7, #24
 8029ab8:	46bd      	mov	sp, r7
 8029aba:	bd80      	pop	{r7, pc}

08029abc <tos_RTC_GetTime>:
	tos_RTC_SetDate(hrtc,tos_Flash_GetYear(),tos_Flash_GetMonth(),tos_Flash_GetDate());
	tos_RTC_SetTime(hrtc,tos_Flash_GetHours(),tos_Flash_GetMinutes(),tos_Flash_GetSeconds());

}

  void tos_RTC_GetTime(RTC_HandleTypeDef *hrtc, uint8_t Screen){
 8029abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029abe:	b083      	sub	sp, #12
 8029ac0:	af00      	add	r7, sp, #0
 8029ac2:	6078      	str	r0, [r7, #4]
 8029ac4:	460b      	mov	r3, r1
 8029ac6:	70fb      	strb	r3, [r7, #3]

			  HAL_RTC_GetTime(hrtc,&myTime,RTC_FORMAT_BIN);
 8029ac8:	2200      	movs	r2, #0
 8029aca:	4932      	ldr	r1, [pc, #200]	; (8029b94 <tos_RTC_GetTime+0xd8>)
 8029acc:	6878      	ldr	r0, [r7, #4]
 8029ace:	f7d9 fd13 	bl	80034f8 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(hrtc,&myDate,RTC_FORMAT_BIN);
 8029ad2:	2200      	movs	r2, #0
 8029ad4:	4930      	ldr	r1, [pc, #192]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029ad6:	6878      	ldr	r0, [r7, #4]
 8029ad8:	f7d9 fe13 	bl	8003702 <HAL_RTC_GetDate>
				switch(Screen){
 8029adc:	78fb      	ldrb	r3, [r7, #3]
 8029ade:	2b00      	cmp	r3, #0
 8029ae0:	d002      	beq.n	8029ae8 <tos_RTC_GetTime+0x2c>
 8029ae2:	2b01      	cmp	r3, #1
 8029ae4:	d020      	beq.n	8029b28 <tos_RTC_GetTime+0x6c>
 8029ae6:	e03f      	b.n	8029b68 <tos_RTC_GetTime+0xac>
				case TOS_SCREEN_MAIN_: MainScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 8029ae8:	4b2a      	ldr	r3, [pc, #168]	; (8029b94 <tos_RTC_GetTime+0xd8>)
 8029aea:	7818      	ldrb	r0, [r3, #0]
 8029aec:	4b29      	ldr	r3, [pc, #164]	; (8029b94 <tos_RTC_GetTime+0xd8>)
 8029aee:	7859      	ldrb	r1, [r3, #1]
 8029af0:	4b28      	ldr	r3, [pc, #160]	; (8029b94 <tos_RTC_GetTime+0xd8>)
 8029af2:	789b      	ldrb	r3, [r3, #2]
 8029af4:	461a      	mov	r2, r3
 8029af6:	f7fa f99d 	bl	8023e34 <MainScreen_SetTime>
				  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8029afa:	4b27      	ldr	r3, [pc, #156]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029afc:	78dc      	ldrb	r4, [r3, #3]
 8029afe:	4b26      	ldr	r3, [pc, #152]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b00:	785d      	ldrb	r5, [r3, #1]
 8029b02:	4b25      	ldr	r3, [pc, #148]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b04:	789e      	ldrb	r6, [r3, #2]
 8029b06:	4b24      	ldr	r3, [pc, #144]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b08:	78d8      	ldrb	r0, [r3, #3]
 8029b0a:	4b23      	ldr	r3, [pc, #140]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b0c:	7859      	ldrb	r1, [r3, #1]
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date));
 8029b0e:	4b22      	ldr	r3, [pc, #136]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b10:	789b      	ldrb	r3, [r3, #2]
				  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8029b12:	b29b      	uxth	r3, r3
 8029b14:	461a      	mov	r2, r3
 8029b16:	f000 f88b 	bl	8029c30 <weekDayFinder>
 8029b1a:	4603      	mov	r3, r0
 8029b1c:	4632      	mov	r2, r6
 8029b1e:	4629      	mov	r1, r5
 8029b20:	4620      	mov	r0, r4
 8029b22:	f7fa f9a5 	bl	8023e70 <MainScreen_SetDate>
				  break;
 8029b26:	e032      	b.n	8029b8e <tos_RTC_GetTime+0xd2>
				case TOS_SCREEN_SLEEPMODE_: SleepModeScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 8029b28:	4b1a      	ldr	r3, [pc, #104]	; (8029b94 <tos_RTC_GetTime+0xd8>)
 8029b2a:	7818      	ldrb	r0, [r3, #0]
 8029b2c:	4b19      	ldr	r3, [pc, #100]	; (8029b94 <tos_RTC_GetTime+0xd8>)
 8029b2e:	7859      	ldrb	r1, [r3, #1]
 8029b30:	4b18      	ldr	r3, [pc, #96]	; (8029b94 <tos_RTC_GetTime+0xd8>)
 8029b32:	789b      	ldrb	r3, [r3, #2]
 8029b34:	461a      	mov	r2, r3
 8029b36:	f7fd fff9 	bl	8027b2c <SleepModeScreen_SetTime>
				SleepModeScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8029b3a:	4b17      	ldr	r3, [pc, #92]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b3c:	78dc      	ldrb	r4, [r3, #3]
 8029b3e:	4b16      	ldr	r3, [pc, #88]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b40:	785d      	ldrb	r5, [r3, #1]
 8029b42:	4b15      	ldr	r3, [pc, #84]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b44:	789e      	ldrb	r6, [r3, #2]
 8029b46:	4b14      	ldr	r3, [pc, #80]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b48:	78d8      	ldrb	r0, [r3, #3]
 8029b4a:	4b13      	ldr	r3, [pc, #76]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b4c:	7859      	ldrb	r1, [r3, #1]
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date)); break;
 8029b4e:	4b12      	ldr	r3, [pc, #72]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b50:	789b      	ldrb	r3, [r3, #2]
				SleepModeScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8029b52:	b29b      	uxth	r3, r3
 8029b54:	461a      	mov	r2, r3
 8029b56:	f000 f86b 	bl	8029c30 <weekDayFinder>
 8029b5a:	4603      	mov	r3, r0
 8029b5c:	4632      	mov	r2, r6
 8029b5e:	4629      	mov	r1, r5
 8029b60:	4620      	mov	r0, r4
 8029b62:	f7fe f801 	bl	8027b68 <SleepModeScreen_SetDate>
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date)); break;
 8029b66:	e012      	b.n	8029b8e <tos_RTC_GetTime+0xd2>
				default:
					  SettingsScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 8029b68:	4b0a      	ldr	r3, [pc, #40]	; (8029b94 <tos_RTC_GetTime+0xd8>)
 8029b6a:	7818      	ldrb	r0, [r3, #0]
 8029b6c:	4b09      	ldr	r3, [pc, #36]	; (8029b94 <tos_RTC_GetTime+0xd8>)
 8029b6e:	7859      	ldrb	r1, [r3, #1]
 8029b70:	4b08      	ldr	r3, [pc, #32]	; (8029b94 <tos_RTC_GetTime+0xd8>)
 8029b72:	789b      	ldrb	r3, [r3, #2]
 8029b74:	461a      	mov	r2, r3
 8029b76:	f7fd fcef 	bl	8027558 <SettingsScreen_SetTime>
					  SettingsScreen_SetDate(myDate.Year,myDate.Month,myDate.Date);
 8029b7a:	4b07      	ldr	r3, [pc, #28]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b7c:	78d8      	ldrb	r0, [r3, #3]
 8029b7e:	4b06      	ldr	r3, [pc, #24]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b80:	7859      	ldrb	r1, [r3, #1]
 8029b82:	4b05      	ldr	r3, [pc, #20]	; (8029b98 <tos_RTC_GetTime+0xdc>)
 8029b84:	789b      	ldrb	r3, [r3, #2]
 8029b86:	461a      	mov	r2, r3
 8029b88:	f7fd fd0e 	bl	80275a8 <SettingsScreen_SetDate>
					  return;
 8029b8c:	bf00      	nop
				}

			/*  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
					  weekDayFinder(myDate.Year,myDate.Month,myDate.Date));*/
  }
 8029b8e:	370c      	adds	r7, #12
 8029b90:	46bd      	mov	sp, r7
 8029b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029b94:	2001b5a8 	.word	0x2001b5a8
 8029b98:	2001b5bc 	.word	0x2001b5bc

08029b9c <tos_RTC_SetTime>:

  void tos_RTC_SetTime(RTC_HandleTypeDef *hrtc,uint8_t setHours,uint8_t setMins,uint8_t setSecs){
 8029b9c:	b580      	push	{r7, lr}
 8029b9e:	b082      	sub	sp, #8
 8029ba0:	af00      	add	r7, sp, #0
 8029ba2:	6078      	str	r0, [r7, #4]
 8029ba4:	4608      	mov	r0, r1
 8029ba6:	4611      	mov	r1, r2
 8029ba8:	461a      	mov	r2, r3
 8029baa:	4603      	mov	r3, r0
 8029bac:	70fb      	strb	r3, [r7, #3]
 8029bae:	460b      	mov	r3, r1
 8029bb0:	70bb      	strb	r3, [r7, #2]
 8029bb2:	4613      	mov	r3, r2
 8029bb4:	707b      	strb	r3, [r7, #1]
	  myTime.Hours = setHours;
 8029bb6:	4a09      	ldr	r2, [pc, #36]	; (8029bdc <tos_RTC_SetTime+0x40>)
 8029bb8:	78fb      	ldrb	r3, [r7, #3]
 8029bba:	7013      	strb	r3, [r2, #0]
	  myTime.Minutes = setMins;
 8029bbc:	4a07      	ldr	r2, [pc, #28]	; (8029bdc <tos_RTC_SetTime+0x40>)
 8029bbe:	78bb      	ldrb	r3, [r7, #2]
 8029bc0:	7053      	strb	r3, [r2, #1]
	  myTime.Seconds = setSecs;
 8029bc2:	4a06      	ldr	r2, [pc, #24]	; (8029bdc <tos_RTC_SetTime+0x40>)
 8029bc4:	787b      	ldrb	r3, [r7, #1]
 8029bc6:	7093      	strb	r3, [r2, #2]
	  HAL_RTC_SetTime(hrtc,&myTime,RTC_FORMAT_BIN);
 8029bc8:	2200      	movs	r2, #0
 8029bca:	4904      	ldr	r1, [pc, #16]	; (8029bdc <tos_RTC_SetTime+0x40>)
 8029bcc:	6878      	ldr	r0, [r7, #4]
 8029bce:	f7d9 fbd6 	bl	800337e <HAL_RTC_SetTime>
  }
 8029bd2:	bf00      	nop
 8029bd4:	3708      	adds	r7, #8
 8029bd6:	46bd      	mov	sp, r7
 8029bd8:	bd80      	pop	{r7, pc}
 8029bda:	bf00      	nop
 8029bdc:	2001b5a8 	.word	0x2001b5a8

08029be0 <tos_RTC_SetDate>:

  void tos_RTC_SetDate(RTC_HandleTypeDef *hrtc,uint8_t setYear,uint8_t setMonth,uint8_t setDate){
 8029be0:	b580      	push	{r7, lr}
 8029be2:	b082      	sub	sp, #8
 8029be4:	af00      	add	r7, sp, #0
 8029be6:	6078      	str	r0, [r7, #4]
 8029be8:	4608      	mov	r0, r1
 8029bea:	4611      	mov	r1, r2
 8029bec:	461a      	mov	r2, r3
 8029bee:	4603      	mov	r3, r0
 8029bf0:	70fb      	strb	r3, [r7, #3]
 8029bf2:	460b      	mov	r3, r1
 8029bf4:	70bb      	strb	r3, [r7, #2]
 8029bf6:	4613      	mov	r3, r2
 8029bf8:	707b      	strb	r3, [r7, #1]
	  if(setDate>31 || setMonth>12) return;
 8029bfa:	787b      	ldrb	r3, [r7, #1]
 8029bfc:	2b1f      	cmp	r3, #31
 8029bfe:	d811      	bhi.n	8029c24 <tos_RTC_SetDate+0x44>
 8029c00:	78bb      	ldrb	r3, [r7, #2]
 8029c02:	2b0c      	cmp	r3, #12
 8029c04:	d80e      	bhi.n	8029c24 <tos_RTC_SetDate+0x44>
	  myDate.Month = setMonth;
 8029c06:	4a09      	ldr	r2, [pc, #36]	; (8029c2c <tos_RTC_SetDate+0x4c>)
 8029c08:	78bb      	ldrb	r3, [r7, #2]
 8029c0a:	7053      	strb	r3, [r2, #1]
	  myDate.Date = setDate;
 8029c0c:	4a07      	ldr	r2, [pc, #28]	; (8029c2c <tos_RTC_SetDate+0x4c>)
 8029c0e:	787b      	ldrb	r3, [r7, #1]
 8029c10:	7093      	strb	r3, [r2, #2]
	  myDate.Year = setYear;
 8029c12:	4a06      	ldr	r2, [pc, #24]	; (8029c2c <tos_RTC_SetDate+0x4c>)
 8029c14:	78fb      	ldrb	r3, [r7, #3]
 8029c16:	70d3      	strb	r3, [r2, #3]
	  HAL_RTC_SetDate(hrtc,&myDate,RTC_FORMAT_BIN);
 8029c18:	2200      	movs	r2, #0
 8029c1a:	4904      	ldr	r1, [pc, #16]	; (8029c2c <tos_RTC_SetDate+0x4c>)
 8029c1c:	6878      	ldr	r0, [r7, #4]
 8029c1e:	f7d9 fcc9 	bl	80035b4 <HAL_RTC_SetDate>
 8029c22:	e000      	b.n	8029c26 <tos_RTC_SetDate+0x46>
	  if(setDate>31 || setMonth>12) return;
 8029c24:	bf00      	nop
  }
 8029c26:	3708      	adds	r7, #8
 8029c28:	46bd      	mov	sp, r7
 8029c2a:	bd80      	pop	{r7, pc}
 8029c2c:	2001b5bc 	.word	0x2001b5bc

08029c30 <weekDayFinder>:



char * weekDayFinder(uint8_t getYear,uint8_t getMonth,uint16_t getDate){
 8029c30:	b590      	push	{r4, r7, lr}
 8029c32:	b087      	sub	sp, #28
 8029c34:	af00      	add	r7, sp, #0
 8029c36:	4603      	mov	r3, r0
 8029c38:	71fb      	strb	r3, [r7, #7]
 8029c3a:	460b      	mov	r3, r1
 8029c3c:	71bb      	strb	r3, [r7, #6]
 8029c3e:	4613      	mov	r3, r2
 8029c40:	80bb      	strh	r3, [r7, #4]
	getYear=getYear+2000;
 8029c42:	79fb      	ldrb	r3, [r7, #7]
 8029c44:	3b30      	subs	r3, #48	; 0x30
 8029c46:	71fb      	strb	r3, [r7, #7]
	static uint8_t t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	getYear-= getMonth < 3;
 8029c48:	79bb      	ldrb	r3, [r7, #6]
 8029c4a:	2b02      	cmp	r3, #2
 8029c4c:	bf94      	ite	ls
 8029c4e:	2301      	movls	r3, #1
 8029c50:	2300      	movhi	r3, #0
 8029c52:	b2db      	uxtb	r3, r3
 8029c54:	461a      	mov	r2, r3
 8029c56:	79fb      	ldrb	r3, [r7, #7]
 8029c58:	1a9b      	subs	r3, r3, r2
 8029c5a:	71fb      	strb	r3, [r7, #7]
	double weekDayTmp =(double)((getYear + (getYear/4) - (getYear/100) + (getYear/400) + t[getMonth-1] + getDate) % 7);
 8029c5c:	79fb      	ldrb	r3, [r7, #7]
 8029c5e:	79fa      	ldrb	r2, [r7, #7]
 8029c60:	0892      	lsrs	r2, r2, #2
 8029c62:	b2d2      	uxtb	r2, r2
 8029c64:	4413      	add	r3, r2
 8029c66:	79fa      	ldrb	r2, [r7, #7]
 8029c68:	492a      	ldr	r1, [pc, #168]	; (8029d14 <weekDayFinder+0xe4>)
 8029c6a:	fba1 1202 	umull	r1, r2, r1, r2
 8029c6e:	0952      	lsrs	r2, r2, #5
 8029c70:	b2d2      	uxtb	r2, r2
 8029c72:	1a9a      	subs	r2, r3, r2
 8029c74:	79fb      	ldrb	r3, [r7, #7]
 8029c76:	4927      	ldr	r1, [pc, #156]	; (8029d14 <weekDayFinder+0xe4>)
 8029c78:	fb81 0103 	smull	r0, r1, r1, r3
 8029c7c:	11c9      	asrs	r1, r1, #7
 8029c7e:	17db      	asrs	r3, r3, #31
 8029c80:	1acb      	subs	r3, r1, r3
 8029c82:	4413      	add	r3, r2
 8029c84:	79ba      	ldrb	r2, [r7, #6]
 8029c86:	3a01      	subs	r2, #1
 8029c88:	4923      	ldr	r1, [pc, #140]	; (8029d18 <weekDayFinder+0xe8>)
 8029c8a:	5c8a      	ldrb	r2, [r1, r2]
 8029c8c:	441a      	add	r2, r3
 8029c8e:	88bb      	ldrh	r3, [r7, #4]
 8029c90:	441a      	add	r2, r3
 8029c92:	4b22      	ldr	r3, [pc, #136]	; (8029d1c <weekDayFinder+0xec>)
 8029c94:	fb83 1302 	smull	r1, r3, r3, r2
 8029c98:	4413      	add	r3, r2
 8029c9a:	1099      	asrs	r1, r3, #2
 8029c9c:	17d3      	asrs	r3, r2, #31
 8029c9e:	1ac9      	subs	r1, r1, r3
 8029ca0:	460b      	mov	r3, r1
 8029ca2:	00db      	lsls	r3, r3, #3
 8029ca4:	1a5b      	subs	r3, r3, r1
 8029ca6:	1ad1      	subs	r1, r2, r3
 8029ca8:	4608      	mov	r0, r1
 8029caa:	f7d6 fc4b 	bl	8000544 <__aeabi_i2d>
 8029cae:	4603      	mov	r3, r0
 8029cb0:	460c      	mov	r4, r1
 8029cb2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint8_t weekDay =tos_Rounding(weekDayTmp);
 8029cb6:	ed97 0b04 	vldr	d0, [r7, #16]
 8029cba:	f7ff fbff 	bl	80294bc <tos_Rounding>
 8029cbe:	4603      	mov	r3, r0
 8029cc0:	73fb      	strb	r3, [r7, #15]


	switch(weekDay){
 8029cc2:	7bfb      	ldrb	r3, [r7, #15]
 8029cc4:	2b06      	cmp	r3, #6
 8029cc6:	d81f      	bhi.n	8029d08 <weekDayFinder+0xd8>
 8029cc8:	a201      	add	r2, pc, #4	; (adr r2, 8029cd0 <weekDayFinder+0xa0>)
 8029cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029cce:	bf00      	nop
 8029cd0:	08029ced 	.word	0x08029ced
 8029cd4:	08029cf1 	.word	0x08029cf1
 8029cd8:	08029cf5 	.word	0x08029cf5
 8029cdc:	08029cf9 	.word	0x08029cf9
 8029ce0:	08029cfd 	.word	0x08029cfd
 8029ce4:	08029d01 	.word	0x08029d01
 8029ce8:	08029d05 	.word	0x08029d05
	case 0: return "Pazartesi"; break;
 8029cec:	4b0c      	ldr	r3, [pc, #48]	; (8029d20 <weekDayFinder+0xf0>)
 8029cee:	e00c      	b.n	8029d0a <weekDayFinder+0xda>
	case 1: return "Sali"; break;
 8029cf0:	4b0c      	ldr	r3, [pc, #48]	; (8029d24 <weekDayFinder+0xf4>)
 8029cf2:	e00a      	b.n	8029d0a <weekDayFinder+0xda>
	case 2: return "Carsamba"; break;
 8029cf4:	4b0c      	ldr	r3, [pc, #48]	; (8029d28 <weekDayFinder+0xf8>)
 8029cf6:	e008      	b.n	8029d0a <weekDayFinder+0xda>
	case 3: return "Persembe"; break;
 8029cf8:	4b0c      	ldr	r3, [pc, #48]	; (8029d2c <weekDayFinder+0xfc>)
 8029cfa:	e006      	b.n	8029d0a <weekDayFinder+0xda>
	case 4: return "Cuma"; break;
 8029cfc:	4b0c      	ldr	r3, [pc, #48]	; (8029d30 <weekDayFinder+0x100>)
 8029cfe:	e004      	b.n	8029d0a <weekDayFinder+0xda>
	case 5: return "Cumartesi"; break;
 8029d00:	4b0c      	ldr	r3, [pc, #48]	; (8029d34 <weekDayFinder+0x104>)
 8029d02:	e002      	b.n	8029d0a <weekDayFinder+0xda>
	case 6: return "Pazar"; break;
 8029d04:	4b0c      	ldr	r3, [pc, #48]	; (8029d38 <weekDayFinder+0x108>)
 8029d06:	e000      	b.n	8029d0a <weekDayFinder+0xda>
	default: return " ";
 8029d08:	4b0c      	ldr	r3, [pc, #48]	; (8029d3c <weekDayFinder+0x10c>)
	}

}
 8029d0a:	4618      	mov	r0, r3
 8029d0c:	371c      	adds	r7, #28
 8029d0e:	46bd      	mov	sp, r7
 8029d10:	bd90      	pop	{r4, r7, pc}
 8029d12:	bf00      	nop
 8029d14:	51eb851f 	.word	0x51eb851f
 8029d18:	20002850 	.word	0x20002850
 8029d1c:	92492493 	.word	0x92492493
 8029d20:	0802d0e8 	.word	0x0802d0e8
 8029d24:	0802d0f4 	.word	0x0802d0f4
 8029d28:	0802d0fc 	.word	0x0802d0fc
 8029d2c:	0802d108 	.word	0x0802d108
 8029d30:	0802d114 	.word	0x0802d114
 8029d34:	0802d11c 	.word	0x0802d11c
 8029d38:	0802d128 	.word	0x0802d128
 8029d3c:	0802d130 	.word	0x0802d130

08029d40 <__errno>:
 8029d40:	4b01      	ldr	r3, [pc, #4]	; (8029d48 <__errno+0x8>)
 8029d42:	6818      	ldr	r0, [r3, #0]
 8029d44:	4770      	bx	lr
 8029d46:	bf00      	nop
 8029d48:	2000285c 	.word	0x2000285c

08029d4c <__libc_init_array>:
 8029d4c:	b570      	push	{r4, r5, r6, lr}
 8029d4e:	4e0d      	ldr	r6, [pc, #52]	; (8029d84 <__libc_init_array+0x38>)
 8029d50:	4c0d      	ldr	r4, [pc, #52]	; (8029d88 <__libc_init_array+0x3c>)
 8029d52:	1ba4      	subs	r4, r4, r6
 8029d54:	10a4      	asrs	r4, r4, #2
 8029d56:	2500      	movs	r5, #0
 8029d58:	42a5      	cmp	r5, r4
 8029d5a:	d109      	bne.n	8029d70 <__libc_init_array+0x24>
 8029d5c:	4e0b      	ldr	r6, [pc, #44]	; (8029d8c <__libc_init_array+0x40>)
 8029d5e:	4c0c      	ldr	r4, [pc, #48]	; (8029d90 <__libc_init_array+0x44>)
 8029d60:	f002 fd4a 	bl	802c7f8 <_init>
 8029d64:	1ba4      	subs	r4, r4, r6
 8029d66:	10a4      	asrs	r4, r4, #2
 8029d68:	2500      	movs	r5, #0
 8029d6a:	42a5      	cmp	r5, r4
 8029d6c:	d105      	bne.n	8029d7a <__libc_init_array+0x2e>
 8029d6e:	bd70      	pop	{r4, r5, r6, pc}
 8029d70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8029d74:	4798      	blx	r3
 8029d76:	3501      	adds	r5, #1
 8029d78:	e7ee      	b.n	8029d58 <__libc_init_array+0xc>
 8029d7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8029d7e:	4798      	blx	r3
 8029d80:	3501      	adds	r5, #1
 8029d82:	e7f2      	b.n	8029d6a <__libc_init_array+0x1e>
 8029d84:	08047efc 	.word	0x08047efc
 8029d88:	08047efc 	.word	0x08047efc
 8029d8c:	08047efc 	.word	0x08047efc
 8029d90:	08047f00 	.word	0x08047f00

08029d94 <malloc>:
 8029d94:	4b02      	ldr	r3, [pc, #8]	; (8029da0 <malloc+0xc>)
 8029d96:	4601      	mov	r1, r0
 8029d98:	6818      	ldr	r0, [r3, #0]
 8029d9a:	f000 b86d 	b.w	8029e78 <_malloc_r>
 8029d9e:	bf00      	nop
 8029da0:	2000285c 	.word	0x2000285c

08029da4 <free>:
 8029da4:	4b02      	ldr	r3, [pc, #8]	; (8029db0 <free+0xc>)
 8029da6:	4601      	mov	r1, r0
 8029da8:	6818      	ldr	r0, [r3, #0]
 8029daa:	f000 b817 	b.w	8029ddc <_free_r>
 8029dae:	bf00      	nop
 8029db0:	2000285c 	.word	0x2000285c

08029db4 <memcpy>:
 8029db4:	b510      	push	{r4, lr}
 8029db6:	1e43      	subs	r3, r0, #1
 8029db8:	440a      	add	r2, r1
 8029dba:	4291      	cmp	r1, r2
 8029dbc:	d100      	bne.n	8029dc0 <memcpy+0xc>
 8029dbe:	bd10      	pop	{r4, pc}
 8029dc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029dc8:	e7f7      	b.n	8029dba <memcpy+0x6>

08029dca <memset>:
 8029dca:	4402      	add	r2, r0
 8029dcc:	4603      	mov	r3, r0
 8029dce:	4293      	cmp	r3, r2
 8029dd0:	d100      	bne.n	8029dd4 <memset+0xa>
 8029dd2:	4770      	bx	lr
 8029dd4:	f803 1b01 	strb.w	r1, [r3], #1
 8029dd8:	e7f9      	b.n	8029dce <memset+0x4>
	...

08029ddc <_free_r>:
 8029ddc:	b538      	push	{r3, r4, r5, lr}
 8029dde:	4605      	mov	r5, r0
 8029de0:	2900      	cmp	r1, #0
 8029de2:	d045      	beq.n	8029e70 <_free_r+0x94>
 8029de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029de8:	1f0c      	subs	r4, r1, #4
 8029dea:	2b00      	cmp	r3, #0
 8029dec:	bfb8      	it	lt
 8029dee:	18e4      	addlt	r4, r4, r3
 8029df0:	f001 fbc4 	bl	802b57c <__malloc_lock>
 8029df4:	4a1f      	ldr	r2, [pc, #124]	; (8029e74 <_free_r+0x98>)
 8029df6:	6813      	ldr	r3, [r2, #0]
 8029df8:	4610      	mov	r0, r2
 8029dfa:	b933      	cbnz	r3, 8029e0a <_free_r+0x2e>
 8029dfc:	6063      	str	r3, [r4, #4]
 8029dfe:	6014      	str	r4, [r2, #0]
 8029e00:	4628      	mov	r0, r5
 8029e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029e06:	f001 bbba 	b.w	802b57e <__malloc_unlock>
 8029e0a:	42a3      	cmp	r3, r4
 8029e0c:	d90c      	bls.n	8029e28 <_free_r+0x4c>
 8029e0e:	6821      	ldr	r1, [r4, #0]
 8029e10:	1862      	adds	r2, r4, r1
 8029e12:	4293      	cmp	r3, r2
 8029e14:	bf04      	itt	eq
 8029e16:	681a      	ldreq	r2, [r3, #0]
 8029e18:	685b      	ldreq	r3, [r3, #4]
 8029e1a:	6063      	str	r3, [r4, #4]
 8029e1c:	bf04      	itt	eq
 8029e1e:	1852      	addeq	r2, r2, r1
 8029e20:	6022      	streq	r2, [r4, #0]
 8029e22:	6004      	str	r4, [r0, #0]
 8029e24:	e7ec      	b.n	8029e00 <_free_r+0x24>
 8029e26:	4613      	mov	r3, r2
 8029e28:	685a      	ldr	r2, [r3, #4]
 8029e2a:	b10a      	cbz	r2, 8029e30 <_free_r+0x54>
 8029e2c:	42a2      	cmp	r2, r4
 8029e2e:	d9fa      	bls.n	8029e26 <_free_r+0x4a>
 8029e30:	6819      	ldr	r1, [r3, #0]
 8029e32:	1858      	adds	r0, r3, r1
 8029e34:	42a0      	cmp	r0, r4
 8029e36:	d10b      	bne.n	8029e50 <_free_r+0x74>
 8029e38:	6820      	ldr	r0, [r4, #0]
 8029e3a:	4401      	add	r1, r0
 8029e3c:	1858      	adds	r0, r3, r1
 8029e3e:	4282      	cmp	r2, r0
 8029e40:	6019      	str	r1, [r3, #0]
 8029e42:	d1dd      	bne.n	8029e00 <_free_r+0x24>
 8029e44:	6810      	ldr	r0, [r2, #0]
 8029e46:	6852      	ldr	r2, [r2, #4]
 8029e48:	605a      	str	r2, [r3, #4]
 8029e4a:	4401      	add	r1, r0
 8029e4c:	6019      	str	r1, [r3, #0]
 8029e4e:	e7d7      	b.n	8029e00 <_free_r+0x24>
 8029e50:	d902      	bls.n	8029e58 <_free_r+0x7c>
 8029e52:	230c      	movs	r3, #12
 8029e54:	602b      	str	r3, [r5, #0]
 8029e56:	e7d3      	b.n	8029e00 <_free_r+0x24>
 8029e58:	6820      	ldr	r0, [r4, #0]
 8029e5a:	1821      	adds	r1, r4, r0
 8029e5c:	428a      	cmp	r2, r1
 8029e5e:	bf04      	itt	eq
 8029e60:	6811      	ldreq	r1, [r2, #0]
 8029e62:	6852      	ldreq	r2, [r2, #4]
 8029e64:	6062      	str	r2, [r4, #4]
 8029e66:	bf04      	itt	eq
 8029e68:	1809      	addeq	r1, r1, r0
 8029e6a:	6021      	streq	r1, [r4, #0]
 8029e6c:	605c      	str	r4, [r3, #4]
 8029e6e:	e7c7      	b.n	8029e00 <_free_r+0x24>
 8029e70:	bd38      	pop	{r3, r4, r5, pc}
 8029e72:	bf00      	nop
 8029e74:	2001b5c0 	.word	0x2001b5c0

08029e78 <_malloc_r>:
 8029e78:	b570      	push	{r4, r5, r6, lr}
 8029e7a:	1ccd      	adds	r5, r1, #3
 8029e7c:	f025 0503 	bic.w	r5, r5, #3
 8029e80:	3508      	adds	r5, #8
 8029e82:	2d0c      	cmp	r5, #12
 8029e84:	bf38      	it	cc
 8029e86:	250c      	movcc	r5, #12
 8029e88:	2d00      	cmp	r5, #0
 8029e8a:	4606      	mov	r6, r0
 8029e8c:	db01      	blt.n	8029e92 <_malloc_r+0x1a>
 8029e8e:	42a9      	cmp	r1, r5
 8029e90:	d903      	bls.n	8029e9a <_malloc_r+0x22>
 8029e92:	230c      	movs	r3, #12
 8029e94:	6033      	str	r3, [r6, #0]
 8029e96:	2000      	movs	r0, #0
 8029e98:	bd70      	pop	{r4, r5, r6, pc}
 8029e9a:	f001 fb6f 	bl	802b57c <__malloc_lock>
 8029e9e:	4a21      	ldr	r2, [pc, #132]	; (8029f24 <_malloc_r+0xac>)
 8029ea0:	6814      	ldr	r4, [r2, #0]
 8029ea2:	4621      	mov	r1, r4
 8029ea4:	b991      	cbnz	r1, 8029ecc <_malloc_r+0x54>
 8029ea6:	4c20      	ldr	r4, [pc, #128]	; (8029f28 <_malloc_r+0xb0>)
 8029ea8:	6823      	ldr	r3, [r4, #0]
 8029eaa:	b91b      	cbnz	r3, 8029eb4 <_malloc_r+0x3c>
 8029eac:	4630      	mov	r0, r6
 8029eae:	f000 fc99 	bl	802a7e4 <_sbrk_r>
 8029eb2:	6020      	str	r0, [r4, #0]
 8029eb4:	4629      	mov	r1, r5
 8029eb6:	4630      	mov	r0, r6
 8029eb8:	f000 fc94 	bl	802a7e4 <_sbrk_r>
 8029ebc:	1c43      	adds	r3, r0, #1
 8029ebe:	d124      	bne.n	8029f0a <_malloc_r+0x92>
 8029ec0:	230c      	movs	r3, #12
 8029ec2:	6033      	str	r3, [r6, #0]
 8029ec4:	4630      	mov	r0, r6
 8029ec6:	f001 fb5a 	bl	802b57e <__malloc_unlock>
 8029eca:	e7e4      	b.n	8029e96 <_malloc_r+0x1e>
 8029ecc:	680b      	ldr	r3, [r1, #0]
 8029ece:	1b5b      	subs	r3, r3, r5
 8029ed0:	d418      	bmi.n	8029f04 <_malloc_r+0x8c>
 8029ed2:	2b0b      	cmp	r3, #11
 8029ed4:	d90f      	bls.n	8029ef6 <_malloc_r+0x7e>
 8029ed6:	600b      	str	r3, [r1, #0]
 8029ed8:	50cd      	str	r5, [r1, r3]
 8029eda:	18cc      	adds	r4, r1, r3
 8029edc:	4630      	mov	r0, r6
 8029ede:	f001 fb4e 	bl	802b57e <__malloc_unlock>
 8029ee2:	f104 000b 	add.w	r0, r4, #11
 8029ee6:	1d23      	adds	r3, r4, #4
 8029ee8:	f020 0007 	bic.w	r0, r0, #7
 8029eec:	1ac3      	subs	r3, r0, r3
 8029eee:	d0d3      	beq.n	8029e98 <_malloc_r+0x20>
 8029ef0:	425a      	negs	r2, r3
 8029ef2:	50e2      	str	r2, [r4, r3]
 8029ef4:	e7d0      	b.n	8029e98 <_malloc_r+0x20>
 8029ef6:	428c      	cmp	r4, r1
 8029ef8:	684b      	ldr	r3, [r1, #4]
 8029efa:	bf16      	itet	ne
 8029efc:	6063      	strne	r3, [r4, #4]
 8029efe:	6013      	streq	r3, [r2, #0]
 8029f00:	460c      	movne	r4, r1
 8029f02:	e7eb      	b.n	8029edc <_malloc_r+0x64>
 8029f04:	460c      	mov	r4, r1
 8029f06:	6849      	ldr	r1, [r1, #4]
 8029f08:	e7cc      	b.n	8029ea4 <_malloc_r+0x2c>
 8029f0a:	1cc4      	adds	r4, r0, #3
 8029f0c:	f024 0403 	bic.w	r4, r4, #3
 8029f10:	42a0      	cmp	r0, r4
 8029f12:	d005      	beq.n	8029f20 <_malloc_r+0xa8>
 8029f14:	1a21      	subs	r1, r4, r0
 8029f16:	4630      	mov	r0, r6
 8029f18:	f000 fc64 	bl	802a7e4 <_sbrk_r>
 8029f1c:	3001      	adds	r0, #1
 8029f1e:	d0cf      	beq.n	8029ec0 <_malloc_r+0x48>
 8029f20:	6025      	str	r5, [r4, #0]
 8029f22:	e7db      	b.n	8029edc <_malloc_r+0x64>
 8029f24:	2001b5c0 	.word	0x2001b5c0
 8029f28:	2001b5c4 	.word	0x2001b5c4

08029f2c <__cvt>:
 8029f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029f30:	ec55 4b10 	vmov	r4, r5, d0
 8029f34:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8029f36:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8029f3a:	2d00      	cmp	r5, #0
 8029f3c:	460e      	mov	r6, r1
 8029f3e:	4691      	mov	r9, r2
 8029f40:	4619      	mov	r1, r3
 8029f42:	bfb8      	it	lt
 8029f44:	4622      	movlt	r2, r4
 8029f46:	462b      	mov	r3, r5
 8029f48:	f027 0720 	bic.w	r7, r7, #32
 8029f4c:	bfbb      	ittet	lt
 8029f4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8029f52:	461d      	movlt	r5, r3
 8029f54:	2300      	movge	r3, #0
 8029f56:	232d      	movlt	r3, #45	; 0x2d
 8029f58:	bfb8      	it	lt
 8029f5a:	4614      	movlt	r4, r2
 8029f5c:	2f46      	cmp	r7, #70	; 0x46
 8029f5e:	700b      	strb	r3, [r1, #0]
 8029f60:	d004      	beq.n	8029f6c <__cvt+0x40>
 8029f62:	2f45      	cmp	r7, #69	; 0x45
 8029f64:	d100      	bne.n	8029f68 <__cvt+0x3c>
 8029f66:	3601      	adds	r6, #1
 8029f68:	2102      	movs	r1, #2
 8029f6a:	e000      	b.n	8029f6e <__cvt+0x42>
 8029f6c:	2103      	movs	r1, #3
 8029f6e:	ab03      	add	r3, sp, #12
 8029f70:	9301      	str	r3, [sp, #4]
 8029f72:	ab02      	add	r3, sp, #8
 8029f74:	9300      	str	r3, [sp, #0]
 8029f76:	4632      	mov	r2, r6
 8029f78:	4653      	mov	r3, sl
 8029f7a:	ec45 4b10 	vmov	d0, r4, r5
 8029f7e:	f000 fd37 	bl	802a9f0 <_dtoa_r>
 8029f82:	2f47      	cmp	r7, #71	; 0x47
 8029f84:	4680      	mov	r8, r0
 8029f86:	d102      	bne.n	8029f8e <__cvt+0x62>
 8029f88:	f019 0f01 	tst.w	r9, #1
 8029f8c:	d026      	beq.n	8029fdc <__cvt+0xb0>
 8029f8e:	2f46      	cmp	r7, #70	; 0x46
 8029f90:	eb08 0906 	add.w	r9, r8, r6
 8029f94:	d111      	bne.n	8029fba <__cvt+0x8e>
 8029f96:	f898 3000 	ldrb.w	r3, [r8]
 8029f9a:	2b30      	cmp	r3, #48	; 0x30
 8029f9c:	d10a      	bne.n	8029fb4 <__cvt+0x88>
 8029f9e:	2200      	movs	r2, #0
 8029fa0:	2300      	movs	r3, #0
 8029fa2:	4620      	mov	r0, r4
 8029fa4:	4629      	mov	r1, r5
 8029fa6:	f7d6 fd9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8029faa:	b918      	cbnz	r0, 8029fb4 <__cvt+0x88>
 8029fac:	f1c6 0601 	rsb	r6, r6, #1
 8029fb0:	f8ca 6000 	str.w	r6, [sl]
 8029fb4:	f8da 3000 	ldr.w	r3, [sl]
 8029fb8:	4499      	add	r9, r3
 8029fba:	2200      	movs	r2, #0
 8029fbc:	2300      	movs	r3, #0
 8029fbe:	4620      	mov	r0, r4
 8029fc0:	4629      	mov	r1, r5
 8029fc2:	f7d6 fd91 	bl	8000ae8 <__aeabi_dcmpeq>
 8029fc6:	b938      	cbnz	r0, 8029fd8 <__cvt+0xac>
 8029fc8:	2230      	movs	r2, #48	; 0x30
 8029fca:	9b03      	ldr	r3, [sp, #12]
 8029fcc:	454b      	cmp	r3, r9
 8029fce:	d205      	bcs.n	8029fdc <__cvt+0xb0>
 8029fd0:	1c59      	adds	r1, r3, #1
 8029fd2:	9103      	str	r1, [sp, #12]
 8029fd4:	701a      	strb	r2, [r3, #0]
 8029fd6:	e7f8      	b.n	8029fca <__cvt+0x9e>
 8029fd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8029fdc:	9b03      	ldr	r3, [sp, #12]
 8029fde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029fe0:	eba3 0308 	sub.w	r3, r3, r8
 8029fe4:	4640      	mov	r0, r8
 8029fe6:	6013      	str	r3, [r2, #0]
 8029fe8:	b004      	add	sp, #16
 8029fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08029fee <__exponent>:
 8029fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029ff0:	2900      	cmp	r1, #0
 8029ff2:	4604      	mov	r4, r0
 8029ff4:	bfba      	itte	lt
 8029ff6:	4249      	neglt	r1, r1
 8029ff8:	232d      	movlt	r3, #45	; 0x2d
 8029ffa:	232b      	movge	r3, #43	; 0x2b
 8029ffc:	2909      	cmp	r1, #9
 8029ffe:	f804 2b02 	strb.w	r2, [r4], #2
 802a002:	7043      	strb	r3, [r0, #1]
 802a004:	dd20      	ble.n	802a048 <__exponent+0x5a>
 802a006:	f10d 0307 	add.w	r3, sp, #7
 802a00a:	461f      	mov	r7, r3
 802a00c:	260a      	movs	r6, #10
 802a00e:	fb91 f5f6 	sdiv	r5, r1, r6
 802a012:	fb06 1115 	mls	r1, r6, r5, r1
 802a016:	3130      	adds	r1, #48	; 0x30
 802a018:	2d09      	cmp	r5, #9
 802a01a:	f803 1c01 	strb.w	r1, [r3, #-1]
 802a01e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 802a022:	4629      	mov	r1, r5
 802a024:	dc09      	bgt.n	802a03a <__exponent+0x4c>
 802a026:	3130      	adds	r1, #48	; 0x30
 802a028:	3b02      	subs	r3, #2
 802a02a:	f802 1c01 	strb.w	r1, [r2, #-1]
 802a02e:	42bb      	cmp	r3, r7
 802a030:	4622      	mov	r2, r4
 802a032:	d304      	bcc.n	802a03e <__exponent+0x50>
 802a034:	1a10      	subs	r0, r2, r0
 802a036:	b003      	add	sp, #12
 802a038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a03a:	4613      	mov	r3, r2
 802a03c:	e7e7      	b.n	802a00e <__exponent+0x20>
 802a03e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a042:	f804 2b01 	strb.w	r2, [r4], #1
 802a046:	e7f2      	b.n	802a02e <__exponent+0x40>
 802a048:	2330      	movs	r3, #48	; 0x30
 802a04a:	4419      	add	r1, r3
 802a04c:	7083      	strb	r3, [r0, #2]
 802a04e:	1d02      	adds	r2, r0, #4
 802a050:	70c1      	strb	r1, [r0, #3]
 802a052:	e7ef      	b.n	802a034 <__exponent+0x46>

0802a054 <_printf_float>:
 802a054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a058:	b08d      	sub	sp, #52	; 0x34
 802a05a:	460c      	mov	r4, r1
 802a05c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 802a060:	4616      	mov	r6, r2
 802a062:	461f      	mov	r7, r3
 802a064:	4605      	mov	r5, r0
 802a066:	f001 fa7b 	bl	802b560 <_localeconv_r>
 802a06a:	6803      	ldr	r3, [r0, #0]
 802a06c:	9304      	str	r3, [sp, #16]
 802a06e:	4618      	mov	r0, r3
 802a070:	f7d6 f8b8 	bl	80001e4 <strlen>
 802a074:	2300      	movs	r3, #0
 802a076:	930a      	str	r3, [sp, #40]	; 0x28
 802a078:	f8d8 3000 	ldr.w	r3, [r8]
 802a07c:	9005      	str	r0, [sp, #20]
 802a07e:	3307      	adds	r3, #7
 802a080:	f023 0307 	bic.w	r3, r3, #7
 802a084:	f103 0208 	add.w	r2, r3, #8
 802a088:	f894 a018 	ldrb.w	sl, [r4, #24]
 802a08c:	f8d4 b000 	ldr.w	fp, [r4]
 802a090:	f8c8 2000 	str.w	r2, [r8]
 802a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a098:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802a09c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802a0a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802a0a4:	9307      	str	r3, [sp, #28]
 802a0a6:	f8cd 8018 	str.w	r8, [sp, #24]
 802a0aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802a0ae:	4ba7      	ldr	r3, [pc, #668]	; (802a34c <_printf_float+0x2f8>)
 802a0b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802a0b4:	f7d6 fd4a 	bl	8000b4c <__aeabi_dcmpun>
 802a0b8:	bb70      	cbnz	r0, 802a118 <_printf_float+0xc4>
 802a0ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802a0be:	4ba3      	ldr	r3, [pc, #652]	; (802a34c <_printf_float+0x2f8>)
 802a0c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802a0c4:	f7d6 fd24 	bl	8000b10 <__aeabi_dcmple>
 802a0c8:	bb30      	cbnz	r0, 802a118 <_printf_float+0xc4>
 802a0ca:	2200      	movs	r2, #0
 802a0cc:	2300      	movs	r3, #0
 802a0ce:	4640      	mov	r0, r8
 802a0d0:	4649      	mov	r1, r9
 802a0d2:	f7d6 fd13 	bl	8000afc <__aeabi_dcmplt>
 802a0d6:	b110      	cbz	r0, 802a0de <_printf_float+0x8a>
 802a0d8:	232d      	movs	r3, #45	; 0x2d
 802a0da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a0de:	4a9c      	ldr	r2, [pc, #624]	; (802a350 <_printf_float+0x2fc>)
 802a0e0:	4b9c      	ldr	r3, [pc, #624]	; (802a354 <_printf_float+0x300>)
 802a0e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 802a0e6:	bf8c      	ite	hi
 802a0e8:	4690      	movhi	r8, r2
 802a0ea:	4698      	movls	r8, r3
 802a0ec:	2303      	movs	r3, #3
 802a0ee:	f02b 0204 	bic.w	r2, fp, #4
 802a0f2:	6123      	str	r3, [r4, #16]
 802a0f4:	6022      	str	r2, [r4, #0]
 802a0f6:	f04f 0900 	mov.w	r9, #0
 802a0fa:	9700      	str	r7, [sp, #0]
 802a0fc:	4633      	mov	r3, r6
 802a0fe:	aa0b      	add	r2, sp, #44	; 0x2c
 802a100:	4621      	mov	r1, r4
 802a102:	4628      	mov	r0, r5
 802a104:	f000 f9e6 	bl	802a4d4 <_printf_common>
 802a108:	3001      	adds	r0, #1
 802a10a:	f040 808d 	bne.w	802a228 <_printf_float+0x1d4>
 802a10e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802a112:	b00d      	add	sp, #52	; 0x34
 802a114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a118:	4642      	mov	r2, r8
 802a11a:	464b      	mov	r3, r9
 802a11c:	4640      	mov	r0, r8
 802a11e:	4649      	mov	r1, r9
 802a120:	f7d6 fd14 	bl	8000b4c <__aeabi_dcmpun>
 802a124:	b110      	cbz	r0, 802a12c <_printf_float+0xd8>
 802a126:	4a8c      	ldr	r2, [pc, #560]	; (802a358 <_printf_float+0x304>)
 802a128:	4b8c      	ldr	r3, [pc, #560]	; (802a35c <_printf_float+0x308>)
 802a12a:	e7da      	b.n	802a0e2 <_printf_float+0x8e>
 802a12c:	6861      	ldr	r1, [r4, #4]
 802a12e:	1c4b      	adds	r3, r1, #1
 802a130:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 802a134:	a80a      	add	r0, sp, #40	; 0x28
 802a136:	d13e      	bne.n	802a1b6 <_printf_float+0x162>
 802a138:	2306      	movs	r3, #6
 802a13a:	6063      	str	r3, [r4, #4]
 802a13c:	2300      	movs	r3, #0
 802a13e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802a142:	ab09      	add	r3, sp, #36	; 0x24
 802a144:	9300      	str	r3, [sp, #0]
 802a146:	ec49 8b10 	vmov	d0, r8, r9
 802a14a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802a14e:	6022      	str	r2, [r4, #0]
 802a150:	f8cd a004 	str.w	sl, [sp, #4]
 802a154:	6861      	ldr	r1, [r4, #4]
 802a156:	4628      	mov	r0, r5
 802a158:	f7ff fee8 	bl	8029f2c <__cvt>
 802a15c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 802a160:	2b47      	cmp	r3, #71	; 0x47
 802a162:	4680      	mov	r8, r0
 802a164:	d109      	bne.n	802a17a <_printf_float+0x126>
 802a166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a168:	1cd8      	adds	r0, r3, #3
 802a16a:	db02      	blt.n	802a172 <_printf_float+0x11e>
 802a16c:	6862      	ldr	r2, [r4, #4]
 802a16e:	4293      	cmp	r3, r2
 802a170:	dd47      	ble.n	802a202 <_printf_float+0x1ae>
 802a172:	f1aa 0a02 	sub.w	sl, sl, #2
 802a176:	fa5f fa8a 	uxtb.w	sl, sl
 802a17a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 802a17e:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a180:	d824      	bhi.n	802a1cc <_printf_float+0x178>
 802a182:	3901      	subs	r1, #1
 802a184:	4652      	mov	r2, sl
 802a186:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802a18a:	9109      	str	r1, [sp, #36]	; 0x24
 802a18c:	f7ff ff2f 	bl	8029fee <__exponent>
 802a190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a192:	1813      	adds	r3, r2, r0
 802a194:	2a01      	cmp	r2, #1
 802a196:	4681      	mov	r9, r0
 802a198:	6123      	str	r3, [r4, #16]
 802a19a:	dc02      	bgt.n	802a1a2 <_printf_float+0x14e>
 802a19c:	6822      	ldr	r2, [r4, #0]
 802a19e:	07d1      	lsls	r1, r2, #31
 802a1a0:	d501      	bpl.n	802a1a6 <_printf_float+0x152>
 802a1a2:	3301      	adds	r3, #1
 802a1a4:	6123      	str	r3, [r4, #16]
 802a1a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802a1aa:	2b00      	cmp	r3, #0
 802a1ac:	d0a5      	beq.n	802a0fa <_printf_float+0xa6>
 802a1ae:	232d      	movs	r3, #45	; 0x2d
 802a1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a1b4:	e7a1      	b.n	802a0fa <_printf_float+0xa6>
 802a1b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 802a1ba:	f000 8177 	beq.w	802a4ac <_printf_float+0x458>
 802a1be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 802a1c2:	d1bb      	bne.n	802a13c <_printf_float+0xe8>
 802a1c4:	2900      	cmp	r1, #0
 802a1c6:	d1b9      	bne.n	802a13c <_printf_float+0xe8>
 802a1c8:	2301      	movs	r3, #1
 802a1ca:	e7b6      	b.n	802a13a <_printf_float+0xe6>
 802a1cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 802a1d0:	d119      	bne.n	802a206 <_printf_float+0x1b2>
 802a1d2:	2900      	cmp	r1, #0
 802a1d4:	6863      	ldr	r3, [r4, #4]
 802a1d6:	dd0c      	ble.n	802a1f2 <_printf_float+0x19e>
 802a1d8:	6121      	str	r1, [r4, #16]
 802a1da:	b913      	cbnz	r3, 802a1e2 <_printf_float+0x18e>
 802a1dc:	6822      	ldr	r2, [r4, #0]
 802a1de:	07d2      	lsls	r2, r2, #31
 802a1e0:	d502      	bpl.n	802a1e8 <_printf_float+0x194>
 802a1e2:	3301      	adds	r3, #1
 802a1e4:	440b      	add	r3, r1
 802a1e6:	6123      	str	r3, [r4, #16]
 802a1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a1ea:	65a3      	str	r3, [r4, #88]	; 0x58
 802a1ec:	f04f 0900 	mov.w	r9, #0
 802a1f0:	e7d9      	b.n	802a1a6 <_printf_float+0x152>
 802a1f2:	b913      	cbnz	r3, 802a1fa <_printf_float+0x1a6>
 802a1f4:	6822      	ldr	r2, [r4, #0]
 802a1f6:	07d0      	lsls	r0, r2, #31
 802a1f8:	d501      	bpl.n	802a1fe <_printf_float+0x1aa>
 802a1fa:	3302      	adds	r3, #2
 802a1fc:	e7f3      	b.n	802a1e6 <_printf_float+0x192>
 802a1fe:	2301      	movs	r3, #1
 802a200:	e7f1      	b.n	802a1e6 <_printf_float+0x192>
 802a202:	f04f 0a67 	mov.w	sl, #103	; 0x67
 802a206:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802a20a:	4293      	cmp	r3, r2
 802a20c:	db05      	blt.n	802a21a <_printf_float+0x1c6>
 802a20e:	6822      	ldr	r2, [r4, #0]
 802a210:	6123      	str	r3, [r4, #16]
 802a212:	07d1      	lsls	r1, r2, #31
 802a214:	d5e8      	bpl.n	802a1e8 <_printf_float+0x194>
 802a216:	3301      	adds	r3, #1
 802a218:	e7e5      	b.n	802a1e6 <_printf_float+0x192>
 802a21a:	2b00      	cmp	r3, #0
 802a21c:	bfd4      	ite	le
 802a21e:	f1c3 0302 	rsble	r3, r3, #2
 802a222:	2301      	movgt	r3, #1
 802a224:	4413      	add	r3, r2
 802a226:	e7de      	b.n	802a1e6 <_printf_float+0x192>
 802a228:	6823      	ldr	r3, [r4, #0]
 802a22a:	055a      	lsls	r2, r3, #21
 802a22c:	d407      	bmi.n	802a23e <_printf_float+0x1ea>
 802a22e:	6923      	ldr	r3, [r4, #16]
 802a230:	4642      	mov	r2, r8
 802a232:	4631      	mov	r1, r6
 802a234:	4628      	mov	r0, r5
 802a236:	47b8      	blx	r7
 802a238:	3001      	adds	r0, #1
 802a23a:	d12b      	bne.n	802a294 <_printf_float+0x240>
 802a23c:	e767      	b.n	802a10e <_printf_float+0xba>
 802a23e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 802a242:	f240 80dc 	bls.w	802a3fe <_printf_float+0x3aa>
 802a246:	2200      	movs	r2, #0
 802a248:	2300      	movs	r3, #0
 802a24a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802a24e:	f7d6 fc4b 	bl	8000ae8 <__aeabi_dcmpeq>
 802a252:	2800      	cmp	r0, #0
 802a254:	d033      	beq.n	802a2be <_printf_float+0x26a>
 802a256:	2301      	movs	r3, #1
 802a258:	4a41      	ldr	r2, [pc, #260]	; (802a360 <_printf_float+0x30c>)
 802a25a:	4631      	mov	r1, r6
 802a25c:	4628      	mov	r0, r5
 802a25e:	47b8      	blx	r7
 802a260:	3001      	adds	r0, #1
 802a262:	f43f af54 	beq.w	802a10e <_printf_float+0xba>
 802a266:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802a26a:	429a      	cmp	r2, r3
 802a26c:	db02      	blt.n	802a274 <_printf_float+0x220>
 802a26e:	6823      	ldr	r3, [r4, #0]
 802a270:	07d8      	lsls	r0, r3, #31
 802a272:	d50f      	bpl.n	802a294 <_printf_float+0x240>
 802a274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a278:	4631      	mov	r1, r6
 802a27a:	4628      	mov	r0, r5
 802a27c:	47b8      	blx	r7
 802a27e:	3001      	adds	r0, #1
 802a280:	f43f af45 	beq.w	802a10e <_printf_float+0xba>
 802a284:	f04f 0800 	mov.w	r8, #0
 802a288:	f104 091a 	add.w	r9, r4, #26
 802a28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a28e:	3b01      	subs	r3, #1
 802a290:	4543      	cmp	r3, r8
 802a292:	dc09      	bgt.n	802a2a8 <_printf_float+0x254>
 802a294:	6823      	ldr	r3, [r4, #0]
 802a296:	079b      	lsls	r3, r3, #30
 802a298:	f100 8103 	bmi.w	802a4a2 <_printf_float+0x44e>
 802a29c:	68e0      	ldr	r0, [r4, #12]
 802a29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a2a0:	4298      	cmp	r0, r3
 802a2a2:	bfb8      	it	lt
 802a2a4:	4618      	movlt	r0, r3
 802a2a6:	e734      	b.n	802a112 <_printf_float+0xbe>
 802a2a8:	2301      	movs	r3, #1
 802a2aa:	464a      	mov	r2, r9
 802a2ac:	4631      	mov	r1, r6
 802a2ae:	4628      	mov	r0, r5
 802a2b0:	47b8      	blx	r7
 802a2b2:	3001      	adds	r0, #1
 802a2b4:	f43f af2b 	beq.w	802a10e <_printf_float+0xba>
 802a2b8:	f108 0801 	add.w	r8, r8, #1
 802a2bc:	e7e6      	b.n	802a28c <_printf_float+0x238>
 802a2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a2c0:	2b00      	cmp	r3, #0
 802a2c2:	dc2b      	bgt.n	802a31c <_printf_float+0x2c8>
 802a2c4:	2301      	movs	r3, #1
 802a2c6:	4a26      	ldr	r2, [pc, #152]	; (802a360 <_printf_float+0x30c>)
 802a2c8:	4631      	mov	r1, r6
 802a2ca:	4628      	mov	r0, r5
 802a2cc:	47b8      	blx	r7
 802a2ce:	3001      	adds	r0, #1
 802a2d0:	f43f af1d 	beq.w	802a10e <_printf_float+0xba>
 802a2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a2d6:	b923      	cbnz	r3, 802a2e2 <_printf_float+0x28e>
 802a2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a2da:	b913      	cbnz	r3, 802a2e2 <_printf_float+0x28e>
 802a2dc:	6823      	ldr	r3, [r4, #0]
 802a2de:	07d9      	lsls	r1, r3, #31
 802a2e0:	d5d8      	bpl.n	802a294 <_printf_float+0x240>
 802a2e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a2e6:	4631      	mov	r1, r6
 802a2e8:	4628      	mov	r0, r5
 802a2ea:	47b8      	blx	r7
 802a2ec:	3001      	adds	r0, #1
 802a2ee:	f43f af0e 	beq.w	802a10e <_printf_float+0xba>
 802a2f2:	f04f 0900 	mov.w	r9, #0
 802a2f6:	f104 0a1a 	add.w	sl, r4, #26
 802a2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a2fc:	425b      	negs	r3, r3
 802a2fe:	454b      	cmp	r3, r9
 802a300:	dc01      	bgt.n	802a306 <_printf_float+0x2b2>
 802a302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a304:	e794      	b.n	802a230 <_printf_float+0x1dc>
 802a306:	2301      	movs	r3, #1
 802a308:	4652      	mov	r2, sl
 802a30a:	4631      	mov	r1, r6
 802a30c:	4628      	mov	r0, r5
 802a30e:	47b8      	blx	r7
 802a310:	3001      	adds	r0, #1
 802a312:	f43f aefc 	beq.w	802a10e <_printf_float+0xba>
 802a316:	f109 0901 	add.w	r9, r9, #1
 802a31a:	e7ee      	b.n	802a2fa <_printf_float+0x2a6>
 802a31c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a31e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802a320:	429a      	cmp	r2, r3
 802a322:	bfa8      	it	ge
 802a324:	461a      	movge	r2, r3
 802a326:	2a00      	cmp	r2, #0
 802a328:	4691      	mov	r9, r2
 802a32a:	dd07      	ble.n	802a33c <_printf_float+0x2e8>
 802a32c:	4613      	mov	r3, r2
 802a32e:	4631      	mov	r1, r6
 802a330:	4642      	mov	r2, r8
 802a332:	4628      	mov	r0, r5
 802a334:	47b8      	blx	r7
 802a336:	3001      	adds	r0, #1
 802a338:	f43f aee9 	beq.w	802a10e <_printf_float+0xba>
 802a33c:	f104 031a 	add.w	r3, r4, #26
 802a340:	f04f 0b00 	mov.w	fp, #0
 802a344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802a348:	9306      	str	r3, [sp, #24]
 802a34a:	e015      	b.n	802a378 <_printf_float+0x324>
 802a34c:	7fefffff 	.word	0x7fefffff
 802a350:	08047c24 	.word	0x08047c24
 802a354:	08047c20 	.word	0x08047c20
 802a358:	08047c2c 	.word	0x08047c2c
 802a35c:	08047c28 	.word	0x08047c28
 802a360:	08047de3 	.word	0x08047de3
 802a364:	2301      	movs	r3, #1
 802a366:	9a06      	ldr	r2, [sp, #24]
 802a368:	4631      	mov	r1, r6
 802a36a:	4628      	mov	r0, r5
 802a36c:	47b8      	blx	r7
 802a36e:	3001      	adds	r0, #1
 802a370:	f43f aecd 	beq.w	802a10e <_printf_float+0xba>
 802a374:	f10b 0b01 	add.w	fp, fp, #1
 802a378:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 802a37c:	ebaa 0309 	sub.w	r3, sl, r9
 802a380:	455b      	cmp	r3, fp
 802a382:	dcef      	bgt.n	802a364 <_printf_float+0x310>
 802a384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802a388:	429a      	cmp	r2, r3
 802a38a:	44d0      	add	r8, sl
 802a38c:	db15      	blt.n	802a3ba <_printf_float+0x366>
 802a38e:	6823      	ldr	r3, [r4, #0]
 802a390:	07da      	lsls	r2, r3, #31
 802a392:	d412      	bmi.n	802a3ba <_printf_float+0x366>
 802a394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a396:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a398:	eba3 020a 	sub.w	r2, r3, sl
 802a39c:	eba3 0a01 	sub.w	sl, r3, r1
 802a3a0:	4592      	cmp	sl, r2
 802a3a2:	bfa8      	it	ge
 802a3a4:	4692      	movge	sl, r2
 802a3a6:	f1ba 0f00 	cmp.w	sl, #0
 802a3aa:	dc0e      	bgt.n	802a3ca <_printf_float+0x376>
 802a3ac:	f04f 0800 	mov.w	r8, #0
 802a3b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a3b4:	f104 091a 	add.w	r9, r4, #26
 802a3b8:	e019      	b.n	802a3ee <_printf_float+0x39a>
 802a3ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a3be:	4631      	mov	r1, r6
 802a3c0:	4628      	mov	r0, r5
 802a3c2:	47b8      	blx	r7
 802a3c4:	3001      	adds	r0, #1
 802a3c6:	d1e5      	bne.n	802a394 <_printf_float+0x340>
 802a3c8:	e6a1      	b.n	802a10e <_printf_float+0xba>
 802a3ca:	4653      	mov	r3, sl
 802a3cc:	4642      	mov	r2, r8
 802a3ce:	4631      	mov	r1, r6
 802a3d0:	4628      	mov	r0, r5
 802a3d2:	47b8      	blx	r7
 802a3d4:	3001      	adds	r0, #1
 802a3d6:	d1e9      	bne.n	802a3ac <_printf_float+0x358>
 802a3d8:	e699      	b.n	802a10e <_printf_float+0xba>
 802a3da:	2301      	movs	r3, #1
 802a3dc:	464a      	mov	r2, r9
 802a3de:	4631      	mov	r1, r6
 802a3e0:	4628      	mov	r0, r5
 802a3e2:	47b8      	blx	r7
 802a3e4:	3001      	adds	r0, #1
 802a3e6:	f43f ae92 	beq.w	802a10e <_printf_float+0xba>
 802a3ea:	f108 0801 	add.w	r8, r8, #1
 802a3ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802a3f2:	1a9b      	subs	r3, r3, r2
 802a3f4:	eba3 030a 	sub.w	r3, r3, sl
 802a3f8:	4543      	cmp	r3, r8
 802a3fa:	dcee      	bgt.n	802a3da <_printf_float+0x386>
 802a3fc:	e74a      	b.n	802a294 <_printf_float+0x240>
 802a3fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a400:	2a01      	cmp	r2, #1
 802a402:	dc01      	bgt.n	802a408 <_printf_float+0x3b4>
 802a404:	07db      	lsls	r3, r3, #31
 802a406:	d53a      	bpl.n	802a47e <_printf_float+0x42a>
 802a408:	2301      	movs	r3, #1
 802a40a:	4642      	mov	r2, r8
 802a40c:	4631      	mov	r1, r6
 802a40e:	4628      	mov	r0, r5
 802a410:	47b8      	blx	r7
 802a412:	3001      	adds	r0, #1
 802a414:	f43f ae7b 	beq.w	802a10e <_printf_float+0xba>
 802a418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a41c:	4631      	mov	r1, r6
 802a41e:	4628      	mov	r0, r5
 802a420:	47b8      	blx	r7
 802a422:	3001      	adds	r0, #1
 802a424:	f108 0801 	add.w	r8, r8, #1
 802a428:	f43f ae71 	beq.w	802a10e <_printf_float+0xba>
 802a42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a42e:	2200      	movs	r2, #0
 802a430:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 802a434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802a438:	2300      	movs	r3, #0
 802a43a:	f7d6 fb55 	bl	8000ae8 <__aeabi_dcmpeq>
 802a43e:	b9c8      	cbnz	r0, 802a474 <_printf_float+0x420>
 802a440:	4653      	mov	r3, sl
 802a442:	4642      	mov	r2, r8
 802a444:	4631      	mov	r1, r6
 802a446:	4628      	mov	r0, r5
 802a448:	47b8      	blx	r7
 802a44a:	3001      	adds	r0, #1
 802a44c:	d10e      	bne.n	802a46c <_printf_float+0x418>
 802a44e:	e65e      	b.n	802a10e <_printf_float+0xba>
 802a450:	2301      	movs	r3, #1
 802a452:	4652      	mov	r2, sl
 802a454:	4631      	mov	r1, r6
 802a456:	4628      	mov	r0, r5
 802a458:	47b8      	blx	r7
 802a45a:	3001      	adds	r0, #1
 802a45c:	f43f ae57 	beq.w	802a10e <_printf_float+0xba>
 802a460:	f108 0801 	add.w	r8, r8, #1
 802a464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a466:	3b01      	subs	r3, #1
 802a468:	4543      	cmp	r3, r8
 802a46a:	dcf1      	bgt.n	802a450 <_printf_float+0x3fc>
 802a46c:	464b      	mov	r3, r9
 802a46e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802a472:	e6de      	b.n	802a232 <_printf_float+0x1de>
 802a474:	f04f 0800 	mov.w	r8, #0
 802a478:	f104 0a1a 	add.w	sl, r4, #26
 802a47c:	e7f2      	b.n	802a464 <_printf_float+0x410>
 802a47e:	2301      	movs	r3, #1
 802a480:	e7df      	b.n	802a442 <_printf_float+0x3ee>
 802a482:	2301      	movs	r3, #1
 802a484:	464a      	mov	r2, r9
 802a486:	4631      	mov	r1, r6
 802a488:	4628      	mov	r0, r5
 802a48a:	47b8      	blx	r7
 802a48c:	3001      	adds	r0, #1
 802a48e:	f43f ae3e 	beq.w	802a10e <_printf_float+0xba>
 802a492:	f108 0801 	add.w	r8, r8, #1
 802a496:	68e3      	ldr	r3, [r4, #12]
 802a498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a49a:	1a9b      	subs	r3, r3, r2
 802a49c:	4543      	cmp	r3, r8
 802a49e:	dcf0      	bgt.n	802a482 <_printf_float+0x42e>
 802a4a0:	e6fc      	b.n	802a29c <_printf_float+0x248>
 802a4a2:	f04f 0800 	mov.w	r8, #0
 802a4a6:	f104 0919 	add.w	r9, r4, #25
 802a4aa:	e7f4      	b.n	802a496 <_printf_float+0x442>
 802a4ac:	2900      	cmp	r1, #0
 802a4ae:	f43f ae8b 	beq.w	802a1c8 <_printf_float+0x174>
 802a4b2:	2300      	movs	r3, #0
 802a4b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802a4b8:	ab09      	add	r3, sp, #36	; 0x24
 802a4ba:	9300      	str	r3, [sp, #0]
 802a4bc:	ec49 8b10 	vmov	d0, r8, r9
 802a4c0:	6022      	str	r2, [r4, #0]
 802a4c2:	f8cd a004 	str.w	sl, [sp, #4]
 802a4c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802a4ca:	4628      	mov	r0, r5
 802a4cc:	f7ff fd2e 	bl	8029f2c <__cvt>
 802a4d0:	4680      	mov	r8, r0
 802a4d2:	e648      	b.n	802a166 <_printf_float+0x112>

0802a4d4 <_printf_common>:
 802a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a4d8:	4691      	mov	r9, r2
 802a4da:	461f      	mov	r7, r3
 802a4dc:	688a      	ldr	r2, [r1, #8]
 802a4de:	690b      	ldr	r3, [r1, #16]
 802a4e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802a4e4:	4293      	cmp	r3, r2
 802a4e6:	bfb8      	it	lt
 802a4e8:	4613      	movlt	r3, r2
 802a4ea:	f8c9 3000 	str.w	r3, [r9]
 802a4ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802a4f2:	4606      	mov	r6, r0
 802a4f4:	460c      	mov	r4, r1
 802a4f6:	b112      	cbz	r2, 802a4fe <_printf_common+0x2a>
 802a4f8:	3301      	adds	r3, #1
 802a4fa:	f8c9 3000 	str.w	r3, [r9]
 802a4fe:	6823      	ldr	r3, [r4, #0]
 802a500:	0699      	lsls	r1, r3, #26
 802a502:	bf42      	ittt	mi
 802a504:	f8d9 3000 	ldrmi.w	r3, [r9]
 802a508:	3302      	addmi	r3, #2
 802a50a:	f8c9 3000 	strmi.w	r3, [r9]
 802a50e:	6825      	ldr	r5, [r4, #0]
 802a510:	f015 0506 	ands.w	r5, r5, #6
 802a514:	d107      	bne.n	802a526 <_printf_common+0x52>
 802a516:	f104 0a19 	add.w	sl, r4, #25
 802a51a:	68e3      	ldr	r3, [r4, #12]
 802a51c:	f8d9 2000 	ldr.w	r2, [r9]
 802a520:	1a9b      	subs	r3, r3, r2
 802a522:	42ab      	cmp	r3, r5
 802a524:	dc28      	bgt.n	802a578 <_printf_common+0xa4>
 802a526:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802a52a:	6822      	ldr	r2, [r4, #0]
 802a52c:	3300      	adds	r3, #0
 802a52e:	bf18      	it	ne
 802a530:	2301      	movne	r3, #1
 802a532:	0692      	lsls	r2, r2, #26
 802a534:	d42d      	bmi.n	802a592 <_printf_common+0xbe>
 802a536:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a53a:	4639      	mov	r1, r7
 802a53c:	4630      	mov	r0, r6
 802a53e:	47c0      	blx	r8
 802a540:	3001      	adds	r0, #1
 802a542:	d020      	beq.n	802a586 <_printf_common+0xb2>
 802a544:	6823      	ldr	r3, [r4, #0]
 802a546:	68e5      	ldr	r5, [r4, #12]
 802a548:	f8d9 2000 	ldr.w	r2, [r9]
 802a54c:	f003 0306 	and.w	r3, r3, #6
 802a550:	2b04      	cmp	r3, #4
 802a552:	bf08      	it	eq
 802a554:	1aad      	subeq	r5, r5, r2
 802a556:	68a3      	ldr	r3, [r4, #8]
 802a558:	6922      	ldr	r2, [r4, #16]
 802a55a:	bf0c      	ite	eq
 802a55c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a560:	2500      	movne	r5, #0
 802a562:	4293      	cmp	r3, r2
 802a564:	bfc4      	itt	gt
 802a566:	1a9b      	subgt	r3, r3, r2
 802a568:	18ed      	addgt	r5, r5, r3
 802a56a:	f04f 0900 	mov.w	r9, #0
 802a56e:	341a      	adds	r4, #26
 802a570:	454d      	cmp	r5, r9
 802a572:	d11a      	bne.n	802a5aa <_printf_common+0xd6>
 802a574:	2000      	movs	r0, #0
 802a576:	e008      	b.n	802a58a <_printf_common+0xb6>
 802a578:	2301      	movs	r3, #1
 802a57a:	4652      	mov	r2, sl
 802a57c:	4639      	mov	r1, r7
 802a57e:	4630      	mov	r0, r6
 802a580:	47c0      	blx	r8
 802a582:	3001      	adds	r0, #1
 802a584:	d103      	bne.n	802a58e <_printf_common+0xba>
 802a586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802a58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a58e:	3501      	adds	r5, #1
 802a590:	e7c3      	b.n	802a51a <_printf_common+0x46>
 802a592:	18e1      	adds	r1, r4, r3
 802a594:	1c5a      	adds	r2, r3, #1
 802a596:	2030      	movs	r0, #48	; 0x30
 802a598:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802a59c:	4422      	add	r2, r4
 802a59e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802a5a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802a5a6:	3302      	adds	r3, #2
 802a5a8:	e7c5      	b.n	802a536 <_printf_common+0x62>
 802a5aa:	2301      	movs	r3, #1
 802a5ac:	4622      	mov	r2, r4
 802a5ae:	4639      	mov	r1, r7
 802a5b0:	4630      	mov	r0, r6
 802a5b2:	47c0      	blx	r8
 802a5b4:	3001      	adds	r0, #1
 802a5b6:	d0e6      	beq.n	802a586 <_printf_common+0xb2>
 802a5b8:	f109 0901 	add.w	r9, r9, #1
 802a5bc:	e7d8      	b.n	802a570 <_printf_common+0x9c>
	...

0802a5c0 <_printf_i>:
 802a5c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802a5c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802a5c8:	460c      	mov	r4, r1
 802a5ca:	7e09      	ldrb	r1, [r1, #24]
 802a5cc:	b085      	sub	sp, #20
 802a5ce:	296e      	cmp	r1, #110	; 0x6e
 802a5d0:	4617      	mov	r7, r2
 802a5d2:	4606      	mov	r6, r0
 802a5d4:	4698      	mov	r8, r3
 802a5d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802a5d8:	f000 80b3 	beq.w	802a742 <_printf_i+0x182>
 802a5dc:	d822      	bhi.n	802a624 <_printf_i+0x64>
 802a5de:	2963      	cmp	r1, #99	; 0x63
 802a5e0:	d036      	beq.n	802a650 <_printf_i+0x90>
 802a5e2:	d80a      	bhi.n	802a5fa <_printf_i+0x3a>
 802a5e4:	2900      	cmp	r1, #0
 802a5e6:	f000 80b9 	beq.w	802a75c <_printf_i+0x19c>
 802a5ea:	2958      	cmp	r1, #88	; 0x58
 802a5ec:	f000 8083 	beq.w	802a6f6 <_printf_i+0x136>
 802a5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a5f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802a5f8:	e032      	b.n	802a660 <_printf_i+0xa0>
 802a5fa:	2964      	cmp	r1, #100	; 0x64
 802a5fc:	d001      	beq.n	802a602 <_printf_i+0x42>
 802a5fe:	2969      	cmp	r1, #105	; 0x69
 802a600:	d1f6      	bne.n	802a5f0 <_printf_i+0x30>
 802a602:	6820      	ldr	r0, [r4, #0]
 802a604:	6813      	ldr	r3, [r2, #0]
 802a606:	0605      	lsls	r5, r0, #24
 802a608:	f103 0104 	add.w	r1, r3, #4
 802a60c:	d52a      	bpl.n	802a664 <_printf_i+0xa4>
 802a60e:	681b      	ldr	r3, [r3, #0]
 802a610:	6011      	str	r1, [r2, #0]
 802a612:	2b00      	cmp	r3, #0
 802a614:	da03      	bge.n	802a61e <_printf_i+0x5e>
 802a616:	222d      	movs	r2, #45	; 0x2d
 802a618:	425b      	negs	r3, r3
 802a61a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802a61e:	486f      	ldr	r0, [pc, #444]	; (802a7dc <_printf_i+0x21c>)
 802a620:	220a      	movs	r2, #10
 802a622:	e039      	b.n	802a698 <_printf_i+0xd8>
 802a624:	2973      	cmp	r1, #115	; 0x73
 802a626:	f000 809d 	beq.w	802a764 <_printf_i+0x1a4>
 802a62a:	d808      	bhi.n	802a63e <_printf_i+0x7e>
 802a62c:	296f      	cmp	r1, #111	; 0x6f
 802a62e:	d020      	beq.n	802a672 <_printf_i+0xb2>
 802a630:	2970      	cmp	r1, #112	; 0x70
 802a632:	d1dd      	bne.n	802a5f0 <_printf_i+0x30>
 802a634:	6823      	ldr	r3, [r4, #0]
 802a636:	f043 0320 	orr.w	r3, r3, #32
 802a63a:	6023      	str	r3, [r4, #0]
 802a63c:	e003      	b.n	802a646 <_printf_i+0x86>
 802a63e:	2975      	cmp	r1, #117	; 0x75
 802a640:	d017      	beq.n	802a672 <_printf_i+0xb2>
 802a642:	2978      	cmp	r1, #120	; 0x78
 802a644:	d1d4      	bne.n	802a5f0 <_printf_i+0x30>
 802a646:	2378      	movs	r3, #120	; 0x78
 802a648:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a64c:	4864      	ldr	r0, [pc, #400]	; (802a7e0 <_printf_i+0x220>)
 802a64e:	e055      	b.n	802a6fc <_printf_i+0x13c>
 802a650:	6813      	ldr	r3, [r2, #0]
 802a652:	1d19      	adds	r1, r3, #4
 802a654:	681b      	ldr	r3, [r3, #0]
 802a656:	6011      	str	r1, [r2, #0]
 802a658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a65c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a660:	2301      	movs	r3, #1
 802a662:	e08c      	b.n	802a77e <_printf_i+0x1be>
 802a664:	681b      	ldr	r3, [r3, #0]
 802a666:	6011      	str	r1, [r2, #0]
 802a668:	f010 0f40 	tst.w	r0, #64	; 0x40
 802a66c:	bf18      	it	ne
 802a66e:	b21b      	sxthne	r3, r3
 802a670:	e7cf      	b.n	802a612 <_printf_i+0x52>
 802a672:	6813      	ldr	r3, [r2, #0]
 802a674:	6825      	ldr	r5, [r4, #0]
 802a676:	1d18      	adds	r0, r3, #4
 802a678:	6010      	str	r0, [r2, #0]
 802a67a:	0628      	lsls	r0, r5, #24
 802a67c:	d501      	bpl.n	802a682 <_printf_i+0xc2>
 802a67e:	681b      	ldr	r3, [r3, #0]
 802a680:	e002      	b.n	802a688 <_printf_i+0xc8>
 802a682:	0668      	lsls	r0, r5, #25
 802a684:	d5fb      	bpl.n	802a67e <_printf_i+0xbe>
 802a686:	881b      	ldrh	r3, [r3, #0]
 802a688:	4854      	ldr	r0, [pc, #336]	; (802a7dc <_printf_i+0x21c>)
 802a68a:	296f      	cmp	r1, #111	; 0x6f
 802a68c:	bf14      	ite	ne
 802a68e:	220a      	movne	r2, #10
 802a690:	2208      	moveq	r2, #8
 802a692:	2100      	movs	r1, #0
 802a694:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a698:	6865      	ldr	r5, [r4, #4]
 802a69a:	60a5      	str	r5, [r4, #8]
 802a69c:	2d00      	cmp	r5, #0
 802a69e:	f2c0 8095 	blt.w	802a7cc <_printf_i+0x20c>
 802a6a2:	6821      	ldr	r1, [r4, #0]
 802a6a4:	f021 0104 	bic.w	r1, r1, #4
 802a6a8:	6021      	str	r1, [r4, #0]
 802a6aa:	2b00      	cmp	r3, #0
 802a6ac:	d13d      	bne.n	802a72a <_printf_i+0x16a>
 802a6ae:	2d00      	cmp	r5, #0
 802a6b0:	f040 808e 	bne.w	802a7d0 <_printf_i+0x210>
 802a6b4:	4665      	mov	r5, ip
 802a6b6:	2a08      	cmp	r2, #8
 802a6b8:	d10b      	bne.n	802a6d2 <_printf_i+0x112>
 802a6ba:	6823      	ldr	r3, [r4, #0]
 802a6bc:	07db      	lsls	r3, r3, #31
 802a6be:	d508      	bpl.n	802a6d2 <_printf_i+0x112>
 802a6c0:	6923      	ldr	r3, [r4, #16]
 802a6c2:	6862      	ldr	r2, [r4, #4]
 802a6c4:	429a      	cmp	r2, r3
 802a6c6:	bfde      	ittt	le
 802a6c8:	2330      	movle	r3, #48	; 0x30
 802a6ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 802a6ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 802a6d2:	ebac 0305 	sub.w	r3, ip, r5
 802a6d6:	6123      	str	r3, [r4, #16]
 802a6d8:	f8cd 8000 	str.w	r8, [sp]
 802a6dc:	463b      	mov	r3, r7
 802a6de:	aa03      	add	r2, sp, #12
 802a6e0:	4621      	mov	r1, r4
 802a6e2:	4630      	mov	r0, r6
 802a6e4:	f7ff fef6 	bl	802a4d4 <_printf_common>
 802a6e8:	3001      	adds	r0, #1
 802a6ea:	d14d      	bne.n	802a788 <_printf_i+0x1c8>
 802a6ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802a6f0:	b005      	add	sp, #20
 802a6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a6f6:	4839      	ldr	r0, [pc, #228]	; (802a7dc <_printf_i+0x21c>)
 802a6f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802a6fc:	6813      	ldr	r3, [r2, #0]
 802a6fe:	6821      	ldr	r1, [r4, #0]
 802a700:	1d1d      	adds	r5, r3, #4
 802a702:	681b      	ldr	r3, [r3, #0]
 802a704:	6015      	str	r5, [r2, #0]
 802a706:	060a      	lsls	r2, r1, #24
 802a708:	d50b      	bpl.n	802a722 <_printf_i+0x162>
 802a70a:	07ca      	lsls	r2, r1, #31
 802a70c:	bf44      	itt	mi
 802a70e:	f041 0120 	orrmi.w	r1, r1, #32
 802a712:	6021      	strmi	r1, [r4, #0]
 802a714:	b91b      	cbnz	r3, 802a71e <_printf_i+0x15e>
 802a716:	6822      	ldr	r2, [r4, #0]
 802a718:	f022 0220 	bic.w	r2, r2, #32
 802a71c:	6022      	str	r2, [r4, #0]
 802a71e:	2210      	movs	r2, #16
 802a720:	e7b7      	b.n	802a692 <_printf_i+0xd2>
 802a722:	064d      	lsls	r5, r1, #25
 802a724:	bf48      	it	mi
 802a726:	b29b      	uxthmi	r3, r3
 802a728:	e7ef      	b.n	802a70a <_printf_i+0x14a>
 802a72a:	4665      	mov	r5, ip
 802a72c:	fbb3 f1f2 	udiv	r1, r3, r2
 802a730:	fb02 3311 	mls	r3, r2, r1, r3
 802a734:	5cc3      	ldrb	r3, [r0, r3]
 802a736:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802a73a:	460b      	mov	r3, r1
 802a73c:	2900      	cmp	r1, #0
 802a73e:	d1f5      	bne.n	802a72c <_printf_i+0x16c>
 802a740:	e7b9      	b.n	802a6b6 <_printf_i+0xf6>
 802a742:	6813      	ldr	r3, [r2, #0]
 802a744:	6825      	ldr	r5, [r4, #0]
 802a746:	6961      	ldr	r1, [r4, #20]
 802a748:	1d18      	adds	r0, r3, #4
 802a74a:	6010      	str	r0, [r2, #0]
 802a74c:	0628      	lsls	r0, r5, #24
 802a74e:	681b      	ldr	r3, [r3, #0]
 802a750:	d501      	bpl.n	802a756 <_printf_i+0x196>
 802a752:	6019      	str	r1, [r3, #0]
 802a754:	e002      	b.n	802a75c <_printf_i+0x19c>
 802a756:	066a      	lsls	r2, r5, #25
 802a758:	d5fb      	bpl.n	802a752 <_printf_i+0x192>
 802a75a:	8019      	strh	r1, [r3, #0]
 802a75c:	2300      	movs	r3, #0
 802a75e:	6123      	str	r3, [r4, #16]
 802a760:	4665      	mov	r5, ip
 802a762:	e7b9      	b.n	802a6d8 <_printf_i+0x118>
 802a764:	6813      	ldr	r3, [r2, #0]
 802a766:	1d19      	adds	r1, r3, #4
 802a768:	6011      	str	r1, [r2, #0]
 802a76a:	681d      	ldr	r5, [r3, #0]
 802a76c:	6862      	ldr	r2, [r4, #4]
 802a76e:	2100      	movs	r1, #0
 802a770:	4628      	mov	r0, r5
 802a772:	f7d5 fd45 	bl	8000200 <memchr>
 802a776:	b108      	cbz	r0, 802a77c <_printf_i+0x1bc>
 802a778:	1b40      	subs	r0, r0, r5
 802a77a:	6060      	str	r0, [r4, #4]
 802a77c:	6863      	ldr	r3, [r4, #4]
 802a77e:	6123      	str	r3, [r4, #16]
 802a780:	2300      	movs	r3, #0
 802a782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a786:	e7a7      	b.n	802a6d8 <_printf_i+0x118>
 802a788:	6923      	ldr	r3, [r4, #16]
 802a78a:	462a      	mov	r2, r5
 802a78c:	4639      	mov	r1, r7
 802a78e:	4630      	mov	r0, r6
 802a790:	47c0      	blx	r8
 802a792:	3001      	adds	r0, #1
 802a794:	d0aa      	beq.n	802a6ec <_printf_i+0x12c>
 802a796:	6823      	ldr	r3, [r4, #0]
 802a798:	079b      	lsls	r3, r3, #30
 802a79a:	d413      	bmi.n	802a7c4 <_printf_i+0x204>
 802a79c:	68e0      	ldr	r0, [r4, #12]
 802a79e:	9b03      	ldr	r3, [sp, #12]
 802a7a0:	4298      	cmp	r0, r3
 802a7a2:	bfb8      	it	lt
 802a7a4:	4618      	movlt	r0, r3
 802a7a6:	e7a3      	b.n	802a6f0 <_printf_i+0x130>
 802a7a8:	2301      	movs	r3, #1
 802a7aa:	464a      	mov	r2, r9
 802a7ac:	4639      	mov	r1, r7
 802a7ae:	4630      	mov	r0, r6
 802a7b0:	47c0      	blx	r8
 802a7b2:	3001      	adds	r0, #1
 802a7b4:	d09a      	beq.n	802a6ec <_printf_i+0x12c>
 802a7b6:	3501      	adds	r5, #1
 802a7b8:	68e3      	ldr	r3, [r4, #12]
 802a7ba:	9a03      	ldr	r2, [sp, #12]
 802a7bc:	1a9b      	subs	r3, r3, r2
 802a7be:	42ab      	cmp	r3, r5
 802a7c0:	dcf2      	bgt.n	802a7a8 <_printf_i+0x1e8>
 802a7c2:	e7eb      	b.n	802a79c <_printf_i+0x1dc>
 802a7c4:	2500      	movs	r5, #0
 802a7c6:	f104 0919 	add.w	r9, r4, #25
 802a7ca:	e7f5      	b.n	802a7b8 <_printf_i+0x1f8>
 802a7cc:	2b00      	cmp	r3, #0
 802a7ce:	d1ac      	bne.n	802a72a <_printf_i+0x16a>
 802a7d0:	7803      	ldrb	r3, [r0, #0]
 802a7d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a7d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a7da:	e76c      	b.n	802a6b6 <_printf_i+0xf6>
 802a7dc:	08047c30 	.word	0x08047c30
 802a7e0:	08047c41 	.word	0x08047c41

0802a7e4 <_sbrk_r>:
 802a7e4:	b538      	push	{r3, r4, r5, lr}
 802a7e6:	4c06      	ldr	r4, [pc, #24]	; (802a800 <_sbrk_r+0x1c>)
 802a7e8:	2300      	movs	r3, #0
 802a7ea:	4605      	mov	r5, r0
 802a7ec:	4608      	mov	r0, r1
 802a7ee:	6023      	str	r3, [r4, #0]
 802a7f0:	f7d7 f952 	bl	8001a98 <_sbrk>
 802a7f4:	1c43      	adds	r3, r0, #1
 802a7f6:	d102      	bne.n	802a7fe <_sbrk_r+0x1a>
 802a7f8:	6823      	ldr	r3, [r4, #0]
 802a7fa:	b103      	cbz	r3, 802a7fe <_sbrk_r+0x1a>
 802a7fc:	602b      	str	r3, [r5, #0]
 802a7fe:	bd38      	pop	{r3, r4, r5, pc}
 802a800:	2001c184 	.word	0x2001c184

0802a804 <sniprintf>:
 802a804:	b40c      	push	{r2, r3}
 802a806:	b530      	push	{r4, r5, lr}
 802a808:	4b17      	ldr	r3, [pc, #92]	; (802a868 <sniprintf+0x64>)
 802a80a:	1e0c      	subs	r4, r1, #0
 802a80c:	b09d      	sub	sp, #116	; 0x74
 802a80e:	681d      	ldr	r5, [r3, #0]
 802a810:	da08      	bge.n	802a824 <sniprintf+0x20>
 802a812:	238b      	movs	r3, #139	; 0x8b
 802a814:	602b      	str	r3, [r5, #0]
 802a816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802a81a:	b01d      	add	sp, #116	; 0x74
 802a81c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a820:	b002      	add	sp, #8
 802a822:	4770      	bx	lr
 802a824:	f44f 7302 	mov.w	r3, #520	; 0x208
 802a828:	f8ad 3014 	strh.w	r3, [sp, #20]
 802a82c:	bf14      	ite	ne
 802a82e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 802a832:	4623      	moveq	r3, r4
 802a834:	9304      	str	r3, [sp, #16]
 802a836:	9307      	str	r3, [sp, #28]
 802a838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802a83c:	9002      	str	r0, [sp, #8]
 802a83e:	9006      	str	r0, [sp, #24]
 802a840:	f8ad 3016 	strh.w	r3, [sp, #22]
 802a844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802a846:	ab21      	add	r3, sp, #132	; 0x84
 802a848:	a902      	add	r1, sp, #8
 802a84a:	4628      	mov	r0, r5
 802a84c:	9301      	str	r3, [sp, #4]
 802a84e:	f001 f9db 	bl	802bc08 <_svfiprintf_r>
 802a852:	1c43      	adds	r3, r0, #1
 802a854:	bfbc      	itt	lt
 802a856:	238b      	movlt	r3, #139	; 0x8b
 802a858:	602b      	strlt	r3, [r5, #0]
 802a85a:	2c00      	cmp	r4, #0
 802a85c:	d0dd      	beq.n	802a81a <sniprintf+0x16>
 802a85e:	9b02      	ldr	r3, [sp, #8]
 802a860:	2200      	movs	r2, #0
 802a862:	701a      	strb	r2, [r3, #0]
 802a864:	e7d9      	b.n	802a81a <sniprintf+0x16>
 802a866:	bf00      	nop
 802a868:	2000285c 	.word	0x2000285c

0802a86c <siscanf>:
 802a86c:	b40e      	push	{r1, r2, r3}
 802a86e:	b530      	push	{r4, r5, lr}
 802a870:	b09c      	sub	sp, #112	; 0x70
 802a872:	ac1f      	add	r4, sp, #124	; 0x7c
 802a874:	f44f 7201 	mov.w	r2, #516	; 0x204
 802a878:	f854 5b04 	ldr.w	r5, [r4], #4
 802a87c:	f8ad 2014 	strh.w	r2, [sp, #20]
 802a880:	9002      	str	r0, [sp, #8]
 802a882:	9006      	str	r0, [sp, #24]
 802a884:	f7d5 fcae 	bl	80001e4 <strlen>
 802a888:	4b0b      	ldr	r3, [pc, #44]	; (802a8b8 <siscanf+0x4c>)
 802a88a:	9003      	str	r0, [sp, #12]
 802a88c:	9007      	str	r0, [sp, #28]
 802a88e:	930b      	str	r3, [sp, #44]	; 0x2c
 802a890:	480a      	ldr	r0, [pc, #40]	; (802a8bc <siscanf+0x50>)
 802a892:	9401      	str	r4, [sp, #4]
 802a894:	2300      	movs	r3, #0
 802a896:	930f      	str	r3, [sp, #60]	; 0x3c
 802a898:	9314      	str	r3, [sp, #80]	; 0x50
 802a89a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802a89e:	f8ad 3016 	strh.w	r3, [sp, #22]
 802a8a2:	462a      	mov	r2, r5
 802a8a4:	4623      	mov	r3, r4
 802a8a6:	a902      	add	r1, sp, #8
 802a8a8:	6800      	ldr	r0, [r0, #0]
 802a8aa:	f001 faff 	bl	802beac <__ssvfiscanf_r>
 802a8ae:	b01c      	add	sp, #112	; 0x70
 802a8b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a8b4:	b003      	add	sp, #12
 802a8b6:	4770      	bx	lr
 802a8b8:	0802a8c1 	.word	0x0802a8c1
 802a8bc:	2000285c 	.word	0x2000285c

0802a8c0 <__seofread>:
 802a8c0:	2000      	movs	r0, #0
 802a8c2:	4770      	bx	lr

0802a8c4 <strcpy>:
 802a8c4:	4603      	mov	r3, r0
 802a8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a8ca:	f803 2b01 	strb.w	r2, [r3], #1
 802a8ce:	2a00      	cmp	r2, #0
 802a8d0:	d1f9      	bne.n	802a8c6 <strcpy+0x2>
 802a8d2:	4770      	bx	lr

0802a8d4 <quorem>:
 802a8d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a8d8:	6903      	ldr	r3, [r0, #16]
 802a8da:	690c      	ldr	r4, [r1, #16]
 802a8dc:	42a3      	cmp	r3, r4
 802a8de:	4680      	mov	r8, r0
 802a8e0:	f2c0 8082 	blt.w	802a9e8 <quorem+0x114>
 802a8e4:	3c01      	subs	r4, #1
 802a8e6:	f101 0714 	add.w	r7, r1, #20
 802a8ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 802a8ee:	f100 0614 	add.w	r6, r0, #20
 802a8f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 802a8f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802a8fa:	eb06 030c 	add.w	r3, r6, ip
 802a8fe:	3501      	adds	r5, #1
 802a900:	eb07 090c 	add.w	r9, r7, ip
 802a904:	9301      	str	r3, [sp, #4]
 802a906:	fbb0 f5f5 	udiv	r5, r0, r5
 802a90a:	b395      	cbz	r5, 802a972 <quorem+0x9e>
 802a90c:	f04f 0a00 	mov.w	sl, #0
 802a910:	4638      	mov	r0, r7
 802a912:	46b6      	mov	lr, r6
 802a914:	46d3      	mov	fp, sl
 802a916:	f850 2b04 	ldr.w	r2, [r0], #4
 802a91a:	b293      	uxth	r3, r2
 802a91c:	fb05 a303 	mla	r3, r5, r3, sl
 802a920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802a924:	b29b      	uxth	r3, r3
 802a926:	ebab 0303 	sub.w	r3, fp, r3
 802a92a:	0c12      	lsrs	r2, r2, #16
 802a92c:	f8de b000 	ldr.w	fp, [lr]
 802a930:	fb05 a202 	mla	r2, r5, r2, sl
 802a934:	fa13 f38b 	uxtah	r3, r3, fp
 802a938:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 802a93c:	fa1f fb82 	uxth.w	fp, r2
 802a940:	f8de 2000 	ldr.w	r2, [lr]
 802a944:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 802a948:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802a94c:	b29b      	uxth	r3, r3
 802a94e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802a952:	4581      	cmp	r9, r0
 802a954:	ea4f 4b22 	mov.w	fp, r2, asr #16
 802a958:	f84e 3b04 	str.w	r3, [lr], #4
 802a95c:	d2db      	bcs.n	802a916 <quorem+0x42>
 802a95e:	f856 300c 	ldr.w	r3, [r6, ip]
 802a962:	b933      	cbnz	r3, 802a972 <quorem+0x9e>
 802a964:	9b01      	ldr	r3, [sp, #4]
 802a966:	3b04      	subs	r3, #4
 802a968:	429e      	cmp	r6, r3
 802a96a:	461a      	mov	r2, r3
 802a96c:	d330      	bcc.n	802a9d0 <quorem+0xfc>
 802a96e:	f8c8 4010 	str.w	r4, [r8, #16]
 802a972:	4640      	mov	r0, r8
 802a974:	f001 f81a 	bl	802b9ac <__mcmp>
 802a978:	2800      	cmp	r0, #0
 802a97a:	db25      	blt.n	802a9c8 <quorem+0xf4>
 802a97c:	3501      	adds	r5, #1
 802a97e:	4630      	mov	r0, r6
 802a980:	f04f 0c00 	mov.w	ip, #0
 802a984:	f857 2b04 	ldr.w	r2, [r7], #4
 802a988:	f8d0 e000 	ldr.w	lr, [r0]
 802a98c:	b293      	uxth	r3, r2
 802a98e:	ebac 0303 	sub.w	r3, ip, r3
 802a992:	0c12      	lsrs	r2, r2, #16
 802a994:	fa13 f38e 	uxtah	r3, r3, lr
 802a998:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802a99c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802a9a0:	b29b      	uxth	r3, r3
 802a9a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802a9a6:	45b9      	cmp	r9, r7
 802a9a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802a9ac:	f840 3b04 	str.w	r3, [r0], #4
 802a9b0:	d2e8      	bcs.n	802a984 <quorem+0xb0>
 802a9b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 802a9b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 802a9ba:	b92a      	cbnz	r2, 802a9c8 <quorem+0xf4>
 802a9bc:	3b04      	subs	r3, #4
 802a9be:	429e      	cmp	r6, r3
 802a9c0:	461a      	mov	r2, r3
 802a9c2:	d30b      	bcc.n	802a9dc <quorem+0x108>
 802a9c4:	f8c8 4010 	str.w	r4, [r8, #16]
 802a9c8:	4628      	mov	r0, r5
 802a9ca:	b003      	add	sp, #12
 802a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a9d0:	6812      	ldr	r2, [r2, #0]
 802a9d2:	3b04      	subs	r3, #4
 802a9d4:	2a00      	cmp	r2, #0
 802a9d6:	d1ca      	bne.n	802a96e <quorem+0x9a>
 802a9d8:	3c01      	subs	r4, #1
 802a9da:	e7c5      	b.n	802a968 <quorem+0x94>
 802a9dc:	6812      	ldr	r2, [r2, #0]
 802a9de:	3b04      	subs	r3, #4
 802a9e0:	2a00      	cmp	r2, #0
 802a9e2:	d1ef      	bne.n	802a9c4 <quorem+0xf0>
 802a9e4:	3c01      	subs	r4, #1
 802a9e6:	e7ea      	b.n	802a9be <quorem+0xea>
 802a9e8:	2000      	movs	r0, #0
 802a9ea:	e7ee      	b.n	802a9ca <quorem+0xf6>
 802a9ec:	0000      	movs	r0, r0
	...

0802a9f0 <_dtoa_r>:
 802a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9f4:	ec57 6b10 	vmov	r6, r7, d0
 802a9f8:	b097      	sub	sp, #92	; 0x5c
 802a9fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802a9fc:	9106      	str	r1, [sp, #24]
 802a9fe:	4604      	mov	r4, r0
 802aa00:	920b      	str	r2, [sp, #44]	; 0x2c
 802aa02:	9312      	str	r3, [sp, #72]	; 0x48
 802aa04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802aa08:	e9cd 6700 	strd	r6, r7, [sp]
 802aa0c:	b93d      	cbnz	r5, 802aa1e <_dtoa_r+0x2e>
 802aa0e:	2010      	movs	r0, #16
 802aa10:	f7ff f9c0 	bl	8029d94 <malloc>
 802aa14:	6260      	str	r0, [r4, #36]	; 0x24
 802aa16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802aa1a:	6005      	str	r5, [r0, #0]
 802aa1c:	60c5      	str	r5, [r0, #12]
 802aa1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802aa20:	6819      	ldr	r1, [r3, #0]
 802aa22:	b151      	cbz	r1, 802aa3a <_dtoa_r+0x4a>
 802aa24:	685a      	ldr	r2, [r3, #4]
 802aa26:	604a      	str	r2, [r1, #4]
 802aa28:	2301      	movs	r3, #1
 802aa2a:	4093      	lsls	r3, r2
 802aa2c:	608b      	str	r3, [r1, #8]
 802aa2e:	4620      	mov	r0, r4
 802aa30:	f000 fdda 	bl	802b5e8 <_Bfree>
 802aa34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802aa36:	2200      	movs	r2, #0
 802aa38:	601a      	str	r2, [r3, #0]
 802aa3a:	1e3b      	subs	r3, r7, #0
 802aa3c:	bfbb      	ittet	lt
 802aa3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802aa42:	9301      	strlt	r3, [sp, #4]
 802aa44:	2300      	movge	r3, #0
 802aa46:	2201      	movlt	r2, #1
 802aa48:	bfac      	ite	ge
 802aa4a:	f8c8 3000 	strge.w	r3, [r8]
 802aa4e:	f8c8 2000 	strlt.w	r2, [r8]
 802aa52:	4baf      	ldr	r3, [pc, #700]	; (802ad10 <_dtoa_r+0x320>)
 802aa54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802aa58:	ea33 0308 	bics.w	r3, r3, r8
 802aa5c:	d114      	bne.n	802aa88 <_dtoa_r+0x98>
 802aa5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802aa60:	f242 730f 	movw	r3, #9999	; 0x270f
 802aa64:	6013      	str	r3, [r2, #0]
 802aa66:	9b00      	ldr	r3, [sp, #0]
 802aa68:	b923      	cbnz	r3, 802aa74 <_dtoa_r+0x84>
 802aa6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 802aa6e:	2800      	cmp	r0, #0
 802aa70:	f000 8542 	beq.w	802b4f8 <_dtoa_r+0xb08>
 802aa74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802aa76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 802ad24 <_dtoa_r+0x334>
 802aa7a:	2b00      	cmp	r3, #0
 802aa7c:	f000 8544 	beq.w	802b508 <_dtoa_r+0xb18>
 802aa80:	f10b 0303 	add.w	r3, fp, #3
 802aa84:	f000 bd3e 	b.w	802b504 <_dtoa_r+0xb14>
 802aa88:	e9dd 6700 	ldrd	r6, r7, [sp]
 802aa8c:	2200      	movs	r2, #0
 802aa8e:	2300      	movs	r3, #0
 802aa90:	4630      	mov	r0, r6
 802aa92:	4639      	mov	r1, r7
 802aa94:	f7d6 f828 	bl	8000ae8 <__aeabi_dcmpeq>
 802aa98:	4681      	mov	r9, r0
 802aa9a:	b168      	cbz	r0, 802aab8 <_dtoa_r+0xc8>
 802aa9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802aa9e:	2301      	movs	r3, #1
 802aaa0:	6013      	str	r3, [r2, #0]
 802aaa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802aaa4:	2b00      	cmp	r3, #0
 802aaa6:	f000 8524 	beq.w	802b4f2 <_dtoa_r+0xb02>
 802aaaa:	4b9a      	ldr	r3, [pc, #616]	; (802ad14 <_dtoa_r+0x324>)
 802aaac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802aaae:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 802aab2:	6013      	str	r3, [r2, #0]
 802aab4:	f000 bd28 	b.w	802b508 <_dtoa_r+0xb18>
 802aab8:	aa14      	add	r2, sp, #80	; 0x50
 802aaba:	a915      	add	r1, sp, #84	; 0x54
 802aabc:	ec47 6b10 	vmov	d0, r6, r7
 802aac0:	4620      	mov	r0, r4
 802aac2:	f000 ffea 	bl	802ba9a <__d2b>
 802aac6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802aaca:	9004      	str	r0, [sp, #16]
 802aacc:	2d00      	cmp	r5, #0
 802aace:	d07c      	beq.n	802abca <_dtoa_r+0x1da>
 802aad0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802aad4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 802aad8:	46b2      	mov	sl, r6
 802aada:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 802aade:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802aae2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 802aae6:	2200      	movs	r2, #0
 802aae8:	4b8b      	ldr	r3, [pc, #556]	; (802ad18 <_dtoa_r+0x328>)
 802aaea:	4650      	mov	r0, sl
 802aaec:	4659      	mov	r1, fp
 802aaee:	f7d5 fbdb 	bl	80002a8 <__aeabi_dsub>
 802aaf2:	a381      	add	r3, pc, #516	; (adr r3, 802acf8 <_dtoa_r+0x308>)
 802aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802aaf8:	f7d5 fd8e 	bl	8000618 <__aeabi_dmul>
 802aafc:	a380      	add	r3, pc, #512	; (adr r3, 802ad00 <_dtoa_r+0x310>)
 802aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ab02:	f7d5 fbd3 	bl	80002ac <__adddf3>
 802ab06:	4606      	mov	r6, r0
 802ab08:	4628      	mov	r0, r5
 802ab0a:	460f      	mov	r7, r1
 802ab0c:	f7d5 fd1a 	bl	8000544 <__aeabi_i2d>
 802ab10:	a37d      	add	r3, pc, #500	; (adr r3, 802ad08 <_dtoa_r+0x318>)
 802ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ab16:	f7d5 fd7f 	bl	8000618 <__aeabi_dmul>
 802ab1a:	4602      	mov	r2, r0
 802ab1c:	460b      	mov	r3, r1
 802ab1e:	4630      	mov	r0, r6
 802ab20:	4639      	mov	r1, r7
 802ab22:	f7d5 fbc3 	bl	80002ac <__adddf3>
 802ab26:	4606      	mov	r6, r0
 802ab28:	460f      	mov	r7, r1
 802ab2a:	f7d6 f825 	bl	8000b78 <__aeabi_d2iz>
 802ab2e:	2200      	movs	r2, #0
 802ab30:	4682      	mov	sl, r0
 802ab32:	2300      	movs	r3, #0
 802ab34:	4630      	mov	r0, r6
 802ab36:	4639      	mov	r1, r7
 802ab38:	f7d5 ffe0 	bl	8000afc <__aeabi_dcmplt>
 802ab3c:	b148      	cbz	r0, 802ab52 <_dtoa_r+0x162>
 802ab3e:	4650      	mov	r0, sl
 802ab40:	f7d5 fd00 	bl	8000544 <__aeabi_i2d>
 802ab44:	4632      	mov	r2, r6
 802ab46:	463b      	mov	r3, r7
 802ab48:	f7d5 ffce 	bl	8000ae8 <__aeabi_dcmpeq>
 802ab4c:	b908      	cbnz	r0, 802ab52 <_dtoa_r+0x162>
 802ab4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802ab52:	f1ba 0f16 	cmp.w	sl, #22
 802ab56:	d859      	bhi.n	802ac0c <_dtoa_r+0x21c>
 802ab58:	4970      	ldr	r1, [pc, #448]	; (802ad1c <_dtoa_r+0x32c>)
 802ab5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802ab5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ab62:	e9d1 0100 	ldrd	r0, r1, [r1]
 802ab66:	f7d5 ffe7 	bl	8000b38 <__aeabi_dcmpgt>
 802ab6a:	2800      	cmp	r0, #0
 802ab6c:	d050      	beq.n	802ac10 <_dtoa_r+0x220>
 802ab6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802ab72:	2300      	movs	r3, #0
 802ab74:	930f      	str	r3, [sp, #60]	; 0x3c
 802ab76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802ab78:	1b5d      	subs	r5, r3, r5
 802ab7a:	f1b5 0801 	subs.w	r8, r5, #1
 802ab7e:	bf49      	itett	mi
 802ab80:	f1c5 0301 	rsbmi	r3, r5, #1
 802ab84:	2300      	movpl	r3, #0
 802ab86:	9305      	strmi	r3, [sp, #20]
 802ab88:	f04f 0800 	movmi.w	r8, #0
 802ab8c:	bf58      	it	pl
 802ab8e:	9305      	strpl	r3, [sp, #20]
 802ab90:	f1ba 0f00 	cmp.w	sl, #0
 802ab94:	db3e      	blt.n	802ac14 <_dtoa_r+0x224>
 802ab96:	2300      	movs	r3, #0
 802ab98:	44d0      	add	r8, sl
 802ab9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 802ab9e:	9307      	str	r3, [sp, #28]
 802aba0:	9b06      	ldr	r3, [sp, #24]
 802aba2:	2b09      	cmp	r3, #9
 802aba4:	f200 8090 	bhi.w	802acc8 <_dtoa_r+0x2d8>
 802aba8:	2b05      	cmp	r3, #5
 802abaa:	bfc4      	itt	gt
 802abac:	3b04      	subgt	r3, #4
 802abae:	9306      	strgt	r3, [sp, #24]
 802abb0:	9b06      	ldr	r3, [sp, #24]
 802abb2:	f1a3 0302 	sub.w	r3, r3, #2
 802abb6:	bfcc      	ite	gt
 802abb8:	2500      	movgt	r5, #0
 802abba:	2501      	movle	r5, #1
 802abbc:	2b03      	cmp	r3, #3
 802abbe:	f200 808f 	bhi.w	802ace0 <_dtoa_r+0x2f0>
 802abc2:	e8df f003 	tbb	[pc, r3]
 802abc6:	7f7d      	.short	0x7f7d
 802abc8:	7131      	.short	0x7131
 802abca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 802abce:	441d      	add	r5, r3
 802abd0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 802abd4:	2820      	cmp	r0, #32
 802abd6:	dd13      	ble.n	802ac00 <_dtoa_r+0x210>
 802abd8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 802abdc:	9b00      	ldr	r3, [sp, #0]
 802abde:	fa08 f800 	lsl.w	r8, r8, r0
 802abe2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 802abe6:	fa23 f000 	lsr.w	r0, r3, r0
 802abea:	ea48 0000 	orr.w	r0, r8, r0
 802abee:	f7d5 fc99 	bl	8000524 <__aeabi_ui2d>
 802abf2:	2301      	movs	r3, #1
 802abf4:	4682      	mov	sl, r0
 802abf6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 802abfa:	3d01      	subs	r5, #1
 802abfc:	9313      	str	r3, [sp, #76]	; 0x4c
 802abfe:	e772      	b.n	802aae6 <_dtoa_r+0xf6>
 802ac00:	9b00      	ldr	r3, [sp, #0]
 802ac02:	f1c0 0020 	rsb	r0, r0, #32
 802ac06:	fa03 f000 	lsl.w	r0, r3, r0
 802ac0a:	e7f0      	b.n	802abee <_dtoa_r+0x1fe>
 802ac0c:	2301      	movs	r3, #1
 802ac0e:	e7b1      	b.n	802ab74 <_dtoa_r+0x184>
 802ac10:	900f      	str	r0, [sp, #60]	; 0x3c
 802ac12:	e7b0      	b.n	802ab76 <_dtoa_r+0x186>
 802ac14:	9b05      	ldr	r3, [sp, #20]
 802ac16:	eba3 030a 	sub.w	r3, r3, sl
 802ac1a:	9305      	str	r3, [sp, #20]
 802ac1c:	f1ca 0300 	rsb	r3, sl, #0
 802ac20:	9307      	str	r3, [sp, #28]
 802ac22:	2300      	movs	r3, #0
 802ac24:	930e      	str	r3, [sp, #56]	; 0x38
 802ac26:	e7bb      	b.n	802aba0 <_dtoa_r+0x1b0>
 802ac28:	2301      	movs	r3, #1
 802ac2a:	930a      	str	r3, [sp, #40]	; 0x28
 802ac2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ac2e:	2b00      	cmp	r3, #0
 802ac30:	dd59      	ble.n	802ace6 <_dtoa_r+0x2f6>
 802ac32:	9302      	str	r3, [sp, #8]
 802ac34:	4699      	mov	r9, r3
 802ac36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802ac38:	2200      	movs	r2, #0
 802ac3a:	6072      	str	r2, [r6, #4]
 802ac3c:	2204      	movs	r2, #4
 802ac3e:	f102 0014 	add.w	r0, r2, #20
 802ac42:	4298      	cmp	r0, r3
 802ac44:	6871      	ldr	r1, [r6, #4]
 802ac46:	d953      	bls.n	802acf0 <_dtoa_r+0x300>
 802ac48:	4620      	mov	r0, r4
 802ac4a:	f000 fc99 	bl	802b580 <_Balloc>
 802ac4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ac50:	6030      	str	r0, [r6, #0]
 802ac52:	f1b9 0f0e 	cmp.w	r9, #14
 802ac56:	f8d3 b000 	ldr.w	fp, [r3]
 802ac5a:	f200 80e6 	bhi.w	802ae2a <_dtoa_r+0x43a>
 802ac5e:	2d00      	cmp	r5, #0
 802ac60:	f000 80e3 	beq.w	802ae2a <_dtoa_r+0x43a>
 802ac64:	ed9d 7b00 	vldr	d7, [sp]
 802ac68:	f1ba 0f00 	cmp.w	sl, #0
 802ac6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 802ac70:	dd74      	ble.n	802ad5c <_dtoa_r+0x36c>
 802ac72:	4a2a      	ldr	r2, [pc, #168]	; (802ad1c <_dtoa_r+0x32c>)
 802ac74:	f00a 030f 	and.w	r3, sl, #15
 802ac78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802ac7c:	ed93 7b00 	vldr	d7, [r3]
 802ac80:	ea4f 162a 	mov.w	r6, sl, asr #4
 802ac84:	06f0      	lsls	r0, r6, #27
 802ac86:	ed8d 7b08 	vstr	d7, [sp, #32]
 802ac8a:	d565      	bpl.n	802ad58 <_dtoa_r+0x368>
 802ac8c:	4b24      	ldr	r3, [pc, #144]	; (802ad20 <_dtoa_r+0x330>)
 802ac8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802ac92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802ac96:	f7d5 fde9 	bl	800086c <__aeabi_ddiv>
 802ac9a:	e9cd 0100 	strd	r0, r1, [sp]
 802ac9e:	f006 060f 	and.w	r6, r6, #15
 802aca2:	2503      	movs	r5, #3
 802aca4:	4f1e      	ldr	r7, [pc, #120]	; (802ad20 <_dtoa_r+0x330>)
 802aca6:	e04c      	b.n	802ad42 <_dtoa_r+0x352>
 802aca8:	2301      	movs	r3, #1
 802acaa:	930a      	str	r3, [sp, #40]	; 0x28
 802acac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802acae:	4453      	add	r3, sl
 802acb0:	f103 0901 	add.w	r9, r3, #1
 802acb4:	9302      	str	r3, [sp, #8]
 802acb6:	464b      	mov	r3, r9
 802acb8:	2b01      	cmp	r3, #1
 802acba:	bfb8      	it	lt
 802acbc:	2301      	movlt	r3, #1
 802acbe:	e7ba      	b.n	802ac36 <_dtoa_r+0x246>
 802acc0:	2300      	movs	r3, #0
 802acc2:	e7b2      	b.n	802ac2a <_dtoa_r+0x23a>
 802acc4:	2300      	movs	r3, #0
 802acc6:	e7f0      	b.n	802acaa <_dtoa_r+0x2ba>
 802acc8:	2501      	movs	r5, #1
 802acca:	2300      	movs	r3, #0
 802accc:	9306      	str	r3, [sp, #24]
 802acce:	950a      	str	r5, [sp, #40]	; 0x28
 802acd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802acd4:	9302      	str	r3, [sp, #8]
 802acd6:	4699      	mov	r9, r3
 802acd8:	2200      	movs	r2, #0
 802acda:	2312      	movs	r3, #18
 802acdc:	920b      	str	r2, [sp, #44]	; 0x2c
 802acde:	e7aa      	b.n	802ac36 <_dtoa_r+0x246>
 802ace0:	2301      	movs	r3, #1
 802ace2:	930a      	str	r3, [sp, #40]	; 0x28
 802ace4:	e7f4      	b.n	802acd0 <_dtoa_r+0x2e0>
 802ace6:	2301      	movs	r3, #1
 802ace8:	9302      	str	r3, [sp, #8]
 802acea:	4699      	mov	r9, r3
 802acec:	461a      	mov	r2, r3
 802acee:	e7f5      	b.n	802acdc <_dtoa_r+0x2ec>
 802acf0:	3101      	adds	r1, #1
 802acf2:	6071      	str	r1, [r6, #4]
 802acf4:	0052      	lsls	r2, r2, #1
 802acf6:	e7a2      	b.n	802ac3e <_dtoa_r+0x24e>
 802acf8:	636f4361 	.word	0x636f4361
 802acfc:	3fd287a7 	.word	0x3fd287a7
 802ad00:	8b60c8b3 	.word	0x8b60c8b3
 802ad04:	3fc68a28 	.word	0x3fc68a28
 802ad08:	509f79fb 	.word	0x509f79fb
 802ad0c:	3fd34413 	.word	0x3fd34413
 802ad10:	7ff00000 	.word	0x7ff00000
 802ad14:	08047de4 	.word	0x08047de4
 802ad18:	3ff80000 	.word	0x3ff80000
 802ad1c:	08047ce8 	.word	0x08047ce8
 802ad20:	08047cc0 	.word	0x08047cc0
 802ad24:	08047c5b 	.word	0x08047c5b
 802ad28:	07f1      	lsls	r1, r6, #31
 802ad2a:	d508      	bpl.n	802ad3e <_dtoa_r+0x34e>
 802ad2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802ad30:	e9d7 2300 	ldrd	r2, r3, [r7]
 802ad34:	f7d5 fc70 	bl	8000618 <__aeabi_dmul>
 802ad38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802ad3c:	3501      	adds	r5, #1
 802ad3e:	1076      	asrs	r6, r6, #1
 802ad40:	3708      	adds	r7, #8
 802ad42:	2e00      	cmp	r6, #0
 802ad44:	d1f0      	bne.n	802ad28 <_dtoa_r+0x338>
 802ad46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802ad4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ad4e:	f7d5 fd8d 	bl	800086c <__aeabi_ddiv>
 802ad52:	e9cd 0100 	strd	r0, r1, [sp]
 802ad56:	e01a      	b.n	802ad8e <_dtoa_r+0x39e>
 802ad58:	2502      	movs	r5, #2
 802ad5a:	e7a3      	b.n	802aca4 <_dtoa_r+0x2b4>
 802ad5c:	f000 80a0 	beq.w	802aea0 <_dtoa_r+0x4b0>
 802ad60:	f1ca 0600 	rsb	r6, sl, #0
 802ad64:	4b9f      	ldr	r3, [pc, #636]	; (802afe4 <_dtoa_r+0x5f4>)
 802ad66:	4fa0      	ldr	r7, [pc, #640]	; (802afe8 <_dtoa_r+0x5f8>)
 802ad68:	f006 020f 	and.w	r2, r6, #15
 802ad6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ad74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802ad78:	f7d5 fc4e 	bl	8000618 <__aeabi_dmul>
 802ad7c:	e9cd 0100 	strd	r0, r1, [sp]
 802ad80:	1136      	asrs	r6, r6, #4
 802ad82:	2300      	movs	r3, #0
 802ad84:	2502      	movs	r5, #2
 802ad86:	2e00      	cmp	r6, #0
 802ad88:	d17f      	bne.n	802ae8a <_dtoa_r+0x49a>
 802ad8a:	2b00      	cmp	r3, #0
 802ad8c:	d1e1      	bne.n	802ad52 <_dtoa_r+0x362>
 802ad8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802ad90:	2b00      	cmp	r3, #0
 802ad92:	f000 8087 	beq.w	802aea4 <_dtoa_r+0x4b4>
 802ad96:	e9dd 6700 	ldrd	r6, r7, [sp]
 802ad9a:	2200      	movs	r2, #0
 802ad9c:	4b93      	ldr	r3, [pc, #588]	; (802afec <_dtoa_r+0x5fc>)
 802ad9e:	4630      	mov	r0, r6
 802ada0:	4639      	mov	r1, r7
 802ada2:	f7d5 feab 	bl	8000afc <__aeabi_dcmplt>
 802ada6:	2800      	cmp	r0, #0
 802ada8:	d07c      	beq.n	802aea4 <_dtoa_r+0x4b4>
 802adaa:	f1b9 0f00 	cmp.w	r9, #0
 802adae:	d079      	beq.n	802aea4 <_dtoa_r+0x4b4>
 802adb0:	9b02      	ldr	r3, [sp, #8]
 802adb2:	2b00      	cmp	r3, #0
 802adb4:	dd35      	ble.n	802ae22 <_dtoa_r+0x432>
 802adb6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 802adba:	9308      	str	r3, [sp, #32]
 802adbc:	4639      	mov	r1, r7
 802adbe:	2200      	movs	r2, #0
 802adc0:	4b8b      	ldr	r3, [pc, #556]	; (802aff0 <_dtoa_r+0x600>)
 802adc2:	4630      	mov	r0, r6
 802adc4:	f7d5 fc28 	bl	8000618 <__aeabi_dmul>
 802adc8:	e9cd 0100 	strd	r0, r1, [sp]
 802adcc:	9f02      	ldr	r7, [sp, #8]
 802adce:	3501      	adds	r5, #1
 802add0:	4628      	mov	r0, r5
 802add2:	f7d5 fbb7 	bl	8000544 <__aeabi_i2d>
 802add6:	e9dd 2300 	ldrd	r2, r3, [sp]
 802adda:	f7d5 fc1d 	bl	8000618 <__aeabi_dmul>
 802adde:	2200      	movs	r2, #0
 802ade0:	4b84      	ldr	r3, [pc, #528]	; (802aff4 <_dtoa_r+0x604>)
 802ade2:	f7d5 fa63 	bl	80002ac <__adddf3>
 802ade6:	4605      	mov	r5, r0
 802ade8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802adec:	2f00      	cmp	r7, #0
 802adee:	d15d      	bne.n	802aeac <_dtoa_r+0x4bc>
 802adf0:	2200      	movs	r2, #0
 802adf2:	4b81      	ldr	r3, [pc, #516]	; (802aff8 <_dtoa_r+0x608>)
 802adf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 802adf8:	f7d5 fa56 	bl	80002a8 <__aeabi_dsub>
 802adfc:	462a      	mov	r2, r5
 802adfe:	4633      	mov	r3, r6
 802ae00:	e9cd 0100 	strd	r0, r1, [sp]
 802ae04:	f7d5 fe98 	bl	8000b38 <__aeabi_dcmpgt>
 802ae08:	2800      	cmp	r0, #0
 802ae0a:	f040 8288 	bne.w	802b31e <_dtoa_r+0x92e>
 802ae0e:	462a      	mov	r2, r5
 802ae10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802ae14:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ae18:	f7d5 fe70 	bl	8000afc <__aeabi_dcmplt>
 802ae1c:	2800      	cmp	r0, #0
 802ae1e:	f040 827c 	bne.w	802b31a <_dtoa_r+0x92a>
 802ae22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802ae26:	e9cd 2300 	strd	r2, r3, [sp]
 802ae2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802ae2c:	2b00      	cmp	r3, #0
 802ae2e:	f2c0 8150 	blt.w	802b0d2 <_dtoa_r+0x6e2>
 802ae32:	f1ba 0f0e 	cmp.w	sl, #14
 802ae36:	f300 814c 	bgt.w	802b0d2 <_dtoa_r+0x6e2>
 802ae3a:	4b6a      	ldr	r3, [pc, #424]	; (802afe4 <_dtoa_r+0x5f4>)
 802ae3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802ae40:	ed93 7b00 	vldr	d7, [r3]
 802ae44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ae46:	2b00      	cmp	r3, #0
 802ae48:	ed8d 7b02 	vstr	d7, [sp, #8]
 802ae4c:	f280 80d8 	bge.w	802b000 <_dtoa_r+0x610>
 802ae50:	f1b9 0f00 	cmp.w	r9, #0
 802ae54:	f300 80d4 	bgt.w	802b000 <_dtoa_r+0x610>
 802ae58:	f040 825e 	bne.w	802b318 <_dtoa_r+0x928>
 802ae5c:	2200      	movs	r2, #0
 802ae5e:	4b66      	ldr	r3, [pc, #408]	; (802aff8 <_dtoa_r+0x608>)
 802ae60:	ec51 0b17 	vmov	r0, r1, d7
 802ae64:	f7d5 fbd8 	bl	8000618 <__aeabi_dmul>
 802ae68:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ae6c:	f7d5 fe5a 	bl	8000b24 <__aeabi_dcmpge>
 802ae70:	464f      	mov	r7, r9
 802ae72:	464e      	mov	r6, r9
 802ae74:	2800      	cmp	r0, #0
 802ae76:	f040 8234 	bne.w	802b2e2 <_dtoa_r+0x8f2>
 802ae7a:	2331      	movs	r3, #49	; 0x31
 802ae7c:	f10b 0501 	add.w	r5, fp, #1
 802ae80:	f88b 3000 	strb.w	r3, [fp]
 802ae84:	f10a 0a01 	add.w	sl, sl, #1
 802ae88:	e22f      	b.n	802b2ea <_dtoa_r+0x8fa>
 802ae8a:	07f2      	lsls	r2, r6, #31
 802ae8c:	d505      	bpl.n	802ae9a <_dtoa_r+0x4aa>
 802ae8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 802ae92:	f7d5 fbc1 	bl	8000618 <__aeabi_dmul>
 802ae96:	3501      	adds	r5, #1
 802ae98:	2301      	movs	r3, #1
 802ae9a:	1076      	asrs	r6, r6, #1
 802ae9c:	3708      	adds	r7, #8
 802ae9e:	e772      	b.n	802ad86 <_dtoa_r+0x396>
 802aea0:	2502      	movs	r5, #2
 802aea2:	e774      	b.n	802ad8e <_dtoa_r+0x39e>
 802aea4:	f8cd a020 	str.w	sl, [sp, #32]
 802aea8:	464f      	mov	r7, r9
 802aeaa:	e791      	b.n	802add0 <_dtoa_r+0x3e0>
 802aeac:	4b4d      	ldr	r3, [pc, #308]	; (802afe4 <_dtoa_r+0x5f4>)
 802aeae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802aeb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802aeb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802aeb8:	2b00      	cmp	r3, #0
 802aeba:	d047      	beq.n	802af4c <_dtoa_r+0x55c>
 802aebc:	4602      	mov	r2, r0
 802aebe:	460b      	mov	r3, r1
 802aec0:	2000      	movs	r0, #0
 802aec2:	494e      	ldr	r1, [pc, #312]	; (802affc <_dtoa_r+0x60c>)
 802aec4:	f7d5 fcd2 	bl	800086c <__aeabi_ddiv>
 802aec8:	462a      	mov	r2, r5
 802aeca:	4633      	mov	r3, r6
 802aecc:	f7d5 f9ec 	bl	80002a8 <__aeabi_dsub>
 802aed0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802aed4:	465d      	mov	r5, fp
 802aed6:	e9dd 0100 	ldrd	r0, r1, [sp]
 802aeda:	f7d5 fe4d 	bl	8000b78 <__aeabi_d2iz>
 802aede:	4606      	mov	r6, r0
 802aee0:	f7d5 fb30 	bl	8000544 <__aeabi_i2d>
 802aee4:	4602      	mov	r2, r0
 802aee6:	460b      	mov	r3, r1
 802aee8:	e9dd 0100 	ldrd	r0, r1, [sp]
 802aeec:	f7d5 f9dc 	bl	80002a8 <__aeabi_dsub>
 802aef0:	3630      	adds	r6, #48	; 0x30
 802aef2:	f805 6b01 	strb.w	r6, [r5], #1
 802aef6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802aefa:	e9cd 0100 	strd	r0, r1, [sp]
 802aefe:	f7d5 fdfd 	bl	8000afc <__aeabi_dcmplt>
 802af02:	2800      	cmp	r0, #0
 802af04:	d163      	bne.n	802afce <_dtoa_r+0x5de>
 802af06:	e9dd 2300 	ldrd	r2, r3, [sp]
 802af0a:	2000      	movs	r0, #0
 802af0c:	4937      	ldr	r1, [pc, #220]	; (802afec <_dtoa_r+0x5fc>)
 802af0e:	f7d5 f9cb 	bl	80002a8 <__aeabi_dsub>
 802af12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802af16:	f7d5 fdf1 	bl	8000afc <__aeabi_dcmplt>
 802af1a:	2800      	cmp	r0, #0
 802af1c:	f040 80b7 	bne.w	802b08e <_dtoa_r+0x69e>
 802af20:	eba5 030b 	sub.w	r3, r5, fp
 802af24:	429f      	cmp	r7, r3
 802af26:	f77f af7c 	ble.w	802ae22 <_dtoa_r+0x432>
 802af2a:	2200      	movs	r2, #0
 802af2c:	4b30      	ldr	r3, [pc, #192]	; (802aff0 <_dtoa_r+0x600>)
 802af2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802af32:	f7d5 fb71 	bl	8000618 <__aeabi_dmul>
 802af36:	2200      	movs	r2, #0
 802af38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802af3c:	4b2c      	ldr	r3, [pc, #176]	; (802aff0 <_dtoa_r+0x600>)
 802af3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802af42:	f7d5 fb69 	bl	8000618 <__aeabi_dmul>
 802af46:	e9cd 0100 	strd	r0, r1, [sp]
 802af4a:	e7c4      	b.n	802aed6 <_dtoa_r+0x4e6>
 802af4c:	462a      	mov	r2, r5
 802af4e:	4633      	mov	r3, r6
 802af50:	f7d5 fb62 	bl	8000618 <__aeabi_dmul>
 802af54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802af58:	eb0b 0507 	add.w	r5, fp, r7
 802af5c:	465e      	mov	r6, fp
 802af5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802af62:	f7d5 fe09 	bl	8000b78 <__aeabi_d2iz>
 802af66:	4607      	mov	r7, r0
 802af68:	f7d5 faec 	bl	8000544 <__aeabi_i2d>
 802af6c:	3730      	adds	r7, #48	; 0x30
 802af6e:	4602      	mov	r2, r0
 802af70:	460b      	mov	r3, r1
 802af72:	e9dd 0100 	ldrd	r0, r1, [sp]
 802af76:	f7d5 f997 	bl	80002a8 <__aeabi_dsub>
 802af7a:	f806 7b01 	strb.w	r7, [r6], #1
 802af7e:	42ae      	cmp	r6, r5
 802af80:	e9cd 0100 	strd	r0, r1, [sp]
 802af84:	f04f 0200 	mov.w	r2, #0
 802af88:	d126      	bne.n	802afd8 <_dtoa_r+0x5e8>
 802af8a:	4b1c      	ldr	r3, [pc, #112]	; (802affc <_dtoa_r+0x60c>)
 802af8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802af90:	f7d5 f98c 	bl	80002ac <__adddf3>
 802af94:	4602      	mov	r2, r0
 802af96:	460b      	mov	r3, r1
 802af98:	e9dd 0100 	ldrd	r0, r1, [sp]
 802af9c:	f7d5 fdcc 	bl	8000b38 <__aeabi_dcmpgt>
 802afa0:	2800      	cmp	r0, #0
 802afa2:	d174      	bne.n	802b08e <_dtoa_r+0x69e>
 802afa4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802afa8:	2000      	movs	r0, #0
 802afaa:	4914      	ldr	r1, [pc, #80]	; (802affc <_dtoa_r+0x60c>)
 802afac:	f7d5 f97c 	bl	80002a8 <__aeabi_dsub>
 802afb0:	4602      	mov	r2, r0
 802afb2:	460b      	mov	r3, r1
 802afb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 802afb8:	f7d5 fda0 	bl	8000afc <__aeabi_dcmplt>
 802afbc:	2800      	cmp	r0, #0
 802afbe:	f43f af30 	beq.w	802ae22 <_dtoa_r+0x432>
 802afc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802afc6:	2b30      	cmp	r3, #48	; 0x30
 802afc8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 802afcc:	d002      	beq.n	802afd4 <_dtoa_r+0x5e4>
 802afce:	f8dd a020 	ldr.w	sl, [sp, #32]
 802afd2:	e04a      	b.n	802b06a <_dtoa_r+0x67a>
 802afd4:	4615      	mov	r5, r2
 802afd6:	e7f4      	b.n	802afc2 <_dtoa_r+0x5d2>
 802afd8:	4b05      	ldr	r3, [pc, #20]	; (802aff0 <_dtoa_r+0x600>)
 802afda:	f7d5 fb1d 	bl	8000618 <__aeabi_dmul>
 802afde:	e9cd 0100 	strd	r0, r1, [sp]
 802afe2:	e7bc      	b.n	802af5e <_dtoa_r+0x56e>
 802afe4:	08047ce8 	.word	0x08047ce8
 802afe8:	08047cc0 	.word	0x08047cc0
 802afec:	3ff00000 	.word	0x3ff00000
 802aff0:	40240000 	.word	0x40240000
 802aff4:	401c0000 	.word	0x401c0000
 802aff8:	40140000 	.word	0x40140000
 802affc:	3fe00000 	.word	0x3fe00000
 802b000:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b004:	465d      	mov	r5, fp
 802b006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b00a:	4630      	mov	r0, r6
 802b00c:	4639      	mov	r1, r7
 802b00e:	f7d5 fc2d 	bl	800086c <__aeabi_ddiv>
 802b012:	f7d5 fdb1 	bl	8000b78 <__aeabi_d2iz>
 802b016:	4680      	mov	r8, r0
 802b018:	f7d5 fa94 	bl	8000544 <__aeabi_i2d>
 802b01c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b020:	f7d5 fafa 	bl	8000618 <__aeabi_dmul>
 802b024:	4602      	mov	r2, r0
 802b026:	460b      	mov	r3, r1
 802b028:	4630      	mov	r0, r6
 802b02a:	4639      	mov	r1, r7
 802b02c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 802b030:	f7d5 f93a 	bl	80002a8 <__aeabi_dsub>
 802b034:	f805 6b01 	strb.w	r6, [r5], #1
 802b038:	eba5 060b 	sub.w	r6, r5, fp
 802b03c:	45b1      	cmp	r9, r6
 802b03e:	4602      	mov	r2, r0
 802b040:	460b      	mov	r3, r1
 802b042:	d139      	bne.n	802b0b8 <_dtoa_r+0x6c8>
 802b044:	f7d5 f932 	bl	80002ac <__adddf3>
 802b048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b04c:	4606      	mov	r6, r0
 802b04e:	460f      	mov	r7, r1
 802b050:	f7d5 fd72 	bl	8000b38 <__aeabi_dcmpgt>
 802b054:	b9c8      	cbnz	r0, 802b08a <_dtoa_r+0x69a>
 802b056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b05a:	4630      	mov	r0, r6
 802b05c:	4639      	mov	r1, r7
 802b05e:	f7d5 fd43 	bl	8000ae8 <__aeabi_dcmpeq>
 802b062:	b110      	cbz	r0, 802b06a <_dtoa_r+0x67a>
 802b064:	f018 0f01 	tst.w	r8, #1
 802b068:	d10f      	bne.n	802b08a <_dtoa_r+0x69a>
 802b06a:	9904      	ldr	r1, [sp, #16]
 802b06c:	4620      	mov	r0, r4
 802b06e:	f000 fabb 	bl	802b5e8 <_Bfree>
 802b072:	2300      	movs	r3, #0
 802b074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b076:	702b      	strb	r3, [r5, #0]
 802b078:	f10a 0301 	add.w	r3, sl, #1
 802b07c:	6013      	str	r3, [r2, #0]
 802b07e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b080:	2b00      	cmp	r3, #0
 802b082:	f000 8241 	beq.w	802b508 <_dtoa_r+0xb18>
 802b086:	601d      	str	r5, [r3, #0]
 802b088:	e23e      	b.n	802b508 <_dtoa_r+0xb18>
 802b08a:	f8cd a020 	str.w	sl, [sp, #32]
 802b08e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802b092:	2a39      	cmp	r2, #57	; 0x39
 802b094:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 802b098:	d108      	bne.n	802b0ac <_dtoa_r+0x6bc>
 802b09a:	459b      	cmp	fp, r3
 802b09c:	d10a      	bne.n	802b0b4 <_dtoa_r+0x6c4>
 802b09e:	9b08      	ldr	r3, [sp, #32]
 802b0a0:	3301      	adds	r3, #1
 802b0a2:	9308      	str	r3, [sp, #32]
 802b0a4:	2330      	movs	r3, #48	; 0x30
 802b0a6:	f88b 3000 	strb.w	r3, [fp]
 802b0aa:	465b      	mov	r3, fp
 802b0ac:	781a      	ldrb	r2, [r3, #0]
 802b0ae:	3201      	adds	r2, #1
 802b0b0:	701a      	strb	r2, [r3, #0]
 802b0b2:	e78c      	b.n	802afce <_dtoa_r+0x5de>
 802b0b4:	461d      	mov	r5, r3
 802b0b6:	e7ea      	b.n	802b08e <_dtoa_r+0x69e>
 802b0b8:	2200      	movs	r2, #0
 802b0ba:	4b9b      	ldr	r3, [pc, #620]	; (802b328 <_dtoa_r+0x938>)
 802b0bc:	f7d5 faac 	bl	8000618 <__aeabi_dmul>
 802b0c0:	2200      	movs	r2, #0
 802b0c2:	2300      	movs	r3, #0
 802b0c4:	4606      	mov	r6, r0
 802b0c6:	460f      	mov	r7, r1
 802b0c8:	f7d5 fd0e 	bl	8000ae8 <__aeabi_dcmpeq>
 802b0cc:	2800      	cmp	r0, #0
 802b0ce:	d09a      	beq.n	802b006 <_dtoa_r+0x616>
 802b0d0:	e7cb      	b.n	802b06a <_dtoa_r+0x67a>
 802b0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b0d4:	2a00      	cmp	r2, #0
 802b0d6:	f000 808b 	beq.w	802b1f0 <_dtoa_r+0x800>
 802b0da:	9a06      	ldr	r2, [sp, #24]
 802b0dc:	2a01      	cmp	r2, #1
 802b0de:	dc6e      	bgt.n	802b1be <_dtoa_r+0x7ce>
 802b0e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b0e2:	2a00      	cmp	r2, #0
 802b0e4:	d067      	beq.n	802b1b6 <_dtoa_r+0x7c6>
 802b0e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802b0ea:	9f07      	ldr	r7, [sp, #28]
 802b0ec:	9d05      	ldr	r5, [sp, #20]
 802b0ee:	9a05      	ldr	r2, [sp, #20]
 802b0f0:	2101      	movs	r1, #1
 802b0f2:	441a      	add	r2, r3
 802b0f4:	4620      	mov	r0, r4
 802b0f6:	9205      	str	r2, [sp, #20]
 802b0f8:	4498      	add	r8, r3
 802b0fa:	f000 fb15 	bl	802b728 <__i2b>
 802b0fe:	4606      	mov	r6, r0
 802b100:	2d00      	cmp	r5, #0
 802b102:	dd0c      	ble.n	802b11e <_dtoa_r+0x72e>
 802b104:	f1b8 0f00 	cmp.w	r8, #0
 802b108:	dd09      	ble.n	802b11e <_dtoa_r+0x72e>
 802b10a:	4545      	cmp	r5, r8
 802b10c:	9a05      	ldr	r2, [sp, #20]
 802b10e:	462b      	mov	r3, r5
 802b110:	bfa8      	it	ge
 802b112:	4643      	movge	r3, r8
 802b114:	1ad2      	subs	r2, r2, r3
 802b116:	9205      	str	r2, [sp, #20]
 802b118:	1aed      	subs	r5, r5, r3
 802b11a:	eba8 0803 	sub.w	r8, r8, r3
 802b11e:	9b07      	ldr	r3, [sp, #28]
 802b120:	b1eb      	cbz	r3, 802b15e <_dtoa_r+0x76e>
 802b122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b124:	2b00      	cmp	r3, #0
 802b126:	d067      	beq.n	802b1f8 <_dtoa_r+0x808>
 802b128:	b18f      	cbz	r7, 802b14e <_dtoa_r+0x75e>
 802b12a:	4631      	mov	r1, r6
 802b12c:	463a      	mov	r2, r7
 802b12e:	4620      	mov	r0, r4
 802b130:	f000 fb9a 	bl	802b868 <__pow5mult>
 802b134:	9a04      	ldr	r2, [sp, #16]
 802b136:	4601      	mov	r1, r0
 802b138:	4606      	mov	r6, r0
 802b13a:	4620      	mov	r0, r4
 802b13c:	f000 fafd 	bl	802b73a <__multiply>
 802b140:	9904      	ldr	r1, [sp, #16]
 802b142:	9008      	str	r0, [sp, #32]
 802b144:	4620      	mov	r0, r4
 802b146:	f000 fa4f 	bl	802b5e8 <_Bfree>
 802b14a:	9b08      	ldr	r3, [sp, #32]
 802b14c:	9304      	str	r3, [sp, #16]
 802b14e:	9b07      	ldr	r3, [sp, #28]
 802b150:	1bda      	subs	r2, r3, r7
 802b152:	d004      	beq.n	802b15e <_dtoa_r+0x76e>
 802b154:	9904      	ldr	r1, [sp, #16]
 802b156:	4620      	mov	r0, r4
 802b158:	f000 fb86 	bl	802b868 <__pow5mult>
 802b15c:	9004      	str	r0, [sp, #16]
 802b15e:	2101      	movs	r1, #1
 802b160:	4620      	mov	r0, r4
 802b162:	f000 fae1 	bl	802b728 <__i2b>
 802b166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b168:	4607      	mov	r7, r0
 802b16a:	2b00      	cmp	r3, #0
 802b16c:	f000 81d0 	beq.w	802b510 <_dtoa_r+0xb20>
 802b170:	461a      	mov	r2, r3
 802b172:	4601      	mov	r1, r0
 802b174:	4620      	mov	r0, r4
 802b176:	f000 fb77 	bl	802b868 <__pow5mult>
 802b17a:	9b06      	ldr	r3, [sp, #24]
 802b17c:	2b01      	cmp	r3, #1
 802b17e:	4607      	mov	r7, r0
 802b180:	dc40      	bgt.n	802b204 <_dtoa_r+0x814>
 802b182:	9b00      	ldr	r3, [sp, #0]
 802b184:	2b00      	cmp	r3, #0
 802b186:	d139      	bne.n	802b1fc <_dtoa_r+0x80c>
 802b188:	9b01      	ldr	r3, [sp, #4]
 802b18a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b18e:	2b00      	cmp	r3, #0
 802b190:	d136      	bne.n	802b200 <_dtoa_r+0x810>
 802b192:	9b01      	ldr	r3, [sp, #4]
 802b194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b198:	0d1b      	lsrs	r3, r3, #20
 802b19a:	051b      	lsls	r3, r3, #20
 802b19c:	b12b      	cbz	r3, 802b1aa <_dtoa_r+0x7ba>
 802b19e:	9b05      	ldr	r3, [sp, #20]
 802b1a0:	3301      	adds	r3, #1
 802b1a2:	9305      	str	r3, [sp, #20]
 802b1a4:	f108 0801 	add.w	r8, r8, #1
 802b1a8:	2301      	movs	r3, #1
 802b1aa:	9307      	str	r3, [sp, #28]
 802b1ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b1ae:	2b00      	cmp	r3, #0
 802b1b0:	d12a      	bne.n	802b208 <_dtoa_r+0x818>
 802b1b2:	2001      	movs	r0, #1
 802b1b4:	e030      	b.n	802b218 <_dtoa_r+0x828>
 802b1b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b1b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802b1bc:	e795      	b.n	802b0ea <_dtoa_r+0x6fa>
 802b1be:	9b07      	ldr	r3, [sp, #28]
 802b1c0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 802b1c4:	42bb      	cmp	r3, r7
 802b1c6:	bfbf      	itttt	lt
 802b1c8:	9b07      	ldrlt	r3, [sp, #28]
 802b1ca:	9707      	strlt	r7, [sp, #28]
 802b1cc:	1afa      	sublt	r2, r7, r3
 802b1ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 802b1d0:	bfbb      	ittet	lt
 802b1d2:	189b      	addlt	r3, r3, r2
 802b1d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 802b1d6:	1bdf      	subge	r7, r3, r7
 802b1d8:	2700      	movlt	r7, #0
 802b1da:	f1b9 0f00 	cmp.w	r9, #0
 802b1de:	bfb5      	itete	lt
 802b1e0:	9b05      	ldrlt	r3, [sp, #20]
 802b1e2:	9d05      	ldrge	r5, [sp, #20]
 802b1e4:	eba3 0509 	sublt.w	r5, r3, r9
 802b1e8:	464b      	movge	r3, r9
 802b1ea:	bfb8      	it	lt
 802b1ec:	2300      	movlt	r3, #0
 802b1ee:	e77e      	b.n	802b0ee <_dtoa_r+0x6fe>
 802b1f0:	9f07      	ldr	r7, [sp, #28]
 802b1f2:	9d05      	ldr	r5, [sp, #20]
 802b1f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802b1f6:	e783      	b.n	802b100 <_dtoa_r+0x710>
 802b1f8:	9a07      	ldr	r2, [sp, #28]
 802b1fa:	e7ab      	b.n	802b154 <_dtoa_r+0x764>
 802b1fc:	2300      	movs	r3, #0
 802b1fe:	e7d4      	b.n	802b1aa <_dtoa_r+0x7ba>
 802b200:	9b00      	ldr	r3, [sp, #0]
 802b202:	e7d2      	b.n	802b1aa <_dtoa_r+0x7ba>
 802b204:	2300      	movs	r3, #0
 802b206:	9307      	str	r3, [sp, #28]
 802b208:	693b      	ldr	r3, [r7, #16]
 802b20a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 802b20e:	6918      	ldr	r0, [r3, #16]
 802b210:	f000 fa3c 	bl	802b68c <__hi0bits>
 802b214:	f1c0 0020 	rsb	r0, r0, #32
 802b218:	4440      	add	r0, r8
 802b21a:	f010 001f 	ands.w	r0, r0, #31
 802b21e:	d047      	beq.n	802b2b0 <_dtoa_r+0x8c0>
 802b220:	f1c0 0320 	rsb	r3, r0, #32
 802b224:	2b04      	cmp	r3, #4
 802b226:	dd3b      	ble.n	802b2a0 <_dtoa_r+0x8b0>
 802b228:	9b05      	ldr	r3, [sp, #20]
 802b22a:	f1c0 001c 	rsb	r0, r0, #28
 802b22e:	4403      	add	r3, r0
 802b230:	9305      	str	r3, [sp, #20]
 802b232:	4405      	add	r5, r0
 802b234:	4480      	add	r8, r0
 802b236:	9b05      	ldr	r3, [sp, #20]
 802b238:	2b00      	cmp	r3, #0
 802b23a:	dd05      	ble.n	802b248 <_dtoa_r+0x858>
 802b23c:	461a      	mov	r2, r3
 802b23e:	9904      	ldr	r1, [sp, #16]
 802b240:	4620      	mov	r0, r4
 802b242:	f000 fb5f 	bl	802b904 <__lshift>
 802b246:	9004      	str	r0, [sp, #16]
 802b248:	f1b8 0f00 	cmp.w	r8, #0
 802b24c:	dd05      	ble.n	802b25a <_dtoa_r+0x86a>
 802b24e:	4639      	mov	r1, r7
 802b250:	4642      	mov	r2, r8
 802b252:	4620      	mov	r0, r4
 802b254:	f000 fb56 	bl	802b904 <__lshift>
 802b258:	4607      	mov	r7, r0
 802b25a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b25c:	b353      	cbz	r3, 802b2b4 <_dtoa_r+0x8c4>
 802b25e:	4639      	mov	r1, r7
 802b260:	9804      	ldr	r0, [sp, #16]
 802b262:	f000 fba3 	bl	802b9ac <__mcmp>
 802b266:	2800      	cmp	r0, #0
 802b268:	da24      	bge.n	802b2b4 <_dtoa_r+0x8c4>
 802b26a:	2300      	movs	r3, #0
 802b26c:	220a      	movs	r2, #10
 802b26e:	9904      	ldr	r1, [sp, #16]
 802b270:	4620      	mov	r0, r4
 802b272:	f000 f9d0 	bl	802b616 <__multadd>
 802b276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b278:	9004      	str	r0, [sp, #16]
 802b27a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802b27e:	2b00      	cmp	r3, #0
 802b280:	f000 814d 	beq.w	802b51e <_dtoa_r+0xb2e>
 802b284:	2300      	movs	r3, #0
 802b286:	4631      	mov	r1, r6
 802b288:	220a      	movs	r2, #10
 802b28a:	4620      	mov	r0, r4
 802b28c:	f000 f9c3 	bl	802b616 <__multadd>
 802b290:	9b02      	ldr	r3, [sp, #8]
 802b292:	2b00      	cmp	r3, #0
 802b294:	4606      	mov	r6, r0
 802b296:	dc4f      	bgt.n	802b338 <_dtoa_r+0x948>
 802b298:	9b06      	ldr	r3, [sp, #24]
 802b29a:	2b02      	cmp	r3, #2
 802b29c:	dd4c      	ble.n	802b338 <_dtoa_r+0x948>
 802b29e:	e011      	b.n	802b2c4 <_dtoa_r+0x8d4>
 802b2a0:	d0c9      	beq.n	802b236 <_dtoa_r+0x846>
 802b2a2:	9a05      	ldr	r2, [sp, #20]
 802b2a4:	331c      	adds	r3, #28
 802b2a6:	441a      	add	r2, r3
 802b2a8:	9205      	str	r2, [sp, #20]
 802b2aa:	441d      	add	r5, r3
 802b2ac:	4498      	add	r8, r3
 802b2ae:	e7c2      	b.n	802b236 <_dtoa_r+0x846>
 802b2b0:	4603      	mov	r3, r0
 802b2b2:	e7f6      	b.n	802b2a2 <_dtoa_r+0x8b2>
 802b2b4:	f1b9 0f00 	cmp.w	r9, #0
 802b2b8:	dc38      	bgt.n	802b32c <_dtoa_r+0x93c>
 802b2ba:	9b06      	ldr	r3, [sp, #24]
 802b2bc:	2b02      	cmp	r3, #2
 802b2be:	dd35      	ble.n	802b32c <_dtoa_r+0x93c>
 802b2c0:	f8cd 9008 	str.w	r9, [sp, #8]
 802b2c4:	9b02      	ldr	r3, [sp, #8]
 802b2c6:	b963      	cbnz	r3, 802b2e2 <_dtoa_r+0x8f2>
 802b2c8:	4639      	mov	r1, r7
 802b2ca:	2205      	movs	r2, #5
 802b2cc:	4620      	mov	r0, r4
 802b2ce:	f000 f9a2 	bl	802b616 <__multadd>
 802b2d2:	4601      	mov	r1, r0
 802b2d4:	4607      	mov	r7, r0
 802b2d6:	9804      	ldr	r0, [sp, #16]
 802b2d8:	f000 fb68 	bl	802b9ac <__mcmp>
 802b2dc:	2800      	cmp	r0, #0
 802b2de:	f73f adcc 	bgt.w	802ae7a <_dtoa_r+0x48a>
 802b2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b2e4:	465d      	mov	r5, fp
 802b2e6:	ea6f 0a03 	mvn.w	sl, r3
 802b2ea:	f04f 0900 	mov.w	r9, #0
 802b2ee:	4639      	mov	r1, r7
 802b2f0:	4620      	mov	r0, r4
 802b2f2:	f000 f979 	bl	802b5e8 <_Bfree>
 802b2f6:	2e00      	cmp	r6, #0
 802b2f8:	f43f aeb7 	beq.w	802b06a <_dtoa_r+0x67a>
 802b2fc:	f1b9 0f00 	cmp.w	r9, #0
 802b300:	d005      	beq.n	802b30e <_dtoa_r+0x91e>
 802b302:	45b1      	cmp	r9, r6
 802b304:	d003      	beq.n	802b30e <_dtoa_r+0x91e>
 802b306:	4649      	mov	r1, r9
 802b308:	4620      	mov	r0, r4
 802b30a:	f000 f96d 	bl	802b5e8 <_Bfree>
 802b30e:	4631      	mov	r1, r6
 802b310:	4620      	mov	r0, r4
 802b312:	f000 f969 	bl	802b5e8 <_Bfree>
 802b316:	e6a8      	b.n	802b06a <_dtoa_r+0x67a>
 802b318:	2700      	movs	r7, #0
 802b31a:	463e      	mov	r6, r7
 802b31c:	e7e1      	b.n	802b2e2 <_dtoa_r+0x8f2>
 802b31e:	f8dd a020 	ldr.w	sl, [sp, #32]
 802b322:	463e      	mov	r6, r7
 802b324:	e5a9      	b.n	802ae7a <_dtoa_r+0x48a>
 802b326:	bf00      	nop
 802b328:	40240000 	.word	0x40240000
 802b32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b32e:	f8cd 9008 	str.w	r9, [sp, #8]
 802b332:	2b00      	cmp	r3, #0
 802b334:	f000 80fa 	beq.w	802b52c <_dtoa_r+0xb3c>
 802b338:	2d00      	cmp	r5, #0
 802b33a:	dd05      	ble.n	802b348 <_dtoa_r+0x958>
 802b33c:	4631      	mov	r1, r6
 802b33e:	462a      	mov	r2, r5
 802b340:	4620      	mov	r0, r4
 802b342:	f000 fadf 	bl	802b904 <__lshift>
 802b346:	4606      	mov	r6, r0
 802b348:	9b07      	ldr	r3, [sp, #28]
 802b34a:	2b00      	cmp	r3, #0
 802b34c:	d04c      	beq.n	802b3e8 <_dtoa_r+0x9f8>
 802b34e:	6871      	ldr	r1, [r6, #4]
 802b350:	4620      	mov	r0, r4
 802b352:	f000 f915 	bl	802b580 <_Balloc>
 802b356:	6932      	ldr	r2, [r6, #16]
 802b358:	3202      	adds	r2, #2
 802b35a:	4605      	mov	r5, r0
 802b35c:	0092      	lsls	r2, r2, #2
 802b35e:	f106 010c 	add.w	r1, r6, #12
 802b362:	300c      	adds	r0, #12
 802b364:	f7fe fd26 	bl	8029db4 <memcpy>
 802b368:	2201      	movs	r2, #1
 802b36a:	4629      	mov	r1, r5
 802b36c:	4620      	mov	r0, r4
 802b36e:	f000 fac9 	bl	802b904 <__lshift>
 802b372:	9b00      	ldr	r3, [sp, #0]
 802b374:	f8cd b014 	str.w	fp, [sp, #20]
 802b378:	f003 0301 	and.w	r3, r3, #1
 802b37c:	46b1      	mov	r9, r6
 802b37e:	9307      	str	r3, [sp, #28]
 802b380:	4606      	mov	r6, r0
 802b382:	4639      	mov	r1, r7
 802b384:	9804      	ldr	r0, [sp, #16]
 802b386:	f7ff faa5 	bl	802a8d4 <quorem>
 802b38a:	4649      	mov	r1, r9
 802b38c:	4605      	mov	r5, r0
 802b38e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802b392:	9804      	ldr	r0, [sp, #16]
 802b394:	f000 fb0a 	bl	802b9ac <__mcmp>
 802b398:	4632      	mov	r2, r6
 802b39a:	9000      	str	r0, [sp, #0]
 802b39c:	4639      	mov	r1, r7
 802b39e:	4620      	mov	r0, r4
 802b3a0:	f000 fb1e 	bl	802b9e0 <__mdiff>
 802b3a4:	68c3      	ldr	r3, [r0, #12]
 802b3a6:	4602      	mov	r2, r0
 802b3a8:	bb03      	cbnz	r3, 802b3ec <_dtoa_r+0x9fc>
 802b3aa:	4601      	mov	r1, r0
 802b3ac:	9008      	str	r0, [sp, #32]
 802b3ae:	9804      	ldr	r0, [sp, #16]
 802b3b0:	f000 fafc 	bl	802b9ac <__mcmp>
 802b3b4:	9a08      	ldr	r2, [sp, #32]
 802b3b6:	4603      	mov	r3, r0
 802b3b8:	4611      	mov	r1, r2
 802b3ba:	4620      	mov	r0, r4
 802b3bc:	9308      	str	r3, [sp, #32]
 802b3be:	f000 f913 	bl	802b5e8 <_Bfree>
 802b3c2:	9b08      	ldr	r3, [sp, #32]
 802b3c4:	b9a3      	cbnz	r3, 802b3f0 <_dtoa_r+0xa00>
 802b3c6:	9a06      	ldr	r2, [sp, #24]
 802b3c8:	b992      	cbnz	r2, 802b3f0 <_dtoa_r+0xa00>
 802b3ca:	9a07      	ldr	r2, [sp, #28]
 802b3cc:	b982      	cbnz	r2, 802b3f0 <_dtoa_r+0xa00>
 802b3ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802b3d2:	d029      	beq.n	802b428 <_dtoa_r+0xa38>
 802b3d4:	9b00      	ldr	r3, [sp, #0]
 802b3d6:	2b00      	cmp	r3, #0
 802b3d8:	dd01      	ble.n	802b3de <_dtoa_r+0x9ee>
 802b3da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 802b3de:	9b05      	ldr	r3, [sp, #20]
 802b3e0:	1c5d      	adds	r5, r3, #1
 802b3e2:	f883 8000 	strb.w	r8, [r3]
 802b3e6:	e782      	b.n	802b2ee <_dtoa_r+0x8fe>
 802b3e8:	4630      	mov	r0, r6
 802b3ea:	e7c2      	b.n	802b372 <_dtoa_r+0x982>
 802b3ec:	2301      	movs	r3, #1
 802b3ee:	e7e3      	b.n	802b3b8 <_dtoa_r+0x9c8>
 802b3f0:	9a00      	ldr	r2, [sp, #0]
 802b3f2:	2a00      	cmp	r2, #0
 802b3f4:	db04      	blt.n	802b400 <_dtoa_r+0xa10>
 802b3f6:	d125      	bne.n	802b444 <_dtoa_r+0xa54>
 802b3f8:	9a06      	ldr	r2, [sp, #24]
 802b3fa:	bb1a      	cbnz	r2, 802b444 <_dtoa_r+0xa54>
 802b3fc:	9a07      	ldr	r2, [sp, #28]
 802b3fe:	bb0a      	cbnz	r2, 802b444 <_dtoa_r+0xa54>
 802b400:	2b00      	cmp	r3, #0
 802b402:	ddec      	ble.n	802b3de <_dtoa_r+0x9ee>
 802b404:	2201      	movs	r2, #1
 802b406:	9904      	ldr	r1, [sp, #16]
 802b408:	4620      	mov	r0, r4
 802b40a:	f000 fa7b 	bl	802b904 <__lshift>
 802b40e:	4639      	mov	r1, r7
 802b410:	9004      	str	r0, [sp, #16]
 802b412:	f000 facb 	bl	802b9ac <__mcmp>
 802b416:	2800      	cmp	r0, #0
 802b418:	dc03      	bgt.n	802b422 <_dtoa_r+0xa32>
 802b41a:	d1e0      	bne.n	802b3de <_dtoa_r+0x9ee>
 802b41c:	f018 0f01 	tst.w	r8, #1
 802b420:	d0dd      	beq.n	802b3de <_dtoa_r+0x9ee>
 802b422:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802b426:	d1d8      	bne.n	802b3da <_dtoa_r+0x9ea>
 802b428:	9b05      	ldr	r3, [sp, #20]
 802b42a:	9a05      	ldr	r2, [sp, #20]
 802b42c:	1c5d      	adds	r5, r3, #1
 802b42e:	2339      	movs	r3, #57	; 0x39
 802b430:	7013      	strb	r3, [r2, #0]
 802b432:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b436:	2b39      	cmp	r3, #57	; 0x39
 802b438:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 802b43c:	d04f      	beq.n	802b4de <_dtoa_r+0xaee>
 802b43e:	3301      	adds	r3, #1
 802b440:	7013      	strb	r3, [r2, #0]
 802b442:	e754      	b.n	802b2ee <_dtoa_r+0x8fe>
 802b444:	9a05      	ldr	r2, [sp, #20]
 802b446:	2b00      	cmp	r3, #0
 802b448:	f102 0501 	add.w	r5, r2, #1
 802b44c:	dd06      	ble.n	802b45c <_dtoa_r+0xa6c>
 802b44e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802b452:	d0e9      	beq.n	802b428 <_dtoa_r+0xa38>
 802b454:	f108 0801 	add.w	r8, r8, #1
 802b458:	9b05      	ldr	r3, [sp, #20]
 802b45a:	e7c2      	b.n	802b3e2 <_dtoa_r+0x9f2>
 802b45c:	9a02      	ldr	r2, [sp, #8]
 802b45e:	f805 8c01 	strb.w	r8, [r5, #-1]
 802b462:	eba5 030b 	sub.w	r3, r5, fp
 802b466:	4293      	cmp	r3, r2
 802b468:	d021      	beq.n	802b4ae <_dtoa_r+0xabe>
 802b46a:	2300      	movs	r3, #0
 802b46c:	220a      	movs	r2, #10
 802b46e:	9904      	ldr	r1, [sp, #16]
 802b470:	4620      	mov	r0, r4
 802b472:	f000 f8d0 	bl	802b616 <__multadd>
 802b476:	45b1      	cmp	r9, r6
 802b478:	9004      	str	r0, [sp, #16]
 802b47a:	f04f 0300 	mov.w	r3, #0
 802b47e:	f04f 020a 	mov.w	r2, #10
 802b482:	4649      	mov	r1, r9
 802b484:	4620      	mov	r0, r4
 802b486:	d105      	bne.n	802b494 <_dtoa_r+0xaa4>
 802b488:	f000 f8c5 	bl	802b616 <__multadd>
 802b48c:	4681      	mov	r9, r0
 802b48e:	4606      	mov	r6, r0
 802b490:	9505      	str	r5, [sp, #20]
 802b492:	e776      	b.n	802b382 <_dtoa_r+0x992>
 802b494:	f000 f8bf 	bl	802b616 <__multadd>
 802b498:	4631      	mov	r1, r6
 802b49a:	4681      	mov	r9, r0
 802b49c:	2300      	movs	r3, #0
 802b49e:	220a      	movs	r2, #10
 802b4a0:	4620      	mov	r0, r4
 802b4a2:	f000 f8b8 	bl	802b616 <__multadd>
 802b4a6:	4606      	mov	r6, r0
 802b4a8:	e7f2      	b.n	802b490 <_dtoa_r+0xaa0>
 802b4aa:	f04f 0900 	mov.w	r9, #0
 802b4ae:	2201      	movs	r2, #1
 802b4b0:	9904      	ldr	r1, [sp, #16]
 802b4b2:	4620      	mov	r0, r4
 802b4b4:	f000 fa26 	bl	802b904 <__lshift>
 802b4b8:	4639      	mov	r1, r7
 802b4ba:	9004      	str	r0, [sp, #16]
 802b4bc:	f000 fa76 	bl	802b9ac <__mcmp>
 802b4c0:	2800      	cmp	r0, #0
 802b4c2:	dcb6      	bgt.n	802b432 <_dtoa_r+0xa42>
 802b4c4:	d102      	bne.n	802b4cc <_dtoa_r+0xadc>
 802b4c6:	f018 0f01 	tst.w	r8, #1
 802b4ca:	d1b2      	bne.n	802b432 <_dtoa_r+0xa42>
 802b4cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b4d0:	2b30      	cmp	r3, #48	; 0x30
 802b4d2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 802b4d6:	f47f af0a 	bne.w	802b2ee <_dtoa_r+0x8fe>
 802b4da:	4615      	mov	r5, r2
 802b4dc:	e7f6      	b.n	802b4cc <_dtoa_r+0xadc>
 802b4de:	4593      	cmp	fp, r2
 802b4e0:	d105      	bne.n	802b4ee <_dtoa_r+0xafe>
 802b4e2:	2331      	movs	r3, #49	; 0x31
 802b4e4:	f10a 0a01 	add.w	sl, sl, #1
 802b4e8:	f88b 3000 	strb.w	r3, [fp]
 802b4ec:	e6ff      	b.n	802b2ee <_dtoa_r+0x8fe>
 802b4ee:	4615      	mov	r5, r2
 802b4f0:	e79f      	b.n	802b432 <_dtoa_r+0xa42>
 802b4f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 802b558 <_dtoa_r+0xb68>
 802b4f6:	e007      	b.n	802b508 <_dtoa_r+0xb18>
 802b4f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b4fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 802b55c <_dtoa_r+0xb6c>
 802b4fe:	b11b      	cbz	r3, 802b508 <_dtoa_r+0xb18>
 802b500:	f10b 0308 	add.w	r3, fp, #8
 802b504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802b506:	6013      	str	r3, [r2, #0]
 802b508:	4658      	mov	r0, fp
 802b50a:	b017      	add	sp, #92	; 0x5c
 802b50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b510:	9b06      	ldr	r3, [sp, #24]
 802b512:	2b01      	cmp	r3, #1
 802b514:	f77f ae35 	ble.w	802b182 <_dtoa_r+0x792>
 802b518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b51a:	9307      	str	r3, [sp, #28]
 802b51c:	e649      	b.n	802b1b2 <_dtoa_r+0x7c2>
 802b51e:	9b02      	ldr	r3, [sp, #8]
 802b520:	2b00      	cmp	r3, #0
 802b522:	dc03      	bgt.n	802b52c <_dtoa_r+0xb3c>
 802b524:	9b06      	ldr	r3, [sp, #24]
 802b526:	2b02      	cmp	r3, #2
 802b528:	f73f aecc 	bgt.w	802b2c4 <_dtoa_r+0x8d4>
 802b52c:	465d      	mov	r5, fp
 802b52e:	4639      	mov	r1, r7
 802b530:	9804      	ldr	r0, [sp, #16]
 802b532:	f7ff f9cf 	bl	802a8d4 <quorem>
 802b536:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802b53a:	f805 8b01 	strb.w	r8, [r5], #1
 802b53e:	9a02      	ldr	r2, [sp, #8]
 802b540:	eba5 030b 	sub.w	r3, r5, fp
 802b544:	429a      	cmp	r2, r3
 802b546:	ddb0      	ble.n	802b4aa <_dtoa_r+0xaba>
 802b548:	2300      	movs	r3, #0
 802b54a:	220a      	movs	r2, #10
 802b54c:	9904      	ldr	r1, [sp, #16]
 802b54e:	4620      	mov	r0, r4
 802b550:	f000 f861 	bl	802b616 <__multadd>
 802b554:	9004      	str	r0, [sp, #16]
 802b556:	e7ea      	b.n	802b52e <_dtoa_r+0xb3e>
 802b558:	08047de3 	.word	0x08047de3
 802b55c:	08047c52 	.word	0x08047c52

0802b560 <_localeconv_r>:
 802b560:	4b04      	ldr	r3, [pc, #16]	; (802b574 <_localeconv_r+0x14>)
 802b562:	681b      	ldr	r3, [r3, #0]
 802b564:	6a18      	ldr	r0, [r3, #32]
 802b566:	4b04      	ldr	r3, [pc, #16]	; (802b578 <_localeconv_r+0x18>)
 802b568:	2800      	cmp	r0, #0
 802b56a:	bf08      	it	eq
 802b56c:	4618      	moveq	r0, r3
 802b56e:	30f0      	adds	r0, #240	; 0xf0
 802b570:	4770      	bx	lr
 802b572:	bf00      	nop
 802b574:	2000285c 	.word	0x2000285c
 802b578:	200028c0 	.word	0x200028c0

0802b57c <__malloc_lock>:
 802b57c:	4770      	bx	lr

0802b57e <__malloc_unlock>:
 802b57e:	4770      	bx	lr

0802b580 <_Balloc>:
 802b580:	b570      	push	{r4, r5, r6, lr}
 802b582:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802b584:	4604      	mov	r4, r0
 802b586:	460e      	mov	r6, r1
 802b588:	b93d      	cbnz	r5, 802b59a <_Balloc+0x1a>
 802b58a:	2010      	movs	r0, #16
 802b58c:	f7fe fc02 	bl	8029d94 <malloc>
 802b590:	6260      	str	r0, [r4, #36]	; 0x24
 802b592:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802b596:	6005      	str	r5, [r0, #0]
 802b598:	60c5      	str	r5, [r0, #12]
 802b59a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802b59c:	68eb      	ldr	r3, [r5, #12]
 802b59e:	b183      	cbz	r3, 802b5c2 <_Balloc+0x42>
 802b5a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b5a2:	68db      	ldr	r3, [r3, #12]
 802b5a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802b5a8:	b9b8      	cbnz	r0, 802b5da <_Balloc+0x5a>
 802b5aa:	2101      	movs	r1, #1
 802b5ac:	fa01 f506 	lsl.w	r5, r1, r6
 802b5b0:	1d6a      	adds	r2, r5, #5
 802b5b2:	0092      	lsls	r2, r2, #2
 802b5b4:	4620      	mov	r0, r4
 802b5b6:	f000 fabf 	bl	802bb38 <_calloc_r>
 802b5ba:	b160      	cbz	r0, 802b5d6 <_Balloc+0x56>
 802b5bc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 802b5c0:	e00e      	b.n	802b5e0 <_Balloc+0x60>
 802b5c2:	2221      	movs	r2, #33	; 0x21
 802b5c4:	2104      	movs	r1, #4
 802b5c6:	4620      	mov	r0, r4
 802b5c8:	f000 fab6 	bl	802bb38 <_calloc_r>
 802b5cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b5ce:	60e8      	str	r0, [r5, #12]
 802b5d0:	68db      	ldr	r3, [r3, #12]
 802b5d2:	2b00      	cmp	r3, #0
 802b5d4:	d1e4      	bne.n	802b5a0 <_Balloc+0x20>
 802b5d6:	2000      	movs	r0, #0
 802b5d8:	bd70      	pop	{r4, r5, r6, pc}
 802b5da:	6802      	ldr	r2, [r0, #0]
 802b5dc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 802b5e0:	2300      	movs	r3, #0
 802b5e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802b5e6:	e7f7      	b.n	802b5d8 <_Balloc+0x58>

0802b5e8 <_Bfree>:
 802b5e8:	b570      	push	{r4, r5, r6, lr}
 802b5ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 802b5ec:	4606      	mov	r6, r0
 802b5ee:	460d      	mov	r5, r1
 802b5f0:	b93c      	cbnz	r4, 802b602 <_Bfree+0x1a>
 802b5f2:	2010      	movs	r0, #16
 802b5f4:	f7fe fbce 	bl	8029d94 <malloc>
 802b5f8:	6270      	str	r0, [r6, #36]	; 0x24
 802b5fa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802b5fe:	6004      	str	r4, [r0, #0]
 802b600:	60c4      	str	r4, [r0, #12]
 802b602:	b13d      	cbz	r5, 802b614 <_Bfree+0x2c>
 802b604:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802b606:	686a      	ldr	r2, [r5, #4]
 802b608:	68db      	ldr	r3, [r3, #12]
 802b60a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802b60e:	6029      	str	r1, [r5, #0]
 802b610:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 802b614:	bd70      	pop	{r4, r5, r6, pc}

0802b616 <__multadd>:
 802b616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b61a:	690d      	ldr	r5, [r1, #16]
 802b61c:	461f      	mov	r7, r3
 802b61e:	4606      	mov	r6, r0
 802b620:	460c      	mov	r4, r1
 802b622:	f101 0c14 	add.w	ip, r1, #20
 802b626:	2300      	movs	r3, #0
 802b628:	f8dc 0000 	ldr.w	r0, [ip]
 802b62c:	b281      	uxth	r1, r0
 802b62e:	fb02 7101 	mla	r1, r2, r1, r7
 802b632:	0c0f      	lsrs	r7, r1, #16
 802b634:	0c00      	lsrs	r0, r0, #16
 802b636:	fb02 7000 	mla	r0, r2, r0, r7
 802b63a:	b289      	uxth	r1, r1
 802b63c:	3301      	adds	r3, #1
 802b63e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 802b642:	429d      	cmp	r5, r3
 802b644:	ea4f 4710 	mov.w	r7, r0, lsr #16
 802b648:	f84c 1b04 	str.w	r1, [ip], #4
 802b64c:	dcec      	bgt.n	802b628 <__multadd+0x12>
 802b64e:	b1d7      	cbz	r7, 802b686 <__multadd+0x70>
 802b650:	68a3      	ldr	r3, [r4, #8]
 802b652:	42ab      	cmp	r3, r5
 802b654:	dc12      	bgt.n	802b67c <__multadd+0x66>
 802b656:	6861      	ldr	r1, [r4, #4]
 802b658:	4630      	mov	r0, r6
 802b65a:	3101      	adds	r1, #1
 802b65c:	f7ff ff90 	bl	802b580 <_Balloc>
 802b660:	6922      	ldr	r2, [r4, #16]
 802b662:	3202      	adds	r2, #2
 802b664:	f104 010c 	add.w	r1, r4, #12
 802b668:	4680      	mov	r8, r0
 802b66a:	0092      	lsls	r2, r2, #2
 802b66c:	300c      	adds	r0, #12
 802b66e:	f7fe fba1 	bl	8029db4 <memcpy>
 802b672:	4621      	mov	r1, r4
 802b674:	4630      	mov	r0, r6
 802b676:	f7ff ffb7 	bl	802b5e8 <_Bfree>
 802b67a:	4644      	mov	r4, r8
 802b67c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802b680:	3501      	adds	r5, #1
 802b682:	615f      	str	r7, [r3, #20]
 802b684:	6125      	str	r5, [r4, #16]
 802b686:	4620      	mov	r0, r4
 802b688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802b68c <__hi0bits>:
 802b68c:	0c02      	lsrs	r2, r0, #16
 802b68e:	0412      	lsls	r2, r2, #16
 802b690:	4603      	mov	r3, r0
 802b692:	b9b2      	cbnz	r2, 802b6c2 <__hi0bits+0x36>
 802b694:	0403      	lsls	r3, r0, #16
 802b696:	2010      	movs	r0, #16
 802b698:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802b69c:	bf04      	itt	eq
 802b69e:	021b      	lsleq	r3, r3, #8
 802b6a0:	3008      	addeq	r0, #8
 802b6a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802b6a6:	bf04      	itt	eq
 802b6a8:	011b      	lsleq	r3, r3, #4
 802b6aa:	3004      	addeq	r0, #4
 802b6ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 802b6b0:	bf04      	itt	eq
 802b6b2:	009b      	lsleq	r3, r3, #2
 802b6b4:	3002      	addeq	r0, #2
 802b6b6:	2b00      	cmp	r3, #0
 802b6b8:	db06      	blt.n	802b6c8 <__hi0bits+0x3c>
 802b6ba:	005b      	lsls	r3, r3, #1
 802b6bc:	d503      	bpl.n	802b6c6 <__hi0bits+0x3a>
 802b6be:	3001      	adds	r0, #1
 802b6c0:	4770      	bx	lr
 802b6c2:	2000      	movs	r0, #0
 802b6c4:	e7e8      	b.n	802b698 <__hi0bits+0xc>
 802b6c6:	2020      	movs	r0, #32
 802b6c8:	4770      	bx	lr

0802b6ca <__lo0bits>:
 802b6ca:	6803      	ldr	r3, [r0, #0]
 802b6cc:	f013 0207 	ands.w	r2, r3, #7
 802b6d0:	4601      	mov	r1, r0
 802b6d2:	d00b      	beq.n	802b6ec <__lo0bits+0x22>
 802b6d4:	07da      	lsls	r2, r3, #31
 802b6d6:	d423      	bmi.n	802b720 <__lo0bits+0x56>
 802b6d8:	0798      	lsls	r0, r3, #30
 802b6da:	bf49      	itett	mi
 802b6dc:	085b      	lsrmi	r3, r3, #1
 802b6de:	089b      	lsrpl	r3, r3, #2
 802b6e0:	2001      	movmi	r0, #1
 802b6e2:	600b      	strmi	r3, [r1, #0]
 802b6e4:	bf5c      	itt	pl
 802b6e6:	600b      	strpl	r3, [r1, #0]
 802b6e8:	2002      	movpl	r0, #2
 802b6ea:	4770      	bx	lr
 802b6ec:	b298      	uxth	r0, r3
 802b6ee:	b9a8      	cbnz	r0, 802b71c <__lo0bits+0x52>
 802b6f0:	0c1b      	lsrs	r3, r3, #16
 802b6f2:	2010      	movs	r0, #16
 802b6f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 802b6f8:	bf04      	itt	eq
 802b6fa:	0a1b      	lsreq	r3, r3, #8
 802b6fc:	3008      	addeq	r0, #8
 802b6fe:	071a      	lsls	r2, r3, #28
 802b700:	bf04      	itt	eq
 802b702:	091b      	lsreq	r3, r3, #4
 802b704:	3004      	addeq	r0, #4
 802b706:	079a      	lsls	r2, r3, #30
 802b708:	bf04      	itt	eq
 802b70a:	089b      	lsreq	r3, r3, #2
 802b70c:	3002      	addeq	r0, #2
 802b70e:	07da      	lsls	r2, r3, #31
 802b710:	d402      	bmi.n	802b718 <__lo0bits+0x4e>
 802b712:	085b      	lsrs	r3, r3, #1
 802b714:	d006      	beq.n	802b724 <__lo0bits+0x5a>
 802b716:	3001      	adds	r0, #1
 802b718:	600b      	str	r3, [r1, #0]
 802b71a:	4770      	bx	lr
 802b71c:	4610      	mov	r0, r2
 802b71e:	e7e9      	b.n	802b6f4 <__lo0bits+0x2a>
 802b720:	2000      	movs	r0, #0
 802b722:	4770      	bx	lr
 802b724:	2020      	movs	r0, #32
 802b726:	4770      	bx	lr

0802b728 <__i2b>:
 802b728:	b510      	push	{r4, lr}
 802b72a:	460c      	mov	r4, r1
 802b72c:	2101      	movs	r1, #1
 802b72e:	f7ff ff27 	bl	802b580 <_Balloc>
 802b732:	2201      	movs	r2, #1
 802b734:	6144      	str	r4, [r0, #20]
 802b736:	6102      	str	r2, [r0, #16]
 802b738:	bd10      	pop	{r4, pc}

0802b73a <__multiply>:
 802b73a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b73e:	4614      	mov	r4, r2
 802b740:	690a      	ldr	r2, [r1, #16]
 802b742:	6923      	ldr	r3, [r4, #16]
 802b744:	429a      	cmp	r2, r3
 802b746:	bfb8      	it	lt
 802b748:	460b      	movlt	r3, r1
 802b74a:	4688      	mov	r8, r1
 802b74c:	bfbc      	itt	lt
 802b74e:	46a0      	movlt	r8, r4
 802b750:	461c      	movlt	r4, r3
 802b752:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802b756:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802b75a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802b75e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802b762:	eb07 0609 	add.w	r6, r7, r9
 802b766:	42b3      	cmp	r3, r6
 802b768:	bfb8      	it	lt
 802b76a:	3101      	addlt	r1, #1
 802b76c:	f7ff ff08 	bl	802b580 <_Balloc>
 802b770:	f100 0514 	add.w	r5, r0, #20
 802b774:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 802b778:	462b      	mov	r3, r5
 802b77a:	2200      	movs	r2, #0
 802b77c:	4573      	cmp	r3, lr
 802b77e:	d316      	bcc.n	802b7ae <__multiply+0x74>
 802b780:	f104 0214 	add.w	r2, r4, #20
 802b784:	f108 0114 	add.w	r1, r8, #20
 802b788:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 802b78c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 802b790:	9300      	str	r3, [sp, #0]
 802b792:	9b00      	ldr	r3, [sp, #0]
 802b794:	9201      	str	r2, [sp, #4]
 802b796:	4293      	cmp	r3, r2
 802b798:	d80c      	bhi.n	802b7b4 <__multiply+0x7a>
 802b79a:	2e00      	cmp	r6, #0
 802b79c:	dd03      	ble.n	802b7a6 <__multiply+0x6c>
 802b79e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 802b7a2:	2b00      	cmp	r3, #0
 802b7a4:	d05d      	beq.n	802b862 <__multiply+0x128>
 802b7a6:	6106      	str	r6, [r0, #16]
 802b7a8:	b003      	add	sp, #12
 802b7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b7ae:	f843 2b04 	str.w	r2, [r3], #4
 802b7b2:	e7e3      	b.n	802b77c <__multiply+0x42>
 802b7b4:	f8b2 b000 	ldrh.w	fp, [r2]
 802b7b8:	f1bb 0f00 	cmp.w	fp, #0
 802b7bc:	d023      	beq.n	802b806 <__multiply+0xcc>
 802b7be:	4689      	mov	r9, r1
 802b7c0:	46ac      	mov	ip, r5
 802b7c2:	f04f 0800 	mov.w	r8, #0
 802b7c6:	f859 4b04 	ldr.w	r4, [r9], #4
 802b7ca:	f8dc a000 	ldr.w	sl, [ip]
 802b7ce:	b2a3      	uxth	r3, r4
 802b7d0:	fa1f fa8a 	uxth.w	sl, sl
 802b7d4:	fb0b a303 	mla	r3, fp, r3, sl
 802b7d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802b7dc:	f8dc 4000 	ldr.w	r4, [ip]
 802b7e0:	4443      	add	r3, r8
 802b7e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802b7e6:	fb0b 840a 	mla	r4, fp, sl, r8
 802b7ea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 802b7ee:	46e2      	mov	sl, ip
 802b7f0:	b29b      	uxth	r3, r3
 802b7f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802b7f6:	454f      	cmp	r7, r9
 802b7f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802b7fc:	f84a 3b04 	str.w	r3, [sl], #4
 802b800:	d82b      	bhi.n	802b85a <__multiply+0x120>
 802b802:	f8cc 8004 	str.w	r8, [ip, #4]
 802b806:	9b01      	ldr	r3, [sp, #4]
 802b808:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 802b80c:	3204      	adds	r2, #4
 802b80e:	f1ba 0f00 	cmp.w	sl, #0
 802b812:	d020      	beq.n	802b856 <__multiply+0x11c>
 802b814:	682b      	ldr	r3, [r5, #0]
 802b816:	4689      	mov	r9, r1
 802b818:	46a8      	mov	r8, r5
 802b81a:	f04f 0b00 	mov.w	fp, #0
 802b81e:	f8b9 c000 	ldrh.w	ip, [r9]
 802b822:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 802b826:	fb0a 440c 	mla	r4, sl, ip, r4
 802b82a:	445c      	add	r4, fp
 802b82c:	46c4      	mov	ip, r8
 802b82e:	b29b      	uxth	r3, r3
 802b830:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802b834:	f84c 3b04 	str.w	r3, [ip], #4
 802b838:	f859 3b04 	ldr.w	r3, [r9], #4
 802b83c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 802b840:	0c1b      	lsrs	r3, r3, #16
 802b842:	fb0a b303 	mla	r3, sl, r3, fp
 802b846:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802b84a:	454f      	cmp	r7, r9
 802b84c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 802b850:	d805      	bhi.n	802b85e <__multiply+0x124>
 802b852:	f8c8 3004 	str.w	r3, [r8, #4]
 802b856:	3504      	adds	r5, #4
 802b858:	e79b      	b.n	802b792 <__multiply+0x58>
 802b85a:	46d4      	mov	ip, sl
 802b85c:	e7b3      	b.n	802b7c6 <__multiply+0x8c>
 802b85e:	46e0      	mov	r8, ip
 802b860:	e7dd      	b.n	802b81e <__multiply+0xe4>
 802b862:	3e01      	subs	r6, #1
 802b864:	e799      	b.n	802b79a <__multiply+0x60>
	...

0802b868 <__pow5mult>:
 802b868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b86c:	4615      	mov	r5, r2
 802b86e:	f012 0203 	ands.w	r2, r2, #3
 802b872:	4606      	mov	r6, r0
 802b874:	460f      	mov	r7, r1
 802b876:	d007      	beq.n	802b888 <__pow5mult+0x20>
 802b878:	3a01      	subs	r2, #1
 802b87a:	4c21      	ldr	r4, [pc, #132]	; (802b900 <__pow5mult+0x98>)
 802b87c:	2300      	movs	r3, #0
 802b87e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802b882:	f7ff fec8 	bl	802b616 <__multadd>
 802b886:	4607      	mov	r7, r0
 802b888:	10ad      	asrs	r5, r5, #2
 802b88a:	d035      	beq.n	802b8f8 <__pow5mult+0x90>
 802b88c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802b88e:	b93c      	cbnz	r4, 802b8a0 <__pow5mult+0x38>
 802b890:	2010      	movs	r0, #16
 802b892:	f7fe fa7f 	bl	8029d94 <malloc>
 802b896:	6270      	str	r0, [r6, #36]	; 0x24
 802b898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802b89c:	6004      	str	r4, [r0, #0]
 802b89e:	60c4      	str	r4, [r0, #12]
 802b8a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802b8a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802b8a8:	b94c      	cbnz	r4, 802b8be <__pow5mult+0x56>
 802b8aa:	f240 2171 	movw	r1, #625	; 0x271
 802b8ae:	4630      	mov	r0, r6
 802b8b0:	f7ff ff3a 	bl	802b728 <__i2b>
 802b8b4:	2300      	movs	r3, #0
 802b8b6:	f8c8 0008 	str.w	r0, [r8, #8]
 802b8ba:	4604      	mov	r4, r0
 802b8bc:	6003      	str	r3, [r0, #0]
 802b8be:	f04f 0800 	mov.w	r8, #0
 802b8c2:	07eb      	lsls	r3, r5, #31
 802b8c4:	d50a      	bpl.n	802b8dc <__pow5mult+0x74>
 802b8c6:	4639      	mov	r1, r7
 802b8c8:	4622      	mov	r2, r4
 802b8ca:	4630      	mov	r0, r6
 802b8cc:	f7ff ff35 	bl	802b73a <__multiply>
 802b8d0:	4639      	mov	r1, r7
 802b8d2:	4681      	mov	r9, r0
 802b8d4:	4630      	mov	r0, r6
 802b8d6:	f7ff fe87 	bl	802b5e8 <_Bfree>
 802b8da:	464f      	mov	r7, r9
 802b8dc:	106d      	asrs	r5, r5, #1
 802b8de:	d00b      	beq.n	802b8f8 <__pow5mult+0x90>
 802b8e0:	6820      	ldr	r0, [r4, #0]
 802b8e2:	b938      	cbnz	r0, 802b8f4 <__pow5mult+0x8c>
 802b8e4:	4622      	mov	r2, r4
 802b8e6:	4621      	mov	r1, r4
 802b8e8:	4630      	mov	r0, r6
 802b8ea:	f7ff ff26 	bl	802b73a <__multiply>
 802b8ee:	6020      	str	r0, [r4, #0]
 802b8f0:	f8c0 8000 	str.w	r8, [r0]
 802b8f4:	4604      	mov	r4, r0
 802b8f6:	e7e4      	b.n	802b8c2 <__pow5mult+0x5a>
 802b8f8:	4638      	mov	r0, r7
 802b8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b8fe:	bf00      	nop
 802b900:	08047db0 	.word	0x08047db0

0802b904 <__lshift>:
 802b904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b908:	460c      	mov	r4, r1
 802b90a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802b90e:	6923      	ldr	r3, [r4, #16]
 802b910:	6849      	ldr	r1, [r1, #4]
 802b912:	eb0a 0903 	add.w	r9, sl, r3
 802b916:	68a3      	ldr	r3, [r4, #8]
 802b918:	4607      	mov	r7, r0
 802b91a:	4616      	mov	r6, r2
 802b91c:	f109 0501 	add.w	r5, r9, #1
 802b920:	42ab      	cmp	r3, r5
 802b922:	db32      	blt.n	802b98a <__lshift+0x86>
 802b924:	4638      	mov	r0, r7
 802b926:	f7ff fe2b 	bl	802b580 <_Balloc>
 802b92a:	2300      	movs	r3, #0
 802b92c:	4680      	mov	r8, r0
 802b92e:	f100 0114 	add.w	r1, r0, #20
 802b932:	461a      	mov	r2, r3
 802b934:	4553      	cmp	r3, sl
 802b936:	db2b      	blt.n	802b990 <__lshift+0x8c>
 802b938:	6920      	ldr	r0, [r4, #16]
 802b93a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802b93e:	f104 0314 	add.w	r3, r4, #20
 802b942:	f016 021f 	ands.w	r2, r6, #31
 802b946:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802b94a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802b94e:	d025      	beq.n	802b99c <__lshift+0x98>
 802b950:	f1c2 0e20 	rsb	lr, r2, #32
 802b954:	2000      	movs	r0, #0
 802b956:	681e      	ldr	r6, [r3, #0]
 802b958:	468a      	mov	sl, r1
 802b95a:	4096      	lsls	r6, r2
 802b95c:	4330      	orrs	r0, r6
 802b95e:	f84a 0b04 	str.w	r0, [sl], #4
 802b962:	f853 0b04 	ldr.w	r0, [r3], #4
 802b966:	459c      	cmp	ip, r3
 802b968:	fa20 f00e 	lsr.w	r0, r0, lr
 802b96c:	d814      	bhi.n	802b998 <__lshift+0x94>
 802b96e:	6048      	str	r0, [r1, #4]
 802b970:	b108      	cbz	r0, 802b976 <__lshift+0x72>
 802b972:	f109 0502 	add.w	r5, r9, #2
 802b976:	3d01      	subs	r5, #1
 802b978:	4638      	mov	r0, r7
 802b97a:	f8c8 5010 	str.w	r5, [r8, #16]
 802b97e:	4621      	mov	r1, r4
 802b980:	f7ff fe32 	bl	802b5e8 <_Bfree>
 802b984:	4640      	mov	r0, r8
 802b986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b98a:	3101      	adds	r1, #1
 802b98c:	005b      	lsls	r3, r3, #1
 802b98e:	e7c7      	b.n	802b920 <__lshift+0x1c>
 802b990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802b994:	3301      	adds	r3, #1
 802b996:	e7cd      	b.n	802b934 <__lshift+0x30>
 802b998:	4651      	mov	r1, sl
 802b99a:	e7dc      	b.n	802b956 <__lshift+0x52>
 802b99c:	3904      	subs	r1, #4
 802b99e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b9a2:	f841 2f04 	str.w	r2, [r1, #4]!
 802b9a6:	459c      	cmp	ip, r3
 802b9a8:	d8f9      	bhi.n	802b99e <__lshift+0x9a>
 802b9aa:	e7e4      	b.n	802b976 <__lshift+0x72>

0802b9ac <__mcmp>:
 802b9ac:	6903      	ldr	r3, [r0, #16]
 802b9ae:	690a      	ldr	r2, [r1, #16]
 802b9b0:	1a9b      	subs	r3, r3, r2
 802b9b2:	b530      	push	{r4, r5, lr}
 802b9b4:	d10c      	bne.n	802b9d0 <__mcmp+0x24>
 802b9b6:	0092      	lsls	r2, r2, #2
 802b9b8:	3014      	adds	r0, #20
 802b9ba:	3114      	adds	r1, #20
 802b9bc:	1884      	adds	r4, r0, r2
 802b9be:	4411      	add	r1, r2
 802b9c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802b9c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802b9c8:	4295      	cmp	r5, r2
 802b9ca:	d003      	beq.n	802b9d4 <__mcmp+0x28>
 802b9cc:	d305      	bcc.n	802b9da <__mcmp+0x2e>
 802b9ce:	2301      	movs	r3, #1
 802b9d0:	4618      	mov	r0, r3
 802b9d2:	bd30      	pop	{r4, r5, pc}
 802b9d4:	42a0      	cmp	r0, r4
 802b9d6:	d3f3      	bcc.n	802b9c0 <__mcmp+0x14>
 802b9d8:	e7fa      	b.n	802b9d0 <__mcmp+0x24>
 802b9da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802b9de:	e7f7      	b.n	802b9d0 <__mcmp+0x24>

0802b9e0 <__mdiff>:
 802b9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b9e4:	460d      	mov	r5, r1
 802b9e6:	4607      	mov	r7, r0
 802b9e8:	4611      	mov	r1, r2
 802b9ea:	4628      	mov	r0, r5
 802b9ec:	4614      	mov	r4, r2
 802b9ee:	f7ff ffdd 	bl	802b9ac <__mcmp>
 802b9f2:	1e06      	subs	r6, r0, #0
 802b9f4:	d108      	bne.n	802ba08 <__mdiff+0x28>
 802b9f6:	4631      	mov	r1, r6
 802b9f8:	4638      	mov	r0, r7
 802b9fa:	f7ff fdc1 	bl	802b580 <_Balloc>
 802b9fe:	2301      	movs	r3, #1
 802ba00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 802ba04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ba08:	bfa4      	itt	ge
 802ba0a:	4623      	movge	r3, r4
 802ba0c:	462c      	movge	r4, r5
 802ba0e:	4638      	mov	r0, r7
 802ba10:	6861      	ldr	r1, [r4, #4]
 802ba12:	bfa6      	itte	ge
 802ba14:	461d      	movge	r5, r3
 802ba16:	2600      	movge	r6, #0
 802ba18:	2601      	movlt	r6, #1
 802ba1a:	f7ff fdb1 	bl	802b580 <_Balloc>
 802ba1e:	692b      	ldr	r3, [r5, #16]
 802ba20:	60c6      	str	r6, [r0, #12]
 802ba22:	6926      	ldr	r6, [r4, #16]
 802ba24:	f105 0914 	add.w	r9, r5, #20
 802ba28:	f104 0214 	add.w	r2, r4, #20
 802ba2c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 802ba30:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 802ba34:	f100 0514 	add.w	r5, r0, #20
 802ba38:	f04f 0e00 	mov.w	lr, #0
 802ba3c:	f852 ab04 	ldr.w	sl, [r2], #4
 802ba40:	f859 4b04 	ldr.w	r4, [r9], #4
 802ba44:	fa1e f18a 	uxtah	r1, lr, sl
 802ba48:	b2a3      	uxth	r3, r4
 802ba4a:	1ac9      	subs	r1, r1, r3
 802ba4c:	0c23      	lsrs	r3, r4, #16
 802ba4e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 802ba52:	eb03 4321 	add.w	r3, r3, r1, asr #16
 802ba56:	b289      	uxth	r1, r1
 802ba58:	ea4f 4e23 	mov.w	lr, r3, asr #16
 802ba5c:	45c8      	cmp	r8, r9
 802ba5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802ba62:	4694      	mov	ip, r2
 802ba64:	f845 3b04 	str.w	r3, [r5], #4
 802ba68:	d8e8      	bhi.n	802ba3c <__mdiff+0x5c>
 802ba6a:	45bc      	cmp	ip, r7
 802ba6c:	d304      	bcc.n	802ba78 <__mdiff+0x98>
 802ba6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 802ba72:	b183      	cbz	r3, 802ba96 <__mdiff+0xb6>
 802ba74:	6106      	str	r6, [r0, #16]
 802ba76:	e7c5      	b.n	802ba04 <__mdiff+0x24>
 802ba78:	f85c 1b04 	ldr.w	r1, [ip], #4
 802ba7c:	fa1e f381 	uxtah	r3, lr, r1
 802ba80:	141a      	asrs	r2, r3, #16
 802ba82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802ba86:	b29b      	uxth	r3, r3
 802ba88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802ba8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 802ba90:	f845 3b04 	str.w	r3, [r5], #4
 802ba94:	e7e9      	b.n	802ba6a <__mdiff+0x8a>
 802ba96:	3e01      	subs	r6, #1
 802ba98:	e7e9      	b.n	802ba6e <__mdiff+0x8e>

0802ba9a <__d2b>:
 802ba9a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802ba9e:	460e      	mov	r6, r1
 802baa0:	2101      	movs	r1, #1
 802baa2:	ec59 8b10 	vmov	r8, r9, d0
 802baa6:	4615      	mov	r5, r2
 802baa8:	f7ff fd6a 	bl	802b580 <_Balloc>
 802baac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 802bab0:	4607      	mov	r7, r0
 802bab2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802bab6:	bb34      	cbnz	r4, 802bb06 <__d2b+0x6c>
 802bab8:	9301      	str	r3, [sp, #4]
 802baba:	f1b8 0300 	subs.w	r3, r8, #0
 802babe:	d027      	beq.n	802bb10 <__d2b+0x76>
 802bac0:	a802      	add	r0, sp, #8
 802bac2:	f840 3d08 	str.w	r3, [r0, #-8]!
 802bac6:	f7ff fe00 	bl	802b6ca <__lo0bits>
 802baca:	9900      	ldr	r1, [sp, #0]
 802bacc:	b1f0      	cbz	r0, 802bb0c <__d2b+0x72>
 802bace:	9a01      	ldr	r2, [sp, #4]
 802bad0:	f1c0 0320 	rsb	r3, r0, #32
 802bad4:	fa02 f303 	lsl.w	r3, r2, r3
 802bad8:	430b      	orrs	r3, r1
 802bada:	40c2      	lsrs	r2, r0
 802badc:	617b      	str	r3, [r7, #20]
 802bade:	9201      	str	r2, [sp, #4]
 802bae0:	9b01      	ldr	r3, [sp, #4]
 802bae2:	61bb      	str	r3, [r7, #24]
 802bae4:	2b00      	cmp	r3, #0
 802bae6:	bf14      	ite	ne
 802bae8:	2102      	movne	r1, #2
 802baea:	2101      	moveq	r1, #1
 802baec:	6139      	str	r1, [r7, #16]
 802baee:	b1c4      	cbz	r4, 802bb22 <__d2b+0x88>
 802baf0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 802baf4:	4404      	add	r4, r0
 802baf6:	6034      	str	r4, [r6, #0]
 802baf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802bafc:	6028      	str	r0, [r5, #0]
 802bafe:	4638      	mov	r0, r7
 802bb00:	b003      	add	sp, #12
 802bb02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802bb06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802bb0a:	e7d5      	b.n	802bab8 <__d2b+0x1e>
 802bb0c:	6179      	str	r1, [r7, #20]
 802bb0e:	e7e7      	b.n	802bae0 <__d2b+0x46>
 802bb10:	a801      	add	r0, sp, #4
 802bb12:	f7ff fdda 	bl	802b6ca <__lo0bits>
 802bb16:	9b01      	ldr	r3, [sp, #4]
 802bb18:	617b      	str	r3, [r7, #20]
 802bb1a:	2101      	movs	r1, #1
 802bb1c:	6139      	str	r1, [r7, #16]
 802bb1e:	3020      	adds	r0, #32
 802bb20:	e7e5      	b.n	802baee <__d2b+0x54>
 802bb22:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802bb26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802bb2a:	6030      	str	r0, [r6, #0]
 802bb2c:	6918      	ldr	r0, [r3, #16]
 802bb2e:	f7ff fdad 	bl	802b68c <__hi0bits>
 802bb32:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802bb36:	e7e1      	b.n	802bafc <__d2b+0x62>

0802bb38 <_calloc_r>:
 802bb38:	b538      	push	{r3, r4, r5, lr}
 802bb3a:	fb02 f401 	mul.w	r4, r2, r1
 802bb3e:	4621      	mov	r1, r4
 802bb40:	f7fe f99a 	bl	8029e78 <_malloc_r>
 802bb44:	4605      	mov	r5, r0
 802bb46:	b118      	cbz	r0, 802bb50 <_calloc_r+0x18>
 802bb48:	4622      	mov	r2, r4
 802bb4a:	2100      	movs	r1, #0
 802bb4c:	f7fe f93d 	bl	8029dca <memset>
 802bb50:	4628      	mov	r0, r5
 802bb52:	bd38      	pop	{r3, r4, r5, pc}

0802bb54 <__ssputs_r>:
 802bb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bb58:	688e      	ldr	r6, [r1, #8]
 802bb5a:	429e      	cmp	r6, r3
 802bb5c:	4682      	mov	sl, r0
 802bb5e:	460c      	mov	r4, r1
 802bb60:	4690      	mov	r8, r2
 802bb62:	4699      	mov	r9, r3
 802bb64:	d837      	bhi.n	802bbd6 <__ssputs_r+0x82>
 802bb66:	898a      	ldrh	r2, [r1, #12]
 802bb68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802bb6c:	d031      	beq.n	802bbd2 <__ssputs_r+0x7e>
 802bb6e:	6825      	ldr	r5, [r4, #0]
 802bb70:	6909      	ldr	r1, [r1, #16]
 802bb72:	1a6f      	subs	r7, r5, r1
 802bb74:	6965      	ldr	r5, [r4, #20]
 802bb76:	2302      	movs	r3, #2
 802bb78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802bb7c:	fb95 f5f3 	sdiv	r5, r5, r3
 802bb80:	f109 0301 	add.w	r3, r9, #1
 802bb84:	443b      	add	r3, r7
 802bb86:	429d      	cmp	r5, r3
 802bb88:	bf38      	it	cc
 802bb8a:	461d      	movcc	r5, r3
 802bb8c:	0553      	lsls	r3, r2, #21
 802bb8e:	d530      	bpl.n	802bbf2 <__ssputs_r+0x9e>
 802bb90:	4629      	mov	r1, r5
 802bb92:	f7fe f971 	bl	8029e78 <_malloc_r>
 802bb96:	4606      	mov	r6, r0
 802bb98:	b950      	cbnz	r0, 802bbb0 <__ssputs_r+0x5c>
 802bb9a:	230c      	movs	r3, #12
 802bb9c:	f8ca 3000 	str.w	r3, [sl]
 802bba0:	89a3      	ldrh	r3, [r4, #12]
 802bba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bba6:	81a3      	strh	r3, [r4, #12]
 802bba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802bbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bbb0:	463a      	mov	r2, r7
 802bbb2:	6921      	ldr	r1, [r4, #16]
 802bbb4:	f7fe f8fe 	bl	8029db4 <memcpy>
 802bbb8:	89a3      	ldrh	r3, [r4, #12]
 802bbba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802bbbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bbc2:	81a3      	strh	r3, [r4, #12]
 802bbc4:	6126      	str	r6, [r4, #16]
 802bbc6:	6165      	str	r5, [r4, #20]
 802bbc8:	443e      	add	r6, r7
 802bbca:	1bed      	subs	r5, r5, r7
 802bbcc:	6026      	str	r6, [r4, #0]
 802bbce:	60a5      	str	r5, [r4, #8]
 802bbd0:	464e      	mov	r6, r9
 802bbd2:	454e      	cmp	r6, r9
 802bbd4:	d900      	bls.n	802bbd8 <__ssputs_r+0x84>
 802bbd6:	464e      	mov	r6, r9
 802bbd8:	4632      	mov	r2, r6
 802bbda:	4641      	mov	r1, r8
 802bbdc:	6820      	ldr	r0, [r4, #0]
 802bbde:	f000 fdb7 	bl	802c750 <memmove>
 802bbe2:	68a3      	ldr	r3, [r4, #8]
 802bbe4:	1b9b      	subs	r3, r3, r6
 802bbe6:	60a3      	str	r3, [r4, #8]
 802bbe8:	6823      	ldr	r3, [r4, #0]
 802bbea:	441e      	add	r6, r3
 802bbec:	6026      	str	r6, [r4, #0]
 802bbee:	2000      	movs	r0, #0
 802bbf0:	e7dc      	b.n	802bbac <__ssputs_r+0x58>
 802bbf2:	462a      	mov	r2, r5
 802bbf4:	f000 fdc5 	bl	802c782 <_realloc_r>
 802bbf8:	4606      	mov	r6, r0
 802bbfa:	2800      	cmp	r0, #0
 802bbfc:	d1e2      	bne.n	802bbc4 <__ssputs_r+0x70>
 802bbfe:	6921      	ldr	r1, [r4, #16]
 802bc00:	4650      	mov	r0, sl
 802bc02:	f7fe f8eb 	bl	8029ddc <_free_r>
 802bc06:	e7c8      	b.n	802bb9a <__ssputs_r+0x46>

0802bc08 <_svfiprintf_r>:
 802bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bc0c:	461d      	mov	r5, r3
 802bc0e:	898b      	ldrh	r3, [r1, #12]
 802bc10:	061f      	lsls	r7, r3, #24
 802bc12:	b09d      	sub	sp, #116	; 0x74
 802bc14:	4680      	mov	r8, r0
 802bc16:	460c      	mov	r4, r1
 802bc18:	4616      	mov	r6, r2
 802bc1a:	d50f      	bpl.n	802bc3c <_svfiprintf_r+0x34>
 802bc1c:	690b      	ldr	r3, [r1, #16]
 802bc1e:	b96b      	cbnz	r3, 802bc3c <_svfiprintf_r+0x34>
 802bc20:	2140      	movs	r1, #64	; 0x40
 802bc22:	f7fe f929 	bl	8029e78 <_malloc_r>
 802bc26:	6020      	str	r0, [r4, #0]
 802bc28:	6120      	str	r0, [r4, #16]
 802bc2a:	b928      	cbnz	r0, 802bc38 <_svfiprintf_r+0x30>
 802bc2c:	230c      	movs	r3, #12
 802bc2e:	f8c8 3000 	str.w	r3, [r8]
 802bc32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802bc36:	e0c8      	b.n	802bdca <_svfiprintf_r+0x1c2>
 802bc38:	2340      	movs	r3, #64	; 0x40
 802bc3a:	6163      	str	r3, [r4, #20]
 802bc3c:	2300      	movs	r3, #0
 802bc3e:	9309      	str	r3, [sp, #36]	; 0x24
 802bc40:	2320      	movs	r3, #32
 802bc42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802bc46:	2330      	movs	r3, #48	; 0x30
 802bc48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802bc4c:	9503      	str	r5, [sp, #12]
 802bc4e:	f04f 0b01 	mov.w	fp, #1
 802bc52:	4637      	mov	r7, r6
 802bc54:	463d      	mov	r5, r7
 802bc56:	f815 3b01 	ldrb.w	r3, [r5], #1
 802bc5a:	b10b      	cbz	r3, 802bc60 <_svfiprintf_r+0x58>
 802bc5c:	2b25      	cmp	r3, #37	; 0x25
 802bc5e:	d13e      	bne.n	802bcde <_svfiprintf_r+0xd6>
 802bc60:	ebb7 0a06 	subs.w	sl, r7, r6
 802bc64:	d00b      	beq.n	802bc7e <_svfiprintf_r+0x76>
 802bc66:	4653      	mov	r3, sl
 802bc68:	4632      	mov	r2, r6
 802bc6a:	4621      	mov	r1, r4
 802bc6c:	4640      	mov	r0, r8
 802bc6e:	f7ff ff71 	bl	802bb54 <__ssputs_r>
 802bc72:	3001      	adds	r0, #1
 802bc74:	f000 80a4 	beq.w	802bdc0 <_svfiprintf_r+0x1b8>
 802bc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bc7a:	4453      	add	r3, sl
 802bc7c:	9309      	str	r3, [sp, #36]	; 0x24
 802bc7e:	783b      	ldrb	r3, [r7, #0]
 802bc80:	2b00      	cmp	r3, #0
 802bc82:	f000 809d 	beq.w	802bdc0 <_svfiprintf_r+0x1b8>
 802bc86:	2300      	movs	r3, #0
 802bc88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802bc8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bc90:	9304      	str	r3, [sp, #16]
 802bc92:	9307      	str	r3, [sp, #28]
 802bc94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802bc98:	931a      	str	r3, [sp, #104]	; 0x68
 802bc9a:	462f      	mov	r7, r5
 802bc9c:	2205      	movs	r2, #5
 802bc9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 802bca2:	4850      	ldr	r0, [pc, #320]	; (802bde4 <_svfiprintf_r+0x1dc>)
 802bca4:	f7d4 faac 	bl	8000200 <memchr>
 802bca8:	9b04      	ldr	r3, [sp, #16]
 802bcaa:	b9d0      	cbnz	r0, 802bce2 <_svfiprintf_r+0xda>
 802bcac:	06d9      	lsls	r1, r3, #27
 802bcae:	bf44      	itt	mi
 802bcb0:	2220      	movmi	r2, #32
 802bcb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802bcb6:	071a      	lsls	r2, r3, #28
 802bcb8:	bf44      	itt	mi
 802bcba:	222b      	movmi	r2, #43	; 0x2b
 802bcbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802bcc0:	782a      	ldrb	r2, [r5, #0]
 802bcc2:	2a2a      	cmp	r2, #42	; 0x2a
 802bcc4:	d015      	beq.n	802bcf2 <_svfiprintf_r+0xea>
 802bcc6:	9a07      	ldr	r2, [sp, #28]
 802bcc8:	462f      	mov	r7, r5
 802bcca:	2000      	movs	r0, #0
 802bccc:	250a      	movs	r5, #10
 802bcce:	4639      	mov	r1, r7
 802bcd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bcd4:	3b30      	subs	r3, #48	; 0x30
 802bcd6:	2b09      	cmp	r3, #9
 802bcd8:	d94d      	bls.n	802bd76 <_svfiprintf_r+0x16e>
 802bcda:	b1b8      	cbz	r0, 802bd0c <_svfiprintf_r+0x104>
 802bcdc:	e00f      	b.n	802bcfe <_svfiprintf_r+0xf6>
 802bcde:	462f      	mov	r7, r5
 802bce0:	e7b8      	b.n	802bc54 <_svfiprintf_r+0x4c>
 802bce2:	4a40      	ldr	r2, [pc, #256]	; (802bde4 <_svfiprintf_r+0x1dc>)
 802bce4:	1a80      	subs	r0, r0, r2
 802bce6:	fa0b f000 	lsl.w	r0, fp, r0
 802bcea:	4318      	orrs	r0, r3
 802bcec:	9004      	str	r0, [sp, #16]
 802bcee:	463d      	mov	r5, r7
 802bcf0:	e7d3      	b.n	802bc9a <_svfiprintf_r+0x92>
 802bcf2:	9a03      	ldr	r2, [sp, #12]
 802bcf4:	1d11      	adds	r1, r2, #4
 802bcf6:	6812      	ldr	r2, [r2, #0]
 802bcf8:	9103      	str	r1, [sp, #12]
 802bcfa:	2a00      	cmp	r2, #0
 802bcfc:	db01      	blt.n	802bd02 <_svfiprintf_r+0xfa>
 802bcfe:	9207      	str	r2, [sp, #28]
 802bd00:	e004      	b.n	802bd0c <_svfiprintf_r+0x104>
 802bd02:	4252      	negs	r2, r2
 802bd04:	f043 0302 	orr.w	r3, r3, #2
 802bd08:	9207      	str	r2, [sp, #28]
 802bd0a:	9304      	str	r3, [sp, #16]
 802bd0c:	783b      	ldrb	r3, [r7, #0]
 802bd0e:	2b2e      	cmp	r3, #46	; 0x2e
 802bd10:	d10c      	bne.n	802bd2c <_svfiprintf_r+0x124>
 802bd12:	787b      	ldrb	r3, [r7, #1]
 802bd14:	2b2a      	cmp	r3, #42	; 0x2a
 802bd16:	d133      	bne.n	802bd80 <_svfiprintf_r+0x178>
 802bd18:	9b03      	ldr	r3, [sp, #12]
 802bd1a:	1d1a      	adds	r2, r3, #4
 802bd1c:	681b      	ldr	r3, [r3, #0]
 802bd1e:	9203      	str	r2, [sp, #12]
 802bd20:	2b00      	cmp	r3, #0
 802bd22:	bfb8      	it	lt
 802bd24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802bd28:	3702      	adds	r7, #2
 802bd2a:	9305      	str	r3, [sp, #20]
 802bd2c:	4d2e      	ldr	r5, [pc, #184]	; (802bde8 <_svfiprintf_r+0x1e0>)
 802bd2e:	7839      	ldrb	r1, [r7, #0]
 802bd30:	2203      	movs	r2, #3
 802bd32:	4628      	mov	r0, r5
 802bd34:	f7d4 fa64 	bl	8000200 <memchr>
 802bd38:	b138      	cbz	r0, 802bd4a <_svfiprintf_r+0x142>
 802bd3a:	2340      	movs	r3, #64	; 0x40
 802bd3c:	1b40      	subs	r0, r0, r5
 802bd3e:	fa03 f000 	lsl.w	r0, r3, r0
 802bd42:	9b04      	ldr	r3, [sp, #16]
 802bd44:	4303      	orrs	r3, r0
 802bd46:	3701      	adds	r7, #1
 802bd48:	9304      	str	r3, [sp, #16]
 802bd4a:	7839      	ldrb	r1, [r7, #0]
 802bd4c:	4827      	ldr	r0, [pc, #156]	; (802bdec <_svfiprintf_r+0x1e4>)
 802bd4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802bd52:	2206      	movs	r2, #6
 802bd54:	1c7e      	adds	r6, r7, #1
 802bd56:	f7d4 fa53 	bl	8000200 <memchr>
 802bd5a:	2800      	cmp	r0, #0
 802bd5c:	d038      	beq.n	802bdd0 <_svfiprintf_r+0x1c8>
 802bd5e:	4b24      	ldr	r3, [pc, #144]	; (802bdf0 <_svfiprintf_r+0x1e8>)
 802bd60:	bb13      	cbnz	r3, 802bda8 <_svfiprintf_r+0x1a0>
 802bd62:	9b03      	ldr	r3, [sp, #12]
 802bd64:	3307      	adds	r3, #7
 802bd66:	f023 0307 	bic.w	r3, r3, #7
 802bd6a:	3308      	adds	r3, #8
 802bd6c:	9303      	str	r3, [sp, #12]
 802bd6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bd70:	444b      	add	r3, r9
 802bd72:	9309      	str	r3, [sp, #36]	; 0x24
 802bd74:	e76d      	b.n	802bc52 <_svfiprintf_r+0x4a>
 802bd76:	fb05 3202 	mla	r2, r5, r2, r3
 802bd7a:	2001      	movs	r0, #1
 802bd7c:	460f      	mov	r7, r1
 802bd7e:	e7a6      	b.n	802bcce <_svfiprintf_r+0xc6>
 802bd80:	2300      	movs	r3, #0
 802bd82:	3701      	adds	r7, #1
 802bd84:	9305      	str	r3, [sp, #20]
 802bd86:	4619      	mov	r1, r3
 802bd88:	250a      	movs	r5, #10
 802bd8a:	4638      	mov	r0, r7
 802bd8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bd90:	3a30      	subs	r2, #48	; 0x30
 802bd92:	2a09      	cmp	r2, #9
 802bd94:	d903      	bls.n	802bd9e <_svfiprintf_r+0x196>
 802bd96:	2b00      	cmp	r3, #0
 802bd98:	d0c8      	beq.n	802bd2c <_svfiprintf_r+0x124>
 802bd9a:	9105      	str	r1, [sp, #20]
 802bd9c:	e7c6      	b.n	802bd2c <_svfiprintf_r+0x124>
 802bd9e:	fb05 2101 	mla	r1, r5, r1, r2
 802bda2:	2301      	movs	r3, #1
 802bda4:	4607      	mov	r7, r0
 802bda6:	e7f0      	b.n	802bd8a <_svfiprintf_r+0x182>
 802bda8:	ab03      	add	r3, sp, #12
 802bdaa:	9300      	str	r3, [sp, #0]
 802bdac:	4622      	mov	r2, r4
 802bdae:	4b11      	ldr	r3, [pc, #68]	; (802bdf4 <_svfiprintf_r+0x1ec>)
 802bdb0:	a904      	add	r1, sp, #16
 802bdb2:	4640      	mov	r0, r8
 802bdb4:	f7fe f94e 	bl	802a054 <_printf_float>
 802bdb8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 802bdbc:	4681      	mov	r9, r0
 802bdbe:	d1d6      	bne.n	802bd6e <_svfiprintf_r+0x166>
 802bdc0:	89a3      	ldrh	r3, [r4, #12]
 802bdc2:	065b      	lsls	r3, r3, #25
 802bdc4:	f53f af35 	bmi.w	802bc32 <_svfiprintf_r+0x2a>
 802bdc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 802bdca:	b01d      	add	sp, #116	; 0x74
 802bdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bdd0:	ab03      	add	r3, sp, #12
 802bdd2:	9300      	str	r3, [sp, #0]
 802bdd4:	4622      	mov	r2, r4
 802bdd6:	4b07      	ldr	r3, [pc, #28]	; (802bdf4 <_svfiprintf_r+0x1ec>)
 802bdd8:	a904      	add	r1, sp, #16
 802bdda:	4640      	mov	r0, r8
 802bddc:	f7fe fbf0 	bl	802a5c0 <_printf_i>
 802bde0:	e7ea      	b.n	802bdb8 <_svfiprintf_r+0x1b0>
 802bde2:	bf00      	nop
 802bde4:	08047dbc 	.word	0x08047dbc
 802bde8:	08047dc2 	.word	0x08047dc2
 802bdec:	08047dc6 	.word	0x08047dc6
 802bdf0:	0802a055 	.word	0x0802a055
 802bdf4:	0802bb55 	.word	0x0802bb55

0802bdf8 <_sungetc_r>:
 802bdf8:	b538      	push	{r3, r4, r5, lr}
 802bdfa:	1c4b      	adds	r3, r1, #1
 802bdfc:	4614      	mov	r4, r2
 802bdfe:	d103      	bne.n	802be08 <_sungetc_r+0x10>
 802be00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 802be04:	4628      	mov	r0, r5
 802be06:	bd38      	pop	{r3, r4, r5, pc}
 802be08:	8993      	ldrh	r3, [r2, #12]
 802be0a:	f023 0320 	bic.w	r3, r3, #32
 802be0e:	8193      	strh	r3, [r2, #12]
 802be10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802be12:	6852      	ldr	r2, [r2, #4]
 802be14:	b2cd      	uxtb	r5, r1
 802be16:	b18b      	cbz	r3, 802be3c <_sungetc_r+0x44>
 802be18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802be1a:	4293      	cmp	r3, r2
 802be1c:	dd08      	ble.n	802be30 <_sungetc_r+0x38>
 802be1e:	6823      	ldr	r3, [r4, #0]
 802be20:	1e5a      	subs	r2, r3, #1
 802be22:	6022      	str	r2, [r4, #0]
 802be24:	f803 5c01 	strb.w	r5, [r3, #-1]
 802be28:	6863      	ldr	r3, [r4, #4]
 802be2a:	3301      	adds	r3, #1
 802be2c:	6063      	str	r3, [r4, #4]
 802be2e:	e7e9      	b.n	802be04 <_sungetc_r+0xc>
 802be30:	4621      	mov	r1, r4
 802be32:	f000 fc2f 	bl	802c694 <__submore>
 802be36:	2800      	cmp	r0, #0
 802be38:	d0f1      	beq.n	802be1e <_sungetc_r+0x26>
 802be3a:	e7e1      	b.n	802be00 <_sungetc_r+0x8>
 802be3c:	6921      	ldr	r1, [r4, #16]
 802be3e:	6823      	ldr	r3, [r4, #0]
 802be40:	b151      	cbz	r1, 802be58 <_sungetc_r+0x60>
 802be42:	4299      	cmp	r1, r3
 802be44:	d208      	bcs.n	802be58 <_sungetc_r+0x60>
 802be46:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802be4a:	42a9      	cmp	r1, r5
 802be4c:	d104      	bne.n	802be58 <_sungetc_r+0x60>
 802be4e:	3b01      	subs	r3, #1
 802be50:	3201      	adds	r2, #1
 802be52:	6023      	str	r3, [r4, #0]
 802be54:	6062      	str	r2, [r4, #4]
 802be56:	e7d5      	b.n	802be04 <_sungetc_r+0xc>
 802be58:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802be5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802be60:	6363      	str	r3, [r4, #52]	; 0x34
 802be62:	2303      	movs	r3, #3
 802be64:	63a3      	str	r3, [r4, #56]	; 0x38
 802be66:	4623      	mov	r3, r4
 802be68:	f803 5f46 	strb.w	r5, [r3, #70]!
 802be6c:	6023      	str	r3, [r4, #0]
 802be6e:	2301      	movs	r3, #1
 802be70:	e7dc      	b.n	802be2c <_sungetc_r+0x34>

0802be72 <__ssrefill_r>:
 802be72:	b510      	push	{r4, lr}
 802be74:	460c      	mov	r4, r1
 802be76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802be78:	b169      	cbz	r1, 802be96 <__ssrefill_r+0x24>
 802be7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802be7e:	4299      	cmp	r1, r3
 802be80:	d001      	beq.n	802be86 <__ssrefill_r+0x14>
 802be82:	f7fd ffab 	bl	8029ddc <_free_r>
 802be86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802be88:	6063      	str	r3, [r4, #4]
 802be8a:	2000      	movs	r0, #0
 802be8c:	6360      	str	r0, [r4, #52]	; 0x34
 802be8e:	b113      	cbz	r3, 802be96 <__ssrefill_r+0x24>
 802be90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802be92:	6023      	str	r3, [r4, #0]
 802be94:	bd10      	pop	{r4, pc}
 802be96:	6923      	ldr	r3, [r4, #16]
 802be98:	6023      	str	r3, [r4, #0]
 802be9a:	2300      	movs	r3, #0
 802be9c:	6063      	str	r3, [r4, #4]
 802be9e:	89a3      	ldrh	r3, [r4, #12]
 802bea0:	f043 0320 	orr.w	r3, r3, #32
 802bea4:	81a3      	strh	r3, [r4, #12]
 802bea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802beaa:	e7f3      	b.n	802be94 <__ssrefill_r+0x22>

0802beac <__ssvfiscanf_r>:
 802beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802beb0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802beb4:	460c      	mov	r4, r1
 802beb6:	2100      	movs	r1, #0
 802beb8:	9144      	str	r1, [sp, #272]	; 0x110
 802beba:	9145      	str	r1, [sp, #276]	; 0x114
 802bebc:	499f      	ldr	r1, [pc, #636]	; (802c13c <__ssvfiscanf_r+0x290>)
 802bebe:	91a0      	str	r1, [sp, #640]	; 0x280
 802bec0:	f10d 0804 	add.w	r8, sp, #4
 802bec4:	499e      	ldr	r1, [pc, #632]	; (802c140 <__ssvfiscanf_r+0x294>)
 802bec6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 802c144 <__ssvfiscanf_r+0x298>
 802beca:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802bece:	4606      	mov	r6, r0
 802bed0:	4692      	mov	sl, r2
 802bed2:	91a1      	str	r1, [sp, #644]	; 0x284
 802bed4:	9300      	str	r3, [sp, #0]
 802bed6:	270a      	movs	r7, #10
 802bed8:	f89a 3000 	ldrb.w	r3, [sl]
 802bedc:	2b00      	cmp	r3, #0
 802bede:	f000 812a 	beq.w	802c136 <__ssvfiscanf_r+0x28a>
 802bee2:	4655      	mov	r5, sl
 802bee4:	f000 fc14 	bl	802c710 <__locale_ctype_ptr>
 802bee8:	f815 bb01 	ldrb.w	fp, [r5], #1
 802beec:	4458      	add	r0, fp
 802beee:	7843      	ldrb	r3, [r0, #1]
 802bef0:	f013 0308 	ands.w	r3, r3, #8
 802bef4:	d01c      	beq.n	802bf30 <__ssvfiscanf_r+0x84>
 802bef6:	6863      	ldr	r3, [r4, #4]
 802bef8:	2b00      	cmp	r3, #0
 802befa:	dd12      	ble.n	802bf22 <__ssvfiscanf_r+0x76>
 802befc:	f000 fc08 	bl	802c710 <__locale_ctype_ptr>
 802bf00:	6823      	ldr	r3, [r4, #0]
 802bf02:	781a      	ldrb	r2, [r3, #0]
 802bf04:	4410      	add	r0, r2
 802bf06:	7842      	ldrb	r2, [r0, #1]
 802bf08:	0712      	lsls	r2, r2, #28
 802bf0a:	d401      	bmi.n	802bf10 <__ssvfiscanf_r+0x64>
 802bf0c:	46aa      	mov	sl, r5
 802bf0e:	e7e3      	b.n	802bed8 <__ssvfiscanf_r+0x2c>
 802bf10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802bf12:	3201      	adds	r2, #1
 802bf14:	9245      	str	r2, [sp, #276]	; 0x114
 802bf16:	6862      	ldr	r2, [r4, #4]
 802bf18:	3301      	adds	r3, #1
 802bf1a:	3a01      	subs	r2, #1
 802bf1c:	6062      	str	r2, [r4, #4]
 802bf1e:	6023      	str	r3, [r4, #0]
 802bf20:	e7e9      	b.n	802bef6 <__ssvfiscanf_r+0x4a>
 802bf22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802bf24:	4621      	mov	r1, r4
 802bf26:	4630      	mov	r0, r6
 802bf28:	4798      	blx	r3
 802bf2a:	2800      	cmp	r0, #0
 802bf2c:	d0e6      	beq.n	802befc <__ssvfiscanf_r+0x50>
 802bf2e:	e7ed      	b.n	802bf0c <__ssvfiscanf_r+0x60>
 802bf30:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 802bf34:	f040 8082 	bne.w	802c03c <__ssvfiscanf_r+0x190>
 802bf38:	9343      	str	r3, [sp, #268]	; 0x10c
 802bf3a:	9341      	str	r3, [sp, #260]	; 0x104
 802bf3c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 802bf40:	2b2a      	cmp	r3, #42	; 0x2a
 802bf42:	d103      	bne.n	802bf4c <__ssvfiscanf_r+0xa0>
 802bf44:	2310      	movs	r3, #16
 802bf46:	9341      	str	r3, [sp, #260]	; 0x104
 802bf48:	f10a 0502 	add.w	r5, sl, #2
 802bf4c:	46aa      	mov	sl, r5
 802bf4e:	f815 1b01 	ldrb.w	r1, [r5], #1
 802bf52:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802bf56:	2a09      	cmp	r2, #9
 802bf58:	d922      	bls.n	802bfa0 <__ssvfiscanf_r+0xf4>
 802bf5a:	2203      	movs	r2, #3
 802bf5c:	4879      	ldr	r0, [pc, #484]	; (802c144 <__ssvfiscanf_r+0x298>)
 802bf5e:	f7d4 f94f 	bl	8000200 <memchr>
 802bf62:	b138      	cbz	r0, 802bf74 <__ssvfiscanf_r+0xc8>
 802bf64:	eba0 0309 	sub.w	r3, r0, r9
 802bf68:	2001      	movs	r0, #1
 802bf6a:	4098      	lsls	r0, r3
 802bf6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802bf6e:	4318      	orrs	r0, r3
 802bf70:	9041      	str	r0, [sp, #260]	; 0x104
 802bf72:	46aa      	mov	sl, r5
 802bf74:	f89a 3000 	ldrb.w	r3, [sl]
 802bf78:	2b67      	cmp	r3, #103	; 0x67
 802bf7a:	f10a 0501 	add.w	r5, sl, #1
 802bf7e:	d82b      	bhi.n	802bfd8 <__ssvfiscanf_r+0x12c>
 802bf80:	2b65      	cmp	r3, #101	; 0x65
 802bf82:	f080 809f 	bcs.w	802c0c4 <__ssvfiscanf_r+0x218>
 802bf86:	2b47      	cmp	r3, #71	; 0x47
 802bf88:	d810      	bhi.n	802bfac <__ssvfiscanf_r+0x100>
 802bf8a:	2b45      	cmp	r3, #69	; 0x45
 802bf8c:	f080 809a 	bcs.w	802c0c4 <__ssvfiscanf_r+0x218>
 802bf90:	2b00      	cmp	r3, #0
 802bf92:	d06c      	beq.n	802c06e <__ssvfiscanf_r+0x1c2>
 802bf94:	2b25      	cmp	r3, #37	; 0x25
 802bf96:	d051      	beq.n	802c03c <__ssvfiscanf_r+0x190>
 802bf98:	2303      	movs	r3, #3
 802bf9a:	9347      	str	r3, [sp, #284]	; 0x11c
 802bf9c:	9742      	str	r7, [sp, #264]	; 0x108
 802bf9e:	e027      	b.n	802bff0 <__ssvfiscanf_r+0x144>
 802bfa0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802bfa2:	fb07 1303 	mla	r3, r7, r3, r1
 802bfa6:	3b30      	subs	r3, #48	; 0x30
 802bfa8:	9343      	str	r3, [sp, #268]	; 0x10c
 802bfaa:	e7cf      	b.n	802bf4c <__ssvfiscanf_r+0xa0>
 802bfac:	2b5b      	cmp	r3, #91	; 0x5b
 802bfae:	d06a      	beq.n	802c086 <__ssvfiscanf_r+0x1da>
 802bfb0:	d80c      	bhi.n	802bfcc <__ssvfiscanf_r+0x120>
 802bfb2:	2b58      	cmp	r3, #88	; 0x58
 802bfb4:	d1f0      	bne.n	802bf98 <__ssvfiscanf_r+0xec>
 802bfb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802bfb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802bfbc:	9241      	str	r2, [sp, #260]	; 0x104
 802bfbe:	2210      	movs	r2, #16
 802bfc0:	9242      	str	r2, [sp, #264]	; 0x108
 802bfc2:	2b6e      	cmp	r3, #110	; 0x6e
 802bfc4:	bf8c      	ite	hi
 802bfc6:	2304      	movhi	r3, #4
 802bfc8:	2303      	movls	r3, #3
 802bfca:	e010      	b.n	802bfee <__ssvfiscanf_r+0x142>
 802bfcc:	2b63      	cmp	r3, #99	; 0x63
 802bfce:	d065      	beq.n	802c09c <__ssvfiscanf_r+0x1f0>
 802bfd0:	2b64      	cmp	r3, #100	; 0x64
 802bfd2:	d1e1      	bne.n	802bf98 <__ssvfiscanf_r+0xec>
 802bfd4:	9742      	str	r7, [sp, #264]	; 0x108
 802bfd6:	e7f4      	b.n	802bfc2 <__ssvfiscanf_r+0x116>
 802bfd8:	2b70      	cmp	r3, #112	; 0x70
 802bfda:	d04b      	beq.n	802c074 <__ssvfiscanf_r+0x1c8>
 802bfdc:	d826      	bhi.n	802c02c <__ssvfiscanf_r+0x180>
 802bfde:	2b6e      	cmp	r3, #110	; 0x6e
 802bfe0:	d062      	beq.n	802c0a8 <__ssvfiscanf_r+0x1fc>
 802bfe2:	d84c      	bhi.n	802c07e <__ssvfiscanf_r+0x1d2>
 802bfe4:	2b69      	cmp	r3, #105	; 0x69
 802bfe6:	d1d7      	bne.n	802bf98 <__ssvfiscanf_r+0xec>
 802bfe8:	2300      	movs	r3, #0
 802bfea:	9342      	str	r3, [sp, #264]	; 0x108
 802bfec:	2303      	movs	r3, #3
 802bfee:	9347      	str	r3, [sp, #284]	; 0x11c
 802bff0:	6863      	ldr	r3, [r4, #4]
 802bff2:	2b00      	cmp	r3, #0
 802bff4:	dd68      	ble.n	802c0c8 <__ssvfiscanf_r+0x21c>
 802bff6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802bff8:	0659      	lsls	r1, r3, #25
 802bffa:	d407      	bmi.n	802c00c <__ssvfiscanf_r+0x160>
 802bffc:	f000 fb88 	bl	802c710 <__locale_ctype_ptr>
 802c000:	6823      	ldr	r3, [r4, #0]
 802c002:	781a      	ldrb	r2, [r3, #0]
 802c004:	4410      	add	r0, r2
 802c006:	7842      	ldrb	r2, [r0, #1]
 802c008:	0712      	lsls	r2, r2, #28
 802c00a:	d464      	bmi.n	802c0d6 <__ssvfiscanf_r+0x22a>
 802c00c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802c00e:	2b02      	cmp	r3, #2
 802c010:	dc73      	bgt.n	802c0fa <__ssvfiscanf_r+0x24e>
 802c012:	466b      	mov	r3, sp
 802c014:	4622      	mov	r2, r4
 802c016:	a941      	add	r1, sp, #260	; 0x104
 802c018:	4630      	mov	r0, r6
 802c01a:	f000 f897 	bl	802c14c <_scanf_chars>
 802c01e:	2801      	cmp	r0, #1
 802c020:	f000 8089 	beq.w	802c136 <__ssvfiscanf_r+0x28a>
 802c024:	2802      	cmp	r0, #2
 802c026:	f47f af71 	bne.w	802bf0c <__ssvfiscanf_r+0x60>
 802c02a:	e01d      	b.n	802c068 <__ssvfiscanf_r+0x1bc>
 802c02c:	2b75      	cmp	r3, #117	; 0x75
 802c02e:	d0d1      	beq.n	802bfd4 <__ssvfiscanf_r+0x128>
 802c030:	2b78      	cmp	r3, #120	; 0x78
 802c032:	d0c0      	beq.n	802bfb6 <__ssvfiscanf_r+0x10a>
 802c034:	2b73      	cmp	r3, #115	; 0x73
 802c036:	d1af      	bne.n	802bf98 <__ssvfiscanf_r+0xec>
 802c038:	2302      	movs	r3, #2
 802c03a:	e7d8      	b.n	802bfee <__ssvfiscanf_r+0x142>
 802c03c:	6863      	ldr	r3, [r4, #4]
 802c03e:	2b00      	cmp	r3, #0
 802c040:	dd0c      	ble.n	802c05c <__ssvfiscanf_r+0x1b0>
 802c042:	6823      	ldr	r3, [r4, #0]
 802c044:	781a      	ldrb	r2, [r3, #0]
 802c046:	455a      	cmp	r2, fp
 802c048:	d175      	bne.n	802c136 <__ssvfiscanf_r+0x28a>
 802c04a:	3301      	adds	r3, #1
 802c04c:	6862      	ldr	r2, [r4, #4]
 802c04e:	6023      	str	r3, [r4, #0]
 802c050:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802c052:	3a01      	subs	r2, #1
 802c054:	3301      	adds	r3, #1
 802c056:	6062      	str	r2, [r4, #4]
 802c058:	9345      	str	r3, [sp, #276]	; 0x114
 802c05a:	e757      	b.n	802bf0c <__ssvfiscanf_r+0x60>
 802c05c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c05e:	4621      	mov	r1, r4
 802c060:	4630      	mov	r0, r6
 802c062:	4798      	blx	r3
 802c064:	2800      	cmp	r0, #0
 802c066:	d0ec      	beq.n	802c042 <__ssvfiscanf_r+0x196>
 802c068:	9844      	ldr	r0, [sp, #272]	; 0x110
 802c06a:	2800      	cmp	r0, #0
 802c06c:	d159      	bne.n	802c122 <__ssvfiscanf_r+0x276>
 802c06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c072:	e05c      	b.n	802c12e <__ssvfiscanf_r+0x282>
 802c074:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802c076:	f042 0220 	orr.w	r2, r2, #32
 802c07a:	9241      	str	r2, [sp, #260]	; 0x104
 802c07c:	e79b      	b.n	802bfb6 <__ssvfiscanf_r+0x10a>
 802c07e:	2308      	movs	r3, #8
 802c080:	9342      	str	r3, [sp, #264]	; 0x108
 802c082:	2304      	movs	r3, #4
 802c084:	e7b3      	b.n	802bfee <__ssvfiscanf_r+0x142>
 802c086:	4629      	mov	r1, r5
 802c088:	4640      	mov	r0, r8
 802c08a:	f000 f9b7 	bl	802c3fc <__sccl>
 802c08e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c094:	9341      	str	r3, [sp, #260]	; 0x104
 802c096:	4605      	mov	r5, r0
 802c098:	2301      	movs	r3, #1
 802c09a:	e7a8      	b.n	802bfee <__ssvfiscanf_r+0x142>
 802c09c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c0a2:	9341      	str	r3, [sp, #260]	; 0x104
 802c0a4:	2300      	movs	r3, #0
 802c0a6:	e7a2      	b.n	802bfee <__ssvfiscanf_r+0x142>
 802c0a8:	9841      	ldr	r0, [sp, #260]	; 0x104
 802c0aa:	06c3      	lsls	r3, r0, #27
 802c0ac:	f53f af2e 	bmi.w	802bf0c <__ssvfiscanf_r+0x60>
 802c0b0:	9b00      	ldr	r3, [sp, #0]
 802c0b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c0b4:	1d19      	adds	r1, r3, #4
 802c0b6:	9100      	str	r1, [sp, #0]
 802c0b8:	681b      	ldr	r3, [r3, #0]
 802c0ba:	07c0      	lsls	r0, r0, #31
 802c0bc:	bf4c      	ite	mi
 802c0be:	801a      	strhmi	r2, [r3, #0]
 802c0c0:	601a      	strpl	r2, [r3, #0]
 802c0c2:	e723      	b.n	802bf0c <__ssvfiscanf_r+0x60>
 802c0c4:	2305      	movs	r3, #5
 802c0c6:	e792      	b.n	802bfee <__ssvfiscanf_r+0x142>
 802c0c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c0ca:	4621      	mov	r1, r4
 802c0cc:	4630      	mov	r0, r6
 802c0ce:	4798      	blx	r3
 802c0d0:	2800      	cmp	r0, #0
 802c0d2:	d090      	beq.n	802bff6 <__ssvfiscanf_r+0x14a>
 802c0d4:	e7c8      	b.n	802c068 <__ssvfiscanf_r+0x1bc>
 802c0d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c0d8:	3201      	adds	r2, #1
 802c0da:	9245      	str	r2, [sp, #276]	; 0x114
 802c0dc:	6862      	ldr	r2, [r4, #4]
 802c0de:	3a01      	subs	r2, #1
 802c0e0:	2a00      	cmp	r2, #0
 802c0e2:	6062      	str	r2, [r4, #4]
 802c0e4:	dd02      	ble.n	802c0ec <__ssvfiscanf_r+0x240>
 802c0e6:	3301      	adds	r3, #1
 802c0e8:	6023      	str	r3, [r4, #0]
 802c0ea:	e787      	b.n	802bffc <__ssvfiscanf_r+0x150>
 802c0ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c0ee:	4621      	mov	r1, r4
 802c0f0:	4630      	mov	r0, r6
 802c0f2:	4798      	blx	r3
 802c0f4:	2800      	cmp	r0, #0
 802c0f6:	d081      	beq.n	802bffc <__ssvfiscanf_r+0x150>
 802c0f8:	e7b6      	b.n	802c068 <__ssvfiscanf_r+0x1bc>
 802c0fa:	2b04      	cmp	r3, #4
 802c0fc:	dc06      	bgt.n	802c10c <__ssvfiscanf_r+0x260>
 802c0fe:	466b      	mov	r3, sp
 802c100:	4622      	mov	r2, r4
 802c102:	a941      	add	r1, sp, #260	; 0x104
 802c104:	4630      	mov	r0, r6
 802c106:	f000 f885 	bl	802c214 <_scanf_i>
 802c10a:	e788      	b.n	802c01e <__ssvfiscanf_r+0x172>
 802c10c:	4b0e      	ldr	r3, [pc, #56]	; (802c148 <__ssvfiscanf_r+0x29c>)
 802c10e:	2b00      	cmp	r3, #0
 802c110:	f43f aefc 	beq.w	802bf0c <__ssvfiscanf_r+0x60>
 802c114:	466b      	mov	r3, sp
 802c116:	4622      	mov	r2, r4
 802c118:	a941      	add	r1, sp, #260	; 0x104
 802c11a:	4630      	mov	r0, r6
 802c11c:	f3af 8000 	nop.w
 802c120:	e77d      	b.n	802c01e <__ssvfiscanf_r+0x172>
 802c122:	89a3      	ldrh	r3, [r4, #12]
 802c124:	f013 0f40 	tst.w	r3, #64	; 0x40
 802c128:	bf18      	it	ne
 802c12a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 802c12e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 802c132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c136:	9844      	ldr	r0, [sp, #272]	; 0x110
 802c138:	e7f9      	b.n	802c12e <__ssvfiscanf_r+0x282>
 802c13a:	bf00      	nop
 802c13c:	0802bdf9 	.word	0x0802bdf9
 802c140:	0802be73 	.word	0x0802be73
 802c144:	08047dc2 	.word	0x08047dc2
 802c148:	00000000 	.word	0x00000000

0802c14c <_scanf_chars>:
 802c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c150:	4615      	mov	r5, r2
 802c152:	688a      	ldr	r2, [r1, #8]
 802c154:	4680      	mov	r8, r0
 802c156:	460c      	mov	r4, r1
 802c158:	b932      	cbnz	r2, 802c168 <_scanf_chars+0x1c>
 802c15a:	698a      	ldr	r2, [r1, #24]
 802c15c:	2a00      	cmp	r2, #0
 802c15e:	bf14      	ite	ne
 802c160:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 802c164:	2201      	moveq	r2, #1
 802c166:	608a      	str	r2, [r1, #8]
 802c168:	6822      	ldr	r2, [r4, #0]
 802c16a:	06d1      	lsls	r1, r2, #27
 802c16c:	bf5f      	itttt	pl
 802c16e:	681a      	ldrpl	r2, [r3, #0]
 802c170:	1d11      	addpl	r1, r2, #4
 802c172:	6019      	strpl	r1, [r3, #0]
 802c174:	6817      	ldrpl	r7, [r2, #0]
 802c176:	2600      	movs	r6, #0
 802c178:	69a3      	ldr	r3, [r4, #24]
 802c17a:	b1db      	cbz	r3, 802c1b4 <_scanf_chars+0x68>
 802c17c:	2b01      	cmp	r3, #1
 802c17e:	d107      	bne.n	802c190 <_scanf_chars+0x44>
 802c180:	682b      	ldr	r3, [r5, #0]
 802c182:	6962      	ldr	r2, [r4, #20]
 802c184:	781b      	ldrb	r3, [r3, #0]
 802c186:	5cd3      	ldrb	r3, [r2, r3]
 802c188:	b9a3      	cbnz	r3, 802c1b4 <_scanf_chars+0x68>
 802c18a:	2e00      	cmp	r6, #0
 802c18c:	d132      	bne.n	802c1f4 <_scanf_chars+0xa8>
 802c18e:	e006      	b.n	802c19e <_scanf_chars+0x52>
 802c190:	2b02      	cmp	r3, #2
 802c192:	d007      	beq.n	802c1a4 <_scanf_chars+0x58>
 802c194:	2e00      	cmp	r6, #0
 802c196:	d12d      	bne.n	802c1f4 <_scanf_chars+0xa8>
 802c198:	69a3      	ldr	r3, [r4, #24]
 802c19a:	2b01      	cmp	r3, #1
 802c19c:	d12a      	bne.n	802c1f4 <_scanf_chars+0xa8>
 802c19e:	2001      	movs	r0, #1
 802c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c1a4:	f000 fab4 	bl	802c710 <__locale_ctype_ptr>
 802c1a8:	682b      	ldr	r3, [r5, #0]
 802c1aa:	781b      	ldrb	r3, [r3, #0]
 802c1ac:	4418      	add	r0, r3
 802c1ae:	7843      	ldrb	r3, [r0, #1]
 802c1b0:	071b      	lsls	r3, r3, #28
 802c1b2:	d4ef      	bmi.n	802c194 <_scanf_chars+0x48>
 802c1b4:	6823      	ldr	r3, [r4, #0]
 802c1b6:	06da      	lsls	r2, r3, #27
 802c1b8:	bf5e      	ittt	pl
 802c1ba:	682b      	ldrpl	r3, [r5, #0]
 802c1bc:	781b      	ldrbpl	r3, [r3, #0]
 802c1be:	703b      	strbpl	r3, [r7, #0]
 802c1c0:	682a      	ldr	r2, [r5, #0]
 802c1c2:	686b      	ldr	r3, [r5, #4]
 802c1c4:	f102 0201 	add.w	r2, r2, #1
 802c1c8:	602a      	str	r2, [r5, #0]
 802c1ca:	68a2      	ldr	r2, [r4, #8]
 802c1cc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 802c1d0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 802c1d4:	606b      	str	r3, [r5, #4]
 802c1d6:	f106 0601 	add.w	r6, r6, #1
 802c1da:	bf58      	it	pl
 802c1dc:	3701      	addpl	r7, #1
 802c1de:	60a2      	str	r2, [r4, #8]
 802c1e0:	b142      	cbz	r2, 802c1f4 <_scanf_chars+0xa8>
 802c1e2:	2b00      	cmp	r3, #0
 802c1e4:	dcc8      	bgt.n	802c178 <_scanf_chars+0x2c>
 802c1e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802c1ea:	4629      	mov	r1, r5
 802c1ec:	4640      	mov	r0, r8
 802c1ee:	4798      	blx	r3
 802c1f0:	2800      	cmp	r0, #0
 802c1f2:	d0c1      	beq.n	802c178 <_scanf_chars+0x2c>
 802c1f4:	6823      	ldr	r3, [r4, #0]
 802c1f6:	f013 0310 	ands.w	r3, r3, #16
 802c1fa:	d105      	bne.n	802c208 <_scanf_chars+0xbc>
 802c1fc:	68e2      	ldr	r2, [r4, #12]
 802c1fe:	3201      	adds	r2, #1
 802c200:	60e2      	str	r2, [r4, #12]
 802c202:	69a2      	ldr	r2, [r4, #24]
 802c204:	b102      	cbz	r2, 802c208 <_scanf_chars+0xbc>
 802c206:	703b      	strb	r3, [r7, #0]
 802c208:	6923      	ldr	r3, [r4, #16]
 802c20a:	441e      	add	r6, r3
 802c20c:	6126      	str	r6, [r4, #16]
 802c20e:	2000      	movs	r0, #0
 802c210:	e7c6      	b.n	802c1a0 <_scanf_chars+0x54>
	...

0802c214 <_scanf_i>:
 802c214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c218:	469a      	mov	sl, r3
 802c21a:	4b74      	ldr	r3, [pc, #464]	; (802c3ec <_scanf_i+0x1d8>)
 802c21c:	460c      	mov	r4, r1
 802c21e:	4683      	mov	fp, r0
 802c220:	4616      	mov	r6, r2
 802c222:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802c226:	b087      	sub	sp, #28
 802c228:	ab03      	add	r3, sp, #12
 802c22a:	68a7      	ldr	r7, [r4, #8]
 802c22c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802c230:	4b6f      	ldr	r3, [pc, #444]	; (802c3f0 <_scanf_i+0x1dc>)
 802c232:	69a1      	ldr	r1, [r4, #24]
 802c234:	4a6f      	ldr	r2, [pc, #444]	; (802c3f4 <_scanf_i+0x1e0>)
 802c236:	2903      	cmp	r1, #3
 802c238:	bf08      	it	eq
 802c23a:	461a      	moveq	r2, r3
 802c23c:	1e7b      	subs	r3, r7, #1
 802c23e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 802c242:	bf84      	itt	hi
 802c244:	f240 135d 	movwhi	r3, #349	; 0x15d
 802c248:	60a3      	strhi	r3, [r4, #8]
 802c24a:	6823      	ldr	r3, [r4, #0]
 802c24c:	9200      	str	r2, [sp, #0]
 802c24e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802c252:	bf88      	it	hi
 802c254:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802c258:	f104 091c 	add.w	r9, r4, #28
 802c25c:	6023      	str	r3, [r4, #0]
 802c25e:	bf8c      	ite	hi
 802c260:	197f      	addhi	r7, r7, r5
 802c262:	2700      	movls	r7, #0
 802c264:	464b      	mov	r3, r9
 802c266:	f04f 0800 	mov.w	r8, #0
 802c26a:	9301      	str	r3, [sp, #4]
 802c26c:	6831      	ldr	r1, [r6, #0]
 802c26e:	ab03      	add	r3, sp, #12
 802c270:	2202      	movs	r2, #2
 802c272:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 802c276:	7809      	ldrb	r1, [r1, #0]
 802c278:	f7d3 ffc2 	bl	8000200 <memchr>
 802c27c:	9b01      	ldr	r3, [sp, #4]
 802c27e:	b330      	cbz	r0, 802c2ce <_scanf_i+0xba>
 802c280:	f1b8 0f01 	cmp.w	r8, #1
 802c284:	d15a      	bne.n	802c33c <_scanf_i+0x128>
 802c286:	6862      	ldr	r2, [r4, #4]
 802c288:	b92a      	cbnz	r2, 802c296 <_scanf_i+0x82>
 802c28a:	6822      	ldr	r2, [r4, #0]
 802c28c:	2108      	movs	r1, #8
 802c28e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802c292:	6061      	str	r1, [r4, #4]
 802c294:	6022      	str	r2, [r4, #0]
 802c296:	6822      	ldr	r2, [r4, #0]
 802c298:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802c29c:	6022      	str	r2, [r4, #0]
 802c29e:	68a2      	ldr	r2, [r4, #8]
 802c2a0:	1e51      	subs	r1, r2, #1
 802c2a2:	60a1      	str	r1, [r4, #8]
 802c2a4:	b19a      	cbz	r2, 802c2ce <_scanf_i+0xba>
 802c2a6:	6832      	ldr	r2, [r6, #0]
 802c2a8:	1c51      	adds	r1, r2, #1
 802c2aa:	6031      	str	r1, [r6, #0]
 802c2ac:	7812      	ldrb	r2, [r2, #0]
 802c2ae:	701a      	strb	r2, [r3, #0]
 802c2b0:	1c5d      	adds	r5, r3, #1
 802c2b2:	6873      	ldr	r3, [r6, #4]
 802c2b4:	3b01      	subs	r3, #1
 802c2b6:	2b00      	cmp	r3, #0
 802c2b8:	6073      	str	r3, [r6, #4]
 802c2ba:	dc07      	bgt.n	802c2cc <_scanf_i+0xb8>
 802c2bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802c2c0:	4631      	mov	r1, r6
 802c2c2:	4658      	mov	r0, fp
 802c2c4:	4798      	blx	r3
 802c2c6:	2800      	cmp	r0, #0
 802c2c8:	f040 8086 	bne.w	802c3d8 <_scanf_i+0x1c4>
 802c2cc:	462b      	mov	r3, r5
 802c2ce:	f108 0801 	add.w	r8, r8, #1
 802c2d2:	f1b8 0f03 	cmp.w	r8, #3
 802c2d6:	d1c8      	bne.n	802c26a <_scanf_i+0x56>
 802c2d8:	6862      	ldr	r2, [r4, #4]
 802c2da:	b90a      	cbnz	r2, 802c2e0 <_scanf_i+0xcc>
 802c2dc:	220a      	movs	r2, #10
 802c2de:	6062      	str	r2, [r4, #4]
 802c2e0:	6862      	ldr	r2, [r4, #4]
 802c2e2:	4945      	ldr	r1, [pc, #276]	; (802c3f8 <_scanf_i+0x1e4>)
 802c2e4:	6960      	ldr	r0, [r4, #20]
 802c2e6:	9301      	str	r3, [sp, #4]
 802c2e8:	1a89      	subs	r1, r1, r2
 802c2ea:	f000 f887 	bl	802c3fc <__sccl>
 802c2ee:	9b01      	ldr	r3, [sp, #4]
 802c2f0:	f04f 0800 	mov.w	r8, #0
 802c2f4:	461d      	mov	r5, r3
 802c2f6:	68a3      	ldr	r3, [r4, #8]
 802c2f8:	6822      	ldr	r2, [r4, #0]
 802c2fa:	2b00      	cmp	r3, #0
 802c2fc:	d03a      	beq.n	802c374 <_scanf_i+0x160>
 802c2fe:	6831      	ldr	r1, [r6, #0]
 802c300:	6960      	ldr	r0, [r4, #20]
 802c302:	f891 c000 	ldrb.w	ip, [r1]
 802c306:	f810 000c 	ldrb.w	r0, [r0, ip]
 802c30a:	2800      	cmp	r0, #0
 802c30c:	d032      	beq.n	802c374 <_scanf_i+0x160>
 802c30e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802c312:	d121      	bne.n	802c358 <_scanf_i+0x144>
 802c314:	0510      	lsls	r0, r2, #20
 802c316:	d51f      	bpl.n	802c358 <_scanf_i+0x144>
 802c318:	f108 0801 	add.w	r8, r8, #1
 802c31c:	b117      	cbz	r7, 802c324 <_scanf_i+0x110>
 802c31e:	3301      	adds	r3, #1
 802c320:	3f01      	subs	r7, #1
 802c322:	60a3      	str	r3, [r4, #8]
 802c324:	6873      	ldr	r3, [r6, #4]
 802c326:	3b01      	subs	r3, #1
 802c328:	2b00      	cmp	r3, #0
 802c32a:	6073      	str	r3, [r6, #4]
 802c32c:	dd1b      	ble.n	802c366 <_scanf_i+0x152>
 802c32e:	6833      	ldr	r3, [r6, #0]
 802c330:	3301      	adds	r3, #1
 802c332:	6033      	str	r3, [r6, #0]
 802c334:	68a3      	ldr	r3, [r4, #8]
 802c336:	3b01      	subs	r3, #1
 802c338:	60a3      	str	r3, [r4, #8]
 802c33a:	e7dc      	b.n	802c2f6 <_scanf_i+0xe2>
 802c33c:	f1b8 0f02 	cmp.w	r8, #2
 802c340:	d1ad      	bne.n	802c29e <_scanf_i+0x8a>
 802c342:	6822      	ldr	r2, [r4, #0]
 802c344:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802c348:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802c34c:	d1bf      	bne.n	802c2ce <_scanf_i+0xba>
 802c34e:	2110      	movs	r1, #16
 802c350:	6061      	str	r1, [r4, #4]
 802c352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c356:	e7a1      	b.n	802c29c <_scanf_i+0x88>
 802c358:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802c35c:	6022      	str	r2, [r4, #0]
 802c35e:	780b      	ldrb	r3, [r1, #0]
 802c360:	702b      	strb	r3, [r5, #0]
 802c362:	3501      	adds	r5, #1
 802c364:	e7de      	b.n	802c324 <_scanf_i+0x110>
 802c366:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802c36a:	4631      	mov	r1, r6
 802c36c:	4658      	mov	r0, fp
 802c36e:	4798      	blx	r3
 802c370:	2800      	cmp	r0, #0
 802c372:	d0df      	beq.n	802c334 <_scanf_i+0x120>
 802c374:	6823      	ldr	r3, [r4, #0]
 802c376:	05d9      	lsls	r1, r3, #23
 802c378:	d50c      	bpl.n	802c394 <_scanf_i+0x180>
 802c37a:	454d      	cmp	r5, r9
 802c37c:	d908      	bls.n	802c390 <_scanf_i+0x17c>
 802c37e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802c382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802c386:	4632      	mov	r2, r6
 802c388:	4658      	mov	r0, fp
 802c38a:	4798      	blx	r3
 802c38c:	1e6f      	subs	r7, r5, #1
 802c38e:	463d      	mov	r5, r7
 802c390:	454d      	cmp	r5, r9
 802c392:	d029      	beq.n	802c3e8 <_scanf_i+0x1d4>
 802c394:	6822      	ldr	r2, [r4, #0]
 802c396:	f012 0210 	ands.w	r2, r2, #16
 802c39a:	d113      	bne.n	802c3c4 <_scanf_i+0x1b0>
 802c39c:	702a      	strb	r2, [r5, #0]
 802c39e:	6863      	ldr	r3, [r4, #4]
 802c3a0:	9e00      	ldr	r6, [sp, #0]
 802c3a2:	4649      	mov	r1, r9
 802c3a4:	4658      	mov	r0, fp
 802c3a6:	47b0      	blx	r6
 802c3a8:	f8da 3000 	ldr.w	r3, [sl]
 802c3ac:	6821      	ldr	r1, [r4, #0]
 802c3ae:	1d1a      	adds	r2, r3, #4
 802c3b0:	f8ca 2000 	str.w	r2, [sl]
 802c3b4:	f011 0f20 	tst.w	r1, #32
 802c3b8:	681b      	ldr	r3, [r3, #0]
 802c3ba:	d010      	beq.n	802c3de <_scanf_i+0x1ca>
 802c3bc:	6018      	str	r0, [r3, #0]
 802c3be:	68e3      	ldr	r3, [r4, #12]
 802c3c0:	3301      	adds	r3, #1
 802c3c2:	60e3      	str	r3, [r4, #12]
 802c3c4:	eba5 0509 	sub.w	r5, r5, r9
 802c3c8:	44a8      	add	r8, r5
 802c3ca:	6925      	ldr	r5, [r4, #16]
 802c3cc:	4445      	add	r5, r8
 802c3ce:	6125      	str	r5, [r4, #16]
 802c3d0:	2000      	movs	r0, #0
 802c3d2:	b007      	add	sp, #28
 802c3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c3d8:	f04f 0800 	mov.w	r8, #0
 802c3dc:	e7ca      	b.n	802c374 <_scanf_i+0x160>
 802c3de:	07ca      	lsls	r2, r1, #31
 802c3e0:	bf4c      	ite	mi
 802c3e2:	8018      	strhmi	r0, [r3, #0]
 802c3e4:	6018      	strpl	r0, [r3, #0]
 802c3e6:	e7ea      	b.n	802c3be <_scanf_i+0x1aa>
 802c3e8:	2001      	movs	r0, #1
 802c3ea:	e7f2      	b.n	802c3d2 <_scanf_i+0x1be>
 802c3ec:	0802d134 	.word	0x0802d134
 802c3f0:	0802c559 	.word	0x0802c559
 802c3f4:	0802c671 	.word	0x0802c671
 802c3f8:	08047ddd 	.word	0x08047ddd

0802c3fc <__sccl>:
 802c3fc:	b570      	push	{r4, r5, r6, lr}
 802c3fe:	780b      	ldrb	r3, [r1, #0]
 802c400:	2b5e      	cmp	r3, #94	; 0x5e
 802c402:	bf13      	iteet	ne
 802c404:	1c4a      	addne	r2, r1, #1
 802c406:	1c8a      	addeq	r2, r1, #2
 802c408:	784b      	ldrbeq	r3, [r1, #1]
 802c40a:	2100      	movne	r1, #0
 802c40c:	bf08      	it	eq
 802c40e:	2101      	moveq	r1, #1
 802c410:	1e44      	subs	r4, r0, #1
 802c412:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 802c416:	f804 1f01 	strb.w	r1, [r4, #1]!
 802c41a:	42ac      	cmp	r4, r5
 802c41c:	d1fb      	bne.n	802c416 <__sccl+0x1a>
 802c41e:	b913      	cbnz	r3, 802c426 <__sccl+0x2a>
 802c420:	3a01      	subs	r2, #1
 802c422:	4610      	mov	r0, r2
 802c424:	bd70      	pop	{r4, r5, r6, pc}
 802c426:	f081 0401 	eor.w	r4, r1, #1
 802c42a:	54c4      	strb	r4, [r0, r3]
 802c42c:	1c51      	adds	r1, r2, #1
 802c42e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 802c432:	2d2d      	cmp	r5, #45	; 0x2d
 802c434:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 802c438:	460a      	mov	r2, r1
 802c43a:	d006      	beq.n	802c44a <__sccl+0x4e>
 802c43c:	2d5d      	cmp	r5, #93	; 0x5d
 802c43e:	d0f0      	beq.n	802c422 <__sccl+0x26>
 802c440:	b90d      	cbnz	r5, 802c446 <__sccl+0x4a>
 802c442:	4632      	mov	r2, r6
 802c444:	e7ed      	b.n	802c422 <__sccl+0x26>
 802c446:	462b      	mov	r3, r5
 802c448:	e7ef      	b.n	802c42a <__sccl+0x2e>
 802c44a:	780e      	ldrb	r6, [r1, #0]
 802c44c:	2e5d      	cmp	r6, #93	; 0x5d
 802c44e:	d0fa      	beq.n	802c446 <__sccl+0x4a>
 802c450:	42b3      	cmp	r3, r6
 802c452:	dcf8      	bgt.n	802c446 <__sccl+0x4a>
 802c454:	3301      	adds	r3, #1
 802c456:	429e      	cmp	r6, r3
 802c458:	54c4      	strb	r4, [r0, r3]
 802c45a:	dcfb      	bgt.n	802c454 <__sccl+0x58>
 802c45c:	3102      	adds	r1, #2
 802c45e:	e7e6      	b.n	802c42e <__sccl+0x32>

0802c460 <_strtol_l.isra.0>:
 802c460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c464:	4680      	mov	r8, r0
 802c466:	4689      	mov	r9, r1
 802c468:	4692      	mov	sl, r2
 802c46a:	461e      	mov	r6, r3
 802c46c:	460f      	mov	r7, r1
 802c46e:	463d      	mov	r5, r7
 802c470:	9808      	ldr	r0, [sp, #32]
 802c472:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c476:	f000 f947 	bl	802c708 <__locale_ctype_ptr_l>
 802c47a:	4420      	add	r0, r4
 802c47c:	7843      	ldrb	r3, [r0, #1]
 802c47e:	f013 0308 	ands.w	r3, r3, #8
 802c482:	d132      	bne.n	802c4ea <_strtol_l.isra.0+0x8a>
 802c484:	2c2d      	cmp	r4, #45	; 0x2d
 802c486:	d132      	bne.n	802c4ee <_strtol_l.isra.0+0x8e>
 802c488:	787c      	ldrb	r4, [r7, #1]
 802c48a:	1cbd      	adds	r5, r7, #2
 802c48c:	2201      	movs	r2, #1
 802c48e:	2e00      	cmp	r6, #0
 802c490:	d05d      	beq.n	802c54e <_strtol_l.isra.0+0xee>
 802c492:	2e10      	cmp	r6, #16
 802c494:	d109      	bne.n	802c4aa <_strtol_l.isra.0+0x4a>
 802c496:	2c30      	cmp	r4, #48	; 0x30
 802c498:	d107      	bne.n	802c4aa <_strtol_l.isra.0+0x4a>
 802c49a:	782b      	ldrb	r3, [r5, #0]
 802c49c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802c4a0:	2b58      	cmp	r3, #88	; 0x58
 802c4a2:	d14f      	bne.n	802c544 <_strtol_l.isra.0+0xe4>
 802c4a4:	786c      	ldrb	r4, [r5, #1]
 802c4a6:	2610      	movs	r6, #16
 802c4a8:	3502      	adds	r5, #2
 802c4aa:	2a00      	cmp	r2, #0
 802c4ac:	bf14      	ite	ne
 802c4ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 802c4b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 802c4b6:	2700      	movs	r7, #0
 802c4b8:	fbb1 fcf6 	udiv	ip, r1, r6
 802c4bc:	4638      	mov	r0, r7
 802c4be:	fb06 1e1c 	mls	lr, r6, ip, r1
 802c4c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802c4c6:	2b09      	cmp	r3, #9
 802c4c8:	d817      	bhi.n	802c4fa <_strtol_l.isra.0+0x9a>
 802c4ca:	461c      	mov	r4, r3
 802c4cc:	42a6      	cmp	r6, r4
 802c4ce:	dd23      	ble.n	802c518 <_strtol_l.isra.0+0xb8>
 802c4d0:	1c7b      	adds	r3, r7, #1
 802c4d2:	d007      	beq.n	802c4e4 <_strtol_l.isra.0+0x84>
 802c4d4:	4584      	cmp	ip, r0
 802c4d6:	d31c      	bcc.n	802c512 <_strtol_l.isra.0+0xb2>
 802c4d8:	d101      	bne.n	802c4de <_strtol_l.isra.0+0x7e>
 802c4da:	45a6      	cmp	lr, r4
 802c4dc:	db19      	blt.n	802c512 <_strtol_l.isra.0+0xb2>
 802c4de:	fb00 4006 	mla	r0, r0, r6, r4
 802c4e2:	2701      	movs	r7, #1
 802c4e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c4e8:	e7eb      	b.n	802c4c2 <_strtol_l.isra.0+0x62>
 802c4ea:	462f      	mov	r7, r5
 802c4ec:	e7bf      	b.n	802c46e <_strtol_l.isra.0+0xe>
 802c4ee:	2c2b      	cmp	r4, #43	; 0x2b
 802c4f0:	bf04      	itt	eq
 802c4f2:	1cbd      	addeq	r5, r7, #2
 802c4f4:	787c      	ldrbeq	r4, [r7, #1]
 802c4f6:	461a      	mov	r2, r3
 802c4f8:	e7c9      	b.n	802c48e <_strtol_l.isra.0+0x2e>
 802c4fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 802c4fe:	2b19      	cmp	r3, #25
 802c500:	d801      	bhi.n	802c506 <_strtol_l.isra.0+0xa6>
 802c502:	3c37      	subs	r4, #55	; 0x37
 802c504:	e7e2      	b.n	802c4cc <_strtol_l.isra.0+0x6c>
 802c506:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 802c50a:	2b19      	cmp	r3, #25
 802c50c:	d804      	bhi.n	802c518 <_strtol_l.isra.0+0xb8>
 802c50e:	3c57      	subs	r4, #87	; 0x57
 802c510:	e7dc      	b.n	802c4cc <_strtol_l.isra.0+0x6c>
 802c512:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802c516:	e7e5      	b.n	802c4e4 <_strtol_l.isra.0+0x84>
 802c518:	1c7b      	adds	r3, r7, #1
 802c51a:	d108      	bne.n	802c52e <_strtol_l.isra.0+0xce>
 802c51c:	2322      	movs	r3, #34	; 0x22
 802c51e:	f8c8 3000 	str.w	r3, [r8]
 802c522:	4608      	mov	r0, r1
 802c524:	f1ba 0f00 	cmp.w	sl, #0
 802c528:	d107      	bne.n	802c53a <_strtol_l.isra.0+0xda>
 802c52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c52e:	b102      	cbz	r2, 802c532 <_strtol_l.isra.0+0xd2>
 802c530:	4240      	negs	r0, r0
 802c532:	f1ba 0f00 	cmp.w	sl, #0
 802c536:	d0f8      	beq.n	802c52a <_strtol_l.isra.0+0xca>
 802c538:	b10f      	cbz	r7, 802c53e <_strtol_l.isra.0+0xde>
 802c53a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 802c53e:	f8ca 9000 	str.w	r9, [sl]
 802c542:	e7f2      	b.n	802c52a <_strtol_l.isra.0+0xca>
 802c544:	2430      	movs	r4, #48	; 0x30
 802c546:	2e00      	cmp	r6, #0
 802c548:	d1af      	bne.n	802c4aa <_strtol_l.isra.0+0x4a>
 802c54a:	2608      	movs	r6, #8
 802c54c:	e7ad      	b.n	802c4aa <_strtol_l.isra.0+0x4a>
 802c54e:	2c30      	cmp	r4, #48	; 0x30
 802c550:	d0a3      	beq.n	802c49a <_strtol_l.isra.0+0x3a>
 802c552:	260a      	movs	r6, #10
 802c554:	e7a9      	b.n	802c4aa <_strtol_l.isra.0+0x4a>
	...

0802c558 <_strtol_r>:
 802c558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c55a:	4c06      	ldr	r4, [pc, #24]	; (802c574 <_strtol_r+0x1c>)
 802c55c:	4d06      	ldr	r5, [pc, #24]	; (802c578 <_strtol_r+0x20>)
 802c55e:	6824      	ldr	r4, [r4, #0]
 802c560:	6a24      	ldr	r4, [r4, #32]
 802c562:	2c00      	cmp	r4, #0
 802c564:	bf08      	it	eq
 802c566:	462c      	moveq	r4, r5
 802c568:	9400      	str	r4, [sp, #0]
 802c56a:	f7ff ff79 	bl	802c460 <_strtol_l.isra.0>
 802c56e:	b003      	add	sp, #12
 802c570:	bd30      	pop	{r4, r5, pc}
 802c572:	bf00      	nop
 802c574:	2000285c 	.word	0x2000285c
 802c578:	200028c0 	.word	0x200028c0

0802c57c <_strtoul_l.isra.0>:
 802c57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c580:	4680      	mov	r8, r0
 802c582:	4689      	mov	r9, r1
 802c584:	4692      	mov	sl, r2
 802c586:	461e      	mov	r6, r3
 802c588:	460f      	mov	r7, r1
 802c58a:	463d      	mov	r5, r7
 802c58c:	9808      	ldr	r0, [sp, #32]
 802c58e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c592:	f000 f8b9 	bl	802c708 <__locale_ctype_ptr_l>
 802c596:	4420      	add	r0, r4
 802c598:	7843      	ldrb	r3, [r0, #1]
 802c59a:	f013 0308 	ands.w	r3, r3, #8
 802c59e:	d130      	bne.n	802c602 <_strtoul_l.isra.0+0x86>
 802c5a0:	2c2d      	cmp	r4, #45	; 0x2d
 802c5a2:	d130      	bne.n	802c606 <_strtoul_l.isra.0+0x8a>
 802c5a4:	787c      	ldrb	r4, [r7, #1]
 802c5a6:	1cbd      	adds	r5, r7, #2
 802c5a8:	2101      	movs	r1, #1
 802c5aa:	2e00      	cmp	r6, #0
 802c5ac:	d05c      	beq.n	802c668 <_strtoul_l.isra.0+0xec>
 802c5ae:	2e10      	cmp	r6, #16
 802c5b0:	d109      	bne.n	802c5c6 <_strtoul_l.isra.0+0x4a>
 802c5b2:	2c30      	cmp	r4, #48	; 0x30
 802c5b4:	d107      	bne.n	802c5c6 <_strtoul_l.isra.0+0x4a>
 802c5b6:	782b      	ldrb	r3, [r5, #0]
 802c5b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802c5bc:	2b58      	cmp	r3, #88	; 0x58
 802c5be:	d14e      	bne.n	802c65e <_strtoul_l.isra.0+0xe2>
 802c5c0:	786c      	ldrb	r4, [r5, #1]
 802c5c2:	2610      	movs	r6, #16
 802c5c4:	3502      	adds	r5, #2
 802c5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802c5ca:	2300      	movs	r3, #0
 802c5cc:	fbb2 f2f6 	udiv	r2, r2, r6
 802c5d0:	fb06 fc02 	mul.w	ip, r6, r2
 802c5d4:	ea6f 0c0c 	mvn.w	ip, ip
 802c5d8:	4618      	mov	r0, r3
 802c5da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802c5de:	2f09      	cmp	r7, #9
 802c5e0:	d817      	bhi.n	802c612 <_strtoul_l.isra.0+0x96>
 802c5e2:	463c      	mov	r4, r7
 802c5e4:	42a6      	cmp	r6, r4
 802c5e6:	dd23      	ble.n	802c630 <_strtoul_l.isra.0+0xb4>
 802c5e8:	2b00      	cmp	r3, #0
 802c5ea:	db1e      	blt.n	802c62a <_strtoul_l.isra.0+0xae>
 802c5ec:	4282      	cmp	r2, r0
 802c5ee:	d31c      	bcc.n	802c62a <_strtoul_l.isra.0+0xae>
 802c5f0:	d101      	bne.n	802c5f6 <_strtoul_l.isra.0+0x7a>
 802c5f2:	45a4      	cmp	ip, r4
 802c5f4:	db19      	blt.n	802c62a <_strtoul_l.isra.0+0xae>
 802c5f6:	fb00 4006 	mla	r0, r0, r6, r4
 802c5fa:	2301      	movs	r3, #1
 802c5fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c600:	e7eb      	b.n	802c5da <_strtoul_l.isra.0+0x5e>
 802c602:	462f      	mov	r7, r5
 802c604:	e7c1      	b.n	802c58a <_strtoul_l.isra.0+0xe>
 802c606:	2c2b      	cmp	r4, #43	; 0x2b
 802c608:	bf04      	itt	eq
 802c60a:	1cbd      	addeq	r5, r7, #2
 802c60c:	787c      	ldrbeq	r4, [r7, #1]
 802c60e:	4619      	mov	r1, r3
 802c610:	e7cb      	b.n	802c5aa <_strtoul_l.isra.0+0x2e>
 802c612:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802c616:	2f19      	cmp	r7, #25
 802c618:	d801      	bhi.n	802c61e <_strtoul_l.isra.0+0xa2>
 802c61a:	3c37      	subs	r4, #55	; 0x37
 802c61c:	e7e2      	b.n	802c5e4 <_strtoul_l.isra.0+0x68>
 802c61e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802c622:	2f19      	cmp	r7, #25
 802c624:	d804      	bhi.n	802c630 <_strtoul_l.isra.0+0xb4>
 802c626:	3c57      	subs	r4, #87	; 0x57
 802c628:	e7dc      	b.n	802c5e4 <_strtoul_l.isra.0+0x68>
 802c62a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802c62e:	e7e5      	b.n	802c5fc <_strtoul_l.isra.0+0x80>
 802c630:	2b00      	cmp	r3, #0
 802c632:	da09      	bge.n	802c648 <_strtoul_l.isra.0+0xcc>
 802c634:	2322      	movs	r3, #34	; 0x22
 802c636:	f8c8 3000 	str.w	r3, [r8]
 802c63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c63e:	f1ba 0f00 	cmp.w	sl, #0
 802c642:	d107      	bne.n	802c654 <_strtoul_l.isra.0+0xd8>
 802c644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c648:	b101      	cbz	r1, 802c64c <_strtoul_l.isra.0+0xd0>
 802c64a:	4240      	negs	r0, r0
 802c64c:	f1ba 0f00 	cmp.w	sl, #0
 802c650:	d0f8      	beq.n	802c644 <_strtoul_l.isra.0+0xc8>
 802c652:	b10b      	cbz	r3, 802c658 <_strtoul_l.isra.0+0xdc>
 802c654:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 802c658:	f8ca 9000 	str.w	r9, [sl]
 802c65c:	e7f2      	b.n	802c644 <_strtoul_l.isra.0+0xc8>
 802c65e:	2430      	movs	r4, #48	; 0x30
 802c660:	2e00      	cmp	r6, #0
 802c662:	d1b0      	bne.n	802c5c6 <_strtoul_l.isra.0+0x4a>
 802c664:	2608      	movs	r6, #8
 802c666:	e7ae      	b.n	802c5c6 <_strtoul_l.isra.0+0x4a>
 802c668:	2c30      	cmp	r4, #48	; 0x30
 802c66a:	d0a4      	beq.n	802c5b6 <_strtoul_l.isra.0+0x3a>
 802c66c:	260a      	movs	r6, #10
 802c66e:	e7aa      	b.n	802c5c6 <_strtoul_l.isra.0+0x4a>

0802c670 <_strtoul_r>:
 802c670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c672:	4c06      	ldr	r4, [pc, #24]	; (802c68c <_strtoul_r+0x1c>)
 802c674:	4d06      	ldr	r5, [pc, #24]	; (802c690 <_strtoul_r+0x20>)
 802c676:	6824      	ldr	r4, [r4, #0]
 802c678:	6a24      	ldr	r4, [r4, #32]
 802c67a:	2c00      	cmp	r4, #0
 802c67c:	bf08      	it	eq
 802c67e:	462c      	moveq	r4, r5
 802c680:	9400      	str	r4, [sp, #0]
 802c682:	f7ff ff7b 	bl	802c57c <_strtoul_l.isra.0>
 802c686:	b003      	add	sp, #12
 802c688:	bd30      	pop	{r4, r5, pc}
 802c68a:	bf00      	nop
 802c68c:	2000285c 	.word	0x2000285c
 802c690:	200028c0 	.word	0x200028c0

0802c694 <__submore>:
 802c694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c698:	460c      	mov	r4, r1
 802c69a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802c69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c6a0:	4299      	cmp	r1, r3
 802c6a2:	d11d      	bne.n	802c6e0 <__submore+0x4c>
 802c6a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802c6a8:	f7fd fbe6 	bl	8029e78 <_malloc_r>
 802c6ac:	b918      	cbnz	r0, 802c6b6 <__submore+0x22>
 802c6ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c6b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c6ba:	63a3      	str	r3, [r4, #56]	; 0x38
 802c6bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802c6c0:	6360      	str	r0, [r4, #52]	; 0x34
 802c6c2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802c6c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802c6ca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802c6ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802c6d2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802c6d6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802c6da:	6020      	str	r0, [r4, #0]
 802c6dc:	2000      	movs	r0, #0
 802c6de:	e7e8      	b.n	802c6b2 <__submore+0x1e>
 802c6e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802c6e2:	0077      	lsls	r7, r6, #1
 802c6e4:	463a      	mov	r2, r7
 802c6e6:	f000 f84c 	bl	802c782 <_realloc_r>
 802c6ea:	4605      	mov	r5, r0
 802c6ec:	2800      	cmp	r0, #0
 802c6ee:	d0de      	beq.n	802c6ae <__submore+0x1a>
 802c6f0:	eb00 0806 	add.w	r8, r0, r6
 802c6f4:	4601      	mov	r1, r0
 802c6f6:	4632      	mov	r2, r6
 802c6f8:	4640      	mov	r0, r8
 802c6fa:	f7fd fb5b 	bl	8029db4 <memcpy>
 802c6fe:	f8c4 8000 	str.w	r8, [r4]
 802c702:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802c706:	e7e9      	b.n	802c6dc <__submore+0x48>

0802c708 <__locale_ctype_ptr_l>:
 802c708:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 802c70c:	4770      	bx	lr
	...

0802c710 <__locale_ctype_ptr>:
 802c710:	4b04      	ldr	r3, [pc, #16]	; (802c724 <__locale_ctype_ptr+0x14>)
 802c712:	4a05      	ldr	r2, [pc, #20]	; (802c728 <__locale_ctype_ptr+0x18>)
 802c714:	681b      	ldr	r3, [r3, #0]
 802c716:	6a1b      	ldr	r3, [r3, #32]
 802c718:	2b00      	cmp	r3, #0
 802c71a:	bf08      	it	eq
 802c71c:	4613      	moveq	r3, r2
 802c71e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 802c722:	4770      	bx	lr
 802c724:	2000285c 	.word	0x2000285c
 802c728:	200028c0 	.word	0x200028c0

0802c72c <__ascii_mbtowc>:
 802c72c:	b082      	sub	sp, #8
 802c72e:	b901      	cbnz	r1, 802c732 <__ascii_mbtowc+0x6>
 802c730:	a901      	add	r1, sp, #4
 802c732:	b142      	cbz	r2, 802c746 <__ascii_mbtowc+0x1a>
 802c734:	b14b      	cbz	r3, 802c74a <__ascii_mbtowc+0x1e>
 802c736:	7813      	ldrb	r3, [r2, #0]
 802c738:	600b      	str	r3, [r1, #0]
 802c73a:	7812      	ldrb	r2, [r2, #0]
 802c73c:	1c10      	adds	r0, r2, #0
 802c73e:	bf18      	it	ne
 802c740:	2001      	movne	r0, #1
 802c742:	b002      	add	sp, #8
 802c744:	4770      	bx	lr
 802c746:	4610      	mov	r0, r2
 802c748:	e7fb      	b.n	802c742 <__ascii_mbtowc+0x16>
 802c74a:	f06f 0001 	mvn.w	r0, #1
 802c74e:	e7f8      	b.n	802c742 <__ascii_mbtowc+0x16>

0802c750 <memmove>:
 802c750:	4288      	cmp	r0, r1
 802c752:	b510      	push	{r4, lr}
 802c754:	eb01 0302 	add.w	r3, r1, r2
 802c758:	d807      	bhi.n	802c76a <memmove+0x1a>
 802c75a:	1e42      	subs	r2, r0, #1
 802c75c:	4299      	cmp	r1, r3
 802c75e:	d00a      	beq.n	802c776 <memmove+0x26>
 802c760:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c764:	f802 4f01 	strb.w	r4, [r2, #1]!
 802c768:	e7f8      	b.n	802c75c <memmove+0xc>
 802c76a:	4283      	cmp	r3, r0
 802c76c:	d9f5      	bls.n	802c75a <memmove+0xa>
 802c76e:	1881      	adds	r1, r0, r2
 802c770:	1ad2      	subs	r2, r2, r3
 802c772:	42d3      	cmn	r3, r2
 802c774:	d100      	bne.n	802c778 <memmove+0x28>
 802c776:	bd10      	pop	{r4, pc}
 802c778:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c77c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802c780:	e7f7      	b.n	802c772 <memmove+0x22>

0802c782 <_realloc_r>:
 802c782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c784:	4607      	mov	r7, r0
 802c786:	4614      	mov	r4, r2
 802c788:	460e      	mov	r6, r1
 802c78a:	b921      	cbnz	r1, 802c796 <_realloc_r+0x14>
 802c78c:	4611      	mov	r1, r2
 802c78e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802c792:	f7fd bb71 	b.w	8029e78 <_malloc_r>
 802c796:	b922      	cbnz	r2, 802c7a2 <_realloc_r+0x20>
 802c798:	f7fd fb20 	bl	8029ddc <_free_r>
 802c79c:	4625      	mov	r5, r4
 802c79e:	4628      	mov	r0, r5
 802c7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c7a2:	f000 f821 	bl	802c7e8 <_malloc_usable_size_r>
 802c7a6:	42a0      	cmp	r0, r4
 802c7a8:	d20f      	bcs.n	802c7ca <_realloc_r+0x48>
 802c7aa:	4621      	mov	r1, r4
 802c7ac:	4638      	mov	r0, r7
 802c7ae:	f7fd fb63 	bl	8029e78 <_malloc_r>
 802c7b2:	4605      	mov	r5, r0
 802c7b4:	2800      	cmp	r0, #0
 802c7b6:	d0f2      	beq.n	802c79e <_realloc_r+0x1c>
 802c7b8:	4631      	mov	r1, r6
 802c7ba:	4622      	mov	r2, r4
 802c7bc:	f7fd fafa 	bl	8029db4 <memcpy>
 802c7c0:	4631      	mov	r1, r6
 802c7c2:	4638      	mov	r0, r7
 802c7c4:	f7fd fb0a 	bl	8029ddc <_free_r>
 802c7c8:	e7e9      	b.n	802c79e <_realloc_r+0x1c>
 802c7ca:	4635      	mov	r5, r6
 802c7cc:	e7e7      	b.n	802c79e <_realloc_r+0x1c>

0802c7ce <__ascii_wctomb>:
 802c7ce:	b149      	cbz	r1, 802c7e4 <__ascii_wctomb+0x16>
 802c7d0:	2aff      	cmp	r2, #255	; 0xff
 802c7d2:	bf85      	ittet	hi
 802c7d4:	238a      	movhi	r3, #138	; 0x8a
 802c7d6:	6003      	strhi	r3, [r0, #0]
 802c7d8:	700a      	strbls	r2, [r1, #0]
 802c7da:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802c7de:	bf98      	it	ls
 802c7e0:	2001      	movls	r0, #1
 802c7e2:	4770      	bx	lr
 802c7e4:	4608      	mov	r0, r1
 802c7e6:	4770      	bx	lr

0802c7e8 <_malloc_usable_size_r>:
 802c7e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c7ec:	1f18      	subs	r0, r3, #4
 802c7ee:	2b00      	cmp	r3, #0
 802c7f0:	bfbc      	itt	lt
 802c7f2:	580b      	ldrlt	r3, [r1, r0]
 802c7f4:	18c0      	addlt	r0, r0, r3
 802c7f6:	4770      	bx	lr

0802c7f8 <_init>:
 802c7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c7fa:	bf00      	nop
 802c7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c7fe:	bc08      	pop	{r3}
 802c800:	469e      	mov	lr, r3
 802c802:	4770      	bx	lr

0802c804 <_fini>:
 802c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c806:	bf00      	nop
 802c808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c80a:	bc08      	pop	{r3}
 802c80c:	469e      	mov	lr, r3
 802c80e:	4770      	bx	lr
